
STM32H750B-DK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .bootloader   0000227c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .isr_vector   00000298  90000000  90000000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000239f0  900002a0  900002a0  000042a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00003268  90023c90  90023c90  00027c90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 000001b8  90026ef8  90026ef8  0002aef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM.extab    00000000  900270b0  900270b0  00073e00  2**0
                  CONTENTS
  6 .ARM          00000008  900270b0  900270b0  0002b0b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .preinit_array 00000000  900270b8  900270b8  00073e00  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .init_array   0000001c  900270b8  900270b8  0002b0b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .fini_array   00000008  900270d4  900270d4  0002b0d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .data         00000140  24000000  900270dc  0002c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 CCMRAM        00005a00  24000140  9002721c  0002c140  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .bss          00020bac  24005b40  9002cc1c  00031b40  2**3
                  ALLOC
 13 ._user_heap_stack 00002004  240266ec  9002cc1c  000326ec  2**0
                  ALLOC
 14 .ARM.attributes 0000002e  00000000  00000000  00073e00  2**0
                  CONTENTS, READONLY
 15 FontFlashSection 00002198  90200000  90200000  00032000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 TextFlashSection 00000068  90202198  90202198  00034198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 17 ExtFlashSection 0003fc00  90202200  90202200  00034200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 18 TouchGFX_Framebuffer 000bf400  d0000000  d0000000  00074000  2**2
                  ALLOC
 19 Video_RGB_Buffer 00043800  d00bf400  d00bf400  00074000  2**2
                  ALLOC
 20 .debug_line   0007540a  00000000  00000000  00073e2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000e9238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_info   000c70c2  00000000  00000000  000e9299  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_abbrev 00015972  00000000  00000000  001b035b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_aranges 000032e0  00000000  00000000  001c5cd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_str    0019b440  00000000  00000000  001c8fb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_rnglists 00006158  00000000  00000000  003643f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 27 .debug_loclists 00035e7f  00000000  00000000  0036a548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 28 .debug_macro  0004a1de  00000000  00000000  003a03c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 29 .comment      000000c2  00000000  00000000  003ea5a5  2**0
                  CONTENTS, READONLY
 30 .debug_frame  00009eb8  00000000  00000000  003ea668  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

900002a0 <__do_global_dtors_aux>:
900002a0:	b510      	push	{r4, lr}
900002a2:	4c05      	ldr	r4, [pc, #20]	@ (900002b8 <__do_global_dtors_aux+0x18>)
900002a4:	7823      	ldrb	r3, [r4, #0]
900002a6:	b933      	cbnz	r3, 900002b6 <__do_global_dtors_aux+0x16>
900002a8:	4b04      	ldr	r3, [pc, #16]	@ (900002bc <__do_global_dtors_aux+0x1c>)
900002aa:	b113      	cbz	r3, 900002b2 <__do_global_dtors_aux+0x12>
900002ac:	4804      	ldr	r0, [pc, #16]	@ (900002c0 <__do_global_dtors_aux+0x20>)
900002ae:	f3af 8000 	nop.w
900002b2:	2301      	movs	r3, #1
900002b4:	7023      	strb	r3, [r4, #0]
900002b6:	bd10      	pop	{r4, pc}
900002b8:	24005b40 	.word	0x24005b40
900002bc:	00000000 	.word	0x00000000
900002c0:	90023c78 	.word	0x90023c78

900002c4 <frame_dummy>:
900002c4:	b508      	push	{r3, lr}
900002c6:	4b03      	ldr	r3, [pc, #12]	@ (900002d4 <frame_dummy+0x10>)
900002c8:	b11b      	cbz	r3, 900002d2 <frame_dummy+0xe>
900002ca:	4903      	ldr	r1, [pc, #12]	@ (900002d8 <frame_dummy+0x14>)
900002cc:	4803      	ldr	r0, [pc, #12]	@ (900002dc <frame_dummy+0x18>)
900002ce:	f3af 8000 	nop.w
900002d2:	bd08      	pop	{r3, pc}
900002d4:	00000000 	.word	0x00000000
900002d8:	24005b44 	.word	0x24005b44
900002dc:	90023c78 	.word	0x90023c78

900002e0 <memchr>:
900002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
900002e4:	2a10      	cmp	r2, #16
900002e6:	db2b      	blt.n	90000340 <memchr+0x60>
900002e8:	f010 0f07 	tst.w	r0, #7
900002ec:	d008      	beq.n	90000300 <memchr+0x20>
900002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
900002f2:	3a01      	subs	r2, #1
900002f4:	428b      	cmp	r3, r1
900002f6:	d02d      	beq.n	90000354 <memchr+0x74>
900002f8:	f010 0f07 	tst.w	r0, #7
900002fc:	b342      	cbz	r2, 90000350 <memchr+0x70>
900002fe:	d1f6      	bne.n	900002ee <memchr+0xe>
90000300:	b4f0      	push	{r4, r5, r6, r7}
90000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
90000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
9000030a:	f022 0407 	bic.w	r4, r2, #7
9000030e:	f07f 0700 	mvns.w	r7, #0
90000312:	2300      	movs	r3, #0
90000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
90000318:	3c08      	subs	r4, #8
9000031a:	ea85 0501 	eor.w	r5, r5, r1
9000031e:	ea86 0601 	eor.w	r6, r6, r1
90000322:	fa85 f547 	uadd8	r5, r5, r7
90000326:	faa3 f587 	sel	r5, r3, r7
9000032a:	fa86 f647 	uadd8	r6, r6, r7
9000032e:	faa5 f687 	sel	r6, r5, r7
90000332:	b98e      	cbnz	r6, 90000358 <memchr+0x78>
90000334:	d1ee      	bne.n	90000314 <memchr+0x34>
90000336:	bcf0      	pop	{r4, r5, r6, r7}
90000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
9000033c:	f002 0207 	and.w	r2, r2, #7
90000340:	b132      	cbz	r2, 90000350 <memchr+0x70>
90000342:	f810 3b01 	ldrb.w	r3, [r0], #1
90000346:	3a01      	subs	r2, #1
90000348:	ea83 0301 	eor.w	r3, r3, r1
9000034c:	b113      	cbz	r3, 90000354 <memchr+0x74>
9000034e:	d1f8      	bne.n	90000342 <memchr+0x62>
90000350:	2000      	movs	r0, #0
90000352:	4770      	bx	lr
90000354:	3801      	subs	r0, #1
90000356:	4770      	bx	lr
90000358:	2d00      	cmp	r5, #0
9000035a:	bf06      	itte	eq
9000035c:	4635      	moveq	r5, r6
9000035e:	3803      	subeq	r0, #3
90000360:	3807      	subne	r0, #7
90000362:	f015 0f01 	tst.w	r5, #1
90000366:	d107      	bne.n	90000378 <memchr+0x98>
90000368:	3001      	adds	r0, #1
9000036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
9000036e:	bf02      	ittt	eq
90000370:	3001      	addeq	r0, #1
90000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
90000376:	3001      	addeq	r0, #1
90000378:	bcf0      	pop	{r4, r5, r6, r7}
9000037a:	3801      	subs	r0, #1
9000037c:	4770      	bx	lr
9000037e:	bf00      	nop

90000380 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
90000380:	f8df d034 	ldr.w	sp, [pc, #52]	@ 900003b8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
90000384:	2100      	movs	r1, #0
  b  LoopCopyDataInit
90000386:	e003      	b.n	90000390 <LoopCopyDataInit>

90000388 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
90000388:	4b0c      	ldr	r3, [pc, #48]	@ (900003bc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
9000038a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
9000038c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
9000038e:	3104      	adds	r1, #4

90000390 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
90000390:	480b      	ldr	r0, [pc, #44]	@ (900003c0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
90000392:	4b0c      	ldr	r3, [pc, #48]	@ (900003c4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
90000394:	1842      	adds	r2, r0, r1
  cmp  r2, r3
90000396:	429a      	cmp	r2, r3
  bcc  CopyDataInit
90000398:	d3f6      	bcc.n	90000388 <CopyDataInit>
  ldr  r2, =_sbss
9000039a:	4a0b      	ldr	r2, [pc, #44]	@ (900003c8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
9000039c:	e002      	b.n	900003a4 <LoopFillZerobss>

9000039e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
9000039e:	2300      	movs	r3, #0
  str  r3, [r2], #4
900003a0:	f842 3b04 	str.w	r3, [r2], #4

900003a4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
900003a4:	4b09      	ldr	r3, [pc, #36]	@ (900003cc <LoopFillZerobss+0x28>)
  cmp  r2, r3
900003a6:	429a      	cmp	r2, r3
  bcc  FillZerobss
900003a8:	d3f9      	bcc.n	9000039e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
900003aa:	f006 fe63 	bl	90007074 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
900003ae:	f022 ff87 	bl	900232c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
900003b2:	f000 f971 	bl	90000698 <main>
  bx  lr    
900003b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
900003b8:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
900003bc:	900270dc 	.word	0x900270dc
  ldr  r0, =_sdata
900003c0:	24000000 	.word	0x24000000
  ldr  r3, =_edata
900003c4:	24000140 	.word	0x24000140
  ldr  r2, =_sbss
900003c8:	24005b40 	.word	0x24005b40
  ldr  r3, = _ebss
900003cc:	240266ec 	.word	0x240266ec

900003d0 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
900003d0:	e7fe      	b.n	900003d0 <ADC3_IRQHandler>
900003d2:	0000      	movs	r0, r0
900003d4:	0000      	movs	r0, r0
	...

900003d8 <DHT22_GetData>:
 * Checks if DHT22 is present and reads 40 bits.
 * Returns 0 if success, otherwise -1
 */

uint8_t DHT22_GetData (DHT22_DataTypedef *pDHT22_Data)
{
900003d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
900003dc:	b087      	sub	sp, #28
	GPIO_InitTypeDef GPIO_InitStruct = {0};
900003de:	2400      	movs	r4, #0
	GPIO_InitStruct.Pin = GPIO_Pin;
900003e0:	f44f 7280 	mov.w	r2, #256	@ 0x100
900003e4:	2301      	movs	r3, #1
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
900003e6:	4669      	mov	r1, sp
{
900003e8:	4607      	mov	r7, r0
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
900003ea:	484b      	ldr	r0, [pc, #300]	@ (90000518 <DHT22_GetData+0x140>)
	GPIO_InitTypeDef GPIO_InitStruct = {0};
900003ec:	9404      	str	r4, [sp, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
900003ee:	e9cd 2300 	strd	r2, r3, [sp]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
900003f2:	e9cd 4402 	strd	r4, r4, [sp, #8]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
900003f6:	f007 f93d 	bl	90007674 <HAL_GPIO_Init>
	HAL_GPIO_WritePin (DHT22_PORT, DHT22_PIN, 0);   // pull the pin low
900003fa:	4622      	mov	r2, r4
900003fc:	240c      	movs	r4, #12
900003fe:	f44f 7180 	mov.w	r1, #256	@ 0x100
90000402:	4845      	ldr	r0, [pc, #276]	@ (90000518 <DHT22_GetData+0x140>)
90000404:	f007 fb48 	bl	90007a98 <HAL_GPIO_WritePin>
		DWT_DelayUS (100);
90000408:	2064      	movs	r0, #100	@ 0x64
9000040a:	f000 f8a9 	bl	90000560 <DWT_DelayUS>
	for(unsigned int i=0; i<12;i++){
9000040e:	3c01      	subs	r4, #1
90000410:	d1fa      	bne.n	90000408 <DHT22_GetData+0x30>
	HAL_GPIO_WritePin (DHT22_PORT, DHT22_PIN, 1);   // pull the pin high and
90000412:	2201      	movs	r2, #1
90000414:	f44f 7180 	mov.w	r1, #256	@ 0x100
90000418:	483f      	ldr	r0, [pc, #252]	@ (90000518 <DHT22_GetData+0x140>)
	GPIO_InitStruct.Pin = GPIO_Pin;
9000041a:	f44f 7580 	mov.w	r5, #256	@ 0x100
	HAL_GPIO_WritePin (DHT22_PORT, DHT22_PIN, 1);   // pull the pin high and
9000041e:	f007 fb3b 	bl	90007a98 <HAL_GPIO_WritePin>
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
90000422:	4669      	mov	r1, sp
90000424:	483c      	ldr	r0, [pc, #240]	@ (90000518 <DHT22_GetData+0x140>)
	GPIO_InitTypeDef GPIO_InitStruct = {0};
90000426:	9404      	str	r4, [sp, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
90000428:	e9cd 5400 	strd	r5, r4, [sp]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
9000042c:	e9cd 4402 	strd	r4, r4, [sp, #8]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
90000430:	f007 f920 	bl	90007674 <HAL_GPIO_Init>
	DWT_DelayUS (60);
90000434:	203c      	movs	r0, #60	@ 0x3c
90000436:	f000 f893 	bl	90000560 <DWT_DelayUS>
	if (!(HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)))
9000043a:	4629      	mov	r1, r5
9000043c:	4836      	ldr	r0, [pc, #216]	@ (90000518 <DHT22_GetData+0x140>)
9000043e:	f007 fb25 	bl	90007a8c <HAL_GPIO_ReadPin>
90000442:	b120      	cbz	r0, 9000044e <DHT22_GetData+0x76>
	uint8_t* pdata = (uint8_t*) &dht22_data;


	// check if DHT22 is present and read 40 bits
	if(DHT22_Start_and_Check_Response() == 0){
		return -1;   // DHT22 not present
90000444:	26ff      	movs	r6, #255	@ 0xff
		pDHT22_Data->Humidity = ((Rh_byteH << 8 ) + Rh_byteL) * 0.1;

		return 0;
	}
	else return -1;
}
90000446:	4630      	mov	r0, r6
90000448:	b007      	add	sp, #28
9000044a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		DWT_DelayUS (80);
9000044e:	2050      	movs	r0, #80	@ 0x50
90000450:	f000 f886 	bl	90000560 <DWT_DelayUS>
		if ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN))) bDHT22_present = 1;
90000454:	4629      	mov	r1, r5
90000456:	4830      	ldr	r0, [pc, #192]	@ (90000518 <DHT22_GetData+0x140>)
90000458:	f007 fb18 	bl	90007a8c <HAL_GPIO_ReadPin>
9000045c:	2800      	cmp	r0, #0
9000045e:	d0f1      	beq.n	90000444 <DHT22_GetData+0x6c>
90000460:	2628      	movs	r6, #40	@ 0x28
		while ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN))); 	// wait for the pin to go low
90000462:	4d2d      	ldr	r5, [pc, #180]	@ (90000518 <DHT22_GetData+0x140>)
	uint64_t data = 0;
90000464:	46a0      	mov	r8, r4
		while ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN))); 	// wait for the pin to go low
90000466:	f44f 7180 	mov.w	r1, #256	@ 0x100
9000046a:	4628      	mov	r0, r5
9000046c:	f007 fb0e 	bl	90007a8c <HAL_GPIO_ReadPin>
90000470:	2800      	cmp	r0, #0
90000472:	d1f8      	bne.n	90000466 <DHT22_GetData+0x8e>
		while (!(HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)));   	// wait for the pin to go high
90000474:	f44f 7180 	mov.w	r1, #256	@ 0x100
90000478:	4628      	mov	r0, r5
9000047a:	f007 fb07 	bl	90007a8c <HAL_GPIO_ReadPin>
9000047e:	2800      	cmp	r0, #0
90000480:	d0f8      	beq.n	90000474 <DHT22_GetData+0x9c>
		DWT_DelayUS(35);   // wait for 35 us
90000482:	2023      	movs	r0, #35	@ 0x23
90000484:	f000 f86c 	bl	90000560 <DWT_DelayUS>
		data = data << 1;
90000488:	1924      	adds	r4, r4, r4
		if ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)))   // if the pin is HIGH
9000048a:	f44f 7180 	mov.w	r1, #256	@ 0x100
9000048e:	4628      	mov	r0, r5
		data = data << 1;
90000490:	eb48 0908 	adc.w	r9, r8, r8
		if ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)))   // if the pin is HIGH
90000494:	f007 fafa 	bl	90007a8c <HAL_GPIO_ReadPin>
		data = data << 1;
90000498:	46c8      	mov	r8, r9
		if ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)))   // if the pin is HIGH
9000049a:	b108      	cbz	r0, 900004a0 <DHT22_GetData+0xc8>
			data |= 0x01;
9000049c:	f044 0401 	orr.w	r4, r4, #1
	for (uint8_t j=0;j<40;j++)
900004a0:	1e73      	subs	r3, r6, #1
900004a2:	f013 06ff 	ands.w	r6, r3, #255	@ 0xff
900004a6:	d1de      	bne.n	90000466 <DHT22_GetData+0x8e>
	Rh_byteH = pdata[4];
900004a8:	fa5f f989 	uxtb.w	r9, r9
	Temp_byteH = pdata[2];
900004ac:	f3c4 4307 	ubfx	r3, r4, #16, #8
	Temp_byteL = pdata[1];
900004b0:	f3c4 2007 	ubfx	r0, r4, #8, #8
	if (ChkSum == (unsigned char)(Rh_byteH+Rh_byteL+Temp_byteH+Temp_byteL)){
900004b4:	b2e5      	uxtb	r5, r4
900004b6:	eb09 6214 	add.w	r2, r9, r4, lsr #24
	Rh_byteL = pdata[3];
900004ba:	0e21      	lsrs	r1, r4, #24
	Temp_byteH = pdata[2];
900004bc:	461c      	mov	r4, r3
	if (ChkSum == (unsigned char)(Rh_byteH+Rh_byteL+Temp_byteH+Temp_byteL)){
900004be:	441a      	add	r2, r3
900004c0:	4402      	add	r2, r0
900004c2:	b2d2      	uxtb	r2, r2
900004c4:	42aa      	cmp	r2, r5
900004c6:	d1bd      	bne.n	90000444 <DHT22_GetData+0x6c>
			pDHT22_Data->Temperature = (((Temp_byteH & 0x7f) << 8) + Temp_byteL) * 0.1;
900004c8:	021b      	lsls	r3, r3, #8
		if (Temp_byteH & 0x80) { // negative temperature !
900004ca:	0622      	lsls	r2, r4, #24
		pDHT22_Data->Humidity = ((Rh_byteH << 8 ) + Rh_byteL) * 0.1;
900004cc:	eb01 2109 	add.w	r1, r1, r9, lsl #8
			pDHT22_Data->Temperature = (((Temp_byteH & 0x7f) << 8) + Temp_byteL) * 0.1;
900004d0:	bf48      	it	mi
900004d2:	f403 43fe 	andmi.w	r3, r3, #32512	@ 0x7f00
			pDHT22_Data->Temperature = ((Temp_byteH << 8 ) + Temp_byteL) * 0.1 ;
900004d6:	4403      	add	r3, r0
}
900004d8:	4630      	mov	r0, r6
			pDHT22_Data->Temperature = ((Temp_byteH << 8 ) + Temp_byteL) * 0.1 ;
900004da:	ee07 3a90 	vmov	s15, r3
900004de:	ed9f 6b0c 	vldr	d6, [pc, #48]	@ 90000510 <DHT22_GetData+0x138>
900004e2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
900004e6:	ee27 7b06 	vmul.f64	d7, d7, d6
		pDHT22_Data->Humidity = ((Rh_byteH << 8 ) + Rh_byteL) * 0.1;
900004ea:	ed9f 6b09 	vldr	d6, [pc, #36]	@ 90000510 <DHT22_GetData+0x138>
			pDHT22_Data->Temperature = ((Temp_byteH << 8 ) + Temp_byteL) * 0.1 ;
900004ee:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
		pDHT22_Data->Humidity = ((Rh_byteH << 8 ) + Rh_byteL) * 0.1;
900004f2:	ee07 1a90 	vmov	s15, r1
900004f6:	ed87 7a00 	vstr	s14, [r7]
900004fa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
900004fe:	ee27 7b06 	vmul.f64	d7, d7, d6
90000502:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
90000506:	ed87 7a01 	vstr	s14, [r7, #4]
}
9000050a:	b007      	add	sp, #28
9000050c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
90000510:	9999999a 	.word	0x9999999a
90000514:	3fb99999 	.word	0x3fb99999
90000518:	58022000 	.word	0x58022000

9000051c <DWT_Init>:
 */

char DWT_Init(){

	/* Enable trace and debug block in Debug Exception and Monitor Control Register */
	CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
9000051c:	490d      	ldr	r1, [pc, #52]	@ (90000554 <DWT_Init+0x38>)
	// Unlock access to DWT (ITM, etc.) registers:
	DWT->LAR = 0xC5ACCE55;

	/* Reset the clock cycle counter value */
	DWT->CYCCNT = 0;
9000051e:	2000      	movs	r0, #0
	DWT->LAR = 0xC5ACCE55;
90000520:	4b0d      	ldr	r3, [pc, #52]	@ (90000558 <DWT_Init+0x3c>)
	CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
90000522:	f8d1 20fc 	ldr.w	r2, [r1, #252]	@ 0xfc
char DWT_Init(){
90000526:	b410      	push	{r4}
	CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
90000528:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
	DWT->LAR = 0xC5ACCE55;
9000052c:	4c0b      	ldr	r4, [pc, #44]	@ (9000055c <DWT_Init+0x40>)
	CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
9000052e:	f8c1 20fc 	str.w	r2, [r1, #252]	@ 0xfc
	DWT->LAR = 0xC5ACCE55;
90000532:	f8c3 4fb0 	str.w	r4, [r3, #4016]	@ 0xfb0
	DWT->CYCCNT = 0;
90000536:	6058      	str	r0, [r3, #4]

	/* Enable  clock cycle counter */
	DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
90000538:	681a      	ldr	r2, [r3, #0]
9000053a:	f042 0201 	orr.w	r2, r2, #1
9000053e:	601a      	str	r2, [r3, #0]

	// Execute 3 NOP instructiio0n just to wait for a few cycles:
	__NOP();
90000540:	bf00      	nop
	__NOP();
90000542:	bf00      	nop
	__NOP();
90000544:	bf00      	nop

	/* Check if clock cycle counter has started */
	if(DWT->CYCCNT)
90000546:	6858      	ldr	r0, [r3, #4]
	}
	else
	{
		return 1; /* clock cycle counter not started */
	}
}
90000548:	f85d 4b04 	ldr.w	r4, [sp], #4
9000054c:	fab0 f080 	clz	r0, r0
90000550:	0940      	lsrs	r0, r0, #5
90000552:	4770      	bx	lr
90000554:	e000ed00 	.word	0xe000ed00
90000558:	e0001000 	.word	0xe0001000
9000055c:	c5acce55 	.word	0xc5acce55

90000560 <DWT_DelayUS>:
 * DWT delay in microseconds
 * Patricio Bulic, UL FRI
 */

void DWT_DelayUS(unsigned int microseconds)
{
90000560:	b570      	push	{r4, r5, r6, lr}
  // read cycle counter:
  DWT->CYCCNT = 0;
90000562:	2300      	movs	r3, #0
90000564:	4c0c      	ldr	r4, [pc, #48]	@ (90000598 <DWT_DelayUS+0x38>)
{
90000566:	b082      	sub	sp, #8
90000568:	4606      	mov	r6, r0
  DWT->CYCCNT = 0;
9000056a:	6063      	str	r3, [r4, #4]
  unsigned int clk_cycle_start = DWT->CYCCNT;
9000056c:	6865      	ldr	r5, [r4, #4]

  // get CPU cycles per us:
  volatile unsigned int cpu_freq = HAL_RCC_GetSysClockFreq();
9000056e:	f00a f9e1 	bl	9000a934 <HAL_RCC_GetSysClockFreq>
90000572:	9001      	str	r0, [sp, #4]
  unsigned int cycles_per_us = (cpu_freq / 1000000);
90000574:	4a09      	ldr	r2, [pc, #36]	@ (9000059c <DWT_DelayUS+0x3c>)
90000576:	9b01      	ldr	r3, [sp, #4]
90000578:	fba2 2303 	umull	r2, r3, r2, r3
9000057c:	0c9b      	lsrs	r3, r3, #18

  unsigned int delay = clk_cycle_start + microseconds*cycles_per_us;
9000057e:	fb06 5003 	mla	r0, r6, r3, r5
  //microseconds = microseconds*cycles_per_us;


  if ((clk_cycle_start + delay) < clk_cycle_start) { // overflow!!!
90000582:	42c5      	cmn	r5, r0
90000584:	d301      	bcc.n	9000058a <DWT_DelayUS+0x2a>
  }
  else{
	  while ((DWT->CYCCNT) < delay);
  }

}
90000586:	b002      	add	sp, #8
90000588:	bd70      	pop	{r4, r5, r6, pc}
	  while ((DWT->CYCCNT) < delay);
9000058a:	6863      	ldr	r3, [r4, #4]
9000058c:	4283      	cmp	r3, r0
9000058e:	d2fa      	bcs.n	90000586 <DWT_DelayUS+0x26>
90000590:	6863      	ldr	r3, [r4, #4]
90000592:	4283      	cmp	r3, r0
90000594:	d3f9      	bcc.n	9000058a <DWT_DelayUS+0x2a>
90000596:	e7f6      	b.n	90000586 <DWT_DelayUS+0x26>
90000598:	e0001000 	.word	0xe0001000
9000059c:	431bde83 	.word	0x431bde83

900005a0 <vApplicationIdleHook>:
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
  
  vTaskSetApplicationTaskTag(NULL, IdleTaskHook);
900005a0:	4901      	ldr	r1, [pc, #4]	@ (900005a8 <vApplicationIdleHook+0x8>)
900005a2:	2000      	movs	r0, #0
900005a4:	f00e ba90 	b.w	9000eac8 <vTaskSetApplicationTaskTag>
900005a8:	9000175d 	.word	0x9000175d

900005ac <StartDefaultTask>:
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
  /* USER CODE BEGIN 5 */
  osDelay(2000);
900005ac:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
900005b0:	4d0b      	ldr	r5, [pc, #44]	@ (900005e0 <StartDefaultTask+0x34>)
  /* Infinite loop */
  for(;;)
  {
    osKernelLock();
    DHT22_GetData (&DHT22_Data);
900005b2:	4c0c      	ldr	r4, [pc, #48]	@ (900005e4 <StartDefaultTask+0x38>)
{
900005b4:	b508      	push	{r3, lr}
  osDelay(2000);
900005b6:	f00b fff7 	bl	9000c5a8 <osDelay>
    osKernelLock();
900005ba:	f00b ff7f 	bl	9000c4bc <osKernelLock>
    DHT22_GetData (&DHT22_Data);
900005be:	4620      	mov	r0, r4
900005c0:	f7ff ff0a 	bl	900003d8 <DHT22_GetData>
    osKernelUnlock();
900005c4:	f00b ff90 	bl	9000c4e8 <osKernelUnlock>
    // Send the message to the GUI Model:
    osMessageQueuePut(mid_MODELMsgQueue, &DHT22_Data, 0U, 0U);
900005c8:	2300      	movs	r3, #0
900005ca:	4621      	mov	r1, r4
900005cc:	6828      	ldr	r0, [r5, #0]
900005ce:	461a      	mov	r2, r3
900005d0:	f00c f964 	bl	9000c89c <osMessageQueuePut>
    osDelay(10000);
900005d4:	f242 7010 	movw	r0, #10000	@ 0x2710
900005d8:	f00b ffe6 	bl	9000c5a8 <osDelay>
  for(;;)
900005dc:	e7ed      	b.n	900005ba <StartDefaultTask+0xe>
900005de:	bf00      	nop
900005e0:	2400b2bc 	.word	0x2400b2bc
900005e4:	24005b5c 	.word	0x24005b5c

900005e8 <SystemClock_Config>:
{
900005e8:	b570      	push	{r4, r5, r6, lr}
900005ea:	b09e      	sub	sp, #120	@ 0x78
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
900005ec:	224c      	movs	r2, #76	@ 0x4c
900005ee:	2100      	movs	r1, #0
900005f0:	a80a      	add	r0, sp, #40	@ 0x28
900005f2:	f022 fdab 	bl	9002314c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
900005f6:	2220      	movs	r2, #32
900005f8:	2100      	movs	r1, #0
900005fa:	a802      	add	r0, sp, #8
900005fc:	f022 fda6 	bl	9002314c <memset>
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
90000600:	2002      	movs	r0, #2
90000602:	f009 fe0f 	bl	9000a224 <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
90000606:	4b22      	ldr	r3, [pc, #136]	@ (90000690 <SystemClock_Config+0xa8>)
90000608:	2100      	movs	r1, #0
9000060a:	4a22      	ldr	r2, [pc, #136]	@ (90000694 <SystemClock_Config+0xac>)
9000060c:	9101      	str	r1, [sp, #4]
9000060e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
90000610:	f021 0101 	bic.w	r1, r1, #1
90000614:	62d9      	str	r1, [r3, #44]	@ 0x2c
90000616:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90000618:	f003 0301 	and.w	r3, r3, #1
9000061c:	9301      	str	r3, [sp, #4]
9000061e:	6993      	ldr	r3, [r2, #24]
90000620:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
90000624:	6193      	str	r3, [r2, #24]
90000626:	6993      	ldr	r3, [r2, #24]
90000628:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
9000062c:	9301      	str	r3, [sp, #4]
9000062e:	9b01      	ldr	r3, [sp, #4]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
90000630:	6993      	ldr	r3, [r2, #24]
90000632:	0499      	lsls	r1, r3, #18
90000634:	d5fc      	bpl.n	90000630 <SystemClock_Config+0x48>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
90000636:	2201      	movs	r2, #1
90000638:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
9000063c:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
9000063e:	2608      	movs	r6, #8
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
90000640:	2500      	movs	r5, #0
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
90000642:	a80a      	add	r0, sp, #40	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = 2;
90000644:	9417      	str	r4, [sp, #92]	@ 0x5c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
90000646:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLN = 160;
9000064a:	2205      	movs	r2, #5
9000064c:	23a0      	movs	r3, #160	@ 0xa0
9000064e:	e9cd 2315 	strd	r2, r3, [sp, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLQ = 4;
90000652:	2304      	movs	r3, #4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
90000654:	e9cd 4413 	strd	r4, r4, [sp, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = 4;
90000658:	9318      	str	r3, [sp, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
9000065a:	e9cd 4619 	strd	r4, r6, [sp, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
9000065e:	e9cd 551b 	strd	r5, r5, [sp, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
90000662:	f009 fe75 	bl	9000a350 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
90000666:	2340      	movs	r3, #64	@ 0x40
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
90000668:	223f      	movs	r2, #63	@ 0x3f
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
9000066a:	4621      	mov	r1, r4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
9000066c:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
9000066e:	eb0d 0006 	add.w	r0, sp, r6
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
90000672:	9202      	str	r2, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
90000674:	2203      	movs	r2, #3
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
90000676:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
90000678:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
9000067a:	9203      	str	r2, [sp, #12]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
9000067c:	e9cd 6305 	strd	r6, r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
90000680:	f44f 6380 	mov.w	r3, #1024	@ 0x400
90000684:	9308      	str	r3, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
90000686:	f00a f9e3 	bl	9000aa50 <HAL_RCC_ClockConfig>
}
9000068a:	b01e      	add	sp, #120	@ 0x78
9000068c:	bd70      	pop	{r4, r5, r6, pc}
9000068e:	bf00      	nop
90000690:	58000400 	.word	0x58000400
90000694:	58024800 	.word	0x58024800

90000698 <main>:
{
90000698:	b580      	push	{r7, lr}

/* MPU Configuration */

void MPU_Config(void)
{
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
9000069a:	2400      	movs	r4, #0
{
9000069c:	b098      	sub	sp, #96	@ 0x60
  /* Disables the MPU */
  HAL_MPU_Disable();

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
9000069e:	2501      	movs	r5, #1

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
  MPU_InitStruct.BaseAddress = 0x90000000;
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
900006a0:	271b      	movs	r7, #27

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
  MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
900006a2:	2603      	movs	r6, #3
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
900006a4:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
900006a8:	e9cd 440d 	strd	r4, r4, [sp, #52]	@ 0x34
  HAL_MPU_Disable();
900006ac:	f006 fdda 	bl	90007264 <HAL_MPU_Disable>
  MPU_InitStruct.BaseAddress = 0x24000000;
900006b0:	f04f 5310 	mov.w	r3, #603979776	@ 0x24000000
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
900006b4:	49d3      	ldr	r1, [pc, #844]	@ (90000a04 <main+0x36c>)
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
900006b6:	a80b      	add	r0, sp, #44	@ 0x2c
  MPU_InitStruct.BaseAddress = 0x24000000;
900006b8:	930c      	str	r3, [sp, #48]	@ 0x30
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
900006ba:	4bd3      	ldr	r3, [pc, #844]	@ (90000a08 <main+0x370>)
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
900006bc:	f8ad 502c 	strh.w	r5, [sp, #44]	@ 0x2c
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
900006c0:	e9cd 130d 	strd	r1, r3, [sp, #52]	@ 0x34
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
900006c4:	f006 fdec 	bl	900072a0 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.BaseAddress = 0x90000000;
900006c8:	f04f 4310 	mov.w	r3, #2415919104	@ 0x90000000
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
900006cc:	a80b      	add	r0, sp, #44	@ 0x2c
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
900006ce:	f88d 4037 	strb.w	r4, [sp, #55]	@ 0x37
  MPU_InitStruct.BaseAddress = 0x90000000;
900006d2:	930c      	str	r3, [sp, #48]	@ 0x30
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
900006d4:	f8ad 403a 	strh.w	r4, [sp, #58]	@ 0x3a
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
900006d8:	f88d 502d 	strb.w	r5, [sp, #45]	@ 0x2d
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
900006dc:	f88d 7034 	strb.w	r7, [sp, #52]	@ 0x34
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
900006e0:	f006 fdde 	bl	900072a0 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
900006e4:	2302      	movs	r3, #2
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
900006e6:	a80b      	add	r0, sp, #44	@ 0x2c
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
900006e8:	f8ad 6037 	strh.w	r6, [sp, #55]	@ 0x37
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
900006ec:	f88d 302d 	strb.w	r3, [sp, #45]	@ 0x2d
  MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
900006f0:	231a      	movs	r3, #26
900006f2:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
900006f6:	f240 1301 	movw	r3, #257	@ 0x101
900006fa:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
900006fe:	f006 fdcf 	bl	900072a0 <HAL_MPU_ConfigRegion>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
  MPU_InitStruct.BaseAddress = 0xD0000000;
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
90000702:	f44f 7380 	mov.w	r3, #256	@ 0x100
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
90000706:	a80b      	add	r0, sp, #44	@ 0x2c
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
90000708:	f8ad 403a 	strh.w	r4, [sp, #58]	@ 0x3a

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
9000070c:	2404      	movs	r4, #4
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
9000070e:	f8ad 3037 	strh.w	r3, [sp, #55]	@ 0x37
  MPU_InitStruct.BaseAddress = 0xD0000000;
90000712:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
90000716:	f88d 7034 	strb.w	r7, [sp, #52]	@ 0x34
  MPU_InitStruct.BaseAddress = 0xD0000000;
9000071a:	930c      	str	r3, [sp, #48]	@ 0x30
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
9000071c:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
90000720:	f006 fdbe 	bl	900072a0 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
90000724:	2318      	movs	r3, #24
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
90000726:	a80b      	add	r0, sp, #44	@ 0x2c
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
90000728:	f88d 6037 	strb.w	r6, [sp, #55]	@ 0x37
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
9000072c:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
90000730:	f88d 402d 	strb.w	r4, [sp, #45]	@ 0x2d
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
90000734:	f88d 503a 	strb.w	r5, [sp, #58]	@ 0x3a
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
90000738:	f006 fdb2 	bl	900072a0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
9000073c:	4620      	mov	r0, r4
9000073e:	f006 fd9f 	bl	90007280 <HAL_MPU_Enable>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
90000742:	4ab2      	ldr	r2, [pc, #712]	@ (90000a0c <main+0x374>)
90000744:	6953      	ldr	r3, [r2, #20]
90000746:	f413 3300 	ands.w	r3, r3, #131072	@ 0x20000
9000074a:	d111      	bne.n	90000770 <main+0xd8>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
9000074c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
90000750:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
90000754:	f8c2 3250 	str.w	r3, [r2, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
90000758:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
9000075c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
90000760:	6953      	ldr	r3, [r2, #20]
90000762:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90000766:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
90000768:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
9000076c:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
90000770:	48a6      	ldr	r0, [pc, #664]	@ (90000a0c <main+0x374>)
90000772:	6943      	ldr	r3, [r0, #20]
90000774:	f413 3380 	ands.w	r3, r3, #65536	@ 0x10000
90000778:	d124      	bne.n	900007c4 <main+0x12c>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
9000077a:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
9000077e:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
90000782:	f8d0 5080 	ldr.w	r5, [r0, #128]	@ 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
90000786:	f643 76e0 	movw	r6, #16352	@ 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
9000078a:	f3c5 344e 	ubfx	r4, r5, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
9000078e:	f3c5 05c9 	ubfx	r5, r5, #3, #10
90000792:	0164      	lsls	r4, r4, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
90000794:	ea04 0106 	and.w	r1, r4, r6
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
90000798:	462b      	mov	r3, r5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
9000079a:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
9000079e:	3b01      	subs	r3, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
900007a0:	f8c0 2260 	str.w	r2, [r0, #608]	@ 0x260
      } while (ways-- != 0U);
900007a4:	1c5a      	adds	r2, r3, #1
900007a6:	d1f8      	bne.n	9000079a <main+0x102>
    } while(sets-- != 0U);
900007a8:	3c20      	subs	r4, #32
900007aa:	f114 0f20 	cmn.w	r4, #32
900007ae:	d1f1      	bne.n	90000794 <main+0xfc>
900007b0:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
900007b4:	6943      	ldr	r3, [r0, #20]
900007b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
900007ba:	6143      	str	r3, [r0, #20]
900007bc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
900007c0:	f3bf 8f6f 	isb	sy
  HAL_Init();
900007c4:	f006 fc98 	bl	900070f8 <HAL_Init>
  SystemClock_Config();
900007c8:	f7ff ff0e 	bl	900005e8 <SystemClock_Config>
  __ASM volatile ("cpsie i" : : : "memory");
900007cc:	b662      	cpsie	i
  GPIO_InitTypeDef GPIO_InitStruct = {0};
900007ce:	2400      	movs	r4, #0
  __HAL_RCC_GPIOK_CLK_ENABLE();
900007d0:	4d8f      	ldr	r5, [pc, #572]	@ (90000a10 <main+0x378>)
  HAL_GPIO_WritePin(GPIOB, FRAME_RATE_Pin|RENDER_TIME_Pin, GPIO_PIN_RESET);
900007d2:	21c0      	movs	r1, #192	@ 0xc0
900007d4:	488f      	ldr	r0, [pc, #572]	@ (90000a14 <main+0x37c>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
900007d6:	940f      	str	r4, [sp, #60]	@ 0x3c
  HAL_GPIO_WritePin(GPIOB, FRAME_RATE_Pin|RENDER_TIME_Pin, GPIO_PIN_RESET);
900007d8:	4622      	mov	r2, r4
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
900007da:	2601      	movs	r6, #1
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
900007dc:	f04f 0903 	mov.w	r9, #3
  GPIO_InitStruct.Pin = VSYNC_FREQ_Pin;
900007e0:	2708      	movs	r7, #8
  GPIO_InitStruct.Pin = LCD_RESET_Pin;
900007e2:	f04f 0804 	mov.w	r8, #4
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
900007e6:	f04f 0a05 	mov.w	sl, #5
  GPIO_InitTypeDef GPIO_InitStruct = {0};
900007ea:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
900007ee:	e9cd 440d 	strd	r4, r4, [sp, #52]	@ 0x34
  __HAL_RCC_GPIOK_CLK_ENABLE();
900007f2:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
900007f6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
900007fa:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
900007fe:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
90000802:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
90000806:	9301      	str	r3, [sp, #4]
90000808:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
9000080a:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
9000080e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
90000812:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
90000816:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
9000081a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
9000081e:	9302      	str	r3, [sp, #8]
90000820:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOI_CLK_ENABLE();
90000822:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
90000826:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
9000082a:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
9000082e:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
90000832:	f403 7380 	and.w	r3, r3, #256	@ 0x100
90000836:	9303      	str	r3, [sp, #12]
90000838:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
9000083a:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
9000083e:	f043 0310 	orr.w	r3, r3, #16
90000842:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
90000846:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
9000084a:	f003 0310 	and.w	r3, r3, #16
9000084e:	9304      	str	r3, [sp, #16]
90000850:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
90000852:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
90000856:	f043 0302 	orr.w	r3, r3, #2
9000085a:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
9000085e:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
90000862:	f003 0302 	and.w	r3, r3, #2
90000866:	9305      	str	r3, [sp, #20]
90000868:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
9000086a:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
9000086e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
90000872:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
90000876:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
9000087a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
9000087e:	9306      	str	r3, [sp, #24]
90000880:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
90000882:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
90000886:	f043 0308 	orr.w	r3, r3, #8
9000088a:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
9000088e:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
90000892:	f003 0308 	and.w	r3, r3, #8
90000896:	9307      	str	r3, [sp, #28]
90000898:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
9000089a:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
9000089e:	f043 0320 	orr.w	r3, r3, #32
900008a2:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
900008a6:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
900008aa:	f003 0320 	and.w	r3, r3, #32
900008ae:	9308      	str	r3, [sp, #32]
900008b0:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
900008b2:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
900008b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
900008ba:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
900008be:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
900008c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
900008c6:	9309      	str	r3, [sp, #36]	@ 0x24
900008c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
  __HAL_RCC_GPIOA_CLK_ENABLE();
900008ca:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
900008ce:	f043 0301 	orr.w	r3, r3, #1
900008d2:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
900008d6:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
900008da:	f003 0301 	and.w	r3, r3, #1
900008de:	930a      	str	r3, [sp, #40]	@ 0x28
900008e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  HAL_GPIO_WritePin(GPIOB, FRAME_RATE_Pin|RENDER_TIME_Pin, GPIO_PIN_RESET);
900008e2:	f007 f8d9 	bl	90007a98 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DE_GPIO_Port, LCD_DE_Pin, GPIO_PIN_RESET);
900008e6:	4622      	mov	r2, r4
900008e8:	2180      	movs	r1, #128	@ 0x80
900008ea:	484b      	ldr	r0, [pc, #300]	@ (90000a18 <main+0x380>)
900008ec:	f007 f8d4 	bl	90007a98 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_RESET);
900008f0:	4622      	mov	r2, r4
900008f2:	2108      	movs	r1, #8
900008f4:	4849      	ldr	r0, [pc, #292]	@ (90000a1c <main+0x384>)
900008f6:	f007 f8cf 	bl	90007a98 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
900008fa:	2201      	movs	r2, #1
900008fc:	4848      	ldr	r0, [pc, #288]	@ (90000a20 <main+0x388>)
900008fe:	4611      	mov	r1, r2
90000900:	f007 f8ca 	bl	90007a98 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, LCD_RESET_Pin|MCU_ACTIVE_Pin, GPIO_PIN_RESET);
90000904:	4622      	mov	r2, r4
90000906:	2144      	movs	r1, #68	@ 0x44
90000908:	4846      	ldr	r0, [pc, #280]	@ (90000a24 <main+0x38c>)
9000090a:	f007 f8c5 	bl	90007a98 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = FRAME_RATE_Pin|RENDER_TIME_Pin;
9000090e:	23c0      	movs	r3, #192	@ 0xc0
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
90000910:	a90b      	add	r1, sp, #44	@ 0x2c
90000912:	4840      	ldr	r0, [pc, #256]	@ (90000a14 <main+0x37c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
90000914:	e9cd 360b 	strd	r3, r6, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
90000918:	e9cd 490d 	strd	r4, r9, [sp, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
9000091c:	f006 feaa 	bl	90007674 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_DE_Pin;
90000920:	2380      	movs	r3, #128	@ 0x80
  HAL_GPIO_Init(LCD_DE_GPIO_Port, &GPIO_InitStruct);
90000922:	a90b      	add	r1, sp, #44	@ 0x2c
90000924:	483c      	ldr	r0, [pc, #240]	@ (90000a18 <main+0x380>)
  GPIO_InitStruct.Pin = LCD_DE_Pin;
90000926:	930b      	str	r3, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90000928:	940e      	str	r4, [sp, #56]	@ 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
9000092a:	e9cd 640c 	strd	r6, r4, [sp, #48]	@ 0x30
  HAL_GPIO_Init(LCD_DE_GPIO_Port, &GPIO_InitStruct);
9000092e:	f006 fea1 	bl	90007674 <HAL_GPIO_Init>
  HAL_GPIO_Init(VSYNC_FREQ_GPIO_Port, &GPIO_InitStruct);
90000932:	a90b      	add	r1, sp, #44	@ 0x2c
90000934:	4839      	ldr	r0, [pc, #228]	@ (90000a1c <main+0x384>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
90000936:	f8cd 9038 	str.w	r9, [sp, #56]	@ 0x38
  GPIO_InitStruct.Pin = VSYNC_FREQ_Pin;
9000093a:	970b      	str	r7, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
9000093c:	e9cd 640c 	strd	r6, r4, [sp, #48]	@ 0x30
  HAL_GPIO_Init(VSYNC_FREQ_GPIO_Port, &GPIO_InitStruct);
90000940:	f006 fe98 	bl	90007674 <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
90000944:	a90b      	add	r1, sp, #44	@ 0x2c
90000946:	4836      	ldr	r0, [pc, #216]	@ (90000a20 <main+0x388>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
90000948:	e9cd 660b 	strd	r6, r6, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
9000094c:	e9cd 440d 	strd	r4, r4, [sp, #52]	@ 0x34
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
90000950:	f006 fe90 	bl	90007674 <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
90000954:	a90b      	add	r1, sp, #44	@ 0x2c
90000956:	4833      	ldr	r0, [pc, #204]	@ (90000a24 <main+0x38c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
90000958:	e9cd 860b 	strd	r8, r6, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
9000095c:	e9cd 440d 	strd	r4, r4, [sp, #52]	@ 0x34
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
90000960:	f006 fe88 	bl	90007674 <HAL_GPIO_Init>
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
90000964:	f8cd 9038 	str.w	r9, [sp, #56]	@ 0x38
  GPIO_InitStruct.Pin = MCU_ACTIVE_Pin;
90000968:	f04f 0940 	mov.w	r9, #64	@ 0x40
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
9000096c:	a90b      	add	r1, sp, #44	@ 0x2c
9000096e:	482d      	ldr	r0, [pc, #180]	@ (90000a24 <main+0x38c>)
  GPIO_InitStruct.Pin = MCU_ACTIVE_Pin;
90000970:	f8cd 902c 	str.w	r9, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000974:	e9cd 640c 	strd	r6, r4, [sp, #48]	@ 0x30
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
90000978:	f006 fe7c 	bl	90007674 <HAL_GPIO_Init>
  __HAL_RCC_MDMA_CLK_ENABLE();
9000097c:	f8d5 30d4 	ldr.w	r3, [r5, #212]	@ 0xd4
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
90000980:	4622      	mov	r2, r4
90000982:	2105      	movs	r1, #5
  __HAL_RCC_MDMA_CLK_ENABLE();
90000984:	4333      	orrs	r3, r6
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
90000986:	207a      	movs	r0, #122	@ 0x7a
  __HAL_RCC_MDMA_CLK_ENABLE();
90000988:	f8c5 30d4 	str.w	r3, [r5, #212]	@ 0xd4
9000098c:	f8d5 30d4 	ldr.w	r3, [r5, #212]	@ 0xd4
  hltdc.Instance = LTDC;
90000990:	4d25      	ldr	r5, [pc, #148]	@ (90000a28 <main+0x390>)
  __HAL_RCC_MDMA_CLK_ENABLE();
90000992:	4033      	ands	r3, r6
90000994:	9300      	str	r3, [sp, #0]
90000996:	9b00      	ldr	r3, [sp, #0]
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
90000998:	f006 fc08 	bl	900071ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(MDMA_IRQn);
9000099c:	207a      	movs	r0, #122	@ 0x7a
9000099e:	f006 fc41 	bl	90007224 <HAL_NVIC_EnableIRQ>
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
900009a2:	2234      	movs	r2, #52	@ 0x34
900009a4:	4621      	mov	r1, r4
900009a6:	a80b      	add	r0, sp, #44	@ 0x2c
900009a8:	f022 fbd0 	bl	9002314c <memset>
  hltdc.Instance = LTDC;
900009ac:	4b1f      	ldr	r3, [pc, #124]	@ (90000a2c <main+0x394>)
  hltdc.Init.AccumulatedVBP = 11;
900009ae:	202a      	movs	r0, #42	@ 0x2a
  hltdc.Init.VerticalSync = 8;
900009b0:	61af      	str	r7, [r5, #24]
  hltdc.Instance = LTDC;
900009b2:	602b      	str	r3, [r5, #0]
  hltdc.Init.HorizontalSync = 39;
900009b4:	2327      	movs	r3, #39	@ 0x27
  hltdc.Init.AccumulatedActiveH = 283;
900009b6:	f240 270a 	movw	r7, #522	@ 0x20a
  hltdc.Init.TotalHeigh = 285;
900009ba:	f44f 7c04 	mov.w	ip, #528	@ 0x210
  hltdc.Init.HorizontalSync = 39;
900009be:	616b      	str	r3, [r5, #20]
  hltdc.Init.AccumulatedVBP = 11;
900009c0:	230b      	movs	r3, #11
  hltdc.Init.Backcolor.Blue = 0;
900009c2:	86ac      	strh	r4, [r5, #52]	@ 0x34
  hltdc.Init.Backcolor.Red = 0;
900009c4:	f885 4036 	strb.w	r4, [r5, #54]	@ 0x36
  hltdc.Init.AccumulatedVBP = 11;
900009c8:	e9c5 0307 	strd	r0, r3, [r5, #28]
  hltdc.Init.AccumulatedActiveH = 283;
900009cc:	f240 131b 	movw	r3, #283	@ 0x11b
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
900009d0:	4628      	mov	r0, r5
  hltdc.Init.AccumulatedActiveH = 283;
900009d2:	e9c5 7309 	strd	r7, r3, [r5, #36]	@ 0x24
  hltdc.Init.TotalHeigh = 285;
900009d6:	f240 131d 	movw	r3, #285	@ 0x11d
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
900009da:	2702      	movs	r7, #2
  hltdc.Init.TotalHeigh = 285;
900009dc:	e9c5 c30b 	strd	ip, r3, [r5, #44]	@ 0x2c
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
900009e0:	e9c5 4401 	strd	r4, r4, [r5, #4]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
900009e4:	e9c5 4403 	strd	r4, r4, [r5, #12]
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
900009e8:	f009 f844 	bl	90009a74 <HAL_LTDC_Init>
  pLayerCfg.WindowX1 = 480;
900009ec:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
900009f0:	4622      	mov	r2, r4
900009f2:	a90b      	add	r1, sp, #44	@ 0x2c
  pLayerCfg.WindowX1 = 480;
900009f4:	930c      	str	r3, [sp, #48]	@ 0x30
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
900009f6:	4628      	mov	r0, r5
  pLayerCfg.ImageWidth = 480;
900009f8:	9315      	str	r3, [sp, #84]	@ 0x54
  pLayerCfg.WindowY1 = 272;
900009fa:	f44f 7388 	mov.w	r3, #272	@ 0x110
  hdma2d.Instance = DMA2D;
900009fe:	4d0c      	ldr	r5, [pc, #48]	@ (90000a30 <main+0x398>)
  pLayerCfg.WindowY1 = 272;
90000a00:	930e      	str	r3, [sp, #56]	@ 0x38
90000a02:	e017      	b.n	90000a34 <main+0x39c>
90000a04:	03000012 	.word	0x03000012
90000a08:	01010001 	.word	0x01010001
90000a0c:	e000ed00 	.word	0xe000ed00
90000a10:	58024400 	.word	0x58024400
90000a14:	58020400 	.word	0x58020400
90000a18:	58020c00 	.word	0x58020c00
90000a1c:	58021800 	.word	0x58021800
90000a20:	58022800 	.word	0x58022800
90000a24:	58020000 	.word	0x58020000
90000a28:	24005ba4 	.word	0x24005ba4
90000a2c:	50001000 	.word	0x50001000
90000a30:	24005d7c 	.word	0x24005d7c
  pLayerCfg.ImageHeight = 272;
90000a34:	9316      	str	r3, [sp, #88]	@ 0x58
  pLayerCfg.Alpha = 255;
90000a36:	23ff      	movs	r3, #255	@ 0xff
  pLayerCfg.WindowX0 = 0;
90000a38:	940b      	str	r4, [sp, #44]	@ 0x2c
  pLayerCfg.Alpha = 255;
90000a3a:	9310      	str	r3, [sp, #64]	@ 0x40
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
90000a3c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  pLayerCfg.WindowY0 = 0;
90000a40:	940d      	str	r4, [sp, #52]	@ 0x34
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
90000a42:	9312      	str	r3, [sp, #72]	@ 0x48
  pLayerCfg.Alpha0 = 0;
90000a44:	9411      	str	r4, [sp, #68]	@ 0x44
  pLayerCfg.FBStartAdress = 0;
90000a46:	9414      	str	r4, [sp, #80]	@ 0x50
  pLayerCfg.Backcolor.Blue = 0;
90000a48:	f8ad 405c 	strh.w	r4, [sp, #92]	@ 0x5c
  pLayerCfg.Backcolor.Red = 0;
90000a4c:	f88d 405e 	strb.w	r4, [sp, #94]	@ 0x5e
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
90000a50:	970f      	str	r7, [sp, #60]	@ 0x3c
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
90000a52:	f8cd a04c 	str.w	sl, [sp, #76]	@ 0x4c
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
90000a56:	f009 f8e1 	bl	90009c1c <HAL_LTDC_ConfigLayer>
  hdma2d.Instance = DMA2D;
90000a5a:	4b38      	ldr	r3, [pc, #224]	@ (90000b3c <main+0x4a4>)
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
90000a5c:	4628      	mov	r0, r5
  hdma2d.Init.OutputOffset = 0;
90000a5e:	60ec      	str	r4, [r5, #12]
  hdma2d.Instance = DMA2D;
90000a60:	602b      	str	r3, [r5, #0]
  hdma2d.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
90000a62:	65ec      	str	r4, [r5, #92]	@ 0x5c
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
90000a64:	e9c5 4701 	strd	r4, r7, [r5, #4]
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
90000a68:	e9c5 4711 	strd	r4, r7, [r5, #68]	@ 0x44
  hdma2d.LayerCfg[1].InputAlpha = 0;
90000a6c:	e9c5 4413 	strd	r4, r4, [r5, #76]	@ 0x4c
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
90000a70:	e9c5 4415 	strd	r4, r4, [r5, #84]	@ 0x54
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
90000a74:	f006 fcbc 	bl	900073f0 <HAL_DMA2D_Init>
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
90000a78:	4631      	mov	r1, r6
90000a7a:	4628      	mov	r0, r5
90000a7c:	f006 fd90 	bl	900075a0 <HAL_DMA2D_ConfigLayer>
  hsdram2.Instance = FMC_SDRAM_DEVICE;
90000a80:	482f      	ldr	r0, [pc, #188]	@ (90000b40 <main+0x4a8>)
  hsdram2.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
90000a82:	f44f 73c0 	mov.w	r3, #384	@ 0x180
  if (HAL_SDRAM_Init(&hsdram2, &SdramTiming) != HAL_OK)
90000a86:	a90b      	add	r1, sp, #44	@ 0x2c
  SdramTiming.WriteRecoveryTime = 5;
90000a88:	f8cd a03c 	str.w	sl, [sp, #60]	@ 0x3c
  SdramTiming.LoadToActiveDelay = 2;
90000a8c:	970b      	str	r7, [sp, #44]	@ 0x2c
  SdramTiming.SelfRefreshTime = 4;
90000a8e:	f8cd 8034 	str.w	r8, [sp, #52]	@ 0x34
  hsdram2.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
90000a92:	f8c0 800c 	str.w	r8, [r0, #12]
  hsdram2.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
90000a96:	f8c0 9014 	str.w	r9, [r0, #20]
  hsdram2.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
90000a9a:	6284      	str	r4, [r0, #40]	@ 0x28
  hsdram2.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
90000a9c:	e9c0 3406 	strd	r3, r4, [r0, #24]
  hsdram2.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
90000aa0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
90000aa4:	6203      	str	r3, [r0, #32]
  hsdram2.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
90000aa6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
90000aaa:	6243      	str	r3, [r0, #36]	@ 0x24
  SdramTiming.ExitSelfRefreshDelay = 7;
90000aac:	2307      	movs	r3, #7
90000aae:	930c      	str	r3, [sp, #48]	@ 0x30
  SdramTiming.RowCycleDelay = 7;
90000ab0:	930e      	str	r3, [sp, #56]	@ 0x38
  hsdram2.Instance = FMC_SDRAM_DEVICE;
90000ab2:	4b24      	ldr	r3, [pc, #144]	@ (90000b44 <main+0x4ac>)
90000ab4:	6003      	str	r3, [r0, #0]
  hsdram2.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
90000ab6:	2310      	movs	r3, #16
  SdramTiming.RCDDelay = 2;
90000ab8:	e9cd 7710 	strd	r7, r7, [sp, #64]	@ 0x40
  hsdram2.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
90000abc:	6103      	str	r3, [r0, #16]
  hsdram2.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
90000abe:	e9c0 6401 	strd	r6, r4, [r0, #4]
  if (HAL_SDRAM_Init(&hsdram2, &SdramTiming) != HAL_OK)
90000ac2:	f00b f9e9 	bl	9000be98 <HAL_SDRAM_Init>
  BSP_SDRAM_DeInit(0);
90000ac6:	4620      	mov	r0, r4
90000ac8:	f006 f8b2 	bl	90006c30 <BSP_SDRAM_DeInit>
  if(BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
90000acc:	4620      	mov	r0, r4
90000ace:	f006 f8f9 	bl	90006cc4 <BSP_SDRAM_Init>
  MX_LIBJPEG_Init();
90000ad2:	f000 fb7d 	bl	900011d0 <MX_LIBJPEG_Init>
  hjpeg.Instance = JPEG;
90000ad6:	4b1c      	ldr	r3, [pc, #112]	@ (90000b48 <main+0x4b0>)
90000ad8:	481c      	ldr	r0, [pc, #112]	@ (90000b4c <main+0x4b4>)
90000ada:	6003      	str	r3, [r0, #0]
  if (HAL_JPEG_Init(&hjpeg) != HAL_OK)
90000adc:	f007 ff96 	bl	90008a0c <HAL_JPEG_Init>
  hcrc.Instance = CRC;
90000ae0:	4b1b      	ldr	r3, [pc, #108]	@ (90000b50 <main+0x4b8>)
90000ae2:	481c      	ldr	r0, [pc, #112]	@ (90000b54 <main+0x4bc>)
90000ae4:	6003      	str	r3, [r0, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
90000ae6:	8084      	strh	r4, [r0, #4]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
90000ae8:	6206      	str	r6, [r0, #32]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
90000aea:	e9c0 4405 	strd	r4, r4, [r0, #20]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
90000aee:	f006 fc09 	bl	90007304 <HAL_CRC_Init>
  MX_TouchGFX_Init();
90000af2:	f000 fb71 	bl	900011d8 <MX_TouchGFX_Init>
  MX_TouchGFX_PreOSInit();
90000af6:	f000 fb6d 	bl	900011d4 <MX_TouchGFX_PreOSInit>
  DWT_Init();
90000afa:	f7ff fd0f 	bl	9000051c <DWT_Init>
  DWT_DelayUS(200);
90000afe:	20c8      	movs	r0, #200	@ 0xc8
90000b00:	f7ff fd2e 	bl	90000560 <DWT_DelayUS>
  osKernelInitialize();
90000b04:	f00b fcae 	bl	9000c464 <osKernelInitialize>
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
90000b08:	4a13      	ldr	r2, [pc, #76]	@ (90000b58 <main+0x4c0>)
90000b0a:	4621      	mov	r1, r4
90000b0c:	4813      	ldr	r0, [pc, #76]	@ (90000b5c <main+0x4c4>)
90000b0e:	f00b fd09 	bl	9000c524 <osThreadNew>
90000b12:	4b13      	ldr	r3, [pc, #76]	@ (90000b60 <main+0x4c8>)
  GUITaskHandle = osThreadNew(TouchGFX_Task, NULL, &GUITask_attributes);
90000b14:	4a13      	ldr	r2, [pc, #76]	@ (90000b64 <main+0x4cc>)
90000b16:	4621      	mov	r1, r4
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
90000b18:	6018      	str	r0, [r3, #0]
  GUITaskHandle = osThreadNew(TouchGFX_Task, NULL, &GUITask_attributes);
90000b1a:	4813      	ldr	r0, [pc, #76]	@ (90000b68 <main+0x4d0>)
90000b1c:	f00b fd02 	bl	9000c524 <osThreadNew>
90000b20:	4b12      	ldr	r3, [pc, #72]	@ (90000b6c <main+0x4d4>)
90000b22:	4605      	mov	r5, r0
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
90000b24:	4a12      	ldr	r2, [pc, #72]	@ (90000b70 <main+0x4d8>)
90000b26:	4621      	mov	r1, r4
90000b28:	4812      	ldr	r0, [pc, #72]	@ (90000b74 <main+0x4dc>)
  GUITaskHandle = osThreadNew(TouchGFX_Task, NULL, &GUITask_attributes);
90000b2a:	601d      	str	r5, [r3, #0]
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
90000b2c:	f00b fcfa 	bl	9000c524 <osThreadNew>
90000b30:	4b11      	ldr	r3, [pc, #68]	@ (90000b78 <main+0x4e0>)
90000b32:	6018      	str	r0, [r3, #0]
  osKernelStart();
90000b34:	f00b fca8 	bl	9000c488 <osKernelStart>
  while (1)
90000b38:	e7fe      	b.n	90000b38 <main+0x4a0>
90000b3a:	bf00      	nop
90000b3c:	52001000 	.word	0x52001000
90000b40:	24005b70 	.word	0x24005b70
90000b44:	52004140 	.word	0x52004140
90000b48:	52003000 	.word	0x52003000
90000b4c:	24005d24 	.word	0x24005d24
90000b50:	58024c00 	.word	0x58024c00
90000b54:	24005de4 	.word	0x24005de4
90000b58:	90023d38 	.word	0x90023d38
90000b5c:	900005ad 	.word	0x900005ad
90000b60:	24005b6c 	.word	0x24005b6c
90000b64:	90023d14 	.word	0x90023d14
90000b68:	900011e9 	.word	0x900011e9
90000b6c:	24005b68 	.word	0x24005b68
90000b70:	90023cf0 	.word	0x90023cf0
90000b74:	90003711 	.word	0x90003711
90000b78:	24005b64 	.word	0x24005b64

90000b7c <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
90000b7c:	4b03      	ldr	r3, [pc, #12]	@ (90000b8c <HAL_TIM_PeriodElapsedCallback+0x10>)
90000b7e:	6802      	ldr	r2, [r0, #0]
90000b80:	429a      	cmp	r2, r3
90000b82:	d000      	beq.n	90000b86 <HAL_TIM_PeriodElapsedCallback+0xa>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
90000b84:	4770      	bx	lr
    HAL_IncTick();
90000b86:	f006 bae7 	b.w	90007158 <HAL_IncTick>
90000b8a:	bf00      	nop
90000b8c:	40001000 	.word	0x40001000

90000b90 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
90000b90:	4770      	bx	lr
90000b92:	bf00      	nop

90000b94 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
90000b94:	4b0b      	ldr	r3, [pc, #44]	@ (90000bc4 <HAL_MspInit+0x30>)

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
90000b96:	2200      	movs	r2, #0
90000b98:	210f      	movs	r1, #15
90000b9a:	f06f 0001 	mvn.w	r0, #1
{
90000b9e:	b410      	push	{r4}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
90000ba0:	f8d3 40f4 	ldr.w	r4, [r3, #244]	@ 0xf4
{
90000ba4:	b083      	sub	sp, #12
  __HAL_RCC_SYSCFG_CLK_ENABLE();
90000ba6:	f044 0402 	orr.w	r4, r4, #2
90000baa:	f8c3 40f4 	str.w	r4, [r3, #244]	@ 0xf4
90000bae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
90000bb2:	f003 0302 	and.w	r3, r3, #2
90000bb6:	9301      	str	r3, [sp, #4]
90000bb8:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
90000bba:	b003      	add	sp, #12
90000bbc:	f85d 4b04 	ldr.w	r4, [sp], #4
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
90000bc0:	f006 baf4 	b.w	900071ac <HAL_NVIC_SetPriority>
90000bc4:	58024400 	.word	0x58024400

90000bc8 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
90000bc8:	4b0a      	ldr	r3, [pc, #40]	@ (90000bf4 <HAL_CRC_MspInit+0x2c>)
90000bca:	6802      	ldr	r2, [r0, #0]
90000bcc:	429a      	cmp	r2, r3
90000bce:	d000      	beq.n	90000bd2 <HAL_CRC_MspInit+0xa>
90000bd0:	4770      	bx	lr
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
90000bd2:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
{
90000bd6:	b082      	sub	sp, #8
    __HAL_RCC_CRC_CLK_ENABLE();
90000bd8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
90000bdc:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
90000be0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
90000be4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90000be8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
90000bec:	9301      	str	r3, [sp, #4]
90000bee:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
90000bf0:	b002      	add	sp, #8
90000bf2:	4770      	bx	lr
90000bf4:	58024c00 	.word	0x58024c00

90000bf8 <HAL_DMA2D_MspInit>:
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
  if(hdma2d->Instance==DMA2D)
90000bf8:	4b0f      	ldr	r3, [pc, #60]	@ (90000c38 <HAL_DMA2D_MspInit+0x40>)
90000bfa:	6802      	ldr	r2, [r0, #0]
90000bfc:	429a      	cmp	r2, r3
90000bfe:	d000      	beq.n	90000c02 <HAL_DMA2D_MspInit+0xa>
90000c00:	4770      	bx	lr
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
90000c02:	4b0e      	ldr	r3, [pc, #56]	@ (90000c3c <HAL_DMA2D_MspInit+0x44>)
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
90000c04:	205a      	movs	r0, #90	@ 0x5a
90000c06:	2200      	movs	r2, #0
90000c08:	2105      	movs	r1, #5
{
90000c0a:	b510      	push	{r4, lr}
    __HAL_RCC_DMA2D_CLK_ENABLE();
90000c0c:	f8d3 40d4 	ldr.w	r4, [r3, #212]	@ 0xd4
{
90000c10:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_CLK_ENABLE();
90000c12:	f044 0410 	orr.w	r4, r4, #16
90000c16:	f8c3 40d4 	str.w	r4, [r3, #212]	@ 0xd4
90000c1a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
90000c1e:	f003 0310 	and.w	r3, r3, #16
90000c22:	9301      	str	r3, [sp, #4]
90000c24:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
90000c26:	f006 fac1 	bl	900071ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
90000c2a:	205a      	movs	r0, #90	@ 0x5a
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
90000c2c:	b002      	add	sp, #8
90000c2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
90000c32:	f006 baf7 	b.w	90007224 <HAL_NVIC_EnableIRQ>
90000c36:	bf00      	nop
90000c38:	52001000 	.word	0x52001000
90000c3c:	58024400 	.word	0x58024400

90000c40 <HAL_JPEG_MspInit>:
* @param hjpeg: JPEG handle pointer
* @retval None
*/
void HAL_JPEG_MspInit(JPEG_HandleTypeDef* hjpeg)
{
  if(hjpeg->Instance==JPEG)
90000c40:	4b3f      	ldr	r3, [pc, #252]	@ (90000d40 <HAL_JPEG_MspInit+0x100>)
90000c42:	6802      	ldr	r2, [r0, #0]
90000c44:	429a      	cmp	r2, r3
90000c46:	d000      	beq.n	90000c4a <HAL_JPEG_MspInit+0xa>
90000c48:	4770      	bx	lr
{
90000c4a:	b570      	push	{r4, r5, r6, lr}
  /* USER CODE BEGIN JPEG_MspInit 0 */
	 hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
	 hmdma_jpeg_outfifo_th.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_TH;
  /* USER CODE END JPEG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_JPEG_CLK_ENABLE();
90000c4c:	4b3d      	ldr	r3, [pc, #244]	@ (90000d44 <HAL_JPEG_MspInit+0x104>)
	 hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
90000c4e:	2211      	movs	r2, #17
90000c50:	4e3d      	ldr	r6, [pc, #244]	@ (90000d48 <HAL_JPEG_MspInit+0x108>)
{
90000c52:	b082      	sub	sp, #8
	 hmdma_jpeg_outfifo_th.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_TH;
90000c54:	4d3d      	ldr	r5, [pc, #244]	@ (90000d4c <HAL_JPEG_MspInit+0x10c>)
90000c56:	4604      	mov	r4, r0
	 hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
90000c58:	6072      	str	r2, [r6, #4]
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
    hmdma_jpeg_infifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_32BEATS;
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_16BEATS;
    hmdma_jpeg_infifo_th.Init.SourceBlockAddressOffset = 0;
    hmdma_jpeg_infifo_th.Init.DestBlockAddressOffset = 0;
    if (HAL_MDMA_Init(&hmdma_jpeg_infifo_th) != HAL_OK)
90000c5a:	4630      	mov	r0, r6
    __HAL_RCC_JPEG_CLK_ENABLE();
90000c5c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
    hmdma_jpeg_infifo_th.Instance = MDMA_Channel7;
90000c60:	493b      	ldr	r1, [pc, #236]	@ (90000d50 <HAL_JPEG_MspInit+0x110>)
    __HAL_RCC_JPEG_CLK_ENABLE();
90000c62:	f042 0220 	orr.w	r2, r2, #32
90000c66:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_HIGH;
90000c6a:	2280      	movs	r2, #128	@ 0x80
    __HAL_RCC_JPEG_CLK_ENABLE();
90000c6c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
    hmdma_jpeg_infifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
90000c70:	6232      	str	r2, [r6, #32]
    __HAL_RCC_JPEG_CLK_ENABLE();
90000c72:	f003 0320 	and.w	r3, r3, #32
    hmdma_jpeg_infifo_th.Instance = MDMA_Channel7;
90000c76:	6031      	str	r1, [r6, #0]
    __HAL_RCC_JPEG_CLK_ENABLE();
90000c78:	9301      	str	r3, [sp, #4]
    hmdma_jpeg_infifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
90000c7a:	2300      	movs	r3, #0
    __HAL_RCC_JPEG_CLK_ENABLE();
90000c7c:	9901      	ldr	r1, [sp, #4]
    hmdma_jpeg_infifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
90000c7e:	6133      	str	r3, [r6, #16]
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_HIGH;
90000c80:	e9c6 3202 	strd	r3, r2, [r6, #8]
    hmdma_jpeg_infifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
90000c84:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
90000c88:	6272      	str	r2, [r6, #36]	@ 0x24
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
90000c8a:	2220      	movs	r2, #32
    hmdma_jpeg_infifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_BYTE;
90000c8c:	e9c6 3306 	strd	r3, r3, [r6, #24]
    hmdma_jpeg_infifo_th.Init.SourceBlockAddressOffset = 0;
90000c90:	e9c6 330d 	strd	r3, r3, [r6, #52]	@ 0x34
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
90000c94:	62b2      	str	r2, [r6, #40]	@ 0x28
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_16BEATS;
90000c96:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
90000c9a:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
90000c9e:	e9c6 230b 	strd	r2, r3, [r6, #44]	@ 0x2c
	 hmdma_jpeg_outfifo_th.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_TH;
90000ca2:	2313      	movs	r3, #19
90000ca4:	606b      	str	r3, [r5, #4]
    hmdma_jpeg_infifo_th.Init.SourceInc = MDMA_SRC_INC_BYTE;
90000ca6:	2302      	movs	r3, #2
90000ca8:	6173      	str	r3, [r6, #20]
    if (HAL_MDMA_Init(&hmdma_jpeg_infifo_th) != HAL_OK)
90000caa:	f009 f8ad 	bl	90009e08 <HAL_MDMA_Init>
90000cae:	2800      	cmp	r0, #0
90000cb0:	d13a      	bne.n	90000d28 <HAL_JPEG_MspInit+0xe8>
    {
      Error_Handler();
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_infifo_th, 0, 0) != HAL_OK)
90000cb2:	2200      	movs	r2, #0
90000cb4:	4824      	ldr	r0, [pc, #144]	@ (90000d48 <HAL_JPEG_MspInit+0x108>)
90000cb6:	4611      	mov	r1, r2
90000cb8:	f009 f944 	bl	90009f44 <HAL_MDMA_ConfigPostRequestMask>
90000cbc:	2800      	cmp	r0, #0
90000cbe:	d13c      	bne.n	90000d3a <HAL_JPEG_MspInit+0xfa>
    hmdma_jpeg_outfifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
    hmdma_jpeg_outfifo_th.Init.Priority = MDMA_PRIORITY_VERY_HIGH;
    hmdma_jpeg_outfifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
    hmdma_jpeg_outfifo_th.Init.SourceInc = MDMA_SRC_INC_DISABLE;
    hmdma_jpeg_outfifo_th.Init.DestinationInc = MDMA_DEST_INC_BYTE;
    hmdma_jpeg_outfifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
90000cc0:	2220      	movs	r2, #32
    hmdma_jpeg_outfifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
90000cc2:	2300      	movs	r3, #0
    __HAL_LINKDMA(hjpeg,hdmain,hmdma_jpeg_infifo_th);
90000cc4:	6326      	str	r6, [r4, #48]	@ 0x30
    hmdma_jpeg_outfifo_th.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_TH;
90000cc6:	2013      	movs	r0, #19
    hmdma_jpeg_outfifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
90000cc8:	61ea      	str	r2, [r5, #28]
    hmdma_jpeg_outfifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
    hmdma_jpeg_outfifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
    hmdma_jpeg_outfifo_th.Init.BufferTransferLength = 32;
90000cca:	62aa      	str	r2, [r5, #40]	@ 0x28
    hmdma_jpeg_outfifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_32BEATS;
    hmdma_jpeg_outfifo_th.Init.DestBurst = MDMA_DEST_BURST_32BEATS;
90000ccc:	f44f 3220 	mov.w	r2, #163840	@ 0x28000
    hmdma_jpeg_outfifo_th.Instance = MDMA_Channel6;
90000cd0:	4920      	ldr	r1, [pc, #128]	@ (90000d54 <HAL_JPEG_MspInit+0x114>)
    hmdma_jpeg_outfifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
90000cd2:	60ab      	str	r3, [r5, #8]
    hmdma_jpeg_outfifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
90000cd4:	622b      	str	r3, [r5, #32]
    hmdma_jpeg_outfifo_th.Init.SourceBlockAddressOffset = 0;
90000cd6:	63ab      	str	r3, [r5, #56]	@ 0x38
    __HAL_LINKDMA(hjpeg,hdmain,hmdma_jpeg_infifo_th);
90000cd8:	6434      	str	r4, [r6, #64]	@ 0x40
    hmdma_jpeg_outfifo_th.Init.DestBurst = MDMA_DEST_BURST_32BEATS;
90000cda:	e9c5 230c 	strd	r2, r3, [r5, #48]	@ 0x30
    hmdma_jpeg_outfifo_th.Init.SourceInc = MDMA_SRC_INC_DISABLE;
90000cde:	e9c5 3304 	strd	r3, r3, [r5, #16]
    hmdma_jpeg_outfifo_th.Init.DestinationInc = MDMA_DEST_INC_BYTE;
90000ce2:	2308      	movs	r3, #8
    hmdma_jpeg_outfifo_th.Init.Priority = MDMA_PRIORITY_VERY_HIGH;
90000ce4:	22c0      	movs	r2, #192	@ 0xc0
    hmdma_jpeg_outfifo_th.Instance = MDMA_Channel6;
90000ce6:	e9c5 1000 	strd	r1, r0, [r5]
    hmdma_jpeg_outfifo_th.Init.DestinationInc = MDMA_DEST_INC_BYTE;
90000cea:	61ab      	str	r3, [r5, #24]
    hmdma_jpeg_outfifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_32BEATS;
90000cec:	f44f 41a0 	mov.w	r1, #20480	@ 0x5000
    hmdma_jpeg_outfifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
90000cf0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
    hmdma_jpeg_outfifo_th.Init.DestBlockAddressOffset = 0;
    if (HAL_MDMA_Init(&hmdma_jpeg_outfifo_th) != HAL_OK)
90000cf4:	4815      	ldr	r0, [pc, #84]	@ (90000d4c <HAL_JPEG_MspInit+0x10c>)
    hmdma_jpeg_outfifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_32BEATS;
90000cf6:	62e9      	str	r1, [r5, #44]	@ 0x2c
    hmdma_jpeg_outfifo_th.Init.Priority = MDMA_PRIORITY_VERY_HIGH;
90000cf8:	60ea      	str	r2, [r5, #12]
    hmdma_jpeg_outfifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
90000cfa:	626b      	str	r3, [r5, #36]	@ 0x24
    if (HAL_MDMA_Init(&hmdma_jpeg_outfifo_th) != HAL_OK)
90000cfc:	f009 f884 	bl	90009e08 <HAL_MDMA_Init>
90000d00:	b9c0      	cbnz	r0, 90000d34 <HAL_JPEG_MspInit+0xf4>
    {
      Error_Handler();
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_outfifo_th, 0, 0) != HAL_OK)
90000d02:	2200      	movs	r2, #0
90000d04:	4811      	ldr	r0, [pc, #68]	@ (90000d4c <HAL_JPEG_MspInit+0x10c>)
90000d06:	4611      	mov	r1, r2
90000d08:	f009 f91c 	bl	90009f44 <HAL_MDMA_ConfigPostRequestMask>
90000d0c:	b978      	cbnz	r0, 90000d2e <HAL_JPEG_MspInit+0xee>
    {
      Error_Handler();
    }

    __HAL_LINKDMA(hjpeg,hdmaout,hmdma_jpeg_outfifo_th);
90000d0e:	6365      	str	r5, [r4, #52]	@ 0x34

    /* JPEG interrupt Init */
    HAL_NVIC_SetPriority(JPEG_IRQn, 5, 0);
90000d10:	2079      	movs	r0, #121	@ 0x79
90000d12:	2200      	movs	r2, #0
90000d14:	2105      	movs	r1, #5
    __HAL_LINKDMA(hjpeg,hdmaout,hmdma_jpeg_outfifo_th);
90000d16:	642c      	str	r4, [r5, #64]	@ 0x40
    HAL_NVIC_SetPriority(JPEG_IRQn, 5, 0);
90000d18:	f006 fa48 	bl	900071ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
90000d1c:	2079      	movs	r0, #121	@ 0x79
  /* USER CODE BEGIN JPEG_MspInit 1 */

  /* USER CODE END JPEG_MspInit 1 */
  }

}
90000d1e:	b002      	add	sp, #8
90000d20:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
90000d24:	f006 ba7e 	b.w	90007224 <HAL_NVIC_EnableIRQ>
      Error_Handler();
90000d28:	f7ff ff32 	bl	90000b90 <Error_Handler>
90000d2c:	e7c1      	b.n	90000cb2 <HAL_JPEG_MspInit+0x72>
      Error_Handler();
90000d2e:	f7ff ff2f 	bl	90000b90 <Error_Handler>
90000d32:	e7ec      	b.n	90000d0e <HAL_JPEG_MspInit+0xce>
      Error_Handler();
90000d34:	f7ff ff2c 	bl	90000b90 <Error_Handler>
90000d38:	e7e3      	b.n	90000d02 <HAL_JPEG_MspInit+0xc2>
      Error_Handler();
90000d3a:	f7ff ff29 	bl	90000b90 <Error_Handler>
90000d3e:	e7bf      	b.n	90000cc0 <HAL_JPEG_MspInit+0x80>
90000d40:	52003000 	.word	0x52003000
90000d44:	58024400 	.word	0x58024400
90000d48:	24005cb8 	.word	0x24005cb8
90000d4c:	24005c4c 	.word	0x24005c4c
90000d50:	52000200 	.word	0x52000200
90000d54:	520001c0 	.word	0x520001c0

90000d58 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
90000d58:	b570      	push	{r4, r5, r6, lr}
90000d5a:	b0ba      	sub	sp, #232	@ 0xe8
  GPIO_InitTypeDef GPIO_InitStruct = {0};
90000d5c:	2100      	movs	r1, #0
{
90000d5e:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
90000d60:	22c0      	movs	r2, #192	@ 0xc0
90000d62:	a80a      	add	r0, sp, #40	@ 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
90000d64:	9109      	str	r1, [sp, #36]	@ 0x24
90000d66:	e9cd 1105 	strd	r1, r1, [sp, #20]
90000d6a:	e9cd 1107 	strd	r1, r1, [sp, #28]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
90000d6e:	f022 f9ed 	bl	9002314c <memset>
  if(hltdc->Instance==LTDC)
90000d72:	4b4a      	ldr	r3, [pc, #296]	@ (90000e9c <HAL_LTDC_MspInit+0x144>)
90000d74:	6822      	ldr	r2, [r4, #0]
90000d76:	429a      	cmp	r2, r3
90000d78:	d001      	beq.n	90000d7e <HAL_LTDC_MspInit+0x26>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
90000d7a:	b03a      	add	sp, #232	@ 0xe8
90000d7c:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInitStruct.PLL3.PLL3P = 2;
90000d7e:	2302      	movs	r3, #2
    PeriphClkInitStruct.PLL3.PLL3M = 5;
90000d80:	2205      	movs	r2, #5
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
90000d82:	f04f 5400 	mov.w	r4, #536870912	@ 0x20000000
90000d86:	2500      	movs	r5, #0
    PeriphClkInitStruct.PLL3.PLL3N = 160;
90000d88:	21a0      	movs	r1, #160	@ 0xa0
    PeriphClkInitStruct.PLL3.PLL3P = 2;
90000d8a:	9316      	str	r3, [sp, #88]	@ 0x58
    PeriphClkInitStruct.PLL3.PLL3M = 5;
90000d8c:	9214      	str	r2, [sp, #80]	@ 0x50
    PeriphClkInitStruct.PLL3.PLL3R = 83;
90000d8e:	2253      	movs	r2, #83	@ 0x53
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
90000d90:	9317      	str	r3, [sp, #92]	@ 0x5c
    PeriphClkInitStruct.PLL3.PLL3R = 83;
90000d92:	f44f 6300 	mov.w	r3, #2048	@ 0x800
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
90000d96:	a80a      	add	r0, sp, #40	@ 0x28
    PeriphClkInitStruct.PLL3.PLL3N = 160;
90000d98:	9115      	str	r1, [sp, #84]	@ 0x54
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
90000d9a:	e9cd 450a 	strd	r4, r5, [sp, #40]	@ 0x28
    PeriphClkInitStruct.PLL3.PLL3R = 83;
90000d9e:	e9cd 2318 	strd	r2, r3, [sp, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
90000da2:	f00a f91f 	bl	9000afe4 <HAL_RCCEx_PeriphCLKConfig>
90000da6:	2800      	cmp	r0, #0
90000da8:	d174      	bne.n	90000e94 <HAL_LTDC_MspInit+0x13c>
    __HAL_RCC_LTDC_CLK_ENABLE();
90000daa:	4b3d      	ldr	r3, [pc, #244]	@ (90000ea0 <HAL_LTDC_MspInit+0x148>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000dac:	2402      	movs	r4, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
90000dae:	2500      	movs	r5, #0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
90000db0:	260e      	movs	r6, #14
    __HAL_RCC_LTDC_CLK_ENABLE();
90000db2:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
90000db6:	a905      	add	r1, sp, #20
90000db8:	483a      	ldr	r0, [pc, #232]	@ (90000ea4 <HAL_LTDC_MspInit+0x14c>)
    __HAL_RCC_LTDC_CLK_ENABLE();
90000dba:	f042 0208 	orr.w	r2, r2, #8
90000dbe:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
90000dc2:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
90000dc6:	f002 0208 	and.w	r2, r2, #8
90000dca:	9200      	str	r2, [sp, #0]
90000dcc:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOK_CLK_ENABLE();
90000dce:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
90000dd2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
90000dd6:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
90000dda:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
90000dde:	f402 6280 	and.w	r2, r2, #1024	@ 0x400
90000de2:	9201      	str	r2, [sp, #4]
90000de4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOI_CLK_ENABLE();
90000de6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
90000dea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
90000dee:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
90000df2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
90000df6:	f402 7280 	and.w	r2, r2, #256	@ 0x100
90000dfa:	9202      	str	r2, [sp, #8]
90000dfc:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
90000dfe:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
90000e02:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
90000e06:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
90000e0a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
90000e0e:	f402 7200 	and.w	r2, r2, #512	@ 0x200
90000e12:	9203      	str	r2, [sp, #12]
90000e14:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOH_CLK_ENABLE();
90000e16:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
90000e1a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
90000e1e:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
90000e22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
90000e26:	9408      	str	r4, [sp, #32]
    __HAL_RCC_GPIOH_CLK_ENABLE();
90000e28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
90000e2c:	9609      	str	r6, [sp, #36]	@ 0x24
    __HAL_RCC_GPIOH_CLK_ENABLE();
90000e2e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_3
90000e30:	23fc      	movs	r3, #252	@ 0xfc
    __HAL_RCC_GPIOH_CLK_ENABLE();
90000e32:	9a04      	ldr	r2, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_3
90000e34:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
90000e36:	e9cd 4506 	strd	r4, r5, [sp, #24]
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
90000e3a:	f006 fc1b 	bl	90007674 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_9|GPIO_PIN_12
90000e3e:	f24d 2303 	movw	r3, #53763	@ 0xd203
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
90000e42:	a905      	add	r1, sp, #20
90000e44:	4818      	ldr	r0, [pc, #96]	@ (90000ea8 <HAL_LTDC_MspInit+0x150>)
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_9|GPIO_PIN_12
90000e46:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
90000e48:	e9cd 4506 	strd	r4, r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
90000e4c:	e9cd 4608 	strd	r4, r6, [sp, #32]
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
90000e50:	f006 fc10 	bl	90007674 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_12|GPIO_PIN_13
90000e54:	f64f 73fb 	movw	r3, #65531	@ 0xfffb
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
90000e58:	a905      	add	r1, sp, #20
90000e5a:	4814      	ldr	r0, [pc, #80]	@ (90000eac <HAL_LTDC_MspInit+0x154>)
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_12|GPIO_PIN_13
90000e5c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
90000e5e:	e9cd 4506 	strd	r4, r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
90000e62:	e9cd 4608 	strd	r4, r6, [sp, #32]
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
90000e66:	f006 fc05 	bl	90007674 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
90000e6a:	f44f 7300 	mov.w	r3, #512	@ 0x200
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
90000e6e:	a905      	add	r1, sp, #20
90000e70:	480f      	ldr	r0, [pc, #60]	@ (90000eb0 <HAL_LTDC_MspInit+0x158>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
90000e72:	9609      	str	r6, [sp, #36]	@ 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_9;
90000e74:	e9cd 3405 	strd	r3, r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
90000e78:	e9cd 5407 	strd	r5, r4, [sp, #28]
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
90000e7c:	f006 fbfa 	bl	90007674 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
90000e80:	462a      	mov	r2, r5
90000e82:	2105      	movs	r1, #5
90000e84:	2058      	movs	r0, #88	@ 0x58
90000e86:	f006 f991 	bl	900071ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
90000e8a:	2058      	movs	r0, #88	@ 0x58
90000e8c:	f006 f9ca 	bl	90007224 <HAL_NVIC_EnableIRQ>
}
90000e90:	b03a      	add	sp, #232	@ 0xe8
90000e92:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
90000e94:	f7ff fe7c 	bl	90000b90 <Error_Handler>
90000e98:	e787      	b.n	90000daa <HAL_LTDC_MspInit+0x52>
90000e9a:	bf00      	nop
90000e9c:	50001000 	.word	0x50001000
90000ea0:	58024400 	.word	0x58024400
90000ea4:	58022800 	.word	0x58022800
90000ea8:	58022000 	.word	0x58022000
90000eac:	58022400 	.word	0x58022400
90000eb0:	58021c00 	.word	0x58021c00

90000eb4 <HAL_SDRAM_MspInit>:
static void HAL_FMC_MspInit(void){
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
  if (FMC_Initialized) {
90000eb4:	4836      	ldr	r0, [pc, #216]	@ (90000f90 <HAL_SDRAM_MspInit+0xdc>)
  GPIO_InitTypeDef GPIO_InitStruct ={0};
90000eb6:	2300      	movs	r3, #0
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
90000eb8:	b5d0      	push	{r4, r6, r7, lr}
  if (FMC_Initialized) {
90000eba:	6801      	ldr	r1, [r0, #0]
void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
90000ebc:	b0b8      	sub	sp, #224	@ 0xe0
  GPIO_InitTypeDef GPIO_InitStruct ={0};
90000ebe:	e9cd 3302 	strd	r3, r3, [sp, #8]
90000ec2:	e9cd 3304 	strd	r3, r3, [sp, #16]
90000ec6:	9306      	str	r3, [sp, #24]
  if (FMC_Initialized) {
90000ec8:	b109      	cbz	r1, 90000ece <HAL_SDRAM_MspInit+0x1a>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
90000eca:	b038      	add	sp, #224	@ 0xe0
90000ecc:	bdd0      	pop	{r4, r6, r7, pc}
  FMC_Initialized = 1;
90000ece:	2301      	movs	r3, #1
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
90000ed0:	22b8      	movs	r2, #184	@ 0xb8
  FMC_Initialized = 1;
90000ed2:	6003      	str	r3, [r0, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
90000ed4:	a80a      	add	r0, sp, #40	@ 0x28
90000ed6:	f022 f939 	bl	9002314c <memset>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
90000eda:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
90000ede:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
90000ee0:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
90000ee2:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
90000ee6:	f00a f87d 	bl	9000afe4 <HAL_RCCEx_PeriphCLKConfig>
90000eea:	2800      	cmp	r0, #0
90000eec:	d14c      	bne.n	90000f88 <HAL_SDRAM_MspInit+0xd4>
  __HAL_RCC_FMC_CLK_ENABLE();
90000eee:	4b29      	ldr	r3, [pc, #164]	@ (90000f94 <HAL_SDRAM_MspInit+0xe0>)
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
90000ef0:	f64f 7083 	movw	r0, #65411	@ 0xff83
90000ef4:	2102      	movs	r1, #2
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
90000ef6:	240c      	movs	r4, #12
  __HAL_RCC_FMC_CLK_ENABLE();
90000ef8:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
90000efc:	2600      	movs	r6, #0
90000efe:	2703      	movs	r7, #3
  __HAL_RCC_FMC_CLK_ENABLE();
90000f00:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
90000f04:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
90000f08:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
90000f0c:	9406      	str	r4, [sp, #24]
  __HAL_RCC_FMC_CLK_ENABLE();
90000f0e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
90000f12:	e9cd 0102 	strd	r0, r1, [sp, #8]
  __HAL_RCC_FMC_CLK_ENABLE();
90000f16:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
90000f18:	a902      	add	r1, sp, #8
90000f1a:	481f      	ldr	r0, [pc, #124]	@ (90000f98 <HAL_SDRAM_MspInit+0xe4>)
  __HAL_RCC_FMC_CLK_ENABLE();
90000f1c:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
90000f1e:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
90000f22:	f006 fba7 	bl	90007674 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
90000f26:	f248 1233 	movw	r2, #33075	@ 0x8133
90000f2a:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
90000f2c:	a902      	add	r1, sp, #8
90000f2e:	481b      	ldr	r0, [pc, #108]	@ (90000f9c <HAL_SDRAM_MspInit+0xe8>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
90000f30:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
90000f32:	e9cd 2302 	strd	r2, r3, [sp, #8]
90000f36:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
90000f3a:	f006 fb9b 	bl	90007674 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
90000f3e:	f24c 7203 	movw	r2, #50947	@ 0xc703
90000f42:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
90000f44:	a902      	add	r1, sp, #8
90000f46:	4816      	ldr	r0, [pc, #88]	@ (90000fa0 <HAL_SDRAM_MspInit+0xec>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
90000f48:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
90000f4a:	e9cd 2302 	strd	r2, r3, [sp, #8]
90000f4e:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
90000f52:	f006 fb8f 	bl	90007674 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
90000f56:	f64f 023f 	movw	r2, #63551	@ 0xf83f
90000f5a:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
90000f5c:	a902      	add	r1, sp, #8
90000f5e:	4811      	ldr	r0, [pc, #68]	@ (90000fa4 <HAL_SDRAM_MspInit+0xf0>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
90000f60:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
90000f62:	e9cd 2302 	strd	r2, r3, [sp, #8]
90000f66:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
90000f6a:	f006 fb83 	bl	90007674 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
90000f6e:	22e0      	movs	r2, #224	@ 0xe0
90000f70:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
90000f72:	a902      	add	r1, sp, #8
90000f74:	480c      	ldr	r0, [pc, #48]	@ (90000fa8 <HAL_SDRAM_MspInit+0xf4>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
90000f76:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
90000f78:	e9cd 6704 	strd	r6, r7, [sp, #16]
90000f7c:	e9cd 2302 	strd	r2, r3, [sp, #8]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
90000f80:	f006 fb78 	bl	90007674 <HAL_GPIO_Init>
}
90000f84:	b038      	add	sp, #224	@ 0xe0
90000f86:	bdd0      	pop	{r4, r6, r7, pc}
      Error_Handler();
90000f88:	f7ff fe02 	bl	90000b90 <Error_Handler>
90000f8c:	e7af      	b.n	90000eee <HAL_SDRAM_MspInit+0x3a>
90000f8e:	bf00      	nop
90000f90:	24005e0c 	.word	0x24005e0c
90000f94:	58024400 	.word	0x58024400
90000f98:	58021000 	.word	0x58021000
90000f9c:	58021800 	.word	0x58021800
90000fa0:	58020c00 	.word	0x58020c00
90000fa4:	58021400 	.word	0x58021400
90000fa8:	58021c00 	.word	0x58021c00

90000fac <HAL_SDRAM_MspDeInit>:

static void HAL_FMC_MspDeInit(void){
  /* USER CODE BEGIN FMC_MspDeInit 0 */

  /* USER CODE END FMC_MspDeInit 0 */
  if (FMC_DeInitialized) {
90000fac:	4b13      	ldr	r3, [pc, #76]	@ (90000ffc <HAL_SDRAM_MspDeInit+0x50>)
90000fae:	681a      	ldr	r2, [r3, #0]
90000fb0:	b102      	cbz	r2, 90000fb4 <HAL_SDRAM_MspDeInit+0x8>
90000fb2:	4770      	bx	lr
  /* USER CODE BEGIN FMC_MspDeInit 1 */

  /* USER CODE END FMC_MspDeInit 1 */
}

void HAL_SDRAM_MspDeInit(SDRAM_HandleTypeDef* hsdram){
90000fb4:	b510      	push	{r4, lr}
  __HAL_RCC_FMC_CLK_DISABLE();
90000fb6:	4a12      	ldr	r2, [pc, #72]	@ (90001000 <HAL_SDRAM_MspDeInit+0x54>)
  FMC_DeInitialized = 1;
90000fb8:	2401      	movs	r4, #1
  HAL_GPIO_DeInit(GPIOE, GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
90000fba:	f64f 7183 	movw	r1, #65411	@ 0xff83
90000fbe:	4811      	ldr	r0, [pc, #68]	@ (90001004 <HAL_SDRAM_MspDeInit+0x58>)
  FMC_DeInitialized = 1;
90000fc0:	601c      	str	r4, [r3, #0]
  __HAL_RCC_FMC_CLK_DISABLE();
90000fc2:	f8d2 30d4 	ldr.w	r3, [r2, #212]	@ 0xd4
90000fc6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
90000fca:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
  HAL_GPIO_DeInit(GPIOE, GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
90000fce:	f006 fc93 	bl	900078f8 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOG, GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
90000fd2:	f248 1133 	movw	r1, #33075	@ 0x8133
90000fd6:	480c      	ldr	r0, [pc, #48]	@ (90001008 <HAL_SDRAM_MspDeInit+0x5c>)
90000fd8:	f006 fc8e 	bl	900078f8 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
90000fdc:	f24c 7103 	movw	r1, #50947	@ 0xc703
90000fe0:	480a      	ldr	r0, [pc, #40]	@ (9000100c <HAL_SDRAM_MspDeInit+0x60>)
90000fe2:	f006 fc89 	bl	900078f8 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOF, GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
90000fe6:	f64f 013f 	movw	r1, #63551	@ 0xf83f
90000fea:	4809      	ldr	r0, [pc, #36]	@ (90001010 <HAL_SDRAM_MspDeInit+0x64>)
90000fec:	f006 fc84 	bl	900078f8 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOH, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);
90000ff0:	21e0      	movs	r1, #224	@ 0xe0
90000ff2:	4808      	ldr	r0, [pc, #32]	@ (90001014 <HAL_SDRAM_MspDeInit+0x68>)
  /* USER CODE END SDRAM_MspDeInit 0 */
  HAL_FMC_MspDeInit();
  /* USER CODE BEGIN SDRAM_MspDeInit 1 */

  /* USER CODE END SDRAM_MspDeInit 1 */
}
90000ff4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_GPIO_DeInit(GPIOH, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);
90000ff8:	f006 bc7e 	b.w	900078f8 <HAL_GPIO_DeInit>
90000ffc:	24005e08 	.word	0x24005e08
90001000:	58024400 	.word	0x58024400
90001004:	58021000 	.word	0x58021000
90001008:	58021800 	.word	0x58021800
9000100c:	58020c00 	.word	0x58020c00
90001010:	58021400 	.word	0x58021400
90001014:	58021c00 	.word	0x58021c00

90001018 <HAL_InitTick>:
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
90001018:	280f      	cmp	r0, #15
9000101a:	d901      	bls.n	90001020 <HAL_InitTick+0x8>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
    uwTickPrio = TickPriority;
    }
  else
  {
    return HAL_ERROR;
9000101c:	2001      	movs	r0, #1
    return HAL_TIM_Base_Start_IT(&htim6);
  }

  /* Return function status */
  return HAL_ERROR;
}
9000101e:	4770      	bx	lr
{
90001020:	b530      	push	{r4, r5, lr}
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
90001022:	4601      	mov	r1, r0
{
90001024:	b08b      	sub	sp, #44	@ 0x2c
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
90001026:	2200      	movs	r2, #0
90001028:	4604      	mov	r4, r0
9000102a:	2036      	movs	r0, #54	@ 0x36
9000102c:	f006 f8be 	bl	900071ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
90001030:	2036      	movs	r0, #54	@ 0x36
90001032:	f006 f8f7 	bl	90007224 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_TIM6_CLK_ENABLE();
90001036:	4b1b      	ldr	r3, [pc, #108]	@ (900010a4 <HAL_InitTick+0x8c>)
    uwTickPrio = TickPriority;
90001038:	4a1b      	ldr	r2, [pc, #108]	@ (900010a8 <HAL_InitTick+0x90>)
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
9000103a:	4669      	mov	r1, sp
9000103c:	a802      	add	r0, sp, #8
    uwTickPrio = TickPriority;
9000103e:	6014      	str	r4, [r2, #0]
  __HAL_RCC_TIM6_CLK_ENABLE();
90001040:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
90001044:	f042 0210 	orr.w	r2, r2, #16
90001048:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
9000104c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
90001050:	f003 0310 	and.w	r3, r3, #16
90001054:	9301      	str	r3, [sp, #4]
90001056:	9b01      	ldr	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
90001058:	f009 feb4 	bl	9000adc4 <HAL_RCC_GetClockConfig>
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
9000105c:	9b07      	ldr	r3, [sp, #28]
9000105e:	b9c3      	cbnz	r3, 90001092 <HAL_InitTick+0x7a>
    uwTimclock = HAL_RCC_GetPCLK1Freq();
90001060:	f009 fe20 	bl	9000aca4 <HAL_RCC_GetPCLK1Freq>
90001064:	4603      	mov	r3, r0
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
90001066:	4911      	ldr	r1, [pc, #68]	@ (900010ac <HAL_InitTick+0x94>)
  htim6.Init.ClockDivision = 0;
90001068:	2200      	movs	r2, #0
  htim6.Instance = TIM6;
9000106a:	4c11      	ldr	r4, [pc, #68]	@ (900010b0 <HAL_InitTick+0x98>)
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
9000106c:	fba1 1303 	umull	r1, r3, r1, r3
  htim6.Instance = TIM6;
90001070:	4d10      	ldr	r5, [pc, #64]	@ (900010b4 <HAL_InitTick+0x9c>)
  htim6.Init.Period = (1000000U / 1000U) - 1U;
90001072:	f240 31e7 	movw	r1, #999	@ 0x3e7
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
90001076:	4620      	mov	r0, r4
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
90001078:	0c9b      	lsrs	r3, r3, #18
  htim6.Instance = TIM6;
9000107a:	6025      	str	r5, [r4, #0]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
9000107c:	60a2      	str	r2, [r4, #8]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
9000107e:	3b01      	subs	r3, #1
  htim6.Init.Period = (1000000U / 1000U) - 1U;
90001080:	e9c4 1203 	strd	r1, r2, [r4, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
90001084:	6063      	str	r3, [r4, #4]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
90001086:	f00a ff79 	bl	9000bf7c <HAL_TIM_Base_Init>
9000108a:	b130      	cbz	r0, 9000109a <HAL_InitTick+0x82>
    return HAL_ERROR;
9000108c:	2001      	movs	r0, #1
}
9000108e:	b00b      	add	sp, #44	@ 0x2c
90001090:	bd30      	pop	{r4, r5, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
90001092:	f009 fe07 	bl	9000aca4 <HAL_RCC_GetPCLK1Freq>
90001096:	0043      	lsls	r3, r0, #1
90001098:	e7e5      	b.n	90001066 <HAL_InitTick+0x4e>
    return HAL_TIM_Base_Start_IT(&htim6);
9000109a:	4620      	mov	r0, r4
9000109c:	f00b f80c 	bl	9000c0b8 <HAL_TIM_Base_Start_IT>
900010a0:	e7f5      	b.n	9000108e <HAL_InitTick+0x76>
900010a2:	bf00      	nop
900010a4:	58024400 	.word	0x58024400
900010a8:	24000060 	.word	0x24000060
900010ac:	431bde83 	.word	0x431bde83
900010b0:	24005e10 	.word	0x24005e10
900010b4:	40001000 	.word	0x40001000

900010b8 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
900010b8:	4770      	bx	lr
900010ba:	bf00      	nop

900010bc <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
900010bc:	e7fe      	b.n	900010bc <HardFault_Handler>
900010be:	bf00      	nop

900010c0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
900010c0:	e7fe      	b.n	900010c0 <MemManage_Handler>
900010c2:	bf00      	nop

900010c4 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
900010c4:	e7fe      	b.n	900010c4 <BusFault_Handler>
900010c6:	bf00      	nop

900010c8 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
900010c8:	e7fe      	b.n	900010c8 <UsageFault_Handler>
900010ca:	bf00      	nop

900010cc <DebugMon_Handler>:
}

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
900010cc:	4770      	bx	lr
900010ce:	bf00      	nop

900010d0 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
900010d0:	4801      	ldr	r0, [pc, #4]	@ (900010d8 <TIM6_DAC_IRQHandler+0x8>)
900010d2:	f00b b84b 	b.w	9000c16c <HAL_TIM_IRQHandler>
900010d6:	bf00      	nop
900010d8:	24005e10 	.word	0x24005e10

900010dc <LTDC_IRQHandler>:
void LTDC_IRQHandler(void)
{
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
900010dc:	4801      	ldr	r0, [pc, #4]	@ (900010e4 <LTDC_IRQHandler+0x8>)
900010de:	f008 bd3b 	b.w	90009b58 <HAL_LTDC_IRQHandler>
900010e2:	bf00      	nop
900010e4:	24005ba4 	.word	0x24005ba4

900010e8 <DMA2D_IRQHandler>:
void DMA2D_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
900010e8:	4801      	ldr	r0, [pc, #4]	@ (900010f0 <DMA2D_IRQHandler+0x8>)
900010ea:	f006 b9c5 	b.w	90007478 <HAL_DMA2D_IRQHandler>
900010ee:	bf00      	nop
900010f0:	24005d7c 	.word	0x24005d7c

900010f4 <JPEG_IRQHandler>:
void JPEG_IRQHandler(void)
{
  /* USER CODE BEGIN JPEG_IRQn 0 */

  /* USER CODE END JPEG_IRQn 0 */
  HAL_JPEG_IRQHandler(&hjpeg);
900010f4:	4801      	ldr	r0, [pc, #4]	@ (900010fc <JPEG_IRQHandler+0x8>)
900010f6:	f008 bc21 	b.w	9000993c <HAL_JPEG_IRQHandler>
900010fa:	bf00      	nop
900010fc:	24005d24 	.word	0x24005d24

90001100 <MDMA_IRQHandler>:
void MDMA_IRQHandler(void)
{
  /* USER CODE BEGIN MDMA_IRQn 0 */

  /* USER CODE END MDMA_IRQn 0 */
  HAL_MDMA_IRQHandler(&hmdma_jpeg_outfifo_th);
90001100:	4804      	ldr	r0, [pc, #16]	@ (90001114 <MDMA_IRQHandler+0x14>)
{
90001102:	b508      	push	{r3, lr}
  HAL_MDMA_IRQHandler(&hmdma_jpeg_outfifo_th);
90001104:	f008 ffd0 	bl	9000a0a8 <HAL_MDMA_IRQHandler>
  HAL_MDMA_IRQHandler(&hmdma_jpeg_infifo_th);
90001108:	4803      	ldr	r0, [pc, #12]	@ (90001118 <MDMA_IRQHandler+0x18>)
  /* USER CODE BEGIN MDMA_IRQn 1 */

  /* USER CODE END MDMA_IRQn 1 */
}
9000110a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_MDMA_IRQHandler(&hmdma_jpeg_infifo_th);
9000110e:	f008 bfcb 	b.w	9000a0a8 <HAL_MDMA_IRQHandler>
90001112:	bf00      	nop
90001114:	24005c4c 	.word	0x24005c4c
90001118:	24005cb8 	.word	0x24005cb8

9000111c <_getpid>:
}

int _getpid(void)
{
	return 1;
}
9000111c:	2001      	movs	r0, #1
9000111e:	4770      	bx	lr

90001120 <_kill>:

int _kill(int pid, int sig)
{
90001120:	b508      	push	{r3, lr}
	errno = EINVAL;
90001122:	f022 f8c7 	bl	900232b4 <__errno>
90001126:	2216      	movs	r2, #22
90001128:	4603      	mov	r3, r0
	return -1;
}
9000112a:	f04f 30ff 	mov.w	r0, #4294967295
	errno = EINVAL;
9000112e:	601a      	str	r2, [r3, #0]
}
90001130:	bd08      	pop	{r3, pc}
90001132:	bf00      	nop

90001134 <_exit>:

void _exit (int status)
{
90001134:	b508      	push	{r3, lr}
	errno = EINVAL;
90001136:	f022 f8bd 	bl	900232b4 <__errno>
9000113a:	2316      	movs	r3, #22
9000113c:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
9000113e:	e7fe      	b.n	9000113e <_exit+0xa>

90001140 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
90001140:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
90001142:	1e16      	subs	r6, r2, #0
90001144:	dd07      	ble.n	90001156 <_read+0x16>
90001146:	460c      	mov	r4, r1
90001148:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
9000114a:	f3af 8000 	nop.w
9000114e:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
90001152:	42a5      	cmp	r5, r4
90001154:	d1f9      	bne.n	9000114a <_read+0xa>
	}

return len;
}
90001156:	4630      	mov	r0, r6
90001158:	bd70      	pop	{r4, r5, r6, pc}
9000115a:	bf00      	nop

9000115c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
9000115c:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
9000115e:	1e16      	subs	r6, r2, #0
90001160:	dd07      	ble.n	90001172 <_write+0x16>
90001162:	460c      	mov	r4, r1
90001164:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
90001166:	f814 0b01 	ldrb.w	r0, [r4], #1
9000116a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
9000116e:	42ac      	cmp	r4, r5
90001170:	d1f9      	bne.n	90001166 <_write+0xa>
	}
	return len;
}
90001172:	4630      	mov	r0, r6
90001174:	bd70      	pop	{r4, r5, r6, pc}
90001176:	bf00      	nop

90001178 <_close>:

int _close(int file)
{
	return -1;
}
90001178:	f04f 30ff 	mov.w	r0, #4294967295
9000117c:	4770      	bx	lr
9000117e:	bf00      	nop

90001180 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
90001180:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
	return 0;
}
90001184:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
90001186:	604b      	str	r3, [r1, #4]
}
90001188:	4770      	bx	lr
9000118a:	bf00      	nop

9000118c <_isatty>:

int _isatty(int file)
{
	return 1;
}
9000118c:	2001      	movs	r0, #1
9000118e:	4770      	bx	lr

90001190 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
90001190:	2000      	movs	r0, #0
90001192:	4770      	bx	lr

90001194 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
90001194:	4a0c      	ldr	r2, [pc, #48]	@ (900011c8 <_sbrk+0x34>)
{
90001196:	b508      	push	{r3, lr}
90001198:	4603      	mov	r3, r0
	if (heap_end == 0)
9000119a:	6810      	ldr	r0, [r2, #0]
9000119c:	b128      	cbz	r0, 900011aa <_sbrk+0x16>
		heap_end = &end;

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
9000119e:	4403      	add	r3, r0
900011a0:	4669      	mov	r1, sp
900011a2:	428b      	cmp	r3, r1
900011a4:	d808      	bhi.n	900011b8 <_sbrk+0x24>
	{
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
900011a6:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
900011a8:	bd08      	pop	{r3, pc}
		heap_end = &end;
900011aa:	4908      	ldr	r1, [pc, #32]	@ (900011cc <_sbrk+0x38>)
900011ac:	4608      	mov	r0, r1
900011ae:	6011      	str	r1, [r2, #0]
	if (heap_end + incr > stack_ptr)
900011b0:	4669      	mov	r1, sp
900011b2:	4403      	add	r3, r0
900011b4:	428b      	cmp	r3, r1
900011b6:	d9f6      	bls.n	900011a6 <_sbrk+0x12>
		errno = ENOMEM;
900011b8:	f022 f87c 	bl	900232b4 <__errno>
900011bc:	220c      	movs	r2, #12
900011be:	4603      	mov	r3, r0
		return (caddr_t) -1;
900011c0:	f04f 30ff 	mov.w	r0, #4294967295
		errno = ENOMEM;
900011c4:	601a      	str	r2, [r3, #0]
}
900011c6:	bd08      	pop	{r3, pc}
900011c8:	24005e5c 	.word	0x24005e5c
900011cc:	240266f0 	.word	0x240266f0

900011d0 <MX_LIBJPEG_Init>:
  */

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
900011d0:	4770      	bx	lr
900011d2:	bf00      	nop

900011d4 <MX_TouchGFX_PreOSInit>:
/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
}
900011d4:	4770      	bx	lr
900011d6:	bf00      	nop

900011d8 <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
900011d8:	b508      	push	{r3, lr}
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_components_init();
900011da:	f001 fee5 	bl	90002fa8 <touchgfx_components_init>
  touchgfx_init();
}
900011de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  touchgfx_init();
900011e2:	f001 be69 	b.w	90002eb8 <touchgfx_init>
900011e6:	bf00      	nop

900011e8 <TouchGFX_Task>:
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
900011e8:	f001 bee0 	b.w	90002fac <touchgfx_taskEntry>

900011ec <_ZN8touchgfx18MCUInstrumentation13getCCConsumedEv>:
     *
     * @return clock cycles.
     */
    virtual uint32_t getCCConsumed()
    {
        return cc_consumed;
900011ec:	6840      	ldr	r0, [r0, #4]
    }
900011ee:	4770      	bx	lr

900011f0 <_ZN8touchgfx18MCUInstrumentation13setCCConsumedEm>:
     *
     * @param  val number of clock cycles.
     */
    virtual void setCCConsumed(uint32_t val)
    {
        cc_consumed = val;
900011f0:	6041      	str	r1, [r0, #4]
    }
900011f2:	4770      	bx	lr

900011f4 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>:
    //                                    Embedded Trace Macrocell (ETM)
    //                                    Trace Port Interface Unit (TPIU).
    //                                    This enables control of power usage unless tracing is required. The application can enable this, for ITM use, or use by a debugger.

    // Enable Debug Exception and Monitor Control Register
    *((volatile unsigned int*)0xE000EDFC) |= 0x01000000;
900011f4:	f04f 20e0 	mov.w	r0, #3758153728	@ 0xe000e000
    // Enable Lock Access Register
    *((volatile unsigned int*)0xE0001FB0) |= 0xC5ACCE55;
900011f8:	4b08      	ldr	r3, [pc, #32]	@ (9000121c <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x28>)
900011fa:	4a09      	ldr	r2, [pc, #36]	@ (90001220 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x2c>)
    *((volatile unsigned int*)0xE000EDFC) |= 0x01000000;
900011fc:	f8d0 1dfc 	ldr.w	r1, [r0, #3580]	@ 0xdfc
90001200:	f041 7180 	orr.w	r1, r1, #16777216	@ 0x1000000
90001204:	f8c0 1dfc 	str.w	r1, [r0, #3580]	@ 0xdfc
    *((volatile unsigned int*)0xE0001FB0) |= 0xC5ACCE55;
90001208:	f8d3 1fb0 	ldr.w	r1, [r3, #4016]	@ 0xfb0
9000120c:	430a      	orrs	r2, r1
9000120e:	f8c3 2fb0 	str.w	r2, [r3, #4016]	@ 0xfb0
    // Enable Data Watchpoint and Trace Control Register
    *((volatile unsigned int*)0xE0001000) |= 1;
90001212:	681a      	ldr	r2, [r3, #0]
90001214:	f042 0201 	orr.w	r2, r2, #1
90001218:	601a      	str	r2, [r3, #0]
}
9000121a:	4770      	bx	lr
9000121c:	e0001000 	.word	0xe0001000
90001220:	c5acce55 	.word	0xc5acce55

90001224 <_ZN8touchgfx25CortexMMCUInstrumentation12getElapsedUSEjjj>:

//Board specific clockfrequency
unsigned int CortexMMCUInstrumentation::getElapsedUS(unsigned int start, unsigned int now, unsigned int clockfrequency)
{
    return ((now - start) + (clockfrequency / 2)) / clockfrequency;
90001224:	1a52      	subs	r2, r2, r1
90001226:	eb02 0253 	add.w	r2, r2, r3, lsr #1
}
9000122a:	fbb2 f0f3 	udiv	r0, r2, r3
9000122e:	4770      	bx	lr

90001230 <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv>:

unsigned int CortexMMCUInstrumentation::getCPUCycles()
{
    return *((volatile unsigned int*)0xE0001004);
90001230:	4b01      	ldr	r3, [pc, #4]	@ (90001238 <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv+0x8>)
90001232:	6858      	ldr	r0, [r3, #4]
}
90001234:	4770      	bx	lr
90001236:	bf00      	nop
90001238:	e0001000 	.word	0xe0001000

9000123c <_ZN8touchgfx25CortexMMCUInstrumentationD1Ev>:
 *        Interface for instrumenting Cortex-M processors to measure MCU load via measured CPU
 *        cycles.
 *
 * @sa MCUInstrumentation
 */
class CortexMMCUInstrumentation : public MCUInstrumentation
9000123c:	4770      	bx	lr
9000123e:	bf00      	nop

90001240 <_ZN8touchgfx25CortexMMCUInstrumentationD0Ev>:
90001240:	b510      	push	{r4, lr}
90001242:	4604      	mov	r4, r0
90001244:	210c      	movs	r1, #12
90001246:	f021 fcb6 	bl	90022bb6 <_ZdlPvj>
9000124a:	4620      	mov	r0, r4
9000124c:	bd10      	pop	{r4, pc}
9000124e:	bf00      	nop

90001250 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb>:

void CortexMMCUInstrumentation::setMCUActive(bool active)
{
    if (active) //idle task sched out
    {
        uint32_t cc_temp = getCPUCycles() - cc_in;
90001250:	6803      	ldr	r3, [r0, #0]
90001252:	4a0c      	ldr	r2, [pc, #48]	@ (90001284 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x34>)
90001254:	691b      	ldr	r3, [r3, #16]
{
90001256:	b510      	push	{r4, lr}
90001258:	4604      	mov	r4, r0
    if (active) //idle task sched out
9000125a:	b149      	cbz	r1, 90001270 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x20>
        uint32_t cc_temp = getCPUCycles() - cc_in;
9000125c:	4293      	cmp	r3, r2
9000125e:	d10d      	bne.n	9000127c <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x2c>
    return *((volatile unsigned int*)0xE0001004);
90001260:	4b09      	ldr	r3, [pc, #36]	@ (90001288 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x38>)
90001262:	6858      	ldr	r0, [r3, #4]
        uint32_t cc_temp = getCPUCycles() - cc_in;
90001264:	68a2      	ldr	r2, [r4, #8]
        cc_consumed += cc_temp;
90001266:	6863      	ldr	r3, [r4, #4]
90001268:	1a9b      	subs	r3, r3, r2
9000126a:	4403      	add	r3, r0
9000126c:	6063      	str	r3, [r4, #4]
    }
    else //idle task sched in
    {
        cc_in = getCPUCycles();
    }
}
9000126e:	bd10      	pop	{r4, pc}
        cc_in = getCPUCycles();
90001270:	4293      	cmp	r3, r2
90001272:	d105      	bne.n	90001280 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x30>
    return *((volatile unsigned int*)0xE0001004);
90001274:	4b04      	ldr	r3, [pc, #16]	@ (90001288 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x38>)
90001276:	6858      	ldr	r0, [r3, #4]
        cc_in = getCPUCycles();
90001278:	60a0      	str	r0, [r4, #8]
}
9000127a:	bd10      	pop	{r4, pc}
        uint32_t cc_temp = getCPUCycles() - cc_in;
9000127c:	4798      	blx	r3
9000127e:	e7f1      	b.n	90001264 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x14>
        cc_in = getCPUCycles();
90001280:	4798      	blx	r3
90001282:	e7f9      	b.n	90001278 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x28>
90001284:	90001231 	.word	0x90001231
90001288:	e0001000 	.word	0xe0001000

9000128c <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
9000128c:	4770      	bx	lr
9000128e:	bf00      	nop

90001290 <_ZN20STM32TouchController4initEv>:

#include <STM32TouchController.hpp>
#include "stm32h750b_discovery_ts.h"

void STM32TouchController::init()
{
90001290:	b500      	push	{lr}
90001292:	b085      	sub	sp, #20
     *
     */
    TS_Init_t hTS;
    hTS.Orientation = TS_SWAP_XY;
    hTS.Accuracy = 0;
    hTS.Width = 480;
90001294:	2208      	movs	r2, #8
90001296:	2300      	movs	r3, #0
    hTS.Height = 272;
    BSP_TS_Init(0, &hTS);
90001298:	2000      	movs	r0, #0
9000129a:	4669      	mov	r1, sp
    hTS.Width = 480;
9000129c:	ed9f 7b06 	vldr	d7, [pc, #24]	@ 900012b8 <_ZN20STM32TouchController4initEv+0x28>
900012a0:	e9cd 2302 	strd	r2, r3, [sp, #8]
900012a4:	ed8d 7b00 	vstr	d7, [sp]
    BSP_TS_Init(0, &hTS);
900012a8:	f005 fdf6 	bl	90006e98 <BSP_TS_Init>
}
900012ac:	b005      	add	sp, #20
900012ae:	f85d fb04 	ldr.w	pc, [sp], #4
900012b2:	bf00      	nop
900012b4:	f3af 8000 	nop.w
900012b8:	000001e0 	.word	0x000001e0
900012bc:	00000110 	.word	0x00000110

900012c0 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
900012c0:	b530      	push	{r4, r5, lr}
900012c2:	b085      	sub	sp, #20
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    TS_State_t  TS_State = { 0 };
900012c4:	2000      	movs	r0, #0
{
900012c6:	460d      	mov	r5, r1
900012c8:	4614      	mov	r4, r2
    BSP_TS_GetState(0, &TS_State);
900012ca:	a901      	add	r1, sp, #4
    TS_State_t  TS_State = { 0 };
900012cc:	9001      	str	r0, [sp, #4]
900012ce:	e9cd 0002 	strd	r0, r0, [sp, #8]
    BSP_TS_GetState(0, &TS_State);
900012d2:	f005 fe6f 	bl	90006fb4 <BSP_TS_GetState>
    if (TS_State.TouchDetected)
900012d6:	9801      	ldr	r0, [sp, #4]
900012d8:	b120      	cbz	r0, 900012e4 <_ZN20STM32TouchController11sampleTouchERlS0_+0x24>
    {
        x = TS_State.TouchX;
        y = TS_State.TouchY;
        return true;
900012da:	2001      	movs	r0, #1
        y = TS_State.TouchY;
900012dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
        x = TS_State.TouchX;
900012e0:	602a      	str	r2, [r5, #0]
        y = TS_State.TouchY;
900012e2:	6023      	str	r3, [r4, #0]
    }

    return false;
}
900012e4:	b005      	add	sp, #20
900012e6:	bd30      	pop	{r4, r5, pc}

900012e8 <_ZN20STM32TouchControllerD0Ev>:
900012e8:	b510      	push	{r4, lr}
900012ea:	4604      	mov	r4, r0
900012ec:	2104      	movs	r1, #4
900012ee:	f021 fc62 	bl	90022bb6 <_ZdlPvj>
900012f2:	4620      	mov	r0, r4
900012f4:	bd10      	pop	{r4, pc}
900012f6:	bf00      	nop

900012f8 <_ZN8touchgfx4GPIO4initEv>:

/*
 * Perform configuration of IO pins.
 */
void GPIO::init()
{
900012f8:	b508      	push	{r3, lr}
    for (int id = 0; id <= 4; id++)
900012fa:	2300      	movs	r3, #0
 * Gets the state of a pin.
 */
bool GPIO::get(GPIO_ID id)
{
    GPIO_PinState bitstatus = GPIO_PIN_RESET;
    switch (id)
900012fc:	2b03      	cmp	r3, #3
900012fe:	d82b      	bhi.n	90001358 <_ZN8touchgfx4GPIO4initEv+0x60>
90001300:	e8df f003 	tbb	[pc, r3]
90001304:	020c1620 	.word	0x020c1620
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
90001308:	2140      	movs	r1, #64	@ 0x40
9000130a:	4814      	ldr	r0, [pc, #80]	@ (9000135c <_ZN8touchgfx4GPIO4initEv+0x64>)
9000130c:	f006 fbbe 	bl	90007a8c <HAL_GPIO_ReadPin>
        if (GPIO::get(static_cast<GPIO_ID>(id)))
90001310:	2801      	cmp	r0, #1
90001312:	d101      	bne.n	90001318 <_ZN8touchgfx4GPIO4initEv+0x20>
            GPIO_InvertedLevels[id] = 1;
90001314:	4b12      	ldr	r3, [pc, #72]	@ (90001360 <_ZN8touchgfx4GPIO4initEv+0x68>)
90001316:	60d8      	str	r0, [r3, #12]
    for (int id = 0; id <= 4; id++)
90001318:	2304      	movs	r3, #4
9000131a:	e7ef      	b.n	900012fc <_ZN8touchgfx4GPIO4initEv+0x4>
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
9000131c:	2140      	movs	r1, #64	@ 0x40
9000131e:	4811      	ldr	r0, [pc, #68]	@ (90001364 <_ZN8touchgfx4GPIO4initEv+0x6c>)
90001320:	f006 fbb4 	bl	90007a8c <HAL_GPIO_ReadPin>
        if (GPIO::get(static_cast<GPIO_ID>(id)))
90001324:	2801      	cmp	r0, #1
90001326:	d101      	bne.n	9000132c <_ZN8touchgfx4GPIO4initEv+0x34>
            GPIO_InvertedLevels[id] = 1;
90001328:	4b0d      	ldr	r3, [pc, #52]	@ (90001360 <_ZN8touchgfx4GPIO4initEv+0x68>)
9000132a:	6098      	str	r0, [r3, #8]
    for (int id = 0; id <= 4; id++)
9000132c:	2303      	movs	r3, #3
9000132e:	e7e5      	b.n	900012fc <_ZN8touchgfx4GPIO4initEv+0x4>
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
90001330:	2180      	movs	r1, #128	@ 0x80
90001332:	480c      	ldr	r0, [pc, #48]	@ (90001364 <_ZN8touchgfx4GPIO4initEv+0x6c>)
90001334:	f006 fbaa 	bl	90007a8c <HAL_GPIO_ReadPin>
        if (GPIO::get(static_cast<GPIO_ID>(id)))
90001338:	2801      	cmp	r0, #1
9000133a:	d101      	bne.n	90001340 <_ZN8touchgfx4GPIO4initEv+0x48>
            GPIO_InvertedLevels[id] = 1;
9000133c:	4b08      	ldr	r3, [pc, #32]	@ (90001360 <_ZN8touchgfx4GPIO4initEv+0x68>)
9000133e:	6058      	str	r0, [r3, #4]
    for (int id = 0; id <= 4; id++)
90001340:	2302      	movs	r3, #2
90001342:	e7db      	b.n	900012fc <_ZN8touchgfx4GPIO4initEv+0x4>
        bitstatus = HAL_GPIO_ReadPin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
90001344:	2108      	movs	r1, #8
90001346:	4808      	ldr	r0, [pc, #32]	@ (90001368 <_ZN8touchgfx4GPIO4initEv+0x70>)
90001348:	f006 fba0 	bl	90007a8c <HAL_GPIO_ReadPin>
        if (GPIO::get(static_cast<GPIO_ID>(id)))
9000134c:	2801      	cmp	r0, #1
9000134e:	d101      	bne.n	90001354 <_ZN8touchgfx4GPIO4initEv+0x5c>
            GPIO_InvertedLevels[id] = 1;
90001350:	4b03      	ldr	r3, [pc, #12]	@ (90001360 <_ZN8touchgfx4GPIO4initEv+0x68>)
90001352:	6018      	str	r0, [r3, #0]
    for (int id = 0; id <= 4; id++)
90001354:	2301      	movs	r3, #1
90001356:	e7d1      	b.n	900012fc <_ZN8touchgfx4GPIO4initEv+0x4>
}
90001358:	bd08      	pop	{r3, pc}
9000135a:	bf00      	nop
9000135c:	58020000 	.word	0x58020000
90001360:	24005e60 	.word	0x24005e60
90001364:	58020400 	.word	0x58020400
90001368:	58021800 	.word	0x58021800

9000136c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:
    switch (id)
9000136c:	2803      	cmp	r0, #3
9000136e:	d827      	bhi.n	900013c0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>
90001370:	e8df f000 	tbb	[pc, r0]
90001374:	020b141d 	.word	0x020b141d
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
90001378:	4b12      	ldr	r3, [pc, #72]	@ (900013c4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x58>)
9000137a:	2140      	movs	r1, #64	@ 0x40
9000137c:	4812      	ldr	r0, [pc, #72]	@ (900013c8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x5c>)
9000137e:	68da      	ldr	r2, [r3, #12]
90001380:	fab2 f282 	clz	r2, r2
90001384:	0952      	lsrs	r2, r2, #5
90001386:	f006 bb87 	b.w	90007a98 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
9000138a:	4b0e      	ldr	r3, [pc, #56]	@ (900013c4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x58>)
9000138c:	2140      	movs	r1, #64	@ 0x40
9000138e:	480f      	ldr	r0, [pc, #60]	@ (900013cc <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x60>)
90001390:	689a      	ldr	r2, [r3, #8]
90001392:	fab2 f282 	clz	r2, r2
90001396:	0952      	lsrs	r2, r2, #5
90001398:	f006 bb7e 	b.w	90007a98 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
9000139c:	4b09      	ldr	r3, [pc, #36]	@ (900013c4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x58>)
9000139e:	2180      	movs	r1, #128	@ 0x80
900013a0:	480a      	ldr	r0, [pc, #40]	@ (900013cc <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x60>)
900013a2:	685a      	ldr	r2, [r3, #4]
900013a4:	fab2 f282 	clz	r2, r2
900013a8:	0952      	lsrs	r2, r2, #5
900013aa:	f006 bb75 	b.w	90007a98 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_SET(id));
900013ae:	4b05      	ldr	r3, [pc, #20]	@ (900013c4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x58>)
900013b0:	2108      	movs	r1, #8
900013b2:	4807      	ldr	r0, [pc, #28]	@ (900013d0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x64>)
900013b4:	681a      	ldr	r2, [r3, #0]
900013b6:	fab2 f282 	clz	r2, r2
900013ba:	0952      	lsrs	r2, r2, #5
900013bc:	f006 bb6c 	b.w	90007a98 <HAL_GPIO_WritePin>
}
900013c0:	4770      	bx	lr
900013c2:	bf00      	nop
900013c4:	24005e60 	.word	0x24005e60
900013c8:	58020000 	.word	0x58020000
900013cc:	58020400 	.word	0x58020400
900013d0:	58021800 	.word	0x58021800

900013d4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:
    switch (id)
900013d4:	2803      	cmp	r0, #3
900013d6:	d827      	bhi.n	90001428 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>
900013d8:	e8df f000 	tbb	[pc, r0]
900013dc:	020b141d 	.word	0x020b141d
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
900013e0:	4b12      	ldr	r3, [pc, #72]	@ (9000142c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x58>)
900013e2:	2140      	movs	r1, #64	@ 0x40
900013e4:	4812      	ldr	r0, [pc, #72]	@ (90001430 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x5c>)
900013e6:	68da      	ldr	r2, [r3, #12]
900013e8:	3a00      	subs	r2, #0
900013ea:	bf18      	it	ne
900013ec:	2201      	movne	r2, #1
900013ee:	f006 bb53 	b.w	90007a98 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
900013f2:	4b0e      	ldr	r3, [pc, #56]	@ (9000142c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x58>)
900013f4:	2140      	movs	r1, #64	@ 0x40
900013f6:	480f      	ldr	r0, [pc, #60]	@ (90001434 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x60>)
900013f8:	689a      	ldr	r2, [r3, #8]
900013fa:	3a00      	subs	r2, #0
900013fc:	bf18      	it	ne
900013fe:	2201      	movne	r2, #1
90001400:	f006 bb4a 	b.w	90007a98 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
90001404:	4b09      	ldr	r3, [pc, #36]	@ (9000142c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x58>)
90001406:	2180      	movs	r1, #128	@ 0x80
90001408:	480a      	ldr	r0, [pc, #40]	@ (90001434 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x60>)
9000140a:	685a      	ldr	r2, [r3, #4]
9000140c:	3a00      	subs	r2, #0
9000140e:	bf18      	it	ne
90001410:	2201      	movne	r2, #1
90001412:	f006 bb41 	b.w	90007a98 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_RESET(id));
90001416:	4b05      	ldr	r3, [pc, #20]	@ (9000142c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x58>)
90001418:	2108      	movs	r1, #8
9000141a:	4807      	ldr	r0, [pc, #28]	@ (90001438 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x64>)
9000141c:	681a      	ldr	r2, [r3, #0]
9000141e:	3a00      	subs	r2, #0
90001420:	bf18      	it	ne
90001422:	2201      	movne	r2, #1
90001424:	f006 bb38 	b.w	90007a98 <HAL_GPIO_WritePin>
}
90001428:	4770      	bx	lr
9000142a:	bf00      	nop
9000142c:	24005e60 	.word	0x24005e60
90001430:	58020000 	.word	0x58020000
90001434:	58020400 	.word	0x58020400
90001438:	58021800 	.word	0x58021800

9000143c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:
    switch (id)
9000143c:	2803      	cmp	r0, #3
9000143e:	d813      	bhi.n	90001468 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2c>
90001440:	e8df f000 	tbb	[pc, r0]
90001444:	02060a0e 	.word	0x02060a0e
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
90001448:	2140      	movs	r1, #64	@ 0x40
9000144a:	4808      	ldr	r0, [pc, #32]	@ (9000146c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x30>)
9000144c:	f006 bb28 	b.w	90007aa0 <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
90001450:	2140      	movs	r1, #64	@ 0x40
90001452:	4807      	ldr	r0, [pc, #28]	@ (90001470 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x34>)
90001454:	f006 bb24 	b.w	90007aa0 <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
90001458:	2180      	movs	r1, #128	@ 0x80
9000145a:	4805      	ldr	r0, [pc, #20]	@ (90001470 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x34>)
9000145c:	f006 bb20 	b.w	90007aa0 <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
90001460:	2108      	movs	r1, #8
90001462:	4804      	ldr	r0, [pc, #16]	@ (90001474 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x38>)
90001464:	f006 bb1c 	b.w	90007aa0 <HAL_GPIO_TogglePin>
}
90001468:	4770      	bx	lr
9000146a:	bf00      	nop
9000146c:	58020000 	.word	0x58020000
90001470:	58020400 	.word	0x58020400
90001474:	58021800 	.word	0x58021800

90001478 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual DMAType getDMAType()
    {
        return DMA_TYPE_GENERIC;
    }
90001478:	2000      	movs	r0, #0
9000147a:	4770      	bx	lr

9000147c <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
    {
        requestedOrientation = orientation;
        displayOrientationChangeRequested = true;
9000147c:	2301      	movs	r3, #1
        requestedOrientation = orientation;
9000147e:	f880 1074 	strb.w	r1, [r0, #116]	@ 0x74
        displayOrientationChangeRequested = true;
90001482:	f880 3075 	strb.w	r3, [r0, #117]	@ 0x75
    }
90001486:	4770      	bx	lr

90001488 <_ZN8touchgfx3HAL9sampleKeyERh>:
     */
    virtual bool sampleKey(uint8_t& key)
    {
        (void)key; // Unused variable
        return false;
    }
90001488:	2000      	movs	r0, #0
9000148a:	4770      	bx	lr

9000148c <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
        USE_ANIMATION_STORAGE = animationStorage != 0;
9000148c:	1e0a      	subs	r2, r1, #0
9000148e:	4b03      	ldr	r3, [pc, #12]	@ (9000149c <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x10>)
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
90001490:	6441      	str	r1, [r0, #68]	@ 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
90001492:	bf18      	it	ne
90001494:	2201      	movne	r2, #1
90001496:	701a      	strb	r2, [r3, #0]
    }
90001498:	4770      	bx	lr
9000149a:	bf00      	nop
9000149c:	2402630b 	.word	0x2402630b

900014a0 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
    {
        return 0;
    }
900014a0:	2000      	movs	r0, #0
900014a2:	4770      	bx	lr

900014a4 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
    {
        if (taskDelayFunc)
900014a4:	6b83      	ldr	r3, [r0, #56]	@ 0x38
    virtual void taskDelay(uint16_t ms)
900014a6:	4608      	mov	r0, r1
        if (taskDelayFunc)
900014a8:	b103      	cbz	r3, 900014ac <_ZN8touchgfx3HAL9taskDelayEt+0x8>
        {
            taskDelayFunc(ms);
900014aa:	4718      	bx	r3
        }
    }
900014ac:	4770      	bx	lr
900014ae:	bf00      	nop

900014b0 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
    {
        return 0xFFFFu;
    }
900014b0:	f64f 70ff 	movw	r0, #65535	@ 0xffff
900014b4:	4770      	bx	lr
900014b6:	bf00      	nop

900014b8 <_ZN11TouchGFXHALD1Ev>:
 *
 * @brief HAL implementation for TouchGFX.
 *
 * @sa HAL
 */
class TouchGFXHAL : public TouchGFXGeneratedHAL
900014b8:	4770      	bx	lr
900014ba:	bf00      	nop

900014bc <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
900014bc:	b508      	push	{r3, lr}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
900014be:	4b09      	ldr	r3, [pc, #36]	@ (900014e4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x28>)
900014c0:	881b      	ldrh	r3, [r3, #0]
900014c2:	428b      	cmp	r3, r1
900014c4:	d808      	bhi.n	900014d8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1c>
900014c6:	4b08      	ldr	r3, [pc, #32]	@ (900014e8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x2c>)
900014c8:	881b      	ldrh	r3, [r3, #0]
900014ca:	4293      	cmp	r3, r2
900014cc:	d804      	bhi.n	900014d8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1c>
        FRAME_BUFFER_WIDTH = width;
900014ce:	4807      	ldr	r0, [pc, #28]	@ (900014ec <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>)
        FRAME_BUFFER_HEIGHT = height;
900014d0:	4b07      	ldr	r3, [pc, #28]	@ (900014f0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x34>)
        FRAME_BUFFER_WIDTH = width;
900014d2:	8001      	strh	r1, [r0, #0]
        FRAME_BUFFER_HEIGHT = height;
900014d4:	801a      	strh	r2, [r3, #0]
    }
900014d6:	bd08      	pop	{r3, pc}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
900014d8:	4b06      	ldr	r3, [pc, #24]	@ (900014f4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x38>)
900014da:	219e      	movs	r1, #158	@ 0x9e
900014dc:	4a06      	ldr	r2, [pc, #24]	@ (900014f8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x3c>)
900014de:	4807      	ldr	r0, [pc, #28]	@ (900014fc <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x40>)
900014e0:	f021 fb98 	bl	90022c14 <__assert_func>
900014e4:	24026300 	.word	0x24026300
900014e8:	24026302 	.word	0x24026302
900014ec:	24026306 	.word	0x24026306
900014f0:	24026308 	.word	0x24026308
900014f4:	90023d9c 	.word	0x90023d9c
900014f8:	90023e00 	.word	0x90023e00
900014fc:	90023e44 	.word	0x90023e44

90001500 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
90001500:	b510      	push	{r4, lr}
90001502:	4604      	mov	r4, r0
        swapFrameBuffers();
90001504:	f00f fe54 	bl	900111b0 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
90001508:	6823      	ldr	r3, [r4, #0]
9000150a:	4620      	mov	r0, r4
9000150c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
    }
90001510:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        tick();
90001514:	4718      	bx	r3
90001516:	bf00      	nop

90001518 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
90001518:	f001 be22 	b.w	90003160 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>

9000151c <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
9000151c:	f001 be26 	b.w	9000316c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>

90001520 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
90001520:	b510      	push	{r4, lr}
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
90001522:	f001 fee5 	bl	900032f0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
90001526:	4812      	ldr	r0, [pc, #72]	@ (90001570 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x50>)
90001528:	2300      	movs	r3, #0
9000152a:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
9000152e:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
90001532:	f8d0 3080 	ldr.w	r3, [r0, #128]	@ 0x80
                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
90001536:	f643 74e0 	movw	r4, #16352	@ 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
9000153a:	f3c3 3c4e 	ubfx	ip, r3, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
9000153e:	f3c3 0ec9 	ubfx	lr, r3, #3, #10
90001542:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
90001546:	ea0c 0104 	and.w	r1, ip, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
9000154a:	4673      	mov	r3, lr
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
9000154c:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
90001550:	3b01      	subs	r3, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
90001552:	f8c0 2274 	str.w	r2, [r0, #628]	@ 0x274
      } while (ways-- != 0U);
90001556:	1c5a      	adds	r2, r3, #1
90001558:	d1f8      	bne.n	9000154c <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x2c>
    } while(sets-- != 0U);
9000155a:	f1ac 0c20 	sub.w	ip, ip, #32
9000155e:	f11c 0f20 	cmn.w	ip, #32
90001562:	d1f0      	bne.n	90001546 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x26>
90001564:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
90001568:	f3bf 8f6f 	isb	sy
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
    // to flush the Dcache to make sure framebuffer is correct in RAM. That's done
    // using SCB_CleanInvalidateDCache().

    SCB_CleanInvalidateDCache();
}
9000156c:	bd10      	pop	{r4, pc}
9000156e:	bf00      	nop
90001570:	e000ed00 	.word	0xe000ed00

90001574 <_ZN11TouchGFXHAL19configureInterruptsEv>:
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
90001574:	f001 bdd0 	b.w	90003118 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>

90001578 <_ZN11TouchGFXHAL16enableInterruptsEv>:
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
90001578:	f001 bfe0 	b.w	9000353c <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>

9000157c <_ZN11TouchGFXHAL17disableInterruptsEv>:
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
9000157c:	f001 bfca 	b.w	90003514 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>

90001580 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
90001580:	f001 bdd4 	b.w	9000312c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>

90001584 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
    {
        HAL::flushFrameBuffer();
90001584:	f00f b86c 	b.w	90010660 <_ZN8touchgfx3HAL16flushFrameBufferEv>

90001588 <_ZN11TouchGFXHALD0Ev>:
90001588:	b510      	push	{r4, lr}
9000158a:	4604      	mov	r4, r0
9000158c:	2188      	movs	r1, #136	@ 0x88
9000158e:	f021 fb12 	bl	90022bb6 <_ZdlPvj>
90001592:	4620      	mov	r0, r4
90001594:	bd10      	pop	{r4, pc}
90001596:	bf00      	nop

90001598 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
    {
        if (requestedOrientation != nativeDisplayOrientation)
90001598:	f890 c074 	ldrb.w	ip, [r0, #116]	@ 0x74
9000159c:	f890 1034 	ldrb.w	r1, [r0, #52]	@ 0x34
        {
            if (DISPLAY_ROTATION == rotate0)
900015a0:	4b0b      	ldr	r3, [pc, #44]	@ (900015d0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x38>)
        if (requestedOrientation != nativeDisplayOrientation)
900015a2:	458c      	cmp	ip, r1
            if (DISPLAY_ROTATION == rotate0)
900015a4:	781a      	ldrb	r2, [r3, #0]
        if (requestedOrientation != nativeDisplayOrientation)
900015a6:	d00b      	beq.n	900015c0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x28>
            if (DISPLAY_ROTATION == rotate0)
900015a8:	b94a      	cbnz	r2, 900015be <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
900015aa:	4a0a      	ldr	r2, [pc, #40]	@ (900015d4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>)
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
                DISPLAY_WIDTH = tmp;
                DISPLAY_ROTATION = rotate90;
900015ac:	f04f 0c01 	mov.w	ip, #1
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
900015b0:	4909      	ldr	r1, [pc, #36]	@ (900015d8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
            }
        }
        else if (DISPLAY_ROTATION != rotate0)
        {
            const uint16_t tmp = DISPLAY_HEIGHT;
900015b2:	8810      	ldrh	r0, [r2, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
900015b4:	f883 c000 	strb.w	ip, [r3]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
900015b8:	880b      	ldrh	r3, [r1, #0]
            DISPLAY_WIDTH = tmp;
900015ba:	8008      	strh	r0, [r1, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
900015bc:	8013      	strh	r3, [r2, #0]
        }
    }
900015be:	4770      	bx	lr
        else if (DISPLAY_ROTATION != rotate0)
900015c0:	2a00      	cmp	r2, #0
900015c2:	d0fc      	beq.n	900015be <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
            const uint16_t tmp = DISPLAY_HEIGHT;
900015c4:	4a03      	ldr	r2, [pc, #12]	@ (900015d4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>)
            DISPLAY_ROTATION = rotate0;
900015c6:	f04f 0c00 	mov.w	ip, #0
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
900015ca:	4903      	ldr	r1, [pc, #12]	@ (900015d8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
900015cc:	e7f1      	b.n	900015b2 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x1a>
900015ce:	bf00      	nop
900015d0:	24026304 	.word	0x24026304
900015d4:	24026302 	.word	0x24026302
900015d8:	24026300 	.word	0x24026300

900015dc <_ZN8touchgfx3HAL11getBlitCapsEv>:
    virtual BlitOperations getBlitCaps()
900015dc:	4603      	mov	r3, r0
        if (useDMAAcceleration)
900015de:	f890 0077 	ldrb.w	r0, [r0, #119]	@ 0x77
900015e2:	b118      	cbz	r0, 900015ec <_ZN8touchgfx3HAL11getBlitCapsEv+0x10>
900015e4:	6858      	ldr	r0, [r3, #4]
            return dma.getBlitCaps();
900015e6:	6803      	ldr	r3, [r0, #0]
900015e8:	681b      	ldr	r3, [r3, #0]
900015ea:	4718      	bx	r3
    }
900015ec:	4770      	bx	lr
900015ee:	bf00      	nop

900015f0 <_ZN8touchgfx3HAL10getDMATypeEv>:
        return dma.getDMAType();
900015f0:	6840      	ldr	r0, [r0, #4]
900015f2:	4a04      	ldr	r2, [pc, #16]	@ (90001604 <_ZN8touchgfx3HAL10getDMATypeEv+0x14>)
900015f4:	6803      	ldr	r3, [r0, #0]
900015f6:	699b      	ldr	r3, [r3, #24]
900015f8:	4293      	cmp	r3, r2
900015fa:	d101      	bne.n	90001600 <_ZN8touchgfx3HAL10getDMATypeEv+0x10>
    }
900015fc:	2000      	movs	r0, #0
900015fe:	4770      	bx	lr
        return dma.getDMAType();
90001600:	4718      	bx	r3
90001602:	bf00      	nop
90001604:	90001479 	.word	0x90001479

90001608 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
        assert(frameBuffer != 0 && "A framebuffer address must be set");
90001608:	b1a9      	cbz	r1, 90001636 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x2e>
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
9000160a:	6402      	str	r2, [r0, #64]	@ 0x40
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
9000160c:	3a00      	subs	r2, #0
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
9000160e:	63c1      	str	r1, [r0, #60]	@ 0x3c
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
90001610:	bf18      	it	ne
90001612:	2201      	movne	r2, #1
90001614:	490c      	ldr	r1, [pc, #48]	@ (90001648 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x40>)
90001616:	700a      	strb	r2, [r1, #0]
        setAnimationStorage(animationStorage);
90001618:	6802      	ldr	r2, [r0, #0]
9000161a:	490c      	ldr	r1, [pc, #48]	@ (9000164c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x44>)
9000161c:	f8d2 208c 	ldr.w	r2, [r2, #140]	@ 0x8c
90001620:	428a      	cmp	r2, r1
90001622:	d106      	bne.n	90001632 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x2a>
        USE_ANIMATION_STORAGE = animationStorage != 0;
90001624:	1e19      	subs	r1, r3, #0
90001626:	4a0a      	ldr	r2, [pc, #40]	@ (90001650 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x48>)
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
90001628:	6443      	str	r3, [r0, #68]	@ 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
9000162a:	bf18      	it	ne
9000162c:	2101      	movne	r1, #1
9000162e:	7011      	strb	r1, [r2, #0]
90001630:	4770      	bx	lr
        setAnimationStorage(animationStorage);
90001632:	4619      	mov	r1, r3
90001634:	4710      	bx	r2
        assert(frameBuffer != 0 && "A framebuffer address must be set");
90001636:	4b07      	ldr	r3, [pc, #28]	@ (90001654 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x4c>)
90001638:	f240 21d2 	movw	r1, #722	@ 0x2d2
9000163c:	4a06      	ldr	r2, [pc, #24]	@ (90001658 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x50>)
9000163e:	4807      	ldr	r0, [pc, #28]	@ (9000165c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x54>)
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
90001640:	b510      	push	{r4, lr}
        assert(frameBuffer != 0 && "A framebuffer address must be set");
90001642:	f021 fae7 	bl	90022c14 <__assert_func>
90001646:	bf00      	nop
90001648:	2402630a 	.word	0x2402630a
9000164c:	9000148d 	.word	0x9000148d
90001650:	2402630b 	.word	0x2402630b
90001654:	90023e8c 	.word	0x90023e8c
90001658:	90023ec4 	.word	0x90023ec4
9000165c:	90023e44 	.word	0x90023e44

90001660 <_ZN11TouchGFXHAL9taskEntryEv>:
{
90001660:	b508      	push	{r3, lr}
    enableLCDControllerInterrupt();
90001662:	6803      	ldr	r3, [r0, #0]
{
90001664:	4604      	mov	r4, r0
90001666:	4d17      	ldr	r5, [pc, #92]	@ (900016c4 <_ZN11TouchGFXHAL9taskEntryEv+0x64>)
    enableLCDControllerInterrupt();
90001668:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
9000166c:	4798      	blx	r3
    enableInterrupts();
9000166e:	6823      	ldr	r3, [r4, #0]
90001670:	4620      	mov	r0, r4
90001672:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
90001674:	4798      	blx	r3
    OSWrappers::waitForVSync();
90001676:	f001 f8bf 	bl	900027f8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
    backPorchExited();
9000167a:	6823      	ldr	r3, [r4, #0]
9000167c:	4620      	mov	r0, r4
9000167e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
90001680:	4798      	blx	r3
    HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_SET);
90001682:	2201      	movs	r2, #1
90001684:	2104      	movs	r1, #4
90001686:	4810      	ldr	r0, [pc, #64]	@ (900016c8 <_ZN11TouchGFXHAL9taskEntryEv+0x68>)
90001688:	f006 fa06 	bl	90007a98 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_DE_GPIO_Port, LCD_DE_Pin, GPIO_PIN_SET);
9000168c:	2201      	movs	r2, #1
9000168e:	2180      	movs	r1, #128	@ 0x80
90001690:	480e      	ldr	r0, [pc, #56]	@ (900016cc <_ZN11TouchGFXHAL9taskEntryEv+0x6c>)
90001692:	f006 fa01 	bl	90007a98 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
90001696:	2201      	movs	r2, #1
90001698:	480d      	ldr	r0, [pc, #52]	@ (900016d0 <_ZN11TouchGFXHAL9taskEntryEv+0x70>)
9000169a:	4611      	mov	r1, r2
9000169c:	f006 f9fc 	bl	90007a98 <HAL_GPIO_WritePin>
        OSWrappers::waitForVSync();
900016a0:	f001 f8aa 	bl	900027f8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
        backPorchExited();
900016a4:	6823      	ldr	r3, [r4, #0]
        swapFrameBuffers();
900016a6:	4620      	mov	r0, r4
900016a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
900016aa:	42ab      	cmp	r3, r5
900016ac:	d107      	bne.n	900016be <_ZN11TouchGFXHAL9taskEntryEv+0x5e>
900016ae:	f00f fd7f 	bl	900111b0 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
900016b2:	6823      	ldr	r3, [r4, #0]
900016b4:	4620      	mov	r0, r4
900016b6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
900016ba:	4798      	blx	r3
    }
900016bc:	e7f0      	b.n	900016a0 <_ZN11TouchGFXHAL9taskEntryEv+0x40>
900016be:	4798      	blx	r3
900016c0:	e7ee      	b.n	900016a0 <_ZN11TouchGFXHAL9taskEntryEv+0x40>
900016c2:	bf00      	nop
900016c4:	90001501 	.word	0x90001501
900016c8:	58020000 	.word	0x58020000
900016cc:	58020c00 	.word	0x58020c00
900016d0:	58022800 	.word	0x58022800

900016d4 <_ZN11TouchGFXHAL10initializeEv>:
{
900016d4:	b538      	push	{r3, r4, r5, lr}
900016d6:	4604      	mov	r4, r0
    TouchGFXGeneratedHAL::initialize();
900016d8:	f001 ff3a 	bl	90003550 <_ZN20TouchGFXGeneratedHAL10initializeEv>
    setFrameBufferStartAddresses((void*)frameBuffer0, (void*)frameBuffer1, (void*)animationBuffer);
900016dc:	4817      	ldr	r0, [pc, #92]	@ (9000173c <_ZN11TouchGFXHAL10initializeEv+0x68>)
900016de:	6823      	ldr	r3, [r4, #0]
900016e0:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
900016e2:	f8d3 5088 	ldr.w	r5, [r3, #136]	@ 0x88
900016e6:	6c22      	ldr	r2, [r4, #64]	@ 0x40
900016e8:	4285      	cmp	r5, r0
900016ea:	d119      	bne.n	90001720 <_ZN11TouchGFXHAL10initializeEv+0x4c>
        assert(frameBuffer != 0 && "A framebuffer address must be set");
900016ec:	b1f9      	cbz	r1, 9000172e <_ZN11TouchGFXHAL10initializeEv+0x5a>
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
900016ee:	3a00      	subs	r2, #0
900016f0:	4913      	ldr	r1, [pc, #76]	@ (90001740 <_ZN11TouchGFXHAL10initializeEv+0x6c>)
        setAnimationStorage(animationStorage);
900016f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
900016f6:	bf18      	it	ne
900016f8:	2201      	movne	r2, #1
900016fa:	4812      	ldr	r0, [pc, #72]	@ (90001744 <_ZN11TouchGFXHAL10initializeEv+0x70>)
900016fc:	428b      	cmp	r3, r1
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
900016fe:	4912      	ldr	r1, [pc, #72]	@ (90001748 <_ZN11TouchGFXHAL10initializeEv+0x74>)
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
90001700:	7002      	strb	r2, [r0, #0]
        setAnimationStorage(animationStorage);
90001702:	d111      	bne.n	90001728 <_ZN11TouchGFXHAL10initializeEv+0x54>
        USE_ANIMATION_STORAGE = animationStorage != 0;
90001704:	4b11      	ldr	r3, [pc, #68]	@ (9000174c <_ZN11TouchGFXHAL10initializeEv+0x78>)
90001706:	2201      	movs	r2, #1
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
90001708:	6461      	str	r1, [r4, #68]	@ 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
9000170a:	701a      	strb	r2, [r3, #0]
    instrumentation.init();
9000170c:	f104 057c 	add.w	r5, r4, #124	@ 0x7c
90001710:	4628      	mov	r0, r5
90001712:	f7ff fd6f 	bl	900011f4 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>
        updateMCULoad = enabled;
90001716:	2301      	movs	r3, #1
        mcuInstrumentation = mcuInstr;
90001718:	6125      	str	r5, [r4, #16]
        updateMCULoad = enabled;
9000171a:	f884 306c 	strb.w	r3, [r4, #108]	@ 0x6c
}
9000171e:	bd38      	pop	{r3, r4, r5, pc}
    setFrameBufferStartAddresses((void*)frameBuffer0, (void*)frameBuffer1, (void*)animationBuffer);
90001720:	4b09      	ldr	r3, [pc, #36]	@ (90001748 <_ZN11TouchGFXHAL10initializeEv+0x74>)
90001722:	4620      	mov	r0, r4
90001724:	47a8      	blx	r5
90001726:	e7f1      	b.n	9000170c <_ZN11TouchGFXHAL10initializeEv+0x38>
        setAnimationStorage(animationStorage);
90001728:	4620      	mov	r0, r4
9000172a:	4798      	blx	r3
9000172c:	e7ee      	b.n	9000170c <_ZN11TouchGFXHAL10initializeEv+0x38>
        assert(frameBuffer != 0 && "A framebuffer address must be set");
9000172e:	4b08      	ldr	r3, [pc, #32]	@ (90001750 <_ZN11TouchGFXHAL10initializeEv+0x7c>)
90001730:	f240 21d2 	movw	r1, #722	@ 0x2d2
90001734:	4a07      	ldr	r2, [pc, #28]	@ (90001754 <_ZN11TouchGFXHAL10initializeEv+0x80>)
90001736:	4808      	ldr	r0, [pc, #32]	@ (90001758 <_ZN11TouchGFXHAL10initializeEv+0x84>)
90001738:	f021 fa6c 	bl	90022c14 <__assert_func>
9000173c:	90001609 	.word	0x90001609
90001740:	9000148d 	.word	0x9000148d
90001744:	2402630a 	.word	0x2402630a
90001748:	d0000000 	.word	0xd0000000
9000174c:	2402630b 	.word	0x2402630b
90001750:	90023e8c 	.word	0x90023e8c
90001754:	90023ec4 	.word	0x90023ec4
90001758:	90023e44 	.word	0x90023e44

9000175c <IdleTaskHook>:

extern "C"
{
    portBASE_TYPE IdleTaskHook(void* p)
    {
        if ((int)p) //idle task sched out
9000175c:	4601      	mov	r1, r0
    {
9000175e:	b508      	push	{r3, lr}
        return instance;
90001760:	4b05      	ldr	r3, [pc, #20]	@ (90001778 <IdleTaskHook+0x1c>)
90001762:	6818      	ldr	r0, [r3, #0]
        if ((int)p) //idle task sched out
90001764:	b121      	cbz	r1, 90001770 <IdleTaskHook+0x14>
        {
            touchgfx::HAL::getInstance()->setMCUActive(true);
90001766:	2101      	movs	r1, #1
90001768:	f00f fd3c 	bl	900111e4 <_ZN8touchgfx3HAL12setMCUActiveEb>
        else //idle task sched in
        {
            touchgfx::HAL::getInstance()->setMCUActive(false);
        }
        return pdTRUE;
    }
9000176c:	2001      	movs	r0, #1
9000176e:	bd08      	pop	{r3, pc}
            touchgfx::HAL::getInstance()->setMCUActive(false);
90001770:	f00f fd38 	bl	900111e4 <_ZN8touchgfx3HAL12setMCUActiveEb>
    }
90001774:	2001      	movs	r0, #1
90001776:	bd08      	pop	{r3, pc}
90001778:	2402630c 	.word	0x2402630c

9000177c <_ZNK20HardwareMJPEGDecoder21getCurrentFrameNumberEv>:
    virtual bool decodeThumbnail(uint32_t frameno, uint8_t* buffer, uint16_t width, uint16_t height);
    virtual void gotoFrame(uint32_t frameno);
    virtual uint32_t getCurrentFrameNumber() const
    {
        return frameNumber;
    }
9000177c:	6940      	ldr	r0, [r0, #20]
9000177e:	4770      	bx	lr

90001780 <_ZN20HardwareMJPEGDecoder12getLastErrorEv>:
    }

    virtual AVIErrors getLastError()
    {
        return lastError;
    }
90001780:	f890 0040 	ldrb.w	r0, [r0, #64]	@ 0x40
90001784:	4770      	bx	lr
90001786:	bf00      	nop

90001788 <_ZN20HardwareMJPEGDecoder8hasVideoEv>:
    readVideoHeader();
}

bool HardwareMJPEGDecoder::hasVideo()
{
    return (reader != 0) || (movieData != 0);
90001788:	6b03      	ldr	r3, [r0, #48]	@ 0x30
9000178a:	b10b      	cbz	r3, 90001790 <_ZN20HardwareMJPEGDecoder8hasVideoEv+0x8>
9000178c:	2001      	movs	r0, #1
}
9000178e:	4770      	bx	lr
    return (reader != 0) || (movieData != 0);
90001790:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
90001792:	3800      	subs	r0, #0
90001794:	bf18      	it	ne
90001796:	2001      	movne	r0, #1
90001798:	4770      	bx	lr
9000179a:	bf00      	nop

9000179c <_ZN20HardwareMJPEGDecoder17getNumberOfFramesEv>:
}

uint32_t HardwareMJPEGDecoder::getNumberOfFrames()
{
    return videoInfo.number_of_frames;
}
9000179c:	6880      	ldr	r0, [r0, #8]
9000179e:	4770      	bx	lr

900017a0 <_ZN20HardwareMJPEGDecoder14setRepeatVideoEb>:

void HardwareMJPEGDecoder::setRepeatVideo(bool repeat)
{

}
900017a0:	4770      	bx	lr
900017a2:	bf00      	nop

900017a4 <_ZN20HardwareMJPEGDecoder12getVideoInfoEPN8touchgfx16VideoInformationE>:

void HardwareMJPEGDecoder::getVideoInfo(touchgfx::VideoInformation* data)
{
    *data = videoInfo;
900017a4:	3004      	adds	r0, #4
{
900017a6:	468c      	mov	ip, r1
    *data = videoInfo;
900017a8:	c80f      	ldmia	r0, {r0, r1, r2, r3}
900017aa:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
}
900017ae:	4770      	bx	lr

900017b0 <_ZN20HardwareMJPEGDecoderD1Ev>:
class HardwareMJPEGDecoder : public MJPEGDecoder
900017b0:	4770      	bx	lr
900017b2:	bf00      	nop

900017b4 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt>:
{
900017b4:	b508      	push	{r3, lr}
    assert(0);
900017b6:	4a03      	ldr	r2, [pc, #12]	@ (900017c4 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x10>)
900017b8:	f44f 71e7 	mov.w	r1, #462	@ 0x1ce
900017bc:	4b02      	ldr	r3, [pc, #8]	@ (900017c8 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x14>)
900017be:	4803      	ldr	r0, [pc, #12]	@ (900017cc <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x18>)
900017c0:	f021 fa28 	bl	90022c14 <__assert_func>
900017c4:	90023ff0 	.word	0x90023ff0
900017c8:	90023fec 	.word	0x90023fec
900017cc:	9002404c 	.word	0x9002404c

900017d0 <_ZN20HardwareMJPEGDecoderD0Ev>:
900017d0:	b510      	push	{r4, lr}
900017d2:	4604      	mov	r4, r0
900017d4:	2148      	movs	r1, #72	@ 0x48
900017d6:	f021 f9ee 	bl	90022bb6 <_ZdlPvj>
900017da:	4620      	mov	r0, r4
900017dc:	bd10      	pop	{r4, pc}
900017de:	bf00      	nop

900017e0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0>:
void HardwareMJPEGDecoder::decodeMJPEGFrame(const uint8_t* const mjpgdata, const uint32_t length, uint8_t* outputBuffer, uint16_t bufferWidth, uint16_t bufferHeight, uint32_t bufferStride)
900017e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900017e4:	b085      	sub	sp, #20
900017e6:	4604      	mov	r4, r0
        JPEG_ConvertorParams.bytes_pr_pixel = 2;
900017e8:	f8df b1c8 	ldr.w	fp, [pc, #456]	@ 900019b4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1d4>
void HardwareMJPEGDecoder::decodeMJPEGFrame(const uint8_t* const mjpgdata, const uint32_t length, uint8_t* outputBuffer, uint16_t bufferWidth, uint16_t bufferHeight, uint32_t bufferStride)
900017ec:	9003      	str	r0, [sp, #12]
        JPEG_ConvertorParams.bytes_pr_pixel = 2;
900017ee:	2002      	movs	r0, #2
900017f0:	f8cb 0010 	str.w	r0, [fp, #16]
        JPEG_ConvertorParams.WidthExtend = videoInfo.frame_width;
900017f4:	68e0      	ldr	r0, [r4, #12]
        if ((JPEG_ConvertorParams.WidthExtend % 16) != 0)
900017f6:	0704      	lsls	r4, r0, #28
900017f8:	d002      	beq.n	90001800 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x20>
            JPEG_ConvertorParams.WidthExtend += 16 - (JPEG_ConvertorParams.WidthExtend % 16);
900017fa:	f020 000f 	bic.w	r0, r0, #15
900017fe:	3010      	adds	r0, #16
        JPEG_ConvertorParams.WidthExtend = videoInfo.frame_width;
90001800:	f8cb 0000 	str.w	r0, [fp]
        JPEG_ConvertorParams.MCU_pr_line = JPEG_ConvertorParams.WidthExtend / MCU_WIDTH_PIXELS;
90001804:	0900      	lsrs	r0, r0, #4
        JPEG_ConvertorParams.ScaledWidth = 480 * JPEG_ConvertorParams.bytes_pr_pixel;
90001806:	f44f 7470 	mov.w	r4, #960	@ 0x3c0
      * @retval None
      */
    uint32_t JPEG_Decode_DMA(JPEG_HandleTypeDef* hjpeg, uint8_t* input, uint32_t chunkSizeIn /* length */, uint8_t* output)
    {
        FrameBufferAddress = output;
        Output_Is_Paused = 0;
9000180a:	4e5d      	ldr	r6, [pc, #372]	@ (90001980 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1a0>)
        JPEG_ConvertorParams.MCU_pr_line = JPEG_ConvertorParams.WidthExtend / MCU_WIDTH_PIXELS;
9000180c:	f8cb 000c 	str.w	r0, [fp, #12]
            Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
            Jpeg_OUT_BufferTab[i].DataBufferSize = 0;
        }

        //Do not return from this function until done with decoding all chunks.
        HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90001810:	eb00 0040 	add.w	r0, r0, r0, lsl #1
            Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
90001814:	4d5b      	ldr	r5, [pc, #364]	@ (90001984 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1a4>)
        HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90001816:	01c0      	lsls	r0, r0, #7
        JPEG_OUT_Read_BufferIndex = 0;
90001818:	4f5b      	ldr	r7, [pc, #364]	@ (90001988 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1a8>)
        DMA2D_output_Is_Paused = 1;
9000181a:	f8df a19c 	ldr.w	sl, [pc, #412]	@ 900019b8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1d8>
        HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
9000181e:	9000      	str	r0, [sp, #0]
        JPEG_ConvertorParams.LastLineHeight = 16 - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
90001820:	9803      	ldr	r0, [sp, #12]
        JPEG_ConvertorParams.ScaledWidth = 480 * JPEG_ConvertorParams.bytes_pr_pixel;
90001822:	f8cb 4004 	str.w	r4, [fp, #4]
        JPEG_ConvertorParams.LastLineHeight = 16 - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
90001826:	6900      	ldr	r0, [r0, #16]
        FrameBufferAddress = output;
90001828:	4c58      	ldr	r4, [pc, #352]	@ (9000198c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1ac>)
        JPEG_ConvertorParams.LastLineHeight = 16 - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
9000182a:	f000 000f 	and.w	r0, r0, #15
9000182e:	f8df 818c 	ldr.w	r8, [pc, #396]	@ 900019bc <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1dc>
        FrameBufferAddress = output;
90001832:	6023      	str	r3, [r4, #0]
        JPEG_ConvertorParams.LastLineHeight = 16 - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
90001834:	f1c0 0010 	rsb	r0, r0, #16
        JPEG_OUT_Write_BufferIndex = 0;
90001838:	4b55      	ldr	r3, [pc, #340]	@ (90001990 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1b0>)
9000183a:	f8df 9184 	ldr.w	r9, [pc, #388]	@ 900019c0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1e0>
        JPEG_ConvertorParams.LastLineHeight = 16 - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
9000183e:	f8cb 0008 	str.w	r0, [fp, #8]
        Output_Is_Paused = 0;
90001842:	2000      	movs	r0, #0
90001844:	4c53      	ldr	r4, [pc, #332]	@ (90001994 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1b4>)
        JPEG_OUT_Write_BufferIndex = 0;
90001846:	6018      	str	r0, [r3, #0]
        JPEG_InputImageIndex = 0;
90001848:	4b53      	ldr	r3, [pc, #332]	@ (90001998 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1b8>)
        Output_Is_Paused = 0;
9000184a:	6030      	str	r0, [r6, #0]
        JPEG_InputImageIndex = 0;
9000184c:	6018      	str	r0, [r3, #0]
        JPEG_InputImageAddress = (uint32_t)input;
9000184e:	4b53      	ldr	r3, [pc, #332]	@ (9000199c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1bc>)
            Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
90001850:	7028      	strb	r0, [r5, #0]
        JPEG_InputImageAddress = (uint32_t)input;
90001852:	6019      	str	r1, [r3, #0]
        JPEG_InputImageSize_Bytes = chunkSizeIn;
90001854:	4b52      	ldr	r3, [pc, #328]	@ (900019a0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1c0>)
            Jpeg_OUT_BufferTab[i].DataBufferSize = 0;
90001856:	60a8      	str	r0, [r5, #8]
        JPEG_InputImageSize_Bytes = chunkSizeIn;
90001858:	601a      	str	r2, [r3, #0]
        HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
9000185a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
        MCU_BlockIndex = 0;
9000185e:	4b51      	ldr	r3, [pc, #324]	@ (900019a4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1c4>)
            Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
90001860:	7328      	strb	r0, [r5, #12]
        MCU_BlockIndex = 0;
90001862:	6018      	str	r0, [r3, #0]
        DMA2D_output_Is_Paused = 1;
90001864:	2301      	movs	r3, #1
            Jpeg_OUT_BufferTab[i].DataBufferSize = 0;
90001866:	6168      	str	r0, [r5, #20]
        JPEG_OUT_Read_BufferIndex = 0;
90001868:	6038      	str	r0, [r7, #0]
        DMA2D_output_Is_Paused = 1;
9000186a:	f8ca 3000 	str.w	r3, [sl]
        HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
9000186e:	484e      	ldr	r0, [pc, #312]	@ (900019a8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1c8>)
90001870:	686b      	ldr	r3, [r5, #4]
90001872:	f007 f9fd 	bl	90008c70 <HAL_JPEG_Decode_DMA>
  * @param dma: DMA2D reference
  * @retval 1 : if JPEG processing has finished, 0 : if JPEG processing still ongoing
  */
uint32_t JPEG_OutputHandler(JPEG_HandleTypeDef* hjpeg, touchgfx::DMA_Interface& dma)
{
    if (Jpeg_HWDecodingEnd && DMA2D_CopyBufferEnd) // decode completed
90001876:	f8d8 3000 	ldr.w	r3, [r8]
9000187a:	b11b      	cbz	r3, 90001884 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xa4>
9000187c:	4b4b      	ldr	r3, [pc, #300]	@ (900019ac <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1cc>)
9000187e:	681b      	ldr	r3, [r3, #0]
90001880:	2b00      	cmp	r3, #0
90001882:	d17b      	bne.n	9000197c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x19c>
    {
        return 1;
    }

    // Add job to DMA2D if ready and JPEG buffer is full
    if ((Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && (DMA2D_output_Is_Paused == 1))
90001884:	683b      	ldr	r3, [r7, #0]
90001886:	eb03 0243 	add.w	r2, r3, r3, lsl #1
9000188a:	f815 1022 	ldrb.w	r1, [r5, r2, lsl #2]
9000188e:	eb05 0282 	add.w	r2, r5, r2, lsl #2
90001892:	2901      	cmp	r1, #1
90001894:	d041      	beq.n	9000191a <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x13a>
        // Try to start DMA2D
        dma.start();
    }

    // Start JPEG IP if paused and next buffer is empty
    if ((Output_Is_Paused == 1) && \
90001896:	6833      	ldr	r3, [r6, #0]
            (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) && \
90001898:	2b01      	cmp	r3, #1
9000189a:	d029      	beq.n	900018f0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x110>
    {
        Output_Is_Paused = 0;
        HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
    }

    if ((Output_Is_Paused == 0) && (DMA2D_output_Is_Paused == 0))
9000189c:	6833      	ldr	r3, [r6, #0]
9000189e:	b9c3      	cbnz	r3, 900018d2 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xf2>
900018a0:	f8da 3000 	ldr.w	r3, [sl]
900018a4:	fab3 f383 	clz	r3, r3
900018a8:	095b      	lsrs	r3, r3, #5
900018aa:	005b      	lsls	r3, r3, #1
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg, *pDma);
900018ac:	6023      	str	r3, [r4, #0]
            if (JpegProcessing_End == 2)
900018ae:	6823      	ldr	r3, [r4, #0]
900018b0:	2b02      	cmp	r3, #2
900018b2:	d013      	beq.n	900018dc <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xfc>
        } while (JpegProcessing_End != 1);
900018b4:	6823      	ldr	r3, [r4, #0]
900018b6:	2b01      	cmp	r3, #1
900018b8:	d1dd      	bne.n	90001876 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x96>
    {
        return count_ == max_size_;
    }
    void reset()
    {
        head_ = tail_ = count_ = 0;
900018ba:	2300      	movs	r3, #0
        DMA2D_CopyBufferEnd = 0;
900018bc:	4a3b      	ldr	r2, [pc, #236]	@ (900019ac <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1cc>)
900018be:	f8c9 300c 	str.w	r3, [r9, #12]
        Jpeg_HWDecodingEnd = 0;
900018c2:	f8c8 3000 	str.w	r3, [r8]
        DMA2D_CopyBufferEnd = 0;
900018c6:	6013      	str	r3, [r2, #0]
900018c8:	e9c9 3301 	strd	r3, r3, [r9, #4]
}
900018cc:	b005      	add	sp, #20
900018ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    {
        return 2;
    }

    return 0;
900018d2:	2300      	movs	r3, #0
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg, *pDma);
900018d4:	6023      	str	r3, [r4, #0]
            if (JpegProcessing_End == 2)
900018d6:	6823      	ldr	r3, [r4, #0]
900018d8:	2b02      	cmp	r3, #2
900018da:	d1eb      	bne.n	900018b4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xd4>
                SEM_WAIT(semDecodingDone);
900018dc:	4b34      	ldr	r3, [pc, #208]	@ (900019b0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1d0>)
900018de:	f04f 31ff 	mov.w	r1, #4294967295
900018e2:	6818      	ldr	r0, [r3, #0]
900018e4:	f00a ff42 	bl	9000c76c <osSemaphoreAcquire>
        } while (JpegProcessing_End != 1);
900018e8:	6823      	ldr	r3, [r4, #0]
900018ea:	2b01      	cmp	r3, #1
900018ec:	d1c3      	bne.n	90001876 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x96>
900018ee:	e7e4      	b.n	900018ba <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xda>
            (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) && \
900018f0:	4b27      	ldr	r3, [pc, #156]	@ (90001990 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1b0>)
900018f2:	681b      	ldr	r3, [r3, #0]
900018f4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    if ((Output_Is_Paused == 1) && \
900018f8:	f815 3023 	ldrb.w	r3, [r5, r3, lsl #2]
900018fc:	2b00      	cmp	r3, #0
900018fe:	d1cd      	bne.n	9000189c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xbc>
            (Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_EMPTY))
90001900:	683b      	ldr	r3, [r7, #0]
90001902:	eb03 0343 	add.w	r3, r3, r3, lsl #1
            (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) && \
90001906:	f815 3023 	ldrb.w	r3, [r5, r3, lsl #2]
9000190a:	2b00      	cmp	r3, #0
9000190c:	d1c6      	bne.n	9000189c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xbc>
        HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
9000190e:	2102      	movs	r1, #2
90001910:	4825      	ldr	r0, [pc, #148]	@ (900019a8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1c8>)
        Output_Is_Paused = 0;
90001912:	6033      	str	r3, [r6, #0]
        HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
90001914:	f007 faf0 	bl	90008ef8 <HAL_JPEG_Resume>
90001918:	e7c0      	b.n	9000189c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xbc>
    if ((Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && (DMA2D_output_Is_Paused == 1))
9000191a:	f8da 1000 	ldr.w	r1, [sl]
9000191e:	2901      	cmp	r1, #1
90001920:	d1b9      	bne.n	90001896 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xb6>
        JPEG_OUT_Read_BufferIndex++;
90001922:	3301      	adds	r3, #1
        };
90001924:	491f      	ldr	r1, [pc, #124]	@ (900019a4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1c4>)
        tail_ = (tail_ + 1) % max_size_;
90001926:	f8d9 0000 	ldr.w	r0, [r9]
9000192a:	2b02      	cmp	r3, #2
9000192c:	f8d1 c000 	ldr.w	ip, [r1]
90001930:	bf28      	it	cs
90001932:	2300      	movcs	r3, #0
        JPEG_OUT_Read_BufferIndex++;
90001934:	603b      	str	r3, [r7, #0]
        buffer_[tail_] = job;
90001936:	f8d9 3008 	ldr.w	r3, [r9, #8]
        tail_ = (tail_ + 1) % max_size_;
9000193a:	1c59      	adds	r1, r3, #1
        buffer_[tail_] = job;
9000193c:	3302      	adds	r3, #2
9000193e:	f849 c033 	str.w	ip, [r9, r3, lsl #3]
90001942:	eb09 03c3 	add.w	r3, r9, r3, lsl #3
90001946:	605a      	str	r2, [r3, #4]
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg, *pDma);
90001948:	9a03      	ldr	r2, [sp, #12]
        tail_ = (tail_ + 1) % max_size_;
9000194a:	fbb1 f3f0 	udiv	r3, r1, r0
9000194e:	fb00 1113 	mls	r1, r0, r3, r1
90001952:	6c50      	ldr	r0, [r2, #68]	@ 0x44
        count_++;
90001954:	f8d9 200c 	ldr.w	r2, [r9, #12]
        tail_ = (tail_ + 1) % max_size_;
90001958:	f8c9 1008 	str.w	r1, [r9, #8]
        count_++;
9000195c:	3201      	adds	r2, #1
        MCU_BlockIndex += JPEG_ConvertorParams.MCU_pr_line;
9000195e:	4911      	ldr	r1, [pc, #68]	@ (900019a4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1c4>)
90001960:	f8c9 200c 	str.w	r2, [r9, #12]
90001964:	680b      	ldr	r3, [r1, #0]
90001966:	f8db 200c 	ldr.w	r2, [fp, #12]
9000196a:	4413      	add	r3, r2
9000196c:	600b      	str	r3, [r1, #0]
        DMA2D_output_Is_Paused = 0;
9000196e:	2300      	movs	r3, #0
90001970:	f8ca 3000 	str.w	r3, [sl]
        dma.start();
90001974:	6803      	ldr	r3, [r0, #0]
90001976:	691b      	ldr	r3, [r3, #16]
90001978:	4798      	blx	r3
9000197a:	e78c      	b.n	90001896 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xb6>
        return 1;
9000197c:	2301      	movs	r3, #1
9000197e:	e795      	b.n	900018ac <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xcc>
90001980:	24005ec4 	.word	0x24005ec4
90001984:	24000004 	.word	0x24000004
90001988:	24005ecc 	.word	0x24005ecc
9000198c:	24005ee0 	.word	0x24005ee0
90001990:	24005ec8 	.word	0x24005ec8
90001994:	24005eb8 	.word	0x24005eb8
90001998:	24005edc 	.word	0x24005edc
9000199c:	24005ed4 	.word	0x24005ed4
900019a0:	24005ed8 	.word	0x24005ed8
900019a4:	24005eac 	.word	0x24005eac
900019a8:	24005d24 	.word	0x24005d24
900019ac:	24005ec0 	.word	0x24005ec0
900019b0:	24005ea8 	.word	0x24005ea8
900019b4:	24005e70 	.word	0x24005e70
900019b8:	24005ebc 	.word	0x24005ebc
900019bc:	24005ed0 	.word	0x24005ed0
900019c0:	24005e88 	.word	0x24005e88

900019c4 <_ZN20HardwareMJPEGDecoder9gotoFrameEm>:
{
900019c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (frameNumber > getNumberOfFrames())
900019c6:	6803      	ldr	r3, [r0, #0]
900019c8:	2901      	cmp	r1, #1
900019ca:	4e2b      	ldr	r6, [pc, #172]	@ (90001a78 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0xb4>)
{
900019cc:	4604      	mov	r4, r0
    if (frameNumber > getNumberOfFrames())
900019ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900019d0:	bf38      	it	cc
900019d2:	2101      	movcc	r1, #1
900019d4:	42b3      	cmp	r3, r6
900019d6:	460d      	mov	r5, r1
900019d8:	d135      	bne.n	90001a46 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x82>
    return videoInfo.number_of_frames;
900019da:	6886      	ldr	r6, [r0, #8]
    if (frameNumber > getNumberOfFrames())
900019dc:	42b1      	cmp	r1, r6
900019de:	d93d      	bls.n	90001a5c <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x98>
    uint32_t offset = indexOffset + 8 + (frameNumber - 1) * 16;
900019e0:	1e73      	subs	r3, r6, #1
900019e2:	69e2      	ldr	r2, [r4, #28]
    if (reader != 0)
900019e4:	6b20      	ldr	r0, [r4, #48]	@ 0x30
    uint32_t offset = indexOffset + 8 + (frameNumber - 1) * 16;
900019e6:	eb02 1703 	add.w	r7, r2, r3, lsl #4
    if (reader != 0)
900019ea:	b338      	cbz	r0, 90001a3c <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x78>
        if (length > aviBufferLength)
900019ec:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
900019ee:	2b0f      	cmp	r3, #15
900019f0:	d936      	bls.n	90001a60 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x9c>
        reader->seek(offset);
900019f2:	6803      	ldr	r3, [r0, #0]
    uint32_t offset = indexOffset + 8 + (frameNumber - 1) * 16;
900019f4:	f107 0508 	add.w	r5, r7, #8
        reader->seek(offset);
900019f8:	68db      	ldr	r3, [r3, #12]
900019fa:	4629      	mov	r1, r5
900019fc:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
900019fe:	6b20      	ldr	r0, [r4, #48]	@ 0x30
90001a00:	2210      	movs	r2, #16
90001a02:	6b61      	ldr	r1, [r4, #52]	@ 0x34
90001a04:	6803      	ldr	r3, [r0, #0]
90001a06:	691b      	ldr	r3, [r3, #16]
90001a08:	4798      	blx	r3
90001a0a:	b198      	cbz	r0, 90001a34 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x70>
    if (reader != 0)
90001a0c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
        aviBufferStartOffset = offset;
90001a0e:	63e5      	str	r5, [r4, #60]	@ 0x3c
    if (reader != 0)
90001a10:	b1a3      	cbz	r3, 90001a3c <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x78>
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
90001a12:	6b62      	ldr	r2, [r4, #52]	@ 0x34
90001a14:	7a93      	ldrb	r3, [r2, #10]
90001a16:	7a51      	ldrb	r1, [r2, #9]
90001a18:	041b      	lsls	r3, r3, #16
90001a1a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
90001a1e:	7a11      	ldrb	r1, [r2, #8]
90001a20:	7ad2      	ldrb	r2, [r2, #11]
90001a22:	430b      	orrs	r3, r1
90001a24:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    currentMovieOffset = getU32(offset + 8) + firstFrameOffset - 4;
90001a28:	6a22      	ldr	r2, [r4, #32]
    this->frameNumber = frameNumber;
90001a2a:	6166      	str	r6, [r4, #20]
    currentMovieOffset = getU32(offset + 8) + firstFrameOffset - 4;
90001a2c:	3a04      	subs	r2, #4
90001a2e:	441a      	add	r2, r3
90001a30:	61a2      	str	r2, [r4, #24]
}
90001a32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            lastError = AVI_ERROR_EOF_REACHED;
90001a34:	230d      	movs	r3, #13
90001a36:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
90001a3a:	e7e7      	b.n	90001a0c <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x48>
    currentMovieOffset = getU32(offset + 8) + firstFrameOffset - 4;
90001a3c:	f107 0310 	add.w	r3, r7, #16
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
90001a40:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
90001a42:	58d3      	ldr	r3, [r2, r3]
90001a44:	e7f0      	b.n	90001a28 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x64>
    if (frameNumber > getNumberOfFrames())
90001a46:	4798      	blx	r3
90001a48:	4285      	cmp	r5, r0
90001a4a:	d907      	bls.n	90001a5c <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x98>
        frameNumber = getNumberOfFrames();
90001a4c:	6823      	ldr	r3, [r4, #0]
90001a4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90001a50:	42b3      	cmp	r3, r6
90001a52:	d00e      	beq.n	90001a72 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0xae>
90001a54:	4620      	mov	r0, r4
90001a56:	4798      	blx	r3
90001a58:	4606      	mov	r6, r0
90001a5a:	e7c1      	b.n	900019e0 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x1c>
{
90001a5c:	462e      	mov	r6, r5
90001a5e:	e7bf      	b.n	900019e0 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x1c>
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
90001a60:	2009      	movs	r0, #9
            assert(!"Buffer to small");
90001a62:	4b06      	ldr	r3, [pc, #24]	@ (90001a7c <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0xb8>)
90001a64:	4a06      	ldr	r2, [pc, #24]	@ (90001a80 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0xbc>)
90001a66:	21a7      	movs	r1, #167	@ 0xa7
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
90001a68:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
            assert(!"Buffer to small");
90001a6c:	4805      	ldr	r0, [pc, #20]	@ (90001a84 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0xc0>)
90001a6e:	f021 f8d1 	bl	90022c14 <__assert_func>
    return videoInfo.number_of_frames;
90001a72:	68a6      	ldr	r6, [r4, #8]
90001a74:	e7b4      	b.n	900019e0 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x1c>
90001a76:	bf00      	nop
90001a78:	9000179d 	.word	0x9000179d
90001a7c:	900240a0 	.word	0x900240a0
90001a80:	900240b4 	.word	0x900240b4
90001a84:	9002404c 	.word	0x9002404c

90001a88 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm>:
{
90001a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90001a8c:	4604      	mov	r4, r0
    if (reader != 0)
90001a8e:	6b00      	ldr	r0, [r0, #48]	@ 0x30
{
90001a90:	b083      	sub	sp, #12
90001a92:	4615      	mov	r5, r2
    readData(currentMovieOffset, 8);
90001a94:	69a6      	ldr	r6, [r4, #24]
    if (reader != 0)
90001a96:	2800      	cmp	r0, #0
90001a98:	f000 80e2 	beq.w	90001c60 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x1d8>
        if (length > aviBufferLength)
90001a9c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
90001a9e:	2b07      	cmp	r3, #7
90001aa0:	f240 80e5 	bls.w	90001c6e <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x1e6>
        reader->seek(offset);
90001aa4:	6803      	ldr	r3, [r0, #0]
90001aa6:	4631      	mov	r1, r6
90001aa8:	68db      	ldr	r3, [r3, #12]
90001aaa:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
90001aac:	6b20      	ldr	r0, [r4, #48]	@ 0x30
90001aae:	2208      	movs	r2, #8
90001ab0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
90001ab2:	6803      	ldr	r3, [r0, #0]
90001ab4:	691b      	ldr	r3, [r3, #16]
90001ab6:	4798      	blx	r3
90001ab8:	2800      	cmp	r0, #0
90001aba:	f000 80cd 	beq.w	90001c58 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x1d0>
    const uint32_t length = getU32(currentMovieOffset + 4);
90001abe:	69a3      	ldr	r3, [r4, #24]
    if (reader != 0)
90001ac0:	6b20      	ldr	r0, [r4, #48]	@ 0x30
    const uint32_t length = getU32(currentMovieOffset + 4);
90001ac2:	1d1a      	adds	r2, r3, #4
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
90001ac4:	f103 0708 	add.w	r7, r3, #8
        aviBufferStartOffset = offset;
90001ac8:	63e6      	str	r6, [r4, #60]	@ 0x3c
    if (reader != 0)
90001aca:	2800      	cmp	r0, #0
90001acc:	f000 80d8 	beq.w	90001c80 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x1f8>
        const uint32_t index = offset - aviBufferStartOffset;
90001ad0:	1b92      	subs	r2, r2, r6
        if (length > aviBufferLength)
90001ad2:	e9d4 630d 	ldrd	r6, r3, [r4, #52]	@ 0x34
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
90001ad6:	18b1      	adds	r1, r6, r2
90001ad8:	5cb2      	ldrb	r2, [r6, r2]
90001ada:	788e      	ldrb	r6, [r1, #2]
90001adc:	f891 c001 	ldrb.w	ip, [r1, #1]
90001ae0:	0436      	lsls	r6, r6, #16
90001ae2:	ea46 260c 	orr.w	r6, r6, ip, lsl #8
90001ae6:	4316      	orrs	r6, r2
90001ae8:	78ca      	ldrb	r2, [r1, #3]
90001aea:	ea46 6602 	orr.w	r6, r6, r2, lsl #24
        if (length > aviBufferLength)
90001aee:	42b3      	cmp	r3, r6
90001af0:	f0c0 80bd 	bcc.w	90001c6e <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x1e6>
        reader->seek(offset);
90001af4:	6803      	ldr	r3, [r0, #0]
90001af6:	4639      	mov	r1, r7
90001af8:	68db      	ldr	r3, [r3, #12]
90001afa:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
90001afc:	6b20      	ldr	r0, [r4, #48]	@ 0x30
90001afe:	4632      	mov	r2, r6
90001b00:	6b61      	ldr	r1, [r4, #52]	@ 0x34
90001b02:	6803      	ldr	r3, [r0, #0]
90001b04:	691b      	ldr	r3, [r3, #16]
90001b06:	4798      	blx	r3
90001b08:	b910      	cbnz	r0, 90001b10 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x88>
            lastError = AVI_ERROR_EOF_REACHED;
90001b0a:	230d      	movs	r3, #13
90001b0c:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        return aviBuffer;
90001b10:	6b61      	ldr	r1, [r4, #52]	@ 0x34
        aviBufferStartOffset = offset;
90001b12:	63e7      	str	r7, [r4, #60]	@ 0x3c
    if (frameBuffer) //only decode if buffers are assigned.
90001b14:	2d00      	cmp	r5, #0
90001b16:	d053      	beq.n	90001bc0 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x138>
        HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90001b18:	4a5a      	ldr	r2, [pc, #360]	@ (90001c84 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x1fc>)
        FrameBufferAddress = output;
90001b1a:	4b5b      	ldr	r3, [pc, #364]	@ (90001c88 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x200>)
        HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90001b1c:	68d2      	ldr	r2, [r2, #12]
        FrameBufferAddress = output;
90001b1e:	601d      	str	r5, [r3, #0]
        Output_Is_Paused = 0;
90001b20:	2300      	movs	r3, #0
        HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90001b22:	eb02 0242 	add.w	r2, r2, r2, lsl #1
            Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
90001b26:	4d59      	ldr	r5, [pc, #356]	@ (90001c8c <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x204>)
        Output_Is_Paused = 0;
90001b28:	4f59      	ldr	r7, [pc, #356]	@ (90001c90 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x208>)
        HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90001b2a:	01d2      	lsls	r2, r2, #7
            Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
90001b2c:	702b      	strb	r3, [r5, #0]
        Output_Is_Paused = 0;
90001b2e:	603b      	str	r3, [r7, #0]
            Jpeg_OUT_BufferTab[i].DataBufferSize = 0;
90001b30:	60ab      	str	r3, [r5, #8]
            Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
90001b32:	732b      	strb	r3, [r5, #12]
            Jpeg_OUT_BufferTab[i].DataBufferSize = 0;
90001b34:	616b      	str	r3, [r5, #20]
        HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90001b36:	9200      	str	r2, [sp, #0]
        JPEG_InputImageIndex = 0;
90001b38:	4a56      	ldr	r2, [pc, #344]	@ (90001c94 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x20c>)
        JPEG_OUT_Read_BufferIndex = 0;
90001b3a:	f8df 8184 	ldr.w	r8, [pc, #388]	@ 90001cc0 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x238>
        JPEG_InputImageIndex = 0;
90001b3e:	6013      	str	r3, [r2, #0]
        JPEG_InputImageAddress = (uint32_t)input;
90001b40:	4a55      	ldr	r2, [pc, #340]	@ (90001c98 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x210>)
        JPEG_OUT_Write_BufferIndex = 0;
90001b42:	f8df a180 	ldr.w	sl, [pc, #384]	@ 90001cc4 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x23c>
        JPEG_InputImageAddress = (uint32_t)input;
90001b46:	6011      	str	r1, [r2, #0]
        JPEG_InputImageSize_Bytes = chunkSizeIn;
90001b48:	4a54      	ldr	r2, [pc, #336]	@ (90001c9c <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x214>)
        DMA2D_output_Is_Paused = 1;
90001b4a:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 90001cc8 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x240>
        JPEG_InputImageSize_Bytes = chunkSizeIn;
90001b4e:	6016      	str	r6, [r2, #0]
        MCU_BlockIndex = 0;
90001b50:	4a53      	ldr	r2, [pc, #332]	@ (90001ca0 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x218>)
        JPEG_OUT_Read_BufferIndex = 0;
90001b52:	f8c8 3000 	str.w	r3, [r8]
        MCU_BlockIndex = 0;
90001b56:	6013      	str	r3, [r2, #0]
        HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90001b58:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
        JPEG_OUT_Write_BufferIndex = 0;
90001b5c:	f8ca 3000 	str.w	r3, [sl]
        DMA2D_output_Is_Paused = 1;
90001b60:	2301      	movs	r3, #1
        HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90001b62:	4850      	ldr	r0, [pc, #320]	@ (90001ca4 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x21c>)
        DMA2D_output_Is_Paused = 1;
90001b64:	f8cb 3000 	str.w	r3, [fp]
        HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90001b68:	686b      	ldr	r3, [r5, #4]
90001b6a:	f8df 9160 	ldr.w	r9, [pc, #352]	@ 90001ccc <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x244>
90001b6e:	4e4e      	ldr	r6, [pc, #312]	@ (90001ca8 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x220>)
90001b70:	f007 f87e 	bl	90008c70 <HAL_JPEG_Decode_DMA>
        return 0;
90001b74:	e008      	b.n	90001b88 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x100>
    if ((Output_Is_Paused == 0) && (DMA2D_output_Is_Paused == 0))
90001b76:	f8db 3000 	ldr.w	r3, [fp]
90001b7a:	fab3 f383 	clz	r3, r3
90001b7e:	095b      	lsrs	r3, r3, #5
90001b80:	005b      	lsls	r3, r3, #1
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg, *pDma);
90001b82:	6033      	str	r3, [r6, #0]
        } while (JpegProcessing_End == 0);
90001b84:	6833      	ldr	r3, [r6, #0]
90001b86:	b9db      	cbnz	r3, 90001bc0 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x138>
    if (Jpeg_HWDecodingEnd && DMA2D_CopyBufferEnd) // decode completed
90001b88:	f8d9 3000 	ldr.w	r3, [r9]
90001b8c:	b11b      	cbz	r3, 90001b96 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x10e>
90001b8e:	4b47      	ldr	r3, [pc, #284]	@ (90001cac <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x224>)
90001b90:	681b      	ldr	r3, [r3, #0]
90001b92:	2b00      	cmp	r3, #0
90001b94:	d15e      	bne.n	90001c54 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x1cc>
    if ((Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && (DMA2D_output_Is_Paused == 1))
90001b96:	f8d8 2000 	ldr.w	r2, [r8]
90001b9a:	eb02 0342 	add.w	r3, r2, r2, lsl #1
90001b9e:	f815 1023 	ldrb.w	r1, [r5, r3, lsl #2]
90001ba2:	eb05 0383 	add.w	r3, r5, r3, lsl #2
90001ba6:	2901      	cmp	r1, #1
90001ba8:	d024      	beq.n	90001bf4 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x16c>
    if ((Output_Is_Paused == 1) && \
90001baa:	683b      	ldr	r3, [r7, #0]
            (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) && \
90001bac:	2b01      	cmp	r3, #1
90001bae:	d00b      	beq.n	90001bc8 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x140>
    if ((Output_Is_Paused == 0) && (DMA2D_output_Is_Paused == 0))
90001bb0:	683b      	ldr	r3, [r7, #0]
90001bb2:	2b00      	cmp	r3, #0
90001bb4:	d0df      	beq.n	90001b76 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0xee>
    return 0;
90001bb6:	2300      	movs	r3, #0
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg, *pDma);
90001bb8:	6033      	str	r3, [r6, #0]
        } while (JpegProcessing_End == 0);
90001bba:	6833      	ldr	r3, [r6, #0]
90001bbc:	2b00      	cmp	r3, #0
90001bbe:	d0e3      	beq.n	90001b88 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x100>
}
90001bc0:	2001      	movs	r0, #1
90001bc2:	b003      	add	sp, #12
90001bc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) && \
90001bc8:	f8da 3000 	ldr.w	r3, [sl]
90001bcc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    if ((Output_Is_Paused == 1) && \
90001bd0:	f815 3023 	ldrb.w	r3, [r5, r3, lsl #2]
90001bd4:	2b00      	cmp	r3, #0
90001bd6:	d1eb      	bne.n	90001bb0 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x128>
            (Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_EMPTY))
90001bd8:	f8d8 3000 	ldr.w	r3, [r8]
90001bdc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
            (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) && \
90001be0:	f815 3023 	ldrb.w	r3, [r5, r3, lsl #2]
90001be4:	2b00      	cmp	r3, #0
90001be6:	d1e3      	bne.n	90001bb0 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x128>
        HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
90001be8:	2102      	movs	r1, #2
90001bea:	482e      	ldr	r0, [pc, #184]	@ (90001ca4 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x21c>)
        Output_Is_Paused = 0;
90001bec:	603b      	str	r3, [r7, #0]
        HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
90001bee:	f007 f983 	bl	90008ef8 <HAL_JPEG_Resume>
90001bf2:	e7dd      	b.n	90001bb0 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x128>
    if ((Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && (DMA2D_output_Is_Paused == 1))
90001bf4:	f8db 1000 	ldr.w	r1, [fp]
90001bf8:	2901      	cmp	r1, #1
90001bfa:	d1d6      	bne.n	90001baa <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x122>
        JPEG_OUT_Read_BufferIndex++;
90001bfc:	3201      	adds	r2, #1
        };
90001bfe:	4828      	ldr	r0, [pc, #160]	@ (90001ca0 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x218>)
90001c00:	2a02      	cmp	r2, #2
90001c02:	f8d0 e000 	ldr.w	lr, [r0]
        MCU_BlockIndex += JPEG_ConvertorParams.MCU_pr_line;
90001c06:	f8d0 c000 	ldr.w	ip, [r0]
90001c0a:	bf28      	it	cs
90001c0c:	2200      	movcs	r2, #0
        JPEG_OUT_Read_BufferIndex++;
90001c0e:	f8c8 2000 	str.w	r2, [r8]
        buffer_[tail_] = job;
90001c12:	4a27      	ldr	r2, [pc, #156]	@ (90001cb0 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x228>)
        count_++;
90001c14:	68d0      	ldr	r0, [r2, #12]
        buffer_[tail_] = job;
90001c16:	6891      	ldr	r1, [r2, #8]
        count_++;
90001c18:	3001      	adds	r0, #1
90001c1a:	60d0      	str	r0, [r2, #12]
        tail_ = (tail_ + 1) % max_size_;
90001c1c:	1c48      	adds	r0, r1, #1
        buffer_[tail_] = job;
90001c1e:	3102      	adds	r1, #2
90001c20:	f842 e031 	str.w	lr, [r2, r1, lsl #3]
90001c24:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
90001c28:	604b      	str	r3, [r1, #4]
        tail_ = (tail_ + 1) % max_size_;
90001c2a:	6813      	ldr	r3, [r2, #0]
90001c2c:	6811      	ldr	r1, [r2, #0]
90001c2e:	fbb0 f3f3 	udiv	r3, r0, r3
90001c32:	fb01 0013 	mls	r0, r1, r3, r0
        MCU_BlockIndex += JPEG_ConvertorParams.MCU_pr_line;
90001c36:	4b13      	ldr	r3, [pc, #76]	@ (90001c84 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x1fc>)
90001c38:	68db      	ldr	r3, [r3, #12]
90001c3a:	6090      	str	r0, [r2, #8]
90001c3c:	4463      	add	r3, ip
90001c3e:	4818      	ldr	r0, [pc, #96]	@ (90001ca0 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x218>)
90001c40:	6003      	str	r3, [r0, #0]
        DMA2D_output_Is_Paused = 0;
90001c42:	2300      	movs	r3, #0
        dma.start();
90001c44:	6c60      	ldr	r0, [r4, #68]	@ 0x44
        DMA2D_output_Is_Paused = 0;
90001c46:	f8cb 3000 	str.w	r3, [fp]
        dma.start();
90001c4a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
90001c4c:	681b      	ldr	r3, [r3, #0]
90001c4e:	691b      	ldr	r3, [r3, #16]
90001c50:	4798      	blx	r3
90001c52:	e7aa      	b.n	90001baa <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x122>
        return 1;
90001c54:	2301      	movs	r3, #1
90001c56:	e794      	b.n	90001b82 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0xfa>
            lastError = AVI_ERROR_EOF_REACHED;
90001c58:	230d      	movs	r3, #13
90001c5a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
90001c5e:	e72e      	b.n	90001abe <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x36>
    const uint32_t length = getU32(currentMovieOffset + 4);
90001c60:	1d32      	adds	r2, r6, #4
    if (reader != 0)
90001c62:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
90001c64:	f106 0308 	add.w	r3, r6, #8
90001c68:	588e      	ldr	r6, [r1, r2]
    return movieData + offset;
90001c6a:	4419      	add	r1, r3
90001c6c:	e752      	b.n	90001b14 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x8c>
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
90001c6e:	2009      	movs	r0, #9
            assert(!"Buffer to small");
90001c70:	4b10      	ldr	r3, [pc, #64]	@ (90001cb4 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x22c>)
90001c72:	4a11      	ldr	r2, [pc, #68]	@ (90001cb8 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x230>)
90001c74:	21a7      	movs	r1, #167	@ 0xa7
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
90001c76:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
            assert(!"Buffer to small");
90001c7a:	4810      	ldr	r0, [pc, #64]	@ (90001cbc <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x234>)
90001c7c:	f020 ffca 	bl	90022c14 <__assert_func>
    const uint32_t length = getU32(currentMovieOffset + 4);
90001c80:	461e      	mov	r6, r3
90001c82:	e7ee      	b.n	90001c62 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x1da>
90001c84:	24005e70 	.word	0x24005e70
90001c88:	24005ee0 	.word	0x24005ee0
90001c8c:	24000004 	.word	0x24000004
90001c90:	24005ec4 	.word	0x24005ec4
90001c94:	24005edc 	.word	0x24005edc
90001c98:	24005ed4 	.word	0x24005ed4
90001c9c:	24005ed8 	.word	0x24005ed8
90001ca0:	24005eac 	.word	0x24005eac
90001ca4:	24005d24 	.word	0x24005d24
90001ca8:	24005eb8 	.word	0x24005eb8
90001cac:	24005ec0 	.word	0x24005ec0
90001cb0:	24005e88 	.word	0x24005e88
90001cb4:	900240a0 	.word	0x900240a0
90001cb8:	900240b4 	.word	0x900240b4
90001cbc:	9002404c 	.word	0x9002404c
90001cc0:	24005ecc 	.word	0x24005ecc
90001cc4:	24005ec8 	.word	0x24005ec8
90001cc8:	24005ebc 	.word	0x24005ebc
90001ccc:	24005ed0 	.word	0x24005ed0

90001cd0 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv>:
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
90001cd0:	6943      	ldr	r3, [r0, #20]
{
90001cd2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
90001cd6:	2b00      	cmp	r3, #0
90001cd8:	f000 8098 	beq.w	90001e0c <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x13c>
    readData(currentMovieOffset, 8);
90001cdc:	4605      	mov	r5, r0
    if (reader != 0)
90001cde:	6b00      	ldr	r0, [r0, #48]	@ 0x30
    readData(currentMovieOffset, 8);
90001ce0:	69ac      	ldr	r4, [r5, #24]
    if (reader != 0)
90001ce2:	2800      	cmp	r0, #0
90001ce4:	f000 8082 	beq.w	90001dec <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x11c>
        if (length > aviBufferLength)
90001ce8:	6bab      	ldr	r3, [r5, #56]	@ 0x38
90001cea:	2b07      	cmp	r3, #7
90001cec:	f240 8083 	bls.w	90001df6 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x126>
        reader->seek(offset);
90001cf0:	6803      	ldr	r3, [r0, #0]
90001cf2:	4621      	mov	r1, r4
90001cf4:	68db      	ldr	r3, [r3, #12]
90001cf6:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
90001cf8:	6b28      	ldr	r0, [r5, #48]	@ 0x30
90001cfa:	2208      	movs	r2, #8
90001cfc:	6b69      	ldr	r1, [r5, #52]	@ 0x34
90001cfe:	6803      	ldr	r3, [r0, #0]
90001d00:	691b      	ldr	r3, [r3, #16]
90001d02:	4798      	blx	r3
90001d04:	2800      	cmp	r0, #0
90001d06:	d06d      	beq.n	90001de4 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x114>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
90001d08:	69ab      	ldr	r3, [r5, #24]
    if (reader != 0)
90001d0a:	6b28      	ldr	r0, [r5, #48]	@ 0x30
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
90001d0c:	1d1a      	adds	r2, r3, #4
        aviBufferStartOffset = offset;
90001d0e:	63ec      	str	r4, [r5, #60]	@ 0x3c
    if (reader != 0)
90001d10:	2800      	cmp	r0, #0
90001d12:	d06d      	beq.n	90001df0 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x120>
        const uint32_t index = offset - aviBufferStartOffset;
90001d14:	1b12      	subs	r2, r2, r4
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
90001d16:	6b6c      	ldr	r4, [r5, #52]	@ 0x34
90001d18:	18a1      	adds	r1, r4, r2
90001d1a:	5ca2      	ldrb	r2, [r4, r2]
90001d1c:	788c      	ldrb	r4, [r1, #2]
90001d1e:	784e      	ldrb	r6, [r1, #1]
90001d20:	0424      	lsls	r4, r4, #16
90001d22:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
90001d26:	4314      	orrs	r4, r2
90001d28:	78ca      	ldrb	r2, [r1, #3]
90001d2a:	ea44 6402 	orr.w	r4, r4, r2, lsl #24
            lastError = AVI_ERROR_EOF_REACHED;
90001d2e:	270d      	movs	r7, #13
        if (streamNo == STREAM0 && chunkType == TYPEDC)
90001d30:	f243 0630 	movw	r6, #12336	@ 0x3030
90001d34:	e039      	b.n	90001daa <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0xda>
        if (length > aviBufferLength)
90001d36:	6bab      	ldr	r3, [r5, #56]	@ 0x38
90001d38:	2b07      	cmp	r3, #7
90001d3a:	d95c      	bls.n	90001df6 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x126>
        reader->seek(offset);
90001d3c:	6803      	ldr	r3, [r0, #0]
90001d3e:	4621      	mov	r1, r4
90001d40:	68db      	ldr	r3, [r3, #12]
90001d42:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
90001d44:	6b28      	ldr	r0, [r5, #48]	@ 0x30
90001d46:	2208      	movs	r2, #8
90001d48:	6b69      	ldr	r1, [r5, #52]	@ 0x34
90001d4a:	6803      	ldr	r3, [r0, #0]
90001d4c:	691b      	ldr	r3, [r3, #16]
90001d4e:	4798      	blx	r3
90001d50:	b908      	cbnz	r0, 90001d56 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x86>
            lastError = AVI_ERROR_EOF_REACHED;
90001d52:	f885 7040 	strb.w	r7, [r5, #64]	@ 0x40
    if (reader != 0)
90001d56:	6b28      	ldr	r0, [r5, #48]	@ 0x30
        uint32_t streamNo  = getU16(currentMovieOffset);
90001d58:	69aa      	ldr	r2, [r5, #24]
        aviBufferStartOffset = offset;
90001d5a:	63ec      	str	r4, [r5, #60]	@ 0x3c
    if (reader != 0)
90001d5c:	2800      	cmp	r0, #0
90001d5e:	d053      	beq.n	90001e08 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x138>
        const uint32_t index = offset - aviBufferStartOffset;
90001d60:	1b12      	subs	r2, r2, r4
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8);
90001d62:	6b69      	ldr	r1, [r5, #52]	@ 0x34
90001d64:	188b      	adds	r3, r1, r2
90001d66:	5c89      	ldrb	r1, [r1, r2]
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
90001d68:	799c      	ldrb	r4, [r3, #6]
90001d6a:	f893 a005 	ldrb.w	sl, [r3, #5]
90001d6e:	0424      	lsls	r4, r4, #16
90001d70:	f893 e004 	ldrb.w	lr, [r3, #4]
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8);
90001d74:	f893 9001 	ldrb.w	r9, [r3, #1]
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
90001d78:	ea44 240a 	orr.w	r4, r4, sl, lsl #8
90001d7c:	f893 c007 	ldrb.w	ip, [r3, #7]
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8);
90001d80:	f893 8003 	ldrb.w	r8, [r3, #3]
90001d84:	ea41 2109 	orr.w	r1, r1, r9, lsl #8
90001d88:	789a      	ldrb	r2, [r3, #2]
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
90001d8a:	ea44 040e 	orr.w	r4, r4, lr
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8);
90001d8e:	ea42 2308 	orr.w	r3, r2, r8, lsl #8
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
90001d92:	ea44 640c 	orr.w	r4, r4, ip, lsl #24
        if (streamNo == STREAM0 && chunkType == TYPEDC)
90001d96:	f246 3264 	movw	r2, #25444	@ 0x6364
90001d9a:	42b1      	cmp	r1, r6
90001d9c:	bf08      	it	eq
90001d9e:	4293      	cmpeq	r3, r2
90001da0:	bf0c      	ite	eq
90001da2:	2101      	moveq	r1, #1
90001da4:	2100      	movne	r1, #0
90001da6:	d01a      	beq.n	90001dde <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x10e>
    while (currentMovieOffset + 8 + chunkSize < movieLength)
90001da8:	69ab      	ldr	r3, [r5, #24]
90001daa:	441c      	add	r4, r3
90001dac:	6aab      	ldr	r3, [r5, #40]	@ 0x28
90001dae:	f104 0208 	add.w	r2, r4, #8
90001db2:	429a      	cmp	r2, r3
90001db4:	d20e      	bcs.n	90001dd4 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x104>
        frameNumber++;
90001db6:	696b      	ldr	r3, [r5, #20]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
90001db8:	3409      	adds	r4, #9
        frameNumber++;
90001dba:	3301      	adds	r3, #1
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
90001dbc:	f024 0401 	bic.w	r4, r4, #1
90001dc0:	e9c5 3405 	strd	r3, r4, [r5, #20]
    if (reader != 0)
90001dc4:	2800      	cmp	r0, #0
90001dc6:	d1b6      	bne.n	90001d36 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x66>
        const uint8_t* const d = movieData + offset;
90001dc8:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
        return d[0] | (d[1] << 8);
90001dca:	191a      	adds	r2, r3, r4
90001dcc:	5b19      	ldrh	r1, [r3, r4]
90001dce:	8853      	ldrh	r3, [r2, #2]
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
90001dd0:	6854      	ldr	r4, [r2, #4]
90001dd2:	e7e0      	b.n	90001d96 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0xc6>
    frameNumber = 1;
90001dd4:	2201      	movs	r2, #1
    currentMovieOffset = firstFrameOffset; //start over
90001dd6:	6a2b      	ldr	r3, [r5, #32]
    return false;
90001dd8:	2100      	movs	r1, #0
    currentMovieOffset = firstFrameOffset; //start over
90001dda:	e9c5 2305 	strd	r2, r3, [r5, #20]
}
90001dde:	4608      	mov	r0, r1
90001de0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            lastError = AVI_ERROR_EOF_REACHED;
90001de4:	230d      	movs	r3, #13
90001de6:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
90001dea:	e78d      	b.n	90001d08 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x38>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
90001dec:	1d22      	adds	r2, r4, #4
90001dee:	4623      	mov	r3, r4
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
90001df0:	6ae9      	ldr	r1, [r5, #44]	@ 0x2c
90001df2:	588c      	ldr	r4, [r1, r2]
90001df4:	e79b      	b.n	90001d2e <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x5e>
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
90001df6:	2009      	movs	r0, #9
            assert(!"Buffer to small");
90001df8:	4b07      	ldr	r3, [pc, #28]	@ (90001e18 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x148>)
90001dfa:	4a08      	ldr	r2, [pc, #32]	@ (90001e1c <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x14c>)
90001dfc:	21a7      	movs	r1, #167	@ 0xa7
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
90001dfe:	f885 0040 	strb.w	r0, [r5, #64]	@ 0x40
            assert(!"Buffer to small");
90001e02:	4807      	ldr	r0, [pc, #28]	@ (90001e20 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x150>)
90001e04:	f020 ff06 	bl	90022c14 <__assert_func>
        uint32_t streamNo  = getU16(currentMovieOffset);
90001e08:	4614      	mov	r4, r2
90001e0a:	e7dd      	b.n	90001dc8 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0xf8>
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
90001e0c:	4b05      	ldr	r3, [pc, #20]	@ (90001e24 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x154>)
90001e0e:	21ed      	movs	r1, #237	@ 0xed
90001e10:	4a05      	ldr	r2, [pc, #20]	@ (90001e28 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x158>)
90001e12:	4803      	ldr	r0, [pc, #12]	@ (90001e20 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x150>)
90001e14:	f020 fefe 	bl	90022c14 <__assert_func>
90001e18:	900240a0 	.word	0x900240a0
90001e1c:	900240b4 	.word	0x900240b4
90001e20:	9002404c 	.word	0x9002404c
90001e24:	900240f8 	.word	0x900240f8
90001e28:	90024144 	.word	0x90024144

90001e2c <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm>:
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
90001e2c:	6943      	ldr	r3, [r0, #20]
{
90001e2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
90001e32:	2b00      	cmp	r3, #0
90001e34:	f000 809b 	beq.w	90001f6e <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x142>
    readData(currentMovieOffset, 8);
90001e38:	4604      	mov	r4, r0
    if (reader != 0)
90001e3a:	6b00      	ldr	r0, [r0, #48]	@ 0x30
90001e3c:	460e      	mov	r6, r1
    readData(currentMovieOffset, 8);
90001e3e:	69a5      	ldr	r5, [r4, #24]
    if (reader != 0)
90001e40:	2800      	cmp	r0, #0
90001e42:	d061      	beq.n	90001f08 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xdc>
        if (length > aviBufferLength)
90001e44:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
90001e46:	2b07      	cmp	r3, #7
90001e48:	f240 8097 	bls.w	90001f7a <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x14e>
        reader->seek(offset);
90001e4c:	6803      	ldr	r3, [r0, #0]
90001e4e:	4629      	mov	r1, r5
90001e50:	68db      	ldr	r3, [r3, #12]
90001e52:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
90001e54:	6b20      	ldr	r0, [r4, #48]	@ 0x30
90001e56:	2208      	movs	r2, #8
90001e58:	6b61      	ldr	r1, [r4, #52]	@ 0x34
90001e5a:	6803      	ldr	r3, [r0, #0]
90001e5c:	691b      	ldr	r3, [r3, #16]
90001e5e:	4798      	blx	r3
90001e60:	2800      	cmp	r0, #0
90001e62:	d04c      	beq.n	90001efe <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xd2>
    uint32_t streamNo  = getU16(currentMovieOffset);
90001e64:	69a1      	ldr	r1, [r4, #24]
    if (reader != 0)
90001e66:	6b20      	ldr	r0, [r4, #48]	@ 0x30
    uint32_t chunkType = getU16(currentMovieOffset + 2);
90001e68:	1c8a      	adds	r2, r1, #2
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
90001e6a:	f101 0c04 	add.w	ip, r1, #4
        aviBufferStartOffset = offset;
90001e6e:	63e5      	str	r5, [r4, #60]	@ 0x3c
    if (reader != 0)
90001e70:	2800      	cmp	r0, #0
90001e72:	d048      	beq.n	90001f06 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xda>
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8);
90001e74:	6b63      	ldr	r3, [r4, #52]	@ 0x34
        const uint32_t index = offset - aviBufferStartOffset;
90001e76:	ebac 0c05 	sub.w	ip, ip, r5
        const uint32_t index = offset - aviBufferStartOffset;
90001e7a:	1b52      	subs	r2, r2, r5
90001e7c:	1b4d      	subs	r5, r1, r5
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
90001e7e:	eb03 0e0c 	add.w	lr, r3, ip
90001e82:	f813 700c 	ldrb.w	r7, [r3, ip]
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8);
90001e86:	eb03 0805 	add.w	r8, r3, r5
90001e8a:	f813 c005 	ldrb.w	ip, [r3, r5]
90001e8e:	f898 5001 	ldrb.w	r5, [r8, #1]
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
90001e92:	f89e 8001 	ldrb.w	r8, [lr, #1]
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8);
90001e96:	ea4c 2c05 	orr.w	ip, ip, r5, lsl #8
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
90001e9a:	f89e 5002 	ldrb.w	r5, [lr, #2]
90001e9e:	f89e e003 	ldrb.w	lr, [lr, #3]
90001ea2:	042d      	lsls	r5, r5, #16
90001ea4:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
90001ea8:	433d      	orrs	r5, r7
90001eaa:	ea45 650e 	orr.w	r5, r5, lr, lsl #24
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8);
90001eae:	eb03 0e02 	add.w	lr, r3, r2
90001eb2:	5c9b      	ldrb	r3, [r3, r2]
90001eb4:	f89e 2001 	ldrb.w	r2, [lr, #1]
90001eb8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    if (currentMovieOffset + 8 + chunkSize < movieLength)
90001ebc:	eb01 0e05 	add.w	lr, r1, r5
90001ec0:	6aa7      	ldr	r7, [r4, #40]	@ 0x28
90001ec2:	f10e 0208 	add.w	r2, lr, #8
90001ec6:	42ba      	cmp	r2, r7
90001ec8:	d212      	bcs.n	90001ef0 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xc4>
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
90001eca:	f243 0730 	movw	r7, #12336	@ 0x3030
90001ece:	45bc      	cmp	ip, r7
90001ed0:	d123      	bne.n	90001f1a <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xee>
90001ed2:	f246 3764 	movw	r7, #25444	@ 0x6364
90001ed6:	42bb      	cmp	r3, r7
90001ed8:	d11f      	bne.n	90001f1a <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xee>
90001eda:	bb15      	cbnz	r5, 90001f22 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xf6>
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
90001edc:	3201      	adds	r2, #1
        if (currentMovieOffset == lastFrameEnd)
90001ede:	6a63      	ldr	r3, [r4, #36]	@ 0x24
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
90001ee0:	f022 0201 	bic.w	r2, r2, #1
        if (currentMovieOffset == lastFrameEnd)
90001ee4:	429a      	cmp	r2, r3
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
90001ee6:	61a2      	str	r2, [r4, #24]
        if (currentMovieOffset == lastFrameEnd)
90001ee8:	d002      	beq.n	90001ef0 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xc4>
90001eea:	2001      	movs	r0, #1
}
90001eec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        frameNumber = 1;
90001ef0:	2201      	movs	r2, #1
        currentMovieOffset = firstFrameOffset; //start over
90001ef2:	6a23      	ldr	r3, [r4, #32]
90001ef4:	2000      	movs	r0, #0
        frameNumber = 1;
90001ef6:	6162      	str	r2, [r4, #20]
        currentMovieOffset = firstFrameOffset; //start over
90001ef8:	61a3      	str	r3, [r4, #24]
}
90001efa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            lastError = AVI_ERROR_EOF_REACHED;
90001efe:	230d      	movs	r3, #13
90001f00:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
90001f04:	e7ae      	b.n	90001e64 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x38>
    uint32_t streamNo  = getU16(currentMovieOffset);
90001f06:	460d      	mov	r5, r1
        const uint8_t* const d = movieData + offset;
90001f08:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
        const uint8_t* const d = movieData + offset;
90001f0a:	4629      	mov	r1, r5
90001f0c:	2000      	movs	r0, #0
        return d[0] | (d[1] << 8);
90001f0e:	f832 c005 	ldrh.w	ip, [r2, r5]
90001f12:	442a      	add	r2, r5
90001f14:	8853      	ldrh	r3, [r2, #2]
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
90001f16:	6855      	ldr	r5, [r2, #4]
90001f18:	e7d0      	b.n	90001ebc <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x90>
        if (chunkSize == 0) // Empty frame - Skip
90001f1a:	2d00      	cmp	r5, #0
90001f1c:	bf18      	it	ne
90001f1e:	4672      	movne	r2, lr
90001f20:	e7dc      	b.n	90001edc <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xb0>
            currentMovieOffset += 8;
90001f22:	f101 0708 	add.w	r7, r1, #8
90001f26:	61a7      	str	r7, [r4, #24]
    if (reader != 0)
90001f28:	b1f0      	cbz	r0, 90001f68 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x13c>
        if (length > aviBufferLength)
90001f2a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
90001f2c:	429d      	cmp	r5, r3
90001f2e:	d824      	bhi.n	90001f7a <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x14e>
        reader->seek(offset);
90001f30:	6803      	ldr	r3, [r0, #0]
90001f32:	4639      	mov	r1, r7
90001f34:	68db      	ldr	r3, [r3, #12]
90001f36:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
90001f38:	6b20      	ldr	r0, [r4, #48]	@ 0x30
90001f3a:	462a      	mov	r2, r5
90001f3c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
90001f3e:	6803      	ldr	r3, [r0, #0]
90001f40:	691b      	ldr	r3, [r3, #16]
90001f42:	4798      	blx	r3
90001f44:	b910      	cbnz	r0, 90001f4c <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x120>
            lastError = AVI_ERROR_EOF_REACHED;
90001f46:	230d      	movs	r3, #13
90001f48:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        return aviBuffer;
90001f4c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
        aviBufferStartOffset = offset;
90001f4e:	63e7      	str	r7, [r4, #60]	@ 0x3c
    if (outputBuffer) //only decode if buffers are assigned.
90001f50:	b126      	cbz	r6, 90001f5c <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x130>
90001f52:	4633      	mov	r3, r6
90001f54:	462a      	mov	r2, r5
90001f56:	4620      	mov	r0, r4
90001f58:	f7ff fc42 	bl	900017e0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0>
        currentMovieOffset += chunkSize;
90001f5c:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
            frameNumber++;
90001f60:	3301      	adds	r3, #1
        currentMovieOffset += chunkSize;
90001f62:	442a      	add	r2, r5
            frameNumber++;
90001f64:	6163      	str	r3, [r4, #20]
        if (chunkSize == 0) // Empty frame - Skip
90001f66:	e7b9      	b.n	90001edc <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xb0>
    return movieData + offset;
90001f68:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
90001f6a:	4439      	add	r1, r7
90001f6c:	e7f0      	b.n	90001f50 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x124>
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
90001f6e:	4b07      	ldr	r3, [pc, #28]	@ (90001f8c <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x160>)
90001f70:	21b9      	movs	r1, #185	@ 0xb9
90001f72:	4a07      	ldr	r2, [pc, #28]	@ (90001f90 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x164>)
90001f74:	4807      	ldr	r0, [pc, #28]	@ (90001f94 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x168>)
90001f76:	f020 fe4d 	bl	90022c14 <__assert_func>
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
90001f7a:	2009      	movs	r0, #9
            assert(!"Buffer to small");
90001f7c:	4b06      	ldr	r3, [pc, #24]	@ (90001f98 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x16c>)
90001f7e:	4a07      	ldr	r2, [pc, #28]	@ (90001f9c <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x170>)
90001f80:	21a7      	movs	r1, #167	@ 0xa7
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
90001f82:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
            assert(!"Buffer to small");
90001f86:	4803      	ldr	r0, [pc, #12]	@ (90001f94 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x168>)
90001f88:	f020 fe44 	bl	90022c14 <__assert_func>
90001f8c:	900240f8 	.word	0x900240f8
90001f90:	90024178 	.word	0x90024178
90001f94:	9002404c 	.word	0x9002404c
90001f98:	900240a0 	.word	0x900240a0
90001f9c:	900240b4 	.word	0x900240b4

90001fa0 <_ZN20HardwareMJPEGDecoderC1Ev>:
HardwareMJPEGDecoder::HardwareMJPEGDecoder()
90001fa0:	b538      	push	{r3, r4, r5, lr}
    : frameNumber(0), currentMovieOffset(0), indexOffset(0), firstFrameOffset(0), lastFrameEnd(0), movieLength(0), movieData(0),
90001fa2:	2500      	movs	r5, #0
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
90001fa4:	4b0f      	ldr	r3, [pc, #60]	@ (90001fe4 <_ZN20HardwareMJPEGDecoderC1Ev+0x44>)
HardwareMJPEGDecoder::HardwareMJPEGDecoder()
90001fa6:	4604      	mov	r4, r0
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
90001fa8:	6003      	str	r3, [r0, #0]
90001faa:	63c5      	str	r5, [r0, #60]	@ 0x3c
90001fac:	f880 5040 	strb.w	r5, [r0, #64]	@ 0x40
    : frameNumber(0), currentMovieOffset(0), indexOffset(0), firstFrameOffset(0), lastFrameEnd(0), movieLength(0), movieData(0),
90001fb0:	e9c0 5505 	strd	r5, r5, [r0, #20]
90001fb4:	e9c0 5507 	strd	r5, r5, [r0, #28]
90001fb8:	e9c0 5509 	strd	r5, r5, [r0, #36]	@ 0x24
90001fbc:	e9c0 550b 	strd	r5, r5, [r0, #44]	@ 0x2c
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
90001fc0:	e9c0 550d 	strd	r5, r5, [r0, #52]	@ 0x34
    videoInfo.frame_width = 0;
90001fc4:	e9c0 5503 	strd	r5, r5, [r0, #12]
    videoInfo.number_of_frames = 0;
90001fc8:	e9c0 5501 	strd	r5, r5, [r0, #4]
    TGFX_JPEG_InitColorTables();
90001fcc:	f002 fa4a 	bl	90004464 <TGFX_JPEG_InitColorTables>
    semDecodingDone = SEM_CREATE();
90001fd0:	462a      	mov	r2, r5
90001fd2:	4629      	mov	r1, r5
90001fd4:	2001      	movs	r0, #1
90001fd6:	f00a fb7d 	bl	9000c6d4 <osSemaphoreNew>
90001fda:	4b03      	ldr	r3, [pc, #12]	@ (90001fe8 <_ZN20HardwareMJPEGDecoderC1Ev+0x48>)
90001fdc:	4602      	mov	r2, r0
}
90001fde:	4620      	mov	r0, r4
    semDecodingDone = SEM_CREATE();
90001fe0:	601a      	str	r2, [r3, #0]
}
90001fe2:	bd38      	pop	{r3, r4, r5, pc}
90001fe4:	900242f8 	.word	0x900242f8
90001fe8:	24005ea8 	.word	0x24005ea8

90001fec <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>:
{
90001fec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    currentMovieOffset = 0;
90001ff0:	2100      	movs	r1, #0
    if (reader != 0)
90001ff2:	6b06      	ldr	r6, [r0, #48]	@ 0x30
{
90001ff4:	4605      	mov	r5, r0
    currentMovieOffset = 0;
90001ff6:	6181      	str	r1, [r0, #24]
    lastError = AVI_NO_ERROR;
90001ff8:	f880 1040 	strb.w	r1, [r0, #64]	@ 0x40
    if (reader != 0)
90001ffc:	2e00      	cmp	r6, #0
90001ffe:	f000 81a9 	beq.w	90002354 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x368>
        if (length > aviBufferLength)
90002002:	6b83      	ldr	r3, [r0, #56]	@ 0x38
90002004:	2b47      	cmp	r3, #71	@ 0x47
90002006:	f240 8206 	bls.w	90002416 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x42a>
        reader->seek(offset);
9000200a:	6833      	ldr	r3, [r6, #0]
9000200c:	4630      	mov	r0, r6
9000200e:	68db      	ldr	r3, [r3, #12]
90002010:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
90002012:	6b28      	ldr	r0, [r5, #48]	@ 0x30
90002014:	2248      	movs	r2, #72	@ 0x48
90002016:	6b69      	ldr	r1, [r5, #52]	@ 0x34
90002018:	6803      	ldr	r3, [r0, #0]
9000201a:	691b      	ldr	r3, [r3, #16]
9000201c:	4798      	blx	r3
9000201e:	2800      	cmp	r0, #0
90002020:	f000 80b7 	beq.w	90002192 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1a6>
        aviBufferStartOffset = offset;
90002024:	2300      	movs	r3, #0
    if (reader != 0)
90002026:	6b2e      	ldr	r6, [r5, #48]	@ 0x30
    if (compare(currentMovieOffset, "RIFF", 4))
90002028:	69af      	ldr	r7, [r5, #24]
    if (reader != 0)
9000202a:	46b2      	mov	sl, r6
        aviBufferStartOffset = offset;
9000202c:	63eb      	str	r3, [r5, #60]	@ 0x3c
    if (reader != 0)
9000202e:	2e00      	cmp	r6, #0
90002030:	f000 8191 	beq.w	90002356 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x36a>
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
90002034:	f8d5 9034 	ldr.w	r9, [r5, #52]	@ 0x34
    return strncmp(src, str, num);
90002038:	2204      	movs	r2, #4
9000203a:	49be      	ldr	r1, [pc, #760]	@ (90002334 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x348>)
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
9000203c:	eb09 0407 	add.w	r4, r9, r7
    return strncmp(src, str, num);
90002040:	4620      	mov	r0, r4
90002042:	f021 f88b 	bl	9002315c <strncmp>
    if (compare(currentMovieOffset, "RIFF", 4))
90002046:	2800      	cmp	r0, #0
90002048:	f040 81f5 	bne.w	90002436 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x44a>
    currentMovieOffset += 8;
9000204c:	f107 0008 	add.w	r0, r7, #8
    return strncmp(src, str, num);
90002050:	2204      	movs	r2, #4
90002052:	49b9      	ldr	r1, [pc, #740]	@ (90002338 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x34c>)
    currentMovieOffset += 8;
90002054:	61a8      	str	r0, [r5, #24]
    return strncmp(src, str, num);
90002056:	4448      	add	r0, r9
90002058:	f021 f880 	bl	9002315c <strncmp>
    if (compare(currentMovieOffset, "AVI ", 4))
9000205c:	2800      	cmp	r0, #0
9000205e:	f040 81fe 	bne.w	9000245e <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x472>
    currentMovieOffset += 4;
90002062:	f107 0b0c 	add.w	fp, r7, #12
    return strncmp(src, str, num);
90002066:	2204      	movs	r2, #4
90002068:	49b4      	ldr	r1, [pc, #720]	@ (9000233c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x350>)
9000206a:	eb09 000b 	add.w	r0, r9, fp
    currentMovieOffset += 4;
9000206e:	f8c5 b018 	str.w	fp, [r5, #24]
    return strncmp(src, str, num);
90002072:	f021 f873 	bl	9002315c <strncmp>
    if (compare(currentMovieOffset, "LIST", 4))
90002076:	4680      	mov	r8, r0
90002078:	2800      	cmp	r0, #0
9000207a:	f040 81e6 	bne.w	9000244a <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x45e>
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
9000207e:	7ca3      	ldrb	r3, [r4, #18]
90002080:	7c62      	ldrb	r2, [r4, #17]
90002082:	041b      	lsls	r3, r3, #16
90002084:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
90002088:	7c22      	ldrb	r2, [r4, #16]
9000208a:	4313      	orrs	r3, r2
9000208c:	7ce2      	ldrb	r2, [r4, #19]
    assert(aviListSize);
9000208e:	ea53 6402 	orrs.w	r4, r3, r2, lsl #24
90002092:	f000 81c9 	beq.w	90002428 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x43c>
    uint32_t offset =  currentMovieOffset + 8;
90002096:	f107 0014 	add.w	r0, r7, #20
    return strncmp(src, str, num);
9000209a:	2204      	movs	r2, #4
9000209c:	49a8      	ldr	r1, [pc, #672]	@ (90002340 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x354>)
9000209e:	4448      	add	r0, r9
900020a0:	f021 f85c 	bl	9002315c <strncmp>
    if (compare(offset, "hdrl", 4))
900020a4:	2800      	cmp	r0, #0
900020a6:	d078      	beq.n	9000219a <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1ae>
        lastError = AVI_ERROR_AVI_HDRL_NOT_FOUND;
900020a8:	2306      	movs	r3, #6
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
900020aa:	f107 0018 	add.w	r0, r7, #24
        lastError = AVI_ERROR_AVI_HDRL_NOT_FOUND;
900020ae:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
900020b2:	4448      	add	r0, r9
    uint32_t listOffset = aviListOffset + aviListSize + 8;
900020b4:	445c      	add	r4, fp
    return strncmp(src, str, num);
900020b6:	2204      	movs	r2, #4
900020b8:	49a2      	ldr	r1, [pc, #648]	@ (90002344 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x358>)
    uint32_t listOffset = aviListOffset + aviListSize + 8;
900020ba:	3408      	adds	r4, #8
    return strncmp(src, str, num);
900020bc:	f021 f84e 	bl	9002315c <strncmp>
    if (compare(offset, "avih", 4))
900020c0:	2800      	cmp	r0, #0
900020c2:	f000 80dc 	beq.w	9000227e <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x292>
        lastError = AVI_ERROR_AVI_AVIH_NOT_FOUND;
900020c6:	2307      	movs	r3, #7
900020c8:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
    if (reader != 0)
900020cc:	f1ba 0f00 	cmp.w	sl, #0
900020d0:	f000 8176 	beq.w	900023c0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x3d4>
        if (length > aviBufferLength)
900020d4:	6bab      	ldr	r3, [r5, #56]	@ 0x38
900020d6:	2b0b      	cmp	r3, #11
900020d8:	f240 819d 	bls.w	90002416 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x42a>
        reader->seek(offset);
900020dc:	f8da 3000 	ldr.w	r3, [sl]
900020e0:	4621      	mov	r1, r4
900020e2:	4650      	mov	r0, sl
900020e4:	68db      	ldr	r3, [r3, #12]
900020e6:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
900020e8:	6b28      	ldr	r0, [r5, #48]	@ 0x30
900020ea:	220c      	movs	r2, #12
900020ec:	6b69      	ldr	r1, [r5, #52]	@ 0x34
900020ee:	6803      	ldr	r3, [r0, #0]
900020f0:	691b      	ldr	r3, [r3, #16]
900020f2:	4798      	blx	r3
900020f4:	2800      	cmp	r0, #0
900020f6:	f000 8117 	beq.w	90002328 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x33c>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
900020fa:	f895 a040 	ldrb.w	sl, [r5, #64]	@ 0x40
        aviBufferStartOffset = offset;
900020fe:	6b2e      	ldr	r6, [r5, #48]	@ 0x30
90002100:	63ec      	str	r4, [r5, #60]	@ 0x3c
    return strncmp(src, str, num);
90002102:	f8df 8248 	ldr.w	r8, [pc, #584]	@ 9000234c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x360>
            lastError = AVI_ERROR_EOF_REACHED;
90002106:	f04f 090d 	mov.w	r9, #13
9000210a:	e003      	b.n	90002114 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x128>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
9000210c:	f895 a040 	ldrb.w	sl, [r5, #64]	@ 0x40
    if (reader != 0)
90002110:	6b2e      	ldr	r6, [r5, #48]	@ 0x30
        aviBufferStartOffset = offset;
90002112:	63ec      	str	r4, [r5, #60]	@ 0x3c
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
90002114:	f104 0708 	add.w	r7, r4, #8
    if (reader != 0)
90002118:	2e00      	cmp	r6, #0
9000211a:	d048      	beq.n	900021ae <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1c2>
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
9000211c:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
    return strncmp(src, str, num);
9000211e:	2204      	movs	r2, #4
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
90002120:	6b68      	ldr	r0, [r5, #52]	@ 0x34
    return strncmp(src, str, num);
90002122:	4641      	mov	r1, r8
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
90002124:	1afb      	subs	r3, r7, r3
90002126:	4418      	add	r0, r3
    return strncmp(src, str, num);
90002128:	f021 f818 	bl	9002315c <strncmp>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
9000212c:	2800      	cmp	r0, #0
9000212e:	d047      	beq.n	900021c0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d4>
90002130:	f1ba 0f00 	cmp.w	sl, #0
90002134:	f040 809e 	bne.w	90002274 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x288>
90002138:	6aab      	ldr	r3, [r5, #40]	@ 0x28
9000213a:	42a3      	cmp	r3, r4
9000213c:	d943      	bls.n	900021c6 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1da>
        const uint32_t listSize = getU32(listOffset + 4) + 8;
9000213e:	3404      	adds	r4, #4
    if (reader != 0)
90002140:	b386      	cbz	r6, 900021a4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b8>
        const uint32_t index = offset - aviBufferStartOffset;
90002142:	6bea      	ldr	r2, [r5, #60]	@ 0x3c
        if (length > aviBufferLength)
90002144:	e9d5 130d 	ldrd	r1, r3, [r5, #52]	@ 0x34
        const uint32_t index = offset - aviBufferStartOffset;
90002148:	1aa4      	subs	r4, r4, r2
        if (length > aviBufferLength)
9000214a:	2b0b      	cmp	r3, #11
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
9000214c:	eb01 0204 	add.w	r2, r1, r4
90002150:	5d09      	ldrb	r1, [r1, r4]
90002152:	7894      	ldrb	r4, [r2, #2]
90002154:	7850      	ldrb	r0, [r2, #1]
90002156:	ea4f 4404 	mov.w	r4, r4, lsl #16
9000215a:	78d2      	ldrb	r2, [r2, #3]
9000215c:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
90002160:	ea44 0401 	orr.w	r4, r4, r1
90002164:	ea44 6402 	orr.w	r4, r4, r2, lsl #24
        listOffset += listSize;
90002168:	443c      	add	r4, r7
        if (length > aviBufferLength)
9000216a:	f240 8154 	bls.w	90002416 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x42a>
        reader->seek(offset);
9000216e:	6833      	ldr	r3, [r6, #0]
90002170:	4621      	mov	r1, r4
90002172:	4630      	mov	r0, r6
90002174:	68db      	ldr	r3, [r3, #12]
90002176:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
90002178:	6b28      	ldr	r0, [r5, #48]	@ 0x30
9000217a:	220c      	movs	r2, #12
9000217c:	6b69      	ldr	r1, [r5, #52]	@ 0x34
9000217e:	6803      	ldr	r3, [r0, #0]
90002180:	691b      	ldr	r3, [r3, #16]
90002182:	4798      	blx	r3
90002184:	2800      	cmp	r0, #0
90002186:	d1c1      	bne.n	9000210c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x120>
            lastError = AVI_ERROR_EOF_REACHED;
90002188:	f04f 0a0d 	mov.w	sl, #13
9000218c:	f885 9040 	strb.w	r9, [r5, #64]	@ 0x40
90002190:	e7be      	b.n	90002110 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x124>
90002192:	230d      	movs	r3, #13
90002194:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
90002198:	e744      	b.n	90002024 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x38>
    offset += 4;
9000219a:	f107 0018 	add.w	r0, r7, #24
    bool foundFrame = true;
9000219e:	f04f 0801 	mov.w	r8, #1
900021a2:	e786      	b.n	900020b2 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xc6>
        listOffset += listSize;
900021a4:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
900021a6:	591c      	ldr	r4, [r3, r4]
900021a8:	443c      	add	r4, r7
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
900021aa:	f104 0708 	add.w	r7, r4, #8
        src = (const char*)movieData + offset;
900021ae:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
    return strncmp(src, str, num);
900021b0:	2204      	movs	r2, #4
900021b2:	4641      	mov	r1, r8
        src = (const char*)movieData + offset;
900021b4:	2600      	movs	r6, #0
900021b6:	4438      	add	r0, r7
    return strncmp(src, str, num);
900021b8:	f020 ffd0 	bl	9002315c <strncmp>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
900021bc:	2800      	cmp	r0, #0
900021be:	d1b7      	bne.n	90002130 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x144>
    if (lastError != AVI_NO_ERROR)
900021c0:	f1ba 0f00 	cmp.w	sl, #0
900021c4:	d156      	bne.n	90002274 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x288>
    currentMovieOffset = listOffset + 8 + 4; //skip LIST and 'movi'
900021c6:	f104 030c 	add.w	r3, r4, #12
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
900021ca:	3404      	adds	r4, #4
    currentMovieOffset = listOffset + 8 + 4; //skip LIST and 'movi'
900021cc:	61ab      	str	r3, [r5, #24]
    if (reader != 0)
900021ce:	2e00      	cmp	r6, #0
900021d0:	f000 8119 	beq.w	90002406 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x41a>
        const uint32_t index = offset - aviBufferStartOffset;
900021d4:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
900021d6:	1ae4      	subs	r4, r4, r3
        if (length > aviBufferLength)
900021d8:	e9d5 120d 	ldrd	r1, r2, [r5, #52]	@ 0x34
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
900021dc:	f104 0e02 	add.w	lr, r4, #2
900021e0:	f104 0c01 	add.w	ip, r4, #1
900021e4:	f811 8004 	ldrb.w	r8, [r1, r4]
900021e8:	1ce0      	adds	r0, r4, #3
900021ea:	f811 300e 	ldrb.w	r3, [r1, lr]
        if (length > aviBufferLength)
900021ee:	2a03      	cmp	r2, #3
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
900021f0:	f811 900c 	ldrb.w	r9, [r1, ip]
900021f4:	ea4f 4303 	mov.w	r3, r3, lsl #16
900021f8:	ea43 2309 	orr.w	r3, r3, r9, lsl #8
900021fc:	ea43 0308 	orr.w	r3, r3, r8
90002200:	f811 8000 	ldrb.w	r8, [r1, r0]
90002204:	ea43 6308 	orr.w	r3, r3, r8, lsl #24
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
90002208:	443b      	add	r3, r7
9000220a:	626b      	str	r3, [r5, #36]	@ 0x24
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
9000220c:	f811 300e 	ldrb.w	r3, [r1, lr]
90002210:	f811 e00c 	ldrb.w	lr, [r1, ip]
90002214:	f811 c004 	ldrb.w	ip, [r1, r4]
90002218:	ea4f 4403 	mov.w	r4, r3, lsl #16
9000221c:	5c09      	ldrb	r1, [r1, r0]
9000221e:	ea44 240e 	orr.w	r4, r4, lr, lsl #8
90002222:	ea44 040c 	orr.w	r4, r4, ip
90002226:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
    listOffset += listSize;
9000222a:	443c      	add	r4, r7
        if (length > aviBufferLength)
9000222c:	f240 80f3 	bls.w	90002416 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x42a>
        reader->seek(offset);
90002230:	6833      	ldr	r3, [r6, #0]
90002232:	4621      	mov	r1, r4
90002234:	4630      	mov	r0, r6
90002236:	68db      	ldr	r3, [r3, #12]
90002238:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
9000223a:	6b28      	ldr	r0, [r5, #48]	@ 0x30
9000223c:	2204      	movs	r2, #4
9000223e:	6b69      	ldr	r1, [r5, #52]	@ 0x34
90002240:	6803      	ldr	r3, [r0, #0]
90002242:	691b      	ldr	r3, [r3, #16]
90002244:	4798      	blx	r3
90002246:	2800      	cmp	r0, #0
90002248:	f000 80bd 	beq.w	900023c6 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x3da>
    if (reader != 0)
9000224c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
        aviBufferStartOffset = offset;
9000224e:	63ec      	str	r4, [r5, #60]	@ 0x3c
    if (reader != 0)
90002250:	2b00      	cmp	r3, #0
90002252:	f000 810e 	beq.w	90002472 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x486>
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
90002256:	6b68      	ldr	r0, [r5, #52]	@ 0x34
    return strncmp(src, str, num);
90002258:	2204      	movs	r2, #4
9000225a:	493b      	ldr	r1, [pc, #236]	@ (90002348 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x35c>)
9000225c:	f020 ff7e 	bl	9002315c <strncmp>
    if (!compare(listOffset, "idx1", 4))
90002260:	2800      	cmp	r0, #0
90002262:	f040 80cb 	bne.w	900023fc <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x410>
    frameNumber = 1; //next frame number is 1
90002266:	2201      	movs	r2, #1
    firstFrameOffset = currentMovieOffset;
90002268:	69ab      	ldr	r3, [r5, #24]
        indexOffset = listOffset;
9000226a:	61ec      	str	r4, [r5, #28]
    frameNumber = 1; //next frame number is 1
9000226c:	616a      	str	r2, [r5, #20]
    firstFrameOffset = currentMovieOffset;
9000226e:	622b      	str	r3, [r5, #32]
}
90002270:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        lastError = AVI_ERROR_MOVI_NOT_FOUND;
90002274:	230a      	movs	r3, #10
90002276:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
}
9000227a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (foundFrame)
9000227e:	f1b8 0f00 	cmp.w	r8, #0
90002282:	f43f af23 	beq.w	900020cc <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xe0>
        offset += 8; //skip fourcc and cb in AVIMAINHEADER
90002286:	f107 0320 	add.w	r3, r7, #32
    if (reader != 0)
9000228a:	f1ba 0f00 	cmp.w	sl, #0
9000228e:	f000 80a4 	beq.w	900023da <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x3ee>
        const uint32_t index = offset - aviBufferStartOffset;
90002292:	6bee      	ldr	r6, [r5, #60]	@ 0x3c
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
90002294:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
        const uint32_t index = offset - aviBufferStartOffset;
90002296:	1b9b      	subs	r3, r3, r6
90002298:	f1c6 0030 	rsb	r0, r6, #48	@ 0x30
9000229c:	f1c6 0140 	rsb	r1, r6, #64	@ 0x40
900022a0:	f1c6 0644 	rsb	r6, r6, #68	@ 0x44
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
900022a4:	eb02 0e03 	add.w	lr, r2, r3
900022a8:	f812 8003 	ldrb.w	r8, [r2, r3]
        const uint32_t index = offset - aviBufferStartOffset;
900022ac:	4438      	add	r0, r7
900022ae:	4439      	add	r1, r7
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
900022b0:	f89e 3002 	ldrb.w	r3, [lr, #2]
        const uint32_t index = offset - aviBufferStartOffset;
900022b4:	443e      	add	r6, r7
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
900022b6:	f89e 7001 	ldrb.w	r7, [lr, #1]
900022ba:	041b      	lsls	r3, r3, #16
        videoInfo.ms_between_frames = getU32(offset) / 1000;
900022bc:	f8df c090 	ldr.w	ip, [pc, #144]	@ 90002350 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x364>
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
900022c0:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
900022c4:	f89e 7003 	ldrb.w	r7, [lr, #3]
900022c8:	ea43 0308 	orr.w	r3, r3, r8
900022cc:	ea43 6307 	orr.w	r3, r3, r7, lsl #24
900022d0:	1817      	adds	r7, r2, r0
        videoInfo.ms_between_frames = getU32(offset) / 1000;
900022d2:	fbac c303 	umull	ip, r3, ip, r3
900022d6:	099b      	lsrs	r3, r3, #6
900022d8:	606b      	str	r3, [r5, #4]
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
900022da:	78bb      	ldrb	r3, [r7, #2]
900022dc:	f897 e001 	ldrb.w	lr, [r7, #1]
900022e0:	041b      	lsls	r3, r3, #16
900022e2:	f812 c000 	ldrb.w	ip, [r2, r0]
900022e6:	78ff      	ldrb	r7, [r7, #3]
900022e8:	1850      	adds	r0, r2, r1
900022ea:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
900022ee:	ea43 030c 	orr.w	r3, r3, ip
900022f2:	ea43 6307 	orr.w	r3, r3, r7, lsl #24
        videoInfo.number_of_frames = getU32(offset + 16);
900022f6:	60ab      	str	r3, [r5, #8]
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
900022f8:	7883      	ldrb	r3, [r0, #2]
900022fa:	7847      	ldrb	r7, [r0, #1]
900022fc:	041b      	lsls	r3, r3, #16
900022fe:	5c51      	ldrb	r1, [r2, r1]
90002300:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
90002304:	430b      	orrs	r3, r1
90002306:	78c1      	ldrb	r1, [r0, #3]
90002308:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
9000230c:	1991      	adds	r1, r2, r6
        videoInfo.frame_width = getU32(offset + 32);
9000230e:	60eb      	str	r3, [r5, #12]
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
90002310:	788b      	ldrb	r3, [r1, #2]
90002312:	7848      	ldrb	r0, [r1, #1]
90002314:	041b      	lsls	r3, r3, #16
90002316:	5d92      	ldrb	r2, [r2, r6]
90002318:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
9000231c:	4313      	orrs	r3, r2
9000231e:	78ca      	ldrb	r2, [r1, #3]
90002320:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
        videoInfo.frame_height = getU32(offset + 36);
90002324:	612b      	str	r3, [r5, #16]
    if (reader != 0)
90002326:	e6d5      	b.n	900020d4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xe8>
            lastError = AVI_ERROR_EOF_REACHED;
90002328:	230d      	movs	r3, #13
9000232a:	469a      	mov	sl, r3
9000232c:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
90002330:	e6e5      	b.n	900020fe <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x112>
90002332:	bf00      	nop
90002334:	900241d4 	.word	0x900241d4
90002338:	9002428c 	.word	0x9002428c
9000233c:	90024284 	.word	0x90024284
90002340:	90024258 	.word	0x90024258
90002344:	9002426c 	.word	0x9002426c
90002348:	9002427c 	.word	0x9002427c
9000234c:	90024274 	.word	0x90024274
90002350:	10624dd3 	.word	0x10624dd3
    if (compare(currentMovieOffset, "RIFF", 4))
90002354:	4637      	mov	r7, r6
        src = (const char*)movieData + offset;
90002356:	f8d5 902c 	ldr.w	r9, [r5, #44]	@ 0x2c
    return strncmp(src, str, num);
9000235a:	2204      	movs	r2, #4
9000235c:	4946      	ldr	r1, [pc, #280]	@ (90002478 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x48c>)
        src = (const char*)movieData + offset;
9000235e:	eb09 0407 	add.w	r4, r9, r7
    return strncmp(src, str, num);
90002362:	4620      	mov	r0, r4
90002364:	f020 fefa 	bl	9002315c <strncmp>
    if (compare(currentMovieOffset, "RIFF", 4))
90002368:	2800      	cmp	r0, #0
9000236a:	d164      	bne.n	90002436 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x44a>
    currentMovieOffset += 8;
9000236c:	f107 0008 	add.w	r0, r7, #8
    return strncmp(src, str, num);
90002370:	2204      	movs	r2, #4
90002372:	4942      	ldr	r1, [pc, #264]	@ (9000247c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x490>)
    currentMovieOffset += 8;
90002374:	61a8      	str	r0, [r5, #24]
    return strncmp(src, str, num);
90002376:	4448      	add	r0, r9
90002378:	f020 fef0 	bl	9002315c <strncmp>
    if (compare(currentMovieOffset, "AVI ", 4))
9000237c:	2800      	cmp	r0, #0
9000237e:	d16e      	bne.n	9000245e <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x472>
    currentMovieOffset += 4;
90002380:	f107 0b0c 	add.w	fp, r7, #12
    return strncmp(src, str, num);
90002384:	2204      	movs	r2, #4
90002386:	493e      	ldr	r1, [pc, #248]	@ (90002480 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x494>)
90002388:	eb09 000b 	add.w	r0, r9, fp
    currentMovieOffset += 4;
9000238c:	f8c5 b018 	str.w	fp, [r5, #24]
    return strncmp(src, str, num);
90002390:	f020 fee4 	bl	9002315c <strncmp>
    if (compare(currentMovieOffset, "LIST", 4))
90002394:	4680      	mov	r8, r0
90002396:	2800      	cmp	r0, #0
90002398:	d157      	bne.n	9000244a <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x45e>
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
9000239a:	6924      	ldr	r4, [r4, #16]
    assert(aviListSize);
9000239c:	2c00      	cmp	r4, #0
9000239e:	d043      	beq.n	90002428 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x43c>
    uint32_t offset =  currentMovieOffset + 8;
900023a0:	f107 0014 	add.w	r0, r7, #20
    return strncmp(src, str, num);
900023a4:	2204      	movs	r2, #4
900023a6:	4937      	ldr	r1, [pc, #220]	@ (90002484 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x498>)
900023a8:	4448      	add	r0, r9
900023aa:	f020 fed7 	bl	9002315c <strncmp>
    if (compare(offset, "hdrl", 4))
900023ae:	b970      	cbnz	r0, 900023ce <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x3e2>
    offset += 4;
900023b0:	f107 0018 	add.w	r0, r7, #24
    bool foundFrame = true;
900023b4:	f04f 0801 	mov.w	r8, #1
        src = (const char*)movieData + offset;
900023b8:	4448      	add	r0, r9
900023ba:	f04f 0a00 	mov.w	sl, #0
900023be:	e679      	b.n	900020b4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xc8>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
900023c0:	f895 a040 	ldrb.w	sl, [r5, #64]	@ 0x40
900023c4:	e69d      	b.n	90002102 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x116>
            lastError = AVI_ERROR_EOF_REACHED;
900023c6:	230d      	movs	r3, #13
900023c8:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
900023cc:	e73e      	b.n	9000224c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x260>
        lastError = AVI_ERROR_AVI_HDRL_NOT_FOUND;
900023ce:	2306      	movs	r3, #6
    offset += 4;
900023d0:	f107 0018 	add.w	r0, r7, #24
        lastError = AVI_ERROR_AVI_HDRL_NOT_FOUND;
900023d4:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
    if (reader != 0)
900023d8:	e7ee      	b.n	900023b8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x3cc>
900023da:	6aea      	ldr	r2, [r5, #44]	@ 0x2c
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
900023dc:	f895 a040 	ldrb.w	sl, [r5, #64]	@ 0x40
        videoInfo.ms_between_frames = getU32(offset) / 1000;
900023e0:	58d1      	ldr	r1, [r2, r3]
900023e2:	19d3      	adds	r3, r2, r7
900023e4:	4a28      	ldr	r2, [pc, #160]	@ (90002488 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x49c>)
900023e6:	fba2 1201 	umull	r1, r2, r2, r1
900023ea:	0992      	lsrs	r2, r2, #6
900023ec:	606a      	str	r2, [r5, #4]
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
900023ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
        videoInfo.number_of_frames = getU32(offset + 16);
900023f0:	60aa      	str	r2, [r5, #8]
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
900023f2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
        videoInfo.frame_width = getU32(offset + 32);
900023f4:	60ea      	str	r2, [r5, #12]
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
900023f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
        videoInfo.frame_height = getU32(offset + 36);
900023f8:	612b      	str	r3, [r5, #16]
    if (reader != 0)
900023fa:	e682      	b.n	90002102 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x116>
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
900023fc:	230b      	movs	r3, #11
900023fe:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
}
90002402:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
90002406:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
90002408:	5903      	ldr	r3, [r0, r4]
9000240a:	443b      	add	r3, r7
9000240c:	626b      	str	r3, [r5, #36]	@ 0x24
    listOffset += listSize;
9000240e:	5904      	ldr	r4, [r0, r4]
90002410:	443c      	add	r4, r7
        src = (const char*)movieData + offset;
90002412:	4420      	add	r0, r4
90002414:	e720      	b.n	90002258 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x26c>
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
90002416:	2009      	movs	r0, #9
            assert(!"Buffer to small");
90002418:	4b1c      	ldr	r3, [pc, #112]	@ (9000248c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4a0>)
9000241a:	4a1d      	ldr	r2, [pc, #116]	@ (90002490 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4a4>)
9000241c:	21a7      	movs	r1, #167	@ 0xa7
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
9000241e:	f885 0040 	strb.w	r0, [r5, #64]	@ 0x40
            assert(!"Buffer to small");
90002422:	481c      	ldr	r0, [pc, #112]	@ (90002494 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4a8>)
90002424:	f020 fbf6 	bl	90022c14 <__assert_func>
    assert(aviListSize);
90002428:	4b1b      	ldr	r3, [pc, #108]	@ (90002498 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4ac>)
9000242a:	f44f 71a5 	mov.w	r1, #330	@ 0x14a
9000242e:	4a1b      	ldr	r2, [pc, #108]	@ (9000249c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4b0>)
90002430:	4818      	ldr	r0, [pc, #96]	@ (90002494 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4a8>)
90002432:	f020 fbef 	bl	90022c14 <__assert_func>
        lastError = AVI_ERROR_NOT_RIFF;
90002436:	2003      	movs	r0, #3
        assert(!"RIFF header not found");
90002438:	4b19      	ldr	r3, [pc, #100]	@ (900024a0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4b4>)
9000243a:	4a18      	ldr	r2, [pc, #96]	@ (9000249c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4b0>)
9000243c:	f240 1135 	movw	r1, #309	@ 0x135
        lastError = AVI_ERROR_NOT_RIFF;
90002440:	f885 0040 	strb.w	r0, [r5, #64]	@ 0x40
        assert(!"RIFF header not found");
90002444:	4813      	ldr	r0, [pc, #76]	@ (90002494 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4a8>)
90002446:	f020 fbe5 	bl	90022c14 <__assert_func>
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
9000244a:	2005      	movs	r0, #5
        assert(!"AVI LIST not found");
9000244c:	4b15      	ldr	r3, [pc, #84]	@ (900024a4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4b8>)
9000244e:	4a13      	ldr	r2, [pc, #76]	@ (9000249c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4b0>)
90002450:	f44f 71a2 	mov.w	r1, #324	@ 0x144
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
90002454:	f885 0040 	strb.w	r0, [r5, #64]	@ 0x40
        assert(!"AVI LIST not found");
90002458:	480e      	ldr	r0, [pc, #56]	@ (90002494 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4a8>)
9000245a:	f020 fbdb 	bl	90022c14 <__assert_func>
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
9000245e:	2004      	movs	r0, #4
        assert(!"AVI header not found");
90002460:	4b11      	ldr	r3, [pc, #68]	@ (900024a8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4bc>)
90002462:	4a0e      	ldr	r2, [pc, #56]	@ (9000249c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4b0>)
90002464:	f240 113d 	movw	r1, #317	@ 0x13d
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
90002468:	f885 0040 	strb.w	r0, [r5, #64]	@ 0x40
        assert(!"AVI header not found");
9000246c:	4809      	ldr	r0, [pc, #36]	@ (90002494 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4a8>)
9000246e:	f020 fbd1 	bl	90022c14 <__assert_func>
        src = (const char*)movieData + offset;
90002472:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
90002474:	4420      	add	r0, r4
90002476:	e6ef      	b.n	90002258 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x26c>
90002478:	900241d4 	.word	0x900241d4
9000247c:	9002428c 	.word	0x9002428c
90002480:	90024284 	.word	0x90024284
90002484:	90024258 	.word	0x90024258
90002488:	10624dd3 	.word	0x10624dd3
9000248c:	900240a0 	.word	0x900240a0
90002490:	900240b4 	.word	0x900240b4
90002494:	9002404c 	.word	0x9002404c
90002498:	90024260 	.word	0x90024260
9000249c:	900241f8 	.word	0x900241f8
900024a0:	900241dc 	.word	0x900241dc
900024a4:	90024240 	.word	0x90024240
900024a8:	90024228 	.word	0x90024228

900024ac <_ZN20HardwareMJPEGDecoder12setVideoDataEPKhm>:
{
900024ac:	b410      	push	{r4}
    reader = 0; //not using reader
900024ae:	2400      	movs	r4, #0
    movieLength = length;
900024b0:	e9c0 210a 	strd	r2, r1, [r0, #40]	@ 0x28
    reader = 0; //not using reader
900024b4:	6304      	str	r4, [r0, #48]	@ 0x30
}
900024b6:	f85d 4b04 	ldr.w	r4, [sp], #4
    readVideoHeader();
900024ba:	f7ff bd97 	b.w	90001fec <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>
900024be:	bf00      	nop

900024c0 <_ZN20HardwareMJPEGDecoder12setVideoDataERN8touchgfx15VideoDataReaderE>:
{
900024c0:	b510      	push	{r4, lr}
    movieLength = reader.getDataLength();
900024c2:	680b      	ldr	r3, [r1, #0]
{
900024c4:	4604      	mov	r4, r0
    movieData = 0;
900024c6:	2200      	movs	r2, #0
    movieLength = reader.getDataLength();
900024c8:	4608      	mov	r0, r1
900024ca:	689b      	ldr	r3, [r3, #8]
    movieData = 0;
900024cc:	e9c4 210b 	strd	r2, r1, [r4, #44]	@ 0x2c
    movieLength = reader.getDataLength();
900024d0:	4798      	blx	r3
900024d2:	4603      	mov	r3, r0
    readVideoHeader();
900024d4:	4620      	mov	r0, r4
    movieLength = reader.getDataLength();
900024d6:	62a3      	str	r3, [r4, #40]	@ 0x28
}
900024d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    readVideoHeader();
900024dc:	f7ff bd86 	b.w	90001fec <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>

900024e0 <HAL_JPEG_InfoReadyCallback>:
    {
900024e0:	b508      	push	{r3, lr}
        if (pInfo->ChromaSubsampling == JPEG_420_SUBSAMPLING)
900024e2:	684b      	ldr	r3, [r1, #4]
    {
900024e4:	4608      	mov	r0, r1
        if (pInfo->ChromaSubsampling == JPEG_420_SUBSAMPLING)
900024e6:	2b01      	cmp	r3, #1
900024e8:	d01a      	beq.n	90002520 <HAL_JPEG_InfoReadyCallback+0x40>
            if (pInfo->ChromaSubsampling == JPEG_422_SUBSAMPLING)
900024ea:	2b02      	cmp	r3, #2
900024ec:	d010      	beq.n	90002510 <HAL_JPEG_InfoReadyCallback+0x30>
            if (pInfo->ChromaSubsampling == JPEG_444_SUBSAMPLING)
900024ee:	b94b      	cbnz	r3, 90002504 <HAL_JPEG_InfoReadyCallback+0x24>
                if ((pInfo->ImageWidth % 8) != 0)
900024f0:	68cb      	ldr	r3, [r1, #12]
900024f2:	0759      	lsls	r1, r3, #29
900024f4:	d12f      	bne.n	90002556 <HAL_JPEG_InfoReadyCallback+0x76>
                if ((pInfo->ImageHeight % 8) != 0)
900024f6:	6883      	ldr	r3, [r0, #8]
900024f8:	075a      	lsls	r2, r3, #29
900024fa:	d003      	beq.n	90002504 <HAL_JPEG_InfoReadyCallback+0x24>
                    pInfo->ImageHeight += (8 - (pInfo->ImageHeight % 8));
900024fc:	f023 0307 	bic.w	r3, r3, #7
90002500:	3308      	adds	r3, #8
90002502:	6083      	str	r3, [r0, #8]
            HAL_StatusTypeDef status = JPEG_GetDecodeColorConvertFunc(pInfo, &pConvert_Function, &MCU_TotalNb);
90002504:	4a1a      	ldr	r2, [pc, #104]	@ (90002570 <HAL_JPEG_InfoReadyCallback+0x90>)
90002506:	491b      	ldr	r1, [pc, #108]	@ (90002574 <HAL_JPEG_InfoReadyCallback+0x94>)
90002508:	f00d fd54 	bl	9000ffb4 <JPEG_GetDecodeColorConvertFunc>
            if (status != HAL_OK)
9000250c:	bb40      	cbnz	r0, 90002560 <HAL_JPEG_InfoReadyCallback+0x80>
    }
9000250e:	bd08      	pop	{r3, pc}
                if ((pInfo->ImageWidth % 16) != 0)
90002510:	68cb      	ldr	r3, [r1, #12]
90002512:	071a      	lsls	r2, r3, #28
90002514:	d0ef      	beq.n	900024f6 <HAL_JPEG_InfoReadyCallback+0x16>
                    pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
90002516:	f023 030f 	bic.w	r3, r3, #15
9000251a:	3310      	adds	r3, #16
9000251c:	60cb      	str	r3, [r1, #12]
9000251e:	e7ea      	b.n	900024f6 <HAL_JPEG_InfoReadyCallback+0x16>
            if ((pInfo->ImageWidth % 16) != 0)
90002520:	68cb      	ldr	r3, [r1, #12]
90002522:	071a      	lsls	r2, r3, #28
90002524:	d003      	beq.n	9000252e <HAL_JPEG_InfoReadyCallback+0x4e>
                pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
90002526:	f023 030f 	bic.w	r3, r3, #15
9000252a:	3310      	adds	r3, #16
9000252c:	60cb      	str	r3, [r1, #12]
            if ((pInfo->ImageHeight % 16) != 0)
9000252e:	6883      	ldr	r3, [r0, #8]
90002530:	0719      	lsls	r1, r3, #28
90002532:	d003      	beq.n	9000253c <HAL_JPEG_InfoReadyCallback+0x5c>
                pInfo->ImageHeight += (16 - (pInfo->ImageHeight % 16));
90002534:	f023 030f 	bic.w	r3, r3, #15
90002538:	3310      	adds	r3, #16
9000253a:	6083      	str	r3, [r0, #8]
            HAL_StatusTypeDef status = TGFX_JPEG_GetDecodeColorConvertFunc(pInfo, &pConvert_Function, &MCU_TotalNb);
9000253c:	4a0c      	ldr	r2, [pc, #48]	@ (90002570 <HAL_JPEG_InfoReadyCallback+0x90>)
9000253e:	490d      	ldr	r1, [pc, #52]	@ (90002574 <HAL_JPEG_InfoReadyCallback+0x94>)
90002540:	f001 ff06 	bl	90004350 <TGFX_JPEG_GetDecodeColorConvertFunc>
            if (status != HAL_OK)
90002544:	2800      	cmp	r0, #0
90002546:	d0e2      	beq.n	9000250e <HAL_JPEG_InfoReadyCallback+0x2e>
                assert(status == HAL_OK);
90002548:	4b0b      	ldr	r3, [pc, #44]	@ (90002578 <HAL_JPEG_InfoReadyCallback+0x98>)
9000254a:	f240 2131 	movw	r1, #561	@ 0x231
9000254e:	4a0b      	ldr	r2, [pc, #44]	@ (9000257c <HAL_JPEG_InfoReadyCallback+0x9c>)
90002550:	480b      	ldr	r0, [pc, #44]	@ (90002580 <HAL_JPEG_InfoReadyCallback+0xa0>)
90002552:	f020 fb5f 	bl	90022c14 <__assert_func>
                    pInfo->ImageWidth += (8 - (pInfo->ImageWidth % 8));
90002556:	f023 0307 	bic.w	r3, r3, #7
9000255a:	3308      	adds	r3, #8
9000255c:	60c3      	str	r3, [r0, #12]
9000255e:	e7ca      	b.n	900024f6 <HAL_JPEG_InfoReadyCallback+0x16>
                assert(status == HAL_OK);
90002560:	4b05      	ldr	r3, [pc, #20]	@ (90002578 <HAL_JPEG_InfoReadyCallback+0x98>)
90002562:	f240 2153 	movw	r1, #595	@ 0x253
90002566:	4a05      	ldr	r2, [pc, #20]	@ (9000257c <HAL_JPEG_InfoReadyCallback+0x9c>)
90002568:	4805      	ldr	r0, [pc, #20]	@ (90002580 <HAL_JPEG_InfoReadyCallback+0xa0>)
9000256a:	f020 fb53 	bl	90022c14 <__assert_func>
9000256e:	bf00      	nop
90002570:	24005eb4 	.word	0x24005eb4
90002574:	24005eb0 	.word	0x24005eb0
90002578:	90024294 	.word	0x90024294
9000257c:	900242a8 	.word	0x900242a8
90002580:	9002404c 	.word	0x9002404c

90002584 <HAL_JPEG_GetDataCallback>:
    {
90002584:	b410      	push	{r4}
        JPEG_InputImageIndex += NbDecodedData;
90002586:	4c0c      	ldr	r4, [pc, #48]	@ (900025b8 <HAL_JPEG_GetDataCallback+0x34>)
        if (JPEG_InputImageIndex < JPEG_InputImageSize_Bytes)
90002588:	4a0c      	ldr	r2, [pc, #48]	@ (900025bc <HAL_JPEG_GetDataCallback+0x38>)
        JPEG_InputImageIndex += NbDecodedData;
9000258a:	6823      	ldr	r3, [r4, #0]
        if (JPEG_InputImageIndex < JPEG_InputImageSize_Bytes)
9000258c:	6812      	ldr	r2, [r2, #0]
        JPEG_InputImageIndex += NbDecodedData;
9000258e:	440b      	add	r3, r1
        if (JPEG_InputImageIndex < JPEG_InputImageSize_Bytes)
90002590:	4293      	cmp	r3, r2
        JPEG_InputImageIndex += NbDecodedData;
90002592:	6023      	str	r3, [r4, #0]
        if (JPEG_InputImageIndex < JPEG_InputImageSize_Bytes)
90002594:	d302      	bcc.n	9000259c <HAL_JPEG_GetDataCallback+0x18>
    }
90002596:	f85d 4b04 	ldr.w	r4, [sp], #4
9000259a:	4770      	bx	lr
            uint32_t inDataLength = JPEG_InputImageSize_Bytes - JPEG_InputImageIndex;
9000259c:	1ad2      	subs	r2, r2, r3
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
9000259e:	4b08      	ldr	r3, [pc, #32]	@ (900025c0 <HAL_JPEG_GetDataCallback+0x3c>)
900025a0:	681c      	ldr	r4, [r3, #0]
            HAL_JPEG_ConfigInputBuffer(hjpeg, (uint8_t*)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
900025a2:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
900025a6:	4421      	add	r1, r4
            HAL_JPEG_ConfigInputBuffer(hjpeg, (uint8_t*)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
900025a8:	bf28      	it	cs
900025aa:	f44f 3280 	movcs.w	r2, #65536	@ 0x10000
    }
900025ae:	f85d 4b04 	ldr.w	r4, [sp], #4
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
900025b2:	6019      	str	r1, [r3, #0]
            HAL_JPEG_ConfigInputBuffer(hjpeg, (uint8_t*)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
900025b4:	f006 bbd2 	b.w	90008d5c <HAL_JPEG_ConfigInputBuffer>
900025b8:	24005edc 	.word	0x24005edc
900025bc:	24005ed8 	.word	0x24005ed8
900025c0:	24005ed4 	.word	0x24005ed4

900025c4 <HAL_JPEG_DataReadyCallback>:
    {
900025c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
900025c6:	4e1b      	ldr	r6, [pc, #108]	@ (90002634 <HAL_JPEG_DataReadyCallback+0x70>)
    {
900025c8:	4605      	mov	r5, r0
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
900025ca:	6833      	ldr	r3, [r6, #0]
        JPEG_OUT_Write_BufferIndex++;
900025cc:	1c59      	adds	r1, r3, #1
        if (JPEG_OUT_Write_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
900025ce:	2901      	cmp	r1, #1
900025d0:	d923      	bls.n	9000261a <HAL_JPEG_DataReadyCallback+0x56>
900025d2:	2000      	movs	r0, #0
900025d4:	4601      	mov	r1, r0
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
900025d6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
900025da:	4c17      	ldr	r4, [pc, #92]	@ (90002638 <HAL_JPEG_DataReadyCallback+0x74>)
900025dc:	2701      	movs	r7, #1
        JPEG_OUT_Write_BufferIndex++;
900025de:	6030      	str	r0, [r6, #0]
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
900025e0:	009b      	lsls	r3, r3, #2
900025e2:	54e7      	strb	r7, [r4, r3]
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBufferSize = OutDataLength;
900025e4:	4423      	add	r3, r4
900025e6:	609a      	str	r2, [r3, #8]
        if (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State != JPEG_BUFFER_EMPTY)
900025e8:	eb01 0341 	add.w	r3, r1, r1, lsl #1
900025ec:	f814 2023 	ldrb.w	r2, [r4, r3, lsl #2]
900025f0:	fa01 f307 	lsl.w	r3, r1, r7
900025f4:	b99a      	cbnz	r2, 9000261e <HAL_JPEG_DataReadyCallback+0x5a>
        HAL_JPEG_ConfigOutputBuffer(hjpeg, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
900025f6:	4a11      	ldr	r2, [pc, #68]	@ (9000263c <HAL_JPEG_DataReadyCallback+0x78>)
900025f8:	440b      	add	r3, r1
900025fa:	4628      	mov	r0, r5
900025fc:	68d2      	ldr	r2, [r2, #12]
900025fe:	eb04 0483 	add.w	r4, r4, r3, lsl #2
90002602:	eb02 0242 	add.w	r2, r2, r2, lsl #1
90002606:	6861      	ldr	r1, [r4, #4]
90002608:	01d2      	lsls	r2, r2, #7
9000260a:	f006 fbab 	bl	90008d64 <HAL_JPEG_ConfigOutputBuffer>
        SEM_POST(semDecodingDone);
9000260e:	4b0c      	ldr	r3, [pc, #48]	@ (90002640 <HAL_JPEG_DataReadyCallback+0x7c>)
90002610:	6818      	ldr	r0, [r3, #0]
    }
90002612:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        SEM_POST(semDecodingDone);
90002616:	f00a b8db 	b.w	9000c7d0 <osSemaphoreRelease>
        if (JPEG_OUT_Write_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
9000261a:	4608      	mov	r0, r1
9000261c:	e7db      	b.n	900025d6 <HAL_JPEG_DataReadyCallback+0x12>
            HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
9000261e:	2102      	movs	r1, #2
90002620:	4628      	mov	r0, r5
90002622:	f006 fb63 	bl	90008cec <HAL_JPEG_Pause>
            Output_Is_Paused = 1;
90002626:	4b07      	ldr	r3, [pc, #28]	@ (90002644 <HAL_JPEG_DataReadyCallback+0x80>)
        HAL_JPEG_ConfigOutputBuffer(hjpeg, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90002628:	6831      	ldr	r1, [r6, #0]
            Output_Is_Paused = 1;
9000262a:	601f      	str	r7, [r3, #0]
9000262c:	fa01 f307 	lsl.w	r3, r1, r7
90002630:	e7e1      	b.n	900025f6 <HAL_JPEG_DataReadyCallback+0x32>
90002632:	bf00      	nop
90002634:	24005ec8 	.word	0x24005ec8
90002638:	24000004 	.word	0x24000004
9000263c:	24005e70 	.word	0x24005e70
90002640:	24005ea8 	.word	0x24005ea8
90002644:	24005ec4 	.word	0x24005ec4

90002648 <HAL_JPEG_ErrorCallback>:
  __ASM volatile ("cpsid i" : : : "memory");
90002648:	b672      	cpsid	i
        while (1)
9000264a:	e7fe      	b.n	9000264a <HAL_JPEG_ErrorCallback+0x2>

9000264c <HAL_JPEG_DecodeCpltCallback>:
        Jpeg_HWDecodingEnd = 1;
9000264c:	4b01      	ldr	r3, [pc, #4]	@ (90002654 <HAL_JPEG_DecodeCpltCallback+0x8>)
9000264e:	2201      	movs	r2, #1
90002650:	601a      	str	r2, [r3, #0]
    }
90002652:	4770      	bx	lr
90002654:	24005ed0 	.word	0x24005ed0

90002658 <DMA2D_CopyBuffer>:
  * @brief  Configures external DMA2D job to copy YCbCr data to RGB buffer(s)
  * @param job: External job reference
  * @retval None
  */
void DMA2D_CopyBuffer(External_DMA2D_JobTypeDef& job)
{
90002658:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint32_t xRef, yRef, refline;

    xRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
9000265a:	491b      	ldr	r1, [pc, #108]	@ (900026c8 <DMA2D_CopyBuffer+0x70>)
    yRef = ((job.MCU_index * MCU_WIDTH_PIXELS) % JPEG_ConvertorParams.WidthExtend);

    refline = (JPEG_ConvertorParams.ScaledWidth) * xRef + (JPEG_ConvertorParams.bytes_pr_pixel * yRef);

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB565);
9000265c:	2302      	movs	r3, #2
    xRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
9000265e:	6806      	ldr	r6, [r0, #0]
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB565);
90002660:	4d1a      	ldr	r5, [pc, #104]	@ (900026cc <DMA2D_CopyBuffer+0x74>)
    xRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
90002662:	680a      	ldr	r2, [r1, #0]
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB565);
90002664:	636b      	str	r3, [r5, #52]	@ 0x34
    xRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
90002666:	0133      	lsls	r3, r6, #4

    /* Configure DMA2D data size */
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line)) // Last line of frame
90002668:	4c19      	ldr	r4, [pc, #100]	@ (900026d0 <DMA2D_CopyBuffer+0x78>)
    refline = (JPEG_ConvertorParams.ScaledWidth) * xRef + (JPEG_ConvertorParams.bytes_pr_pixel * yRef);
9000266a:	690f      	ldr	r7, [r1, #16]
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line)) // Last line of frame
9000266c:	6824      	ldr	r4, [r4, #0]
    xRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
9000266e:	fbb3 fcf2 	udiv	ip, r3, r2
    yRef = ((job.MCU_index * MCU_WIDTH_PIXELS) % JPEG_ConvertorParams.WidthExtend);
90002672:	fb02 321c 	mls	r2, r2, ip, r3
    refline = (JPEG_ConvertorParams.ScaledWidth) * xRef + (JPEG_ConvertorParams.bytes_pr_pixel * yRef);
90002676:	684b      	ldr	r3, [r1, #4]
90002678:	fb03 fc0c 	mul.w	ip, r3, ip
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line)) // Last line of frame
9000267c:	68cb      	ldr	r3, [r1, #12]
    refline = (JPEG_ConvertorParams.ScaledWidth) * xRef + (JPEG_ConvertorParams.bytes_pr_pixel * yRef);
9000267e:	fb07 f202 	mul.w	r2, r7, r2
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line)) // Last line of frame
90002682:	1ae4      	subs	r4, r4, r3
    refline = (JPEG_ConvertorParams.ScaledWidth) * xRef + (JPEG_ConvertorParams.bytes_pr_pixel * yRef);
90002684:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
    {
        WRITE_REG(DMA2D->NLR, (JPEG_ConvertorParams.LastLineHeight | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
90002688:	ea4f 5e03 	mov.w	lr, r3, lsl #20
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line)) // Last line of frame
9000268c:	42a6      	cmp	r6, r4
9000268e:	d317      	bcc.n	900026c0 <DMA2D_CopyBuffer+0x68>
        WRITE_REG(DMA2D->NLR, (JPEG_ConvertorParams.LastLineHeight | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
90002690:	6889      	ldr	r1, [r1, #8]
90002692:	ea4e 0101 	orr.w	r1, lr, r1
90002696:	6469      	str	r1, [r5, #68]	@ 0x44
    {
        WRITE_REG(DMA2D->NLR, (MCU_HEIGHT_PIXELS | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
    }

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, (reinterpret_cast<uint32_t>(FrameBufferAddress) + refline));
90002698:	490e      	ldr	r1, [pc, #56]	@ (900026d4 <DMA2D_CopyBuffer+0x7c>)

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, 480 - (MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line));
9000269a:	f1c3 031e 	rsb	r3, r3, #30

    /* DMA2D FGPFCCR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_YCBCR | (DMA2D_CSS_420 << DMA2D_FGPFCCR_CSS_Pos) | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (0xFFU << DMA2D_FGPFCCR_ALPHA_Pos));

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(job.jpeg_buffer->DataBuffer));
9000269e:	6840      	ldr	r0, [r0, #4]
    WRITE_REG(DMA2D->FGOR, 0);
900026a0:	2400      	movs	r4, #0
    WRITE_REG(DMA2D->OMAR, (reinterpret_cast<uint32_t>(FrameBufferAddress) + refline));
900026a2:	6809      	ldr	r1, [r1, #0]
    WRITE_REG(DMA2D->OOR, 480 - (MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line));
900026a4:	011b      	lsls	r3, r3, #4
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(job.jpeg_buffer->DataBuffer));
900026a6:	6840      	ldr	r0, [r0, #4]
    WRITE_REG(DMA2D->OMAR, (reinterpret_cast<uint32_t>(FrameBufferAddress) + refline));
900026a8:	4411      	add	r1, r2
900026aa:	4a08      	ldr	r2, [pc, #32]	@ (900026cc <DMA2D_CopyBuffer+0x74>)
900026ac:	4461      	add	r1, ip
900026ae:	63d1      	str	r1, [r2, #60]	@ 0x3c
    WRITE_REG(DMA2D->OOR, 480 - (MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line));
900026b0:	6413      	str	r3, [r2, #64]	@ 0x40
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_YCBCR | (DMA2D_CSS_420 << DMA2D_FGPFCCR_CSS_Pos) | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (0xFFU << DMA2D_FGPFCCR_ALPHA_Pos));
900026b2:	4909      	ldr	r1, [pc, #36]	@ (900026d8 <DMA2D_CopyBuffer+0x80>)

    /* Configure DMA2D contol register */
    WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
900026b4:	4b09      	ldr	r3, [pc, #36]	@ (900026dc <DMA2D_CopyBuffer+0x84>)
    WRITE_REG(DMA2D->FGOR, 0);
900026b6:	6114      	str	r4, [r2, #16]
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_YCBCR | (DMA2D_CSS_420 << DMA2D_FGPFCCR_CSS_Pos) | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (0xFFU << DMA2D_FGPFCCR_ALPHA_Pos));
900026b8:	61d1      	str	r1, [r2, #28]
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(job.jpeg_buffer->DataBuffer));
900026ba:	60d0      	str	r0, [r2, #12]
    WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
900026bc:	6013      	str	r3, [r2, #0]
}
900026be:	bdf0      	pop	{r4, r5, r6, r7, pc}
        WRITE_REG(DMA2D->NLR, (MCU_HEIGHT_PIXELS | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
900026c0:	f04e 0110 	orr.w	r1, lr, #16
900026c4:	6469      	str	r1, [r5, #68]	@ 0x44
900026c6:	e7e7      	b.n	90002698 <DMA2D_CopyBuffer+0x40>
900026c8:	24005e70 	.word	0x24005e70
900026cc:	52001000 	.word	0x52001000
900026d0:	24005eb4 	.word	0x24005eb4
900026d4:	24005ee0 	.word	0x24005ee0
900026d8:	ff09000b 	.word	0xff09000b
900026dc:	00010201 	.word	0x00010201

900026e0 <DMA2D_ExternalJobCompleted>:
  * @retval None
  */
void DMA2D_ExternalJobCompleted(External_DMA2D_JobTypeDef& job)
{
    // Mark ycbcr empty
    job.jpeg_buffer->State = JPEG_BUFFER_EMPTY;
900026e0:	2200      	movs	r2, #0
900026e2:	6843      	ldr	r3, [r0, #4]
        return count_ == 0;
900026e4:	490b      	ldr	r1, [pc, #44]	@ (90002714 <DMA2D_ExternalJobCompleted+0x34>)
900026e6:	701a      	strb	r2, [r3, #0]
    job.jpeg_buffer->DataBufferSize = 0;

    // Mark dma paused if queue is empty
    if (external_queue.is_empty())
900026e8:	68c9      	ldr	r1, [r1, #12]
    job.jpeg_buffer->DataBufferSize = 0;
900026ea:	609a      	str	r2, [r3, #8]
    if (external_queue.is_empty())
900026ec:	b911      	cbnz	r1, 900026f4 <DMA2D_ExternalJobCompleted+0x14>
    {
        DMA2D_output_Is_Paused = 1;
900026ee:	4b0a      	ldr	r3, [pc, #40]	@ (90002718 <DMA2D_ExternalJobCompleted+0x38>)
900026f0:	2201      	movs	r2, #1
900026f2:	601a      	str	r2, [r3, #0]
    }

    // Check if last line
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))
900026f4:	4b09      	ldr	r3, [pc, #36]	@ (9000271c <DMA2D_ExternalJobCompleted+0x3c>)
900026f6:	490a      	ldr	r1, [pc, #40]	@ (90002720 <DMA2D_ExternalJobCompleted+0x40>)
900026f8:	681b      	ldr	r3, [r3, #0]
900026fa:	68c9      	ldr	r1, [r1, #12]
900026fc:	6802      	ldr	r2, [r0, #0]
900026fe:	1a5b      	subs	r3, r3, r1
90002700:	429a      	cmp	r2, r3
90002702:	d302      	bcc.n	9000270a <DMA2D_ExternalJobCompleted+0x2a>
    {
        DMA2D_CopyBufferEnd = 1;
90002704:	4b07      	ldr	r3, [pc, #28]	@ (90002724 <DMA2D_ExternalJobCompleted+0x44>)
90002706:	2201      	movs	r2, #1
90002708:	601a      	str	r2, [r3, #0]
    }

    // Signal Hardware Decoding to wake up
    SEM_POST(semDecodingDone);
9000270a:	4b07      	ldr	r3, [pc, #28]	@ (90002728 <DMA2D_ExternalJobCompleted+0x48>)
9000270c:	6818      	ldr	r0, [r3, #0]
9000270e:	f00a b85f 	b.w	9000c7d0 <osSemaphoreRelease>
90002712:	bf00      	nop
90002714:	24005e88 	.word	0x24005e88
90002718:	24005ebc 	.word	0x24005ebc
9000271c:	24005eb4 	.word	0x24005eb4
90002720:	24005e70 	.word	0x24005e70
90002724:	24005ec0 	.word	0x24005ec0
90002728:	24005ea8 	.word	0x24005ea8
9000272c:	00000000 	.word	0x00000000

90002730 <_GLOBAL__sub_I_FrameBufferAddress>:
        : max_size_(Size), head_(0), tail_(0), count_(0)
90002730:	ed9f 7b05 	vldr	d7, [pc, #20]	@ 90002748 <_GLOBAL__sub_I_FrameBufferAddress+0x18>
90002734:	4b06      	ldr	r3, [pc, #24]	@ (90002750 <_GLOBAL__sub_I_FrameBufferAddress+0x20>)
90002736:	2000      	movs	r0, #0
90002738:	2100      	movs	r1, #0
9000273a:	ed83 7b00 	vstr	d7, [r3]
9000273e:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
90002742:	4770      	bx	lr
90002744:	f3af 8000 	nop.w
90002748:	00000002 	.word	0x00000002
9000274c:	00000000 	.word	0x00000000
90002750:	24005e88 	.word	0x24005e88

90002754 <_ZN8touchgfx10OSWrappers10initializeEv>:
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
90002754:	2101      	movs	r1, #1
90002756:	2200      	movs	r2, #0
{
90002758:	b508      	push	{r3, lr}
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
9000275a:	4608      	mov	r0, r1
9000275c:	f009 ffba 	bl	9000c6d4 <osSemaphoreNew>
90002760:	4b0b      	ldr	r3, [pc, #44]	@ (90002790 <_ZN8touchgfx10OSWrappers10initializeEv+0x3c>)
90002762:	6018      	str	r0, [r3, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
90002764:	b140      	cbz	r0, 90002778 <_ZN8touchgfx10OSWrappers10initializeEv+0x24>

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
90002766:	2200      	movs	r2, #0
90002768:	2104      	movs	r1, #4
9000276a:	2001      	movs	r0, #1
9000276c:	f00a f85a 	bl	9000c824 <osMessageQueueNew>
90002770:	4b08      	ldr	r3, [pc, #32]	@ (90002794 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
90002772:	6018      	str	r0, [r3, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
90002774:	b130      	cbz	r0, 90002784 <_ZN8touchgfx10OSWrappers10initializeEv+0x30>
}
90002776:	bd08      	pop	{r3, pc}
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
90002778:	4b07      	ldr	r3, [pc, #28]	@ (90002798 <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
9000277a:	2128      	movs	r1, #40	@ 0x28
9000277c:	4a07      	ldr	r2, [pc, #28]	@ (9000279c <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
9000277e:	4808      	ldr	r0, [pc, #32]	@ (900027a0 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
90002780:	f020 fa48 	bl	90022c14 <__assert_func>
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
90002784:	4b07      	ldr	r3, [pc, #28]	@ (900027a4 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
90002786:	212c      	movs	r1, #44	@ 0x2c
90002788:	4a04      	ldr	r2, [pc, #16]	@ (9000279c <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
9000278a:	4805      	ldr	r0, [pc, #20]	@ (900027a0 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
9000278c:	f020 fa42 	bl	90022c14 <__assert_func>
90002790:	24005ee8 	.word	0x24005ee8
90002794:	24005ee4 	.word	0x24005ee4
90002798:	90024334 	.word	0x90024334
9000279c:	90024380 	.word	0x90024380
900027a0:	900243b0 	.word	0x900243b0
900027a4:	900243f8 	.word	0x900243f8

900027a8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:
/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
900027a8:	4b02      	ldr	r3, [pc, #8]	@ (900027b4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0xc>)
900027aa:	f04f 31ff 	mov.w	r1, #4294967295
900027ae:	6818      	ldr	r0, [r3, #0]
900027b0:	f009 bfdc 	b.w	9000c76c <osSemaphoreAcquire>
900027b4:	24005ee8 	.word	0x24005ee8

900027b8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:
/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
    osSemaphoreRelease(frame_buffer_sem);
900027b8:	4b01      	ldr	r3, [pc, #4]	@ (900027c0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x8>)
900027ba:	6818      	ldr	r0, [r3, #0]
900027bc:	f00a b808 	b.w	9000c7d0 <osSemaphoreRelease>
900027c0:	24005ee8 	.word	0x24005ee8

900027c4 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, 0);
900027c4:	4b02      	ldr	r3, [pc, #8]	@ (900027d0 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0xc>)
900027c6:	2100      	movs	r1, #0
900027c8:	6818      	ldr	r0, [r3, #0]
900027ca:	f009 bfcf 	b.w	9000c76c <osSemaphoreAcquire>
900027ce:	bf00      	nop
900027d0:	24005ee8 	.word	0x24005ee8

900027d4 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 * from ISR.
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
900027d4:	4b01      	ldr	r3, [pc, #4]	@ (900027dc <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x8>)
900027d6:	6818      	ldr	r0, [r3, #0]
900027d8:	f009 bffa 	b.w	9000c7d0 <osSemaphoreRelease>
900027dc:	24005ee8 	.word	0x24005ee8

900027e0 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
900027e0:	4803      	ldr	r0, [pc, #12]	@ (900027f0 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x10>)
900027e2:	2300      	movs	r3, #0
900027e4:	4903      	ldr	r1, [pc, #12]	@ (900027f4 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
900027e6:	461a      	mov	r2, r3
900027e8:	6800      	ldr	r0, [r0, #0]
900027ea:	f00a b857 	b.w	9000c89c <osMessageQueuePut>
900027ee:	bf00      	nop
900027f0:	24005ee4 	.word	0x24005ee4
900027f4:	2400001c 	.word	0x2400001c

900027f8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
900027f8:	b510      	push	{r4, lr}
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
900027fa:	2300      	movs	r3, #0
{
900027fc:	b082      	sub	sp, #8
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
900027fe:	4c07      	ldr	r4, [pc, #28]	@ (9000281c <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
90002800:	461a      	mov	r2, r3
90002802:	a901      	add	r1, sp, #4
90002804:	6820      	ldr	r0, [r4, #0]
90002806:	f00a f885 	bl	9000c914 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
9000280a:	f04f 33ff 	mov.w	r3, #4294967295
9000280e:	2200      	movs	r2, #0
90002810:	a901      	add	r1, sp, #4
90002812:	6820      	ldr	r0, [r4, #0]
90002814:	f00a f87e 	bl	9000c914 <osMessageQueueGet>
}
90002818:	b002      	add	sp, #8
9000281a:	bd10      	pop	{r4, pc}
9000281c:	24005ee4 	.word	0x24005ee4

90002820 <_ZN8touchgfx13DMA_Interface5flushEv>:
        waitForFrameBufferSemaphore();
90002820:	6803      	ldr	r3, [r0, #0]
90002822:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
90002824:	4718      	bx	r3
90002826:	bf00      	nop

90002828 <_ZN8STM32DMA10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
    {
        return touchgfx::DMA_TYPE_CHROMART;
    }
90002828:	2001      	movs	r0, #1
9000282a:	4770      	bx	lr

9000282c <_ZN8STM32DMAD1Ev>:
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0])), started_by_external_job(false), mutexIsRunning(0)
{
    mutexIsRunning = MUTEX_CREATE();
}

STM32DMA::~STM32DMA()
9000282c:	4905      	ldr	r1, [pc, #20]	@ (90002844 <_ZN8STM32DMAD1Ev+0x18>)
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
9000282e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
90002832:	4b05      	ldr	r3, [pc, #20]	@ (90002848 <_ZN8STM32DMAD1Ev+0x1c>)
90002834:	6001      	str	r1, [r0, #0]
90002836:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  __ASM volatile ("dsb 0xF":::"memory");
9000283a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
9000283e:	f3bf 8f6f 	isb	sy
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
}
90002842:	4770      	bx	lr
90002844:	9002459c 	.word	0x9002459c
90002848:	e000e100 	.word	0xe000e100

9000284c <_ZN8STM32DMA10initializeEv>:

void STM32DMA::initialize()
{
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
9000284c:	4b0f      	ldr	r3, [pc, #60]	@ (9000288c <_ZN8STM32DMA10initializeEv+0x40>)
{
9000284e:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_FORCE_RESET();
    __HAL_RCC_DMA2D_RELEASE_RESET();

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
90002850:	490f      	ldr	r1, [pc, #60]	@ (90002890 <_ZN8STM32DMA10initializeEv+0x44>)
    __HAL_RCC_DMA2D_CLK_ENABLE();
90002852:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
90002856:	480f      	ldr	r0, [pc, #60]	@ (90002894 <_ZN8STM32DMA10initializeEv+0x48>)
    __HAL_RCC_DMA2D_CLK_ENABLE();
90002858:	f042 0210 	orr.w	r2, r2, #16
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
9000285c:	6208      	str	r0, [r1, #32]
    __HAL_RCC_DMA2D_CLK_ENABLE();
9000285e:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
90002862:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
90002866:	f002 0210 	and.w	r2, r2, #16
9000286a:	9201      	str	r2, [sp, #4]
9000286c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
9000286e:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
90002870:	f042 0210 	orr.w	r2, r2, #16
90002874:	67da      	str	r2, [r3, #124]	@ 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
90002876:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
90002878:	f022 0210 	bic.w	r2, r2, #16
9000287c:	67da      	str	r2, [r3, #124]	@ 0x7c
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
9000287e:	4b06      	ldr	r3, [pc, #24]	@ (90002898 <_ZN8STM32DMA10initializeEv+0x4c>)
90002880:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
90002884:	609a      	str	r2, [r3, #8]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
}
90002886:	b002      	add	sp, #8
90002888:	4770      	bx	lr
9000288a:	bf00      	nop
9000288c:	58024400 	.word	0x58024400
90002890:	24005d7c 	.word	0x24005d7c
90002894:	90002c15 	.word	0x90002c15
90002898:	e000e100 	.word	0xe000e100

9000289c <_ZN8STM32DMA11getBlitCapsEv>:
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
}
9000289c:	f240 30ef 	movw	r0, #1007	@ 0x3ef
900028a0:	4770      	bx	lr
900028a2:	bf00      	nop

900028a4 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
900028a4:	4909      	ldr	r1, [pc, #36]	@ (900028cc <_ZN8STM32DMAD0Ev+0x28>)
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
900028a6:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
900028aa:	4b09      	ldr	r3, [pc, #36]	@ (900028d0 <_ZN8STM32DMAD0Ev+0x2c>)
900028ac:	b510      	push	{r4, lr}
900028ae:	6001      	str	r1, [r0, #0]
900028b0:	4604      	mov	r4, r0
900028b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  __ASM volatile ("dsb 0xF":::"memory");
900028b6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
900028ba:	f3bf 8f6f 	isb	sy
}
900028be:	f640 51a8 	movw	r1, #3496	@ 0xda8
900028c2:	f020 f978 	bl	90022bb6 <_ZdlPvj>
900028c6:	4620      	mov	r0, r4
900028c8:	bd10      	pop	{r4, pc}
900028ca:	bf00      	nop
900028cc:	9002459c 	.word	0x9002459c
900028d0:	e000e100 	.word	0xe000e100

900028d4 <_ZN8STM32DMA5startEv>:
                externalJobExecute();
            }
        }
    }

    virtual void start()
900028d4:	b510      	push	{r4, lr}
900028d6:	4604      	mov	r4, r0
    {
        MUTEX_LOCK(mutexIsRunning);
900028d8:	f04f 31ff 	mov.w	r1, #4294967295
900028dc:	f8d0 0da4 	ldr.w	r0, [r0, #3492]	@ 0xda4
900028e0:	f009 feb2 	bl	9000c648 <osMutexAcquire>
        if (!queue.isEmpty() && isAllowed && !isRunning)
900028e4:	6860      	ldr	r0, [r4, #4]
900028e6:	6803      	ldr	r3, [r0, #0]
900028e8:	681b      	ldr	r3, [r3, #0]
900028ea:	4798      	blx	r3
900028ec:	b978      	cbnz	r0, 9000290e <_ZN8STM32DMA5startEv+0x3a>
900028ee:	7a63      	ldrb	r3, [r4, #9]
900028f0:	b16b      	cbz	r3, 9000290e <_ZN8STM32DMA5startEv+0x3a>
900028f2:	7a23      	ldrb	r3, [r4, #8]
900028f4:	b92b      	cbnz	r3, 90002902 <_ZN8STM32DMA5startEv+0x2e>
        {
            started_by_external_job = false;
            execute();
900028f6:	6822      	ldr	r2, [r4, #0]
900028f8:	4620      	mov	r0, r4
            started_by_external_job = false;
900028fa:	f884 3da0 	strb.w	r3, [r4, #3488]	@ 0xda0
            execute();
900028fe:	6a53      	ldr	r3, [r2, #36]	@ 0x24
90002900:	4798      	blx	r3
        else if (!external_queue.is_empty() && !isRunning)
        {
            started_by_external_job = true;
            externalJobExecute();
        }
        MUTEX_UNLOCK(mutexIsRunning);
90002902:	f8d4 0da4 	ldr.w	r0, [r4, #3492]	@ 0xda4
    }
90002906:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        MUTEX_UNLOCK(mutexIsRunning);
9000290a:	f009 bec1 	b.w	9000c690 <osMutexRelease>
        return count_ == 0;
9000290e:	4b0b      	ldr	r3, [pc, #44]	@ (9000293c <_ZN8STM32DMA5startEv+0x68>)
        else if (!external_queue.is_empty() && !isRunning)
90002910:	68da      	ldr	r2, [r3, #12]
90002912:	2a00      	cmp	r2, #0
90002914:	d0f5      	beq.n	90002902 <_ZN8STM32DMA5startEv+0x2e>
90002916:	7a22      	ldrb	r2, [r4, #8]
90002918:	2a00      	cmp	r2, #0
9000291a:	d1f2      	bne.n	90002902 <_ZN8STM32DMA5startEv+0x2e>
        return buffer_[head_];
9000291c:	6858      	ldr	r0, [r3, #4]
            started_by_external_job = true;
9000291e:	2201      	movs	r2, #1
        return buffer_[head_];
90002920:	3002      	adds	r0, #2
            started_by_external_job = true;
90002922:	f884 2da0 	strb.w	r2, [r4, #3488]	@ 0xda0
     *
     * @param None
     */
    void externalJobExecute()
    {
        isRunning = true;
90002926:	7222      	strb	r2, [r4, #8]
        External_DMA2D_JobTypeDef& job = external_queue.front();
        DMA2D_CopyBuffer(job);
90002928:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
9000292c:	f7ff fe94 	bl	90002658 <DMA2D_CopyBuffer>
        MUTEX_UNLOCK(mutexIsRunning);
90002930:	f8d4 0da4 	ldr.w	r0, [r4, #3492]	@ 0xda4
    }
90002934:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        MUTEX_UNLOCK(mutexIsRunning);
90002938:	f009 beaa 	b.w	9000c690 <osMutexRelease>
9000293c:	24005e88 	.word	0x24005e88

90002940 <_ZN8STM32DMA18signalDMAInterruptEv>:
    virtual void signalDMAInterrupt()
90002940:	b538      	push	{r3, r4, r5, lr}
        if (started_by_external_job)
90002942:	f890 3da0 	ldrb.w	r3, [r0, #3488]	@ 0xda0
    virtual void signalDMAInterrupt()
90002946:	4604      	mov	r4, r0
        if (started_by_external_job)
90002948:	b943      	cbnz	r3, 9000295c <_ZN8STM32DMA18signalDMAInterruptEv+0x1c>
            executeCompleted();
9000294a:	6803      	ldr	r3, [r0, #0]
9000294c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000294e:	4798      	blx	r3
        return count_ == 0;
90002950:	4b15      	ldr	r3, [pc, #84]	@ (900029a8 <_ZN8STM32DMA18signalDMAInterruptEv+0x68>)
            if (!external_queue.is_empty() && !isRunning)
90002952:	68da      	ldr	r2, [r3, #12]
90002954:	b10a      	cbz	r2, 9000295a <_ZN8STM32DMA18signalDMAInterruptEv+0x1a>
90002956:	7a22      	ldrb	r2, [r4, #8]
90002958:	b1d2      	cbz	r2, 90002990 <_ZN8STM32DMA18signalDMAInterruptEv+0x50>
    }
9000295a:	bd38      	pop	{r3, r4, r5, pc}
        return count_ == 0;
9000295c:	4b12      	ldr	r3, [pc, #72]	@ (900029a8 <_ZN8STM32DMA18signalDMAInterruptEv+0x68>)
9000295e:	68da      	ldr	r2, [r3, #12]
        if (!external_queue.is_empty() && isRunning)
90002960:	2a00      	cmp	r2, #0
90002962:	d0fa      	beq.n	9000295a <_ZN8STM32DMA18signalDMAInterruptEv+0x1a>
90002964:	7a01      	ldrb	r1, [r0, #8]
90002966:	2900      	cmp	r1, #0
90002968:	d0f7      	beq.n	9000295a <_ZN8STM32DMA18signalDMAInterruptEv+0x1a>
            isRunning = false;
9000296a:	2100      	movs	r1, #0
        count_--;
9000296c:	3a01      	subs	r2, #1
        head_ = (head_ + 1) % max_size_;
9000296e:	e9d3 5000 	ldrd	r5, r0, [r3]
            isRunning = false;
90002972:	7221      	strb	r1, [r4, #8]
        head_ = (head_ + 1) % max_size_;
90002974:	1c41      	adds	r1, r0, #1
        count_--;
90002976:	60da      	str	r2, [r3, #12]
        return buffer_[head_];
90002978:	3002      	adds	r0, #2
        head_ = (head_ + 1) % max_size_;
9000297a:	fbb1 f2f5 	udiv	r2, r1, r5
9000297e:	fb05 1112 	mls	r1, r5, r2, r1
            DMA2D_ExternalJobCompleted(completed_job);
90002982:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
        head_ = (head_ + 1) % max_size_;
90002986:	6059      	str	r1, [r3, #4]
    }
90002988:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            DMA2D_ExternalJobCompleted(completed_job);
9000298c:	f7ff bea8 	b.w	900026e0 <DMA2D_ExternalJobCompleted>
        return buffer_[head_];
90002990:	6858      	ldr	r0, [r3, #4]
                started_by_external_job = true;
90002992:	2201      	movs	r2, #1
        return buffer_[head_];
90002994:	3002      	adds	r0, #2
                started_by_external_job = true;
90002996:	f884 2da0 	strb.w	r2, [r4, #3488]	@ 0xda0
        isRunning = true;
9000299a:	7222      	strb	r2, [r4, #8]
        DMA2D_CopyBuffer(job);
9000299c:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    }
900029a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        DMA2D_CopyBuffer(job);
900029a4:	f7ff be58 	b.w	90002658 <DMA2D_CopyBuffer>
900029a8:	24005e88 	.word	0x24005e88

900029ac <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
900029ac:	b570      	push	{r4, r5, r6, lr}
    switch (format)
900029ae:	7f8b      	ldrb	r3, [r1, #30]
900029b0:	2b0a      	cmp	r3, #10
900029b2:	d83d      	bhi.n	90002a30 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x84>
900029b4:	e8df f003 	tbb	[pc, r3]
900029b8:	3c2a063a 	.word	0x3c2a063a
900029bc:	063c3c3c 	.word	0x063c3c3c
900029c0:	0606      	.short	0x0606
900029c2:	06          	.byte	0x06
900029c3:	00          	.byte	0x00
900029c4:	2401      	movs	r4, #1

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
900029c6:	f8b1 c014 	ldrh.w	ip, [r1, #20]
900029ca:	8ac8      	ldrh	r0, [r1, #22]

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
900029cc:	8b4a      	ldrh	r2, [r1, #26]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
900029ce:	4b1b      	ldr	r3, [pc, #108]	@ (90002a3c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x90>)
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
900029d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
900029d4:	690d      	ldr	r5, [r1, #16]
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
900029d6:	eba2 020c 	sub.w	r2, r2, ip
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
900029da:	635c      	str	r4, [r3, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
900029dc:	6458      	str	r0, [r3, #68]	@ 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
900029de:	63dd      	str	r5, [r3, #60]	@ 0x3c
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
900029e0:	641a      	str	r2, [r3, #64]	@ 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
900029e2:	680e      	ldr	r6, [r1, #0]
     *
     * @return The result of the operation.
     */
    operator uint32_t() const
    {
        return color;
900029e4:	68c8      	ldr	r0, [r1, #12]
900029e6:	2e08      	cmp	r6, #8
900029e8:	d012      	beq.n	90002a10 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x64>

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, 0);

        /* Set color */
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));
900029ea:	0a02      	lsrs	r2, r0, #8
        WRITE_REG(DMA2D->FGOR, 0);
900029ec:	2500      	movs	r5, #0
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));
900029ee:	0941      	lsrs	r1, r0, #5
900029f0:	f3c0 00c4 	ubfx	r0, r0, #3, #5
900029f4:	f402 4278 	and.w	r2, r2, #63488	@ 0xf800
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
900029f8:	61dc      	str	r4, [r3, #28]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));
900029fa:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
        WRITE_REG(DMA2D->FGOR, 0);
900029fe:	611d      	str	r5, [r3, #16]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));
90002a00:	430a      	orrs	r2, r1

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
90002a02:	490f      	ldr	r1, [pc, #60]	@ (90002a40 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x94>)
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));
90002a04:	4302      	orrs	r2, r0
90002a06:	639a      	str	r2, [r3, #56]	@ 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
90002a08:	6019      	str	r1, [r3, #0]
    }
}
90002a0a:	bd70      	pop	{r4, r5, r6, pc}
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
90002a0c:	2400      	movs	r4, #0
90002a0e:	e7da      	b.n	900029c6 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1a>
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
90002a10:	619a      	str	r2, [r3, #24]
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
90002a12:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
90002a14:	625c      	str	r4, [r3, #36]	@ 0x24
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
90002a16:	4a0b      	ldr	r2, [pc, #44]	@ (90002a44 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x98>)
90002a18:	7f09      	ldrb	r1, [r1, #28]
90002a1a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
90002a1e:	490a      	ldr	r1, [pc, #40]	@ (90002a48 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x9c>)
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
90002a20:	61da      	str	r2, [r3, #28]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
90002a22:	6218      	str	r0, [r3, #32]
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
90002a24:	615d      	str	r5, [r3, #20]
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
90002a26:	60dd      	str	r5, [r3, #12]
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
90002a28:	6019      	str	r1, [r3, #0]
}
90002a2a:	bd70      	pop	{r4, r5, r6, pc}
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
90002a2c:	2402      	movs	r4, #2
90002a2e:	e7ca      	b.n	900029c6 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1a>
        assert(0 && "Unsupported Format!");
90002a30:	4b06      	ldr	r3, [pc, #24]	@ (90002a4c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xa0>)
90002a32:	2188      	movs	r1, #136	@ 0x88
90002a34:	4a06      	ldr	r2, [pc, #24]	@ (90002a50 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xa4>)
90002a36:	4807      	ldr	r0, [pc, #28]	@ (90002a54 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xa8>)
90002a38:	f020 f8ec 	bl	90022c14 <__assert_func>
90002a3c:	52001000 	.word	0x52001000
90002a40:	00030201 	.word	0x00030201
90002a44:	00010009 	.word	0x00010009
90002a48:	00020201 	.word	0x00020201
90002a4c:	9002443c 	.word	0x9002443c
90002a50:	90024458 	.word	0x90024458
90002a54:	900244a4 	.word	0x900244a4

90002a58 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
{
90002a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
90002a5a:	f891 e01d 	ldrb.w	lr, [r1, #29]
    switch (format)
90002a5e:	f1be 0f0b 	cmp.w	lr, #11
90002a62:	f200 80ac 	bhi.w	90002bbe <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x166>
90002a66:	e8df f00e 	tbb	[pc, lr]
90002a6a:	605b      	.short	0x605b
90002a6c:	aaaaaa46 	.word	0xaaaaaa46
90002a70:	060606aa 	.word	0x060606aa
90002a74:	0606      	.short	0x0606
        dma2dColorMode = DMA2D_INPUT_L8;
90002a76:	2605      	movs	r6, #5
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
90002a78:	f891 c01e 	ldrb.w	ip, [r1, #30]
    switch (format)
90002a7c:	f1bc 0f0b 	cmp.w	ip, #11
90002a80:	f200 809d 	bhi.w	90002bbe <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x166>
90002a84:	e8df f00c 	tbb	[pc, ip]
90002a88:	9b0d494e 	.word	0x9b0d494e
90002a8c:	069b9b9b 	.word	0x069b9b9b
90002a90:	06060606 	.word	0x06060606
    switch (format)
90002a94:	f1bc 0f0b 	cmp.w	ip, #11
90002a98:	f000 8097 	beq.w	90002bca <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x172>
        dma2dColorMode = DMA2D_INPUT_L8;
90002a9c:	2405      	movs	r4, #5
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
90002a9e:	2701      	movs	r7, #1
90002aa0:	e001      	b.n	90002aa6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4e>
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
90002aa2:	2400      	movs	r4, #0
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
90002aa4:	4627      	mov	r7, r4
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
90002aa6:	8a8b      	ldrh	r3, [r1, #20]
90002aa8:	8b4a      	ldrh	r2, [r1, #26]
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
90002aaa:	8b0d      	ldrh	r5, [r1, #24]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
90002aac:	8ac8      	ldrh	r0, [r1, #22]
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
90002aae:	1ad2      	subs	r2, r2, r3
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
90002ab0:	1aed      	subs	r5, r5, r3
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
90002ab2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
90002ab6:	4b4b      	ldr	r3, [pc, #300]	@ (90002be4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x18c>)
90002ab8:	641a      	str	r2, [r3, #64]	@ 0x40
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
90002aba:	619a      	str	r2, [r3, #24]
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
90002abc:	611d      	str	r5, [r3, #16]
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
90002abe:	684a      	ldr	r2, [r1, #4]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
90002ac0:	690d      	ldr	r5, [r1, #16]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
90002ac2:	635f      	str	r7, [r3, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
90002ac4:	6458      	str	r0, [r3, #68]	@ 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
90002ac6:	63dd      	str	r5, [r3, #60]	@ 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
90002ac8:	60da      	str	r2, [r3, #12]
    switch (blitOp.operation)
90002aca:	680a      	ldr	r2, [r1, #0]
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90002acc:	7f0f      	ldrb	r7, [r1, #28]
    switch (blitOp.operation)
90002ace:	2a80      	cmp	r2, #128	@ 0x80
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90002ad0:	ea4f 6007 	mov.w	r0, r7, lsl #24
    switch (blitOp.operation)
90002ad4:	d02e      	beq.n	90002b34 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xdc>
90002ad6:	d810      	bhi.n	90002afa <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa2>
90002ad8:	2a20      	cmp	r2, #32
90002ada:	d028      	beq.n	90002b2e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd6>
90002adc:	2a40      	cmp	r2, #64	@ 0x40
90002ade:	d026      	beq.n	90002b2e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd6>
90002ae0:	2a04      	cmp	r2, #4
90002ae2:	d15a      	bne.n	90002b9a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x142>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90002ae4:	4330      	orrs	r0, r6
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
90002ae6:	4a40      	ldr	r2, [pc, #256]	@ (90002be8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x190>)
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90002ae8:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
90002aec:	61d8      	str	r0, [r3, #28]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
90002aee:	625c      	str	r4, [r3, #36]	@ 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
90002af0:	615d      	str	r5, [r3, #20]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
90002af2:	601a      	str	r2, [r3, #0]
}
90002af4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
90002af6:	2600      	movs	r6, #0
90002af8:	e7be      	b.n	90002a78 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x20>
    switch (blitOp.operation)
90002afa:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
90002afe:	d059      	beq.n	90002bb4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x15c>
90002b00:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
90002b04:	d149      	bne.n	90002b9a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x142>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90002b06:	4a39      	ldr	r2, [pc, #228]	@ (90002bec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x194>)
90002b08:	4302      	orrs	r2, r0
90002b0a:	61da      	str	r2, [r3, #28]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
90002b0c:	4a36      	ldr	r2, [pc, #216]	@ (90002be8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x190>)
90002b0e:	68c9      	ldr	r1, [r1, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
90002b10:	6219      	str	r1, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
90002b12:	625c      	str	r4, [r3, #36]	@ 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
90002b14:	615d      	str	r5, [r3, #20]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
90002b16:	601a      	str	r2, [r3, #0]
}
90002b18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (format)
90002b1a:	2401      	movs	r4, #1
90002b1c:	4627      	mov	r7, r4
90002b1e:	e7c2      	b.n	90002aa6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4e>
90002b20:	2602      	movs	r6, #2
90002b22:	e7a9      	b.n	90002a78 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x20>
90002b24:	2402      	movs	r4, #2
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
90002b26:	4627      	mov	r7, r4
90002b28:	e7bd      	b.n	90002aa6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4e>
        dma2dColorMode = DMA2D_INPUT_RGB888;
90002b2a:	2601      	movs	r6, #1
90002b2c:	e7a4      	b.n	90002a78 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x20>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90002b2e:	4330      	orrs	r0, r6
90002b30:	4b2c      	ldr	r3, [pc, #176]	@ (90002be4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x18c>)
90002b32:	e7d8      	b.n	90002ae6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x8e>
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
90002b34:	688a      	ldr	r2, [r1, #8]
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90002b36:	4330      	orrs	r0, r6
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
90002b38:	1d11      	adds	r1, r2, #4
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90002b3a:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
90002b3e:	62d9      	str	r1, [r3, #44]	@ 0x2c
            switch ((Bitmap::ClutFormat)palette->format)
90002b40:	7811      	ldrb	r1, [r2, #0]
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90002b42:	61d8      	str	r0, [r3, #28]
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
90002b44:	625c      	str	r4, [r3, #36]	@ 0x24
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
90002b46:	615d      	str	r5, [r3, #20]
            switch ((Bitmap::ClutFormat)palette->format)
90002b48:	b9b1      	cbnz	r1, 90002b78 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x120>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
90002b4a:	8851      	ldrh	r1, [r2, #2]
            bool blend = true;
90002b4c:	2701      	movs	r7, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
90002b4e:	69d8      	ldr	r0, [r3, #28]
90002b50:	4a27      	ldr	r2, [pc, #156]	@ (90002bf0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x198>)
90002b52:	3901      	subs	r1, #1
90002b54:	4002      	ands	r2, r0
90002b56:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
90002b5a:	61da      	str	r2, [r3, #28]
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
90002b5c:	4a21      	ldr	r2, [pc, #132]	@ (90002be4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x18c>)
90002b5e:	69d3      	ldr	r3, [r2, #28]
90002b60:	f043 0320 	orr.w	r3, r3, #32
90002b64:	61d3      	str	r3, [r2, #28]
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
90002b66:	69d3      	ldr	r3, [r2, #28]
90002b68:	069b      	lsls	r3, r3, #26
90002b6a:	d4fc      	bmi.n	90002b66 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x10e>
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
90002b6c:	2310      	movs	r3, #16
90002b6e:	6093      	str	r3, [r2, #8]
            if (blend)
90002b70:	b317      	cbz	r7, 90002bb8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x160>
                WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
90002b72:	4b1d      	ldr	r3, [pc, #116]	@ (90002be8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x190>)
90002b74:	6013      	str	r3, [r2, #0]
}
90002b76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
90002b78:	2901      	cmp	r1, #1
90002b7a:	d12c      	bne.n	90002bd6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x17e>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
90002b7c:	8851      	ldrh	r1, [r2, #2]
                if (blitOp.alpha == 255)
90002b7e:	3fff      	subs	r7, #255	@ 0xff
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
90002b80:	69d8      	ldr	r0, [r3, #28]
90002b82:	4a1b      	ldr	r2, [pc, #108]	@ (90002bf0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x198>)
90002b84:	f101 31ff 	add.w	r1, r1, #4294967295
                if (blitOp.alpha == 255)
90002b88:	bf18      	it	ne
90002b8a:	2701      	movne	r7, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
90002b8c:	4002      	ands	r2, r0
90002b8e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
90002b92:	f042 0210 	orr.w	r2, r2, #16
90002b96:	61da      	str	r2, [r3, #28]
                break;
90002b98:	e7e0      	b.n	90002b5c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x104>
        if (blitOp.srcFormat != blitOp.dstFormat)
90002b9a:	45e6      	cmp	lr, ip
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90002b9c:	ea46 0600 	orr.w	r6, r6, r0
90002ba0:	4b10      	ldr	r3, [pc, #64]	@ (90002be4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x18c>)
90002ba2:	f446 3600 	orr.w	r6, r6, #131072	@ 0x20000
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
90002ba6:	bf14      	ite	ne
90002ba8:	4a12      	ldrne	r2, [pc, #72]	@ (90002bf4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x19c>)
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
90002baa:	f240 2201 	movweq	r2, #513	@ 0x201
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90002bae:	61de      	str	r6, [r3, #28]
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
90002bb0:	601a      	str	r2, [r3, #0]
}
90002bb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90002bb4:	4a10      	ldr	r2, [pc, #64]	@ (90002bf8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a0>)
90002bb6:	e7a7      	b.n	90002b08 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xb0>
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
90002bb8:	4b0e      	ldr	r3, [pc, #56]	@ (90002bf4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x19c>)
90002bba:	6013      	str	r3, [r2, #0]
}
90002bbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        assert(0 && "Unsupported Format!");
90002bbe:	4b0f      	ldr	r3, [pc, #60]	@ (90002bfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a4>)
90002bc0:	2167      	movs	r1, #103	@ 0x67
90002bc2:	4a0f      	ldr	r2, [pc, #60]	@ (90002c00 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a8>)
90002bc4:	480f      	ldr	r0, [pc, #60]	@ (90002c04 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ac>)
90002bc6:	f020 f825 	bl	90022c14 <__assert_func>
        assert(0 && "Unsupported Format!");
90002bca:	4b0c      	ldr	r3, [pc, #48]	@ (90002bfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a4>)
90002bcc:	2188      	movs	r1, #136	@ 0x88
90002bce:	4a0e      	ldr	r2, [pc, #56]	@ (90002c08 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1b0>)
90002bd0:	480c      	ldr	r0, [pc, #48]	@ (90002c04 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ac>)
90002bd2:	f020 f81f 	bl	90022c14 <__assert_func>
                assert(0 && "Unsupported format");
90002bd6:	4b0d      	ldr	r3, [pc, #52]	@ (90002c0c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1b4>)
90002bd8:	f44f 7189 	mov.w	r1, #274	@ 0x112
90002bdc:	4a0c      	ldr	r2, [pc, #48]	@ (90002c10 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1b8>)
90002bde:	4809      	ldr	r0, [pc, #36]	@ (90002c04 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ac>)
90002be0:	f020 f818 	bl	90022c14 <__assert_func>
90002be4:	52001000 	.word	0x52001000
90002be8:	00020201 	.word	0x00020201
90002bec:	00020009 	.word	0x00020009
90002bf0:	ffff00ef 	.word	0xffff00ef
90002bf4:	00010201 	.word	0x00010201
90002bf8:	0002000a 	.word	0x0002000a
90002bfc:	9002443c 	.word	0x9002443c
90002c00:	900244ec 	.word	0x900244ec
90002c04:	900244a4 	.word	0x900244a4
90002c08:	90024458 	.word	0x90024458
90002c0c:	90024538 	.word	0x90024538
90002c10:	90024554 	.word	0x90024554

90002c14 <DMA2D_XferCpltCallback>:
        dma.signalDMAInterrupt();
90002c14:	4b1f      	ldr	r3, [pc, #124]	@ (90002c94 <DMA2D_XferCpltCallback+0x80>)
90002c16:	4920      	ldr	r1, [pc, #128]	@ (90002c98 <DMA2D_XferCpltCallback+0x84>)
90002c18:	681b      	ldr	r3, [r3, #0]
    {
90002c1a:	b570      	push	{r4, r5, r6, lr}
90002c1c:	685c      	ldr	r4, [r3, #4]
90002c1e:	6823      	ldr	r3, [r4, #0]
90002c20:	695a      	ldr	r2, [r3, #20]
90002c22:	428a      	cmp	r2, r1
90002c24:	d125      	bne.n	90002c72 <DMA2D_XferCpltCallback+0x5e>
        if (started_by_external_job)
90002c26:	f894 2da0 	ldrb.w	r2, [r4, #3488]	@ 0xda0
90002c2a:	b942      	cbnz	r2, 90002c3e <DMA2D_XferCpltCallback+0x2a>
            executeCompleted();
90002c2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90002c2e:	4620      	mov	r0, r4
90002c30:	4798      	blx	r3
        return count_ == 0;
90002c32:	4b1a      	ldr	r3, [pc, #104]	@ (90002c9c <DMA2D_XferCpltCallback+0x88>)
            if (!external_queue.is_empty() && !isRunning)
90002c34:	68da      	ldr	r2, [r3, #12]
90002c36:	b10a      	cbz	r2, 90002c3c <DMA2D_XferCpltCallback+0x28>
90002c38:	7a22      	ldrb	r2, [r4, #8]
90002c3a:	b1f2      	cbz	r2, 90002c7a <DMA2D_XferCpltCallback+0x66>
    }
90002c3c:	bd70      	pop	{r4, r5, r6, pc}
        return count_ == 0;
90002c3e:	4b17      	ldr	r3, [pc, #92]	@ (90002c9c <DMA2D_XferCpltCallback+0x88>)
90002c40:	68da      	ldr	r2, [r3, #12]
        if (!external_queue.is_empty() && isRunning)
90002c42:	2a00      	cmp	r2, #0
90002c44:	d0fa      	beq.n	90002c3c <DMA2D_XferCpltCallback+0x28>
90002c46:	7a21      	ldrb	r1, [r4, #8]
90002c48:	2900      	cmp	r1, #0
90002c4a:	d0f7      	beq.n	90002c3c <DMA2D_XferCpltCallback+0x28>
            isRunning = false;
90002c4c:	2100      	movs	r1, #0
        count_--;
90002c4e:	3a01      	subs	r2, #1
        head_ = (head_ + 1) % max_size_;
90002c50:	e9d3 5000 	ldrd	r5, r0, [r3]
            isRunning = false;
90002c54:	7221      	strb	r1, [r4, #8]
        head_ = (head_ + 1) % max_size_;
90002c56:	1c41      	adds	r1, r0, #1
        count_--;
90002c58:	60da      	str	r2, [r3, #12]
        return buffer_[head_];
90002c5a:	3002      	adds	r0, #2
        head_ = (head_ + 1) % max_size_;
90002c5c:	fbb1 f2f5 	udiv	r2, r1, r5
90002c60:	fb05 1112 	mls	r1, r5, r2, r1
            DMA2D_ExternalJobCompleted(completed_job);
90002c64:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
90002c68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        head_ = (head_ + 1) % max_size_;
90002c6c:	6059      	str	r1, [r3, #4]
            DMA2D_ExternalJobCompleted(completed_job);
90002c6e:	f7ff bd37 	b.w	900026e0 <DMA2D_ExternalJobCompleted>
90002c72:	4620      	mov	r0, r4
90002c74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90002c78:	4710      	bx	r2
        return buffer_[head_];
90002c7a:	6858      	ldr	r0, [r3, #4]
                started_by_external_job = true;
90002c7c:	2201      	movs	r2, #1
        return buffer_[head_];
90002c7e:	3002      	adds	r0, #2
                started_by_external_job = true;
90002c80:	f884 2da0 	strb.w	r2, [r4, #3488]	@ 0xda0
        isRunning = true;
90002c84:	7222      	strb	r2, [r4, #8]
        DMA2D_CopyBuffer(job);
90002c86:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
90002c8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90002c8e:	f7ff bce3 	b.w	90002658 <DMA2D_CopyBuffer>
90002c92:	bf00      	nop
90002c94:	2402630c 	.word	0x2402630c
90002c98:	90002941 	.word	0x90002941
90002c9c:	24005e88 	.word	0x24005e88

90002ca0 <_ZN8STM32DMAC1Ev>:
STM32DMA::STM32DMA()
90002ca0:	b570      	push	{r4, r5, r6, lr}
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0])), started_by_external_job(false), mutexIsRunning(0)
90002ca2:	4b10      	ldr	r3, [pc, #64]	@ (90002ce4 <_ZN8STM32DMAC1Ev+0x44>)
STM32DMA::STM32DMA()
90002ca4:	4606      	mov	r6, r0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0])), started_by_external_job(false), mutexIsRunning(0)
90002ca6:	4604      	mov	r4, r0
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
        : queue(dmaQueue), isRunning(false), isAllowed(false)
90002ca8:	2500      	movs	r5, #0
90002caa:	300c      	adds	r0, #12
90002cac:	2260      	movs	r2, #96	@ 0x60
90002cae:	7235      	strb	r5, [r6, #8]
90002cb0:	7275      	strb	r5, [r6, #9]
90002cb2:	6070      	str	r0, [r6, #4]
90002cb4:	f844 3b20 	str.w	r3, [r4], #32
90002cb8:	4621      	mov	r1, r4
90002cba:	f00e fbbd 	bl	90011438 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
90002cbe:	4621      	mov	r1, r4
90002cc0:	f506 635a 	add.w	r3, r6, #3488	@ 0xda0
        : color(0)
90002cc4:	60cd      	str	r5, [r1, #12]
90002cc6:	3124      	adds	r1, #36	@ 0x24
90002cc8:	4299      	cmp	r1, r3
90002cca:	d1fb      	bne.n	90002cc4 <_ZN8STM32DMAC1Ev+0x24>
90002ccc:	f886 5da0 	strb.w	r5, [r6, #3488]	@ 0xda0
    mutexIsRunning = MUTEX_CREATE();
90002cd0:	2000      	movs	r0, #0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0])), started_by_external_job(false), mutexIsRunning(0)
90002cd2:	f8c6 5da4 	str.w	r5, [r6, #3492]	@ 0xda4
    mutexIsRunning = MUTEX_CREATE();
90002cd6:	f009 fc75 	bl	9000c5c4 <osMutexNew>
90002cda:	4603      	mov	r3, r0
}
90002cdc:	4630      	mov	r0, r6
    mutexIsRunning = MUTEX_CREATE();
90002cde:	f8c6 3da4 	str.w	r3, [r6, #3492]	@ 0xda4
}
90002ce2:	bd70      	pop	{r4, r5, r6, pc}
90002ce4:	9002459c 	.word	0x9002459c

90002ce8 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    };

    virtual uint16_t capacity() const
    {
        return NUMBER_OF_ELEMENTS;
    }
90002ce8:	2001      	movs	r0, #1
90002cea:	4770      	bx	lr

90002cec <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
    {
        return sizeof(stBlocks[0]);
    }
90002cec:	200c      	movs	r0, #12
90002cee:	4770      	bx	lr

90002cf0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
    {
        return &stBlocks[index];
90002cf0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
90002cf4:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    }
90002cf8:	3008      	adds	r0, #8
90002cfa:	4770      	bx	lr

90002cfc <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
    {
        return &stBlocks[index];
90002cfc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
90002d00:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    }
90002d04:	3008      	adds	r0, #8
90002d06:	4770      	bx	lr

90002d08 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
90002d08:	2001      	movs	r0, #1
90002d0a:	4770      	bx	lr

90002d0c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
90002d0c:	f44f 70f4 	mov.w	r0, #488	@ 0x1e8
90002d10:	4770      	bx	lr
90002d12:	bf00      	nop

90002d14 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
90002d14:	f44f 73f4 	mov.w	r3, #488	@ 0x1e8
90002d18:	fb03 0001 	mla	r0, r3, r1, r0
    }
90002d1c:	3008      	adds	r0, #8
90002d1e:	4770      	bx	lr

90002d20 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
90002d20:	f44f 73f4 	mov.w	r3, #488	@ 0x1e8
90002d24:	fb03 0001 	mla	r0, r3, r1, r0
    }
90002d28:	3008      	adds	r0, #8
90002d2a:	4770      	bx	lr

90002d2c <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
90002d2c:	2001      	movs	r0, #1
90002d2e:	4770      	bx	lr

90002d30 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
90002d30:	2010      	movs	r0, #16
90002d32:	4770      	bx	lr

90002d34 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
90002d34:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
90002d38:	3008      	adds	r0, #8
90002d3a:	4770      	bx	lr

90002d3c <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
90002d3c:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
90002d40:	3008      	adds	r0, #8
90002d42:	4770      	bx	lr

90002d44 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
    {
        app.gotoScreen1ScreenNoTransition();
90002d44:	4608      	mov	r0, r1
90002d46:	f002 ba75 	b.w	90005234 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
90002d4a:	bf00      	nop

90002d4c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
class Partition : public AbstractPartition
90002d4c:	4b03      	ldr	r3, [pc, #12]	@ (90002d5c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
90002d4e:	b510      	push	{r4, lr}
90002d50:	4604      	mov	r4, r0
90002d52:	6003      	str	r3, [r0, #0]
90002d54:	f00d f9db 	bl	9001010e <_ZN8touchgfx17AbstractPartitionD1Ev>
90002d58:	4620      	mov	r0, r4
90002d5a:	bd10      	pop	{r4, pc}
90002d5c:	90024654 	.word	0x90024654

90002d60 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
90002d60:	4b05      	ldr	r3, [pc, #20]	@ (90002d78 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev+0x18>)
90002d62:	b510      	push	{r4, lr}
90002d64:	4604      	mov	r4, r0
90002d66:	6003      	str	r3, [r0, #0]
90002d68:	f00d f9d1 	bl	9001010e <_ZN8touchgfx17AbstractPartitionD1Ev>
90002d6c:	2114      	movs	r1, #20
90002d6e:	4620      	mov	r0, r4
90002d70:	f01f ff21 	bl	90022bb6 <_ZdlPvj>
90002d74:	4620      	mov	r0, r4
90002d76:	bd10      	pop	{r4, pc}
90002d78:	90024654 	.word	0x90024654

90002d7c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
90002d7c:	4b03      	ldr	r3, [pc, #12]	@ (90002d8c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
90002d7e:	b510      	push	{r4, lr}
90002d80:	4604      	mov	r4, r0
90002d82:	6003      	str	r3, [r0, #0]
90002d84:	f00d f9c3 	bl	9001010e <_ZN8touchgfx17AbstractPartitionD1Ev>
90002d88:	4620      	mov	r0, r4
90002d8a:	bd10      	pop	{r4, pc}
90002d8c:	90024620 	.word	0x90024620

90002d90 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
90002d90:	4b06      	ldr	r3, [pc, #24]	@ (90002dac <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev+0x1c>)
90002d92:	b510      	push	{r4, lr}
90002d94:	4604      	mov	r4, r0
90002d96:	6003      	str	r3, [r0, #0]
90002d98:	f00d f9b9 	bl	9001010e <_ZN8touchgfx17AbstractPartitionD1Ev>
90002d9c:	f44f 71f8 	mov.w	r1, #496	@ 0x1f0
90002da0:	4620      	mov	r0, r4
90002da2:	f01f ff08 	bl	90022bb6 <_ZdlPvj>
90002da6:	4620      	mov	r0, r4
90002da8:	bd10      	pop	{r4, pc}
90002daa:	bf00      	nop
90002dac:	90024620 	.word	0x90024620

90002db0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
90002db0:	4b03      	ldr	r3, [pc, #12]	@ (90002dc0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
90002db2:	b510      	push	{r4, lr}
90002db4:	4604      	mov	r4, r0
90002db6:	6003      	str	r3, [r0, #0]
90002db8:	f00d f9a9 	bl	9001010e <_ZN8touchgfx17AbstractPartitionD1Ev>
90002dbc:	4620      	mov	r0, r4
90002dbe:	bd10      	pop	{r4, pc}
90002dc0:	900245ec 	.word	0x900245ec

90002dc4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
90002dc4:	4b05      	ldr	r3, [pc, #20]	@ (90002ddc <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev+0x18>)
90002dc6:	b510      	push	{r4, lr}
90002dc8:	4604      	mov	r4, r0
90002dca:	6003      	str	r3, [r0, #0]
90002dcc:	f00d f99f 	bl	9001010e <_ZN8touchgfx17AbstractPartitionD1Ev>
90002dd0:	2118      	movs	r1, #24
90002dd2:	4620      	mov	r0, r4
90002dd4:	f01f feef 	bl	90022bb6 <_ZdlPvj>
90002dd8:	4620      	mov	r0, r4
90002dda:	bd10      	pop	{r4, pc}
90002ddc:	900245ec 	.word	0x900245ec

90002de0 <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
90002de0:	b510      	push	{r4, lr}
90002de2:	4a0c      	ldr	r2, [pc, #48]	@ (90002e14 <_ZN12FrontendHeapD1Ev+0x34>)
90002de4:	4604      	mov	r4, r0
90002de6:	4b0c      	ldr	r3, [pc, #48]	@ (90002e18 <_ZN12FrontendHeapD1Ev+0x38>)
90002de8:	f500 7007 	add.w	r0, r0, #540	@ 0x21c
90002dec:	6022      	str	r2, [r4, #0]
90002dee:	f8c4 321c 	str.w	r3, [r4, #540]	@ 0x21c
90002df2:	f00d f98c 	bl	9001010e <_ZN8touchgfx17AbstractPartitionD1Ev>
90002df6:	4620      	mov	r0, r4
90002df8:	4b08      	ldr	r3, [pc, #32]	@ (90002e1c <_ZN12FrontendHeapD1Ev+0x3c>)
90002dfa:	f840 3f2c 	str.w	r3, [r0, #44]!
90002dfe:	f00d f986 	bl	9001010e <_ZN8touchgfx17AbstractPartitionD1Ev>
90002e02:	4620      	mov	r0, r4
90002e04:	4b06      	ldr	r3, [pc, #24]	@ (90002e20 <_ZN12FrontendHeapD1Ev+0x40>)
90002e06:	f840 3f14 	str.w	r3, [r0, #20]!
90002e0a:	f00d f980 	bl	9001010e <_ZN8touchgfx17AbstractPartitionD1Ev>
90002e0e:	4620      	mov	r0, r4
90002e10:	bd10      	pop	{r4, pc}
90002e12:	bf00      	nop
90002e14:	90024688 	.word	0x90024688
90002e18:	90024654 	.word	0x90024654
90002e1c:	90024620 	.word	0x90024620
90002e20:	900245ec 	.word	0x900245ec

90002e24 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
90002e24:	b510      	push	{r4, lr}
class FrontendHeap : public FrontendHeapBase
90002e26:	4c0c      	ldr	r4, [pc, #48]	@ (90002e58 <__tcf_0+0x34>)
90002e28:	4a0c      	ldr	r2, [pc, #48]	@ (90002e5c <__tcf_0+0x38>)
90002e2a:	4b0d      	ldr	r3, [pc, #52]	@ (90002e60 <__tcf_0+0x3c>)
90002e2c:	f504 7007 	add.w	r0, r4, #540	@ 0x21c
90002e30:	6022      	str	r2, [r4, #0]
90002e32:	f8c4 321c 	str.w	r3, [r4, #540]	@ 0x21c
90002e36:	f00d f96a 	bl	9001010e <_ZN8touchgfx17AbstractPartitionD1Ev>
90002e3a:	4620      	mov	r0, r4
90002e3c:	4b09      	ldr	r3, [pc, #36]	@ (90002e64 <__tcf_0+0x40>)
90002e3e:	f840 3f2c 	str.w	r3, [r0, #44]!
90002e42:	f00d f964 	bl	9001010e <_ZN8touchgfx17AbstractPartitionD1Ev>
90002e46:	4620      	mov	r0, r4
90002e48:	4b07      	ldr	r3, [pc, #28]	@ (90002e68 <__tcf_0+0x44>)
        static FrontendHeap instance;
90002e4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
90002e4e:	f840 3f14 	str.w	r3, [r0, #20]!
90002e52:	f00d b95c 	b.w	9001010e <_ZN8touchgfx17AbstractPartitionD1Ev>
90002e56:	bf00      	nop
90002e58:	24006da0 	.word	0x24006da0
90002e5c:	90024688 	.word	0x90024688
90002e60:	90024654 	.word	0x90024654
90002e64:	90024620 	.word	0x90024620
90002e68:	900245ec 	.word	0x900245ec

90002e6c <_ZN12FrontendHeapD0Ev>:
class FrontendHeap : public FrontendHeapBase
90002e6c:	b510      	push	{r4, lr}
90002e6e:	4a0e      	ldr	r2, [pc, #56]	@ (90002ea8 <_ZN12FrontendHeapD0Ev+0x3c>)
90002e70:	4604      	mov	r4, r0
90002e72:	4b0e      	ldr	r3, [pc, #56]	@ (90002eac <_ZN12FrontendHeapD0Ev+0x40>)
90002e74:	f500 7007 	add.w	r0, r0, #540	@ 0x21c
90002e78:	6022      	str	r2, [r4, #0]
90002e7a:	f8c4 321c 	str.w	r3, [r4, #540]	@ 0x21c
90002e7e:	f00d f946 	bl	9001010e <_ZN8touchgfx17AbstractPartitionD1Ev>
90002e82:	4620      	mov	r0, r4
90002e84:	4b0a      	ldr	r3, [pc, #40]	@ (90002eb0 <_ZN12FrontendHeapD0Ev+0x44>)
90002e86:	f840 3f2c 	str.w	r3, [r0, #44]!
90002e8a:	f00d f940 	bl	9001010e <_ZN8touchgfx17AbstractPartitionD1Ev>
90002e8e:	4b09      	ldr	r3, [pc, #36]	@ (90002eb4 <_ZN12FrontendHeapD0Ev+0x48>)
90002e90:	4620      	mov	r0, r4
90002e92:	f840 3f14 	str.w	r3, [r0, #20]!
90002e96:	f00d f93a 	bl	9001010e <_ZN8touchgfx17AbstractPartitionD1Ev>
90002e9a:	4620      	mov	r0, r4
90002e9c:	f44f 7164 	mov.w	r1, #912	@ 0x390
90002ea0:	f01f fe89 	bl	90022bb6 <_ZdlPvj>
90002ea4:	4620      	mov	r0, r4
90002ea6:	bd10      	pop	{r4, pc}
90002ea8:	90024688 	.word	0x90024688
90002eac:	90024654 	.word	0x90024654
90002eb0:	90024620 	.word	0x90024620
90002eb4:	900245ec 	.word	0x900245ec

90002eb8 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
90002eb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90002ebc:	b082      	sub	sp, #8
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
90002ebe:	2400      	movs	r4, #0
90002ec0:	f001 ffdc 	bl	90004e7c <_ZN14BitmapDatabase11getInstanceEv>
90002ec4:	4605      	mov	r5, r0
90002ec6:	f001 ffdd 	bl	90004e84 <_ZN14BitmapDatabase15getInstanceSizeEv>
90002eca:	4623      	mov	r3, r4
90002ecc:	4601      	mov	r1, r0
90002ece:	4622      	mov	r2, r4
90002ed0:	4628      	mov	r0, r5
90002ed2:	9400      	str	r4, [sp, #0]
90002ed4:	f014 f87a 	bl	90016fcc <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
    {
        texts = t;
90002ed8:	4b28      	ldr	r3, [pc, #160]	@ (90002f7c <touchgfx_init+0xc4>)
90002eda:	4a29      	ldr	r2, [pc, #164]	@ (90002f80 <touchgfx_init+0xc8>)
    TypedText::registerTexts(&texts);
    Texts::setLanguage(0);
90002edc:	4620      	mov	r0, r4
        static FrontendHeap instance;
90002ede:	4c29      	ldr	r4, [pc, #164]	@ (90002f84 <touchgfx_init+0xcc>)
90002ee0:	601a      	str	r2, [r3, #0]
90002ee2:	f002 feb9 	bl	90005c58 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
90002ee6:	4828      	ldr	r0, [pc, #160]	@ (90002f88 <touchgfx_init+0xd0>)
90002ee8:	f013 ffd8 	bl	90016e9c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>
90002eec:	6823      	ldr	r3, [r4, #0]
90002eee:	f3bf 8f5b 	dmb	ish
90002ef2:	07db      	lsls	r3, r3, #31
90002ef4:	d505      	bpl.n	90002f02 <touchgfx_init+0x4a>
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
90002ef6:	4825      	ldr	r0, [pc, #148]	@ (90002f8c <touchgfx_init+0xd4>)
}
90002ef8:	b002      	add	sp, #8
90002efa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hal.initialize();
90002efe:	f7fe bbe9 	b.w	900016d4 <_ZN11TouchGFXHAL10initializeEv>
90002f02:	4620      	mov	r0, r4
90002f04:	f01f fe59 	bl	90022bba <__cxa_guard_acquire>
90002f08:	2800      	cmp	r0, #0
90002f0a:	d0f4      	beq.n	90002ef6 <touchgfx_init+0x3e>
     */
    MVPHeap(AbstractPartition& pres,
            AbstractPartition& scr,
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
90002f0c:	4d20      	ldr	r5, [pc, #128]	@ (90002f90 <touchgfx_init+0xd8>)
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
                     app(model, *this)
90002f0e:	4b21      	ldr	r3, [pc, #132]	@ (90002f94 <touchgfx_init+0xdc>)
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
90002f10:	f505 760d 	add.w	r6, r5, #564	@ 0x234
        : presenterStorage(pres),
90002f14:	f105 0014 	add.w	r0, r5, #20
          screenStorage(scr),
90002f18:	f105 082c 	add.w	r8, r5, #44	@ 0x2c
          transitionStorage(tra),
90002f1c:	f505 7707 	add.w	r7, r5, #540	@ 0x21c
90002f20:	602b      	str	r3, [r5, #0]
90002f22:	60ef      	str	r7, [r5, #12]
          frontendApplication(app)
90002f24:	612e      	str	r6, [r5, #16]
          screenStorage(scr),
90002f26:	e9c5 0801 	strd	r0, r8, [r5, #4]
90002f2a:	f00d f8f1 	bl	90010110 <_ZN8touchgfx17AbstractPartitionC1Ev>
90002f2e:	4b1a      	ldr	r3, [pc, #104]	@ (90002f98 <touchgfx_init+0xe0>)
90002f30:	4640      	mov	r0, r8
90002f32:	616b      	str	r3, [r5, #20]
90002f34:	f00d f8ec 	bl	90010110 <_ZN8touchgfx17AbstractPartitionC1Ev>
90002f38:	4b18      	ldr	r3, [pc, #96]	@ (90002f9c <touchgfx_init+0xe4>)
90002f3a:	4638      	mov	r0, r7
90002f3c:	62eb      	str	r3, [r5, #44]	@ 0x2c
90002f3e:	f00d f8e7 	bl	90010110 <_ZN8touchgfx17AbstractPartitionC1Ev>
90002f42:	4b17      	ldr	r3, [pc, #92]	@ (90002fa0 <touchgfx_init+0xe8>)
90002f44:	f505 700c 	add.w	r0, r5, #560	@ 0x230
90002f48:	f8c5 321c 	str.w	r3, [r5, #540]	@ 0x21c
90002f4c:	f002 ff06 	bl	90005d5c <_ZN5ModelC1Ev>
90002f50:	462a      	mov	r2, r5
90002f52:	f505 710c 	add.w	r1, r5, #560	@ 0x230
90002f56:	4630      	mov	r0, r6
90002f58:	f002 fef4 	bl	90005d44 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
90002f5c:	4630      	mov	r0, r6
90002f5e:	f002 f969 	bl	90005234 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
        static FrontendHeap instance;
90002f62:	4810      	ldr	r0, [pc, #64]	@ (90002fa4 <touchgfx_init+0xec>)
90002f64:	f01f fe74 	bl	90022c50 <atexit>
90002f68:	4620      	mov	r0, r4
90002f6a:	f01f fe32 	bl	90022bd2 <__cxa_guard_release>
90002f6e:	4807      	ldr	r0, [pc, #28]	@ (90002f8c <touchgfx_init+0xd4>)
}
90002f70:	b002      	add	sp, #8
90002f72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hal.initialize();
90002f76:	f7fe bbad 	b.w	900016d4 <_ZN11TouchGFXHAL10initializeEv>
90002f7a:	bf00      	nop
90002f7c:	24026368 	.word	0x24026368
90002f80:	24005f74 	.word	0x24005f74
90002f84:	24006d9c 	.word	0x24006d9c
90002f88:	24000020 	.word	0x24000020
90002f8c:	24005eec 	.word	0x24005eec
90002f90:	24006da0 	.word	0x24006da0
90002f94:	90024688 	.word	0x90024688
90002f98:	900245ec 	.word	0x900245ec
90002f9c:	90024620 	.word	0x90024620
90002fa0:	90024654 	.word	0x90024654
90002fa4:	90002e25 	.word	0x90002e25

90002fa8 <touchgfx_components_init>:

void touchgfx_components_init()
{
}
90002fa8:	4770      	bx	lr
90002faa:	bf00      	nop

90002fac <touchgfx_taskEntry>:
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
90002fac:	4801      	ldr	r0, [pc, #4]	@ (90002fb4 <touchgfx_taskEntry+0x8>)
90002fae:	f7fe bb57 	b.w	90001660 <_ZN11TouchGFXHAL9taskEntryEv>
90002fb2:	bf00      	nop
90002fb4:	24005eec 	.word	0x24005eec

90002fb8 <_GLOBAL__sub_I_touchgfx_init>:
}
90002fb8:	b570      	push	{r4, r5, r6, lr}
static STM32DMA dma;
90002fba:	4e26      	ldr	r6, [pc, #152]	@ (90003054 <_GLOBAL__sub_I_touchgfx_init+0x9c>)
{
public:

    STM32TouchController() {}
90002fbc:	4b26      	ldr	r3, [pc, #152]	@ (90003058 <_GLOBAL__sub_I_touchgfx_init+0xa0>)
90002fbe:	4c27      	ldr	r4, [pc, #156]	@ (9000305c <_GLOBAL__sub_I_touchgfx_init+0xa4>)
90002fc0:	4630      	mov	r0, r6
static LCD16bpp display;
90002fc2:	4d27      	ldr	r5, [pc, #156]	@ (90003060 <_GLOBAL__sub_I_touchgfx_init+0xa8>)
90002fc4:	6023      	str	r3, [r4, #0]
static STM32DMA dma;
90002fc6:	f7ff fe6b 	bl	90002ca0 <_ZN8STM32DMAC1Ev>
static LCD16bpp display;
90002fca:	4628      	mov	r0, r5
90002fcc:	f017 f908 	bl	9001a1e0 <_ZN8touchgfx8LCD16bppC1Ev>
        : dma(dmaInterface),
90002fd0:	4b24      	ldr	r3, [pc, #144]	@ (90003064 <_GLOBAL__sub_I_touchgfx_init+0xac>)
          mcuInstrumentation(0),
90002fd2:	2200      	movs	r2, #0
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
90002fd4:	f44f 70f0 	mov.w	r0, #480	@ 0x1e0
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
90002fd8:	f44f 7188 	mov.w	r1, #272	@ 0x110
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
        : drag(), listener(0), dragThresholdValue(0)
90002fdc:	62da      	str	r2, [r3, #44]	@ 0x2c
90002fde:	861a      	strh	r2, [r3, #48]	@ 0x30
          vSyncCompensationEnabled(false),
90002fe0:	669a      	str	r2, [r3, #104]	@ 0x68
          updateMCULoad(0),
90002fe2:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
          cc_begin(0),
90002fe6:	671a      	str	r2, [r3, #112]	@ 0x70
          mcuInstrumentation(0),
90002fe8:	e9c3 4203 	strd	r4, r2, [r3, #12]
          touchSampleRate(1),
90002fec:	4c1e      	ldr	r4, [pc, #120]	@ (90003068 <_GLOBAL__sub_I_touchgfx_init+0xb0>)
90002fee:	665c      	str	r4, [r3, #100]	@ 0x64
          requestedOrientation(ORIENTATION_LANDSCAPE),
90002ff0:	f04f 7480 	mov.w	r4, #16777216	@ 0x1000000
90002ff4:	675c      	str	r4, [r3, #116]	@ 0x74
          lastRenderMethod(HARDWARE)
90002ff6:	2401      	movs	r4, #1
90002ff8:	f883 4078 	strb.w	r4, [r3, #120]	@ 0x78
        instance = this;
90002ffc:	4c1b      	ldr	r4, [pc, #108]	@ (9000306c <_GLOBAL__sub_I_touchgfx_init+0xb4>)
90002ffe:	6023      	str	r3, [r4, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
90003000:	4c1b      	ldr	r4, [pc, #108]	@ (90003070 <_GLOBAL__sub_I_touchgfx_init+0xb8>)
90003002:	8020      	strh	r0, [r4, #0]
90003004:	4c1b      	ldr	r4, [pc, #108]	@ (90003074 <_GLOBAL__sub_I_touchgfx_init+0xbc>)
          lcdRef(display),
90003006:	e9c3 6501 	strd	r6, r5, [r3, #4]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
9000300a:	8020      	strh	r0, [r4, #0]
          refreshStrategy(REFRESH_STRATEGY_DEFAULT),
9000300c:	f44f 7580 	mov.w	r5, #256	@ 0x100
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
90003010:	4c19      	ldr	r4, [pc, #100]	@ (90003078 <_GLOBAL__sub_I_touchgfx_init+0xc0>)
90003012:	481a      	ldr	r0, [pc, #104]	@ (9000307c <_GLOBAL__sub_I_touchgfx_init+0xc4>)
          refreshStrategy(REFRESH_STRATEGY_DEFAULT),
90003014:	649d      	str	r5, [r3, #72]	@ 0x48
          frameBufferAllocator(0),
90003016:	e9c3 2205 	strd	r2, r2, [r3, #20]
            : startX(0),
9000301a:	e9c3 2207 	strd	r2, r2, [r3, #28]
        : drag(), listener(0), dragThresholdValue(0)
9000301e:	e9c3 2209 	strd	r2, r2, [r3, #36]	@ 0x24
          frameBuffer0(0),
90003022:	e9c3 220e 	strd	r2, r2, [r3, #56]	@ 0x38
          frameBuffer2(0),
90003026:	e9c3 2210 	strd	r2, r2, [r3, #64]	@ 0x40
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
        : x(0), y(0), width(0), height(0)
9000302a:	e9c3 2213 	strd	r2, r2, [r3, #76]	@ 0x4c
          listener(0),
9000302e:	e9c3 2215 	strd	r2, r2, [r3, #84]	@ 0x54
          lastY(0),
90003032:	e9c3 2217 	strd	r2, r2, [r3, #92]	@ 0x5c
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
90003036:	8021      	strh	r1, [r4, #0]
90003038:	8001      	strh	r1, [r0, #0]
        DISPLAY_ROTATION = rotate0;
9000303a:	4c11      	ldr	r4, [pc, #68]	@ (90003080 <_GLOBAL__sub_I_touchgfx_init+0xc8>)
     * @param [in,out] display Reference to LCD interface.
     * @param [in,out] tc      Reference to Touch Controller driver.
     * @param width            Width of the display.
     * @param height           Height of the display.
     */
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
9000303c:	4811      	ldr	r0, [pc, #68]	@ (90003084 <_GLOBAL__sub_I_touchgfx_init+0xcc>)
9000303e:	4912      	ldr	r1, [pc, #72]	@ (90003088 <_GLOBAL__sub_I_touchgfx_init+0xd0>)
        : cc_consumed(0),
90003040:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
90003044:	7022      	strb	r2, [r4, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
90003046:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
9000304a:	6018      	str	r0, [r3, #0]
          cc_in(0)
9000304c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
90003050:	67d9      	str	r1, [r3, #124]	@ 0x7c
}
90003052:	bd70      	pop	{r4, r5, r6, pc}
90003054:	24005ff0 	.word	0x24005ff0
90003058:	90023d8c 	.word	0x90023d8c
9000305c:	24006d98 	.word	0x24006d98
90003060:	24005f78 	.word	0x24005f78
90003064:	24005eec 	.word	0x24005eec
90003068:	01000001 	.word	0x01000001
9000306c:	2402630c 	.word	0x2402630c
90003070:	24026300 	.word	0x24026300
90003074:	24026306 	.word	0x24026306
90003078:	24026302 	.word	0x24026302
9000307c:	24026308 	.word	0x24026308
90003080:	24026304 	.word	0x24026304
90003084:	90023f1c 	.word	0x90023f1c
90003088:	90023d64 	.word	0x90023d64

9000308c <_GLOBAL__sub_D_touchgfx_init>:
static STM32DMA dma;
9000308c:	4801      	ldr	r0, [pc, #4]	@ (90003094 <_GLOBAL__sub_D_touchgfx_init+0x8>)
9000308e:	f7ff bbcd 	b.w	9000282c <_ZN8STM32DMAD1Ev>
90003092:	bf00      	nop
90003094:	24005ff0 	.word	0x24005ff0

90003098 <_ZNK8touchgfx8Drawable17invalidateContentEv>:
     * drawn by the widget.
     */
    virtual void invalidateContent() const
    {
        // Consider checking if *this is in the draw chain
        if (visible)
90003098:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
9000309c:	b112      	cbz	r2, 900030a4 <_ZNK8touchgfx8Drawable17invalidateContentEv+0xc>
        {
            invalidate();
9000309e:	6803      	ldr	r3, [r0, #0]
900030a0:	695b      	ldr	r3, [r3, #20]
900030a2:	4718      	bx	r3
        }
    }
900030a4:	4770      	bx	lr
900030a6:	bf00      	nop

900030a8 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
    {
        return 0;
    }
900030a8:	2000      	movs	r0, #0
900030aa:	4770      	bx	lr

900030ac <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
    {
        rect.x = x;
900030ac:	8081      	strh	r1, [r0, #4]
    }
900030ae:	4770      	bx	lr

900030b0 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
    {
        rect.y = y;
900030b0:	80c1      	strh	r1, [r0, #6]
    }
900030b2:	4770      	bx	lr

900030b4 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
    {
        rect.width = width;
900030b4:	8101      	strh	r1, [r0, #8]
    }
900030b6:	4770      	bx	lr

900030b8 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
    {
        rect.height = height;
900030b8:	8141      	strh	r1, [r0, #10]
    }
900030ba:	4770      	bx	lr

900030bc <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
    {
    }
900030bc:	4770      	bx	lr
900030be:	bf00      	nop

900030c0 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
        (void)event; // Unused variable
    }
900030c0:	4770      	bx	lr
900030c2:	bf00      	nop

900030c4 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
    {
        (void)event; // Unused variable
    }
900030c4:	4770      	bx	lr
900030c6:	bf00      	nop

900030c8 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
    {
        (void)event; // Unused variable
    }
900030c8:	4770      	bx	lr
900030ca:	bf00      	nop

900030cc <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
    {
    }
900030cc:	4770      	bx	lr
900030ce:	bf00      	nop

900030d0 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
    {
        moveRelative(x - rect.x, y - rect.y);
900030d0:	f8b0 c006 	ldrh.w	ip, [r0, #6]
900030d4:	6803      	ldr	r3, [r0, #0]
900030d6:	eba2 020c 	sub.w	r2, r2, ip
900030da:	f8b0 c004 	ldrh.w	ip, [r0, #4]
900030de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
900030e0:	eba1 010c 	sub.w	r1, r1, ip
900030e4:	b212      	sxth	r2, r2
900030e6:	b209      	sxth	r1, r1
900030e8:	4718      	bx	r3
900030ea:	bf00      	nop

900030ec <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
        nextDrawChainElement = *nextPreviousElement;
900030ec:	6813      	ldr	r3, [r2, #0]
        cachedVisibleRect.x = UNCACHED_INDICATOR;
900030ee:	f64f 7cff 	movw	ip, #65535	@ 0xffff
        cachedAbsX = UNCACHED_INDICATOR;
900030f2:	f04f 31ff 	mov.w	r1, #4294967295
        cachedVisibleRect.x = UNCACHED_INDICATOR;
900030f6:	f8a0 c00c 	strh.w	ip, [r0, #12]
        nextDrawChainElement = *nextPreviousElement;
900030fa:	e9c0 3107 	strd	r3, r1, [r0, #28]
        *nextPreviousElement = this;
900030fe:	6010      	str	r0, [r2, #0]
    }
90003100:	4770      	bx	lr
90003102:	bf00      	nop

90003104 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
    {
        if (isVisible() && isTouchable())
90003104:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
90003108:	b11a      	cbz	r2, 90003112 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
9000310a:	f890 2024 	ldrb.w	r2, [r0, #36]	@ 0x24
9000310e:	b102      	cbz	r2, 90003112 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        {
            *last = this;
90003110:	6018      	str	r0, [r3, #0]
        }
    }
90003112:	4770      	bx	lr

90003114 <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
    }

    virtual Bitmap::BitmapFormat framebufferFormat() const
    {
        return Bitmap::RGB565;
    }
90003114:	2000      	movs	r0, #0
90003116:	4770      	bx	lr

90003118 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
90003118:	4b03      	ldr	r3, [pc, #12]	@ (90003128 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv+0x10>)
9000311a:	2290      	movs	r2, #144	@ 0x90
9000311c:	f883 235a 	strb.w	r2, [r3, #858]	@ 0x35a
90003120:	f883 2358 	strb.w	r2, [r3, #856]	@ 0x358

void TouchGFXGeneratedHAL::configureInterrupts()
{
    NVIC_SetPriority(DMA2D_IRQn, 9);
    NVIC_SetPriority(LTDC_IRQn, 9);
}
90003124:	4770      	bx	lr
90003126:	bf00      	nop
90003128:	e000e100 	.word	0xe000e100

9000312c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:
    NVIC_DisableIRQ(LTDC_IRQn);
}

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
9000312c:	4a09      	ldr	r2, [pc, #36]	@ (90003154 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x28>)
9000312e:	490a      	ldr	r1, [pc, #40]	@ (90003158 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x2c>)
90003130:	68d3      	ldr	r3, [r2, #12]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
90003132:	480a      	ldr	r0, [pc, #40]	@ (9000315c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x30>)
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
90003134:	f3c3 030a 	ubfx	r3, r3, #0, #11
90003138:	3b01      	subs	r3, #1
9000313a:	b29b      	uxth	r3, r3
9000313c:	800b      	strh	r3, [r1, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
9000313e:	6911      	ldr	r1, [r2, #16]
90003140:	f3c1 010a 	ubfx	r1, r1, #0, #11
90003144:	3901      	subs	r1, #1
90003146:	8001      	strh	r1, [r0, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
90003148:	6413      	str	r3, [r2, #64]	@ 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
9000314a:	6b53      	ldr	r3, [r2, #52]	@ 0x34
9000314c:	f043 0301 	orr.w	r3, r3, #1
90003150:	6353      	str	r3, [r2, #52]	@ 0x34
}
90003152:	4770      	bx	lr
90003154:	50001000 	.word	0x50001000
90003158:	24007132 	.word	0x24007132
9000315c:	24007130 	.word	0x24007130

90003160 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:
    videoController.endFrame();
}

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
    return (uint16_t*)LTDC_Layer1->CFBAR;
90003160:	4b01      	ldr	r3, [pc, #4]	@ (90003168 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x8>)
90003162:	f8d3 00ac 	ldr.w	r0, [r3, #172]	@ 0xac
}
90003166:	4770      	bx	lr
90003168:	50001000 	.word	0x50001000

9000316c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
    LTDC_Layer1->CFBAR = (uint32_t)adr;
9000316c:	4b02      	ldr	r3, [pc, #8]	@ (90003178 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0xc>)

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
9000316e:	2201      	movs	r2, #1
    LTDC_Layer1->CFBAR = (uint32_t)adr;
90003170:	f8c3 10ac 	str.w	r1, [r3, #172]	@ 0xac
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
90003174:	625a      	str	r2, [r3, #36]	@ 0x24
}
90003176:	4770      	bx	lr
90003178:	50001000 	.word	0x50001000

9000317c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setRGBBufferEPhj>:

    virtual void setRGBBuffer(uint8_t* buffer, size_t sizeOfBuffer)
    {
        // Running in UI thread / main

        bufferRGB = buffer;
9000317c:	e9c0 120c 	strd	r1, r2, [r0, #48]	@ 0x30
        topBufferRGB = bufferRGB;
90003180:	6381      	str	r1, [r0, #56]	@ 0x38
        sizeBufferRGB = sizeOfBuffer;
    }
90003182:	4770      	bx	lr

90003184 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EED1Ev>:
class DedicatedBufferController : public touchgfx::VideoController
90003184:	4770      	bx	lr
90003186:	bf00      	nop

90003188 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmRNS0_15VideoDataReaderE>:
        mjpegDecoders[handle]->setVideoData(reader);
90003188:	eb00 0081 	add.w	r0, r0, r1, lsl #2
9000318c:	4611      	mov	r1, r2
9000318e:	6840      	ldr	r0, [r0, #4]
90003190:	6803      	ldr	r3, [r0, #0]
90003192:	68db      	ldr	r3, [r3, #12]
90003194:	4718      	bx	r3
90003196:	bf00      	nop

90003198 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EED0Ev>:
class DedicatedBufferController : public touchgfx::VideoController
90003198:	b510      	push	{r4, lr}
9000319a:	4604      	mov	r4, r0
9000319c:	2148      	movs	r1, #72	@ 0x48
9000319e:	f01f fd0a 	bl	90022bb6 <_ZdlPvj>
900031a2:	4620      	mov	r0, r4
900031a4:	bd10      	pop	{r4, pc}
900031a6:	bf00      	nop

900031a8 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm>:
        mjpegDecoders[handle]->getVideoInfo(data);
    }

    virtual bool getIsPlaying(const Handle handle)
    {
        assert(handle < no_streams);
900031a8:	b911      	cbnz	r1, 900031b0 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x8>
        Stream& stream = streams[handle];
        return stream.isPlaying;
    }
900031aa:	f890 0029 	ldrb.w	r0, [r0, #41]	@ 0x29
900031ae:	4770      	bx	lr
    virtual bool getIsPlaying(const Handle handle)
900031b0:	b508      	push	{r3, lr}
        assert(handle < no_streams);
900031b2:	4a03      	ldr	r2, [pc, #12]	@ (900031c0 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x18>)
900031b4:	f44f 71b8 	mov.w	r1, #368	@ 0x170
900031b8:	4b02      	ldr	r3, [pc, #8]	@ (900031c4 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x1c>)
900031ba:	4803      	ldr	r0, [pc, #12]	@ (900031c8 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x20>)
900031bc:	f01f fd2a 	bl	90022c14 <__assert_func>
900031c0:	900246a8 	.word	0x900246a8
900031c4:	90024694 	.word	0x90024694
900031c8:	90024834 	.word	0x90024834

900031cc <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE>:
        assert(handle < no_streams);
900031cc:	b921      	cbnz	r1, 900031d8 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0xc>
        mjpegDecoders[handle]->getVideoInfo(data);
900031ce:	6840      	ldr	r0, [r0, #4]
900031d0:	4611      	mov	r1, r2
900031d2:	6803      	ldr	r3, [r0, #0]
900031d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
900031d6:	4718      	bx	r3
        assert(handle < no_streams);
900031d8:	4b03      	ldr	r3, [pc, #12]	@ (900031e8 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x1c>)
900031da:	f44f 71b5 	mov.w	r1, #362	@ 0x16a
900031de:	4a03      	ldr	r2, [pc, #12]	@ (900031ec <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x20>)
900031e0:	4803      	ldr	r0, [pc, #12]	@ (900031f0 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x24>)
    virtual void getVideoInformation(const Handle handle, touchgfx::VideoInformation* data)
900031e2:	b510      	push	{r4, lr}
        assert(handle < no_streams);
900031e4:	f01f fd16 	bl	90022c14 <__assert_func>
900031e8:	90024694 	.word	0x90024694
900031ec:	90024878 	.word	0x90024878
900031f0:	90024834 	.word	0x90024834

900031f4 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm>:
        assert(handle < no_streams);
900031f4:	b909      	cbnz	r1, 900031fa <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x6>
    }
900031f6:	68c0      	ldr	r0, [r0, #12]
900031f8:	4770      	bx	lr
    virtual uint32_t getCurrentFrameNumber(const Handle handle)
900031fa:	b508      	push	{r3, lr}
        assert(handle < no_streams);
900031fc:	4a02      	ldr	r2, [pc, #8]	@ (90003208 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x14>)
900031fe:	2179      	movs	r1, #121	@ 0x79
90003200:	4b02      	ldr	r3, [pc, #8]	@ (9000320c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x18>)
90003202:	4803      	ldr	r0, [pc, #12]	@ (90003210 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x1c>)
90003204:	f01f fd06 	bl	90022c14 <__assert_func>
90003208:	90024a28 	.word	0x90024a28
9000320c:	90024694 	.word	0x90024694
90003210:	90024834 	.word	0x90024834

90003214 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm>:
    virtual void setVideoData(const Handle handle, const uint8_t* movie, const uint32_t length)
90003214:	b510      	push	{r4, lr}
        assert(handle < no_streams);
90003216:	460c      	mov	r4, r1
90003218:	b951      	cbnz	r1, 90003230 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm+0x1c>
9000321a:	4684      	mov	ip, r0
        mjpegDecoders[handle]->setVideoData(movie, length);
9000321c:	6840      	ldr	r0, [r0, #4]
9000321e:	4611      	mov	r1, r2
90003220:	461a      	mov	r2, r3
90003222:	6803      	ldr	r3, [r0, #0]
        stream.frameNumber = 0;
90003224:	f8cc 400c 	str.w	r4, [ip, #12]
        mjpegDecoders[handle]->setVideoData(movie, length);
90003228:	689b      	ldr	r3, [r3, #8]
    }
9000322a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        mjpegDecoders[handle]->setVideoData(movie, length);
9000322e:	4718      	bx	r3
        assert(handle < no_streams);
90003230:	4b02      	ldr	r3, [pc, #8]	@ (9000323c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm+0x28>)
90003232:	2190      	movs	r1, #144	@ 0x90
90003234:	4a02      	ldr	r2, [pc, #8]	@ (90003240 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm+0x2c>)
90003236:	4803      	ldr	r0, [pc, #12]	@ (90003244 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm+0x30>)
90003238:	f01f fcec 	bl	90022c14 <__assert_func>
9000323c:	90024694 	.word	0x90024694
90003240:	90024bdc 	.word	0x90024bdc
90003244:	90024834 	.word	0x90024834

90003248 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm>:
        assert(handle < no_streams);
90003248:	b921      	cbnz	r1, 90003254 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0xc>
        stream.frameCount = 0;
9000324a:	e9c0 1104 	strd	r1, r1, [r0, #16]
        stream.frame_rate_video = video_frames;
9000324e:	e9c0 3206 	strd	r3, r2, [r0, #24]
90003252:	4770      	bx	lr
    virtual void setFrameRate(const Handle handle, uint32_t ui_frames, uint32_t video_frames)
90003254:	b508      	push	{r3, lr}
        assert(handle < no_streams);
90003256:	4a03      	ldr	r2, [pc, #12]	@ (90003264 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x1c>)
90003258:	2182      	movs	r1, #130	@ 0x82
9000325a:	4b03      	ldr	r3, [pc, #12]	@ (90003268 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x20>)
9000325c:	4803      	ldr	r0, [pc, #12]	@ (9000326c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x24>)
9000325e:	f01f fcd9 	bl	90022c14 <__assert_func>
90003262:	bf00      	nop
90003264:	90024db8 	.word	0x90024db8
90003268:	90024694 	.word	0x90024694
9000326c:	90024834 	.word	0x90024834

90003270 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:
    return HAL::beginFrame();
90003270:	f00d ba32 	b.w	900106d8 <_ZN8touchgfx3HAL10beginFrameEv>

90003274 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:
    if (frameBufferUpdatedThisFrame)
90003274:	f890 304b 	ldrb.w	r3, [r0, #75]	@ 0x4b
{
90003278:	b510      	push	{r4, lr}
    if (frameBufferUpdatedThisFrame)
9000327a:	b113      	cbz	r3, 90003282 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0xe>
        refreshRequested = true;
9000327c:	4b1a      	ldr	r3, [pc, #104]	@ (900032e8 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x74>)
9000327e:	2201      	movs	r2, #1
90003280:	701a      	strb	r2, [r3, #0]
            if (stream.isPlaying || stream.isShowingOneFrame)
90003282:	4c1a      	ldr	r4, [pc, #104]	@ (900032ec <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x78>)
    HAL::endFrame();
90003284:	f00d fa34 	bl	900106f0 <_ZN8touchgfx3HAL8endFrameEv>
90003288:	f894 3029 	ldrb.w	r3, [r4, #41]	@ 0x29
9000328c:	b913      	cbnz	r3, 90003294 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x20>
9000328e:	f894 302a 	ldrb.w	r3, [r4, #42]	@ 0x2a
90003292:	b14b      	cbz	r3, 900032a8 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x34>
    bool decodeForNextTick(Stream& stream)
    {
        // Running in UI thread

        // Compare tickCount/frameCount to frame_rate_ticks/frame_rate_video
        if ((stream.tickCount * stream.frame_rate_video) >= (stream.frame_rate_ticks * stream.frameCount))
90003294:	69e1      	ldr	r1, [r4, #28]
90003296:	6922      	ldr	r2, [r4, #16]
90003298:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
9000329c:	fb01 f202 	mul.w	r2, r1, r2
900032a0:	fb00 f303 	mul.w	r3, r0, r3
900032a4:	4293      	cmp	r3, r2
900032a6:	d209      	bcs.n	900032bc <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x48>
        firstDrawThisFrame = true;
900032a8:	2301      	movs	r3, #1
        SEM_POST(semDecode);
900032aa:	6c20      	ldr	r0, [r4, #64]	@ 0x40
        firstDrawThisFrame = true;
900032ac:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        SEM_POST(semDecode);
900032b0:	f009 fa8e 	bl	9000c7d0 <osSemaphoreRelease>
        if (uiHasMutex)
900032b4:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
900032b8:	b97b      	cbnz	r3, 900032da <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x66>
}
900032ba:	bd10      	pop	{r4, pc}
        {
            if (allowSkipFrames)
900032bc:	f894 003c 	ldrb.w	r0, [r4, #60]	@ 0x3c
900032c0:	b138      	cbz	r0, 900032d2 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x5e>
            {
                stream.skip_frames = (stream.tickCount * stream.frame_rate_video - stream.frame_rate_ticks * stream.frameCount) / stream.frame_rate_ticks;
900032c2:	1a9b      	subs	r3, r3, r2
900032c4:	fbb3 f2f1 	udiv	r2, r3, r1
                if (stream.skip_frames > 0)
900032c8:	4299      	cmp	r1, r3
                {
                    stream.skip_frames--;
900032ca:	bf98      	it	ls
900032cc:	f102 32ff 	addls.w	r2, r2, #4294967295
900032d0:	6262      	str	r2, [r4, #36]	@ 0x24
                    stream.doDecode = true;
900032d2:	2301      	movs	r3, #1
900032d4:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
900032d8:	e7e6      	b.n	900032a8 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x34>
            MUTEX_UNLOCK(mutexBuffers);
900032da:	6c60      	ldr	r0, [r4, #68]	@ 0x44
900032dc:	f009 f9d8 	bl	9000c690 <osMutexRelease>
            uiHasMutex = false;
900032e0:	2300      	movs	r3, #0
900032e2:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
900032e6:	bd10      	pop	{r4, pc}
900032e8:	24007134 	.word	0x24007134
900032ec:	24007138 	.word	0x24007138

900032f0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
    HAL::flushFrameBuffer(rect);
900032f0:	f00d b9bc 	b.w	9001066c <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>

900032f4 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:
}

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
    return HAL::blockCopy(dest, src, numBytes);
900032f4:	f00d bb17 	b.w	90010926 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>

900032f8 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE>:
        if (firstDrawThisFrame)
900032f8:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
900032fc:	b903      	cbnz	r3, 90003300 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE+0x8>
900032fe:	4770      	bx	lr
    virtual void draw(const Handle handle, const touchgfx::Rect& invalidatedArea, const touchgfx::VideoWidget& widget)
90003300:	b510      	push	{r4, lr}
            MUTEX_LOCK(mutexBuffers);
90003302:	f04f 31ff 	mov.w	r1, #4294967295
90003306:	4604      	mov	r4, r0
90003308:	6c40      	ldr	r0, [r0, #68]	@ 0x44
9000330a:	f009 f99d 	bl	9000c648 <osMutexAcquire>
            firstDrawThisFrame = false;
9000330e:	f44f 7380 	mov.w	r3, #256	@ 0x100
90003312:	f8a4 303d 	strh.w	r3, [r4, #61]	@ 0x3d
    }
90003316:	bd10      	pop	{r4, pc}

90003318 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21unregisterVideoWidgetEm>:
    virtual void unregisterVideoWidget(const Handle handle)
90003318:	b538      	push	{r3, r4, r5, lr}
9000331a:	460c      	mov	r4, r1
9000331c:	4605      	mov	r5, r0
        MUTEX_LOCK(mutexBuffers);
9000331e:	f04f 31ff 	mov.w	r1, #4294967295
90003322:	6c40      	ldr	r0, [r0, #68]	@ 0x44
        streams[handle].isActive = false;
90003324:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
        MUTEX_LOCK(mutexBuffers);
90003328:	f009 f98e 	bl	9000c648 <osMutexAcquire>
        MUTEX_UNLOCK(mutexBuffers);
9000332c:	6c68      	ldr	r0, [r5, #68]	@ 0x44
9000332e:	f009 f9af 	bl	9000c690 <osMutexRelease>
        streams[handle].isActive = false;
90003332:	2300      	movs	r3, #0
90003334:	eb05 0484 	add.w	r4, r5, r4, lsl #2
90003338:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
        if (oneIsActive == false)
9000333c:	f895 3028 	ldrb.w	r3, [r5, #40]	@ 0x28
90003340:	b90b      	cbnz	r3, 90003346 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21unregisterVideoWidgetEm+0x2e>
            topBufferRGB = bufferRGB;
90003342:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
90003344:	63ab      	str	r3, [r5, #56]	@ 0x38
    }
90003346:	bd38      	pop	{r3, r4, r5, pc}

90003348 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:
{
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
90003348:	4814      	ldr	r0, [pc, #80]	@ (9000339c <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x54>)
9000334a:	6943      	ldr	r3, [r0, #20]
9000334c:	03d9      	lsls	r1, r3, #15
9000334e:	d523      	bpl.n	90003398 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x50>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
90003350:	2300      	movs	r3, #0
{
90003352:	b510      	push	{r4, lr}
90003354:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
90003358:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
9000335c:	f8d0 3080 	ldr.w	r3, [r0, #128]	@ 0x80
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
90003360:	f643 74e0 	movw	r4, #16352	@ 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
90003364:	f3c3 3c4e 	ubfx	ip, r3, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
90003368:	f3c3 0ec9 	ubfx	lr, r3, #3, #10
9000336c:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
90003370:	ea0c 0104 	and.w	r1, ip, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
90003374:	4673      	mov	r3, lr
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
90003376:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
      } while (ways-- != 0U);
9000337a:	3b01      	subs	r3, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
9000337c:	f8c0 2274 	str.w	r2, [r0, #628]	@ 0x274
      } while (ways-- != 0U);
90003380:	1c5a      	adds	r2, r3, #1
90003382:	d1f8      	bne.n	90003376 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x2e>
    } while(sets-- != 0U);
90003384:	f1ac 0c20 	sub.w	ip, ip, #32
90003388:	f11c 0f20 	cmn.w	ip, #32
9000338c:	d1f0      	bne.n	90003370 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x28>
9000338e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
90003392:	f3bf 8f6f 	isb	sy
    {
        SCB_CleanInvalidateDCache();
    }
}
90003396:	bd10      	pop	{r4, pc}
90003398:	4770      	bx	lr
9000339a:	bf00      	nop
9000339c:	e000ed00 	.word	0xe000ed00

900033a0 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm>:
    virtual void setCommand(const Handle handle, Command cmd, uint32_t param)
900033a0:	b510      	push	{r4, lr}
        assert(handle < no_streams);
900033a2:	2900      	cmp	r1, #0
900033a4:	d133      	bne.n	9000340e <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x6e>
900033a6:	4604      	mov	r4, r0
        switch (cmd)
900033a8:	2a05      	cmp	r2, #5
900033aa:	d809      	bhi.n	900033c0 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x20>
900033ac:	e8df f002 	tbb	[pc, r2]
900033b0:	27221e0f 	.word	0x27221e0f
900033b4:	0903      	.short	0x0903
            stream.isPlaying = false;
900033b6:	2200      	movs	r2, #0
            stream.seek_to_frame = 1;
900033b8:	2301      	movs	r3, #1
            stream.isPlaying = false;
900033ba:	f880 2029 	strb.w	r2, [r0, #41]	@ 0x29
            stream.seek_to_frame = 1;
900033be:	6203      	str	r3, [r0, #32]
    }
900033c0:	bd10      	pop	{r4, pc}
            stream.repeat = (param > 0);
900033c2:	3b00      	subs	r3, #0
900033c4:	bf18      	it	ne
900033c6:	2301      	movne	r3, #1
900033c8:	f880 302d 	strb.w	r3, [r0, #45]	@ 0x2d
    }
900033cc:	bd10      	pop	{r4, pc}
            if (mjpegDecoders[handle]->hasVideo())
900033ce:	6840      	ldr	r0, [r0, #4]
900033d0:	6803      	ldr	r3, [r0, #0]
900033d2:	691b      	ldr	r3, [r3, #16]
900033d4:	4798      	blx	r3
900033d6:	2800      	cmp	r0, #0
900033d8:	d0f2      	beq.n	900033c0 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x20>
                stream.isPlaying = true;
900033da:	2201      	movs	r2, #1
                stream.frameCount = 0;
900033dc:	2300      	movs	r3, #0
                stream.isPlaying = true;
900033de:	f884 2029 	strb.w	r2, [r4, #41]	@ 0x29
                stream.hasMoreFrames = true; // Assume more frames, lowered on end
900033e2:	f884 202c 	strb.w	r2, [r4, #44]	@ 0x2c
                stream.frameCount = 0;
900033e6:	e9c4 3304 	strd	r3, r3, [r4, #16]
    }
900033ea:	bd10      	pop	{r4, pc}
            stream.isPlaying = false;
900033ec:	2300      	movs	r3, #0
900033ee:	f880 3029 	strb.w	r3, [r0, #41]	@ 0x29
    }
900033f2:	bd10      	pop	{r4, pc}
            stream.frameCount = 0;
900033f4:	2200      	movs	r2, #0
            stream.seek_to_frame = param;
900033f6:	6203      	str	r3, [r0, #32]
            stream.frameCount = 0;
900033f8:	e9c0 2204 	strd	r2, r2, [r0, #16]
    }
900033fc:	bd10      	pop	{r4, pc}
            stream.frameCount = 0;
900033fe:	2200      	movs	r2, #0
            stream.isShowingOneFrame = true;
90003400:	2101      	movs	r1, #1
            stream.seek_to_frame = param;
90003402:	6203      	str	r3, [r0, #32]
            stream.isShowingOneFrame = true;
90003404:	f880 102a 	strb.w	r1, [r0, #42]	@ 0x2a
            stream.frameCount = 0;
90003408:	e9c0 2204 	strd	r2, r2, [r0, #16]
    }
9000340c:	bd10      	pop	{r4, pc}
        assert(handle < no_streams);
9000340e:	4b03      	ldr	r3, [pc, #12]	@ (9000341c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x7c>)
90003410:	21a2      	movs	r1, #162	@ 0xa2
90003412:	4a03      	ldr	r2, [pc, #12]	@ (90003420 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x80>)
90003414:	4803      	ldr	r0, [pc, #12]	@ (90003424 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x84>)
90003416:	f01f fbfd 	bl	90022c14 <__assert_func>
9000341a:	bf00      	nop
9000341c:	90024694 	.word	0x90024694
90003420:	90024f74 	.word	0x90024f74
90003424:	90024834 	.word	0x90024834

90003428 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE>:
    virtual bool updateFrame(const Handle handle, touchgfx::VideoWidget& widget)
90003428:	b510      	push	{r4, lr}
        assert(handle < no_streams);
9000342a:	bb39      	cbnz	r1, 9000347c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x54>
        if (stream.isPlaying)
9000342c:	f890 3029 	ldrb.w	r3, [r0, #41]	@ 0x29
90003430:	4604      	mov	r4, r0
90003432:	b923      	cbnz	r3, 9000343e <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x16>
        if (stream.doInvalidateOnNextTick)
90003434:	f894 302b 	ldrb.w	r3, [r4, #43]	@ 0x2b
90003438:	b963      	cbnz	r3, 90003454 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x2c>
        return true;
9000343a:	2001      	movs	r0, #1
    }
9000343c:	bd10      	pop	{r4, pc}
        return vSyncForFrame;
9000343e:	4912      	ldr	r1, [pc, #72]	@ (90003488 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x60>)
            stream.tickCount += HAL::getInstance()->getLCDRefreshCount();
90003440:	6943      	ldr	r3, [r0, #20]
90003442:	6809      	ldr	r1, [r1, #0]
90003444:	f891 1067 	ldrb.w	r1, [r1, #103]	@ 0x67
90003448:	440b      	add	r3, r1
9000344a:	6143      	str	r3, [r0, #20]
        if (stream.doInvalidateOnNextTick)
9000344c:	f894 302b 	ldrb.w	r3, [r4, #43]	@ 0x2b
90003450:	2b00      	cmp	r3, #0
90003452:	d0f2      	beq.n	9000343a <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x12>
     *
     * @param [in] videoBuffer Video buffer.
     */
    void setVideoBuffer(uint8_t* const videoBuffer)
    {
        buffer = videoBuffer;
90003454:	68a1      	ldr	r1, [r4, #8]
            widget.invalidate();
90003456:	4610      	mov	r0, r2
90003458:	6813      	ldr	r3, [r2, #0]
9000345a:	695b      	ldr	r3, [r3, #20]
9000345c:	6311      	str	r1, [r2, #48]	@ 0x30
9000345e:	4798      	blx	r3
            stream.doInvalidateOnNextTick = false;
90003460:	2300      	movs	r3, #0
            if (!stream.hasMoreFrames && !stream.repeat)
90003462:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
            stream.doInvalidateOnNextTick = false;
90003466:	f884 302b 	strb.w	r3, [r4, #43]	@ 0x2b
            if (!stream.hasMoreFrames && !stream.repeat)
9000346a:	2800      	cmp	r0, #0
9000346c:	d1e5      	bne.n	9000343a <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x12>
9000346e:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
90003472:	2b00      	cmp	r3, #0
90003474:	d1e2      	bne.n	9000343c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x14>
                stream.isPlaying = false;
90003476:	f884 0029 	strb.w	r0, [r4, #41]	@ 0x29
    }
9000347a:	bd10      	pop	{r4, pc}
        assert(handle < no_streams);
9000347c:	4b03      	ldr	r3, [pc, #12]	@ (9000348c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x64>)
9000347e:	21d0      	movs	r1, #208	@ 0xd0
90003480:	4a03      	ldr	r2, [pc, #12]	@ (90003490 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x68>)
90003482:	4804      	ldr	r0, [pc, #16]	@ (90003494 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x6c>)
90003484:	f01f fbc6 	bl	90022c14 <__assert_func>
90003488:	2402630c 	.word	0x2402630c
9000348c:	90024694 	.word	0x90024694
90003490:	90025148 	.word	0x90025148
90003494:	90024834 	.word	0x90024834

90003498 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE>:
    {
        // Running in UI thread

        for (uint32_t i = 0; i < no_streams; i++)
        {
            if (streams[i].isActive == false)
90003498:	f890 3028 	ldrb.w	r3, [r0, #40]	@ 0x28
    virtual Handle registerVideoWidget(touchgfx::VideoWidget& widget)
9000349c:	b570      	push	{r4, r5, r6, lr}
            if (streams[i].isActive == false)
9000349e:	b9fb      	cbnz	r3, 900034e0 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x48>
            {
                // Reset stream parameters
                streams[i] = Stream();
900034a0:	2201      	movs	r2, #1
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
900034a2:	6b85      	ldr	r5, [r0, #56]	@ 0x38
                streams[i] = Stream();
900034a4:	60c3      	str	r3, [r0, #12]
900034a6:	f8a0 202d 	strh.w	r2, [r0, #45]	@ 0x2d
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
900034aa:	f505 2487 	add.w	r4, r5, #276480	@ 0x43800
        streams[handle].isActive = true;
900034ae:	f880 2028 	strb.w	r2, [r0, #40]	@ 0x28
                streams[i] = Stream();
900034b2:	6103      	str	r3, [r0, #16]
900034b4:	6143      	str	r3, [r0, #20]
900034b6:	6183      	str	r3, [r0, #24]
900034b8:	61c3      	str	r3, [r0, #28]
900034ba:	6203      	str	r3, [r0, #32]
900034bc:	6243      	str	r3, [r0, #36]	@ 0x24
900034be:	f8c0 3029 	str.w	r3, [r0, #41]	@ 0x29
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
900034c2:	e9d0 260c 	ldrd	r2, r6, [r0, #48]	@ 0x30
900034c6:	4432      	add	r2, r6
900034c8:	4294      	cmp	r4, r2
900034ca:	d810      	bhi.n	900034ee <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x56>
     * @param height Height of the videoBuffer in pixels
     */
    void setVideoBufferFormat(Bitmap::BitmapFormat bufferFormat, int16_t width, int16_t height)
    {
        format = bufferFormat;
        bufferWidth = width;
900034cc:	4a0b      	ldr	r2, [pc, #44]	@ (900034fc <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x64>)
        decodeBuffers[handle] = (uint32_t*)topBufferRGB;
900034ce:	6085      	str	r5, [r0, #8]
        topBufferRGB += sizeOfOneDecodeBuffer;
900034d0:	6384      	str	r4, [r0, #56]	@ 0x38
    }
900034d2:	4618      	mov	r0, r3
        format = bufferFormat;
900034d4:	f881 3034 	strb.w	r3, [r1, #52]	@ 0x34
        bufferWidth = width;
900034d8:	f8c1 2036 	str.w	r2, [r1, #54]	@ 0x36
        buffer = videoBuffer;
900034dc:	630b      	str	r3, [r1, #48]	@ 0x30
900034de:	bd70      	pop	{r4, r5, r6, pc}

                return static_cast<VideoController::Handle>(i);
            }
        }

        assert(0 && "Unable to find free video stream handle!");
900034e0:	4b07      	ldr	r3, [pc, #28]	@ (90003500 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x68>)
900034e2:	f240 11c5 	movw	r1, #453	@ 0x1c5
900034e6:	4a07      	ldr	r2, [pc, #28]	@ (90003504 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x6c>)
900034e8:	4807      	ldr	r0, [pc, #28]	@ (90003508 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x70>)
900034ea:	f01f fb93 	bl	90022c14 <__assert_func>
            assert(0 && "registerVideoWidget: Unable to allocate RGB buffer!");
900034ee:	4b07      	ldr	r3, [pc, #28]	@ (9000350c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x74>)
900034f0:	2152      	movs	r1, #82	@ 0x52
900034f2:	4a07      	ldr	r2, [pc, #28]	@ (90003510 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x78>)
900034f4:	4804      	ldr	r0, [pc, #16]	@ (90003508 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x70>)
900034f6:	f01f fb8d 	bl	90022c14 <__assert_func>
900034fa:	bf00      	nop
900034fc:	012001e0 	.word	0x012001e0
90003500:	900252e8 	.word	0x900252e8
90003504:	90025318 	.word	0x90025318
90003508:	90024834 	.word	0x90024834
9000350c:	900254a0 	.word	0x900254a0
90003510:	900254dc 	.word	0x900254dc

90003514 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
90003514:	4b08      	ldr	r3, [pc, #32]	@ (90003538 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv+0x24>)
90003516:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
9000351a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  __ASM volatile ("dsb 0xF":::"memory");
9000351e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
90003522:	f3bf 8f6f 	isb	sy
90003526:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
9000352a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  __ASM volatile ("dsb 0xF":::"memory");
9000352e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
90003532:	f3bf 8f6f 	isb	sy
}
90003536:	4770      	bx	lr
90003538:	e000e100 	.word	0xe000e100

9000353c <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
9000353c:	4b03      	ldr	r3, [pc, #12]	@ (9000354c <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv+0x10>)
9000353e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
90003542:	609a      	str	r2, [r3, #8]
90003544:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
90003548:	609a      	str	r2, [r3, #8]
}
9000354a:	4770      	bx	lr
9000354c:	e000e100 	.word	0xe000e100

90003550 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
{
90003550:	b538      	push	{r3, r4, r5, lr}
90003552:	4604      	mov	r4, r0
    HAL::initialize();
90003554:	f00d f8d9 	bl	9001070a <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
90003558:	6823      	ldr	r3, [r4, #0]
9000355a:	6e5d      	ldr	r5, [r3, #100]	@ 0x64
9000355c:	f010 fb3e 	bl	90013bdc <_ZN8touchgfx11Application11getInstanceEv>
90003560:	4601      	mov	r1, r0
90003562:	4620      	mov	r0, r4
90003564:	47a8      	blx	r5
    setFrameBufferStartAddresses((void*)frameBuf, (void*)(frameBuf + sizeof(frameBuf) / (sizeof(uint32_t) * 2)), (void*)0);
90003566:	6823      	ldr	r3, [r4, #0]
90003568:	4a16      	ldr	r2, [pc, #88]	@ (900035c4 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x74>)
9000356a:	f8d3 5088 	ldr.w	r5, [r3, #136]	@ 0x88
9000356e:	4295      	cmp	r5, r2
90003570:	d11c      	bne.n	900035ac <_ZN20TouchGFXGeneratedHAL10initializeEv+0x5c>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
90003572:	4a15      	ldr	r2, [pc, #84]	@ (900035c8 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x78>)
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
90003574:	2501      	movs	r5, #1
        setAnimationStorage(animationStorage);
90003576:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
9000357a:	f502 317f 	add.w	r1, r2, #261120	@ 0x3fc00
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
9000357e:	4813      	ldr	r0, [pc, #76]	@ (900035cc <_ZN20TouchGFXGeneratedHAL10initializeEv+0x7c>)
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
90003580:	e9c4 210f 	strd	r2, r1, [r4, #60]	@ 0x3c
        setAnimationStorage(animationStorage);
90003584:	4a12      	ldr	r2, [pc, #72]	@ (900035d0 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x80>)
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
90003586:	7005      	strb	r5, [r0, #0]
90003588:	4293      	cmp	r3, r2
9000358a:	d116      	bne.n	900035ba <_ZN20TouchGFXGeneratedHAL10initializeEv+0x6a>
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
9000358c:	2300      	movs	r3, #0
        USE_ANIMATION_STORAGE = animationStorage != 0;
9000358e:	4a11      	ldr	r2, [pc, #68]	@ (900035d4 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x84>)
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
90003590:	6463      	str	r3, [r4, #68]	@ 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
90003592:	7013      	strb	r3, [r2, #0]
    void addDMA(touchgfx::DMA_Interface& dma)
    {
        pDma = &dma;
90003594:	6864      	ldr	r4, [r4, #4]
        sizeBufferRGB = sizeOfBuffer;
90003596:	f44f 2087 	mov.w	r0, #276480	@ 0x43800
        mjpegDecoders[index] = &decoder;
9000359a:	4b0f      	ldr	r3, [pc, #60]	@ (900035d8 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x88>)
9000359c:	490f      	ldr	r1, [pc, #60]	@ (900035dc <_ZN20TouchGFXGeneratedHAL10initializeEv+0x8c>)
        bufferRGB = buffer;
9000359e:	4a10      	ldr	r2, [pc, #64]	@ (900035e0 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x90>)
900035a0:	644c      	str	r4, [r1, #68]	@ 0x44
        mjpegDecoders[index] = &decoder;
900035a2:	6059      	str	r1, [r3, #4]
        bufferRGB = buffer;
900035a4:	631a      	str	r2, [r3, #48]	@ 0x30
        sizeBufferRGB = sizeOfBuffer;
900035a6:	e9c3 020d 	strd	r0, r2, [r3, #52]	@ 0x34
}
900035aa:	bd38      	pop	{r3, r4, r5, pc}
    setFrameBufferStartAddresses((void*)frameBuf, (void*)(frameBuf + sizeof(frameBuf) / (sizeof(uint32_t) * 2)), (void*)0);
900035ac:	4a0d      	ldr	r2, [pc, #52]	@ (900035e4 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x94>)
900035ae:	2300      	movs	r3, #0
900035b0:	4620      	mov	r0, r4
900035b2:	f5a2 317f 	sub.w	r1, r2, #261120	@ 0x3fc00
900035b6:	47a8      	blx	r5
900035b8:	e7ec      	b.n	90003594 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x44>
        setAnimationStorage(animationStorage);
900035ba:	2100      	movs	r1, #0
900035bc:	4620      	mov	r0, r4
900035be:	4798      	blx	r3
900035c0:	e7e8      	b.n	90003594 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x44>
900035c2:	bf00      	nop
900035c4:	90001609 	.word	0x90001609
900035c8:	d003fc00 	.word	0xd003fc00
900035cc:	2402630a 	.word	0x2402630a
900035d0:	9000148d 	.word	0x9000148d
900035d4:	2402630b 	.word	0x2402630b
900035d8:	24007138 	.word	0x24007138
900035dc:	24007180 	.word	0x24007180
900035e0:	d00bf400 	.word	0xd00bf400
900035e4:	d007f800 	.word	0xd007f800

900035e8 <HAL_LTDC_LineEventCallback>:
}

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
900035e8:	b510      	push	{r4, lr}
        return instance;
900035ea:	4c14      	ldr	r4, [pc, #80]	@ (9000363c <HAL_LTDC_LineEventCallback+0x54>)
        if (!HAL::getInstance())
900035ec:	6823      	ldr	r3, [r4, #0]
900035ee:	b323      	cbz	r3, 9000363a <HAL_LTDC_LineEventCallback+0x52>
        {
            return;
        }

        if (LTDC->LIPCR == lcd_int_active_line)
900035f0:	4b13      	ldr	r3, [pc, #76]	@ (90003640 <HAL_LTDC_LineEventCallback+0x58>)
900035f2:	4a14      	ldr	r2, [pc, #80]	@ (90003644 <HAL_LTDC_LineEventCallback+0x5c>)
900035f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
900035f6:	8811      	ldrh	r1, [r2, #0]
900035f8:	428b      	cmp	r3, r1
900035fa:	d00a      	beq.n	90003612 <HAL_LTDC_LineEventCallback+0x2a>
            GPIO::set(GPIO::VSYNC_FREQ);
        }
        else
        {
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
900035fc:	f006 fbe2 	bl	90009dc4 <HAL_LTDC_ProgramLineEvent>
90003600:	6820      	ldr	r0, [r4, #0]
        allowDMATransfers();
90003602:	6803      	ldr	r3, [r0, #0]
90003604:	6a1b      	ldr	r3, [r3, #32]
90003606:	4798      	blx	r3

            // Signal to the framework that display update has finished.
            HAL::getInstance()->frontPorchEntered();
            GPIO::clear(GPIO::VSYNC_FREQ);
90003608:	2000      	movs	r0, #0
        }
    }
9000360a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            GPIO::clear(GPIO::VSYNC_FREQ);
9000360e:	f7fd bee1 	b.w	900013d4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
90003612:	4b0d      	ldr	r3, [pc, #52]	@ (90003648 <HAL_LTDC_LineEventCallback+0x60>)
90003614:	8819      	ldrh	r1, [r3, #0]
90003616:	f006 fbd5 	bl	90009dc4 <HAL_LTDC_ProgramLineEvent>
        return instance;
9000361a:	6822      	ldr	r2, [r4, #0]
        vSyncCnt++;
9000361c:	f892 3066 	ldrb.w	r3, [r2, #102]	@ 0x66
90003620:	3301      	adds	r3, #1
90003622:	f882 3066 	strb.w	r3, [r2, #102]	@ 0x66
            OSWrappers::signalVSync();
90003626:	f7ff f8db 	bl	900027e0 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            HAL::getInstance()->swapFrameBuffers();
9000362a:	6820      	ldr	r0, [r4, #0]
9000362c:	f00d fdc0 	bl	900111b0 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
90003630:	2000      	movs	r0, #0
    }
90003632:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            GPIO::set(GPIO::VSYNC_FREQ);
90003636:	f7fd be99 	b.w	9000136c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
    }
9000363a:	bd10      	pop	{r4, pc}
9000363c:	2402630c 	.word	0x2402630c
90003640:	50001000 	.word	0x50001000
90003644:	24007132 	.word	0x24007132
90003648:	24007130 	.word	0x24007130

9000364c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv>:
    void decoderTaskEntry()
9000364c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
90003650:	f8df 80b8 	ldr.w	r8, [pc, #184]	@ 9000370c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xc0>
90003654:	b083      	sub	sp, #12
                    stream.doInvalidateOnNextTick = true;
90003656:	2601      	movs	r6, #1
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
90003658:	f44f 7770 	mov.w	r7, #960	@ 0x3c0
    void decoderTaskEntry()
9000365c:	4604      	mov	r4, r0
9000365e:	e023      	b.n	900036a8 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x5c>
                        decoder->gotoFrame(stream.seek_to_frame);
90003660:	6a53      	ldr	r3, [r2, #36]	@ 0x24
90003662:	4628      	mov	r0, r5
90003664:	4798      	blx	r3
                        stream.seek_to_frame = 0;
90003666:	2300      	movs	r3, #0
90003668:	682a      	ldr	r2, [r5, #0]
9000366a:	6223      	str	r3, [r4, #32]
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
9000366c:	9700      	str	r7, [sp, #0]
9000366e:	f44f 7390 	mov.w	r3, #288	@ 0x120
90003672:	f8d2 9014 	ldr.w	r9, [r2, #20]
90003676:	4628      	mov	r0, r5
90003678:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
9000367c:	68a1      	ldr	r1, [r4, #8]
9000367e:	47c8      	blx	r9
                    stream.frameCount++;
90003680:	6923      	ldr	r3, [r4, #16]
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
90003682:	f884 002c 	strb.w	r0, [r4, #44]	@ 0x2c
                    stream.frameCount++;
90003686:	3301      	adds	r3, #1
90003688:	6123      	str	r3, [r4, #16]
                    if (stream.hasMoreFrames)
9000368a:	2800      	cmp	r0, #0
9000368c:	d034      	beq.n	900036f8 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xac>
                        stream.frameNumber = decoder->getCurrentFrameNumber() - 1; // Points to frame after this
9000368e:	682b      	ldr	r3, [r5, #0]
90003690:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90003692:	4543      	cmp	r3, r8
90003694:	d132      	bne.n	900036fc <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xb0>
        return frameNumber;
90003696:	696b      	ldr	r3, [r5, #20]
90003698:	3b01      	subs	r3, #1
                    stream.doDecode = false;
9000369a:	2200      	movs	r2, #0
                        stream.frameNumber = decoder->getCurrentFrameNumber() - 1; // Points to frame after this
9000369c:	60e3      	str	r3, [r4, #12]
                    stream.doDecode = false;
9000369e:	f884 202e 	strb.w	r2, [r4, #46]	@ 0x2e
            MUTEX_UNLOCK(mutexBuffers);
900036a2:	6c60      	ldr	r0, [r4, #68]	@ 0x44
900036a4:	f008 fff4 	bl	9000c690 <osMutexRelease>
            SEM_WAIT(semDecode);
900036a8:	f04f 31ff 	mov.w	r1, #4294967295
900036ac:	6c20      	ldr	r0, [r4, #64]	@ 0x40
900036ae:	f009 f85d 	bl	9000c76c <osSemaphoreAcquire>
            MUTEX_LOCK(mutexBuffers);
900036b2:	f04f 31ff 	mov.w	r1, #4294967295
900036b6:	6c60      	ldr	r0, [r4, #68]	@ 0x44
900036b8:	f008 ffc6 	bl	9000c648 <osMutexAcquire>
                if (stream.doDecode)
900036bc:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
900036c0:	2b00      	cmp	r3, #0
900036c2:	d0ee      	beq.n	900036a2 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x56>
                    MJPEGDecoder* const decoder = mjpegDecoders[i];
900036c4:	6865      	ldr	r5, [r4, #4]
                    if (stream.seek_to_frame > 0)
900036c6:	6a21      	ldr	r1, [r4, #32]
                        decoder->gotoFrame(stream.seek_to_frame);
900036c8:	682a      	ldr	r2, [r5, #0]
                    stream.doInvalidateOnNextTick = true;
900036ca:	f884 602b 	strb.w	r6, [r4, #43]	@ 0x2b
                    if (stream.seek_to_frame > 0)
900036ce:	2900      	cmp	r1, #0
900036d0:	d1c6      	bne.n	90003660 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x14>
                        if (stream.skip_frames > 0)
900036d2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
900036d4:	2b00      	cmp	r3, #0
900036d6:	d0c9      	beq.n	9000366c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x20>
                            decoder->gotoFrame(decoder->getCurrentFrameNumber() + stream.skip_frames);
900036d8:	e9d2 9109 	ldrd	r9, r1, [r2, #36]	@ 0x24
900036dc:	4541      	cmp	r1, r8
900036de:	d111      	bne.n	90003704 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xb8>
900036e0:	6968      	ldr	r0, [r5, #20]
900036e2:	18c1      	adds	r1, r0, r3
900036e4:	4628      	mov	r0, r5
900036e6:	47c8      	blx	r9
                            stream.frameCount += stream.skip_frames;
900036e8:	6923      	ldr	r3, [r4, #16]
900036ea:	6a60      	ldr	r0, [r4, #36]	@ 0x24
                            stream.skip_frames = 0;
900036ec:	2100      	movs	r1, #0
900036ee:	682a      	ldr	r2, [r5, #0]
                            stream.frameCount += stream.skip_frames;
900036f0:	4403      	add	r3, r0
                            stream.skip_frames = 0;
900036f2:	6261      	str	r1, [r4, #36]	@ 0x24
                            stream.frameCount += stream.skip_frames;
900036f4:	6123      	str	r3, [r4, #16]
900036f6:	e7b9      	b.n	9000366c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x20>
900036f8:	2301      	movs	r3, #1
900036fa:	e7ce      	b.n	9000369a <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x4e>
                        stream.frameNumber = decoder->getCurrentFrameNumber() - 1; // Points to frame after this
900036fc:	4628      	mov	r0, r5
900036fe:	4798      	blx	r3
90003700:	4603      	mov	r3, r0
90003702:	e7c9      	b.n	90003698 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x4c>
                            decoder->gotoFrame(decoder->getCurrentFrameNumber() + stream.skip_frames);
90003704:	4628      	mov	r0, r5
90003706:	4788      	blx	r1
90003708:	6a63      	ldr	r3, [r4, #36]	@ 0x24
9000370a:	e7ea      	b.n	900036e2 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x96>
9000370c:	9000177d 	.word	0x9000177d

90003710 <videoTaskFunc>:
    videoController.decoderTaskEntry();
90003710:	4801      	ldr	r0, [pc, #4]	@ (90003718 <videoTaskFunc+0x8>)
{
90003712:	b508      	push	{r3, lr}
    videoController.decoderTaskEntry();
90003714:	f7ff ff9a 	bl	9000364c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv>
90003718:	24007138 	.word	0x24007138

9000371c <_GLOBAL__sub_I_mjpegdecoder1>:
}
9000371c:	b538      	push	{r3, r4, r5, lr}
HardwareMJPEGDecoder mjpegdecoder1;
9000371e:	4815      	ldr	r0, [pc, #84]	@ (90003774 <_GLOBAL__sub_I_mjpegdecoder1+0x58>)
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
90003720:	2500      	movs	r5, #0
90003722:	f7fe fc3d 	bl	90001fa0 <_ZN20HardwareMJPEGDecoderC1Ev>
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
90003726:	4c14      	ldr	r4, [pc, #80]	@ (90003778 <_GLOBAL__sub_I_mjpegdecoder1+0x5c>)
90003728:	4914      	ldr	r1, [pc, #80]	@ (9000377c <_GLOBAL__sub_I_mjpegdecoder1+0x60>)
            doInvalidateOnNextTick(false), hasMoreFrames(false), repeat(true), doDecode(false) {}
9000372a:	f44f 7380 	mov.w	r3, #256	@ 0x100
        semDecode = SEM_CREATE(); // Binary semaphore
9000372e:	462a      	mov	r2, r5
90003730:	2001      	movs	r0, #1
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
90003732:	6021      	str	r1, [r4, #0]
        semDecode = SEM_CREATE(); // Binary semaphore
90003734:	4629      	mov	r1, r5
            doInvalidateOnNextTick(false), hasMoreFrames(false), repeat(true), doDecode(false) {}
90003736:	85a3      	strh	r3, [r4, #44]	@ 0x2c
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
90003738:	87a3      	strh	r3, [r4, #60]	@ 0x3c
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
9000373a:	60e5      	str	r5, [r4, #12]
            isActive(false), isPlaying(false), isShowingOneFrame(false),
9000373c:	62a5      	str	r5, [r4, #40]	@ 0x28
            doInvalidateOnNextTick(false), hasMoreFrames(false), repeat(true), doDecode(false) {}
9000373e:	f884 502e 	strb.w	r5, [r4, #46]	@ 0x2e
        : VideoController(), bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0),
90003742:	63a5      	str	r5, [r4, #56]	@ 0x38
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
90003744:	f884 503e 	strb.w	r5, [r4, #62]	@ 0x3e
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
90003748:	e9c4 5504 	strd	r5, r5, [r4, #16]
9000374c:	e9c4 5506 	strd	r5, r5, [r4, #24]
            seek_to_frame(0), skip_frames(0),
90003750:	e9c4 5508 	strd	r5, r5, [r4, #32]
        : VideoController(), bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0),
90003754:	e9c4 550c 	strd	r5, r5, [r4, #48]	@ 0x30
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
90003758:	e9c4 5510 	strd	r5, r5, [r4, #64]	@ 0x40
        memset(mjpegDecoders, 0, sizeof(mjpegDecoders));
9000375c:	e9c4 5501 	strd	r5, r5, [r4, #4]
        semDecode = SEM_CREATE(); // Binary semaphore
90003760:	f008 ffb8 	bl	9000c6d4 <osSemaphoreNew>
90003764:	4603      	mov	r3, r0
        mutexBuffers = MUTEX_CREATE();
90003766:	4628      	mov	r0, r5
        semDecode = SEM_CREATE(); // Binary semaphore
90003768:	6423      	str	r3, [r4, #64]	@ 0x40
        mutexBuffers = MUTEX_CREATE();
9000376a:	f008 ff2b 	bl	9000c5c4 <osMutexNew>
9000376e:	6460      	str	r0, [r4, #68]	@ 0x44
}
90003770:	bd38      	pop	{r3, r4, r5, pc}
90003772:	bf00      	nop
90003774:	24007180 	.word	0x24007180
90003778:	24007138 	.word	0x24007138
9000377c:	90025688 	.word	0x90025688

90003780 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks>:
static uint32_t TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
90003780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int32_t c_red, c_blue, c_green;

  uint8_t *pOutAddr, *pOutAddr2;
  uint8_t *pChrom, *pLum;

  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
90003784:	4c7b      	ldr	r4, [pc, #492]	@ (90003974 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1f4>)
{
90003786:	4616      	mov	r6, r2
90003788:	b08f      	sub	sp, #60	@ 0x3c
  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
9000378a:	fba4 4203 	umull	r4, r2, r4, r3
  currentMCU = BlockIndex;

  while(currentMCU < (numberMCU + BlockIndex))
9000378e:	eb06 2c12 	add.w	ip, r6, r2, lsr #8
  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
90003792:	0a13      	lsrs	r3, r2, #8
  while(currentMCU < (numberMCU + BlockIndex))
90003794:	45b4      	cmp	ip, r6
90003796:	f240 80e8 	bls.w	9000396a <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1ea>
  {
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
9000379a:	4a77      	ldr	r2, [pc, #476]	@ (90003978 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1f8>)
9000379c:	468e      	mov	lr, r1
9000379e:	930d      	str	r3, [sp, #52]	@ 0x34
900037a0:	4633      	mov	r3, r6
900037a2:	6a51      	ldr	r1, [r2, #36]	@ 0x24
900037a4:	46f2      	mov	sl, lr
900037a6:	4f75      	ldr	r7, [pc, #468]	@ (9000397c <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1fc>)
900037a8:	f8df 81dc 	ldr.w	r8, [pc, #476]	@ 90003988 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x208>
900037ac:	f8df b1dc 	ldr.w	fp, [pc, #476]	@ 9000398c <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x20c>
900037b0:	e9cd 1c0b 	strd	r1, ip, [sp, #44]	@ 0x2c
900037b4:	4684      	mov	ip, r0
900037b6:	e009      	b.n	900037cc <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x4c>

        refline += 2*JPEG_ConvertorParams.ScaledWidth;
      }
    }

    pInBuffer +=  YCBCR_420_BLOCK_SIZE;
900037b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
900037ba:	4682      	mov	sl, r0
  while(currentMCU < (numberMCU + BlockIndex))
900037bc:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
    pInBuffer +=  YCBCR_420_BLOCK_SIZE;
900037be:	f8dd c024 	ldr.w	ip, [sp, #36]	@ 0x24
  while(currentMCU < (numberMCU + BlockIndex))
900037c2:	429a      	cmp	r2, r3
    pInBuffer +=  YCBCR_420_BLOCK_SIZE;
900037c4:	f50c 7cc0 	add.w	ip, ip, #384	@ 0x180
  while(currentMCU < (numberMCU + BlockIndex))
900037c8:	f000 80ca 	beq.w	90003960 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1e0>
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
900037cc:	011a      	lsls	r2, r3, #4
900037ce:	980b      	ldr	r0, [sp, #44]	@ 0x2c
900037d0:	3301      	adds	r3, #1
    pChrom = pInBuffer + 256; /* pChroma = pInBuffer + 4*64 */
900037d2:	f50c 7580 	add.w	r5, ip, #256	@ 0x100
900037d6:	4666      	mov	r6, ip
900037d8:	f8cd c024 	str.w	ip, [sp, #36]	@ 0x24
900037dc:	930a      	str	r3, [sp, #40]	@ 0x28
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
900037de:	fbb2 f1f0 	udiv	r1, r2, r0
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
900037e2:	fb00 2211 	mls	r2, r0, r1, r2
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
900037e6:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
900037ea:	4650      	mov	r0, sl
900037ec:	0052      	lsls	r2, r2, #1
900037ee:	eb02 2181 	add.w	r1, r2, r1, lsl #10
    for(i= 0; i <  16; i+=2)
900037f2:	2200      	movs	r2, #0
900037f4:	4614      	mov	r4, r2
900037f6:	460a      	mov	r2, r1
900037f8:	4621      	mov	r1, r4
      if(refline < JPEG_ConvertorParams.ScaledWidth * 288)
900037fa:	f5b2 2f87 	cmp.w	r2, #276480	@ 0x43800
900037fe:	d2db      	bcs.n	900037b8 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x38>
        pOutAddr = pOutBuffer + refline;
90003800:	1884      	adds	r4, r0, r2
90003802:	46b1      	mov	r9, r6
90003804:	462b      	mov	r3, r5
90003806:	9008      	str	r0, [sp, #32]
90003808:	f104 0a30 	add.w	sl, r4, #48	@ 0x30
9000380c:	f104 0e10 	add.w	lr, r4, #16
90003810:	e9cd 6204 	strd	r6, r2, [sp, #16]
90003814:	e9cd 1506 	strd	r1, r5, [sp, #24]
90003818:	f8cd a00c 	str.w	sl, [sp, #12]
9000381c:	f50e 766c 	add.w	r6, lr, #944	@ 0x3b0
90003820:	f1ae 0510 	sub.w	r5, lr, #16
          for(j=0; j < 8; j+=2)
90003824:	f103 3cff 	add.w	ip, r3, #4294967295
90003828:	464c      	mov	r4, r9
9000382a:	e9cd 9301 	strd	r9, r3, [sp, #4]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
9000382e:	f81c 2f01 	ldrb.w	r2, [ip, #1]!
            pOutAddr += JPEG_BYTES_PER_PIXEL * 2;
90003832:	3504      	adds	r5, #4
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90003834:	4852      	ldr	r0, [pc, #328]	@ (90003980 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x200>)
          for(j=0; j < 8; j+=2)
90003836:	3402      	adds	r4, #2
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90003838:	f89c 1040 	ldrb.w	r1, [ip, #64]	@ 0x40
            pOutAddr2 += JPEG_BYTES_PER_PIXEL * 2;
9000383c:	3604      	adds	r6, #4
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
9000383e:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
          for(j=0; j < 8; j+=2)
90003842:	4575      	cmp	r5, lr
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90003844:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90003848:	f857 2021 	ldr.w	r2, [r7, r1, lsl #2]
            ycomp = (int32_t)(*(pLum +j));
9000384c:	f814 9c02 	ldrb.w	r9, [r4, #-2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90003850:	4458      	add	r0, fp
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90003852:	4413      	add	r3, r2
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90003854:	4a4b      	ldr	r2, [pc, #300]	@ (90003984 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x204>)
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90003856:	eb0b 4323 	add.w	r3, fp, r3, asr #16
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
9000385a:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
9000385e:	eb00 0209 	add.w	r2, r0, r9
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003862:	4459      	add	r1, fp
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90003864:	eb03 0a09 	add.w	sl, r3, r9
90003868:	f892 2100 	ldrb.w	r2, [r2, #256]	@ 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000386c:	4489      	add	r9, r1
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000386e:	f89a a100 	ldrb.w	sl, [sl, #256]	@ 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003872:	f899 9100 	ldrb.w	r9, [r9, #256]	@ 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90003876:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000387a:	ea4f 09d9 	mov.w	r9, r9, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000387e:	ea4f 1a4a 	mov.w	sl, sl, lsl #5
90003882:	ea4a 2ac9 	orr.w	sl, sl, r9, lsl #11
90003886:	ea4a 0ad2 	orr.w	sl, sl, r2, lsr #3
            *(__IO uint16_t *)pOutAddr =
9000388a:	f825 ac04 	strh.w	sl, [r5, #-4]
            ycomp = (int32_t)(*(pLum +j +1));
9000388e:	f814 9c01 	ldrb.w	r9, [r4, #-1]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90003892:	eb03 0209 	add.w	r2, r3, r9
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003896:	eb01 0a09 	add.w	sl, r1, r9
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
9000389a:	4481      	add	r9, r0
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000389c:	f892 2100 	ldrb.w	r2, [r2, #256]	@ 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900038a0:	f89a a100 	ldrb.w	sl, [sl, #256]	@ 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900038a4:	ea4f 0292 	mov.w	r2, r2, lsr #2
900038a8:	f899 9100 	ldrb.w	r9, [r9, #256]	@ 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900038ac:	ea4f 0ada 	mov.w	sl, sl, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900038b0:	ea4f 1242 	mov.w	r2, r2, lsl #5
900038b4:	ea42 22ca 	orr.w	r2, r2, sl, lsl #11
900038b8:	ea42 02d9 	orr.w	r2, r2, r9, lsr #3
            *((__IO uint16_t *)(pOutAddr + 2)) =
900038bc:	f825 2c02 	strh.w	r2, [r5, #-2]
            ycomp = (int32_t)(*(pLum +j +8));
900038c0:	f894 9006 	ldrb.w	r9, [r4, #6]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900038c4:	eb03 0209 	add.w	r2, r3, r9
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900038c8:	eb01 0a09 	add.w	sl, r1, r9
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
900038cc:	4481      	add	r9, r0
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900038ce:	f892 2100 	ldrb.w	r2, [r2, #256]	@ 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900038d2:	f89a a100 	ldrb.w	sl, [sl, #256]	@ 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900038d6:	ea4f 0292 	mov.w	r2, r2, lsr #2
900038da:	f899 9100 	ldrb.w	r9, [r9, #256]	@ 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900038de:	ea4f 0ada 	mov.w	sl, sl, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900038e2:	ea4f 1242 	mov.w	r2, r2, lsl #5
900038e6:	ea42 22ca 	orr.w	r2, r2, sl, lsl #11
900038ea:	ea42 02d9 	orr.w	r2, r2, r9, lsr #3
            *(__IO uint16_t *)pOutAddr2 =
900038ee:	f826 2c04 	strh.w	r2, [r6, #-4]
            ycomp = (int32_t)(*(pLum +j +8 +1));
900038f2:	79e2      	ldrb	r2, [r4, #7]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900038f4:	4413      	add	r3, r2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900038f6:	4411      	add	r1, r2
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
900038f8:	4402      	add	r2, r0
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900038fa:	f893 3100 	ldrb.w	r3, [r3, #256]	@ 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900038fe:	f891 1100 	ldrb.w	r1, [r1, #256]	@ 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90003902:	ea4f 0393 	mov.w	r3, r3, lsr #2
90003906:	f892 2100 	ldrb.w	r2, [r2, #256]	@ 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000390a:	ea4f 01d1 	mov.w	r1, r1, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000390e:	ea4f 1343 	mov.w	r3, r3, lsl #5
90003912:	ea43 23c1 	orr.w	r3, r3, r1, lsl #11
90003916:	ea43 03d2 	orr.w	r3, r3, r2, lsr #3
            *((__IO uint16_t *)(pOutAddr2 +2)) =
9000391a:	f826 3c02 	strh.w	r3, [r6, #-2]
          for(j=0; j < 8; j+=2)
9000391e:	d186      	bne.n	9000382e <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xae>
        for(k= 0; k<2; k++)
90003920:	f105 0e10 	add.w	lr, r5, #16
90003924:	9a03      	ldr	r2, [sp, #12]
90003926:	e9dd 9301 	ldrd	r9, r3, [sp, #4]
9000392a:	4596      	cmp	lr, r2
            pChrom++;
9000392c:	f103 0304 	add.w	r3, r3, #4
          pLum += 64;
90003930:	f109 0940 	add.w	r9, r9, #64	@ 0x40
        for(k= 0; k<2; k++)
90003934:	f47f af72 	bne.w	9000381c <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x9c>
    for(i= 0; i <  16; i+=2)
90003938:	9808      	ldr	r0, [sp, #32]
9000393a:	e9dd 1506 	ldrd	r1, r5, [sp, #24]
9000393e:	e9dd 6204 	ldrd	r6, r2, [sp, #16]
90003942:	3102      	adds	r1, #2
90003944:	2910      	cmp	r1, #16
90003946:	f43f af37 	beq.w	900037b8 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x38>
      if(i == 8)
9000394a:	2908      	cmp	r1, #8
9000394c:	d004      	beq.n	90003958 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1d8>
        pLum = pLum - 128 + 16;
9000394e:	3610      	adds	r6, #16
            pChrom++;
90003950:	3508      	adds	r5, #8
        refline += 2*JPEG_ConvertorParams.ScaledWidth;
90003952:	f502 62f0 	add.w	r2, r2, #1920	@ 0x780
90003956:	e750      	b.n	900037fa <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x7a>
        pLum = pInBuffer + 128;
90003958:	9b09      	ldr	r3, [sp, #36]	@ 0x24
9000395a:	f103 0680 	add.w	r6, r3, #128	@ 0x80
9000395e:	e7f7      	b.n	90003950 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1d0>
90003960:	f44f 7270 	mov.w	r2, #960	@ 0x3c0
90003964:	4904      	ldr	r1, [pc, #16]	@ (90003978 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1f8>)
90003966:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
90003968:	628a      	str	r2, [r1, #40]	@ 0x28
  }
  return numberMCU;
}
9000396a:	4618      	mov	r0, r3
9000396c:	b00f      	add	sp, #60	@ 0x3c
9000396e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90003972:	bf00      	nop
90003974:	aaaaaaab 	.word	0xaaaaaaab
90003978:	2400b1c8 	.word	0x2400b1c8
9000397c:	2400a5c8 	.word	0x2400a5c8
90003980:	2400a9c8 	.word	0x2400a9c8
90003984:	2400adc8 	.word	0x2400adc8
90003988:	2400a1c8 	.word	0x2400a1c8
9000398c:	900256c0 	.word	0x900256c0

90003990 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr422_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
90003990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t *pChrom, *pLum;

  numberMCU = DataCount / YCBCR_422_BLOCK_SIZE;
  currentMCU = BlockIndex;

  while(currentMCU < (numberMCU + BlockIndex))
90003994:	eb02 2613 	add.w	r6, r2, r3, lsr #8
{
90003998:	b08f      	sub	sp, #60	@ 0x3c
  numberMCU = DataCount / YCBCR_422_BLOCK_SIZE;
9000399a:	0a1c      	lsrs	r4, r3, #8
  while(currentMCU < (numberMCU + BlockIndex))
9000399c:	42b2      	cmp	r2, r6
9000399e:	f080 8156 	bcs.w	90003c4e <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2be>
  {
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
900039a2:	4bad      	ldr	r3, [pc, #692]	@ (90003c58 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2c8>)
900039a4:	468e      	mov	lr, r1
900039a6:	4dad      	ldr	r5, [pc, #692]	@ (90003c5c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2cc>)

    pLum = pInBuffer;

    for(i= 0; i <  8; i++)
    {
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
900039a8:	f8d3 c010 	ldr.w	ip, [r3, #16]
900039ac:	f8df a2b0 	ldr.w	sl, [pc, #688]	@ 90003c60 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2d0>
900039b0:	f8df 92b0 	ldr.w	r9, [pc, #688]	@ 90003c64 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2d4>
900039b4:	f8df b2b0 	ldr.w	fp, [pc, #688]	@ 90003c68 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2d8>
900039b8:	f8df 82b0 	ldr.w	r8, [pc, #688]	@ 90003c6c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2dc>
900039bc:	f8cd c01c 	str.w	ip, [sp, #28]
900039c0:	f8cd e020 	str.w	lr, [sp, #32]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
900039c4:	e9d3 7109 	ldrd	r7, r1, [r3, #36]	@ 0x24
900039c8:	e9cd 640c 	strd	r6, r4, [sp, #48]	@ 0x30
900039cc:	9106      	str	r1, [sp, #24]
900039ce:	970b      	str	r7, [sp, #44]	@ 0x2c
900039d0:	e007      	b.n	900039e2 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x52>

        refline += JPEG_ConvertorParams.ScaledWidth;
      }
    }

    pInBuffer +=  YCBCR_422_BLOCK_SIZE;
900039d2:	e9dd 0209 	ldrd	r0, r2, [sp, #36]	@ 0x24
  while(currentMCU < (numberMCU + BlockIndex))
900039d6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
    pInBuffer +=  YCBCR_422_BLOCK_SIZE;
900039d8:	f500 7080 	add.w	r0, r0, #256	@ 0x100
  while(currentMCU < (numberMCU + BlockIndex))
900039dc:	429a      	cmp	r2, r3
900039de:	f000 8135 	beq.w	90003c4c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2bc>
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
900039e2:	0113      	lsls	r3, r2, #4
900039e4:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
    pChrom = pInBuffer + 128; /* pChroma = pInBuffer + 2*64 */
900039e6:	f04f 0e08 	mov.w	lr, #8
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
900039ea:	3201      	adds	r2, #1
    pChrom = pInBuffer + 128; /* pChroma = pInBuffer + 2*64 */
900039ec:	f100 0680 	add.w	r6, r0, #128	@ 0x80
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
900039f0:	fbb3 f1f4 	udiv	r1, r3, r4
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
900039f4:	fb04 3311 	mls	r3, r4, r1, r3
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
900039f8:	9c06      	ldr	r4, [sp, #24]
900039fa:	005b      	lsls	r3, r3, #1
900039fc:	fb04 f101 	mul.w	r1, r4, r1
90003a00:	eb03 0cc1 	add.w	ip, r3, r1, lsl #3
    pChrom = pInBuffer + 128; /* pChroma = pInBuffer + 2*64 */
90003a04:	4673      	mov	r3, lr
90003a06:	4686      	mov	lr, r0
90003a08:	461f      	mov	r7, r3
90003a0a:	e9cd 0209 	strd	r0, r2, [sp, #36]	@ 0x24
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90003a0e:	9b07      	ldr	r3, [sp, #28]
90003a10:	4563      	cmp	r3, ip
90003a12:	d9de      	bls.n	900039d2 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x42>
        pOutAddr = pOutBuffer + refline;
90003a14:	9b08      	ldr	r3, [sp, #32]
90003a16:	f10e 0140 	add.w	r1, lr, #64	@ 0x40
90003a1a:	1d32      	adds	r2, r6, #4
90003a1c:	9705      	str	r7, [sp, #20]
90003a1e:	4463      	add	r3, ip
        for(k= 0; k<2; k++)
90003a20:	f103 0020 	add.w	r0, r3, #32
90003a24:	e9cd ec03 	strd	lr, ip, [sp, #12]
90003a28:	e9cd 0601 	strd	r0, r6, [sp, #4]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90003a2c:	f892 703c 	ldrb.w	r7, [r2, #60]	@ 0x3c
            pOutAddr += JPEG_BYTES_PER_PIXEL * 2;
90003a30:	3310      	adds	r3, #16
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90003a32:	f812 0c04 	ldrb.w	r0, [r2, #-4]
        for(k= 0; k<2; k++)
90003a36:	3140      	adds	r1, #64	@ 0x40
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90003a38:	f85a 6027 	ldr.w	r6, [sl, r7, lsl #2]
        for(k= 0; k<2; k++)
90003a3c:	3204      	adds	r2, #4
            ycomp = (int32_t)(*(pLum +j));
90003a3e:	f811 cc80 	ldrb.w	ip, [r1, #-128]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90003a42:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003a46:	4446      	add	r6, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90003a48:	f85b 0020 	ldr.w	r0, [fp, r0, lsl #2]
90003a4c:	f859 7027 	ldr.w	r7, [r9, r7, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90003a50:	4444      	add	r4, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90003a52:	4407      	add	r7, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003a54:	eb06 000c 	add.w	r0, r6, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90003a58:	eb08 4727 	add.w	r7, r8, r7, asr #16
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003a5c:	f890 e100 	ldrb.w	lr, [r0, #256]	@ 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90003a60:	eb04 000c 	add.w	r0, r4, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90003a64:	44bc      	add	ip, r7
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003a66:	ea4f 0ede 	mov.w	lr, lr, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90003a6a:	f890 0100 	ldrb.w	r0, [r0, #256]	@ 0x100
90003a6e:	f89c c100 	ldrb.w	ip, [ip, #256]	@ 0x100
90003a72:	08c0      	lsrs	r0, r0, #3
90003a74:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90003a78:	ea40 20ce 	orr.w	r0, r0, lr, lsl #11
90003a7c:	ea40 104c 	orr.w	r0, r0, ip, lsl #5
            *(__IO uint16_t *)pOutAddr =
90003a80:	f823 0c10 	strh.w	r0, [r3, #-16]
            ycomp = (int32_t)(*(pLum +j +1));
90003a84:	f811 0c7f 	ldrb.w	r0, [r1, #-127]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003a88:	4406      	add	r6, r0
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90003a8a:	4404      	add	r4, r0
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90003a8c:	4438      	add	r0, r7
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003a8e:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90003a92:	f894 4100 	ldrb.w	r4, [r4, #256]	@ 0x100
90003a96:	f890 0100 	ldrb.w	r0, [r0, #256]	@ 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003a9a:	08f6      	lsrs	r6, r6, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90003a9c:	08e4      	lsrs	r4, r4, #3
90003a9e:	0880      	lsrs	r0, r0, #2
90003aa0:	ea44 24c6 	orr.w	r4, r4, r6, lsl #11
90003aa4:	ea44 1440 	orr.w	r4, r4, r0, lsl #5
            *((__IO uint16_t *)(pOutAddr + 2)) =
90003aa8:	f823 4c0e 	strh.w	r4, [r3, #-14]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90003aac:	f892 7039 	ldrb.w	r7, [r2, #57]	@ 0x39
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90003ab0:	f812 0c07 	ldrb.w	r0, [r2, #-7]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90003ab4:	f85a 6027 	ldr.w	r6, [sl, r7, lsl #2]
            ycomp = (int32_t)(*(pLum +j));
90003ab8:	f811 cc7e 	ldrb.w	ip, [r1, #-126]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90003abc:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003ac0:	4446      	add	r6, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90003ac2:	f85b 0020 	ldr.w	r0, [fp, r0, lsl #2]
90003ac6:	f859 7027 	ldr.w	r7, [r9, r7, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90003aca:	4444      	add	r4, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90003acc:	4407      	add	r7, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003ace:	eb06 000c 	add.w	r0, r6, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90003ad2:	eb08 4727 	add.w	r7, r8, r7, asr #16
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003ad6:	f890 e100 	ldrb.w	lr, [r0, #256]	@ 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90003ada:	eb04 000c 	add.w	r0, r4, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90003ade:	44bc      	add	ip, r7
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003ae0:	ea4f 0ede 	mov.w	lr, lr, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90003ae4:	f890 0100 	ldrb.w	r0, [r0, #256]	@ 0x100
90003ae8:	f89c c100 	ldrb.w	ip, [ip, #256]	@ 0x100
90003aec:	08c0      	lsrs	r0, r0, #3
90003aee:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90003af2:	ea40 20ce 	orr.w	r0, r0, lr, lsl #11
90003af6:	ea40 104c 	orr.w	r0, r0, ip, lsl #5
            *(__IO uint16_t *)pOutAddr =
90003afa:	f823 0c0c 	strh.w	r0, [r3, #-12]
            ycomp = (int32_t)(*(pLum +j +1));
90003afe:	f811 0c7d 	ldrb.w	r0, [r1, #-125]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003b02:	4406      	add	r6, r0
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90003b04:	4404      	add	r4, r0
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90003b06:	4438      	add	r0, r7
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003b08:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90003b0c:	f894 4100 	ldrb.w	r4, [r4, #256]	@ 0x100
90003b10:	f890 0100 	ldrb.w	r0, [r0, #256]	@ 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003b14:	08f6      	lsrs	r6, r6, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90003b16:	08e4      	lsrs	r4, r4, #3
90003b18:	0880      	lsrs	r0, r0, #2
90003b1a:	ea44 24c6 	orr.w	r4, r4, r6, lsl #11
90003b1e:	ea44 1440 	orr.w	r4, r4, r0, lsl #5
            *((__IO uint16_t *)(pOutAddr + 2)) =
90003b22:	f823 4c0a 	strh.w	r4, [r3, #-10]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90003b26:	f812 0c06 	ldrb.w	r0, [r2, #-6]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90003b2a:	f892 703a 	ldrb.w	r7, [r2, #58]	@ 0x3a
            ycomp = (int32_t)(*(pLum +j));
90003b2e:	f811 cc7c 	ldrb.w	ip, [r1, #-124]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90003b32:	f85a 6027 	ldr.w	r6, [sl, r7, lsl #2]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90003b36:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90003b3a:	f859 7027 	ldr.w	r7, [r9, r7, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003b3e:	4446      	add	r6, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90003b40:	f85b 0020 	ldr.w	r0, [fp, r0, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90003b44:	4444      	add	r4, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90003b46:	4407      	add	r7, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003b48:	eb06 000c 	add.w	r0, r6, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90003b4c:	eb08 4727 	add.w	r7, r8, r7, asr #16
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003b50:	f890 e100 	ldrb.w	lr, [r0, #256]	@ 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90003b54:	eb04 000c 	add.w	r0, r4, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90003b58:	44bc      	add	ip, r7
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003b5a:	ea4f 0ede 	mov.w	lr, lr, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90003b5e:	f890 0100 	ldrb.w	r0, [r0, #256]	@ 0x100
90003b62:	f89c c100 	ldrb.w	ip, [ip, #256]	@ 0x100
90003b66:	08c0      	lsrs	r0, r0, #3
90003b68:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90003b6c:	ea40 20ce 	orr.w	r0, r0, lr, lsl #11
90003b70:	ea40 104c 	orr.w	r0, r0, ip, lsl #5
            *(__IO uint16_t *)pOutAddr =
90003b74:	f823 0c08 	strh.w	r0, [r3, #-8]
            ycomp = (int32_t)(*(pLum +j +1));
90003b78:	f811 0c7b 	ldrb.w	r0, [r1, #-123]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003b7c:	4406      	add	r6, r0
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90003b7e:	4404      	add	r4, r0
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90003b80:	4438      	add	r0, r7
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003b82:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90003b86:	f894 4100 	ldrb.w	r4, [r4, #256]	@ 0x100
90003b8a:	f890 0100 	ldrb.w	r0, [r0, #256]	@ 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003b8e:	08f6      	lsrs	r6, r6, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90003b90:	08e4      	lsrs	r4, r4, #3
90003b92:	0880      	lsrs	r0, r0, #2
90003b94:	ea44 24c6 	orr.w	r4, r4, r6, lsl #11
90003b98:	ea44 1440 	orr.w	r4, r4, r0, lsl #5
            *((__IO uint16_t *)(pOutAddr + 2)) =
90003b9c:	f823 4c06 	strh.w	r4, [r3, #-6]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90003ba0:	f892 703b 	ldrb.w	r7, [r2, #59]	@ 0x3b
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90003ba4:	f812 0c05 	ldrb.w	r0, [r2, #-5]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90003ba8:	f85a 6027 	ldr.w	r6, [sl, r7, lsl #2]
            ycomp = (int32_t)(*(pLum +j));
90003bac:	f811 cc7a 	ldrb.w	ip, [r1, #-122]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90003bb0:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003bb4:	4446      	add	r6, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90003bb6:	f85b 0020 	ldr.w	r0, [fp, r0, lsl #2]
90003bba:	f859 7027 	ldr.w	r7, [r9, r7, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90003bbe:	4444      	add	r4, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90003bc0:	4407      	add	r7, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003bc2:	eb06 000c 	add.w	r0, r6, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90003bc6:	eb08 4727 	add.w	r7, r8, r7, asr #16
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003bca:	f890 e100 	ldrb.w	lr, [r0, #256]	@ 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90003bce:	eb04 000c 	add.w	r0, r4, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90003bd2:	44bc      	add	ip, r7
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003bd4:	ea4f 0ede 	mov.w	lr, lr, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90003bd8:	f890 0100 	ldrb.w	r0, [r0, #256]	@ 0x100
90003bdc:	f89c c100 	ldrb.w	ip, [ip, #256]	@ 0x100
90003be0:	08c0      	lsrs	r0, r0, #3
90003be2:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90003be6:	ea40 20ce 	orr.w	r0, r0, lr, lsl #11
90003bea:	ea40 104c 	orr.w	r0, r0, ip, lsl #5
            *(__IO uint16_t *)pOutAddr =
90003bee:	f823 0c04 	strh.w	r0, [r3, #-4]
            ycomp = (int32_t)(*(pLum +j +1));
90003bf2:	f811 0c79 	ldrb.w	r0, [r1, #-121]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003bf6:	4406      	add	r6, r0
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90003bf8:	4404      	add	r4, r0
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90003bfa:	4438      	add	r0, r7
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003bfc:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90003c00:	f894 4100 	ldrb.w	r4, [r4, #256]	@ 0x100
90003c04:	f890 0100 	ldrb.w	r0, [r0, #256]	@ 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003c08:	08f6      	lsrs	r6, r6, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90003c0a:	08e4      	lsrs	r4, r4, #3
90003c0c:	0880      	lsrs	r0, r0, #2
90003c0e:	ea44 24c6 	orr.w	r4, r4, r6, lsl #11
90003c12:	ea44 1440 	orr.w	r4, r4, r0, lsl #5
            *((__IO uint16_t *)(pOutAddr + 2)) =
90003c16:	f823 4c02 	strh.w	r4, [r3, #-2]
        for(k= 0; k<2; k++)
90003c1a:	9801      	ldr	r0, [sp, #4]
90003c1c:	4283      	cmp	r3, r0
90003c1e:	f47f af05 	bne.w	90003a2c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x9c>
        refline += JPEG_ConvertorParams.ScaledWidth;
90003c22:	9b06      	ldr	r3, [sp, #24]
            pChrom++;
90003c24:	e9dd c704 	ldrd	ip, r7, [sp, #16]
90003c28:	e9dd 6e02 	ldrd	r6, lr, [sp, #8]
    for(i= 0; i <  8; i++)
90003c2c:	3f01      	subs	r7, #1
        refline += JPEG_ConvertorParams.ScaledWidth;
90003c2e:	449c      	add	ip, r3
            pChrom++;
90003c30:	f106 0608 	add.w	r6, r6, #8
        pLum = pLum - 128 + 8;
90003c34:	f10e 0e08 	add.w	lr, lr, #8
    for(i= 0; i <  8; i++)
90003c38:	f47f aee9 	bne.w	90003a0e <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x7e>
  while(currentMCU < (numberMCU + BlockIndex))
90003c3c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
    pInBuffer +=  YCBCR_422_BLOCK_SIZE;
90003c3e:	e9dd 0209 	ldrd	r0, r2, [sp, #36]	@ 0x24
  while(currentMCU < (numberMCU + BlockIndex))
90003c42:	429a      	cmp	r2, r3
    pInBuffer +=  YCBCR_422_BLOCK_SIZE;
90003c44:	f500 7080 	add.w	r0, r0, #256	@ 0x100
  while(currentMCU < (numberMCU + BlockIndex))
90003c48:	f47f aecb 	bne.w	900039e2 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x52>
90003c4c:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
  }
  return numberMCU;
}
90003c4e:	4620      	mov	r0, r4
90003c50:	b00f      	add	sp, #60	@ 0x3c
90003c52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90003c56:	bf00      	nop
90003c58:	2400b1c8 	.word	0x2400b1c8
90003c5c:	2400a9c8 	.word	0x2400a9c8
90003c60:	2400adc8 	.word	0x2400adc8
90003c64:	2400a5c8 	.word	0x2400a5c8
90003c68:	2400a1c8 	.word	0x2400a1c8
90003c6c:	900256c0 	.word	0x900256c0

90003c70 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr444_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
90003c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int32_t c_red, c_blue, c_green;

  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;

  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
90003c74:	4cb1      	ldr	r4, [pc, #708]	@ (90003f3c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2cc>)
{
90003c76:	4691      	mov	r9, r2
90003c78:	b08b      	sub	sp, #44	@ 0x2c
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
90003c7a:	fba4 4203 	umull	r4, r2, r4, r3
{
90003c7e:	9102      	str	r1, [sp, #8]
  currentMCU = BlockIndex;

  while(currentMCU < (numberMCU + BlockIndex))
90003c80:	eb09 1bd2 	add.w	fp, r9, r2, lsr #7
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
90003c84:	09d3      	lsrs	r3, r2, #7
  while(currentMCU < (numberMCU + BlockIndex))
90003c86:	45d9      	cmp	r9, fp
90003c88:	f080 8153 	bcs.w	90003f32 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2c2>
  {

    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90003c8c:	4aac      	ldr	r2, [pc, #688]	@ (90003f40 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2d0>)
90003c8e:	4682      	mov	sl, r0
#elif (JPEG_RGB_FORMAT == JPEG_RGB565)

            ycomp = (int32_t)(*(pLum +j));

            *(__IO uint16_t *)pOutAddr =
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003c90:	4cac      	ldr	r4, [pc, #688]	@ (90003f44 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2d4>)
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90003c92:	f8df e2b8 	ldr.w	lr, [pc, #696]	@ 90003f4c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2dc>
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90003c96:	f8df c2b8 	ldr.w	ip, [pc, #696]	@ 90003f50 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2e0>
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90003c9a:	48ab      	ldr	r0, [pc, #684]	@ (90003f48 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2d8>)
90003c9c:	f8df 82b4 	ldr.w	r8, [pc, #692]	@ 90003f54 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2e4>
90003ca0:	9309      	str	r3, [sp, #36]	@ 0x24
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90003ca2:	e9d2 6109 	ldrd	r6, r1, [r2, #36]	@ 0x24
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90003ca6:	6912      	ldr	r2, [r2, #16]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90003ca8:	9103      	str	r1, [sp, #12]
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90003caa:	9206      	str	r2, [sp, #24]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90003cac:	e9cd 6b07 	strd	r6, fp, [sp, #28]
90003cb0:	e9cd a904 	strd	sl, r9, [sp, #16]
90003cb4:	e007      	b.n	90003cc6 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x56>

        refline += JPEG_ConvertorParams.ScaledWidth;
      }
    }

    pInBuffer +=  YCBCR_444_BLOCK_SIZE;
90003cb6:	9b04      	ldr	r3, [sp, #16]
  while(currentMCU < (numberMCU + BlockIndex))
90003cb8:	9a08      	ldr	r2, [sp, #32]
    pInBuffer +=  YCBCR_444_BLOCK_SIZE;
90003cba:	33c0      	adds	r3, #192	@ 0xc0
90003cbc:	9304      	str	r3, [sp, #16]
  while(currentMCU < (numberMCU + BlockIndex))
90003cbe:	9b05      	ldr	r3, [sp, #20]
90003cc0:	4293      	cmp	r3, r2
90003cc2:	f000 8135 	beq.w	90003f30 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2c0>
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90003cc6:	9e05      	ldr	r6, [sp, #20]
90003cc8:	9f07      	ldr	r7, [sp, #28]
90003cca:	00f1      	lsls	r1, r6, #3
90003ccc:	3601      	adds	r6, #1
    pChrom = pInBuffer + 64; /* pChroma = pInBuffer + 4*64 */
90003cce:	9a04      	ldr	r2, [sp, #16]
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90003cd0:	9605      	str	r6, [sp, #20]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90003cd2:	9e03      	ldr	r6, [sp, #12]
    pChrom = pInBuffer + 64; /* pChroma = pInBuffer + 4*64 */
90003cd4:	f102 0340 	add.w	r3, r2, #64	@ 0x40
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90003cd8:	fbb1 f5f7 	udiv	r5, r1, r7
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
90003cdc:	fb07 1115 	mls	r1, r7, r5, r1
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90003ce0:	fb06 f505 	mul.w	r5, r6, r5
90003ce4:	0049      	lsls	r1, r1, #1
90003ce6:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
    pChrom = pInBuffer + 64; /* pChroma = pInBuffer + 4*64 */
90003cea:	2508      	movs	r5, #8
90003cec:	468a      	mov	sl, r1
90003cee:	9501      	str	r5, [sp, #4]
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90003cf0:	9906      	ldr	r1, [sp, #24]
90003cf2:	4551      	cmp	r1, sl
90003cf4:	d9df      	bls.n	90003cb6 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x46>
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90003cf6:	f893 7040 	ldrb.w	r7, [r3, #64]	@ 0x40
          pLum += 8;
90003cfa:	3208      	adds	r2, #8
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90003cfc:	7819      	ldrb	r1, [r3, #0]
            pChrom++;
90003cfe:	3308      	adds	r3, #8
            ycomp = (int32_t)(*(pLum +j));
90003d00:	f812 5c08 	ldrb.w	r5, [r2, #-8]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90003d04:	f850 9027 	ldr.w	r9, [r0, r7, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003d08:	f85e 6027 	ldr.w	r6, [lr, r7, lsl #2]
90003d0c:	4425      	add	r5, r4
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90003d0e:	f85c 7021 	ldr.w	r7, [ip, r1, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90003d12:	f858 1021 	ldr.w	r1, [r8, r1, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003d16:	442e      	add	r6, r5
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90003d18:	442f      	add	r7, r5
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90003d1a:	4449      	add	r1, r9
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003d1c:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90003d20:	eb05 4121 	add.w	r1, r5, r1, asr #16
90003d24:	f897 5100 	ldrb.w	r5, [r7, #256]	@ 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003d28:	08f6      	lsrs	r6, r6, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90003d2a:	f891 1100 	ldrb.w	r1, [r1, #256]	@ 0x100
90003d2e:	08ed      	lsrs	r5, r5, #3
90003d30:	0889      	lsrs	r1, r1, #2
90003d32:	ea45 25c6 	orr.w	r5, r5, r6, lsl #11
90003d36:	ea45 1541 	orr.w	r5, r5, r1, lsl #5
            *(__IO uint16_t *)pOutAddr =
90003d3a:	9902      	ldr	r1, [sp, #8]
90003d3c:	f821 500a 	strh.w	r5, [r1, sl]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90003d40:	f893 7039 	ldrb.w	r7, [r3, #57]	@ 0x39
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90003d44:	f813 1c07 	ldrb.w	r1, [r3, #-7]
            ycomp = (int32_t)(*(pLum +j));
90003d48:	f812 5c07 	ldrb.w	r5, [r2, #-7]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90003d4c:	f850 9027 	ldr.w	r9, [r0, r7, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003d50:	4425      	add	r5, r4
90003d52:	f85e 6027 	ldr.w	r6, [lr, r7, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90003d56:	f85c 7021 	ldr.w	r7, [ip, r1, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90003d5a:	f858 1021 	ldr.w	r1, [r8, r1, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003d5e:	442e      	add	r6, r5
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90003d60:	442f      	add	r7, r5
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90003d62:	4449      	add	r1, r9
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003d64:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90003d68:	eb05 4121 	add.w	r1, r5, r1, asr #16
90003d6c:	f897 5100 	ldrb.w	r5, [r7, #256]	@ 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003d70:	08f6      	lsrs	r6, r6, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90003d72:	f891 1100 	ldrb.w	r1, [r1, #256]	@ 0x100
90003d76:	08ed      	lsrs	r5, r5, #3
90003d78:	0889      	lsrs	r1, r1, #2
90003d7a:	ea45 25c6 	orr.w	r5, r5, r6, lsl #11
90003d7e:	ea45 1541 	orr.w	r5, r5, r1, lsl #5
        pOutAddr = pOutBuffer+ refline;
90003d82:	9902      	ldr	r1, [sp, #8]
90003d84:	4451      	add	r1, sl
            *(__IO uint16_t *)pOutAddr =
90003d86:	804d      	strh	r5, [r1, #2]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90003d88:	f893 903a 	ldrb.w	r9, [r3, #58]	@ 0x3a
            ycomp = (int32_t)(*(pLum +j));
90003d8c:	f812 6c06 	ldrb.w	r6, [r2, #-6]
        refline += JPEG_ConvertorParams.ScaledWidth;
90003d90:	9d03      	ldr	r5, [sp, #12]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003d92:	4426      	add	r6, r4
90003d94:	f85e 7029 	ldr.w	r7, [lr, r9, lsl #2]
        refline += JPEG_ConvertorParams.ScaledWidth;
90003d98:	44aa      	add	sl, r5
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90003d9a:	f813 5c06 	ldrb.w	r5, [r3, #-6]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003d9e:	4437      	add	r7, r6
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90003da0:	f850 b029 	ldr.w	fp, [r0, r9, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90003da4:	f85c 9025 	ldr.w	r9, [ip, r5, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003da8:	f897 7100 	ldrb.w	r7, [r7, #256]	@ 0x100
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90003dac:	f858 5025 	ldr.w	r5, [r8, r5, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90003db0:	44b1      	add	r9, r6
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003db2:	08ff      	lsrs	r7, r7, #3
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90003db4:	445d      	add	r5, fp
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90003db6:	eb06 4525 	add.w	r5, r6, r5, asr #16
90003dba:	f899 6100 	ldrb.w	r6, [r9, #256]	@ 0x100
90003dbe:	f895 5100 	ldrb.w	r5, [r5, #256]	@ 0x100
90003dc2:	08f6      	lsrs	r6, r6, #3
90003dc4:	08ad      	lsrs	r5, r5, #2
90003dc6:	ea46 26c7 	orr.w	r6, r6, r7, lsl #11
90003dca:	ea46 1645 	orr.w	r6, r6, r5, lsl #5
            *(__IO uint16_t *)pOutAddr =
90003dce:	808e      	strh	r6, [r1, #4]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90003dd0:	f893 903b 	ldrb.w	r9, [r3, #59]	@ 0x3b
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90003dd4:	f813 5c05 	ldrb.w	r5, [r3, #-5]
            ycomp = (int32_t)(*(pLum +j));
90003dd8:	f812 6c05 	ldrb.w	r6, [r2, #-5]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90003ddc:	f850 b029 	ldr.w	fp, [r0, r9, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003de0:	f85e 7029 	ldr.w	r7, [lr, r9, lsl #2]
90003de4:	4426      	add	r6, r4
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90003de6:	f85c 9025 	ldr.w	r9, [ip, r5, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90003dea:	f858 5025 	ldr.w	r5, [r8, r5, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003dee:	4437      	add	r7, r6
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90003df0:	44b1      	add	r9, r6
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90003df2:	445d      	add	r5, fp
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003df4:	f897 7100 	ldrb.w	r7, [r7, #256]	@ 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90003df8:	eb06 4525 	add.w	r5, r6, r5, asr #16
90003dfc:	f899 6100 	ldrb.w	r6, [r9, #256]	@ 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003e00:	08ff      	lsrs	r7, r7, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90003e02:	f895 5100 	ldrb.w	r5, [r5, #256]	@ 0x100
90003e06:	08f6      	lsrs	r6, r6, #3
90003e08:	08ad      	lsrs	r5, r5, #2
90003e0a:	ea46 26c7 	orr.w	r6, r6, r7, lsl #11
90003e0e:	ea46 1645 	orr.w	r6, r6, r5, lsl #5
            *(__IO uint16_t *)pOutAddr =
90003e12:	80ce      	strh	r6, [r1, #6]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90003e14:	f893 903c 	ldrb.w	r9, [r3, #60]	@ 0x3c
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90003e18:	f813 5c04 	ldrb.w	r5, [r3, #-4]
            ycomp = (int32_t)(*(pLum +j));
90003e1c:	f812 6c04 	ldrb.w	r6, [r2, #-4]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90003e20:	f850 b029 	ldr.w	fp, [r0, r9, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003e24:	4426      	add	r6, r4
90003e26:	f85e 7029 	ldr.w	r7, [lr, r9, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90003e2a:	f85c 9025 	ldr.w	r9, [ip, r5, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90003e2e:	f858 5025 	ldr.w	r5, [r8, r5, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003e32:	4437      	add	r7, r6
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90003e34:	44b1      	add	r9, r6
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90003e36:	445d      	add	r5, fp
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003e38:	f897 7100 	ldrb.w	r7, [r7, #256]	@ 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90003e3c:	eb06 4525 	add.w	r5, r6, r5, asr #16
90003e40:	f899 6100 	ldrb.w	r6, [r9, #256]	@ 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003e44:	08ff      	lsrs	r7, r7, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90003e46:	f895 5100 	ldrb.w	r5, [r5, #256]	@ 0x100
90003e4a:	08f6      	lsrs	r6, r6, #3
90003e4c:	08ad      	lsrs	r5, r5, #2
90003e4e:	ea46 26c7 	orr.w	r6, r6, r7, lsl #11
90003e52:	ea46 1645 	orr.w	r6, r6, r5, lsl #5
            *(__IO uint16_t *)pOutAddr =
90003e56:	810e      	strh	r6, [r1, #8]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90003e58:	f893 903d 	ldrb.w	r9, [r3, #61]	@ 0x3d
            ycomp = (int32_t)(*(pLum +j));
90003e5c:	f812 6c03 	ldrb.w	r6, [r2, #-3]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003e60:	f85e 7029 	ldr.w	r7, [lr, r9, lsl #2]
90003e64:	4426      	add	r6, r4
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90003e66:	f813 5c03 	ldrb.w	r5, [r3, #-3]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90003e6a:	f850 b029 	ldr.w	fp, [r0, r9, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003e6e:	4437      	add	r7, r6
90003e70:	f897 7100 	ldrb.w	r7, [r7, #256]	@ 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90003e74:	f85c 9025 	ldr.w	r9, [ip, r5, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90003e78:	f858 5025 	ldr.w	r5, [r8, r5, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003e7c:	08ff      	lsrs	r7, r7, #3
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90003e7e:	44b1      	add	r9, r6
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90003e80:	445d      	add	r5, fp
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90003e82:	eb06 4525 	add.w	r5, r6, r5, asr #16
90003e86:	f899 6100 	ldrb.w	r6, [r9, #256]	@ 0x100
90003e8a:	f895 5100 	ldrb.w	r5, [r5, #256]	@ 0x100
90003e8e:	08f6      	lsrs	r6, r6, #3
90003e90:	08ad      	lsrs	r5, r5, #2
90003e92:	ea46 26c7 	orr.w	r6, r6, r7, lsl #11
90003e96:	ea46 1645 	orr.w	r6, r6, r5, lsl #5
            *(__IO uint16_t *)pOutAddr =
90003e9a:	814e      	strh	r6, [r1, #10]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90003e9c:	f893 903e 	ldrb.w	r9, [r3, #62]	@ 0x3e
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90003ea0:	f813 5c02 	ldrb.w	r5, [r3, #-2]
            ycomp = (int32_t)(*(pLum +j));
90003ea4:	f812 6c02 	ldrb.w	r6, [r2, #-2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90003ea8:	f850 b029 	ldr.w	fp, [r0, r9, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003eac:	4426      	add	r6, r4
90003eae:	f85e 7029 	ldr.w	r7, [lr, r9, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90003eb2:	f85c 9025 	ldr.w	r9, [ip, r5, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90003eb6:	f858 5025 	ldr.w	r5, [r8, r5, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003eba:	4437      	add	r7, r6
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90003ebc:	44b1      	add	r9, r6
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90003ebe:	445d      	add	r5, fp
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003ec0:	f897 7100 	ldrb.w	r7, [r7, #256]	@ 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90003ec4:	eb06 4525 	add.w	r5, r6, r5, asr #16
90003ec8:	f899 6100 	ldrb.w	r6, [r9, #256]	@ 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003ecc:	08ff      	lsrs	r7, r7, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90003ece:	f895 5100 	ldrb.w	r5, [r5, #256]	@ 0x100
90003ed2:	08f6      	lsrs	r6, r6, #3
90003ed4:	08ad      	lsrs	r5, r5, #2
90003ed6:	ea46 26c7 	orr.w	r6, r6, r7, lsl #11
90003eda:	ea46 1645 	orr.w	r6, r6, r5, lsl #5
            *(__IO uint16_t *)pOutAddr =
90003ede:	818e      	strh	r6, [r1, #12]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90003ee0:	f893 903f 	ldrb.w	r9, [r3, #63]	@ 0x3f
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90003ee4:	f813 5c01 	ldrb.w	r5, [r3, #-1]
            ycomp = (int32_t)(*(pLum +j));
90003ee8:	f812 6c01 	ldrb.w	r6, [r2, #-1]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003eec:	f85e 7029 	ldr.w	r7, [lr, r9, lsl #2]
90003ef0:	4426      	add	r6, r4
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90003ef2:	f850 b029 	ldr.w	fp, [r0, r9, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90003ef6:	f85c 9025 	ldr.w	r9, [ip, r5, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90003efa:	f858 5025 	ldr.w	r5, [r8, r5, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003efe:	4437      	add	r7, r6
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90003f00:	44b1      	add	r9, r6
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90003f02:	445d      	add	r5, fp
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003f04:	f897 7100 	ldrb.w	r7, [r7, #256]	@ 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90003f08:	eb06 4525 	add.w	r5, r6, r5, asr #16
90003f0c:	f899 6100 	ldrb.w	r6, [r9, #256]	@ 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003f10:	08ff      	lsrs	r7, r7, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90003f12:	f895 5100 	ldrb.w	r5, [r5, #256]	@ 0x100
90003f16:	08f6      	lsrs	r6, r6, #3
90003f18:	08ad      	lsrs	r5, r5, #2
90003f1a:	ea46 26c7 	orr.w	r6, r6, r7, lsl #11
90003f1e:	ea46 1645 	orr.w	r6, r6, r5, lsl #5
            *(__IO uint16_t *)pOutAddr =
90003f22:	81ce      	strh	r6, [r1, #14]
    for(i= 0; i <  8; i++)
90003f24:	9901      	ldr	r1, [sp, #4]
90003f26:	3901      	subs	r1, #1
90003f28:	9101      	str	r1, [sp, #4]
90003f2a:	f43f aec4 	beq.w	90003cb6 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x46>
90003f2e:	e6df      	b.n	90003cf0 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x80>
90003f30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
  }
  return numberMCU;
}
90003f32:	4618      	mov	r0, r3
90003f34:	b00b      	add	sp, #44	@ 0x2c
90003f36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90003f3a:	bf00      	nop
90003f3c:	aaaaaaab 	.word	0xaaaaaaab
90003f40:	2400b1c8 	.word	0x2400b1c8
90003f44:	900256c0 	.word	0x900256c0
90003f48:	2400a5c8 	.word	0x2400a5c8
90003f4c:	2400adc8 	.word	0x2400adc8
90003f50:	2400a9c8 	.word	0x2400a9c8
90003f54:	2400a1c8 	.word	0x2400a1c8

90003f58 <JPEG_MCU_Gray_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_Gray_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
90003f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t *pOutAddr,  *pLum;

  numberMCU = DataCount / GRAY_444_BLOCK_SIZE;
  currentMCU = BlockIndex;

  while(currentMCU < (numberMCU + BlockIndex))
90003f5c:	eb02 1993 	add.w	r9, r2, r3, lsr #6
{
90003f60:	4606      	mov	r6, r0
90003f62:	b083      	sub	sp, #12
  numberMCU = DataCount / GRAY_444_BLOCK_SIZE;
90003f64:	0998      	lsrs	r0, r3, #6
  while(currentMCU < (numberMCU + BlockIndex))
90003f66:	4591      	cmp	r9, r2
90003f68:	f240 809d 	bls.w	900040a6 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x14e>
  {
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90003f6c:	4b4f      	ldr	r3, [pc, #316]	@ (900040ac <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x154>)
90003f6e:	460c      	mov	r4, r1
90003f70:	4615      	mov	r5, r2
    pLum = pInBuffer;

    for(i= 0; i <  8; i++)
    {
      pOutAddr = pOutBuffer + refline;
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90003f72:	4686      	mov	lr, r0
90003f74:	f8d3 8010 	ldr.w	r8, [r3, #16]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90003f78:	e9d3 1709 	ldrd	r1, r7, [r3, #36]	@ 0x24
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90003f7c:	f8cd 8004 	str.w	r8, [sp, #4]
90003f80:	e004      	b.n	90003f8c <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x34>
  while(currentMCU < (numberMCU + BlockIndex))
90003f82:	45a9      	cmp	r9, r5

        refline += JPEG_ConvertorParams.ScaledWidth;
      }
    }

    pInBuffer +=  GRAY_444_BLOCK_SIZE;
90003f84:	f106 0640 	add.w	r6, r6, #64	@ 0x40
  while(currentMCU < (numberMCU + BlockIndex))
90003f88:	f000 808c 	beq.w	900040a4 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x14c>
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90003f8c:	00ea      	lsls	r2, r5, #3
    currentMCU++;
90003f8e:	4633      	mov	r3, r6
90003f90:	f04f 0a08 	mov.w	sl, #8
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90003f94:	3501      	adds	r5, #1
90003f96:	fbb2 f0f1 	udiv	r0, r2, r1
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
90003f9a:	fb01 2210 	mls	r2, r1, r0, r2
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90003f9e:	fb07 f000 	mul.w	r0, r7, r0
90003fa2:	0052      	lsls	r2, r2, #1
90003fa4:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90003fa8:	9801      	ldr	r0, [sp, #4]
90003faa:	4290      	cmp	r0, r2
90003fac:	d9e9      	bls.n	90003f82 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x2a>
          ySample =   (uint32_t)(*pLum);
90003fae:	f893 8000 	ldrb.w	r8, [r3]
      pOutAddr = pOutBuffer + refline;
90003fb2:	18a0      	adds	r0, r4, r2
          pLum++;
90003fb4:	3308      	adds	r3, #8
    for(i= 0; i <  8; i++)
90003fb6:	f1ba 0a01 	subs.w	sl, sl, #1
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);
90003fba:	ea4f 0cd8 	mov.w	ip, r8, lsr #3
90003fbe:	ea4f 0898 	mov.w	r8, r8, lsr #2
90003fc2:	ea4f 2bcc 	mov.w	fp, ip, lsl #11
90003fc6:	ea4b 1848 	orr.w	r8, fp, r8, lsl #5
90003fca:	ea4c 0c08 	orr.w	ip, ip, r8
90003fce:	f824 c002 	strh.w	ip, [r4, r2]
        refline += JPEG_ConvertorParams.ScaledWidth;
90003fd2:	443a      	add	r2, r7
          ySample =   (uint32_t)(*pLum);
90003fd4:	f813 8c07 	ldrb.w	r8, [r3, #-7]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);
90003fd8:	ea4f 0cd8 	mov.w	ip, r8, lsr #3
90003fdc:	ea4f 0898 	mov.w	r8, r8, lsr #2
90003fe0:	ea4f 2bcc 	mov.w	fp, ip, lsl #11
90003fe4:	ea4b 1848 	orr.w	r8, fp, r8, lsl #5
90003fe8:	ea4c 0c08 	orr.w	ip, ip, r8
90003fec:	f8a0 c002 	strh.w	ip, [r0, #2]
          ySample =   (uint32_t)(*pLum);
90003ff0:	f813 8c06 	ldrb.w	r8, [r3, #-6]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);
90003ff4:	ea4f 0cd8 	mov.w	ip, r8, lsr #3
90003ff8:	ea4f 0898 	mov.w	r8, r8, lsr #2
90003ffc:	ea4f 2bcc 	mov.w	fp, ip, lsl #11
90004000:	ea4b 1848 	orr.w	r8, fp, r8, lsl #5
90004004:	ea4c 0c08 	orr.w	ip, ip, r8
90004008:	f8a0 c004 	strh.w	ip, [r0, #4]
          ySample =   (uint32_t)(*pLum);
9000400c:	f813 8c05 	ldrb.w	r8, [r3, #-5]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);
90004010:	ea4f 0cd8 	mov.w	ip, r8, lsr #3
90004014:	ea4f 0898 	mov.w	r8, r8, lsr #2
90004018:	ea4f 2bcc 	mov.w	fp, ip, lsl #11
9000401c:	ea4b 1848 	orr.w	r8, fp, r8, lsl #5
90004020:	ea4c 0c08 	orr.w	ip, ip, r8
90004024:	f8a0 c006 	strh.w	ip, [r0, #6]
          ySample =   (uint32_t)(*pLum);
90004028:	f813 8c04 	ldrb.w	r8, [r3, #-4]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);
9000402c:	ea4f 0cd8 	mov.w	ip, r8, lsr #3
90004030:	ea4f 0898 	mov.w	r8, r8, lsr #2
90004034:	ea4f 2bcc 	mov.w	fp, ip, lsl #11
90004038:	ea4b 1848 	orr.w	r8, fp, r8, lsl #5
9000403c:	ea4c 0c08 	orr.w	ip, ip, r8
90004040:	f8a0 c008 	strh.w	ip, [r0, #8]
          ySample =   (uint32_t)(*pLum);
90004044:	f813 8c03 	ldrb.w	r8, [r3, #-3]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);
90004048:	ea4f 0cd8 	mov.w	ip, r8, lsr #3
9000404c:	ea4f 0898 	mov.w	r8, r8, lsr #2
90004050:	ea4f 2bcc 	mov.w	fp, ip, lsl #11
90004054:	ea4b 1848 	orr.w	r8, fp, r8, lsl #5
90004058:	ea4c 0c08 	orr.w	ip, ip, r8
9000405c:	f8a0 c00a 	strh.w	ip, [r0, #10]
          ySample =   (uint32_t)(*pLum);
90004060:	f813 8c02 	ldrb.w	r8, [r3, #-2]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);
90004064:	ea4f 0cd8 	mov.w	ip, r8, lsr #3
90004068:	ea4f 0898 	mov.w	r8, r8, lsr #2
9000406c:	ea4f 2bcc 	mov.w	fp, ip, lsl #11
90004070:	ea4b 1848 	orr.w	r8, fp, r8, lsl #5
90004074:	ea4c 0c08 	orr.w	ip, ip, r8
90004078:	f8a0 c00c 	strh.w	ip, [r0, #12]
          ySample =   (uint32_t)(*pLum);
9000407c:	f813 8c01 	ldrb.w	r8, [r3, #-1]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);
90004080:	ea4f 0cd8 	mov.w	ip, r8, lsr #3
90004084:	ea4f 0898 	mov.w	r8, r8, lsr #2
90004088:	ea4f 2bcc 	mov.w	fp, ip, lsl #11
9000408c:	ea4b 1848 	orr.w	r8, fp, r8, lsl #5
90004090:	ea4c 0c08 	orr.w	ip, ip, r8
90004094:	f8a0 c00e 	strh.w	ip, [r0, #14]
    for(i= 0; i <  8; i++)
90004098:	d186      	bne.n	90003fa8 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x50>
  while(currentMCU < (numberMCU + BlockIndex))
9000409a:	45a9      	cmp	r9, r5
    pInBuffer +=  GRAY_444_BLOCK_SIZE;
9000409c:	f106 0640 	add.w	r6, r6, #64	@ 0x40
  while(currentMCU < (numberMCU + BlockIndex))
900040a0:	f47f af74 	bne.w	90003f8c <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x34>
900040a4:	4670      	mov	r0, lr
  }
  return numberMCU;
}
900040a6:	b003      	add	sp, #12
900040a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
900040ac:	2400b1c8 	.word	0x2400b1c8

900040b0 <JPEG_MCU_YCCK_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCCK_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
900040b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t *pOutAddr, *pChrom;

  numberMCU = DataCount / CMYK_444_BLOCK_SIZE;
  currentMCU = BlockIndex;

  while(currentMCU < (numberMCU + BlockIndex))
900040b4:	eb02 2a13 	add.w	sl, r2, r3, lsr #8
{
900040b8:	b085      	sub	sp, #20
  numberMCU = DataCount / CMYK_444_BLOCK_SIZE;
900040ba:	ea4f 2913 	mov.w	r9, r3, lsr #8
  while(currentMCU < (numberMCU + BlockIndex))
900040be:	4592      	cmp	sl, r2
900040c0:	f240 813e 	bls.w	90004340 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x290>
  {

    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
900040c4:	4ba0      	ldr	r3, [pc, #640]	@ (90004348 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x298>)
900040c6:	4615      	mov	r5, r2
900040c8:	4606      	mov	r6, r0
900040ca:	460c      	mov	r4, r1
        pOutAddr = pOutBuffer+ refline;

          for(j=0; j < 8; j++)
          {
            color_k = (int32_t)(*(pChrom + 192));
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900040cc:	4a9f      	ldr	r2, [pc, #636]	@ (9000434c <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x29c>)
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
900040ce:	f8d3 8010 	ldr.w	r8, [r3, #16]
900040d2:	9501      	str	r5, [sp, #4]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
900040d4:	e9d3 b709 	ldrd	fp, r7, [r3, #36]	@ 0x24
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
900040d8:	e9cd ba02 	strd	fp, sl, [sp, #8]
900040dc:	e006      	b.n	900040ec <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x3c>
  while(currentMCU < (numberMCU + BlockIndex))
900040de:	9b03      	ldr	r3, [sp, #12]

        refline += JPEG_ConvertorParams.ScaledWidth;
      }
    }

    pInBuffer +=  CMYK_444_BLOCK_SIZE;
900040e0:	f506 7680 	add.w	r6, r6, #256	@ 0x100
  while(currentMCU < (numberMCU + BlockIndex))
900040e4:	9901      	ldr	r1, [sp, #4]
900040e6:	428b      	cmp	r3, r1
900040e8:	f000 812a 	beq.w	90004340 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x290>
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
900040ec:	9801      	ldr	r0, [sp, #4]
    currentMCU++;
900040ee:	f04f 0e08 	mov.w	lr, #8
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
900040f2:	9d02      	ldr	r5, [sp, #8]
900040f4:	00c3      	lsls	r3, r0, #3
900040f6:	3001      	adds	r0, #1
900040f8:	fbb3 f1f5 	udiv	r1, r3, r5
900040fc:	9001      	str	r0, [sp, #4]
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
900040fe:	fb05 3011 	mls	r0, r5, r1, r3
    currentMCU++;
90004102:	4633      	mov	r3, r6
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90004104:	fb07 f101 	mul.w	r1, r7, r1
    currentMCU++;
90004108:	4675      	mov	r5, lr
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
9000410a:	0040      	lsls	r0, r0, #1
9000410c:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90004110:	4580      	cmp	r8, r0
90004112:	d9e4      	bls.n	900040de <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x2e>
            color_k = (int32_t)(*(pChrom + 192));
90004114:	f893 b0c0 	ldrb.w	fp, [r3, #192]	@ 0xc0
        pOutAddr = pOutBuffer+ refline;
90004118:	eb04 0c00 	add.w	ip, r4, r0
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
9000411c:	f893 1040 	ldrb.w	r1, [r3, #64]	@ 0x40
    for(i= 0; i <  8; i++)
90004120:	3d01      	subs	r5, #1
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90004122:	f893 a000 	ldrb.w	sl, [r3]
            pChrom++;
90004126:	f103 0308 	add.w	r3, r3, #8
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
9000412a:	fb11 f10b 	smulbb	r1, r1, fp
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9000412e:	fb1a fa0b 	smulbb	sl, sl, fp
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
90004132:	fba2 1e01 	umull	r1, lr, r2, r1
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90004136:	fba2 a10a 	umull	sl, r1, r2, sl
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
9000413a:	ea4f 2e5e 	mov.w	lr, lr, lsr #9
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
9000413e:	ea4f 2191 	mov.w	r1, r1, lsr #10
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90004142:	ea4f 1e4e 	mov.w	lr, lr, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
90004146:	ea4e 21c1 	orr.w	r1, lr, r1, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
9000414a:	f893 e078 	ldrb.w	lr, [r3, #120]	@ 0x78
9000414e:	fb1e fe0b 	smulbb	lr, lr, fp
90004152:	fba2 ea0e 	umull	lr, sl, r2, lr
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90004156:	ea41 219a 	orr.w	r1, r1, sl, lsr #10
9000415a:	b289      	uxth	r1, r1
          *(__IO uint16_t *)pOutAddr =
9000415c:	5221      	strh	r1, [r4, r0]
        refline += JPEG_ConvertorParams.ScaledWidth;
9000415e:	4438      	add	r0, r7
            color_k = (int32_t)(*(pChrom + 192));
90004160:	f893 b0b9 	ldrb.w	fp, [r3, #185]	@ 0xb9
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
90004164:	f893 1039 	ldrb.w	r1, [r3, #57]	@ 0x39
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90004168:	f813 ac07 	ldrb.w	sl, [r3, #-7]
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
9000416c:	fb11 f10b 	smulbb	r1, r1, fp
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90004170:	fb1a fa0b 	smulbb	sl, sl, fp
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
90004174:	fba2 1e01 	umull	r1, lr, r2, r1
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90004178:	fba2 a10a 	umull	sl, r1, r2, sl
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
9000417c:	ea4f 2e5e 	mov.w	lr, lr, lsr #9
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
90004180:	ea4f 2191 	mov.w	r1, r1, lsr #10
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90004184:	ea4f 1e4e 	mov.w	lr, lr, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
90004188:	ea4e 21c1 	orr.w	r1, lr, r1, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
9000418c:	f893 e079 	ldrb.w	lr, [r3, #121]	@ 0x79
90004190:	fb1e fe0b 	smulbb	lr, lr, fp
90004194:	fba2 ea0e 	umull	lr, sl, r2, lr
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90004198:	ea41 219a 	orr.w	r1, r1, sl, lsr #10
9000419c:	b289      	uxth	r1, r1
          *(__IO uint16_t *)pOutAddr =
9000419e:	f8ac 1002 	strh.w	r1, [ip, #2]
            color_k = (int32_t)(*(pChrom + 192));
900041a2:	f893 b0ba 	ldrb.w	fp, [r3, #186]	@ 0xba
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
900041a6:	f893 103a 	ldrb.w	r1, [r3, #58]	@ 0x3a
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900041aa:	f813 ac06 	ldrb.w	sl, [r3, #-6]
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
900041ae:	fb11 f10b 	smulbb	r1, r1, fp
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900041b2:	fb1a fa0b 	smulbb	sl, sl, fp
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
900041b6:	fba2 1e01 	umull	r1, lr, r2, r1
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900041ba:	fba2 a10a 	umull	sl, r1, r2, sl
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900041be:	ea4f 2e5e 	mov.w	lr, lr, lsr #9
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
900041c2:	ea4f 2191 	mov.w	r1, r1, lsr #10
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900041c6:	ea4f 1e4e 	mov.w	lr, lr, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
900041ca:	ea4e 21c1 	orr.w	r1, lr, r1, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
900041ce:	f893 e07a 	ldrb.w	lr, [r3, #122]	@ 0x7a
900041d2:	fb1e fe0b 	smulbb	lr, lr, fp
900041d6:	fba2 ea0e 	umull	lr, sl, r2, lr
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900041da:	ea41 219a 	orr.w	r1, r1, sl, lsr #10
900041de:	b289      	uxth	r1, r1
          *(__IO uint16_t *)pOutAddr =
900041e0:	f8ac 1004 	strh.w	r1, [ip, #4]
            color_k = (int32_t)(*(pChrom + 192));
900041e4:	f893 b0bb 	ldrb.w	fp, [r3, #187]	@ 0xbb
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
900041e8:	f893 103b 	ldrb.w	r1, [r3, #59]	@ 0x3b
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900041ec:	f813 ac05 	ldrb.w	sl, [r3, #-5]
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
900041f0:	fb11 f10b 	smulbb	r1, r1, fp
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900041f4:	fb1a fa0b 	smulbb	sl, sl, fp
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
900041f8:	fba2 1e01 	umull	r1, lr, r2, r1
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900041fc:	fba2 a10a 	umull	sl, r1, r2, sl
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90004200:	ea4f 2e5e 	mov.w	lr, lr, lsr #9
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
90004204:	ea4f 2191 	mov.w	r1, r1, lsr #10
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90004208:	ea4f 1e4e 	mov.w	lr, lr, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
9000420c:	ea4e 21c1 	orr.w	r1, lr, r1, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
90004210:	f893 e07b 	ldrb.w	lr, [r3, #123]	@ 0x7b
90004214:	fb1e fe0b 	smulbb	lr, lr, fp
90004218:	fba2 ea0e 	umull	lr, sl, r2, lr
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
9000421c:	ea41 219a 	orr.w	r1, r1, sl, lsr #10
90004220:	b289      	uxth	r1, r1
          *(__IO uint16_t *)pOutAddr =
90004222:	f8ac 1006 	strh.w	r1, [ip, #6]
            color_k = (int32_t)(*(pChrom + 192));
90004226:	f893 b0bc 	ldrb.w	fp, [r3, #188]	@ 0xbc
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
9000422a:	f893 103c 	ldrb.w	r1, [r3, #60]	@ 0x3c
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9000422e:	f813 ac04 	ldrb.w	sl, [r3, #-4]
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
90004232:	fb11 f10b 	smulbb	r1, r1, fp
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90004236:	fb1a fa0b 	smulbb	sl, sl, fp
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
9000423a:	fba2 1e01 	umull	r1, lr, r2, r1
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9000423e:	fba2 a10a 	umull	sl, r1, r2, sl
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90004242:	ea4f 2e5e 	mov.w	lr, lr, lsr #9
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
90004246:	ea4f 2191 	mov.w	r1, r1, lsr #10
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
9000424a:	ea4f 1e4e 	mov.w	lr, lr, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
9000424e:	ea4e 21c1 	orr.w	r1, lr, r1, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
90004252:	f893 e07c 	ldrb.w	lr, [r3, #124]	@ 0x7c
90004256:	fb1e fe0b 	smulbb	lr, lr, fp
9000425a:	fba2 ea0e 	umull	lr, sl, r2, lr
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
9000425e:	ea41 219a 	orr.w	r1, r1, sl, lsr #10
90004262:	b289      	uxth	r1, r1
          *(__IO uint16_t *)pOutAddr =
90004264:	f8ac 1008 	strh.w	r1, [ip, #8]
            color_k = (int32_t)(*(pChrom + 192));
90004268:	f893 b0bd 	ldrb.w	fp, [r3, #189]	@ 0xbd
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
9000426c:	f893 103d 	ldrb.w	r1, [r3, #61]	@ 0x3d
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90004270:	f813 ac03 	ldrb.w	sl, [r3, #-3]
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
90004274:	fb11 f10b 	smulbb	r1, r1, fp
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90004278:	fb1a fa0b 	smulbb	sl, sl, fp
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
9000427c:	fba2 1e01 	umull	r1, lr, r2, r1
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90004280:	fba2 a10a 	umull	sl, r1, r2, sl
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90004284:	ea4f 2e5e 	mov.w	lr, lr, lsr #9
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
90004288:	ea4f 2191 	mov.w	r1, r1, lsr #10
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
9000428c:	ea4f 1e4e 	mov.w	lr, lr, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
90004290:	ea4e 21c1 	orr.w	r1, lr, r1, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
90004294:	f893 e07d 	ldrb.w	lr, [r3, #125]	@ 0x7d
90004298:	fb1e fe0b 	smulbb	lr, lr, fp
9000429c:	fba2 ea0e 	umull	lr, sl, r2, lr
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900042a0:	ea41 219a 	orr.w	r1, r1, sl, lsr #10
900042a4:	b289      	uxth	r1, r1
          *(__IO uint16_t *)pOutAddr =
900042a6:	f8ac 100a 	strh.w	r1, [ip, #10]
            color_k = (int32_t)(*(pChrom + 192));
900042aa:	f893 a0be 	ldrb.w	sl, [r3, #190]	@ 0xbe
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900042ae:	f813 1c02 	ldrb.w	r1, [r3, #-2]
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
900042b2:	f893 e03e 	ldrb.w	lr, [r3, #62]	@ 0x3e
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900042b6:	fb11 f10a 	smulbb	r1, r1, sl
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
900042ba:	fb1e fe0a 	smulbb	lr, lr, sl
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900042be:	fba2 1b01 	umull	r1, fp, r2, r1
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
900042c2:	fba2 e10e 	umull	lr, r1, r2, lr
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
900042c6:	f893 e07e 	ldrb.w	lr, [r3, #126]	@ 0x7e
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
900042ca:	ea4f 2b9b 	mov.w	fp, fp, lsr #10
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
900042ce:	fb1e fe0a 	smulbb	lr, lr, sl
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900042d2:	ea4f 2151 	mov.w	r1, r1, lsr #9
900042d6:	ea4f 1141 	mov.w	r1, r1, lsl #5
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
900042da:	fba2 ea0e 	umull	lr, sl, r2, lr
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
900042de:	ea41 21cb 	orr.w	r1, r1, fp, lsl #11
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900042e2:	ea41 219a 	orr.w	r1, r1, sl, lsr #10
900042e6:	b289      	uxth	r1, r1
          *(__IO uint16_t *)pOutAddr =
900042e8:	f8ac 100c 	strh.w	r1, [ip, #12]
            color_k = (int32_t)(*(pChrom + 192));
900042ec:	f893 b0bf 	ldrb.w	fp, [r3, #191]	@ 0xbf
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
900042f0:	f893 103f 	ldrb.w	r1, [r3, #63]	@ 0x3f
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900042f4:	f813 ac01 	ldrb.w	sl, [r3, #-1]
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
900042f8:	fb11 f10b 	smulbb	r1, r1, fp
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900042fc:	fb1a fa0b 	smulbb	sl, sl, fp
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
90004300:	fba2 1e01 	umull	r1, lr, r2, r1
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90004304:	fba2 a10a 	umull	sl, r1, r2, sl
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90004308:	ea4f 2e5e 	mov.w	lr, lr, lsr #9
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
9000430c:	ea4f 2191 	mov.w	r1, r1, lsr #10
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90004310:	ea4f 1e4e 	mov.w	lr, lr, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
90004314:	ea4e 21c1 	orr.w	r1, lr, r1, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
90004318:	f893 e07f 	ldrb.w	lr, [r3, #127]	@ 0x7f
9000431c:	fb1e fe0b 	smulbb	lr, lr, fp
90004320:	fba2 ea0e 	umull	lr, sl, r2, lr
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90004324:	ea41 219a 	orr.w	r1, r1, sl, lsr #10
90004328:	b289      	uxth	r1, r1
          *(__IO uint16_t *)pOutAddr =
9000432a:	f8ac 100e 	strh.w	r1, [ip, #14]
    for(i= 0; i <  8; i++)
9000432e:	f47f aeef 	bne.w	90004110 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x60>
  while(currentMCU < (numberMCU + BlockIndex))
90004332:	9b03      	ldr	r3, [sp, #12]
    pInBuffer +=  CMYK_444_BLOCK_SIZE;
90004334:	f506 7680 	add.w	r6, r6, #256	@ 0x100
  while(currentMCU < (numberMCU + BlockIndex))
90004338:	9901      	ldr	r1, [sp, #4]
9000433a:	428b      	cmp	r3, r1
9000433c:	f47f aed6 	bne.w	900040ec <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x3c>
  }
  return numberMCU;
}
90004340:	4648      	mov	r0, r9
90004342:	b005      	add	sp, #20
90004344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90004348:	2400b1c8 	.word	0x2400b1c8
9000434c:	80808081 	.word	0x80808081

90004350 <TGFX_JPEG_GetDecodeColorConvertFunc>:
  *                      depending of the jpeg image color space and chroma sampling info.
  * @param ImageNbMCUs : pointer to uint32_t, used to retrive the total number of MCU blocks in the jpeg image.
  * @retval HAL status : HAL_OK or HAL_ERROR.
  */
HAL_StatusTypeDef TGFX_JPEG_GetDecodeColorConvertFunc(JPEG_ConfTypeDef *pJpegInfo, JPEG_YCbCrToRGB_Convert_Function *pFunction, uint32_t *ImageNbMCUs)
{
90004350:	b5f0      	push	{r4, r5, r6, r7, lr}
  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
  JPEG_ConvertorParams.ImageWidth = pJpegInfo->ImageWidth;
  JPEG_ConvertorParams.ImageHeight = pJpegInfo->ImageHeight;
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;

  JPEG_ConvertorParams.ChromaSubsampling = pJpegInfo->ChromaSubsampling;
90004352:	e9d0 7501 	ldrd	r7, r5, [r0, #4]
  JPEG_ConvertorParams.ImageWidth = pJpegInfo->ImageWidth;
90004356:	68c4      	ldr	r4, [r0, #12]
  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
90004358:	6806      	ldr	r6, [r0, #0]
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
9000435a:	fb05 f004 	mul.w	r0, r5, r4
  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
9000435e:	4b3b      	ldr	r3, [pc, #236]	@ (9000444c <TGFX_JPEG_GetDecodeColorConvertFunc+0xfc>)
  if(JPEG_ConvertorParams.ColorSpace == JPEG_YCBCR_COLORSPACE)
90004360:	2e10      	cmp	r6, #16
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
90004362:	ea4f 0040 	mov.w	r0, r0, lsl #1
  JPEG_ConvertorParams.ImageWidth = pJpegInfo->ImageWidth;
90004366:	609c      	str	r4, [r3, #8]
  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
90004368:	601e      	str	r6, [r3, #0]
  JPEG_ConvertorParams.ImageHeight = pJpegInfo->ImageHeight;
9000436a:	60dd      	str	r5, [r3, #12]
  JPEG_ConvertorParams.ChromaSubsampling = pJpegInfo->ChromaSubsampling;
9000436c:	605f      	str	r7, [r3, #4]
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
9000436e:	6118      	str	r0, [r3, #16]
  if(JPEG_ConvertorParams.ColorSpace == JPEG_YCBCR_COLORSPACE)
90004370:	d030      	beq.n	900043d4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x84>
      }
      JPEG_ConvertorParams.H_factor = 8;
      JPEG_ConvertorParams.V_factor  = 8;
    }
  }
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_GRAYSCALE_COLORSPACE)
90004372:	b9c6      	cbnz	r6, 900043a6 <TGFX_JPEG_GetDecodeColorConvertFunc+0x56>
  {
    *pFunction =  JPEG_MCU_Gray_ARGB_ConvertBlocks;
90004374:	4836      	ldr	r0, [pc, #216]	@ (90004450 <TGFX_JPEG_GetDecodeColorConvertFunc+0x100>)

    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;

    if(JPEG_ConvertorParams.LineOffset != 0)
90004376:	f014 0707 	ands.w	r7, r4, #7
    *pFunction =  JPEG_MCU_Gray_ARGB_ConvertBlocks;
9000437a:	6008      	str	r0, [r1, #0]
    if(JPEG_ConvertorParams.LineOffset != 0)
9000437c:	d11a      	bne.n	900043b4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x64>
  {
    return HAL_ERROR; /* Color space Not supported*/
  }

  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;
9000437e:	0061      	lsls	r1, r4, #1
      JPEG_ConvertorParams.H_factor = 16;
90004380:	2008      	movs	r0, #8
    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
90004382:	615f      	str	r7, [r3, #20]
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;
90004384:	6299      	str	r1, [r3, #40]	@ 0x28

  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
90004386:	08e1      	lsrs	r1, r4, #3
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
90004388:	625c      	str	r4, [r3, #36]	@ 0x24
      JPEG_ConvertorParams.V_factor  = 8;
9000438a:	e9c3 0007 	strd	r0, r0, [r3, #28]
  if((JPEG_ConvertorParams.ImageWidth % JPEG_ConvertorParams.H_factor) != 0)
  {
    hMCU++; /*+1 for horizenatl incomplete MCU */
  }

  vMCU = (JPEG_ConvertorParams.ImageHeight / JPEG_ConvertorParams.V_factor);
9000438e:	fbb5 f4f0 	udiv	r4, r5, r0
  if((JPEG_ConvertorParams.ImageHeight % JPEG_ConvertorParams.V_factor) != 0)
90004392:	fb00 5514 	mls	r5, r0, r4, r5
90004396:	b105      	cbz	r5, 9000439a <TGFX_JPEG_GetDecodeColorConvertFunc+0x4a>
  {
    vMCU++; /*+1 for vertical incomplete MCU */
90004398:	3401      	adds	r4, #1
  }
  JPEG_ConvertorParams.MCU_Total_Nb = (hMCU * vMCU);
9000439a:	fb04 f101 	mul.w	r1, r4, r1
  *ImageNbMCUs = JPEG_ConvertorParams.MCU_Total_Nb;

  return HAL_OK;
9000439e:	2000      	movs	r0, #0
  JPEG_ConvertorParams.MCU_Total_Nb = (hMCU * vMCU);
900043a0:	62d9      	str	r1, [r3, #44]	@ 0x2c
  *ImageNbMCUs = JPEG_ConvertorParams.MCU_Total_Nb;
900043a2:	6011      	str	r1, [r2, #0]
}
900043a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_CMYK_COLORSPACE)
900043a6:	2e30      	cmp	r6, #48	@ 0x30
900043a8:	d11e      	bne.n	900043e8 <TGFX_JPEG_GetDecodeColorConvertFunc+0x98>
    *pFunction =  JPEG_MCU_YCCK_ARGB_ConvertBlocks;
900043aa:	482a      	ldr	r0, [pc, #168]	@ (90004454 <TGFX_JPEG_GetDecodeColorConvertFunc+0x104>)
    if(JPEG_ConvertorParams.LineOffset != 0)
900043ac:	f014 0707 	ands.w	r7, r4, #7
    *pFunction =  JPEG_MCU_YCCK_ARGB_ConvertBlocks;
900043b0:	6008      	str	r0, [r1, #0]
    if(JPEG_ConvertorParams.LineOffset != 0)
900043b2:	d0e4      	beq.n	9000437e <TGFX_JPEG_GetDecodeColorConvertFunc+0x2e>
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
900043b4:	2608      	movs	r6, #8
      JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;
900043b6:	f1c7 0708 	rsb	r7, r7, #8
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;
900043ba:	ea4f 0e44 	mov.w	lr, r4, lsl #1
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
900043be:	08e1      	lsrs	r1, r4, #3
900043c0:	46b4      	mov	ip, r6
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
900043c2:	443c      	add	r4, r7
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
900043c4:	4630      	mov	r0, r6
    hMCU++; /*+1 for horizenatl incomplete MCU */
900043c6:	3101      	adds	r1, #1
      JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;
900043c8:	615f      	str	r7, [r3, #20]
      JPEG_ConvertorParams.V_factor  = 8;
900043ca:	e9c3 6c07 	strd	r6, ip, [r3, #28]
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;
900043ce:	e9c3 4e09 	strd	r4, lr, [r3, #36]	@ 0x24
    hMCU++; /*+1 for horizenatl incomplete MCU */
900043d2:	e7dc      	b.n	9000438e <TGFX_JPEG_GetDecodeColorConvertFunc+0x3e>
    if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_420_SUBSAMPLING)
900043d4:	2f01      	cmp	r7, #1
900043d6:	d018      	beq.n	9000440a <TGFX_JPEG_GetDecodeColorConvertFunc+0xba>
    else if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_422_SUBSAMPLING)
900043d8:	2f02      	cmp	r7, #2
900043da:	d007      	beq.n	900043ec <TGFX_JPEG_GetDecodeColorConvertFunc+0x9c>
      *pFunction =  JPEG_MCU_YCbCr444_ARGB_ConvertBlocks;
900043dc:	481e      	ldr	r0, [pc, #120]	@ (90004458 <TGFX_JPEG_GetDecodeColorConvertFunc+0x108>)
      if(JPEG_ConvertorParams.LineOffset != 0)
900043de:	f014 0707 	ands.w	r7, r4, #7
      *pFunction =  JPEG_MCU_YCbCr444_ARGB_ConvertBlocks;
900043e2:	6008      	str	r0, [r1, #0]
      if(JPEG_ConvertorParams.LineOffset != 0)
900043e4:	d1e6      	bne.n	900043b4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x64>
900043e6:	e7ca      	b.n	9000437e <TGFX_JPEG_GetDecodeColorConvertFunc+0x2e>
    return HAL_ERROR; /* Color space Not supported*/
900043e8:	2001      	movs	r0, #1
}
900043ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
      *pFunction =  JPEG_MCU_YCbCr422_ARGB_ConvertBlocks;
900043ec:	481b      	ldr	r0, [pc, #108]	@ (9000445c <TGFX_JPEG_GetDecodeColorConvertFunc+0x10c>)
      if(JPEG_ConvertorParams.LineOffset != 0)
900043ee:	f014 070f 	ands.w	r7, r4, #15
      *pFunction =  JPEG_MCU_YCbCr422_ARGB_ConvertBlocks;
900043f2:	6008      	str	r0, [r1, #0]
      if(JPEG_ConvertorParams.LineOffset != 0)
900043f4:	d020      	beq.n	90004438 <TGFX_JPEG_GetDecodeColorConvertFunc+0xe8>
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;
900043f6:	f1c7 0710 	rsb	r7, r7, #16
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
900043fa:	f04f 0c08 	mov.w	ip, #8
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;
900043fe:	ea4f 0e44 	mov.w	lr, r4, lsl #1
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
90004402:	0921      	lsrs	r1, r4, #4
90004404:	4660      	mov	r0, ip
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
90004406:	443c      	add	r4, r7
  if((JPEG_ConvertorParams.ImageWidth % JPEG_ConvertorParams.H_factor) != 0)
90004408:	e7dd      	b.n	900043c6 <TGFX_JPEG_GetDecodeColorConvertFunc+0x76>
      *pFunction = TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks;
9000440a:	4815      	ldr	r0, [pc, #84]	@ (90004460 <TGFX_JPEG_GetDecodeColorConvertFunc+0x110>)
      if(JPEG_ConvertorParams.LineOffset != 0)
9000440c:	f014 070f 	ands.w	r7, r4, #15
      *pFunction = TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks;
90004410:	6008      	str	r0, [r1, #0]
      if(JPEG_ConvertorParams.LineOffset != 0)
90004412:	d108      	bne.n	90004426 <TGFX_JPEG_GetDecodeColorConvertFunc+0xd6>
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;
90004414:	0061      	lsls	r1, r4, #1
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
90004416:	4630      	mov	r0, r6
      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;
90004418:	615f      	str	r7, [r3, #20]
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;
9000441a:	6299      	str	r1, [r3, #40]	@ 0x28
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
9000441c:	0921      	lsrs	r1, r4, #4
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
9000441e:	625c      	str	r4, [r3, #36]	@ 0x24
      JPEG_ConvertorParams.V_factor  = 8;
90004420:	e9c3 6607 	strd	r6, r6, [r3, #28]
  if((JPEG_ConvertorParams.ImageWidth % JPEG_ConvertorParams.H_factor) != 0)
90004424:	e7b3      	b.n	9000438e <TGFX_JPEG_GetDecodeColorConvertFunc+0x3e>
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;
90004426:	f1c7 0710 	rsb	r7, r7, #16
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;
9000442a:	ea4f 0e44 	mov.w	lr, r4, lsl #1
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
9000442e:	0921      	lsrs	r1, r4, #4
90004430:	46b4      	mov	ip, r6
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
90004432:	443c      	add	r4, r7
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
90004434:	4630      	mov	r0, r6
90004436:	e7c6      	b.n	900043c6 <TGFX_JPEG_GetDecodeColorConvertFunc+0x76>
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;
90004438:	0061      	lsls	r1, r4, #1
      JPEG_ConvertorParams.V_factor  = 8;
9000443a:	2008      	movs	r0, #8
      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;
9000443c:	615f      	str	r7, [r3, #20]
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;
9000443e:	6299      	str	r1, [r3, #40]	@ 0x28
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
90004440:	0921      	lsrs	r1, r4, #4
      JPEG_ConvertorParams.H_factor = 16;
90004442:	61de      	str	r6, [r3, #28]
      JPEG_ConvertorParams.V_factor  = 8;
90004444:	e9c3 0408 	strd	r0, r4, [r3, #32]
  if((JPEG_ConvertorParams.ImageWidth % JPEG_ConvertorParams.H_factor) != 0)
90004448:	e7a1      	b.n	9000438e <TGFX_JPEG_GetDecodeColorConvertFunc+0x3e>
9000444a:	bf00      	nop
9000444c:	2400b1c8 	.word	0x2400b1c8
90004450:	90003f59 	.word	0x90003f59
90004454:	900040b1 	.word	0x900040b1
90004458:	90003c71 	.word	0x90003c71
9000445c:	90003991 	.word	0x90003991
90004460:	90003781 	.word	0x90003781

90004464 <TGFX_JPEG_InitColorTables>:
  * @brief  Initializes the colors conversion Look Up Tables
  * @param  None
  * @retval None
  */
void TGFX_JPEG_InitColorTables(void)
{
90004464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90004468:	f8df c1bc 	ldr.w	ip, [pc, #444]	@ 90004628 <TGFX_JPEG_InitColorTables+0x1c4>
9000446c:	b0a5      	sub	sp, #148	@ 0x94
9000446e:	f8df 81bc 	ldr.w	r8, [pc, #444]	@ 9000462c <TGFX_JPEG_InitColorTables+0x1c8>
90004472:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
90004476:	f8df e1b8 	ldr.w	lr, [pc, #440]	@ 90004630 <TGFX_JPEG_InitColorTables+0x1cc>
  */
void TGFX_JPEG_InitPreProcColorTables(void)
{
  int32_t i;

  for (i = 0; i <= 255; i++)
9000447a:	2300      	movs	r3, #0
9000447c:	4f60      	ldr	r7, [pc, #384]	@ (90004600 <TGFX_JPEG_InitColorTables+0x19c>)
    GREEN_CB_LUT[i]        = (((-((int32_t) ((0.3313 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;

    /* BLUE_CB_LUT and RED_CR_LUT are identical */
    BLUE_CB_RED_CR_LUT[i]  = ((  ((int32_t) ((0.5 )    * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;

    GREEN_CR_LUT[i]        = (((-((int32_t) ((0.4187 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
9000447e:	f64e 3b2f 	movw	fp, #60207	@ 0xeb2f
90004482:	4e60      	ldr	r6, [pc, #384]	@ (90004604 <TGFX_JPEG_InitColorTables+0x1a0>)
    BLUE_CR_LUT[i]         = (((-((int32_t) ((0.0813 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
90004484:	f249 4ad0 	movw	sl, #38096	@ 0x94d0
90004488:	4d5f      	ldr	r5, [pc, #380]	@ (90004608 <TGFX_JPEG_InitColorTables+0x1a4>)
  for (i = 0; i <= 255; i++)
9000448a:	f644 498b 	movw	r9, #19595	@ 0x4c8b
9000448e:	4c5f      	ldr	r4, [pc, #380]	@ (9000460c <TGFX_JPEG_InitColorTables+0x1a8>)
90004490:	485f      	ldr	r0, [pc, #380]	@ (90004610 <TGFX_JPEG_InitColorTables+0x1ac>)
    GREEN_Y_LUT[i]         = ((  ((int32_t) ((0.587 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
90004492:	f249 6245 	movw	r2, #38469	@ 0x9645
90004496:	fb02 f203 	mul.w	r2, r2, r3
9000449a:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
9000449e:	1412      	asrs	r2, r2, #16
900044a0:	f84e 2f04 	str.w	r2, [lr, #4]!
    BLUE_Y_LUT[i]          = ((  ((int32_t) ((0.114 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
900044a4:	f641 522f 	movw	r2, #7471	@ 0x1d2f
900044a8:	fb02 f203 	mul.w	r2, r2, r3
900044ac:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
900044b0:	1412      	asrs	r2, r2, #16
900044b2:	f84c 2f04 	str.w	r2, [ip, #4]!
    RED_CB_LUT[i]          = (((-((int32_t) ((0.1687 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
900044b6:	4a57      	ldr	r2, [pc, #348]	@ (90004614 <TGFX_JPEG_InitColorTables+0x1b0>)
900044b8:	fb02 f203 	mul.w	r2, r2, r3
900044bc:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
900044c0:	1412      	asrs	r2, r2, #16
900044c2:	f847 2f04 	str.w	r2, [r7, #4]!
    GREEN_CB_LUT[i]        = (((-((int32_t) ((0.3313 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
900044c6:	4a54      	ldr	r2, [pc, #336]	@ (90004618 <TGFX_JPEG_InitColorTables+0x1b4>)
900044c8:	fb02 f203 	mul.w	r2, r2, r3
    BLUE_CB_RED_CR_LUT[i]  = ((  ((int32_t) ((0.5 )    * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
900044cc:	3301      	adds	r3, #1
    GREEN_CB_LUT[i]        = (((-((int32_t) ((0.3313 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
900044ce:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
  for (i = 0; i <= 255; i++)
900044d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
    GREEN_CB_LUT[i]        = (((-((int32_t) ((0.3313 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
900044d6:	ea4f 4222 	mov.w	r2, r2, asr #16
900044da:	f846 2f04 	str.w	r2, [r6, #4]!
    GREEN_CR_LUT[i]        = (((-((int32_t) ((0.4187 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
900044de:	4a4f      	ldr	r2, [pc, #316]	@ (9000461c <TGFX_JPEG_InitColorTables+0x1b8>)
900044e0:	fb02 b203 	mla	r2, r2, r3, fp
900044e4:	ea4f 4222 	mov.w	r2, r2, asr #16
900044e8:	f844 2f04 	str.w	r2, [r4, #4]!
    BLUE_CR_LUT[i]         = (((-((int32_t) ((0.0813 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
900044ec:	4a4c      	ldr	r2, [pc, #304]	@ (90004620 <TGFX_JPEG_InitColorTables+0x1bc>)
900044ee:	fb02 a203 	mla	r2, r2, r3, sl
900044f2:	ea4f 4222 	mov.w	r2, r2, asr #16
900044f6:	f840 2f04 	str.w	r2, [r0, #4]!
    RED_Y_LUT[i]           = ((  ((int32_t) ((0.299 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
900044fa:	ea4f 4221 	mov.w	r2, r1, asr #16
  for (i = 0; i <= 255; i++)
900044fe:	4449      	add	r1, r9
    RED_Y_LUT[i]           = ((  ((int32_t) ((0.299 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
90004500:	f848 2f04 	str.w	r2, [r8, #4]!
    BLUE_CB_RED_CR_LUT[i]  = ((  ((int32_t) ((0.5 )    * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
90004504:	f343 024f 	sbfx	r2, r3, #1, #16
90004508:	f845 2f04 	str.w	r2, [r5, #4]!
  for (i = 0; i <= 255; i++)
9000450c:	d1c1      	bne.n	90004492 <TGFX_JPEG_InitColorTables+0x2e>
9000450e:	2200      	movs	r2, #0
90004510:	4b44      	ldr	r3, [pc, #272]	@ (90004624 <TGFX_JPEG_InitColorTables+0x1c0>)
90004512:	f04f 0e41 	mov.w	lr, #65	@ 0x41
90004516:	f04f 0c42 	mov.w	ip, #66	@ 0x42
9000451a:	2743      	movs	r7, #67	@ 0x43
9000451c:	2644      	movs	r6, #68	@ 0x44
9000451e:	2545      	movs	r5, #69	@ 0x45
90004520:	2446      	movs	r4, #70	@ 0x46
90004522:	2047      	movs	r0, #71	@ 0x47
void TGFX_JPEG_Init_MCU_LUT(void)
{
  uint32_t i, j, offset;

  /*Y LUT */
  for(i = 0; i < 16; i++)
90004524:	4611      	mov	r1, r2
90004526:	e035      	b.n	90004594 <TGFX_JPEG_InitColorTables+0x130>
      offset =  j + (i*8);
      if((j>=8) && (i>=8)) offset+= 120;
      else  if((j>=8) && (i<8)) offset+= 56;
      else  if((j<8) && (i>=8)) offset+= 64;

      JPEG_Y_MCU_LUT[i*16 + j] = offset;
90004528:	f8a3 9004 	strh.w	r9, [r3, #4]
      offset =  j + (i*8);
9000452c:	f102 0904 	add.w	r9, r2, #4
      JPEG_Y_MCU_LUT[i*16 + j] = offset;
90004530:	f8a3 8006 	strh.w	r8, [r3, #6]
      offset =  j + (i*8);
90004534:	f102 0806 	add.w	r8, r2, #6
      JPEG_Y_MCU_LUT[i*16 + j] = offset;
90004538:	f8a3 9008 	strh.w	r9, [r3, #8]
      offset =  j + (i*8);
9000453c:	f102 0905 	add.w	r9, r2, #5
      JPEG_Y_MCU_LUT[i*16 + j] = offset;
90004540:	801a      	strh	r2, [r3, #0]
90004542:	f8a3 900a 	strh.w	r9, [r3, #10]
      offset =  j + (i*8);
90004546:	f102 0907 	add.w	r9, r2, #7
      JPEG_Y_MCU_LUT[i*16 + j] = offset;
9000454a:	f8a3 800c 	strh.w	r8, [r3, #12]
9000454e:	3208      	adds	r2, #8
      else  if((j>=8) && (i<8)) offset+= 56;
90004550:	4680      	mov	r8, r0
      JPEG_Y_MCU_LUT[i*16 + j] = offset;
90004552:	f8a3 a002 	strh.w	sl, [r3, #2]
90004556:	f8a3 e012 	strh.w	lr, [r3, #18]
9000455a:	f8a3 c014 	strh.w	ip, [r3, #20]
9000455e:	82df      	strh	r7, [r3, #22]
90004560:	831e      	strh	r6, [r3, #24]
90004562:	f8a3 900e 	strh.w	r9, [r3, #14]
90004566:	f8a3 b010 	strh.w	fp, [r3, #16]
9000456a:	835d      	strh	r5, [r3, #26]
9000456c:	839c      	strh	r4, [r3, #28]
  for(i = 0; i < 16; i++)
9000456e:	3101      	adds	r1, #1
      JPEG_Y_MCU_LUT[i*16 + j] = offset;
90004570:	f8a3 801e 	strh.w	r8, [r3, #30]
  for(i = 0; i < 16; i++)
90004574:	3008      	adds	r0, #8
90004576:	3320      	adds	r3, #32
90004578:	2910      	cmp	r1, #16
9000457a:	f104 0408 	add.w	r4, r4, #8
9000457e:	f105 0508 	add.w	r5, r5, #8
90004582:	f106 0608 	add.w	r6, r6, #8
90004586:	f107 0708 	add.w	r7, r7, #8
9000458a:	f10c 0c08 	add.w	ip, ip, #8
9000458e:	f10e 0e08 	add.w	lr, lr, #8
90004592:	d04f      	beq.n	90004634 <TGFX_JPEG_InitColorTables+0x1d0>
      else  if((j<8) && (i>=8)) offset+= 64;
90004594:	2907      	cmp	r1, #7
      offset =  j + (i*8);
90004596:	f102 0a01 	add.w	sl, r2, #1
9000459a:	f102 0902 	add.w	r9, r2, #2
9000459e:	f102 0803 	add.w	r8, r2, #3
      else  if((j<8) && (i>=8)) offset+= 64;
900045a2:	f102 0b40 	add.w	fp, r2, #64	@ 0x40
900045a6:	d9bf      	bls.n	90004528 <TGFX_JPEG_InitColorTables+0xc4>
      if((j>=8) && (i>=8)) offset+= 120;
900045a8:	f102 0980 	add.w	r9, r2, #128	@ 0x80
900045ac:	f102 0881 	add.w	r8, r2, #129	@ 0x81
      JPEG_Y_MCU_LUT[i*16 + j] = offset;
900045b0:	f8a3 b000 	strh.w	fp, [r3]
900045b4:	f8a3 9010 	strh.w	r9, [r3, #16]
      if((j>=8) && (i>=8)) offset+= 120;
900045b8:	f102 0982 	add.w	r9, r2, #130	@ 0x82
      JPEG_Y_MCU_LUT[i*16 + j] = offset;
900045bc:	f8a3 8012 	strh.w	r8, [r3, #18]
      if((j>=8) && (i>=8)) offset+= 120;
900045c0:	f102 0883 	add.w	r8, r2, #131	@ 0x83
      JPEG_Y_MCU_LUT[i*16 + j] = offset;
900045c4:	f8a3 9014 	strh.w	r9, [r3, #20]
      if((j>=8) && (i>=8)) offset+= 120;
900045c8:	f102 0984 	add.w	r9, r2, #132	@ 0x84
      JPEG_Y_MCU_LUT[i*16 + j] = offset;
900045cc:	f8a3 8016 	strh.w	r8, [r3, #22]
      if((j>=8) && (i>=8)) offset+= 120;
900045d0:	f102 0885 	add.w	r8, r2, #133	@ 0x85
      JPEG_Y_MCU_LUT[i*16 + j] = offset;
900045d4:	f8a3 9018 	strh.w	r9, [r3, #24]
      if((j>=8) && (i>=8)) offset+= 120;
900045d8:	f102 0986 	add.w	r9, r2, #134	@ 0x86
      JPEG_Y_MCU_LUT[i*16 + j] = offset;
900045dc:	f8a3 801a 	strh.w	r8, [r3, #26]
      if((j>=8) && (i>=8)) offset+= 120;
900045e0:	f102 0887 	add.w	r8, r2, #135	@ 0x87
      JPEG_Y_MCU_LUT[i*16 + j] = offset;
900045e4:	f8a3 e002 	strh.w	lr, [r3, #2]
900045e8:	3208      	adds	r2, #8
900045ea:	f8a3 c004 	strh.w	ip, [r3, #4]
900045ee:	80df      	strh	r7, [r3, #6]
900045f0:	811e      	strh	r6, [r3, #8]
900045f2:	815d      	strh	r5, [r3, #10]
900045f4:	819c      	strh	r4, [r3, #12]
900045f6:	81d8      	strh	r0, [r3, #14]
900045f8:	f8a3 901c 	strh.w	r9, [r3, #28]
900045fc:	e7b7      	b.n	9000456e <TGFX_JPEG_InitColorTables+0x10a>
900045fe:	bf00      	nop
90004600:	240099c4 	.word	0x240099c4
90004604:	240089c4 	.word	0x240089c4
90004608:	240095c4 	.word	0x240095c4
9000460c:	24008dc4 	.word	0x24008dc4
90004610:	240081c4 	.word	0x240081c4
90004614:	ffffd4d1 	.word	0xffffd4d1
90004618:	ffffab30 	.word	0xffffab30
9000461c:	ffff94d1 	.word	0xffff94d1
90004620:	ffffeb30 	.word	0xffffeb30
90004624:	24007fc8 	.word	0x24007fc8
90004628:	240085c4 	.word	0x240085c4
9000462c:	24009dc4 	.word	0x24009dc4
90004630:	240091c4 	.word	0x240091c4
90004634:	4b07      	ldr	r3, [pc, #28]	@ (90004654 <TGFX_JPEG_InitColorTables+0x1f0>)
    }
  }

  /*Cb Cr K LUT*/
  for(i = 0; i < 16; i++)
90004636:	2000      	movs	r0, #0
90004638:	4a07      	ldr	r2, [pc, #28]	@ (90004658 <TGFX_JPEG_InitColorTables+0x1f4>)
  for(i = 0; i < 16; i++)
9000463a:	f04f 0c80 	mov.w	ip, #128	@ 0x80
9000463e:	9304      	str	r3, [sp, #16]
90004640:	4b06      	ldr	r3, [pc, #24]	@ (9000465c <TGFX_JPEG_InitColorTables+0x1f8>)
90004642:	4907      	ldr	r1, [pc, #28]	@ (90004660 <TGFX_JPEG_InitColorTables+0x1fc>)
90004644:	9303      	str	r3, [sp, #12]
90004646:	4b07      	ldr	r3, [pc, #28]	@ (90004664 <TGFX_JPEG_InitColorTables+0x200>)
90004648:	f8df e01c 	ldr.w	lr, [pc, #28]	@ 90004668 <TGFX_JPEG_InitColorTables+0x204>
  for(i = 0; i < 16; i++)
9000464c:	469b      	mov	fp, r3
9000464e:	9002      	str	r0, [sp, #8]
90004650:	e00c      	b.n	9000466c <TGFX_JPEG_InitColorTables+0x208>
90004652:	bf00      	nop
90004654:	24007d48 	.word	0x24007d48
90004658:	240076c8 	.word	0x240076c8
9000465c:	24007b48 	.word	0x24007b48
90004660:	24007448 	.word	0x24007448
90004664:	240078c8 	.word	0x240078c8
90004668:	24007248 	.word	0x24007248
  {
    for(j = 0; j < 16; j++)
    {
      offset = i*16 + j;

      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
9000466c:	9802      	ldr	r0, [sp, #8]
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
9000466e:	f10c 0501 	add.w	r5, ip, #1

      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90004672:	f10c 0640 	add.w	r6, ip, #64	@ 0x40
90004676:	2400      	movs	r4, #0
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90004678:	0843      	lsrs	r3, r0, #1
  for(i = 0; i < 16; i++)
9000467a:	1c47      	adds	r7, r0, #1
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
9000467c:	b2ad      	uxth	r5, r5
9000467e:	2000      	movs	r0, #0
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90004680:	00db      	lsls	r3, r3, #3
  for(i = 0; i < 16; i++)
90004682:	9702      	str	r7, [sp, #8]
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90004684:	b2b6      	uxth	r6, r6
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90004686:	9508      	str	r5, [sp, #32]
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90004688:	b29b      	uxth	r3, r3
  for(i = 0; i < 16; i++)
9000468a:	3120      	adds	r1, #32
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
9000468c:	9606      	str	r6, [sp, #24]
9000468e:	4626      	mov	r6, r4
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90004690:	f503 7580 	add.w	r5, r3, #256	@ 0x100
90004694:	f503 7a81 	add.w	sl, r3, #258	@ 0x102
90004698:	f203 1903 	addw	r9, r3, #259	@ 0x103
  for(i = 0; i < 16; i++)
9000469c:	f10b 0b20 	add.w	fp, fp, #32
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900046a0:	b2ad      	uxth	r5, r5
  for(i = 0; i < 16; i++)
900046a2:	3220      	adds	r2, #32
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900046a4:	fa1f fa8a 	uxth.w	sl, sl
900046a8:	f365 060f 	bfi	r6, r5, #0, #16
900046ac:	fa1f f989 	uxth.w	r9, r9
900046b0:	f365 461f 	bfi	r6, r5, #16, #16
900046b4:	4635      	mov	r5, r6
900046b6:	9e04      	ldr	r6, [sp, #16]
900046b8:	9500      	str	r5, [sp, #0]
900046ba:	4634      	mov	r4, r6
900046bc:	6035      	str	r5, [r6, #0]
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
900046be:	f10c 0541 	add.w	r5, ip, #65	@ 0x41
900046c2:	b2ad      	uxth	r5, r5
900046c4:	950a      	str	r5, [sp, #40]	@ 0x28
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
900046c6:	f10c 0502 	add.w	r5, ip, #2
900046ca:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
900046ce:	f10c 0542 	add.w	r5, ip, #66	@ 0x42
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
900046d2:	f8cd 8030 	str.w	r8, [sp, #48]	@ 0x30
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
900046d6:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
900046da:	f10c 0503 	add.w	r5, ip, #3
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
900046de:	f8cd 8038 	str.w	r8, [sp, #56]	@ 0x38
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
900046e2:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
900046e6:	f10c 0543 	add.w	r5, ip, #67	@ 0x43
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
900046ea:	f8cd 8040 	str.w	r8, [sp, #64]	@ 0x40
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
900046ee:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
900046f2:	f10c 0504 	add.w	r5, ip, #4
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
900046f6:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
900046fa:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
900046fe:	f10c 0544 	add.w	r5, ip, #68	@ 0x44
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90004702:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90004706:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
9000470a:	f10c 0505 	add.w	r5, ip, #5
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
9000470e:	f8cd 8058 	str.w	r8, [sp, #88]	@ 0x58
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90004712:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90004716:	f10c 0545 	add.w	r5, ip, #69	@ 0x45
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
9000471a:	f8cd 8060 	str.w	r8, [sp, #96]	@ 0x60
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
9000471e:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90004722:	f10c 0506 	add.w	r5, ip, #6
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90004726:	f8cd 8068 	str.w	r8, [sp, #104]	@ 0x68
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
9000472a:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
9000472e:	f10c 0546 	add.w	r5, ip, #70	@ 0x46
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90004732:	f8cd 8070 	str.w	r8, [sp, #112]	@ 0x70
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90004736:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
9000473a:	f10c 0507 	add.w	r5, ip, #7
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
9000473e:	f8cd 8078 	str.w	r8, [sp, #120]	@ 0x78
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90004742:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90004746:	f10c 0547 	add.w	r5, ip, #71	@ 0x47
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
9000474a:	f8cd 8080 	str.w	r8, [sp, #128]	@ 0x80
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
9000474e:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90004752:	f503 75a0 	add.w	r5, r3, #320	@ 0x140
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90004756:	f8cd 8088 	str.w	r8, [sp, #136]	@ 0x88
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
9000475a:	fa1f f885 	uxth.w	r8, r5

      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
9000475e:	f503 75c0 	add.w	r5, r3, #384	@ 0x180
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90004762:	f8cd 8014 	str.w	r8, [sp, #20]
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90004766:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
9000476a:	f203 1501 	addw	r5, r3, #257	@ 0x101
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
9000476e:	f8cd 801c 	str.w	r8, [sp, #28]
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90004772:	b2ad      	uxth	r5, r5
90004774:	f365 000f 	bfi	r0, r5, #0, #16
90004778:	f365 401f 	bfi	r0, r5, #16, #16
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
9000477c:	f203 1541 	addw	r5, r3, #321	@ 0x141
90004780:	fa1f f885 	uxth.w	r8, r5
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90004784:	f203 1581 	addw	r5, r3, #385	@ 0x181
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90004788:	6070      	str	r0, [r6, #4]
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
9000478a:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
9000478e:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90004792:	f503 75a1 	add.w	r5, r3, #322	@ 0x142
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90004796:	9001      	str	r0, [sp, #4]
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90004798:	f8cd 802c 	str.w	r8, [sp, #44]	@ 0x2c
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
9000479c:	f203 1047 	addw	r0, r3, #327	@ 0x147
900047a0:	fa1f f885 	uxth.w	r8, r5
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
900047a4:	f503 75c1 	add.w	r5, r3, #386	@ 0x182
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
900047a8:	b280      	uxth	r0, r0
900047aa:	f8cd 8034 	str.w	r8, [sp, #52]	@ 0x34
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
900047ae:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
900047b2:	f203 1543 	addw	r5, r3, #323	@ 0x143
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
900047b6:	f8cd 803c 	str.w	r8, [sp, #60]	@ 0x3c
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
900047ba:	fa1f f885 	uxth.w	r8, r5
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
900047be:	f203 1583 	addw	r5, r3, #387	@ 0x183
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
900047c2:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
900047c6:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
900047ca:	f503 75a2 	add.w	r5, r3, #324	@ 0x144
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
900047ce:	f8cd 804c 	str.w	r8, [sp, #76]	@ 0x4c
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900047d2:	f503 7882 	add.w	r8, r3, #260	@ 0x104
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
900047d6:	b2af      	uxth	r7, r5
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
900047d8:	f503 75c2 	add.w	r5, r3, #388	@ 0x184
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900047dc:	fa1f f888 	uxth.w	r8, r8
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
900047e0:	9715      	str	r7, [sp, #84]	@ 0x54
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
900047e2:	b2af      	uxth	r7, r5
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
900047e4:	f203 1545 	addw	r5, r3, #325	@ 0x145
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
900047e8:	9717      	str	r7, [sp, #92]	@ 0x5c
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900047ea:	f203 1705 	addw	r7, r3, #261	@ 0x105
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
900047ee:	b2ae      	uxth	r6, r5
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
900047f0:	f203 1585 	addw	r5, r3, #389	@ 0x185
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900047f4:	b2bf      	uxth	r7, r7
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
900047f6:	b2ad      	uxth	r5, r5
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
900047f8:	9619      	str	r6, [sp, #100]	@ 0x64
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900047fa:	f503 7683 	add.w	r6, r3, #262	@ 0x106
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
900047fe:	9021      	str	r0, [sp, #132]	@ 0x84
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90004800:	951b      	str	r5, [sp, #108]	@ 0x6c
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90004802:	f503 75a3 	add.w	r5, r3, #326	@ 0x146
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90004806:	b2b6      	uxth	r6, r6
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90004808:	9803      	ldr	r0, [sp, #12]
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
9000480a:	b2ad      	uxth	r5, r5
9000480c:	951d      	str	r5, [sp, #116]	@ 0x74
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
9000480e:	f503 75c3 	add.w	r5, r3, #390	@ 0x186
90004812:	b2ad      	uxth	r5, r5
90004814:	951f      	str	r5, [sp, #124]	@ 0x7c
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90004816:	f203 1507 	addw	r5, r3, #263	@ 0x107
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
9000481a:	f203 1387 	addw	r3, r3, #391	@ 0x187
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
9000481e:	b2ad      	uxth	r5, r5
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90004820:	b29b      	uxth	r3, r3
90004822:	9323      	str	r3, [sp, #140]	@ 0x8c
90004824:	2300      	movs	r3, #0
90004826:	f36a 030f 	bfi	r3, sl, #0, #16
9000482a:	f36a 431f 	bfi	r3, sl, #16, #16
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
9000482e:	f04f 0a00 	mov.w	sl, #0
90004832:	f369 0a0f 	bfi	sl, r9, #0, #16
90004836:	60a3      	str	r3, [r4, #8]
90004838:	f369 4a1f 	bfi	sl, r9, #16, #16
9000483c:	f04f 0900 	mov.w	r9, #0
90004840:	f368 090f 	bfi	r9, r8, #0, #16
90004844:	f8c4 a00c 	str.w	sl, [r4, #12]
90004848:	f368 491f 	bfi	r9, r8, #16, #16
9000484c:	f04f 0800 	mov.w	r8, #0
90004850:	f367 080f 	bfi	r8, r7, #0, #16
90004854:	f8c4 9010 	str.w	r9, [r4, #16]
90004858:	f367 481f 	bfi	r8, r7, #16, #16
9000485c:	2700      	movs	r7, #0
9000485e:	f366 070f 	bfi	r7, r6, #0, #16
90004862:	f8c4 8014 	str.w	r8, [r4, #20]
90004866:	f366 471f 	bfi	r7, r6, #16, #16
9000486a:	2600      	movs	r6, #0
9000486c:	f365 060f 	bfi	r6, r5, #0, #16
90004870:	61a7      	str	r7, [r4, #24]
90004872:	f365 461f 	bfi	r6, r5, #16, #16
  for(i = 0; i < 16; i++)
90004876:	f104 0520 	add.w	r5, r4, #32
9000487a:	9504      	str	r5, [sp, #16]
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
9000487c:	2500      	movs	r5, #0
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
9000487e:	61e6      	str	r6, [r4, #28]
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90004880:	f36c 050f 	bfi	r5, ip, #0, #16
90004884:	9c08      	ldr	r4, [sp, #32]
90004886:	f36c 451f 	bfi	r5, ip, #16, #16
  for(i = 0; i < 16; i++)
9000488a:	f10c 0c08 	add.w	ip, ip, #8
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
9000488e:	6005      	str	r5, [r0, #0]
90004890:	2500      	movs	r5, #0
  for(i = 0; i < 16; i++)
90004892:	fa1f fc8c 	uxth.w	ip, ip
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90004896:	f364 050f 	bfi	r5, r4, #0, #16
9000489a:	f364 451f 	bfi	r5, r4, #16, #16
9000489e:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
900048a0:	6045      	str	r5, [r0, #4]
900048a2:	2500      	movs	r5, #0
900048a4:	f364 050f 	bfi	r5, r4, #0, #16
900048a8:	f364 451f 	bfi	r5, r4, #16, #16
900048ac:	9c10      	ldr	r4, [sp, #64]	@ 0x40
900048ae:	6085      	str	r5, [r0, #8]
900048b0:	2500      	movs	r5, #0
900048b2:	f364 050f 	bfi	r5, r4, #0, #16
900048b6:	f364 451f 	bfi	r5, r4, #16, #16
900048ba:	9c14      	ldr	r4, [sp, #80]	@ 0x50
900048bc:	60c5      	str	r5, [r0, #12]
900048be:	2500      	movs	r5, #0
900048c0:	f364 050f 	bfi	r5, r4, #0, #16
900048c4:	f364 451f 	bfi	r5, r4, #16, #16
900048c8:	9c18      	ldr	r4, [sp, #96]	@ 0x60
900048ca:	6105      	str	r5, [r0, #16]
900048cc:	2500      	movs	r5, #0
900048ce:	f364 050f 	bfi	r5, r4, #0, #16
900048d2:	f364 451f 	bfi	r5, r4, #16, #16
900048d6:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
900048d8:	6145      	str	r5, [r0, #20]
900048da:	2500      	movs	r5, #0
900048dc:	f364 050f 	bfi	r5, r4, #0, #16
900048e0:	f364 451f 	bfi	r5, r4, #16, #16
900048e4:	9c20      	ldr	r4, [sp, #128]	@ 0x80
900048e6:	6185      	str	r5, [r0, #24]
900048e8:	2500      	movs	r5, #0
900048ea:	f364 050f 	bfi	r5, r4, #0, #16
900048ee:	f364 451f 	bfi	r5, r4, #16, #16
  for(i = 0; i < 16; i++)
900048f2:	f100 0420 	add.w	r4, r0, #32
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
900048f6:	61c5      	str	r5, [r0, #28]
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
900048f8:	2500      	movs	r5, #0
  for(i = 0; i < 16; i++)
900048fa:	9403      	str	r4, [sp, #12]
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
900048fc:	9c05      	ldr	r4, [sp, #20]
900048fe:	f364 050f 	bfi	r5, r4, #0, #16
90004902:	f364 451f 	bfi	r5, r4, #16, #16
90004906:	9c09      	ldr	r4, [sp, #36]	@ 0x24
90004908:	f84b 5c20 	str.w	r5, [fp, #-32]
9000490c:	2500      	movs	r5, #0
9000490e:	f364 050f 	bfi	r5, r4, #0, #16
90004912:	f364 451f 	bfi	r5, r4, #16, #16
90004916:	f84b 5c1c 	str.w	r5, [fp, #-28]
9000491a:	2500      	movs	r5, #0
9000491c:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
9000491e:	9806      	ldr	r0, [sp, #24]
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90004920:	f364 050f 	bfi	r5, r4, #0, #16
90004924:	f364 451f 	bfi	r5, r4, #16, #16
90004928:	9c11      	ldr	r4, [sp, #68]	@ 0x44
9000492a:	f84b 5c18 	str.w	r5, [fp, #-24]
9000492e:	2500      	movs	r5, #0
90004930:	f364 050f 	bfi	r5, r4, #0, #16
90004934:	f364 451f 	bfi	r5, r4, #16, #16
90004938:	9c15      	ldr	r4, [sp, #84]	@ 0x54
9000493a:	f84b 5c14 	str.w	r5, [fp, #-20]
9000493e:	2500      	movs	r5, #0
90004940:	f364 050f 	bfi	r5, r4, #0, #16
90004944:	f364 451f 	bfi	r5, r4, #16, #16
90004948:	9c19      	ldr	r4, [sp, #100]	@ 0x64
9000494a:	f84b 5c10 	str.w	r5, [fp, #-16]
9000494e:	2500      	movs	r5, #0
90004950:	f364 050f 	bfi	r5, r4, #0, #16
90004954:	f364 451f 	bfi	r5, r4, #16, #16
90004958:	9c1d      	ldr	r4, [sp, #116]	@ 0x74
9000495a:	f84b 5c0c 	str.w	r5, [fp, #-12]
9000495e:	2500      	movs	r5, #0
90004960:	f364 050f 	bfi	r5, r4, #0, #16
90004964:	f364 451f 	bfi	r5, r4, #16, #16
90004968:	9c21      	ldr	r4, [sp, #132]	@ 0x84
9000496a:	f84b 5c08 	str.w	r5, [fp, #-8]
9000496e:	2500      	movs	r5, #0
90004970:	f364 050f 	bfi	r5, r4, #0, #16
90004974:	f364 451f 	bfi	r5, r4, #16, #16
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90004978:	2400      	movs	r4, #0
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
9000497a:	f84b 5c04 	str.w	r5, [fp, #-4]
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
9000497e:	2500      	movs	r5, #0
90004980:	f360 050f 	bfi	r5, r0, #0, #16
90004984:	f360 451f 	bfi	r5, r0, #16, #16
90004988:	980a      	ldr	r0, [sp, #40]	@ 0x28
9000498a:	f842 5c20 	str.w	r5, [r2, #-32]
9000498e:	2500      	movs	r5, #0
90004990:	f360 050f 	bfi	r5, r0, #0, #16
90004994:	f360 451f 	bfi	r5, r0, #16, #16
90004998:	980e      	ldr	r0, [sp, #56]	@ 0x38
9000499a:	f842 5c1c 	str.w	r5, [r2, #-28]
9000499e:	2500      	movs	r5, #0
900049a0:	f360 050f 	bfi	r5, r0, #0, #16
900049a4:	f360 451f 	bfi	r5, r0, #16, #16
900049a8:	9812      	ldr	r0, [sp, #72]	@ 0x48
900049aa:	f842 5c18 	str.w	r5, [r2, #-24]
900049ae:	2500      	movs	r5, #0
900049b0:	f360 050f 	bfi	r5, r0, #0, #16
900049b4:	f360 451f 	bfi	r5, r0, #16, #16
900049b8:	9816      	ldr	r0, [sp, #88]	@ 0x58
900049ba:	f842 5c14 	str.w	r5, [r2, #-20]
900049be:	2500      	movs	r5, #0
900049c0:	f360 050f 	bfi	r5, r0, #0, #16
900049c4:	f360 451f 	bfi	r5, r0, #16, #16
900049c8:	981a      	ldr	r0, [sp, #104]	@ 0x68
900049ca:	f842 5c10 	str.w	r5, [r2, #-16]
900049ce:	2500      	movs	r5, #0
900049d0:	f360 050f 	bfi	r5, r0, #0, #16
900049d4:	f360 451f 	bfi	r5, r0, #16, #16
900049d8:	981e      	ldr	r0, [sp, #120]	@ 0x78
900049da:	f842 5c0c 	str.w	r5, [r2, #-12]
900049de:	2500      	movs	r5, #0
900049e0:	f360 050f 	bfi	r5, r0, #0, #16
900049e4:	f360 451f 	bfi	r5, r0, #16, #16
900049e8:	9822      	ldr	r0, [sp, #136]	@ 0x88
900049ea:	f842 5c08 	str.w	r5, [r2, #-8]
900049ee:	2500      	movs	r5, #0
900049f0:	f360 050f 	bfi	r5, r0, #0, #16
900049f4:	f360 451f 	bfi	r5, r0, #16, #16
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
900049f8:	9807      	ldr	r0, [sp, #28]
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
900049fa:	f842 5c04 	str.w	r5, [r2, #-4]
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
900049fe:	2500      	movs	r5, #0
90004a00:	f360 050f 	bfi	r5, r0, #0, #16
90004a04:	f360 451f 	bfi	r5, r0, #16, #16
90004a08:	f841 5c20 	str.w	r5, [r1, #-32]
      JPEG_K_MCU_422_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90004a0c:	9d00      	ldr	r5, [sp, #0]
90004a0e:	f8ce 5000 	str.w	r5, [lr]
90004a12:	9801      	ldr	r0, [sp, #4]
90004a14:	f8ce 601c 	str.w	r6, [lr, #28]
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90004a18:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
90004a1a:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
      JPEG_K_MCU_422_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90004a1c:	e9ce 0301 	strd	r0, r3, [lr, #4]
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90004a20:	2300      	movs	r3, #0
90004a22:	9817      	ldr	r0, [sp, #92]	@ 0x5c
90004a24:	f366 030f 	bfi	r3, r6, #0, #16
90004a28:	f366 431f 	bfi	r3, r6, #16, #16
90004a2c:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
      JPEG_K_MCU_422_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90004a2e:	e9ce 8705 	strd	r8, r7, [lr, #20]
90004a32:	e9ce a903 	strd	sl, r9, [lr, #12]
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90004a36:	f841 3c1c 	str.w	r3, [r1, #-28]
90004a3a:	2300      	movs	r3, #0
  for(i = 0; i < 16; i++)
90004a3c:	9f02      	ldr	r7, [sp, #8]
90004a3e:	f10e 0e20 	add.w	lr, lr, #32
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90004a42:	f366 030f 	bfi	r3, r6, #0, #16
  for(i = 0; i < 16; i++)
90004a46:	2f10      	cmp	r7, #16
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90004a48:	f366 431f 	bfi	r3, r6, #16, #16
90004a4c:	f841 3c18 	str.w	r3, [r1, #-24]
90004a50:	f04f 0300 	mov.w	r3, #0
90004a54:	f365 030f 	bfi	r3, r5, #0, #16
90004a58:	f365 431f 	bfi	r3, r5, #16, #16
90004a5c:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
90004a5e:	f841 3c14 	str.w	r3, [r1, #-20]
90004a62:	f04f 0300 	mov.w	r3, #0
90004a66:	f365 040f 	bfi	r4, r5, #0, #16
90004a6a:	f360 030f 	bfi	r3, r0, #0, #16
90004a6e:	f365 441f 	bfi	r4, r5, #16, #16
90004a72:	9d1f      	ldr	r5, [sp, #124]	@ 0x7c
90004a74:	f360 431f 	bfi	r3, r0, #16, #16
90004a78:	f04f 0000 	mov.w	r0, #0
90004a7c:	f841 4c0c 	str.w	r4, [r1, #-12]
90004a80:	f841 3c10 	str.w	r3, [r1, #-16]
90004a84:	4603      	mov	r3, r0
90004a86:	9c23      	ldr	r4, [sp, #140]	@ 0x8c
90004a88:	f365 000f 	bfi	r0, r5, #0, #16
90004a8c:	f364 030f 	bfi	r3, r4, #0, #16
90004a90:	f365 401f 	bfi	r0, r5, #16, #16
90004a94:	f364 431f 	bfi	r3, r4, #16, #16
90004a98:	e941 0302 	strd	r0, r3, [r1, #-8]
  for(i = 0; i < 16; i++)
90004a9c:	f47f ade6 	bne.w	9000466c <TGFX_JPEG_InitColorTables+0x208>
  {
    for(j = 0; j < 8; j++)
    {
      offset = i*8 + j;

      JPEG_Y_MCU_444_LUT[offset]  = offset;
90004aa0:	48d3      	ldr	r0, [pc, #844]	@ (90004df0 <TGFX_JPEG_InitColorTables+0x98c>)
90004aa2:	f44f 3480 	mov.w	r4, #65536	@ 0x10000
      JPEG_Cb_MCU_444_LUT[offset] = offset + 64 ;
90004aa6:	49d3      	ldr	r1, [pc, #844]	@ (90004df4 <TGFX_JPEG_InitColorTables+0x990>)
      JPEG_Y_MCU_444_LUT[offset]  = offset;
90004aa8:	6004      	str	r4, [r0, #0]
90004aaa:	f104 1402 	add.w	r4, r4, #131074	@ 0x20002
      JPEG_Cr_MCU_444_LUT[offset] = offset + 128 ;
90004aae:	4ad2      	ldr	r2, [pc, #840]	@ (90004df8 <TGFX_JPEG_InitColorTables+0x994>)
      JPEG_Y_MCU_444_LUT[offset]  = offset;
90004ab0:	6044      	str	r4, [r0, #4]
90004ab2:	f104 1402 	add.w	r4, r4, #131074	@ 0x20002
      JPEG_K_MCU_444_LUT[offset]  = offset + 192 ;
90004ab6:	4bd1      	ldr	r3, [pc, #836]	@ (90004dfc <TGFX_JPEG_InitColorTables+0x998>)
      JPEG_Y_MCU_444_LUT[offset]  = offset;
90004ab8:	6084      	str	r4, [r0, #8]
90004aba:	f104 1402 	add.w	r4, r4, #131074	@ 0x20002
90004abe:	4fd0      	ldr	r7, [pc, #832]	@ (90004e00 <TGFX_JPEG_InitColorTables+0x99c>)
90004ac0:	60c4      	str	r4, [r0, #12]
90004ac2:	f104 1402 	add.w	r4, r4, #131074	@ 0x20002
90004ac6:	4ecf      	ldr	r6, [pc, #828]	@ (90004e04 <TGFX_JPEG_InitColorTables+0x9a0>)
90004ac8:	6104      	str	r4, [r0, #16]
90004aca:	f104 1402 	add.w	r4, r4, #131074	@ 0x20002
90004ace:	4dce      	ldr	r5, [pc, #824]	@ (90004e08 <TGFX_JPEG_InitColorTables+0x9a4>)
90004ad0:	6144      	str	r4, [r0, #20]
90004ad2:	f104 1402 	add.w	r4, r4, #131074	@ 0x20002
  for (i = 0; i <= 255; i++)
90004ad6:	f8df b354 	ldr.w	fp, [pc, #852]	@ 90004e2c <TGFX_JPEG_InitColorTables+0x9c8>
      JPEG_Y_MCU_444_LUT[offset]  = offset;
90004ada:	6184      	str	r4, [r0, #24]
90004adc:	f104 1402 	add.w	r4, r4, #131074	@ 0x20002
  for (i = 0; i <= 255; i++)
90004ae0:	f8df a34c 	ldr.w	sl, [pc, #844]	@ 90004e30 <TGFX_JPEG_InitColorTables+0x9cc>
      JPEG_Y_MCU_444_LUT[offset]  = offset;
90004ae4:	61c4      	str	r4, [r0, #28]
90004ae6:	f104 1402 	add.w	r4, r4, #131074	@ 0x20002
  for (i = 0; i <= 255; i++)
90004aea:	f8df 9348 	ldr.w	r9, [pc, #840]	@ 90004e34 <TGFX_JPEG_InitColorTables+0x9d0>
      JPEG_Y_MCU_444_LUT[offset]  = offset;
90004aee:	6204      	str	r4, [r0, #32]
90004af0:	f104 1402 	add.w	r4, r4, #131074	@ 0x20002
  for (i = 0; i <= 255; i++)
90004af4:	f8df 8340 	ldr.w	r8, [pc, #832]	@ 90004e38 <TGFX_JPEG_InitColorTables+0x9d4>
      JPEG_Y_MCU_444_LUT[offset]  = offset;
90004af8:	6244      	str	r4, [r0, #36]	@ 0x24
90004afa:	f104 1402 	add.w	r4, r4, #131074	@ 0x20002
  for (i = 0; i <= 255; i++)
90004afe:	f8df e33c 	ldr.w	lr, [pc, #828]	@ 90004e3c <TGFX_JPEG_InitColorTables+0x9d8>
      JPEG_Y_MCU_444_LUT[offset]  = offset;
90004b02:	6284      	str	r4, [r0, #40]	@ 0x28
90004b04:	f104 1402 	add.w	r4, r4, #131074	@ 0x20002
90004b08:	62c4      	str	r4, [r0, #44]	@ 0x2c
90004b0a:	f104 1402 	add.w	r4, r4, #131074	@ 0x20002
90004b0e:	6304      	str	r4, [r0, #48]	@ 0x30
90004b10:	f104 1402 	add.w	r4, r4, #131074	@ 0x20002
90004b14:	6344      	str	r4, [r0, #52]	@ 0x34
90004b16:	f104 1402 	add.w	r4, r4, #131074	@ 0x20002
90004b1a:	6384      	str	r4, [r0, #56]	@ 0x38
90004b1c:	f104 1402 	add.w	r4, r4, #131074	@ 0x20002
90004b20:	63c4      	str	r4, [r0, #60]	@ 0x3c
90004b22:	f104 1402 	add.w	r4, r4, #131074	@ 0x20002
90004b26:	6404      	str	r4, [r0, #64]	@ 0x40
90004b28:	f104 1402 	add.w	r4, r4, #131074	@ 0x20002
90004b2c:	6444      	str	r4, [r0, #68]	@ 0x44
90004b2e:	f104 1402 	add.w	r4, r4, #131074	@ 0x20002
90004b32:	6484      	str	r4, [r0, #72]	@ 0x48
90004b34:	f104 1402 	add.w	r4, r4, #131074	@ 0x20002
90004b38:	64c4      	str	r4, [r0, #76]	@ 0x4c
90004b3a:	f104 1402 	add.w	r4, r4, #131074	@ 0x20002
90004b3e:	6504      	str	r4, [r0, #80]	@ 0x50
90004b40:	f104 1402 	add.w	r4, r4, #131074	@ 0x20002
90004b44:	6544      	str	r4, [r0, #84]	@ 0x54
90004b46:	f104 1402 	add.w	r4, r4, #131074	@ 0x20002
90004b4a:	6584      	str	r4, [r0, #88]	@ 0x58
90004b4c:	f104 1402 	add.w	r4, r4, #131074	@ 0x20002
90004b50:	65c4      	str	r4, [r0, #92]	@ 0x5c
90004b52:	f104 1402 	add.w	r4, r4, #131074	@ 0x20002
90004b56:	6604      	str	r4, [r0, #96]	@ 0x60
90004b58:	f104 1402 	add.w	r4, r4, #131074	@ 0x20002
90004b5c:	6644      	str	r4, [r0, #100]	@ 0x64
90004b5e:	f104 1402 	add.w	r4, r4, #131074	@ 0x20002
90004b62:	6684      	str	r4, [r0, #104]	@ 0x68
90004b64:	f104 1402 	add.w	r4, r4, #131074	@ 0x20002
90004b68:	66c4      	str	r4, [r0, #108]	@ 0x6c
90004b6a:	f104 1402 	add.w	r4, r4, #131074	@ 0x20002
90004b6e:	6704      	str	r4, [r0, #112]	@ 0x70
90004b70:	f104 1402 	add.w	r4, r4, #131074	@ 0x20002
90004b74:	6744      	str	r4, [r0, #116]	@ 0x74
90004b76:	f104 1402 	add.w	r4, r4, #131074	@ 0x20002
90004b7a:	6784      	str	r4, [r0, #120]	@ 0x78
90004b7c:	f104 1402 	add.w	r4, r4, #131074	@ 0x20002
90004b80:	67c4      	str	r4, [r0, #124]	@ 0x7c
      JPEG_Cb_MCU_444_LUT[offset] = offset + 64 ;
90004b82:	f104 1402 	add.w	r4, r4, #131074	@ 0x20002
90004b86:	48a1      	ldr	r0, [pc, #644]	@ (90004e0c <TGFX_JPEG_InitColorTables+0x9a8>)
90004b88:	e9c1 4000 	strd	r4, r0, [r1]
90004b8c:	f104 1404 	add.w	r4, r4, #262148	@ 0x40004
90004b90:	f100 1004 	add.w	r0, r0, #262148	@ 0x40004
90004b94:	e9c1 4002 	strd	r4, r0, [r1, #8]
90004b98:	f104 1404 	add.w	r4, r4, #262148	@ 0x40004
90004b9c:	f100 1004 	add.w	r0, r0, #262148	@ 0x40004
90004ba0:	e9c1 4004 	strd	r4, r0, [r1, #16]
90004ba4:	f104 1404 	add.w	r4, r4, #262148	@ 0x40004
90004ba8:	f100 1004 	add.w	r0, r0, #262148	@ 0x40004
90004bac:	e9c1 4006 	strd	r4, r0, [r1, #24]
90004bb0:	f104 1404 	add.w	r4, r4, #262148	@ 0x40004
90004bb4:	f100 1004 	add.w	r0, r0, #262148	@ 0x40004
90004bb8:	e9c1 4008 	strd	r4, r0, [r1, #32]
90004bbc:	f104 1404 	add.w	r4, r4, #262148	@ 0x40004
90004bc0:	f100 1004 	add.w	r0, r0, #262148	@ 0x40004
90004bc4:	e9c1 400a 	strd	r4, r0, [r1, #40]	@ 0x28
90004bc8:	f104 1404 	add.w	r4, r4, #262148	@ 0x40004
90004bcc:	f100 1004 	add.w	r0, r0, #262148	@ 0x40004
90004bd0:	e9c1 400c 	strd	r4, r0, [r1, #48]	@ 0x30
90004bd4:	f104 1404 	add.w	r4, r4, #262148	@ 0x40004
90004bd8:	f100 1004 	add.w	r0, r0, #262148	@ 0x40004
90004bdc:	e9c1 400e 	strd	r4, r0, [r1, #56]	@ 0x38
90004be0:	f104 1404 	add.w	r4, r4, #262148	@ 0x40004
90004be4:	f100 1004 	add.w	r0, r0, #262148	@ 0x40004
90004be8:	e9c1 4010 	strd	r4, r0, [r1, #64]	@ 0x40
90004bec:	f104 1404 	add.w	r4, r4, #262148	@ 0x40004
90004bf0:	f100 1004 	add.w	r0, r0, #262148	@ 0x40004
90004bf4:	e9c1 4012 	strd	r4, r0, [r1, #72]	@ 0x48
90004bf8:	f104 1404 	add.w	r4, r4, #262148	@ 0x40004
90004bfc:	f100 1004 	add.w	r0, r0, #262148	@ 0x40004
90004c00:	e9c1 4014 	strd	r4, r0, [r1, #80]	@ 0x50
90004c04:	f104 1404 	add.w	r4, r4, #262148	@ 0x40004
90004c08:	f100 1004 	add.w	r0, r0, #262148	@ 0x40004
90004c0c:	e9c1 4016 	strd	r4, r0, [r1, #88]	@ 0x58
90004c10:	f104 1404 	add.w	r4, r4, #262148	@ 0x40004
90004c14:	f100 1004 	add.w	r0, r0, #262148	@ 0x40004
90004c18:	e9c1 4018 	strd	r4, r0, [r1, #96]	@ 0x60
90004c1c:	f104 1404 	add.w	r4, r4, #262148	@ 0x40004
90004c20:	f100 1004 	add.w	r0, r0, #262148	@ 0x40004
90004c24:	e9c1 401a 	strd	r4, r0, [r1, #104]	@ 0x68
90004c28:	f104 1404 	add.w	r4, r4, #262148	@ 0x40004
90004c2c:	f100 1004 	add.w	r0, r0, #262148	@ 0x40004
90004c30:	e9c1 401c 	strd	r4, r0, [r1, #112]	@ 0x70
90004c34:	f104 1404 	add.w	r4, r4, #262148	@ 0x40004
90004c38:	f100 1004 	add.w	r0, r0, #262148	@ 0x40004
90004c3c:	e9c1 401e 	strd	r4, r0, [r1, #120]	@ 0x78
      JPEG_Cr_MCU_444_LUT[offset] = offset + 128 ;
90004c40:	f104 1404 	add.w	r4, r4, #262148	@ 0x40004
90004c44:	4972      	ldr	r1, [pc, #456]	@ (90004e10 <TGFX_JPEG_InitColorTables+0x9ac>)
90004c46:	f100 1006 	add.w	r0, r0, #393222	@ 0x60006
90004c4a:	e9c2 4100 	strd	r4, r1, [r2]
90004c4e:	f101 1104 	add.w	r1, r1, #262148	@ 0x40004
90004c52:	f104 1408 	add.w	r4, r4, #524296	@ 0x80008
90004c56:	e9c2 0102 	strd	r0, r1, [r2, #8]
90004c5a:	f101 1104 	add.w	r1, r1, #262148	@ 0x40004
90004c5e:	f100 1008 	add.w	r0, r0, #524296	@ 0x80008
90004c62:	e9c2 4104 	strd	r4, r1, [r2, #16]
90004c66:	f101 1104 	add.w	r1, r1, #262148	@ 0x40004
90004c6a:	f104 1408 	add.w	r4, r4, #524296	@ 0x80008
90004c6e:	e9c2 0106 	strd	r0, r1, [r2, #24]
90004c72:	f101 1104 	add.w	r1, r1, #262148	@ 0x40004
90004c76:	f100 1008 	add.w	r0, r0, #524296	@ 0x80008
90004c7a:	e9c2 4108 	strd	r4, r1, [r2, #32]
90004c7e:	f101 1104 	add.w	r1, r1, #262148	@ 0x40004
90004c82:	f104 1408 	add.w	r4, r4, #524296	@ 0x80008
90004c86:	e9c2 010a 	strd	r0, r1, [r2, #40]	@ 0x28
90004c8a:	f101 1104 	add.w	r1, r1, #262148	@ 0x40004
90004c8e:	f100 1008 	add.w	r0, r0, #524296	@ 0x80008
90004c92:	e9c2 410c 	strd	r4, r1, [r2, #48]	@ 0x30
90004c96:	f101 1104 	add.w	r1, r1, #262148	@ 0x40004
90004c9a:	f104 1408 	add.w	r4, r4, #524296	@ 0x80008
90004c9e:	e9c2 010e 	strd	r0, r1, [r2, #56]	@ 0x38
90004ca2:	f101 1104 	add.w	r1, r1, #262148	@ 0x40004
90004ca6:	f100 1008 	add.w	r0, r0, #524296	@ 0x80008
90004caa:	e9c2 4110 	strd	r4, r1, [r2, #64]	@ 0x40
90004cae:	f101 1104 	add.w	r1, r1, #262148	@ 0x40004
90004cb2:	f104 1408 	add.w	r4, r4, #524296	@ 0x80008
90004cb6:	e9c2 0112 	strd	r0, r1, [r2, #72]	@ 0x48
90004cba:	f101 1104 	add.w	r1, r1, #262148	@ 0x40004
90004cbe:	f100 1008 	add.w	r0, r0, #524296	@ 0x80008
90004cc2:	e9c2 4114 	strd	r4, r1, [r2, #80]	@ 0x50
90004cc6:	f101 1104 	add.w	r1, r1, #262148	@ 0x40004
90004cca:	f104 1408 	add.w	r4, r4, #524296	@ 0x80008
90004cce:	e9c2 0116 	strd	r0, r1, [r2, #88]	@ 0x58
90004cd2:	f101 1104 	add.w	r1, r1, #262148	@ 0x40004
90004cd6:	f100 1008 	add.w	r0, r0, #524296	@ 0x80008
90004cda:	e9c2 4118 	strd	r4, r1, [r2, #96]	@ 0x60
90004cde:	f101 1104 	add.w	r1, r1, #262148	@ 0x40004
90004ce2:	f104 1408 	add.w	r4, r4, #524296	@ 0x80008
90004ce6:	e9c2 011a 	strd	r0, r1, [r2, #104]	@ 0x68
90004cea:	f101 1104 	add.w	r1, r1, #262148	@ 0x40004
90004cee:	f100 1008 	add.w	r0, r0, #524296	@ 0x80008
90004cf2:	e9c2 411c 	strd	r4, r1, [r2, #112]	@ 0x70
90004cf6:	f101 1104 	add.w	r1, r1, #262148	@ 0x40004
      JPEG_K_MCU_444_LUT[offset]  = offset + 192 ;
90004cfa:	f104 1408 	add.w	r4, r4, #524296	@ 0x80008
      JPEG_Cr_MCU_444_LUT[offset] = offset + 128 ;
90004cfe:	e9c2 011e 	strd	r0, r1, [r2, #120]	@ 0x78
      JPEG_K_MCU_444_LUT[offset]  = offset + 192 ;
90004d02:	f100 1006 	add.w	r0, r0, #393222	@ 0x60006
90004d06:	f101 1106 	add.w	r1, r1, #393222	@ 0x60006
90004d0a:	4a42      	ldr	r2, [pc, #264]	@ (90004e14 <TGFX_JPEG_InitColorTables+0x9b0>)
90004d0c:	e9c3 4000 	strd	r4, r0, [r3]
90004d10:	e9c3 1202 	strd	r1, r2, [r3, #8]
90004d14:	f104 1408 	add.w	r4, r4, #524296	@ 0x80008
90004d18:	f100 1008 	add.w	r0, r0, #524296	@ 0x80008
90004d1c:	f101 1108 	add.w	r1, r1, #524296	@ 0x80008
90004d20:	f102 1208 	add.w	r2, r2, #524296	@ 0x80008
90004d24:	e9c3 4004 	strd	r4, r0, [r3, #16]
90004d28:	e9c3 1206 	strd	r1, r2, [r3, #24]
90004d2c:	f104 1408 	add.w	r4, r4, #524296	@ 0x80008
90004d30:	f100 1008 	add.w	r0, r0, #524296	@ 0x80008
90004d34:	f101 1108 	add.w	r1, r1, #524296	@ 0x80008
90004d38:	f102 1208 	add.w	r2, r2, #524296	@ 0x80008
90004d3c:	e9c3 4008 	strd	r4, r0, [r3, #32]
90004d40:	e9c3 120a 	strd	r1, r2, [r3, #40]	@ 0x28
90004d44:	f104 1408 	add.w	r4, r4, #524296	@ 0x80008
90004d48:	f100 1008 	add.w	r0, r0, #524296	@ 0x80008
90004d4c:	f101 1108 	add.w	r1, r1, #524296	@ 0x80008
90004d50:	f102 1208 	add.w	r2, r2, #524296	@ 0x80008
90004d54:	e9c3 400c 	strd	r4, r0, [r3, #48]	@ 0x30
90004d58:	e9c3 120e 	strd	r1, r2, [r3, #56]	@ 0x38
90004d5c:	f104 1408 	add.w	r4, r4, #524296	@ 0x80008
90004d60:	f100 1008 	add.w	r0, r0, #524296	@ 0x80008
90004d64:	f101 1108 	add.w	r1, r1, #524296	@ 0x80008
90004d68:	f102 1208 	add.w	r2, r2, #524296	@ 0x80008
90004d6c:	e9c3 4010 	strd	r4, r0, [r3, #64]	@ 0x40
90004d70:	e9c3 1212 	strd	r1, r2, [r3, #72]	@ 0x48
90004d74:	f104 1408 	add.w	r4, r4, #524296	@ 0x80008
90004d78:	f100 1008 	add.w	r0, r0, #524296	@ 0x80008
90004d7c:	f101 1108 	add.w	r1, r1, #524296	@ 0x80008
90004d80:	f102 1208 	add.w	r2, r2, #524296	@ 0x80008
90004d84:	e9c3 4014 	strd	r4, r0, [r3, #80]	@ 0x50
90004d88:	e9c3 1216 	strd	r1, r2, [r3, #88]	@ 0x58
90004d8c:	f104 1408 	add.w	r4, r4, #524296	@ 0x80008
90004d90:	f100 1008 	add.w	r0, r0, #524296	@ 0x80008
90004d94:	f101 1108 	add.w	r1, r1, #524296	@ 0x80008
90004d98:	f102 1208 	add.w	r2, r2, #524296	@ 0x80008
90004d9c:	e9c3 4018 	strd	r4, r0, [r3, #96]	@ 0x60
90004da0:	e9c3 121a 	strd	r1, r2, [r3, #104]	@ 0x68
90004da4:	f104 1408 	add.w	r4, r4, #524296	@ 0x80008
90004da8:	f100 1008 	add.w	r0, r0, #524296	@ 0x80008
90004dac:	f101 1108 	add.w	r1, r1, #524296	@ 0x80008
90004db0:	f102 1208 	add.w	r2, r2, #524296	@ 0x80008
90004db4:	e9c3 401c 	strd	r4, r0, [r3, #112]	@ 0x70
90004db8:	e9c3 121e 	strd	r1, r2, [r3, #120]	@ 0x78
  for(i = 0; i < 8; i++)
90004dbc:	4c16      	ldr	r4, [pc, #88]	@ (90004e18 <TGFX_JPEG_InitColorTables+0x9b4>)
      JPEG_K_MCU_444_LUT[offset]  = offset + 192 ;
90004dbe:	4817      	ldr	r0, [pc, #92]	@ (90004e1c <TGFX_JPEG_InitColorTables+0x9b8>)
90004dc0:	4917      	ldr	r1, [pc, #92]	@ (90004e20 <TGFX_JPEG_InitColorTables+0x9bc>)
90004dc2:	4a18      	ldr	r2, [pc, #96]	@ (90004e24 <TGFX_JPEG_InitColorTables+0x9c0>)
90004dc4:	4b18      	ldr	r3, [pc, #96]	@ (90004e28 <TGFX_JPEG_InitColorTables+0x9c4>)
    CR_RED_LUT[i] = ( (((int32_t) ((1.40200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
90004dc6:	ea4f 4c23 	mov.w	ip, r3, asr #16
  for (i = 0; i <= 255; i++)
90004dca:	445b      	add	r3, fp
    CR_GREEN_LUT[i] = (-((int32_t) ((0.71414 / 2) * (1L << 16)))) * index;
90004dcc:	f845 1f04 	str.w	r1, [r5, #4]!
  for (i = 0; i <= 255; i++)
90004dd0:	4449      	add	r1, r9
    CR_RED_LUT[i] = ( (((int32_t) ((1.40200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
90004dd2:	f847 cf04 	str.w	ip, [r7, #4]!
  for (i = 0; i <= 255; i++)
90004dd6:	4573      	cmp	r3, lr
    CB_BLUE_LUT[i] = ( (((int32_t) ((1.77200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
90004dd8:	ea4f 4c22 	mov.w	ip, r2, asr #16
    CB_GREEN_LUT[i] = (-((int32_t) ((0.34414 / 2) * (1L << 16)))) * index;
90004ddc:	f844 0f04 	str.w	r0, [r4, #4]!
  for (i = 0; i <= 255; i++)
90004de0:	4452      	add	r2, sl
90004de2:	4440      	add	r0, r8
    CB_BLUE_LUT[i] = ( (((int32_t) ((1.77200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
90004de4:	f846 cf04 	str.w	ip, [r6, #4]!
  for (i = 0; i <= 255; i++)
90004de8:	d1ed      	bne.n	90004dc6 <TGFX_JPEG_InitColorTables+0x962>
}
90004dea:	b025      	add	sp, #148	@ 0x94
90004dec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90004df0:	24007f48 	.word	0x24007f48
90004df4:	24007ac8 	.word	0x24007ac8
90004df8:	24007648 	.word	0x24007648
90004dfc:	240071c8 	.word	0x240071c8
90004e00:	2400adc4 	.word	0x2400adc4
90004e04:	2400a9c4 	.word	0x2400a9c4
90004e08:	2400a5c4 	.word	0x2400a5c4
90004e0c:	00430042 	.word	0x00430042
90004e10:	00830082 	.word	0x00830082
90004e14:	00c700c6 	.word	0x00c700c6
90004e18:	2400a1c4 	.word	0x2400a1c4
90004e1c:	002c0c00 	.word	0x002c0c00
90004e20:	005b6800 	.word	0x005b6800
90004e24:	ff1db000 	.word	0xff1db000
90004e28:	ff4d0c00 	.word	0xff4d0c00
90004e2c:	000166e8 	.word	0x000166e8
90004e30:	0001c5a0 	.word	0x0001c5a0
90004e34:	ffff4930 	.word	0xffff4930
90004e38:	ffffa7e8 	.word	0xffffa7e8
90004e3c:	00b3f400 	.word	0x00b3f400

90004e40 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
90004e40:	4770      	bx	lr
90004e42:	bf00      	nop

90004e44 <_ZN23ApplicationFontProviderD0Ev>:
90004e44:	b510      	push	{r4, lr}
90004e46:	4604      	mov	r4, r0
90004e48:	2104      	movs	r1, #4
90004e4a:	f01d feb4 	bl	90022bb6 <_ZdlPvj>
90004e4e:	4620      	mov	r0, r4
90004e50:	bd10      	pop	{r4, pc}
90004e52:	bf00      	nop

90004e54 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
    switch (typography)
90004e54:	2901      	cmp	r1, #1
{
90004e56:	b508      	push	{r3, lr}
    switch (typography)
90004e58:	d004      	beq.n	90004e64 <_ZN23ApplicationFontProvider7getFontEt+0x10>
90004e5a:	2902      	cmp	r1, #2
90004e5c:	d00a      	beq.n	90004e74 <_ZN23ApplicationFontProvider7getFontEt+0x20>
90004e5e:	b129      	cbz	r1, 90004e6c <_ZN23ApplicationFontProvider7getFontEt+0x18>
90004e60:	2000      	movs	r0, #0
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
    default:
        return 0;
    }
}
90004e62:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
90004e64:	f000 ff46 	bl	90005cf4 <_ZN17TypedTextDatabase8getFontsEv>
90004e68:	6840      	ldr	r0, [r0, #4]
}
90004e6a:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
90004e6c:	f000 ff42 	bl	90005cf4 <_ZN17TypedTextDatabase8getFontsEv>
90004e70:	6800      	ldr	r0, [r0, #0]
}
90004e72:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
90004e74:	f000 ff3e 	bl	90005cf4 <_ZN17TypedTextDatabase8getFontsEv>
90004e78:	6880      	ldr	r0, [r0, #8]
}
90004e7a:	bd08      	pop	{r3, pc}

90004e7c <_ZN14BitmapDatabase11getInstanceEv>:
namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
    return bitmap_database;
}
90004e7c:	4800      	ldr	r0, [pc, #0]	@ (90004e80 <_ZN14BitmapDatabase11getInstanceEv+0x4>)
90004e7e:	4770      	bx	lr
90004e80:	900259d4 	.word	0x900259d4

90004e84 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
}
90004e84:	2001      	movs	r0, #1
90004e86:	4770      	bx	lr

90004e88 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
    {
        if (unicode == 0)
90004e88:	b169      	cbz	r1, 90004ea6 <_ZNK8touchgfx4Font8getGlyphEt+0x1e>
        {
            return 0;
        }
        const uint8_t* dummyPixelDataPointer = 0;
        uint8_t bitsPerPixelDummy = 0;
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
90004e8a:	6802      	ldr	r2, [r0, #0]
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
90004e8c:	b530      	push	{r4, r5, lr}
90004e8e:	b083      	sub	sp, #12
        const uint8_t* dummyPixelDataPointer = 0;
90004e90:	2400      	movs	r4, #0
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
90004e92:	6895      	ldr	r5, [r2, #8]
90004e94:	f10d 0303 	add.w	r3, sp, #3
90004e98:	aa01      	add	r2, sp, #4
        const uint8_t* dummyPixelDataPointer = 0;
90004e9a:	9401      	str	r4, [sp, #4]
        uint8_t bitsPerPixelDummy = 0;
90004e9c:	f88d 4003 	strb.w	r4, [sp, #3]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
90004ea0:	47a8      	blx	r5
        return glyph;
    }
90004ea2:	b003      	add	sp, #12
90004ea4:	bd30      	pop	{r4, r5, pc}
            return 0;
90004ea6:	4608      	mov	r0, r1
    }
90004ea8:	4770      	bx	lr
90004eaa:	bf00      	nop

90004eac <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
    {
        return fallbackCharacter;
    }
90004eac:	89c0      	ldrh	r0, [r0, #14]
90004eae:	4770      	bx	lr

90004eb0 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
    {
        return ellipsisCharacter;
    }
90004eb0:	8a00      	ldrh	r0, [r0, #16]
90004eb2:	4770      	bx	lr

90004eb4 <_ZNK8touchgfx4Font11getBaselineEv>:
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
    {
        return baselineHeight;
    }
90004eb4:	88c0      	ldrh	r0, [r0, #6]
90004eb6:	4770      	bx	lr

90004eb8 <_ZNK8touchgfx4Font9getHeightEv>:
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
    {
        return fontHeight;
    }
90004eb8:	8880      	ldrh	r0, [r0, #4]
90004eba:	4770      	bx	lr

90004ebc <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
    {
        return bPerPixel;
90004ebc:	7a80      	ldrb	r0, [r0, #10]
    }
90004ebe:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
90004ec2:	4770      	bx	lr

90004ec4 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
    {
        return bAlignRow;
90004ec4:	7a80      	ldrb	r0, [r0, #10]
    }
90004ec6:	09c0      	lsrs	r0, r0, #7
90004ec8:	4770      	bx	lr
90004eca:	bf00      	nop

90004ecc <_ZN8touchgfx9TypedTextD1Ev>:
    }
90004ecc:	4770      	bx	lr
90004ece:	bf00      	nop

90004ed0 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
90004ed0:	b510      	push	{r4, lr}
90004ed2:	4604      	mov	r4, r0
    }
90004ed4:	2108      	movs	r1, #8
90004ed6:	f01d fe6e 	bl	90022bb6 <_ZdlPvj>
90004eda:	4620      	mov	r0, r4
90004edc:	bd10      	pop	{r4, pc}
90004ede:	bf00      	nop

90004ee0 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
    {
        (void)screenId; // Unused variable
    }
90004ee0:	4770      	bx	lr
90004ee2:	bf00      	nop

90004ee4 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
    {
        redraw = rect;
90004ee4:	f500 7398 	add.w	r3, r0, #304	@ 0x130
90004ee8:	6808      	ldr	r0, [r1, #0]
90004eea:	6849      	ldr	r1, [r1, #4]
90004eec:	c303      	stmia	r3!, {r0, r1}
    }
90004eee:	4770      	bx	lr

90004ef0 <_ZN8touchgfx10Transition8tearDownEv>:
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
    {
    }
90004ef0:	4770      	bx	lr
90004ef2:	bf00      	nop

90004ef4 <_ZN8touchgfx10Transition4initEv>:
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
    {
    }
90004ef4:	4770      	bx	lr
90004ef6:	bf00      	nop

90004ef8 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
    {
        screenContainer = &cont;
90004ef8:	6041      	str	r1, [r0, #4]
    }
90004efa:	4770      	bx	lr

90004efc <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
90004efc:	4770      	bx	lr
90004efe:	bf00      	nop

90004f00 <_ZN23FrontendApplicationBase19changeToStartScreenEv>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
90004f00:	4905      	ldr	r1, [pc, #20]	@ (90004f18 <_ZN23FrontendApplicationBase19changeToStartScreenEv+0x18>)
90004f02:	2200      	movs	r2, #0
// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
90004f04:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
90004f08:	f8c0 2150 	str.w	r2, [r0, #336]	@ 0x150
90004f0c:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140
90004f10:	e9c0 0152 	strd	r0, r1, [r0, #328]	@ 0x148

    virtual void changeToStartScreen()
    {
        gotoScreen1ScreenNoTransition();
    }
90004f14:	4770      	bx	lr
90004f16:	bf00      	nop
90004f18:	90004f9d 	.word	0x90004f9d

90004f1c <_ZN8touchgfx12NoTransition15handleTickEventEv>:
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
    {
        done = true;
90004f1c:	2301      	movs	r3, #1
90004f1e:	7203      	strb	r3, [r0, #8]
    }
90004f20:	4770      	bx	lr
90004f22:	bf00      	nop

90004f24 <_ZN8touchgfx12NoTransitionD1Ev>:
class NoTransition : public Transition
90004f24:	4770      	bx	lr
90004f26:	bf00      	nop

90004f28 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
90004f28:	4770      	bx	lr
90004f2a:	bf00      	nop

90004f2c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
    {
        (pobject->*pmemfun)();
90004f2c:	1d01      	adds	r1, r0, #4
90004f2e:	c90e      	ldmia	r1, {r1, r2, r3}
90004f30:	ea4f 0c63 	mov.w	ip, r3, asr #1
90004f34:	eb01 0063 	add.w	r0, r1, r3, asr #1
90004f38:	07db      	lsls	r3, r3, #31
90004f3a:	d502      	bpl.n	90004f42 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x16>
90004f3c:	f851 300c 	ldr.w	r3, [r1, ip]
90004f40:	589a      	ldr	r2, [r3, r2]
90004f42:	4710      	bx	r2

90004f44 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
    {
        return (pobject != 0) && (pmemfun != 0);
90004f44:	6843      	ldr	r3, [r0, #4]
90004f46:	b13b      	cbz	r3, 90004f58 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x14>
90004f48:	6883      	ldr	r3, [r0, #8]
90004f4a:	b10b      	cbz	r3, 90004f50 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0xc>
90004f4c:	2001      	movs	r0, #1
    }
90004f4e:	4770      	bx	lr
90004f50:	68c0      	ldr	r0, [r0, #12]
90004f52:	f000 0001 	and.w	r0, r0, #1
90004f56:	4770      	bx	lr
        return (pobject != 0) && (pmemfun != 0);
90004f58:	4618      	mov	r0, r3
90004f5a:	4770      	bx	lr

90004f5c <_ZN8touchgfx12NoTransitionD0Ev>:
90004f5c:	b510      	push	{r4, lr}
90004f5e:	4604      	mov	r4, r0
90004f60:	210c      	movs	r1, #12
90004f62:	f01d fe28 	bl	90022bb6 <_ZdlPvj>
90004f66:	4620      	mov	r0, r4
90004f68:	bd10      	pop	{r4, pc}
90004f6a:	bf00      	nop

90004f6c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
90004f6c:	b510      	push	{r4, lr}
90004f6e:	4604      	mov	r4, r0
90004f70:	2110      	movs	r1, #16
90004f72:	f01d fe20 	bl	90022bb6 <_ZdlPvj>
90004f76:	4620      	mov	r0, r4
90004f78:	bd10      	pop	{r4, pc}
90004f7a:	bf00      	nop

90004f7c <_ZN23FrontendApplicationBaseD0Ev>:
    virtual ~FrontendApplicationBase() { }
90004f7c:	b510      	push	{r4, lr}
90004f7e:	4604      	mov	r4, r0
90004f80:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
90004f84:	f01d fe17 	bl	90022bb6 <_ZdlPvj>
90004f88:	4620      	mov	r0, r4
90004f8a:	bd10      	pop	{r4, pc}

90004f8c <_ZN8touchgfx10Transition10invalidateEv>:
    virtual void invalidate()
90004f8c:	b508      	push	{r3, lr}
        Application::getInstance()->invalidate();
90004f8e:	f00e fe25 	bl	90013bdc <_ZN8touchgfx11Application11getInstanceEv>
    }
90004f92:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        Application::getInstance()->invalidate();
90004f96:	f00f ba6b 	b.w	90014470 <_ZN8touchgfx11Application10invalidateEv>
90004f9a:	bf00      	nop

90004f9c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:
}

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
90004f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
90004fa0:	e9d0 6a55 	ldrd	r6, sl, [r0, #340]	@ 0x154
{
90004fa4:	4607      	mov	r7, r0
90004fa6:	b081      	sub	sp, #4
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
90004fa8:	68b0      	ldr	r0, [r6, #8]
90004faa:	6803      	ldr	r3, [r0, #0]
90004fac:	6a1b      	ldr	r3, [r3, #32]
90004fae:	4798      	blx	r3
90004fb0:	f5b0 7ff4 	cmp.w	r0, #488	@ 0x1e8
90004fb4:	f0c0 809b 	bcc.w	900050ee <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x152>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
90004fb8:	6870      	ldr	r0, [r6, #4]
90004fba:	6803      	ldr	r3, [r0, #0]
90004fbc:	6a1b      	ldr	r3, [r3, #32]
90004fbe:	4798      	blx	r3
90004fc0:	280f      	cmp	r0, #15
90004fc2:	f240 80a0 	bls.w	90005106 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x16a>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
90004fc6:	68f0      	ldr	r0, [r6, #12]
90004fc8:	6803      	ldr	r3, [r0, #0]
90004fca:	6a1b      	ldr	r3, [r3, #32]
90004fcc:	4798      	blx	r3
90004fce:	280b      	cmp	r0, #11
90004fd0:	f240 8093 	bls.w	900050fa <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x15e>
    if (*currentTrans)
90004fd4:	f8df 9160 	ldr.w	r9, [pc, #352]	@ 90005138 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x19c>
    Application::getInstance()->clearAllTimerWidgets();
90004fd8:	f00e fe00 	bl	90013bdc <_ZN8touchgfx11Application11getInstanceEv>

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
    {
        timerWidgets.clear();
90004fdc:	3004      	adds	r0, #4
90004fde:	f00e fe22 	bl	90013c26 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    if (*currentTrans)
90004fe2:	f8d9 0000 	ldr.w	r0, [r9]
90004fe6:	b130      	cbz	r0, 90004ff6 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x5a>
        (*currentTrans)->tearDown();
90004fe8:	6803      	ldr	r3, [r0, #0]
90004fea:	494a      	ldr	r1, [pc, #296]	@ (90005114 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x178>)
90004fec:	68da      	ldr	r2, [r3, #12]
90004fee:	428a      	cmp	r2, r1
90004ff0:	d176      	bne.n	900050e0 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x144>
        (*currentTrans)->~Transition();
90004ff2:	681b      	ldr	r3, [r3, #0]
90004ff4:	4798      	blx	r3
    if (*currentScreen)
90004ff6:	f8df 8144 	ldr.w	r8, [pc, #324]	@ 9000513c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x1a0>
90004ffa:	f8d8 0000 	ldr.w	r0, [r8]
90004ffe:	2800      	cmp	r0, #0
90005000:	d060      	beq.n	900050c4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x128>
        (*currentScreen)->tearDownScreen();
90005002:	6803      	ldr	r3, [r0, #0]
90005004:	695b      	ldr	r3, [r3, #20]
90005006:	4798      	blx	r3
    if (*currentPresenter)
90005008:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
9000500c:	2800      	cmp	r0, #0
9000500e:	d054      	beq.n	900050ba <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x11e>
        (*currentPresenter)->deactivate();
90005010:	6803      	ldr	r3, [r0, #0]
90005012:	685b      	ldr	r3, [r3, #4]
90005014:	4798      	blx	r3
    if (*currentScreen)
90005016:	f8d8 0000 	ldr.w	r0, [r8]
9000501a:	b110      	cbz	r0, 90005022 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x86>
        (*currentScreen)->~Screen();
9000501c:	6803      	ldr	r3, [r0, #0]
9000501e:	681b      	ldr	r3, [r3, #0]
90005020:	4798      	blx	r3
    if (*currentPresenter)
90005022:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
90005026:	b110      	cbz	r0, 9000502e <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x92>
        (*currentPresenter)->~Presenter();
90005028:	6803      	ldr	r3, [r0, #0]
9000502a:	689b      	ldr	r3, [r3, #8]
9000502c:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
9000502e:	68f0      	ldr	r0, [r6, #12]
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
    {
        return *static_cast<T*>(element(index));
90005030:	2100      	movs	r1, #0
90005032:	6803      	ldr	r3, [r0, #0]
        : screenContainer(0), done(false)
90005034:	468b      	mov	fp, r1
90005036:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
90005038:	4798      	blx	r3
9000503a:	4b37      	ldr	r3, [pc, #220]	@ (90005118 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x17c>)
9000503c:	4604      	mov	r4, r0
9000503e:	f8c0 b004 	str.w	fp, [r0, #4]
90005042:	f880 b008 	strb.w	fp, [r0, #8]
90005046:	4659      	mov	r1, fp
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
90005048:	68b0      	ldr	r0, [r6, #8]
9000504a:	6023      	str	r3, [r4, #0]
9000504c:	6803      	ldr	r3, [r0, #0]
9000504e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
90005050:	4798      	blx	r3
90005052:	4605      	mov	r5, r0
90005054:	f000 fef6 	bl	90005e44 <_ZN11Screen1ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
90005058:	6870      	ldr	r0, [r6, #4]
9000505a:	4659      	mov	r1, fp
9000505c:	6803      	ldr	r3, [r0, #0]
9000505e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
90005060:	4798      	blx	r3
90005062:	4606      	mov	r6, r0
90005064:	4629      	mov	r1, r5
90005066:	f000 fec3 	bl	90005df0 <_ZN16Screen1PresenterC1ER11Screen1View>
    *currentTrans = newTransition;
    *currentPresenter = newPresenter;
    *currentScreen = newScreen;
    model->bind(newPresenter);
9000506a:	1d33      	adds	r3, r6, #4
    *currentPresenter = newPresenter;
9000506c:	f8c7 613c 	str.w	r6, [r7, #316]	@ 0x13c
    newScreen->setupScreen();
90005070:	4628      	mov	r0, r5
    *currentTrans = newTransition;
90005072:	f8c9 4000 	str.w	r4, [r9]
    *currentScreen = newScreen;
90005076:	f8c8 5000 	str.w	r5, [r8]
public:
    Model();

    void bind(ModelListener* listener)
    {
        modelListener = listener;
9000507a:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
9000507e:	682b      	ldr	r3, [r5, #0]
    
    virtual ~ModelListener() {}

    void bind(Model* m)
    {
        model = m;
90005080:	f8c6 a008 	str.w	sl, [r6, #8]
90005084:	68db      	ldr	r3, [r3, #12]
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
    {
        presenter = &newPresenter;
90005086:	63ee      	str	r6, [r5, #60]	@ 0x3c
90005088:	4798      	blx	r3
    newPresenter->activate();
9000508a:	6833      	ldr	r3, [r6, #0]
9000508c:	4630      	mov	r0, r6
9000508e:	681b      	ldr	r3, [r3, #0]
90005090:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
90005092:	4621      	mov	r1, r4
90005094:	4628      	mov	r0, r5
90005096:	f010 fa5d 	bl	90015554 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
9000509a:	6823      	ldr	r3, [r4, #0]
9000509c:	491f      	ldr	r1, [pc, #124]	@ (9000511c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x180>)
9000509e:	691a      	ldr	r2, [r3, #16]
900050a0:	428a      	cmp	r2, r1
900050a2:	d119      	bne.n	900050d8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x13c>
    newTransition->invalidate();
900050a4:	695b      	ldr	r3, [r3, #20]
900050a6:	4a1e      	ldr	r2, [pc, #120]	@ (90005120 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x184>)
900050a8:	4293      	cmp	r3, r2
900050aa:	d110      	bne.n	900050ce <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x132>
        Application::getInstance()->invalidate();
900050ac:	f00e fd96 	bl	90013bdc <_ZN8touchgfx11Application11getInstanceEv>
}
900050b0:	b001      	add	sp, #4
900050b2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900050b6:	f00f b9db 	b.w	90014470 <_ZN8touchgfx11Application10invalidateEv>
    if (*currentScreen)
900050ba:	f8d8 0000 	ldr.w	r0, [r8]
900050be:	2800      	cmp	r0, #0
900050c0:	d1ac      	bne.n	9000501c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x80>
900050c2:	e7b4      	b.n	9000502e <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x92>
    if (*currentPresenter)
900050c4:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
900050c8:	2800      	cmp	r0, #0
900050ca:	d1a1      	bne.n	90005010 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x74>
900050cc:	e7af      	b.n	9000502e <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x92>
    newTransition->invalidate();
900050ce:	4620      	mov	r0, r4
900050d0:	b001      	add	sp, #4
900050d2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900050d6:	4718      	bx	r3
    newTransition->init();
900050d8:	4620      	mov	r0, r4
900050da:	4790      	blx	r2
    newTransition->invalidate();
900050dc:	6823      	ldr	r3, [r4, #0]
900050de:	e7e1      	b.n	900050a4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x108>
        (*currentTrans)->tearDown();
900050e0:	4790      	blx	r2
    if (*currentTrans)
900050e2:	f8d9 0000 	ldr.w	r0, [r9]
900050e6:	2800      	cmp	r0, #0
900050e8:	d085      	beq.n	90004ff6 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x5a>
        (*currentTrans)->~Transition();
900050ea:	6803      	ldr	r3, [r0, #0]
900050ec:	e781      	b.n	90004ff2 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x56>
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
900050ee:	4b0d      	ldr	r3, [pc, #52]	@ (90005124 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x188>)
900050f0:	21a3      	movs	r1, #163	@ 0xa3
900050f2:	4a0d      	ldr	r2, [pc, #52]	@ (90005128 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x18c>)
900050f4:	480d      	ldr	r0, [pc, #52]	@ (9000512c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x190>)
900050f6:	f01d fd8d 	bl	90022c14 <__assert_func>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
900050fa:	4b0d      	ldr	r3, [pc, #52]	@ (90005130 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x194>)
900050fc:	21a5      	movs	r1, #165	@ 0xa5
900050fe:	4a0a      	ldr	r2, [pc, #40]	@ (90005128 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x18c>)
90005100:	480a      	ldr	r0, [pc, #40]	@ (9000512c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x190>)
90005102:	f01d fd87 	bl	90022c14 <__assert_func>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
90005106:	4b0b      	ldr	r3, [pc, #44]	@ (90005134 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x198>)
90005108:	21a4      	movs	r1, #164	@ 0xa4
9000510a:	4a07      	ldr	r2, [pc, #28]	@ (90005128 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x18c>)
9000510c:	4807      	ldr	r0, [pc, #28]	@ (9000512c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x190>)
9000510e:	f01d fd81 	bl	90022c14 <__assert_func>
90005112:	bf00      	nop
90005114:	90004ef1 	.word	0x90004ef1
90005118:	90025d58 	.word	0x90025d58
9000511c:	90004ef5 	.word	0x90004ef5
90005120:	90004f8d 	.word	0x90004f8d
90005124:	900259f8 	.word	0x900259f8
90005128:	90025a88 	.word	0x90025a88
9000512c:	90025b5c 	.word	0x90025b5c
90005130:	90025c48 	.word	0x90025c48
90005134:	90025ba4 	.word	0x90025ba4
90005138:	2402634c 	.word	0x2402634c
9000513c:	24026348 	.word	0x24026348

90005140 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    virtual void handlePendingScreenTransition()
90005140:	b570      	push	{r4, r5, r6, lr}
90005142:	4604      	mov	r4, r0
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
90005144:	f8d0 0140 	ldr.w	r0, [r0, #320]	@ 0x140
90005148:	b1b8      	cbz	r0, 9000517a <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x3a>
9000514a:	6802      	ldr	r2, [r0, #0]
9000514c:	4916      	ldr	r1, [pc, #88]	@ (900051a8 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x68>)
9000514e:	68d3      	ldr	r3, [r2, #12]
90005150:	428b      	cmp	r3, r1
90005152:	d11f      	bne.n	90005194 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x54>
        return (pobject != 0) && (pmemfun != 0);
90005154:	6843      	ldr	r3, [r0, #4]
90005156:	b183      	cbz	r3, 9000517a <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x3a>
90005158:	6881      	ldr	r1, [r0, #8]
9000515a:	b179      	cbz	r1, 9000517c <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x3c>
            pendingScreenTransitionCallback->execute();
9000515c:	6892      	ldr	r2, [r2, #8]
9000515e:	4b13      	ldr	r3, [pc, #76]	@ (900051ac <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x6c>)
90005160:	429a      	cmp	r2, r3
90005162:	d11e      	bne.n	900051a2 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x62>
        (pobject->*pmemfun)();
90005164:	68c2      	ldr	r2, [r0, #12]
90005166:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
9000516a:	eb03 0062 	add.w	r0, r3, r2, asr #1
9000516e:	07d3      	lsls	r3, r2, #31
90005170:	d40d      	bmi.n	9000518e <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x4e>
90005172:	4788      	blx	r1
            pendingScreenTransitionCallback = 0;
90005174:	2300      	movs	r3, #0
90005176:	f8c4 3140 	str.w	r3, [r4, #320]	@ 0x140
    }
9000517a:	bd70      	pop	{r4, r5, r6, pc}
        return (pobject != 0) && (pmemfun != 0);
9000517c:	68c5      	ldr	r5, [r0, #12]
9000517e:	07ee      	lsls	r6, r5, #31
90005180:	d5fb      	bpl.n	9000517a <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x3a>
            pendingScreenTransitionCallback->execute();
90005182:	6892      	ldr	r2, [r2, #8]
90005184:	4e09      	ldr	r6, [pc, #36]	@ (900051ac <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x6c>)
90005186:	42b2      	cmp	r2, r6
90005188:	d10b      	bne.n	900051a2 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x62>
        (pobject->*pmemfun)();
9000518a:	eb03 0065 	add.w	r0, r3, r5, asr #1
9000518e:	6803      	ldr	r3, [r0, #0]
90005190:	5859      	ldr	r1, [r3, r1]
90005192:	e7ee      	b.n	90005172 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x32>
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
90005194:	4798      	blx	r3
90005196:	2800      	cmp	r0, #0
90005198:	d0ef      	beq.n	9000517a <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x3a>
            pendingScreenTransitionCallback->execute();
9000519a:	f8d4 0140 	ldr.w	r0, [r4, #320]	@ 0x140
9000519e:	6802      	ldr	r2, [r0, #0]
900051a0:	e7dc      	b.n	9000515c <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x1c>
900051a2:	4790      	blx	r2
900051a4:	e7e6      	b.n	90005174 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x34>
900051a6:	bf00      	nop
900051a8:	90004f45 	.word	0x90004f45
900051ac:	90004f2d 	.word	0x90004f2d

900051b0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
900051b0:	b570      	push	{r4, r5, r6, lr}
900051b2:	4604      	mov	r4, r0
900051b4:	4616      	mov	r6, r2
900051b6:	460d      	mov	r5, r1
          pendingScreenTransitionCallback(0)
900051b8:	f00e fdd6 	bl	90013d68 <_ZN8touchgfx11ApplicationC1Ev>
        instance = this;
900051bc:	4a18      	ldr	r2, [pc, #96]	@ (90005220 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x70>)
        : currentPresenter(0),
900051be:	2300      	movs	r3, #0
      frontendHeap(heap),
900051c0:	f8c4 6154 	str.w	r6, [r4, #340]	@ 0x154
        instance = this;
900051c4:	6014      	str	r4, [r2, #0]
        return instance;
900051c6:	4e17      	ldr	r6, [pc, #92]	@ (90005224 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x74>)
      model(m)
900051c8:	4a17      	ldr	r2, [pc, #92]	@ (90005228 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x78>)
900051ca:	6830      	ldr	r0, [r6, #0]
900051cc:	6022      	str	r2, [r4, #0]
        : pobject(0), pmemfun(0)
900051ce:	4a17      	ldr	r2, [pc, #92]	@ (9000522c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x7c>)
900051d0:	4917      	ldr	r1, [pc, #92]	@ (90005230 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x80>)
900051d2:	f8c4 2144 	str.w	r2, [r4, #324]	@ 0x144
900051d6:	f8c4 3148 	str.w	r3, [r4, #328]	@ 0x148
900051da:	f8c4 5158 	str.w	r5, [r4, #344]	@ 0x158
        : currentPresenter(0),
900051de:	e9c4 334f 	strd	r3, r3, [r4, #316]	@ 0x13c
900051e2:	e9c4 3353 	strd	r3, r3, [r4, #332]	@ 0x14c
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
900051e6:	6802      	ldr	r2, [r0, #0]
900051e8:	6892      	ldr	r2, [r2, #8]
900051ea:	428a      	cmp	r2, r1
900051ec:	d115      	bne.n	9000521a <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x6a>
        requestedOrientation = orientation;
900051ee:	f44f 7380 	mov.w	r3, #256	@ 0x100
900051f2:	f8a0 3074 	strh.w	r3, [r0, #116]	@ 0x74
    touchgfx::Texts::setLanguage(GB);
900051f6:	2000      	movs	r0, #0
900051f8:	f000 fd2e 	bl	90005c58 <_ZN8touchgfx5Texts11setLanguageEt>
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
900051fc:	6833      	ldr	r3, [r6, #0]
900051fe:	f893 2076 	ldrb.w	r2, [r3, #118]	@ 0x76
90005202:	b12a      	cbz	r2, 90005210 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x60>
90005204:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
90005206:	b118      	cbz	r0, 90005210 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x60>
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
90005208:	f016 fdd1 	bl	9001bdae <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>
}
9000520c:	4620      	mov	r0, r4
9000520e:	bd70      	pop	{r4, r5, r6, pc}
        return instance->lcdRef;
90005210:	6898      	ldr	r0, [r3, #8]
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
90005212:	f016 fdcc 	bl	9001bdae <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>
}
90005216:	4620      	mov	r0, r4
90005218:	bd70      	pop	{r4, r5, r6, pc}
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
9000521a:	4619      	mov	r1, r3
9000521c:	4790      	blx	r2
9000521e:	e7ea      	b.n	900051f6 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x46>
90005220:	24026358 	.word	0x24026358
90005224:	2402630c 	.word	0x2402630c
90005228:	90025d0c 	.word	0x90025d0c
9000522c:	90025cf4 	.word	0x90025cf4
90005230:	9000147d 	.word	0x9000147d

90005234 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
90005234:	4905      	ldr	r1, [pc, #20]	@ (9000524c <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x18>)
90005236:	2200      	movs	r2, #0
    pendingScreenTransitionCallback = &transitionCallback;
90005238:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
9000523c:	f8c0 2150 	str.w	r2, [r0, #336]	@ 0x150
90005240:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140
90005244:	e9c0 0152 	strd	r0, r1, [r0, #328]	@ 0x148
}
90005248:	4770      	bx	lr
9000524a:	bf00      	nop
9000524c:	90004f9d 	.word	0x90004f9d

90005250 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
    {
        return gsubTable;
    }
90005250:	6a40      	ldr	r0, [r0, #36]	@ 0x24
90005252:	4770      	bx	lr

90005254 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return arabicTable;
    }
90005254:	6a80      	ldr	r0, [r0, #40]	@ 0x28
90005256:	4770      	bx	lr

90005258 <_ZN8touchgfx13GeneratedFontD1Ev>:
class GeneratedFont : public ConstFont
90005258:	4770      	bx	lr
9000525a:	bf00      	nop

9000525c <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:
}

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
9000525c:	888b      	ldrh	r3, [r1, #4]
9000525e:	69c0      	ldr	r0, [r0, #28]
90005260:	0adb      	lsrs	r3, r3, #11
90005262:	680a      	ldr	r2, [r1, #0]
90005264:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
}
90005268:	4410      	add	r0, r2
9000526a:	4770      	bx	lr

9000526c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
    if (!glyph || glyph->kerningTableSize == 0)
9000526c:	b1fa      	cbz	r2, 900052ae <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x42>
{
9000526e:	b510      	push	{r4, lr}
    if (!glyph || glyph->kerningTableSize == 0)
90005270:	7b14      	ldrb	r4, [r2, #12]
90005272:	b1d4      	cbz	r4, 900052aa <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x3e>
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
90005274:	f892 c00d 	ldrb.w	ip, [r2, #13]
90005278:	f892 e00b 	ldrb.w	lr, [r2, #11]
9000527c:	ea4f 220c 	mov.w	r2, ip, lsl #8
    {
        return 0;
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
90005280:	6a03      	ldr	r3, [r0, #32]
90005282:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
90005286:	ea4e 0202 	orr.w	r2, lr, r2
9000528a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
9000528e:	eb03 0084 	add.w	r0, r3, r4, lsl #2
90005292:	e004      	b.n	9000529e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x32>
90005294:	f103 0304 	add.w	r3, r3, #4
    {
        if (prevChar == kerndata->unicodePrevChar)
        {
            return kerndata->distance;
        }
        if (prevChar < kerndata->unicodePrevChar)
90005298:	d807      	bhi.n	900052aa <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x3e>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
9000529a:	4283      	cmp	r3, r0
9000529c:	d005      	beq.n	900052aa <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x3e>
        if (prevChar == kerndata->unicodePrevChar)
9000529e:	881a      	ldrh	r2, [r3, #0]
900052a0:	428a      	cmp	r2, r1
900052a2:	d1f7      	bne.n	90005294 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x28>
            return kerndata->distance;
900052a4:	f993 0002 	ldrsb.w	r0, [r3, #2]
        {
            break;
        }
    }
    return 0;
}
900052a8:	bd10      	pop	{r4, pc}
        return 0;
900052aa:	2000      	movs	r0, #0
}
900052ac:	bd10      	pop	{r4, pc}
        return 0;
900052ae:	4610      	mov	r0, r2
}
900052b0:	4770      	bx	lr
900052b2:	bf00      	nop

900052b4 <_ZN8touchgfx13GeneratedFontD0Ev>:
900052b4:	b510      	push	{r4, lr}
900052b6:	4604      	mov	r4, r0
900052b8:	212c      	movs	r1, #44	@ 0x2c
900052ba:	f01d fc7c 	bl	90022bb6 <_ZdlPvj>
900052be:	4620      	mov	r0, r4
900052c0:	bd10      	pop	{r4, pc}
900052c2:	bf00      	nop

900052c4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
900052c4:	b530      	push	{r4, r5, lr}
900052c6:	b08b      	sub	sp, #44	@ 0x2c
900052c8:	4604      	mov	r4, r0
900052ca:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
      arabicTable(formsTable)
900052ce:	9500      	str	r5, [sp, #0]
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
900052d0:	f89d 503c 	ldrb.w	r5, [sp, #60]	@ 0x3c
      arabicTable(formsTable)
900052d4:	9501      	str	r5, [sp, #4]
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
900052d6:	f89d 5040 	ldrb.w	r5, [sp, #64]	@ 0x40
      arabicTable(formsTable)
900052da:	9502      	str	r5, [sp, #8]
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
900052dc:	f89d 5044 	ldrb.w	r5, [sp, #68]	@ 0x44
      arabicTable(formsTable)
900052e0:	9503      	str	r5, [sp, #12]
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
900052e2:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
      arabicTable(formsTable)
900052e6:	9504      	str	r5, [sp, #16]
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
900052e8:	f89d 504c 	ldrb.w	r5, [sp, #76]	@ 0x4c
      arabicTable(formsTable)
900052ec:	9505      	str	r5, [sp, #20]
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
900052ee:	f89d 5050 	ldrb.w	r5, [sp, #80]	@ 0x50
      arabicTable(formsTable)
900052f2:	9506      	str	r5, [sp, #24]
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
900052f4:	f8bd 505c 	ldrh.w	r5, [sp, #92]	@ 0x5c
      arabicTable(formsTable)
900052f8:	9507      	str	r5, [sp, #28]
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
900052fa:	f8bd 5060 	ldrh.w	r5, [sp, #96]	@ 0x60
      arabicTable(formsTable)
900052fe:	9508      	str	r5, [sp, #32]
90005300:	f00f fd5e 	bl	90014dc0 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
      glyphData(glyphDataInternalFlash),
90005304:	9b15      	ldr	r3, [sp, #84]	@ 0x54
}
90005306:	4620      	mov	r0, r4
      glyphData(glyphDataInternalFlash),
90005308:	61e3      	str	r3, [r4, #28]
      kerningData(kerningList),
9000530a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
9000530c:	6223      	str	r3, [r4, #32]
      gsubTable(gsubData),
9000530e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
90005310:	6263      	str	r3, [r4, #36]	@ 0x24
      arabicTable(formsTable)
90005312:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
90005314:	62a3      	str	r3, [r4, #40]	@ 0x28
90005316:	4b02      	ldr	r3, [pc, #8]	@ (90005320 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x5c>)
90005318:	6023      	str	r3, [r4, #0]
}
9000531a:	b00b      	add	sp, #44	@ 0x2c
9000531c:	bd30      	pop	{r4, r5, pc}
9000531e:	bf00      	nop
90005320:	90025d7c 	.word	0x90025d7c

90005324 <_ZN8touchgfx6Screen15afterTransitionEv>:
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
    {
    }
90005324:	4770      	bx	lr
90005326:	bf00      	nop

90005328 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
    {
    }
90005328:	4770      	bx	lr
9000532a:	bf00      	nop

9000532c <_ZN8touchgfx6Screen15handleTickEventEv>:
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
    {
    }
9000532c:	4770      	bx	lr
9000532e:	bf00      	nop

90005330 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
    {
        (void)key; // Unused variable
    }
90005330:	4770      	bx	lr
90005332:	bf00      	nop

90005334 <_ZN8touchgfx8TextArea8setWidthEs>:
    TextArea()
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
    {
    }

    virtual void setWidth(int16_t width)
90005334:	b530      	push	{r4, r5, lr}
90005336:	b085      	sub	sp, #20
90005338:	460a      	mov	r2, r1
    {
        Widget::setWidth(width);
        boundingArea = calculateBoundingArea();
9000533a:	6803      	ldr	r3, [r0, #0]
    virtual void setWidth(int16_t width)
9000533c:	4604      	mov	r4, r0
        boundingArea = calculateBoundingArea();
9000533e:	466d      	mov	r5, sp
90005340:	4601      	mov	r1, r0
        rect.width = width;
90005342:	8102      	strh	r2, [r0, #8]
90005344:	343c      	adds	r4, #60	@ 0x3c
90005346:	4628      	mov	r0, r5
90005348:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
9000534c:	4798      	blx	r3
9000534e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
90005352:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
90005356:	b005      	add	sp, #20
90005358:	bd30      	pop	{r4, r5, pc}
9000535a:	bf00      	nop

9000535c <_ZN8touchgfx8TextArea9setHeightEs>:

    virtual void setHeight(int16_t height)
9000535c:	b530      	push	{r4, r5, lr}
9000535e:	b085      	sub	sp, #20
90005360:	460a      	mov	r2, r1
    {
        Widget::setHeight(height);
        boundingArea = calculateBoundingArea();
90005362:	6803      	ldr	r3, [r0, #0]
    virtual void setHeight(int16_t height)
90005364:	4604      	mov	r4, r0
        boundingArea = calculateBoundingArea();
90005366:	466d      	mov	r5, sp
90005368:	4601      	mov	r1, r0
        rect.height = height;
9000536a:	8142      	strh	r2, [r0, #10]
9000536c:	343c      	adds	r4, #60	@ 0x3c
9000536e:	4628      	mov	r0, r5
90005370:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
90005374:	4798      	blx	r3
90005376:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
9000537a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
9000537e:	b005      	add	sp, #20
90005380:	bd30      	pop	{r4, r5, pc}
90005382:	bf00      	nop

90005384 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
90005384:	2200      	movs	r2, #0
90005386:	6002      	str	r2, [r0, #0]
90005388:	6042      	str	r2, [r0, #4]

    virtual Rect getSolidRect() const
    {
        return Rect();
    }
9000538a:	4770      	bx	lr

9000538c <_ZN8touchgfx8TextArea8setAlphaEh>:
    /**
     * @copydoc Image::setAlpha
     */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
9000538c:	f880 1036 	strb.w	r1, [r0, #54]	@ 0x36
    }
90005390:	4770      	bx	lr
90005392:	bf00      	nop

90005394 <_ZNK8touchgfx8TextArea12getWildcard2Ev>:
     * @see TextAreaWithOneWildcard, TextAreaWithTwoWildcards
     */
    virtual const Unicode::UnicodeChar* getWildcard2() const
    {
        return 0;
    }
90005394:	2000      	movs	r0, #0
90005396:	4770      	bx	lr

90005398 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv>:
        if (visible)
90005398:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
9000539c:	b112      	cbz	r2, 900053a4 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0xc>
            invalidate();
9000539e:	6803      	ldr	r3, [r0, #0]
900053a0:	695b      	ldr	r3, [r3, #20]
900053a2:	4718      	bx	r3
    virtual void draw(const Rect& area) const;

    virtual void invalidateContent() const
    {
        Widget::invalidateContent();
    }
900053a4:	4770      	bx	lr
900053a6:	bf00      	nop

900053a8 <_ZNK8touchgfx24TextAreaWithWildcardBase21calculateBoundingAreaEv>:
     * @param  rectY      The y coordinate.
     * @param  rectWidth  The width.
     * @param  rectHeight The height.
     */
    Rect(int16_t rectX, int16_t rectY, int16_t rectWidth, int16_t rectHeight)
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
900053a8:	2200      	movs	r2, #0
900053aa:	f04f 31ff 	mov.w	r1, #4294967295
        /**
         * Initializes a new instance of the BoundingArea class which is invalid by default.
         */
        BoundingArea()
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
              text(0)
900053ae:	6082      	str	r2, [r0, #8]
900053b0:	e9c0 2100 	strd	r2, r1, [r0]

protected:
    virtual TextArea::BoundingArea calculateBoundingArea() const
    {
        return TextArea::BoundingArea();
    }
900053b4:	4770      	bx	lr
900053b6:	bf00      	nop

900053b8 <_ZNK8touchgfx23TextAreaWithOneWildcard12getWildcard1Ev>:
    }

    virtual const Unicode::UnicodeChar* getWildcard1() const
    {
        return wc1;
    }
900053b8:	6c80      	ldr	r0, [r0, #72]	@ 0x48
900053ba:	4770      	bx	lr

900053bc <_ZN15Screen1ViewBaseD1Ev>:
}

Screen1ViewBase::~Screen1ViewBase()
{

}
900053bc:	4770      	bx	lr
900053be:	bf00      	nop

900053c0 <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{

}
900053c0:	4770      	bx	lr
900053c2:	bf00      	nop

900053c4 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
900053c4:	4770      	bx	lr
900053c6:	bf00      	nop

900053c8 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
900053c8:	b510      	push	{r4, lr}
900053ca:	4604      	mov	r4, r0
900053cc:	214c      	movs	r1, #76	@ 0x4c
900053ce:	f01d fbf2 	bl	90022bb6 <_ZdlPvj>
900053d2:	4620      	mov	r0, r4
900053d4:	bd10      	pop	{r4, pc}
900053d6:	bf00      	nop

900053d8 <_ZN15Screen1ViewBaseD0Ev>:
Screen1ViewBase::~Screen1ViewBase()
900053d8:	b510      	push	{r4, lr}
900053da:	4604      	mov	r4, r0
}
900053dc:	f44f 71f4 	mov.w	r1, #488	@ 0x1e8
900053e0:	f01d fbe9 	bl	90022bb6 <_ZdlPvj>
900053e4:	4620      	mov	r0, r4
900053e6:	bd10      	pop	{r4, pc}

900053e8 <_ZN8touchgfx8TextArea12setBaselineYEs>:
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
900053e8:	4b1b      	ldr	r3, [pc, #108]	@ (90005458 <_ZN8touchgfx8TextArea12setBaselineYEs+0x70>)
        setY(baselineY - getTypedText().getFont()->getBaseline());
900053ea:	6802      	ldr	r2, [r0, #0]
900053ec:	681b      	ldr	r3, [r3, #0]
    virtual void setBaselineY(int16_t baselineY)
900053ee:	b570      	push	{r4, r5, r6, lr}
        setY(baselineY - getTypedText().getFont()->getBaseline());
900053f0:	6b55      	ldr	r5, [r2, #52]	@ 0x34
900053f2:	b323      	cbz	r3, 9000543e <_ZN8touchgfx8TextArea12setBaselineYEs+0x56>
900053f4:	b28e      	uxth	r6, r1
        return typedTextId < numberOfTypedTexts;
900053f6:	4919      	ldr	r1, [pc, #100]	@ (9000545c <_ZN8touchgfx8TextArea12setBaselineYEs+0x74>)
900053f8:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
900053fa:	4604      	mov	r4, r0
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
900053fc:	8809      	ldrh	r1, [r1, #0]
900053fe:	4291      	cmp	r1, r2
90005400:	d923      	bls.n	9000544a <_ZN8touchgfx8TextArea12setBaselineYEs+0x62>
        return fonts[typedTexts[typedTextId].fontIdx];
90005402:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
90005406:	4b16      	ldr	r3, [pc, #88]	@ (90005460 <_ZN8touchgfx8TextArea12setBaselineYEs+0x78>)
90005408:	681b      	ldr	r3, [r3, #0]
9000540a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
9000540e:	4a15      	ldr	r2, [pc, #84]	@ (90005464 <_ZN8touchgfx8TextArea12setBaselineYEs+0x7c>)
90005410:	6803      	ldr	r3, [r0, #0]
90005412:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
90005414:	4293      	cmp	r3, r2
90005416:	d107      	bne.n	90005428 <_ZN8touchgfx8TextArea12setBaselineYEs+0x40>
        return baselineHeight;
90005418:	88c0      	ldrh	r0, [r0, #6]
9000541a:	4b13      	ldr	r3, [pc, #76]	@ (90005468 <_ZN8touchgfx8TextArea12setBaselineYEs+0x80>)
9000541c:	1a31      	subs	r1, r6, r0
9000541e:	429d      	cmp	r5, r3
90005420:	b209      	sxth	r1, r1
90005422:	d107      	bne.n	90005434 <_ZN8touchgfx8TextArea12setBaselineYEs+0x4c>
        rect.y = y;
90005424:	80e1      	strh	r1, [r4, #6]
    }
90005426:	bd70      	pop	{r4, r5, r6, pc}
        setY(baselineY - getTypedText().getFont()->getBaseline());
90005428:	4798      	blx	r3
9000542a:	4b0f      	ldr	r3, [pc, #60]	@ (90005468 <_ZN8touchgfx8TextArea12setBaselineYEs+0x80>)
9000542c:	1a31      	subs	r1, r6, r0
9000542e:	429d      	cmp	r5, r3
90005430:	b209      	sxth	r1, r1
90005432:	d0f7      	beq.n	90005424 <_ZN8touchgfx8TextArea12setBaselineYEs+0x3c>
90005434:	4620      	mov	r0, r4
90005436:	462b      	mov	r3, r5
    }
90005438:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(baselineY - getTypedText().getFont()->getBaseline());
9000543c:	4718      	bx	r3
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
9000543e:	4b0b      	ldr	r3, [pc, #44]	@ (9000546c <_ZN8touchgfx8TextArea12setBaselineYEs+0x84>)
90005440:	216c      	movs	r1, #108	@ 0x6c
90005442:	4a0b      	ldr	r2, [pc, #44]	@ (90005470 <_ZN8touchgfx8TextArea12setBaselineYEs+0x88>)
90005444:	480b      	ldr	r0, [pc, #44]	@ (90005474 <_ZN8touchgfx8TextArea12setBaselineYEs+0x8c>)
90005446:	f01d fbe5 	bl	90022c14 <__assert_func>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
9000544a:	4b0b      	ldr	r3, [pc, #44]	@ (90005478 <_ZN8touchgfx8TextArea12setBaselineYEs+0x90>)
9000544c:	216d      	movs	r1, #109	@ 0x6d
9000544e:	4a08      	ldr	r2, [pc, #32]	@ (90005470 <_ZN8touchgfx8TextArea12setBaselineYEs+0x88>)
90005450:	4808      	ldr	r0, [pc, #32]	@ (90005474 <_ZN8touchgfx8TextArea12setBaselineYEs+0x8c>)
90005452:	f01d fbdf 	bl	90022c14 <__assert_func>
90005456:	bf00      	nop
90005458:	2402635c 	.word	0x2402635c
9000545c:	24026360 	.word	0x24026360
90005460:	24026364 	.word	0x24026364
90005464:	90004eb5 	.word	0x90004eb5
90005468:	900030b1 	.word	0x900030b1
9000546c:	90025dd4 	.word	0x90025dd4
90005470:	90025e18 	.word	0x90025e18
90005474:	90025e54 	.word	0x90025e54
90005478:	90025e9c 	.word	0x90025e9c

9000547c <_ZN8touchgfx8TextArea13setXBaselineYEss>:
        setX(x);
9000547c:	6803      	ldr	r3, [r0, #0]
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
9000547e:	b570      	push	{r4, r5, r6, lr}
90005480:	4614      	mov	r4, r2
90005482:	4e23      	ldr	r6, [pc, #140]	@ (90005510 <_ZN8touchgfx8TextArea13setXBaselineYEss+0x94>)
        setX(x);
90005484:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
90005486:	4605      	mov	r5, r0
90005488:	42b2      	cmp	r2, r6
9000548a:	d122      	bne.n	900054d2 <_ZN8touchgfx8TextArea13setXBaselineYEss+0x56>
        setBaselineY(baselineY);
9000548c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
        rect.x = x;
9000548e:	80a9      	strh	r1, [r5, #4]
90005490:	4920      	ldr	r1, [pc, #128]	@ (90005514 <_ZN8touchgfx8TextArea13setXBaselineYEss+0x98>)
90005492:	428a      	cmp	r2, r1
90005494:	d123      	bne.n	900054de <_ZN8touchgfx8TextArea13setXBaselineYEss+0x62>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
90005496:	4a20      	ldr	r2, [pc, #128]	@ (90005518 <_ZN8touchgfx8TextArea13setXBaselineYEss+0x9c>)
        setY(baselineY - getTypedText().getFont()->getBaseline());
90005498:	b2a4      	uxth	r4, r4
9000549a:	6b5e      	ldr	r6, [r3, #52]	@ 0x34
9000549c:	6813      	ldr	r3, [r2, #0]
9000549e:	2b00      	cmp	r3, #0
900054a0:	d02f      	beq.n	90005502 <_ZN8touchgfx8TextArea13setXBaselineYEss+0x86>
        return typedTextId < numberOfTypedTexts;
900054a2:	491e      	ldr	r1, [pc, #120]	@ (9000551c <_ZN8touchgfx8TextArea13setXBaselineYEss+0xa0>)
900054a4:	8daa      	ldrh	r2, [r5, #44]	@ 0x2c
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
900054a6:	8809      	ldrh	r1, [r1, #0]
900054a8:	4291      	cmp	r1, r2
900054aa:	d924      	bls.n	900054f6 <_ZN8touchgfx8TextArea13setXBaselineYEss+0x7a>
        return fonts[typedTexts[typedTextId].fontIdx];
900054ac:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
900054b0:	4b1b      	ldr	r3, [pc, #108]	@ (90005520 <_ZN8touchgfx8TextArea13setXBaselineYEss+0xa4>)
900054b2:	681b      	ldr	r3, [r3, #0]
900054b4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
900054b8:	4a1a      	ldr	r2, [pc, #104]	@ (90005524 <_ZN8touchgfx8TextArea13setXBaselineYEss+0xa8>)
900054ba:	6803      	ldr	r3, [r0, #0]
900054bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
900054be:	4293      	cmp	r3, r2
900054c0:	d117      	bne.n	900054f2 <_ZN8touchgfx8TextArea13setXBaselineYEss+0x76>
900054c2:	88c0      	ldrh	r0, [r0, #6]
900054c4:	4b18      	ldr	r3, [pc, #96]	@ (90005528 <_ZN8touchgfx8TextArea13setXBaselineYEss+0xac>)
900054c6:	1a24      	subs	r4, r4, r0
900054c8:	429e      	cmp	r6, r3
900054ca:	b221      	sxth	r1, r4
900054cc:	d10c      	bne.n	900054e8 <_ZN8touchgfx8TextArea13setXBaselineYEss+0x6c>
        rect.y = y;
900054ce:	80e9      	strh	r1, [r5, #6]
    }
900054d0:	bd70      	pop	{r4, r5, r6, pc}
        setX(x);
900054d2:	4790      	blx	r2
        setBaselineY(baselineY);
900054d4:	682b      	ldr	r3, [r5, #0]
900054d6:	490f      	ldr	r1, [pc, #60]	@ (90005514 <_ZN8touchgfx8TextArea13setXBaselineYEss+0x98>)
900054d8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
900054da:	428a      	cmp	r2, r1
900054dc:	d0db      	beq.n	90005496 <_ZN8touchgfx8TextArea13setXBaselineYEss+0x1a>
900054de:	4621      	mov	r1, r4
900054e0:	4628      	mov	r0, r5
    }
900054e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setBaselineY(baselineY);
900054e6:	4710      	bx	r2
        setY(baselineY - getTypedText().getFont()->getBaseline());
900054e8:	4628      	mov	r0, r5
900054ea:	4633      	mov	r3, r6
    }
900054ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(baselineY - getTypedText().getFont()->getBaseline());
900054f0:	4718      	bx	r3
900054f2:	4798      	blx	r3
900054f4:	e7e6      	b.n	900054c4 <_ZN8touchgfx8TextArea13setXBaselineYEss+0x48>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
900054f6:	4b0d      	ldr	r3, [pc, #52]	@ (9000552c <_ZN8touchgfx8TextArea13setXBaselineYEss+0xb0>)
900054f8:	216d      	movs	r1, #109	@ 0x6d
900054fa:	4a0d      	ldr	r2, [pc, #52]	@ (90005530 <_ZN8touchgfx8TextArea13setXBaselineYEss+0xb4>)
900054fc:	480d      	ldr	r0, [pc, #52]	@ (90005534 <_ZN8touchgfx8TextArea13setXBaselineYEss+0xb8>)
900054fe:	f01d fb89 	bl	90022c14 <__assert_func>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
90005502:	4b0d      	ldr	r3, [pc, #52]	@ (90005538 <_ZN8touchgfx8TextArea13setXBaselineYEss+0xbc>)
90005504:	216c      	movs	r1, #108	@ 0x6c
90005506:	4a0a      	ldr	r2, [pc, #40]	@ (90005530 <_ZN8touchgfx8TextArea13setXBaselineYEss+0xb4>)
90005508:	480a      	ldr	r0, [pc, #40]	@ (90005534 <_ZN8touchgfx8TextArea13setXBaselineYEss+0xb8>)
9000550a:	f01d fb83 	bl	90022c14 <__assert_func>
9000550e:	bf00      	nop
90005510:	900030ad 	.word	0x900030ad
90005514:	900053e9 	.word	0x900053e9
90005518:	2402635c 	.word	0x2402635c
9000551c:	24026360 	.word	0x24026360
90005520:	24026364 	.word	0x24026364
90005524:	90004eb5 	.word	0x90004eb5
90005528:	900030b1 	.word	0x900030b1
9000552c:	90025e9c 	.word	0x90025e9c
90005530:	90025e18 	.word	0x90025e18
90005534:	90025e54 	.word	0x90025e54
90005538:	90025dd4 	.word	0x90025dd4

9000553c <_ZN15Screen1ViewBaseC1Ev>:
Screen1ViewBase::Screen1ViewBase()
9000553c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90005540:	4604      	mov	r4, r0
90005542:	b089      	sub	sp, #36	@ 0x24
        : presenter(0)
90005544:	2700      	movs	r7, #0
90005546:	f00f fe59 	bl	900151fc <_ZN8touchgfx6ScreenC1Ev>
          touchable(false),
9000554a:	f44f 7880 	mov.w	r8, #256	@ 0x100
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
        : Widget(), alpha(255), color(0)
9000554e:	26ff      	movs	r6, #255	@ 0xff
90005550:	f104 096c 	add.w	r9, r4, #108	@ 0x6c
90005554:	4add      	ldr	r2, [pc, #884]	@ (900058cc <_ZN15Screen1ViewBaseC1Ev+0x390>)
90005556:	4bde      	ldr	r3, [pc, #888]	@ (900058d0 <_ZN15Screen1ViewBaseC1Ev+0x394>)
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
        : bitmapId(id)
90005558:	f64f 7aff 	movw	sl, #65535	@ 0xffff
9000555c:	a906      	add	r1, sp, #24
9000555e:	4648      	mov	r0, r9
90005560:	63e7      	str	r7, [r4, #60]	@ 0x3c
        : x(0), y(0), width(0), height(0)
90005562:	6467      	str	r7, [r4, #68]	@ 0x44
90005564:	6022      	str	r2, [r4, #0]
          cachedAbsX(0),
90005566:	6627      	str	r7, [r4, #96]	@ 0x60
          touchable(false),
90005568:	f8a4 8064 	strh.w	r8, [r4, #100]	@ 0x64
9000556c:	6423      	str	r3, [r4, #64]	@ 0x40
        : color(col)
9000556e:	66a7      	str	r7, [r4, #104]	@ 0x68
90005570:	f884 6066 	strb.w	r6, [r4, #102]	@ 0x66
        : typedTextId(id)
90005574:	4dd7      	ldr	r5, [pc, #860]	@ (900058d4 <_ZN15Screen1ViewBaseC1Ev+0x398>)
90005576:	f8ad a018 	strh.w	sl, [sp, #24]
        : x(0), y(0), width(0), height(0)
9000557a:	e9c4 7712 	strd	r7, r7, [r4, #72]	@ 0x48
          parent(0),
9000557e:	e9c4 7714 	strd	r7, r7, [r4, #80]	@ 0x50
          nextDrawChainElement(0),
90005582:	e9c4 7716 	strd	r7, r7, [r4, #88]	@ 0x58
90005586:	f00b ffa7 	bl	900114d8 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE>
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
9000558a:	f04f 33ff 	mov.w	r3, #4294967295
        : TextAreaWithWildcardBase(), wc1(0)
9000558e:	4ad2      	ldr	r2, [pc, #840]	@ (900058d8 <_ZN15Screen1ViewBaseC1Ev+0x39c>)
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
    {
        container.add(d);
90005590:	f104 0140 	add.w	r1, r4, #64	@ 0x40
          touchable(false),
90005594:	f8a4 80bc 	strh.w	r8, [r4, #188]	@ 0xbc
90005598:	f8a4 a0c4 	strh.w	sl, [r4, #196]	@ 0xc4
        : color(col)
9000559c:	f8c4 70c8 	str.w	r7, [r4, #200]	@ 0xc8
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
900055a0:	f8a4 70cc 	strh.w	r7, [r4, #204]	@ 0xcc
900055a4:	f8c4 60ce 	str.w	r6, [r4, #206]	@ 0xce
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
900055a8:	f8c4 70d4 	str.w	r7, [r4, #212]	@ 0xd4
900055ac:	f8a4 8108 	strh.w	r8, [r4, #264]	@ 0x108
        : color(col)
900055b0:	f8c4 7114 	str.w	r7, [r4, #276]	@ 0x114
900055b4:	f8a4 7118 	strh.w	r7, [r4, #280]	@ 0x118
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
900055b8:	f8c4 30d8 	str.w	r3, [r4, #216]	@ 0xd8
900055bc:	f8a4 3110 	strh.w	r3, [r4, #272]	@ 0x110
900055c0:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
900055c4:	f8c4 50c0 	str.w	r5, [r4, #192]	@ 0xc0
900055c8:	f8c4 510c 	str.w	r5, [r4, #268]	@ 0x10c
        : x(0), y(0), width(0), height(0)
900055cc:	e9c4 7727 	strd	r7, r7, [r4, #156]	@ 0x9c
900055d0:	e9c4 7729 	strd	r7, r7, [r4, #164]	@ 0xa4
          nextSibling(0),
900055d4:	e9c4 772b 	strd	r7, r7, [r4, #172]	@ 0xac
          cachedAbsX(0),
900055d8:	e9c4 772d 	strd	r7, r7, [r4, #180]	@ 0xb4
900055dc:	e9c4 7737 	strd	r7, r7, [r4, #220]	@ 0xdc
900055e0:	e9c4 773a 	strd	r7, r7, [r4, #232]	@ 0xe8
900055e4:	e9c4 773c 	strd	r7, r7, [r4, #240]	@ 0xf0
          nextSibling(0),
900055e8:	e9c4 773e 	strd	r7, r7, [r4, #248]	@ 0xf8
          cachedAbsX(0),
900055ec:	e9c4 7740 	strd	r7, r7, [r4, #256]	@ 0x100
900055f0:	f8c4 611a 	str.w	r6, [r4, #282]	@ 0x11a
900055f4:	f8c4 20e4 	str.w	r2, [r4, #228]	@ 0xe4
900055f8:	4ab8      	ldr	r2, [pc, #736]	@ (900058dc <_ZN15Screen1ViewBaseC1Ev+0x3a0>)
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
900055fa:	f8c4 3124 	str.w	r3, [r4, #292]	@ 0x124
900055fe:	f8c4 2130 	str.w	r2, [r4, #304]	@ 0x130
90005602:	f8c4 3170 	str.w	r3, [r4, #368]	@ 0x170
90005606:	f8c4 7120 	str.w	r7, [r4, #288]	@ 0x120
          touchable(false),
9000560a:	f8a4 8154 	strh.w	r8, [r4, #340]	@ 0x154
9000560e:	f8a4 819c 	strh.w	r8, [r4, #412]	@ 0x19c
90005612:	f8a4 a15c 	strh.w	sl, [r4, #348]	@ 0x15c
        rect.x = x;
90005616:	f8df 82f0 	ldr.w	r8, [pc, #752]	@ 90005908 <_ZN15Screen1ViewBaseC1Ev+0x3cc>
        : color(col)
9000561a:	f8c4 7160 	str.w	r7, [r4, #352]	@ 0x160
9000561e:	f8a4 7164 	strh.w	r7, [r4, #356]	@ 0x164
90005622:	f8c4 6166 	str.w	r6, [r4, #358]	@ 0x166
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
90005626:	f8c4 716c 	str.w	r7, [r4, #364]	@ 0x16c
              text(0)
9000562a:	f8c4 7174 	str.w	r7, [r4, #372]	@ 0x174
9000562e:	f8c4 5158 	str.w	r5, [r4, #344]	@ 0x158
90005632:	e9c4 774a 	strd	r7, r7, [r4, #296]	@ 0x128
        : x(0), y(0), width(0), height(0)
90005636:	e9c4 774d 	strd	r7, r7, [r4, #308]	@ 0x134
9000563a:	e9c4 774f 	strd	r7, r7, [r4, #316]	@ 0x13c
          nextSibling(0),
9000563e:	e9c4 7751 	strd	r7, r7, [r4, #324]	@ 0x144
          cachedAbsX(0),
90005642:	e9c4 7753 	strd	r7, r7, [r4, #332]	@ 0x14c
90005646:	e9c4 775f 	strd	r7, r7, [r4, #380]	@ 0x17c
9000564a:	e9c4 7761 	strd	r7, r7, [r4, #388]	@ 0x184
          nextSibling(0),
9000564e:	e9c4 7763 	strd	r7, r7, [r4, #396]	@ 0x18c
          cachedAbsX(0),
90005652:	e9c4 7765 	strd	r7, r7, [r4, #404]	@ 0x194
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
90005656:	f8c4 2178 	str.w	r2, [r4, #376]	@ 0x178
9000565a:	f8c4 61ae 	str.w	r6, [r4, #430]	@ 0x1ae
9000565e:	1d26      	adds	r6, r4, #4
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
90005660:	f8c4 31b8 	str.w	r3, [r4, #440]	@ 0x1b8
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
    {
        color = newColor;
90005664:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
90005668:	4630      	mov	r0, r6
9000566a:	f8a4 a1a4 	strh.w	sl, [r4, #420]	@ 0x1a4
9000566e:	66a3      	str	r3, [r4, #104]	@ 0x68
90005670:	f504 7a98 	add.w	sl, r4, #304	@ 0x130
        : color(col)
90005674:	f8c4 71a8 	str.w	r7, [r4, #424]	@ 0x1a8
90005678:	f8a4 71ac 	strh.w	r7, [r4, #428]	@ 0x1ac
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
9000567c:	f8c4 71b4 	str.w	r7, [r4, #436]	@ 0x1b4
              text(0)
90005680:	f8c4 71bc 	str.w	r7, [r4, #444]	@ 0x1bc
        rect.x = x;
90005684:	6467      	str	r7, [r4, #68]	@ 0x44
90005686:	f8c4 51a0 	str.w	r5, [r4, #416]	@ 0x1a0
9000568a:	f8c4 8048 	str.w	r8, [r4, #72]	@ 0x48
9000568e:	f00a fd53 	bl	90010138 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    scalableImage1.setBitmap(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_BACKGROUNDS_480X272_WAVES_ID));
90005692:	4648      	mov	r0, r9
90005694:	a906      	add	r1, sp, #24
90005696:	f8ad 7018 	strh.w	r7, [sp, #24]
9000569a:	f00c fd60 	bl	9001215e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    scalableImage1.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
9000569e:	4639      	mov	r1, r7
900056a0:	4648      	mov	r0, r9
900056a2:	e9c4 781c 	strd	r7, r8, [r4, #112]	@ 0x70
900056a6:	f00b fede 	bl	90011466 <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>
900056aa:	4649      	mov	r1, r9
900056ac:	4630      	mov	r0, r6
    textArea3.setPosition(204, 75, 111, 25);
900056ae:	f104 0798 	add.w	r7, r4, #152	@ 0x98
900056b2:	f00a fd41 	bl	90010138 <_ZN8touchgfx9Container3addERNS_8DrawableE>
900056b6:	4a8a      	ldr	r2, [pc, #552]	@ (900058e0 <_ZN15Screen1ViewBaseC1Ev+0x3a4>)
        setX(x);
900056b8:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
Screen1ViewBase::Screen1ViewBase()
900056bc:	f504 79bc 	add.w	r9, r4, #376	@ 0x178
        setWidth(width);
900056c0:	4988      	ldr	r1, [pc, #544]	@ (900058e4 <_ZN15Screen1ViewBaseC1Ev+0x3a8>)
        rect.x = x;
900056c2:	f8c4 209c 	str.w	r2, [r4, #156]	@ 0x9c
        setWidth(width);
900056c6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
900056c8:	428a      	cmp	r2, r1
900056ca:	f040 8133 	bne.w	90005934 <_ZN15Screen1ViewBaseC1Ev+0x3f8>
        rect.width = width;
900056ce:	226f      	movs	r2, #111	@ 0x6f
        boundingArea = calculateBoundingArea();
900056d0:	f10d 0808 	add.w	r8, sp, #8
900056d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
900056d8:	4639      	mov	r1, r7
900056da:	4640      	mov	r0, r8
900056dc:	f8a4 20a0 	strh.w	r2, [r4, #160]	@ 0xa0
900056e0:	4798      	blx	r3
900056e2:	f104 03d4 	add.w	r3, r4, #212	@ 0xd4
900056e6:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
900056ea:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        setHeight(height);
900056ee:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
900056f2:	497d      	ldr	r1, [pc, #500]	@ (900058e8 <_ZN15Screen1ViewBaseC1Ev+0x3ac>)
900056f4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
900056f6:	428a      	cmp	r2, r1
900056f8:	f040 8126 	bne.w	90005948 <_ZN15Screen1ViewBaseC1Ev+0x40c>
        rect.height = height;
900056fc:	2219      	movs	r2, #25
        boundingArea = calculateBoundingArea();
900056fe:	f10d 0808 	add.w	r8, sp, #8
90005702:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
90005706:	4639      	mov	r1, r7
90005708:	4640      	mov	r0, r8
9000570a:	f8a4 20a2 	strh.w	r2, [r4, #162]	@ 0xa2
9000570e:	4798      	blx	r3
90005710:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
90005714:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
90005718:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        boundingArea = calculateBoundingArea();
9000571c:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
        color = newColor;
90005720:	f04f 31ff 	mov.w	r1, #4294967295
90005724:	4871      	ldr	r0, [pc, #452]	@ (900058ec <_ZN15Screen1ViewBaseC1Ev+0x3b0>)
        boundingArea = calculateBoundingArea();
90005726:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
        linespace = space;
9000572a:	2300      	movs	r3, #0
        color = newColor;
9000572c:	f8c4 10c8 	str.w	r1, [r4, #200]	@ 0xc8
        linespace = space;
90005730:	4282      	cmp	r2, r0
90005732:	f8a4 30cc 	strh.w	r3, [r4, #204]	@ 0xcc
        boundingArea = calculateBoundingArea();
90005736:	f040 810b 	bne.w	90005950 <_ZN15Screen1ViewBaseC1Ev+0x414>
9000573a:	f8c4 30dc 	str.w	r3, [r4, #220]	@ 0xdc
9000573e:	e9c4 3135 	strd	r3, r1, [r4, #212]	@ 0xd4
    Unicode::snprintf(textArea3Buffer, TEXTAREA3_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_EMQO).getText());
90005742:	f504 73e0 	add.w	r3, r4, #448	@ 0x1c0
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
90005746:	f8df b1c4 	ldr.w	fp, [pc, #452]	@ 9000590c <_ZN15Screen1ViewBaseC1Ev+0x3d0>
9000574a:	9301      	str	r3, [sp, #4]
9000574c:	f8db 3000 	ldr.w	r3, [fp]
90005750:	2b00      	cmp	r3, #0
90005752:	f000 8122 	beq.w	9000599a <_ZN15Screen1ViewBaseC1Ev+0x45e>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
90005756:	4b66      	ldr	r3, [pc, #408]	@ (900058f0 <_ZN15Screen1ViewBaseC1Ev+0x3b4>)
90005758:	881b      	ldrh	r3, [r3, #0]
9000575a:	2b02      	cmp	r3, #2
9000575c:	f240 8123 	bls.w	900059a6 <_ZN15Screen1ViewBaseC1Ev+0x46a>
        return texts->getText(typedTextId);
90005760:	4b64      	ldr	r3, [pc, #400]	@ (900058f4 <_ZN15Screen1ViewBaseC1Ev+0x3b8>)
90005762:	2102      	movs	r1, #2
    textArea4.setPosition(204, 164, 111, 25);
90005764:	f104 08e4 	add.w	r8, r4, #228	@ 0xe4
90005768:	6818      	ldr	r0, [r3, #0]
9000576a:	f000 fab3 	bl	90005cd4 <_ZNK8touchgfx5Texts7getTextEt>
    Unicode::snprintf(textArea3Buffer, TEXTAREA3_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_EMQO).getText());
9000576e:	4a62      	ldr	r2, [pc, #392]	@ (900058f8 <_ZN15Screen1ViewBaseC1Ev+0x3bc>)
90005770:	4603      	mov	r3, r0
90005772:	210a      	movs	r1, #10
90005774:	9801      	ldr	r0, [sp, #4]
90005776:	f011 f9cb 	bl	90016b10 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        wc1 = value;
9000577a:	9b01      	ldr	r3, [sp, #4]
    textArea3.setTypedText(touchgfx::TypedText(T___SINGLEUSE_KD8M));
9000577c:	a906      	add	r1, sp, #24
9000577e:	4638      	mov	r0, r7
90005780:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
        : typedTextId(id)
90005784:	2303      	movs	r3, #3
90005786:	9506      	str	r5, [sp, #24]
90005788:	f8ad 301c 	strh.w	r3, [sp, #28]
9000578c:	f00c fc20 	bl	90011fd0 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
90005790:	4639      	mov	r1, r7
90005792:	4630      	mov	r0, r6
90005794:	f00a fcd0 	bl	90010138 <_ZN8touchgfx9Container3addERNS_8DrawableE>
        rect.x = x;
90005798:	4a58      	ldr	r2, [pc, #352]	@ (900058fc <_ZN15Screen1ViewBaseC1Ev+0x3c0>)
        setX(x);
9000579a:	f8d4 30e4 	ldr.w	r3, [r4, #228]	@ 0xe4
        setY(y);
9000579e:	4951      	ldr	r1, [pc, #324]	@ (900058e4 <_ZN15Screen1ViewBaseC1Ev+0x3a8>)
        rect.x = x;
900057a0:	f8c4 20e8 	str.w	r2, [r4, #232]	@ 0xe8
        setWidth(width);
900057a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
900057a6:	428a      	cmp	r2, r1
900057a8:	f040 80e9 	bne.w	9000597e <_ZN15Screen1ViewBaseC1Ev+0x442>
        rect.width = width;
900057ac:	226f      	movs	r2, #111	@ 0x6f
        boundingArea = calculateBoundingArea();
900057ae:	af02      	add	r7, sp, #8
900057b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
900057b4:	4641      	mov	r1, r8
900057b6:	4638      	mov	r0, r7
900057b8:	f8a4 20ec 	strh.w	r2, [r4, #236]	@ 0xec
900057bc:	4798      	blx	r3
900057be:	f504 7390 	add.w	r3, r4, #288	@ 0x120
900057c2:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
900057c6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        setHeight(height);
900057ca:	f8d4 30e4 	ldr.w	r3, [r4, #228]	@ 0xe4
900057ce:	4946      	ldr	r1, [pc, #280]	@ (900058e8 <_ZN15Screen1ViewBaseC1Ev+0x3ac>)
900057d0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
900057d2:	428a      	cmp	r2, r1
900057d4:	f040 80dd 	bne.w	90005992 <_ZN15Screen1ViewBaseC1Ev+0x456>
        rect.height = height;
900057d8:	2219      	movs	r2, #25
        boundingArea = calculateBoundingArea();
900057da:	af02      	add	r7, sp, #8
900057dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
900057e0:	4641      	mov	r1, r8
900057e2:	4638      	mov	r0, r7
900057e4:	f8a4 20ee 	strh.w	r2, [r4, #238]	@ 0xee
900057e8:	4798      	blx	r3
900057ea:	f108 033c 	add.w	r3, r8, #60	@ 0x3c
900057ee:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
900057f2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        boundingArea = calculateBoundingArea();
900057f6:	f8d4 30e4 	ldr.w	r3, [r4, #228]	@ 0xe4
        color = newColor;
900057fa:	f04f 31ff 	mov.w	r1, #4294967295
900057fe:	483b      	ldr	r0, [pc, #236]	@ (900058ec <_ZN15Screen1ViewBaseC1Ev+0x3b0>)
        boundingArea = calculateBoundingArea();
90005800:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
        linespace = space;
90005804:	2300      	movs	r3, #0
        color = newColor;
90005806:	f8c4 1114 	str.w	r1, [r4, #276]	@ 0x114
        linespace = space;
9000580a:	4282      	cmp	r2, r0
9000580c:	f8a4 3118 	strh.w	r3, [r4, #280]	@ 0x118
        boundingArea = calculateBoundingArea();
90005810:	f040 80aa 	bne.w	90005968 <_ZN15Screen1ViewBaseC1Ev+0x42c>
90005814:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
90005818:	e9c4 3148 	strd	r3, r1, [r4, #288]	@ 0x120
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
9000581c:	f8db 3000 	ldr.w	r3, [fp]
    Unicode::snprintf(textArea4Buffer, TEXTAREA4_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_UFBG).getText());
90005820:	f504 77ea 	add.w	r7, r4, #468	@ 0x1d4
90005824:	2b00      	cmp	r3, #0
90005826:	f000 80b8 	beq.w	9000599a <_ZN15Screen1ViewBaseC1Ev+0x45e>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
9000582a:	4b31      	ldr	r3, [pc, #196]	@ (900058f0 <_ZN15Screen1ViewBaseC1Ev+0x3b4>)
9000582c:	881b      	ldrh	r3, [r3, #0]
9000582e:	2b00      	cmp	r3, #0
90005830:	f000 80b9 	beq.w	900059a6 <_ZN15Screen1ViewBaseC1Ev+0x46a>
        return texts->getText(typedTextId);
90005834:	4b2f      	ldr	r3, [pc, #188]	@ (900058f4 <_ZN15Screen1ViewBaseC1Ev+0x3b8>)
90005836:	2100      	movs	r1, #0
        color = newColor;
90005838:	f04f 3bff 	mov.w	fp, #4294967295
9000583c:	6818      	ldr	r0, [r3, #0]
9000583e:	f000 fa49 	bl	90005cd4 <_ZNK8touchgfx5Texts7getTextEt>
90005842:	4a2d      	ldr	r2, [pc, #180]	@ (900058f8 <_ZN15Screen1ViewBaseC1Ev+0x3bc>)
90005844:	4603      	mov	r3, r0
90005846:	210a      	movs	r1, #10
90005848:	4638      	mov	r0, r7
9000584a:	f011 f961 	bl	90016b10 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        : typedTextId(id)
9000584e:	2301      	movs	r3, #1
    textArea4.setTypedText(touchgfx::TypedText(T___SINGLEUSE_Z4NZ));
90005850:	a906      	add	r1, sp, #24
90005852:	4640      	mov	r0, r8
90005854:	f8c4 712c 	str.w	r7, [r4, #300]	@ 0x12c
        boundingArea = calculateBoundingArea();
90005858:	af02      	add	r7, sp, #8
9000585a:	f8ad 301c 	strh.w	r3, [sp, #28]
9000585e:	9506      	str	r5, [sp, #24]
90005860:	f00c fbb6 	bl	90011fd0 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
90005864:	4641      	mov	r1, r8
90005866:	4630      	mov	r0, r6
90005868:	f00a fc66 	bl	90010138 <_ZN8touchgfx9Container3addERNS_8DrawableE>
        linespace = space;
9000586c:	f04f 0800 	mov.w	r8, #0
        rect.x = x;
90005870:	4b23      	ldr	r3, [pc, #140]	@ (90005900 <_ZN15Screen1ViewBaseC1Ev+0x3c4>)
        boundingArea = calculateBoundingArea();
90005872:	4651      	mov	r1, sl
90005874:	4638      	mov	r0, r7
        color = newColor;
90005876:	f8c4 b160 	str.w	fp, [r4, #352]	@ 0x160
9000587a:	f8c4 3134 	str.w	r3, [r4, #308]	@ 0x134
        linespace = space;
9000587e:	f8a4 8164 	strh.w	r8, [r4, #356]	@ 0x164
        boundingArea = calculateBoundingArea();
90005882:	f00c f8fd 	bl	90011a80 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
90005886:	2205      	movs	r2, #5
90005888:	f10a 033c 	add.w	r3, sl, #60	@ 0x3c
9000588c:	9506      	str	r5, [sp, #24]
9000588e:	f8ad 201c 	strh.w	r2, [sp, #28]
90005892:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
90005896:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    textArea1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_UZ1A));
9000589a:	a906      	add	r1, sp, #24
9000589c:	4650      	mov	r0, sl
9000589e:	f00c fb97 	bl	90011fd0 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
900058a2:	4651      	mov	r1, sl
900058a4:	4630      	mov	r0, r6
900058a6:	f00a fc47 	bl	90010138 <_ZN8touchgfx9Container3addERNS_8DrawableE>
900058aa:	4b16      	ldr	r3, [pc, #88]	@ (90005904 <_ZN15Screen1ViewBaseC1Ev+0x3c8>)
900058ac:	4649      	mov	r1, r9
900058ae:	4638      	mov	r0, r7
900058b0:	f8c4 317c 	str.w	r3, [r4, #380]	@ 0x17c
        color = newColor;
900058b4:	f8c4 b1a8 	str.w	fp, [r4, #424]	@ 0x1a8
        linespace = space;
900058b8:	f8a4 81ac 	strh.w	r8, [r4, #428]	@ 0x1ac
        boundingArea = calculateBoundingArea();
900058bc:	f00c f8e0 	bl	90011a80 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
900058c0:	2204      	movs	r2, #4
900058c2:	f109 033c 	add.w	r3, r9, #60	@ 0x3c
900058c6:	9506      	str	r5, [sp, #24]
900058c8:	e022      	b.n	90005910 <_ZN15Screen1ViewBaseC1Ev+0x3d4>
900058ca:	bf00      	nop
900058cc:	90025fc4 	.word	0x90025fc4
900058d0:	90026a14 	.word	0x90026a14
900058d4:	900259f0 	.word	0x900259f0
900058d8:	90025f34 	.word	0x90025f34
900058dc:	90026984 	.word	0x90026984
900058e0:	004b00cc 	.word	0x004b00cc
900058e4:	90005335 	.word	0x90005335
900058e8:	9000535d 	.word	0x9000535d
900058ec:	900053a9 	.word	0x900053a9
900058f0:	24026360 	.word	0x24026360
900058f4:	24026368 	.word	0x24026368
900058f8:	90025f28 	.word	0x90025f28
900058fc:	00a400cc 	.word	0x00a400cc
90005900:	004b0044 	.word	0x004b0044
90005904:	00a40044 	.word	0x00a40044
90005908:	011001e0 	.word	0x011001e0
9000590c:	2402635c 	.word	0x2402635c
90005910:	f8ad 201c 	strh.w	r2, [sp, #28]
90005914:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
90005918:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    textArea2.setTypedText(touchgfx::TypedText(T___SINGLEUSE_MG6P));
9000591c:	a906      	add	r1, sp, #24
9000591e:	4648      	mov	r0, r9
90005920:	f00c fb56 	bl	90011fd0 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
90005924:	4630      	mov	r0, r6
90005926:	4649      	mov	r1, r9
90005928:	f00a fc06 	bl	90010138 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
9000592c:	4620      	mov	r0, r4
9000592e:	b009      	add	sp, #36	@ 0x24
90005930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        setWidth(width);
90005934:	216f      	movs	r1, #111	@ 0x6f
90005936:	4638      	mov	r0, r7
90005938:	4790      	blx	r2
        setHeight(height);
9000593a:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
9000593e:	491d      	ldr	r1, [pc, #116]	@ (900059b4 <_ZN15Screen1ViewBaseC1Ev+0x478>)
90005940:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
90005942:	428a      	cmp	r2, r1
90005944:	f43f aeda 	beq.w	900056fc <_ZN15Screen1ViewBaseC1Ev+0x1c0>
90005948:	2119      	movs	r1, #25
9000594a:	4638      	mov	r0, r7
9000594c:	4790      	blx	r2
9000594e:	e6e5      	b.n	9000571c <_ZN15Screen1ViewBaseC1Ev+0x1e0>
90005950:	f10d 0808 	add.w	r8, sp, #8
90005954:	4639      	mov	r1, r7
90005956:	4640      	mov	r0, r8
90005958:	4790      	blx	r2
9000595a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
9000595e:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
90005962:	e883 0007 	stmia.w	r3, {r0, r1, r2}
90005966:	e6ec      	b.n	90005742 <_ZN15Screen1ViewBaseC1Ev+0x206>
90005968:	af02      	add	r7, sp, #8
9000596a:	4641      	mov	r1, r8
9000596c:	4638      	mov	r0, r7
9000596e:	4790      	blx	r2
90005970:	f108 033c 	add.w	r3, r8, #60	@ 0x3c
90005974:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
90005978:	e883 0007 	stmia.w	r3, {r0, r1, r2}
9000597c:	e74e      	b.n	9000581c <_ZN15Screen1ViewBaseC1Ev+0x2e0>
        setWidth(width);
9000597e:	216f      	movs	r1, #111	@ 0x6f
90005980:	4640      	mov	r0, r8
90005982:	4790      	blx	r2
        setHeight(height);
90005984:	f8d4 30e4 	ldr.w	r3, [r4, #228]	@ 0xe4
90005988:	490a      	ldr	r1, [pc, #40]	@ (900059b4 <_ZN15Screen1ViewBaseC1Ev+0x478>)
9000598a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
9000598c:	428a      	cmp	r2, r1
9000598e:	f43f af23 	beq.w	900057d8 <_ZN15Screen1ViewBaseC1Ev+0x29c>
90005992:	2119      	movs	r1, #25
90005994:	4640      	mov	r0, r8
90005996:	4790      	blx	r2
90005998:	e72d      	b.n	900057f6 <_ZN15Screen1ViewBaseC1Ev+0x2ba>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
9000599a:	4b07      	ldr	r3, [pc, #28]	@ (900059b8 <_ZN15Screen1ViewBaseC1Ev+0x47c>)
9000599c:	2160      	movs	r1, #96	@ 0x60
9000599e:	4a07      	ldr	r2, [pc, #28]	@ (900059bc <_ZN15Screen1ViewBaseC1Ev+0x480>)
900059a0:	4807      	ldr	r0, [pc, #28]	@ (900059c0 <_ZN15Screen1ViewBaseC1Ev+0x484>)
900059a2:	f01d f937 	bl	90022c14 <__assert_func>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
900059a6:	4b07      	ldr	r3, [pc, #28]	@ (900059c4 <_ZN15Screen1ViewBaseC1Ev+0x488>)
900059a8:	2161      	movs	r1, #97	@ 0x61
900059aa:	4a04      	ldr	r2, [pc, #16]	@ (900059bc <_ZN15Screen1ViewBaseC1Ev+0x480>)
900059ac:	4804      	ldr	r0, [pc, #16]	@ (900059c0 <_ZN15Screen1ViewBaseC1Ev+0x484>)
900059ae:	f01d f931 	bl	90022c14 <__assert_func>
900059b2:	bf00      	nop
900059b4:	9000535d 	.word	0x9000535d
900059b8:	90025dd4 	.word	0x90025dd4
900059bc:	90025edc 	.word	0x90025edc
900059c0:	90025e54 	.word	0x90025e54
900059c4:	90025e9c 	.word	0x90025e9c

900059c8 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
900059c8:	4770      	bx	lr
900059ca:	bf00      	nop

900059cc <_Z23getFont_verdana_10_4bppv>:
{
900059cc:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
900059ce:	4d18      	ldr	r5, [pc, #96]	@ (90005a30 <_Z23getFont_verdana_10_4bppv+0x64>)
{
900059d0:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
900059d2:	682c      	ldr	r4, [r5, #0]
900059d4:	f3bf 8f5b 	dmb	ish
900059d8:	f014 0401 	ands.w	r4, r4, #1
900059dc:	d002      	beq.n	900059e4 <_Z23getFont_verdana_10_4bppv+0x18>
    return verdana_10_4bpp;
}
900059de:	4815      	ldr	r0, [pc, #84]	@ (90005a34 <_Z23getFont_verdana_10_4bppv+0x68>)
900059e0:	b00f      	add	sp, #60	@ 0x3c
900059e2:	bd30      	pop	{r4, r5, pc}
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
900059e4:	4628      	mov	r0, r5
900059e6:	f01d f8e8 	bl	90022bba <__cxa_guard_acquire>
900059ea:	2800      	cmp	r0, #0
900059ec:	d0f7      	beq.n	900059de <_Z23getFont_verdana_10_4bppv+0x12>
900059ee:	213f      	movs	r1, #63	@ 0x3f
900059f0:	2201      	movs	r2, #1
900059f2:	230a      	movs	r3, #10
900059f4:	2004      	movs	r0, #4
900059f6:	9204      	str	r2, [sp, #16]
900059f8:	9300      	str	r3, [sp, #0]
900059fa:	9003      	str	r0, [sp, #12]
900059fc:	480d      	ldr	r0, [pc, #52]	@ (90005a34 <_Z23getFont_verdana_10_4bppv+0x68>)
900059fe:	e9cd 1409 	strd	r1, r4, [sp, #36]	@ 0x24
90005a02:	490d      	ldr	r1, [pc, #52]	@ (90005a38 <_Z23getFont_verdana_10_4bppv+0x6c>)
90005a04:	9108      	str	r1, [sp, #32]
90005a06:	490d      	ldr	r1, [pc, #52]	@ (90005a3c <_Z23getFont_verdana_10_4bppv+0x70>)
90005a08:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
90005a0c:	9107      	str	r1, [sp, #28]
90005a0e:	490c      	ldr	r1, [pc, #48]	@ (90005a40 <_Z23getFont_verdana_10_4bppv+0x74>)
90005a10:	e9cd 4405 	strd	r4, r4, [sp, #20]
90005a14:	e9cd 4401 	strd	r4, r4, [sp, #4]
90005a18:	f7ff fc54 	bl	900052c4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
90005a1c:	4809      	ldr	r0, [pc, #36]	@ (90005a44 <_Z23getFont_verdana_10_4bppv+0x78>)
90005a1e:	f01d f917 	bl	90022c50 <atexit>
90005a22:	4628      	mov	r0, r5
90005a24:	f01d f8d5 	bl	90022bd2 <__cxa_guard_release>
}
90005a28:	4802      	ldr	r0, [pc, #8]	@ (90005a34 <_Z23getFont_verdana_10_4bppv+0x68>)
90005a2a:	b00f      	add	sp, #60	@ 0x3c
90005a2c:	bd30      	pop	{r4, r5, pc}
90005a2e:	bf00      	nop
90005a30:	2400b208 	.word	0x2400b208
90005a34:	2400b20c 	.word	0x2400b20c
90005a38:	90026ef8 	.word	0x90026ef8
90005a3c:	900270a4 	.word	0x900270a4
90005a40:	90201c38 	.word	0x90201c38
90005a44:	900059c9 	.word	0x900059c9

90005a48 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 96, 24, 20, 0, 0, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
90005a48:	4770      	bx	lr
90005a4a:	bf00      	nop

90005a4c <_Z23getFont_verdana_20_4bppv>:
{
90005a4c:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 96, 24, 20, 0, 0, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
90005a4e:	4d19      	ldr	r5, [pc, #100]	@ (90005ab4 <_Z23getFont_verdana_20_4bppv+0x68>)
{
90005a50:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 96, 24, 20, 0, 0, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
90005a52:	682c      	ldr	r4, [r5, #0]
90005a54:	f3bf 8f5b 	dmb	ish
90005a58:	f014 0401 	ands.w	r4, r4, #1
90005a5c:	d002      	beq.n	90005a64 <_Z23getFont_verdana_20_4bppv+0x18>
    return verdana_20_4bpp;
}
90005a5e:	4816      	ldr	r0, [pc, #88]	@ (90005ab8 <_Z23getFont_verdana_20_4bppv+0x6c>)
90005a60:	b00f      	add	sp, #60	@ 0x3c
90005a62:	bd30      	pop	{r4, r5, pc}
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 96, 24, 20, 0, 0, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
90005a64:	4628      	mov	r0, r5
90005a66:	f01d f8a8 	bl	90022bba <__cxa_guard_acquire>
90005a6a:	2800      	cmp	r0, #0
90005a6c:	d0f7      	beq.n	90005a5e <_Z23getFont_verdana_20_4bppv+0x12>
90005a6e:	213f      	movs	r1, #63	@ 0x3f
90005a70:	4a12      	ldr	r2, [pc, #72]	@ (90005abc <_Z23getFont_verdana_20_4bppv+0x70>)
90005a72:	2301      	movs	r3, #1
90005a74:	2014      	movs	r0, #20
90005a76:	9208      	str	r2, [sp, #32]
90005a78:	2204      	movs	r2, #4
90005a7a:	9304      	str	r3, [sp, #16]
90005a7c:	9000      	str	r0, [sp, #0]
90005a7e:	9401      	str	r4, [sp, #4]
90005a80:	480d      	ldr	r0, [pc, #52]	@ (90005ab8 <_Z23getFont_verdana_20_4bppv+0x6c>)
90005a82:	e9cd 1409 	strd	r1, r4, [sp, #36]	@ 0x24
90005a86:	490e      	ldr	r1, [pc, #56]	@ (90005ac0 <_Z23getFont_verdana_20_4bppv+0x74>)
90005a88:	e9cd 3305 	strd	r3, r3, [sp, #20]
90005a8c:	9107      	str	r1, [sp, #28]
90005a8e:	2318      	movs	r3, #24
90005a90:	490c      	ldr	r1, [pc, #48]	@ (90005ac4 <_Z23getFont_verdana_20_4bppv+0x78>)
90005a92:	e9cd 4202 	strd	r4, r2, [sp, #8]
90005a96:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
90005a9a:	2260      	movs	r2, #96	@ 0x60
90005a9c:	f7ff fc12 	bl	900052c4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
90005aa0:	4809      	ldr	r0, [pc, #36]	@ (90005ac8 <_Z23getFont_verdana_20_4bppv+0x7c>)
90005aa2:	f01d f8d5 	bl	90022c50 <atexit>
90005aa6:	4628      	mov	r0, r5
90005aa8:	f01d f893 	bl	90022bd2 <__cxa_guard_release>
}
90005aac:	4802      	ldr	r0, [pc, #8]	@ (90005ab8 <_Z23getFont_verdana_20_4bppv+0x6c>)
90005aae:	b00f      	add	sp, #60	@ 0x3c
90005ab0:	bd30      	pop	{r4, r5, pc}
90005ab2:	bf00      	nop
90005ab4:	2400b238 	.word	0x2400b238
90005ab8:	2400b23c 	.word	0x2400b23c
90005abc:	90026efc 	.word	0x90026efc
90005ac0:	900270a8 	.word	0x900270a8
90005ac4:	90201c48 	.word	0x90201c48
90005ac8:	90005a49 	.word	0x90005a49

90005acc <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
90005acc:	4770      	bx	lr
90005ace:	bf00      	nop

90005ad0 <_Z23getFont_verdana_40_4bppv>:
{
90005ad0:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
90005ad2:	4d18      	ldr	r5, [pc, #96]	@ (90005b34 <_Z23getFont_verdana_40_4bppv+0x64>)
{
90005ad4:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
90005ad6:	682c      	ldr	r4, [r5, #0]
90005ad8:	f3bf 8f5b 	dmb	ish
90005adc:	f014 0401 	ands.w	r4, r4, #1
90005ae0:	d002      	beq.n	90005ae8 <_Z23getFont_verdana_40_4bppv+0x18>
    return verdana_40_4bpp;
}
90005ae2:	4815      	ldr	r0, [pc, #84]	@ (90005b38 <_Z23getFont_verdana_40_4bppv+0x68>)
90005ae4:	b00f      	add	sp, #60	@ 0x3c
90005ae6:	bd30      	pop	{r4, r5, pc}
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
90005ae8:	4628      	mov	r0, r5
90005aea:	f01d f866 	bl	90022bba <__cxa_guard_acquire>
90005aee:	2800      	cmp	r0, #0
90005af0:	d0f7      	beq.n	90005ae2 <_Z23getFont_verdana_40_4bppv+0x12>
90005af2:	213f      	movs	r1, #63	@ 0x3f
90005af4:	2201      	movs	r2, #1
90005af6:	2328      	movs	r3, #40	@ 0x28
90005af8:	2004      	movs	r0, #4
90005afa:	9204      	str	r2, [sp, #16]
90005afc:	9300      	str	r3, [sp, #0]
90005afe:	9003      	str	r0, [sp, #12]
90005b00:	480d      	ldr	r0, [pc, #52]	@ (90005b38 <_Z23getFont_verdana_40_4bppv+0x68>)
90005b02:	e9cd 1409 	strd	r1, r4, [sp, #36]	@ 0x24
90005b06:	490d      	ldr	r1, [pc, #52]	@ (90005b3c <_Z23getFont_verdana_40_4bppv+0x6c>)
90005b08:	9108      	str	r1, [sp, #32]
90005b0a:	490d      	ldr	r1, [pc, #52]	@ (90005b40 <_Z23getFont_verdana_40_4bppv+0x70>)
90005b0c:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
90005b10:	9107      	str	r1, [sp, #28]
90005b12:	490c      	ldr	r1, [pc, #48]	@ (90005b44 <_Z23getFont_verdana_40_4bppv+0x74>)
90005b14:	e9cd 4405 	strd	r4, r4, [sp, #20]
90005b18:	e9cd 4401 	strd	r4, r4, [sp, #4]
90005b1c:	f7ff fbd2 	bl	900052c4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
90005b20:	4809      	ldr	r0, [pc, #36]	@ (90005b48 <_Z23getFont_verdana_40_4bppv+0x78>)
90005b22:	f01d f895 	bl	90022c50 <atexit>
90005b26:	4628      	mov	r0, r5
90005b28:	f01d f853 	bl	90022bd2 <__cxa_guard_release>
}
90005b2c:	4802      	ldr	r0, [pc, #8]	@ (90005b38 <_Z23getFont_verdana_40_4bppv+0x68>)
90005b2e:	b00f      	add	sp, #60	@ 0x3c
90005b30:	bd30      	pop	{r4, r5, pc}
90005b32:	bf00      	nop
90005b34:	2400b268 	.word	0x2400b268
90005b38:	2400b26c 	.word	0x2400b26c
90005b3c:	900270a0 	.word	0x900270a0
90005b40:	900270ac 	.word	0x900270ac
90005b44:	90202188 	.word	0x90202188
90005b48:	90005acd 	.word	0x90005acd

90005b4c <_ZNK8touchgfx4Font12getGSUBTableEv>:
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
    {
        return 0;
    }
90005b4c:	2000      	movs	r0, #0
90005b4e:	4770      	bx	lr

90005b50 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return 0;
    }
90005b50:	2000      	movs	r0, #0
90005b52:	4770      	bx	lr

90005b54 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
90005b54:	b40e      	push	{r1, r2, r3}
90005b56:	b500      	push	{lr}
90005b58:	b082      	sub	sp, #8
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
90005b5a:	2100      	movs	r1, #0
{
90005b5c:	ab03      	add	r3, sp, #12
90005b5e:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(pArg, text);
90005b62:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
90005b64:	f00e ff54 	bl	90014a10 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
90005b68:	b002      	add	sp, #8
90005b6a:	f85d eb04 	ldr.w	lr, [sp], #4
90005b6e:	b003      	add	sp, #12
90005b70:	4770      	bx	lr
90005b72:	bf00      	nop

90005b74 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
90005b74:	b40c      	push	{r2, r3}
90005b76:	b500      	push	{lr}
90005b78:	b083      	sub	sp, #12
90005b7a:	ab04      	add	r3, sp, #16
90005b7c:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
90005b80:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
90005b82:	f00e ff45 	bl	90014a10 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
90005b86:	b003      	add	sp, #12
90005b88:	f85d eb04 	ldr.w	lr, [sp], #4
90005b8c:	b002      	add	sp, #8
90005b8e:	4770      	bx	lr

90005b90 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
    if (fontGsubTable && nextCharacters.peekChar())
90005b90:	6c43      	ldr	r3, [r0, #68]	@ 0x44
{
90005b92:	b510      	push	{r4, lr}
90005b94:	4604      	mov	r4, r0
    if (fontGsubTable && nextCharacters.peekChar())
90005b96:	b133      	cbz	r3, 90005ba6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x16>
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
90005b98:	8f03      	ldrh	r3, [r0, #56]	@ 0x38
90005b9a:	b39b      	cbz	r3, 90005c04 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x74>
            return buffer[pos];
90005b9c:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
90005b9e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
90005ba2:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
90005ba4:	b923      	cbnz	r3, 90005bb0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x20>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
90005ba6:	4620      	mov	r0, r4
}
90005ba8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return getNextChar();
90005bac:	f010 b904 	b.w	90015db8 <_ZN8touchgfx12TextProvider11getNextCharEv>
        substituteGlyphs();
90005bb0:	f010 fa00 	bl	90015fb4 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
90005bb4:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
90005bb6:	2b01      	cmp	r3, #1
90005bb8:	d92a      	bls.n	90005c10 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x80>
            const uint16_t index = pos + offset;
90005bba:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
90005bbc:	1c53      	adds	r3, r2, #1
90005bbe:	b29b      	uxth	r3, r3
            return buffer[index < size ? index : index - size];
90005bc0:	2b09      	cmp	r3, #9
90005bc2:	d812      	bhi.n	90005bea <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x5a>
90005bc4:	eb04 0143 	add.w	r1, r4, r3, lsl #1
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
90005bc8:	f640 103f 	movw	r0, #2367	@ 0x93f
90005bcc:	8c49      	ldrh	r1, [r1, #34]	@ 0x22
90005bce:	4281      	cmp	r1, r0
90005bd0:	d1e9      	bne.n	90005ba6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x16>
            return buffer[pos];
90005bd2:	eb04 0142 	add.w	r1, r4, r2, lsl #1
90005bd6:	0052      	lsls	r2, r2, #1
90005bd8:	8c48      	ldrh	r0, [r1, #34]	@ 0x22

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
            const uint16_t index = pos + 1;
            buffer[index < size ? index : 0] = newChar;
90005bda:	eb04 0343 	add.w	r3, r4, r3, lsl #1
            buffer[pos] = newChar;
90005bde:	4422      	add	r2, r4
90005be0:	f640 113f 	movw	r1, #2367	@ 0x93f
            buffer[index < size ? index : 0] = newChar;
90005be4:	8458      	strh	r0, [r3, #34]	@ 0x22
            buffer[pos] = newChar;
90005be6:	8451      	strh	r1, [r2, #34]	@ 0x22
        }
90005be8:	e7dd      	b.n	90005ba6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x16>
            return buffer[index < size ? index : index - size];
90005bea:	eb04 0343 	add.w	r3, r4, r3, lsl #1
90005bee:	f640 113f 	movw	r1, #2367	@ 0x93f
90005bf2:	89db      	ldrh	r3, [r3, #14]
90005bf4:	428b      	cmp	r3, r1
90005bf6:	d1d6      	bne.n	90005ba6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x16>
            return buffer[pos];
90005bf8:	eb04 0142 	add.w	r1, r4, r2, lsl #1
90005bfc:	2300      	movs	r3, #0
90005bfe:	0052      	lsls	r2, r2, #1
90005c00:	8c48      	ldrh	r0, [r1, #34]	@ 0x22
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
90005c02:	e7ea      	b.n	90005bda <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x4a>
            assert(used > 0);
90005c04:	4b05      	ldr	r3, [pc, #20]	@ (90005c1c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x8c>)
90005c06:	21c5      	movs	r1, #197	@ 0xc5
90005c08:	4a05      	ldr	r2, [pc, #20]	@ (90005c20 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x90>)
90005c0a:	4806      	ldr	r0, [pc, #24]	@ (90005c24 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x94>)
90005c0c:	f01d f802 	bl	90022c14 <__assert_func>
            assert(offset < used);
90005c10:	4b05      	ldr	r3, [pc, #20]	@ (90005c28 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x98>)
90005c12:	21cb      	movs	r1, #203	@ 0xcb
90005c14:	4a05      	ldr	r2, [pc, #20]	@ (90005c2c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x9c>)
90005c16:	4803      	ldr	r0, [pc, #12]	@ (90005c24 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x94>)
90005c18:	f01c fffc 	bl	90022c14 <__assert_func>
90005c1c:	90025ff0 	.word	0x90025ff0
90005c20:	90025ffc 	.word	0x90025ffc
90005c24:	900260a8 	.word	0x900260a8
90005c28:	900260f4 	.word	0x900260f4
90005c2c:	90026104 	.word	0x90026104

90005c30 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
    fillInputBuffer();
90005c30:	f010 b88b 	b.w	90015d4a <_ZN8touchgfx12TextProvider15fillInputBufferEv>

90005c34 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:
}

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
90005c34:	b510      	push	{r4, lr}
90005c36:	b086      	sub	sp, #24
90005c38:	f10d 0c08 	add.w	ip, sp, #8
    va_list pArg;
    va_start(pArg, format);
90005c3c:	ac0a      	add	r4, sp, #40	@ 0x28
{
90005c3e:	e88c 0006 	stmia.w	ip, {r1, r2}
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
90005c42:	461a      	mov	r2, r3
90005c44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
90005c46:	4661      	mov	r1, ip
90005c48:	9401      	str	r4, [sp, #4]
90005c4a:	9300      	str	r3, [sp, #0]
90005c4c:	9b08      	ldr	r3, [sp, #32]
    va_start(pArg, format);
90005c4e:	9405      	str	r4, [sp, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
90005c50:	f00d fb64 	bl	9001331c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
90005c54:	b006      	add	sp, #24
90005c56:	bd10      	pop	{r4, pc}

90005c58 <_ZN8touchgfx5Texts11setLanguageEt>:
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
90005c58:	b9e0      	cbnz	r0, 90005c94 <_ZN8touchgfx5Texts11setLanguageEt+0x3c>
{
90005c5a:	b538      	push	{r3, r4, r5, lr}
    {
        if (languagesArray[id] != 0)
90005c5c:	4b13      	ldr	r3, [pc, #76]	@ (90005cac <_ZN8touchgfx5Texts11setLanguageEt+0x54>)
90005c5e:	681b      	ldr	r3, [r3, #0]
90005c60:	b1cb      	cbz	r3, 90005c96 <_ZN8touchgfx5Texts11setLanguageEt+0x3e>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
90005c62:	4c13      	ldr	r4, [pc, #76]	@ (90005cb0 <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
90005c64:	4813      	ldr	r0, [pc, #76]	@ (90005cb4 <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
90005c66:	e9d3 1200 	ldrd	r1, r2, [r3]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
90005c6a:	4419      	add	r1, r3
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
90005c6c:	441a      	add	r2, r3
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
90005c6e:	6021      	str	r1, [r4, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
90005c70:	6899      	ldr	r1, [r3, #8]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
90005c72:	6002      	str	r2, [r0, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
90005c74:	185c      	adds	r4, r3, r1
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
90005c76:	4b10      	ldr	r3, [pc, #64]	@ (90005cb8 <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
90005c78:	2200      	movs	r2, #0
90005c7a:	801a      	strh	r2, [r3, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
90005c7c:	f000 f83a 	bl	90005cf4 <_ZN17TypedTextDatabase8getFontsEv>
90005c80:	4605      	mov	r5, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
90005c82:	f000 f835 	bl	90005cf0 <_ZN17TypedTextDatabase15getInstanceSizeEv>
        typedTexts = data;
90005c86:	4b0d      	ldr	r3, [pc, #52]	@ (90005cbc <_ZN8touchgfx5Texts11setLanguageEt+0x64>)
        fonts = f;
90005c88:	4a0d      	ldr	r2, [pc, #52]	@ (90005cc0 <_ZN8touchgfx5Texts11setLanguageEt+0x68>)
        typedTexts = data;
90005c8a:	601c      	str	r4, [r3, #0]
        numberOfTypedTexts = n;
90005c8c:	4b0d      	ldr	r3, [pc, #52]	@ (90005cc4 <_ZN8touchgfx5Texts11setLanguageEt+0x6c>)
        fonts = f;
90005c8e:	6015      	str	r5, [r2, #0]
        numberOfTypedTexts = n;
90005c90:	8018      	strh	r0, [r3, #0]
    }
}
90005c92:	bd38      	pop	{r3, r4, r5, pc}
90005c94:	4770      	bx	lr
            currentLanguageTypedText = typedTextDatabaseArray[id];
90005c96:	4c0c      	ldr	r4, [pc, #48]	@ (90005cc8 <_ZN8touchgfx5Texts11setLanguageEt+0x70>)
            currentLanguagePtr = texts_all_languages;
90005c98:	4905      	ldr	r1, [pc, #20]	@ (90005cb0 <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
            currentLanguageTypedText = typedTextDatabaseArray[id];
90005c9a:	6824      	ldr	r4, [r4, #0]
            currentLanguagePtr = texts_all_languages;
90005c9c:	480b      	ldr	r0, [pc, #44]	@ (90005ccc <_ZN8touchgfx5Texts11setLanguageEt+0x74>)
            currentLanguageIndices = staticLanguageIndices[id];
90005c9e:	4b05      	ldr	r3, [pc, #20]	@ (90005cb4 <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
90005ca0:	4a0b      	ldr	r2, [pc, #44]	@ (90005cd0 <_ZN8touchgfx5Texts11setLanguageEt+0x78>)
            currentLanguagePtr = texts_all_languages;
90005ca2:	6008      	str	r0, [r1, #0]
            currentLanguageIndices = staticLanguageIndices[id];
90005ca4:	601a      	str	r2, [r3, #0]
    if (currentLanguageTypedText)
90005ca6:	2c00      	cmp	r4, #0
90005ca8:	d1e5      	bne.n	90005c76 <_ZN8touchgfx5Texts11setLanguageEt+0x1e>
}
90005caa:	bd38      	pop	{r3, r4, r5, pc}
90005cac:	2400b2a4 	.word	0x2400b2a4
90005cb0:	2400b29c 	.word	0x2400b29c
90005cb4:	2400b298 	.word	0x2400b298
90005cb8:	2400b2a0 	.word	0x2400b2a0
90005cbc:	2402635c 	.word	0x2402635c
90005cc0:	24026364 	.word	0x24026364
90005cc4:	24026360 	.word	0x24026360
90005cc8:	902021f0 	.word	0x902021f0
90005ccc:	902021b0 	.word	0x902021b0
90005cd0:	90202198 	.word	0x90202198

90005cd4 <_ZNK8touchgfx5Texts7getTextEt>:
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
    return &currentLanguagePtr[currentLanguageIndices[id]];
90005cd4:	4a04      	ldr	r2, [pc, #16]	@ (90005ce8 <_ZNK8touchgfx5Texts7getTextEt+0x14>)
90005cd6:	4b05      	ldr	r3, [pc, #20]	@ (90005cec <_ZNK8touchgfx5Texts7getTextEt+0x18>)
90005cd8:	6812      	ldr	r2, [r2, #0]
90005cda:	681b      	ldr	r3, [r3, #0]
90005cdc:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
}
90005ce0:	eb03 0040 	add.w	r0, r3, r0, lsl #1
90005ce4:	4770      	bx	lr
90005ce6:	bf00      	nop
90005ce8:	2400b298 	.word	0x2400b298
90005cec:	2400b29c 	.word	0x2400b29c

90005cf0 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
}

uint16_t getInstanceSize()
{
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
}
90005cf0:	2006      	movs	r0, #6
90005cf2:	4770      	bx	lr

90005cf4 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
    return touchgfx_fonts;
}
90005cf4:	4800      	ldr	r0, [pc, #0]	@ (90005cf8 <_ZN17TypedTextDatabase8getFontsEv+0x4>)
90005cf6:	4770      	bx	lr
90005cf8:	2400b2a8 	.word	0x2400b2a8

90005cfc <_GLOBAL__sub_I_touchgfx_fonts>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
90005cfc:	b510      	push	{r4, lr}
};
90005cfe:	4c05      	ldr	r4, [pc, #20]	@ (90005d14 <_GLOBAL__sub_I_touchgfx_fonts+0x18>)
    &(getFont_verdana_20_4bpp()),
90005d00:	f7ff fea4 	bl	90005a4c <_Z23getFont_verdana_20_4bppv>
};
90005d04:	6020      	str	r0, [r4, #0]
    &(getFont_verdana_40_4bpp()),
90005d06:	f7ff fee3 	bl	90005ad0 <_Z23getFont_verdana_40_4bppv>
};
90005d0a:	6060      	str	r0, [r4, #4]
    &(getFont_verdana_10_4bpp())
90005d0c:	f7ff fe5e 	bl	900059cc <_Z23getFont_verdana_10_4bppv>
};
90005d10:	60a0      	str	r0, [r4, #8]
} // namespace TypedTextDatabase
90005d12:	bd10      	pop	{r4, pc}
90005d14:	2400b2a8 	.word	0x2400b2a8

90005d18 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
90005d18:	4770      	bx	lr
90005d1a:	bf00      	nop

90005d1c <_ZN19FrontendApplicationD0Ev>:
90005d1c:	b510      	push	{r4, lr}
90005d1e:	4604      	mov	r4, r0
90005d20:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
90005d24:	f01c ff47 	bl	90022bb6 <_ZdlPvj>
90005d28:	4620      	mov	r0, r4
90005d2a:	bd10      	pop	{r4, pc}

90005d2c <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
90005d2c:	b510      	push	{r4, lr}
90005d2e:	4604      	mov	r4, r0
    {
        model.tick();
90005d30:	f8d0 0158 	ldr.w	r0, [r0, #344]	@ 0x158
90005d34:	f000 f822 	bl	90005d7c <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
90005d38:	4620      	mov	r0, r4
    }
90005d3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        FrontendApplicationBase::handleTickEvent();
90005d3e:	f00d bfcf 	b.w	90013ce0 <_ZN8touchgfx11Application15handleTickEventEv>
90005d42:	bf00      	nop

90005d44 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
90005d44:	b510      	push	{r4, lr}
90005d46:	4604      	mov	r4, r0
    : FrontendApplicationBase(m, heap)
90005d48:	f7ff fa32 	bl	900051b0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
90005d4c:	4b01      	ldr	r3, [pc, #4]	@ (90005d54 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x10>)
{

}
90005d4e:	4620      	mov	r0, r4
    : FrontendApplicationBase(m, heap)
90005d50:	6023      	str	r3, [r4, #0]
}
90005d52:	bd10      	pop	{r4, pc}
90005d54:	900261e0 	.word	0x900261e0

90005d58 <_ZN13ModelListener14updateTempDataEP17DHT22_DataTypedef>:
    }

    virtual void updateTempData(DHT22_DataTypedef* DHT22_Data) {}
90005d58:	4770      	bx	lr
90005d5a:	bf00      	nop

90005d5c <_ZN5ModelC1Ev>:
extern "C" {
	osMessageQueueId_t mid_MODELMsgQueue;                // message queue
}
DHT22_DataTypedef modelDHT22_Data;

Model::Model() : modelListener(0)
90005d5c:	b510      	push	{r4, lr}
90005d5e:	2200      	movs	r2, #0
90005d60:	4604      	mov	r4, r0
{
	// create a message queue:
	mid_MODELMsgQueue = osMessageQueueNew(5, sizeof(DHT22_DataTypedef), NULL);
90005d62:	2108      	movs	r1, #8
90005d64:	2005      	movs	r0, #5
Model::Model() : modelListener(0)
90005d66:	6022      	str	r2, [r4, #0]
	mid_MODELMsgQueue = osMessageQueueNew(5, sizeof(DHT22_DataTypedef), NULL);
90005d68:	f006 fd5c 	bl	9000c824 <osMessageQueueNew>
90005d6c:	4b02      	ldr	r3, [pc, #8]	@ (90005d78 <_ZN5ModelC1Ev+0x1c>)
90005d6e:	4602      	mov	r2, r0
	if (mid_MODELMsgQueue == NULL) {
		// Message Queue object not created, handle failure
	}
}
90005d70:	4620      	mov	r0, r4
	mid_MODELMsgQueue = osMessageQueueNew(5, sizeof(DHT22_DataTypedef), NULL);
90005d72:	601a      	str	r2, [r3, #0]
}
90005d74:	bd10      	pop	{r4, pc}
90005d76:	bf00      	nop
90005d78:	2400b2bc 	.word	0x2400b2bc

90005d7c <_ZN5Model4tickEv>:

void Model::tick()
{
90005d7c:	b510      	push	{r4, lr}
	// check if a new message has arrived - do not wait for it, just check :
	if (osMessageQueueGet(mid_MODELMsgQueue, &modelDHT22_Data, NULL, 0U) == osOK)   // check for message
90005d7e:	2300      	movs	r3, #0
90005d80:	4c09      	ldr	r4, [pc, #36]	@ (90005da8 <_ZN5Model4tickEv+0x2c>)
{
90005d82:	4684      	mov	ip, r0
	if (osMessageQueueGet(mid_MODELMsgQueue, &modelDHT22_Data, NULL, 0U) == osOK)   // check for message
90005d84:	4909      	ldr	r1, [pc, #36]	@ (90005dac <_ZN5Model4tickEv+0x30>)
90005d86:	6820      	ldr	r0, [r4, #0]
90005d88:	461a      	mov	r2, r3
{
90005d8a:	4664      	mov	r4, ip
	if (osMessageQueueGet(mid_MODELMsgQueue, &modelDHT22_Data, NULL, 0U) == osOK)   // check for message
90005d8c:	f006 fdc2 	bl	9000c914 <osMessageQueueGet>
90005d90:	b928      	cbnz	r0, 90005d9e <_ZN5Model4tickEv+0x22>
	{
		// forward data to listener (first to presenter then view)
		modelListener->updateTempData(&modelDHT22_Data);
90005d92:	6820      	ldr	r0, [r4, #0]
90005d94:	4a06      	ldr	r2, [pc, #24]	@ (90005db0 <_ZN5Model4tickEv+0x34>)
90005d96:	6803      	ldr	r3, [r0, #0]
90005d98:	689b      	ldr	r3, [r3, #8]
90005d9a:	4293      	cmp	r3, r2
90005d9c:	d100      	bne.n	90005da0 <_ZN5Model4tickEv+0x24>
	}
}
90005d9e:	bd10      	pop	{r4, pc}
		modelListener->updateTempData(&modelDHT22_Data);
90005da0:	4902      	ldr	r1, [pc, #8]	@ (90005dac <_ZN5Model4tickEv+0x30>)
}
90005da2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		modelListener->updateTempData(&modelDHT22_Data);
90005da6:	4718      	bx	r3
90005da8:	2400b2bc 	.word	0x2400b2bc
90005dac:	2400b2b4 	.word	0x2400b2b4
90005db0:	90005d59 	.word	0x90005d59

90005db4 <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {};
90005db4:	4770      	bx	lr
90005db6:	bf00      	nop

90005db8 <_ZThn4_N16Screen1PresenterD1Ev>:
90005db8:	3804      	subs	r0, #4
90005dba:	4770      	bx	lr

90005dbc <_ZN16Screen1Presenter10deactivateEv>:
}

void Screen1Presenter::activate()
{

}
90005dbc:	4770      	bx	lr
90005dbe:	bf00      	nop

90005dc0 <_ZN16Screen1Presenter14updateTempDataEP17DHT22_DataTypedef>:

}

void Screen1Presenter::updateTempData(DHT22_DataTypedef* DHT22_Data)
{
	view.updateTempData(DHT22_Data);
90005dc0:	68c0      	ldr	r0, [r0, #12]
90005dc2:	6803      	ldr	r3, [r0, #0]
90005dc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90005dc6:	4718      	bx	r3

90005dc8 <_ZN16Screen1PresenterD0Ev>:
90005dc8:	b510      	push	{r4, lr}
90005dca:	4604      	mov	r4, r0
90005dcc:	2110      	movs	r1, #16
90005dce:	f01c fef2 	bl	90022bb6 <_ZdlPvj>
90005dd2:	4620      	mov	r0, r4
90005dd4:	bd10      	pop	{r4, pc}
90005dd6:	bf00      	nop

90005dd8 <_ZThn4_N16Screen1PresenterD0Ev>:
90005dd8:	b510      	push	{r4, lr}
90005dda:	1f04      	subs	r4, r0, #4
90005ddc:	2110      	movs	r1, #16
90005dde:	4620      	mov	r0, r4
90005de0:	f01c fee9 	bl	90022bb6 <_ZdlPvj>
90005de4:	4620      	mov	r0, r4
90005de6:	bd10      	pop	{r4, pc}

90005de8 <_ZThn4_N16Screen1Presenter14updateTempDataEP17DHT22_DataTypedef>:
    virtual void updateTempData(DHT22_DataTypedef* DHT22_Data);
90005de8:	6880      	ldr	r0, [r0, #8]
90005dea:	6803      	ldr	r3, [r0, #0]
90005dec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90005dee:	4718      	bx	r3

90005df0 <_ZN16Screen1PresenterC1ER11Screen1View>:
    : view(v)
90005df0:	4a05      	ldr	r2, [pc, #20]	@ (90005e08 <_ZN16Screen1PresenterC1ER11Screen1View+0x18>)
90005df2:	60c1      	str	r1, [r0, #12]
90005df4:	6002      	str	r2, [r0, #0]
Screen1Presenter::Screen1Presenter(Screen1View& v)
90005df6:	b410      	push	{r4}
    ModelListener() : model(0) {}
90005df8:	2400      	movs	r4, #0
90005dfa:	6084      	str	r4, [r0, #8]
    : view(v)
90005dfc:	f102 041c 	add.w	r4, r2, #28
90005e00:	6044      	str	r4, [r0, #4]
}
90005e02:	f85d 4b04 	ldr.w	r4, [sp], #4
90005e06:	4770      	bx	lr
90005e08:	9002622c 	.word	0x9002622c

90005e0c <_ZN11Screen1View14tearDownScreenEv>:
}

void Screen1View::tearDownScreen()
{
    Screen1ViewBase::tearDownScreen();
}
90005e0c:	4770      	bx	lr
90005e0e:	bf00      	nop

90005e10 <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
90005e10:	4b03      	ldr	r3, [pc, #12]	@ (90005e20 <_ZN11Screen1ViewD1Ev+0x10>)
90005e12:	b510      	push	{r4, lr}
90005e14:	4604      	mov	r4, r0
90005e16:	6003      	str	r3, [r0, #0]
90005e18:	f7ff fad0 	bl	900053bc <_ZN15Screen1ViewBaseD1Ev>
90005e1c:	4620      	mov	r0, r4
90005e1e:	bd10      	pop	{r4, pc}
90005e20:	90026264 	.word	0x90026264

90005e24 <_ZN11Screen1ViewD0Ev>:
90005e24:	4b06      	ldr	r3, [pc, #24]	@ (90005e40 <_ZN11Screen1ViewD0Ev+0x1c>)
90005e26:	b510      	push	{r4, lr}
90005e28:	4604      	mov	r4, r0
90005e2a:	6003      	str	r3, [r0, #0]
90005e2c:	f7ff fac6 	bl	900053bc <_ZN15Screen1ViewBaseD1Ev>
90005e30:	f44f 71f4 	mov.w	r1, #488	@ 0x1e8
90005e34:	4620      	mov	r0, r4
90005e36:	f01c febe 	bl	90022bb6 <_ZdlPvj>
90005e3a:	4620      	mov	r0, r4
90005e3c:	bd10      	pop	{r4, pc}
90005e3e:	bf00      	nop
90005e40:	90026264 	.word	0x90026264

90005e44 <_ZN11Screen1ViewC1Ev>:
Screen1View::Screen1View()
90005e44:	b510      	push	{r4, lr}
90005e46:	4604      	mov	r4, r0
90005e48:	f7ff fb78 	bl	9000553c <_ZN15Screen1ViewBaseC1Ev>
90005e4c:	4b01      	ldr	r3, [pc, #4]	@ (90005e54 <_ZN11Screen1ViewC1Ev+0x10>)
}
90005e4e:	4620      	mov	r0, r4
Screen1View::Screen1View()
90005e50:	6023      	str	r3, [r4, #0]
}
90005e52:	bd10      	pop	{r4, pc}
90005e54:	90026264 	.word	0x90026264

90005e58 <_ZN11Screen1View11setupScreenEv>:
    Screen1ViewBase::setupScreen();
90005e58:	f7ff bab2 	b.w	900053c0 <_ZN15Screen1ViewBase11setupScreenEv>

90005e5c <_ZN11Screen1View14updateTempDataEP17DHT22_DataTypedef>:

void Screen1View::updateTempData(DHT22_DataTypedef* DHT22_Data)
{
90005e5c:	b570      	push	{r4, r5, r6, lr}
90005e5e:	680a      	ldr	r2, [r1, #0]
90005e60:	b082      	sub	sp, #8
     *
     * @see snprintf, snprintfFloats
     */
    static UnicodeChar* snprintfFloat(UnicodeChar* dst, uint16_t dstSize, const char* format, const float value)
    {
        return snprintfFloats(dst, dstSize, format, &value);
90005e62:	4e0f      	ldr	r6, [pc, #60]	@ (90005ea0 <_ZN11Screen1View14updateTempDataEP17DHT22_DataTypedef+0x44>)
90005e64:	460d      	mov	r5, r1
90005e66:	4604      	mov	r4, r0
90005e68:	ab01      	add	r3, sp, #4
90005e6a:	9201      	str	r2, [sp, #4]
90005e6c:	210a      	movs	r1, #10
90005e6e:	4632      	mov	r2, r6
90005e70:	f500 70e0 	add.w	r0, r0, #448	@ 0x1c0
90005e74:	f011 f808 	bl	90016e88 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf>
	Unicode::snprintfFloat(textArea3Buffer, TEXTAREA3_SIZE, "%2.1f", DHT22_Data->Temperature);
	Unicode::snprintfFloat(textArea4Buffer, TEXTAREA4_SIZE, "%2.1f", DHT22_Data->Humidity);
90005e78:	6868      	ldr	r0, [r5, #4]
90005e7a:	ab01      	add	r3, sp, #4
90005e7c:	4632      	mov	r2, r6
90005e7e:	210a      	movs	r1, #10
90005e80:	9001      	str	r0, [sp, #4]
90005e82:	f504 70ea 	add.w	r0, r4, #468	@ 0x1d4
90005e86:	f010 ffff 	bl	90016e88 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf>
	textArea3.invalidate();
90005e8a:	f104 0098 	add.w	r0, r4, #152	@ 0x98
90005e8e:	f00e feea 	bl	90014c66 <_ZNK8touchgfx8Drawable10invalidateEv>
	textArea4.invalidate();
90005e92:	f104 00e4 	add.w	r0, r4, #228	@ 0xe4
}
90005e96:	b002      	add	sp, #8
90005e98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	textArea4.invalidate();
90005e9c:	f00e bee3 	b.w	90014c66 <_ZNK8touchgfx8Drawable10invalidateEv>
90005ea0:	90026254 	.word	0x90026254

90005ea4 <FT5336_GetCapabilities>:
{
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
90005ea4:	f240 1c01 	movw	ip, #257	@ 0x101
  Capabilities->Gesture    = 1;
  Capabilities->MaxTouch   = FT5336_MAX_NB_TOUCH;
90005ea8:	2005      	movs	r0, #5
  Capabilities->MaxXl      = FT5336_MAX_X_LENGTH;
90005eaa:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
  Capabilities->MaxYl      = FT5336_MAX_Y_LENGTH;
90005eae:	f44f 7388 	mov.w	r3, #272	@ 0x110
  Capabilities->MaxTouch   = FT5336_MAX_NB_TOUCH;
90005eb2:	7088      	strb	r0, [r1, #2]

  return FT5336_OK;
}
90005eb4:	2000      	movs	r0, #0
  Capabilities->MultiTouch = 1;
90005eb6:	f8a1 c000 	strh.w	ip, [r1]
  Capabilities->MaxYl      = FT5336_MAX_Y_LENGTH;
90005eba:	e9c1 2301 	strd	r2, r3, [r1, #4]
}
90005ebe:	4770      	bx	lr

90005ec0 <FT5336_DeInit>:
  */
int32_t FT5336_DeInit(FT5336_Object_t *pObj)
{
  int32_t ret = FT5336_OK;

  if(pObj->IsInitialized == 1U)
90005ec0:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
90005ec4:	2b01      	cmp	r3, #1
90005ec6:	d102      	bne.n	90005ece <FT5336_DeInit+0xe>
  {
    pObj->IsInitialized = 0;
90005ec8:	2300      	movs	r3, #0
90005eca:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
  }

  return ret;
}
90005ece:	2000      	movs	r0, #0
90005ed0:	4770      	bx	lr
90005ed2:	bf00      	nop

90005ed4 <FT5336_ITStatus>:
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
}
90005ed4:	2000      	movs	r0, #0
90005ed6:	4770      	bx	lr

90005ed8 <ReadRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
90005ed8:	b410      	push	{r4}
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
90005eda:	6904      	ldr	r4, [r0, #16]
90005edc:	8900      	ldrh	r0, [r0, #8]
90005ede:	46a4      	mov	ip, r4
}
90005ee0:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
90005ee4:	4760      	bx	ip
90005ee6:	bf00      	nop

90005ee8 <WriteRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
90005ee8:	b410      	push	{r4}
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
90005eea:	68c4      	ldr	r4, [r0, #12]
90005eec:	8900      	ldrh	r0, [r0, #8]
90005eee:	46a4      	mov	ip, r4
}
90005ef0:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
90005ef4:	4760      	bx	ip
90005ef6:	bf00      	nop

90005ef8 <FT5336_GestureConfig>:
{
90005ef8:	b570      	push	{r4, r5, r6, lr}
  ret = ft5336_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
90005efa:	f100 0518 	add.w	r5, r0, #24
{
90005efe:	460e      	mov	r6, r1
  ret = ft5336_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
90005f00:	7809      	ldrb	r1, [r1, #0]
90005f02:	4628      	mov	r0, r5
90005f04:	f000 f96c 	bl	900061e0 <ft5336_radian_value>
90005f08:	4604      	mov	r4, r0
  ret += ft5336_offset_left_right(&pObj->Ctx, (uint8_t)GestureInit->OffsetLeftRight);
90005f0a:	7931      	ldrb	r1, [r6, #4]
90005f0c:	4628      	mov	r0, r5
90005f0e:	f000 f975 	bl	900061fc <ft5336_offset_left_right>
90005f12:	4404      	add	r4, r0
  ret += ft5336_offset_up_down(&pObj->Ctx, (uint8_t)GestureInit->OffsetUpDown);
90005f14:	7a31      	ldrb	r1, [r6, #8]
90005f16:	4628      	mov	r0, r5
90005f18:	f000 f97e 	bl	90006218 <ft5336_offset_up_down>
90005f1c:	4404      	add	r4, r0
  ret += ft5336_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
90005f1e:	7b31      	ldrb	r1, [r6, #12]
90005f20:	4628      	mov	r0, r5
90005f22:	f000 f987 	bl	90006234 <ft5336_disatnce_left_right>
  ret += ft5336_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
90005f26:	7c31      	ldrb	r1, [r6, #16]
  ret += ft5336_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
90005f28:	4404      	add	r4, r0
  ret += ft5336_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
90005f2a:	4628      	mov	r0, r5
90005f2c:	f000 f990 	bl	90006250 <ft5336_distance_up_down>
90005f30:	4603      	mov	r3, r0
  ret += ft5336_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
90005f32:	7d31      	ldrb	r1, [r6, #20]
90005f34:	4628      	mov	r0, r5
  ret += ft5336_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
90005f36:	441c      	add	r4, r3
  ret += ft5336_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
90005f38:	f000 f998 	bl	9000626c <ft5336_distance_zoom>
  if(ret != FT5336_OK)
90005f3c:	42c4      	cmn	r4, r0
}
90005f3e:	bf14      	ite	ne
90005f40:	f04f 30ff 	movne.w	r0, #4294967295
90005f44:	2000      	moveq	r0, #0
90005f46:	bd70      	pop	{r4, r5, r6, pc}

90005f48 <FT5336_ReadID>:
  return ft5336_chip_id(&pObj->Ctx, (uint8_t *)Id);
90005f48:	3018      	adds	r0, #24
90005f4a:	f000 b9ab 	b.w	900062a4 <ft5336_chip_id>
90005f4e:	bf00      	nop

90005f50 <FT5336_GetState>:
{
90005f50:	b530      	push	{r4, r5, lr}
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
90005f52:	f100 0518 	add.w	r5, r0, #24
{
90005f56:	b083      	sub	sp, #12
90005f58:	460c      	mov	r4, r1
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
90005f5a:	4628      	mov	r0, r5
90005f5c:	a901      	add	r1, sp, #4
90005f5e:	f000 f931 	bl	900061c4 <ft5336_td_status>
90005f62:	bb10      	cbnz	r0, 90005faa <FT5336_GetState+0x5a>
    if(nb_touch > FT5336_MAX_NB_TOUCH)
90005f64:	f89d 3004 	ldrb.w	r3, [sp, #4]
  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
90005f68:	2b05      	cmp	r3, #5
90005f6a:	bf94      	ite	ls
90005f6c:	4619      	movls	r1, r3
90005f6e:	2100      	movhi	r1, #0
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
90005f70:	2304      	movs	r3, #4
  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
90005f72:	6021      	str	r1, [r4, #0]
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
90005f74:	4628      	mov	r0, r5
90005f76:	2103      	movs	r1, #3
90005f78:	eb0d 0203 	add.w	r2, sp, r3
90005f7c:	f000 f910 	bl	900061a0 <ft5336_read_reg>
90005f80:	b9b0      	cbnz	r0, 90005fb0 <FT5336_GetState+0x60>
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
90005f82:	f89d 2004 	ldrb.w	r2, [sp, #4]
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
90005f86:	f89d 3006 	ldrb.w	r3, [sp, #6]
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
90005f8a:	0212      	lsls	r2, r2, #8
90005f8c:	f89d 1005 	ldrb.w	r1, [sp, #5]
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
90005f90:	021b      	lsls	r3, r3, #8
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
90005f92:	f402 6270 	and.w	r2, r2, #3840	@ 0xf00
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
90005f96:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
90005f9a:	430a      	orrs	r2, r1
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
90005f9c:	f89d 1007 	ldrb.w	r1, [sp, #7]
90005fa0:	430b      	orrs	r3, r1
90005fa2:	e9c4 2301 	strd	r2, r3, [r4, #4]
}
90005fa6:	b003      	add	sp, #12
90005fa8:	bd30      	pop	{r4, r5, pc}
90005faa:	f04f 31ff 	mov.w	r1, #4294967295
90005fae:	e7df      	b.n	90005f70 <FT5336_GetState+0x20>
    ret = FT5336_ERROR;
90005fb0:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
90005fb4:	e7f7      	b.n	90005fa6 <FT5336_GetState+0x56>
90005fb6:	bf00      	nop

90005fb8 <FT5336_GetMultiTouchState>:
{
90005fb8:	b570      	push	{r4, r5, r6, lr}
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
90005fba:	f100 0518 	add.w	r5, r0, #24
{
90005fbe:	b088      	sub	sp, #32
90005fc0:	460c      	mov	r4, r1
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
90005fc2:	4628      	mov	r0, r5
90005fc4:	4669      	mov	r1, sp
90005fc6:	f000 f8fd 	bl	900061c4 <ft5336_td_status>
90005fca:	2800      	cmp	r0, #0
90005fcc:	f040 809a 	bne.w	90006104 <FT5336_GetMultiTouchState+0x14c>
    if(nb_touch > FT5336_MAX_NB_TOUCH)
90005fd0:	f89d 3000 	ldrb.w	r3, [sp]
  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
90005fd4:	2b05      	cmp	r3, #5
90005fd6:	bf94      	ite	ls
90005fd8:	4619      	movls	r1, r3
90005fda:	2100      	movhi	r1, #0
90005fdc:	6021      	str	r1, [r4, #0]
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
90005fde:	231e      	movs	r3, #30
90005fe0:	466a      	mov	r2, sp
90005fe2:	4628      	mov	r0, r5
90005fe4:	2103      	movs	r1, #3
90005fe6:	f000 f8db 	bl	900061a0 <ft5336_read_reg>
90005fea:	2800      	cmp	r0, #0
90005fec:	f040 808d 	bne.w	9000610a <FT5336_GetMultiTouchState+0x152>
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90005ff0:	f89d 1000 	ldrb.w	r1, [sp]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90005ff4:	f89d 3002 	ldrb.w	r3, [sp, #2]
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90005ff8:	020a      	lsls	r2, r1, #8
90005ffa:	f89d 5001 	ldrb.w	r5, [sp, #1]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90005ffe:	021b      	lsls	r3, r3, #8
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90006000:	f89d c007 	ldrb.w	ip, [sp, #7]
90006004:	f402 6270 	and.w	r2, r2, #3840	@ 0xf00
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
90006008:	0989      	lsrs	r1, r1, #6
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
9000600a:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
9000600e:	f89d 6011 	ldrb.w	r6, [sp, #17]
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90006012:	432a      	orrs	r2, r5
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90006014:	f89d 5003 	ldrb.w	r5, [sp, #3]
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
90006018:	6421      	str	r1, [r4, #64]	@ 0x40
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
9000601a:	0936      	lsrs	r6, r6, #4
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
9000601c:	432b      	orrs	r3, r5
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
9000601e:	6062      	str	r2, [r4, #4]
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
90006020:	f89d 2004 	ldrb.w	r2, [sp, #4]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90006024:	61a3      	str	r3, [r4, #24]
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
90006026:	f89d 3005 	ldrb.w	r3, [sp, #5]
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
9000602a:	f89d 1006 	ldrb.w	r1, [sp, #6]
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
9000602e:	091b      	lsrs	r3, r3, #4
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
90006030:	62e2      	str	r2, [r4, #44]	@ 0x2c
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
90006032:	f89d 200b 	ldrb.w	r2, [sp, #11]
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90006036:	020d      	lsls	r5, r1, #8
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
90006038:	6563      	str	r3, [r4, #84]	@ 0x54
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
9000603a:	0989      	lsrs	r1, r1, #6
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
9000603c:	f89d 300c 	ldrb.w	r3, [sp, #12]
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
90006040:	0912      	lsrs	r2, r2, #4
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
90006042:	6461      	str	r1, [r4, #68]	@ 0x44
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90006044:	f405 6570 	and.w	r5, r5, #3840	@ 0xf00
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
90006048:	f89d 100a 	ldrb.w	r1, [sp, #10]
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
9000604c:	65a2      	str	r2, [r4, #88]	@ 0x58
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
9000604e:	021a      	lsls	r2, r3, #8
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
90006050:	6321      	str	r1, [r4, #48]	@ 0x30
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90006052:	ea45 050c 	orr.w	r5, r5, ip
90006056:	f402 6170 	and.w	r1, r2, #3840	@ 0xf00
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
9000605a:	f89d 2008 	ldrb.w	r2, [sp, #8]
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
9000605e:	099b      	lsrs	r3, r3, #6
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90006060:	60a5      	str	r5, [r4, #8]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90006062:	0212      	lsls	r2, r2, #8
90006064:	f89d 5009 	ldrb.w	r5, [sp, #9]
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
90006068:	64a3      	str	r3, [r4, #72]	@ 0x48
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
9000606a:	f402 6270 	and.w	r2, r2, #3840	@ 0xf00
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
9000606e:	f89d 3010 	ldrb.w	r3, [sp, #16]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90006072:	432a      	orrs	r2, r5
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
90006074:	6363      	str	r3, [r4, #52]	@ 0x34
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90006076:	f89d 300e 	ldrb.w	r3, [sp, #14]
9000607a:	61e2      	str	r2, [r4, #28]
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
9000607c:	f89d 200d 	ldrb.w	r2, [sp, #13]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90006080:	021b      	lsls	r3, r3, #8
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90006082:	430a      	orrs	r2, r1
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90006084:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90006088:	60e2      	str	r2, [r4, #12]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
9000608a:	f89d 200f 	ldrb.w	r2, [sp, #15]
9000608e:	4313      	orrs	r3, r2
90006090:	6223      	str	r3, [r4, #32]
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
90006092:	65e6      	str	r6, [r4, #92]	@ 0x5c
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90006094:	f89d 1012 	ldrb.w	r1, [sp, #18]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90006098:	f89d 3014 	ldrb.w	r3, [sp, #20]
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
9000609c:	020a      	lsls	r2, r1, #8
9000609e:	f89d 5013 	ldrb.w	r5, [sp, #19]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
900060a2:	021b      	lsls	r3, r3, #8
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
900060a4:	f402 6270 	and.w	r2, r2, #3840	@ 0xf00
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
900060a8:	0989      	lsrs	r1, r1, #6
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
900060aa:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
900060ae:	432a      	orrs	r2, r5
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
900060b0:	f89d 5015 	ldrb.w	r5, [sp, #21]
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
900060b4:	64e1      	str	r1, [r4, #76]	@ 0x4c
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
900060b6:	432b      	orrs	r3, r5
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
900060b8:	f89d 1018 	ldrb.w	r1, [sp, #24]
900060bc:	6122      	str	r2, [r4, #16]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
900060be:	6263      	str	r3, [r4, #36]	@ 0x24
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
900060c0:	020b      	lsls	r3, r1, #8
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
900060c2:	f89d 2016 	ldrb.w	r2, [sp, #22]
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
900060c6:	0989      	lsrs	r1, r1, #6
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
900060c8:	f89d 5017 	ldrb.w	r5, [sp, #23]
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
900060cc:	63a2      	str	r2, [r4, #56]	@ 0x38
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
900060ce:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
900060d2:	f89d 301d 	ldrb.w	r3, [sp, #29]
900060d6:	092d      	lsrs	r5, r5, #4
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
900060d8:	6521      	str	r1, [r4, #80]	@ 0x50
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
900060da:	091b      	lsrs	r3, r3, #4
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
900060dc:	f89d 101c 	ldrb.w	r1, [sp, #28]
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
900060e0:	6625      	str	r5, [r4, #96]	@ 0x60
900060e2:	6663      	str	r3, [r4, #100]	@ 0x64
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
900060e4:	f89d 301a 	ldrb.w	r3, [sp, #26]
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
900060e8:	63e1      	str	r1, [r4, #60]	@ 0x3c
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
900060ea:	021b      	lsls	r3, r3, #8
900060ec:	f89d 101b 	ldrb.w	r1, [sp, #27]
900060f0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
900060f4:	430b      	orrs	r3, r1
900060f6:	62a3      	str	r3, [r4, #40]	@ 0x28
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
900060f8:	f89d 3019 	ldrb.w	r3, [sp, #25]
900060fc:	4313      	orrs	r3, r2
900060fe:	6163      	str	r3, [r4, #20]
}
90006100:	b008      	add	sp, #32
90006102:	bd70      	pop	{r4, r5, r6, pc}
90006104:	f04f 31ff 	mov.w	r1, #4294967295
90006108:	e768      	b.n	90005fdc <FT5336_GetMultiTouchState+0x24>
    ret = FT5336_ERROR;
9000610a:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
9000610e:	e7f7      	b.n	90006100 <FT5336_GetMultiTouchState+0x148>

90006110 <FT5336_GetGesture>:
  return ft5336_gest_id(&pObj->Ctx, GestureId);
90006110:	3018      	adds	r0, #24
90006112:	f000 b84d 	b.w	900061b0 <ft5336_gest_id>
90006116:	bf00      	nop

90006118 <FT5336_EnableIT>:
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_TRIGGER);
90006118:	2101      	movs	r1, #1
9000611a:	3018      	adds	r0, #24
9000611c:	f000 b8b4 	b.w	90006288 <ft5336_g_mode>

90006120 <FT5336_DisableIT>:
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_POLLING);
90006120:	2100      	movs	r1, #0
90006122:	3018      	adds	r0, #24
90006124:	f000 b8b0 	b.w	90006288 <ft5336_g_mode>

90006128 <FT5336_Init>:
{
90006128:	b570      	push	{r4, r5, r6, lr}
  if(pObj->IsInitialized == 0U)
9000612a:	f890 5024 	ldrb.w	r5, [r0, #36]	@ 0x24
9000612e:	b98d      	cbnz	r5, 90006154 <FT5336_Init+0x2c>
    pObj->IO.Init();
90006130:	4606      	mov	r6, r0
90006132:	4604      	mov	r4, r0
90006134:	f856 3b18 	ldr.w	r3, [r6], #24
90006138:	4798      	blx	r3
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_POLLING);
9000613a:	4629      	mov	r1, r5
9000613c:	4630      	mov	r0, r6
9000613e:	f000 f8a3 	bl	90006288 <ft5336_g_mode>
  if(ret != FT5336_OK)
90006142:	3800      	subs	r0, #0
    pObj->IsInitialized = 1;
90006144:	f04f 0301 	mov.w	r3, #1
  if(ret != FT5336_OK)
90006148:	bf18      	it	ne
9000614a:	2001      	movne	r0, #1
    pObj->IsInitialized = 1;
9000614c:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
  if(ret != FT5336_OK)
90006150:	4240      	negs	r0, r0
}
90006152:	bd70      	pop	{r4, r5, r6, pc}
    ret += FT5336_DisableIT(pObj);
90006154:	2000      	movs	r0, #0
}
90006156:	bd70      	pop	{r4, r5, r6, pc}

90006158 <FT5336_ClearIT>:
int32_t FT5336_ClearIT(FT5336_Object_t *pObj)
90006158:	2000      	movs	r0, #0
9000615a:	4770      	bx	lr

9000615c <FT5336_RegisterBusIO>:
  if (pObj == NULL)
9000615c:	b1c0      	cbz	r0, 90006190 <FT5336_RegisterBusIO+0x34>
    pObj->IO.Address   = pIO->Address;
9000615e:	890a      	ldrh	r2, [r1, #8]
{
90006160:	b430      	push	{r4, r5}
    pObj->IO.DeInit    = pIO->DeInit;
90006162:	e9d1 3400 	ldrd	r3, r4, [r1]
    pObj->IO.Address   = pIO->Address;
90006166:	8102      	strh	r2, [r0, #8]
    pObj->IO.DeInit    = pIO->DeInit;
90006168:	e9c0 3400 	strd	r3, r4, [r0]
    pObj->IO.WriteReg  = pIO->WriteReg;
9000616c:	694a      	ldr	r2, [r1, #20]
9000616e:	e9d1 5403 	ldrd	r5, r4, [r1, #12]
    pObj->Ctx.ReadReg  = ReadRegWrap;
90006172:	4909      	ldr	r1, [pc, #36]	@ (90006198 <FT5336_RegisterBusIO+0x3c>)
    pObj->IO.WriteReg  = pIO->WriteReg;
90006174:	60c5      	str	r5, [r0, #12]
90006176:	e9c0 4204 	strd	r4, r2, [r0, #16]
    pObj->Ctx.WriteReg = WriteRegWrap;
9000617a:	4a08      	ldr	r2, [pc, #32]	@ (9000619c <FT5336_RegisterBusIO+0x40>)
    pObj->Ctx.handle   = pObj;
9000617c:	e9c0 1007 	strd	r1, r0, [r0, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
90006180:	6182      	str	r2, [r0, #24]
    if(pObj->IO.Init != NULL)
90006182:	b10b      	cbz	r3, 90006188 <FT5336_RegisterBusIO+0x2c>
}
90006184:	bc30      	pop	{r4, r5}
      ret = pObj->IO.Init();
90006186:	4718      	bx	r3
}
90006188:	f04f 30ff 	mov.w	r0, #4294967295
9000618c:	bc30      	pop	{r4, r5}
9000618e:	4770      	bx	lr
90006190:	f04f 30ff 	mov.w	r0, #4294967295
90006194:	4770      	bx	lr
90006196:	bf00      	nop
90006198:	90005ed9 	.word	0x90005ed9
9000619c:	90005ee9 	.word	0x90005ee9

900061a0 <ft5336_read_reg>:
  * @param  pdata pointer to data to be read
  * @param  length Length of data to read   
  * @retval Component status
  */
int32_t ft5336_read_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
900061a0:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
900061a2:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
900061a6:	46a4      	mov	ip, r4
}
900061a8:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
900061ac:	4760      	bx	ip
900061ae:	bf00      	nop

900061b0 <ft5336_gest_id>:
  * @param  ctx Component context 
  * @param  value pointer to the value of FT5336_GEST_ID_REG register
  * @retval Component status
  */
int32_t  ft5336_gest_id(ft5336_ctx_t *ctx, uint8_t *value)
{
900061b0:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
900061b2:	2301      	movs	r3, #1
{
900061b4:	460a      	mov	r2, r1
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
900061b6:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
900061ba:	4619      	mov	r1, r3
900061bc:	46a4      	mov	ip, r4
  return ft5336_read_reg(ctx, FT5336_GEST_ID_REG, (uint8_t *)value, 1);
}
900061be:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
900061c2:	4760      	bx	ip

900061c4 <ft5336_td_status>:
  * @param  ctx Component context 
  * @param  value pointer to the value of Touch Data Status register
  * @retval Component status
  */
int32_t  ft5336_td_status(ft5336_ctx_t *ctx, uint8_t *value)
{
900061c4:	b538      	push	{r3, r4, r5, lr}
900061c6:	460c      	mov	r4, r1
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
900061c8:	2301      	movs	r3, #1
900061ca:	2102      	movs	r1, #2
900061cc:	4622      	mov	r2, r4
900061ce:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
900061d2:	47a8      	blx	r5
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_TD_STAT_REG, (uint8_t *)value, 1);
  
  if(ret == 0)
900061d4:	b918      	cbnz	r0, 900061de <ft5336_td_status+0x1a>
  {
    *value &= FT5336_TD_STATUS_BIT_MASK; 
900061d6:	7823      	ldrb	r3, [r4, #0]
900061d8:	f003 030f 	and.w	r3, r3, #15
900061dc:	7023      	strb	r3, [r4, #0]
    *value = *value >> FT5336_TD_STATUS_BIT_POSITION; 
  }
  
  return ret;
}
900061de:	bd38      	pop	{r3, r4, r5, pc}

900061e0 <ft5336_radian_value>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_RADIAN_VALUE_REG register
  * @retval Component status
  */
int32_t  ft5336_radian_value(ft5336_ctx_t *ctx, uint8_t value)
{
900061e0:	b510      	push	{r4, lr}
900061e2:	460c      	mov	r4, r1
900061e4:	b082      	sub	sp, #8
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
900061e6:	2301      	movs	r3, #1
900061e8:	2191      	movs	r1, #145	@ 0x91
{
900061ea:	f88d 4007 	strb.w	r4, [sp, #7]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
900061ee:	f10d 0207 	add.w	r2, sp, #7
900061f2:	6804      	ldr	r4, [r0, #0]
900061f4:	6880      	ldr	r0, [r0, #8]
900061f6:	47a0      	blx	r4
  return ft5336_write_reg(ctx, FT5336_RADIAN_VALUE_REG, &value, 1);
}
900061f8:	b002      	add	sp, #8
900061fa:	bd10      	pop	{r4, pc}

900061fc <ft5336_offset_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
900061fc:	b510      	push	{r4, lr}
900061fe:	460c      	mov	r4, r1
90006200:	b082      	sub	sp, #8
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
90006202:	2301      	movs	r3, #1
90006204:	2192      	movs	r1, #146	@ 0x92
{
90006206:	f88d 4007 	strb.w	r4, [sp, #7]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
9000620a:	f10d 0207 	add.w	r2, sp, #7
9000620e:	6804      	ldr	r4, [r0, #0]
90006210:	6880      	ldr	r0, [r0, #8]
90006212:	47a0      	blx	r4
  return ft5336_write_reg(ctx, FT5336_OFFSET_LR_REG, &value, 1);
}
90006214:	b002      	add	sp, #8
90006216:	bd10      	pop	{r4, pc}

90006218 <ft5336_offset_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
90006218:	b510      	push	{r4, lr}
9000621a:	460c      	mov	r4, r1
9000621c:	b082      	sub	sp, #8
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
9000621e:	2301      	movs	r3, #1
90006220:	2193      	movs	r1, #147	@ 0x93
{
90006222:	f88d 4007 	strb.w	r4, [sp, #7]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
90006226:	f10d 0207 	add.w	r2, sp, #7
9000622a:	6804      	ldr	r4, [r0, #0]
9000622c:	6880      	ldr	r0, [r0, #8]
9000622e:	47a0      	blx	r4
  return ft5336_write_reg(ctx, FT5336_OFFSET_UD_REG, &value, 1);
}
90006230:	b002      	add	sp, #8
90006232:	bd10      	pop	{r4, pc}

90006234 <ft5336_disatnce_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_disatnce_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
90006234:	b510      	push	{r4, lr}
90006236:	460c      	mov	r4, r1
90006238:	b082      	sub	sp, #8
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
9000623a:	2301      	movs	r3, #1
9000623c:	2194      	movs	r1, #148	@ 0x94
{
9000623e:	f88d 4007 	strb.w	r4, [sp, #7]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
90006242:	f10d 0207 	add.w	r2, sp, #7
90006246:	6804      	ldr	r4, [r0, #0]
90006248:	6880      	ldr	r0, [r0, #8]
9000624a:	47a0      	blx	r4
  return ft5336_write_reg(ctx, FT5336_DISTANCE_LR_REG, &value, 1);
}
9000624c:	b002      	add	sp, #8
9000624e:	bd10      	pop	{r4, pc}

90006250 <ft5336_distance_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
90006250:	b510      	push	{r4, lr}
90006252:	460c      	mov	r4, r1
90006254:	b082      	sub	sp, #8
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
90006256:	2301      	movs	r3, #1
90006258:	2195      	movs	r1, #149	@ 0x95
{
9000625a:	f88d 4007 	strb.w	r4, [sp, #7]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
9000625e:	f10d 0207 	add.w	r2, sp, #7
90006262:	6804      	ldr	r4, [r0, #0]
90006264:	6880      	ldr	r0, [r0, #8]
90006266:	47a0      	blx	r4
  return ft5336_write_reg(ctx, FT5336_DISTANCE_UD_REG, &value, 1);
}
90006268:	b002      	add	sp, #8
9000626a:	bd10      	pop	{r4, pc}

9000626c <ft5336_distance_zoom>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_ZOOM_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_zoom(ft5336_ctx_t *ctx, uint8_t value)
{
9000626c:	b510      	push	{r4, lr}
9000626e:	460c      	mov	r4, r1
90006270:	b082      	sub	sp, #8
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
90006272:	2301      	movs	r3, #1
90006274:	2196      	movs	r1, #150	@ 0x96
{
90006276:	f88d 4007 	strb.w	r4, [sp, #7]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
9000627a:	f10d 0207 	add.w	r2, sp, #7
9000627e:	6804      	ldr	r4, [r0, #0]
90006280:	6880      	ldr	r0, [r0, #8]
90006282:	47a0      	blx	r4
  return ft5336_write_reg(ctx, FT5336_DISTANCE_ZOOM_REG, &value, 1);
}
90006284:	b002      	add	sp, #8
90006286:	bd10      	pop	{r4, pc}

90006288 <ft5336_g_mode>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_GMODE_REG register
  * @retval Component status
  */
int32_t  ft5336_g_mode(ft5336_ctx_t *ctx, uint8_t value)
{
90006288:	b510      	push	{r4, lr}
9000628a:	460c      	mov	r4, r1
9000628c:	b082      	sub	sp, #8
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
9000628e:	2301      	movs	r3, #1
90006290:	21a4      	movs	r1, #164	@ 0xa4
{
90006292:	f88d 4007 	strb.w	r4, [sp, #7]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
90006296:	f10d 0207 	add.w	r2, sp, #7
9000629a:	6804      	ldr	r4, [r0, #0]
9000629c:	6880      	ldr	r0, [r0, #8]
9000629e:	47a0      	blx	r4
  return ft5336_write_reg(ctx, FT5336_GMODE_REG, &value, 1);
}
900062a0:	b002      	add	sp, #8
900062a2:	bd10      	pop	{r4, pc}

900062a4 <ft5336_chip_id>:
  * @param  ctx Component context 
  * @param  value Pointer to FT5336_CHIP_ID_REG register value
  * @retval Component status
  */
int32_t  ft5336_chip_id(ft5336_ctx_t *ctx, uint8_t *value)
{
900062a4:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
900062a6:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
{
900062aa:	460a      	mov	r2, r1
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
900062ac:	2301      	movs	r3, #1
900062ae:	46a4      	mov	ip, r4
900062b0:	21a8      	movs	r1, #168	@ 0xa8
    *value &= FT5336_CHIP_ID_BIT_MASK; 
    *value = *value >> FT5336_CHIP_ID_BIT_POSITION; 
  }
  
  return ret;
}
900062b2:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
900062b6:	4760      	bx	ip

900062b8 <MT48LC4M32B2_Init>:
  * @param  Ctx : Component object pointer
  * @param  pRegMode : Pointer to Register Mode stucture
  * @retval error status
  */
int32_t MT48LC4M32B2_Init(SDRAM_HandleTypeDef *Ctx, MT48LC4M32B2_Context_t *pRegMode) 
{
900062b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  int32_t ret = MT48LC4M32B2_ERROR;
  
  /* Step 1: Configure a clock configuration enable command */
  if(MT48LC4M32B2_ClockEnable(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
900062ba:	680b      	ldr	r3, [r1, #0]
{
900062bc:	460d      	mov	r5, r1
  * @param  Interface : Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t MT48LC4M32B2_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
  Command.CommandMode            = MT48LC4M32B2_CLK_ENABLE_CMD;
900062be:	4c2a      	ldr	r4, [pc, #168]	@ (90006368 <MT48LC4M32B2_Init+0xb0>)
  Command.CommandTarget          = Interface;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
900062c0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
{
900062c4:	4607      	mov	r7, r0
  Command.CommandTarget          = Interface;
900062c6:	6063      	str	r3, [r4, #4]
  Command.ModeRegisterDefinition = 0;
900062c8:	2300      	movs	r3, #0
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
900062ca:	4621      	mov	r1, r4
  Command.ModeRegisterDefinition = 0;
900062cc:	60e3      	str	r3, [r4, #12]
  Command.CommandMode            = MT48LC4M32B2_CLK_ENABLE_CMD;
900062ce:	2301      	movs	r3, #1
900062d0:	6023      	str	r3, [r4, #0]
  Command.AutoRefreshNumber      = 1;
900062d2:	60a3      	str	r3, [r4, #8]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
900062d4:	f005 fe18 	bl	9000bf08 <HAL_SDRAM_SendCommand>
900062d8:	2800      	cmp	r0, #0
900062da:	d142      	bne.n	90006362 <MT48LC4M32B2_Init+0xaa>
  * @retval MT48LC4M32B2_OK
  */
static int32_t MT48LC4M32B2_Delay(uint32_t Delay)
{  
  uint32_t tickstart;
  tickstart = HAL_GetTick();
900062dc:	f000 ff48 	bl	90007170 <HAL_GetTick>
900062e0:	4606      	mov	r6, r0
  while((HAL_GetTick() - tickstart) < Delay)
900062e2:	f000 ff45 	bl	90007170 <HAL_GetTick>
900062e6:	4286      	cmp	r6, r0
900062e8:	d0fb      	beq.n	900062e2 <MT48LC4M32B2_Init+0x2a>
  Command.CommandMode            = MT48LC4M32B2_PALL_CMD;
900062ea:	2302      	movs	r3, #2
    if(MT48LC4M32B2_Precharge(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
900062ec:	682a      	ldr	r2, [r5, #0]
  Command.AutoRefreshNumber      = 1;
900062ee:	2601      	movs	r6, #1
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
900062f0:	491d      	ldr	r1, [pc, #116]	@ (90006368 <MT48LC4M32B2_Init+0xb0>)
  Command.CommandMode            = MT48LC4M32B2_PALL_CMD;
900062f2:	6023      	str	r3, [r4, #0]
  Command.ModeRegisterDefinition = 0;
900062f4:	2300      	movs	r3, #0
  Command.CommandTarget          = Interface;
900062f6:	6062      	str	r2, [r4, #4]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
900062f8:	4638      	mov	r0, r7
900062fa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
  Command.AutoRefreshNumber      = 1;
900062fe:	60a6      	str	r6, [r4, #8]
  Command.ModeRegisterDefinition = 0;
90006300:	60e3      	str	r3, [r4, #12]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90006302:	f005 fe01 	bl	9000bf08 <HAL_SDRAM_SendCommand>
90006306:	bb60      	cbnz	r0, 90006362 <MT48LC4M32B2_Init+0xaa>
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90006308:	4917      	ldr	r1, [pc, #92]	@ (90006368 <MT48LC4M32B2_Init+0xb0>)
  Command.CommandMode            = RefreshMode;
9000630a:	e9d5 3200 	ldrd	r3, r2, [r5]
  Command.ModeRegisterDefinition = 0;
9000630e:	60e0      	str	r0, [r4, #12]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90006310:	4638      	mov	r0, r7
  Command.CommandMode            = RefreshMode;
90006312:	e9c4 2300 	strd	r2, r3, [r4]
  Command.AutoRefreshNumber      = 8;
90006316:	2308      	movs	r3, #8
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90006318:	f64f 72ff 	movw	r2, #65535	@ 0xffff
  Command.AutoRefreshNumber      = 8;
9000631c:	60a3      	str	r3, [r4, #8]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
9000631e:	f005 fdf3 	bl	9000bf08 <HAL_SDRAM_SendCommand>
90006322:	b9f0      	cbnz	r0, 90006362 <MT48LC4M32B2_Init+0xaa>
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90006324:	4910      	ldr	r1, [pc, #64]	@ (90006368 <MT48LC4M32B2_Init+0xb0>)
90006326:	4638      	mov	r0, r7
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
90006328:	e9d5 3203 	ldrd	r3, r2, [r5, #12]
9000632c:	4313      	orrs	r3, r2
                     pRegMode->BurstType     |\
9000632e:	696a      	ldr	r2, [r5, #20]
90006330:	4313      	orrs	r3, r2
                     pRegMode->CASLatency    |\
90006332:	69aa      	ldr	r2, [r5, #24]
90006334:	4313      	orrs	r3, r2
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
90006336:	69ea      	ldr	r2, [r5, #28]
90006338:	4313      	orrs	r3, r2
  Command.CommandTarget          = pRegMode->TargetBank;
9000633a:	682a      	ldr	r2, [r5, #0]
  Command.ModeRegisterDefinition = tmpmrd;
9000633c:	60e3      	str	r3, [r4, #12]
  Command.CommandMode            = MT48LC4M32B2_LOAD_MODE_CMD;
9000633e:	2304      	movs	r3, #4
  Command.CommandTarget          = pRegMode->TargetBank;
90006340:	e9c4 2601 	strd	r2, r6, [r4, #4]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90006344:	f64f 72ff 	movw	r2, #65535	@ 0xffff
  Command.CommandMode            = MT48LC4M32B2_LOAD_MODE_CMD;
90006348:	6023      	str	r3, [r4, #0]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
9000634a:	f005 fddd 	bl	9000bf08 <HAL_SDRAM_SendCommand>
9000634e:	b940      	cbnz	r0, 90006362 <MT48LC4M32B2_Init+0xaa>
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
90006350:	68a9      	ldr	r1, [r5, #8]
90006352:	4638      	mov	r0, r7
90006354:	f005 fdf8 	bl	9000bf48 <HAL_SDRAM_ProgramRefreshRate>
90006358:	3800      	subs	r0, #0
9000635a:	bf18      	it	ne
9000635c:	2001      	movne	r0, #1
9000635e:	4240      	negs	r0, r0
}
90006360:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  int32_t ret = MT48LC4M32B2_ERROR;
90006362:	f04f 30ff 	mov.w	r0, #4294967295
}
90006366:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
90006368:	2400b2c0 	.word	0x2400b2c0

9000636c <BSP_I2C4_DeInit>:
  */
int32_t BSP_I2C4_DeInit(void)
{
  int32_t ret  = BSP_ERROR_NONE;

  I2c4InitCounter--;
9000636c:	4a10      	ldr	r2, [pc, #64]	@ (900063b0 <BSP_I2C4_DeInit+0x44>)
{
9000636e:	b508      	push	{r3, lr}
  I2c4InitCounter--;
90006370:	6813      	ldr	r3, [r2, #0]
90006372:	3b01      	subs	r3, #1
90006374:	6013      	str	r3, [r2, #0]

  if (I2c4InitCounter == 0U)
90006376:	b10b      	cbz	r3, 9000637c <BSP_I2C4_DeInit+0x10>
  int32_t ret  = BSP_ERROR_NONE;
90006378:	2000      	movs	r0, #0
      ret = BSP_ERROR_BUS_FAILURE;
    }
  }

  return ret;
}
9000637a:	bd08      	pop	{r3, pc}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
9000637c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
90006380:	480c      	ldr	r0, [pc, #48]	@ (900063b4 <BSP_I2C4_DeInit+0x48>)
90006382:	f001 fab9 	bl	900078f8 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
90006386:	480b      	ldr	r0, [pc, #44]	@ (900063b4 <BSP_I2C4_DeInit+0x48>)
90006388:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
9000638c:	f001 fab4 	bl	900078f8 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
90006390:	4a09      	ldr	r2, [pc, #36]	@ (900063b8 <BSP_I2C4_DeInit+0x4c>)
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
90006392:	480a      	ldr	r0, [pc, #40]	@ (900063bc <BSP_I2C4_DeInit+0x50>)
  BUS_I2C4_CLK_DISABLE();
90006394:	f8d2 30f4 	ldr.w	r3, [r2, #244]	@ 0xf4
90006398:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
9000639c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
900063a0:	f001 fd4c 	bl	90007e3c <HAL_I2C_DeInit>
900063a4:	2800      	cmp	r0, #0
900063a6:	d0e7      	beq.n	90006378 <BSP_I2C4_DeInit+0xc>
      ret = BSP_ERROR_BUS_FAILURE;
900063a8:	f06f 0007 	mvn.w	r0, #7
}
900063ac:	bd08      	pop	{r3, pc}
900063ae:	bf00      	nop
900063b0:	2400bd28 	.word	0x2400bd28
900063b4:	58020c00 	.word	0x58020c00
900063b8:	58024400 	.word	0x58024400
900063bc:	2400b2d0 	.word	0x2400b2d0

900063c0 <MX_I2C4_Init>:
  hI2c->Init.OwnAddress1      = 0;
900063c0:	2300      	movs	r3, #0
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
900063c2:	2201      	movs	r2, #1
{
900063c4:	b510      	push	{r4, lr}
  hI2c->Init.OwnAddress1      = 0;
900063c6:	e9c0 1301 	strd	r1, r3, [r0, #4]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
900063ca:	e9c0 2303 	strd	r2, r3, [r0, #12]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
900063ce:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
900063d2:	e9c0 3307 	strd	r3, r3, [r0, #28]
{
900063d6:	4604      	mov	r4, r0
  if (HAL_I2C_Init(hI2c) != HAL_OK)
900063d8:	f001 fcd8 	bl	90007d8c <HAL_I2C_Init>
900063dc:	b108      	cbz	r0, 900063e2 <MX_I2C4_Init+0x22>
    status = HAL_ERROR;
900063de:	2001      	movs	r0, #1
}
900063e0:	bd10      	pop	{r4, pc}
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
900063e2:	4601      	mov	r1, r0
900063e4:	4620      	mov	r0, r4
900063e6:	f001 ffb7 	bl	90008358 <HAL_I2CEx_ConfigAnalogFilter>
900063ea:	2800      	cmp	r0, #0
900063ec:	d1f7      	bne.n	900063de <MX_I2C4_Init+0x1e>
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
900063ee:	4601      	mov	r1, r0
900063f0:	4620      	mov	r0, r4
900063f2:	f001 ffdb 	bl	900083ac <HAL_I2CEx_ConfigDigitalFilter>
900063f6:	3800      	subs	r0, #0
900063f8:	bf18      	it	ne
900063fa:	2001      	movne	r0, #1
}
900063fc:	bd10      	pop	{r4, pc}
900063fe:	bf00      	nop

90006400 <BSP_I2C4_Init>:
  if (I2c4InitCounter == 0U)
90006400:	4b9a      	ldr	r3, [pc, #616]	@ (9000666c <BSP_I2C4_Init+0x26c>)
  hbus_i2c4.Instance = BUS_I2C4;
90006402:	489b      	ldr	r0, [pc, #620]	@ (90006670 <BSP_I2C4_Init+0x270>)
90006404:	4a9b      	ldr	r2, [pc, #620]	@ (90006674 <BSP_I2C4_Init+0x274>)
{
90006406:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (I2c4InitCounter == 0U)
9000640a:	681c      	ldr	r4, [r3, #0]
{
9000640c:	b09d      	sub	sp, #116	@ 0x74
  hbus_i2c4.Instance = BUS_I2C4;
9000640e:	6002      	str	r2, [r0, #0]
  if (I2c4InitCounter == 0U)
90006410:	b11c      	cbz	r4, 9000641a <BSP_I2C4_Init+0x1a>
  int32_t ret = BSP_ERROR_NONE;
90006412:	2000      	movs	r0, #0
}
90006414:	b01d      	add	sp, #116	@ 0x74
90006416:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    I2c4InitCounter++;
9000641a:	2201      	movs	r2, #1
9000641c:	601a      	str	r2, [r3, #0]
    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
9000641e:	f001 ff95 	bl	9000834c <HAL_I2C_GetState>
90006422:	2800      	cmp	r0, #0
90006424:	d1f5      	bne.n	90006412 <BSP_I2C4_Init+0x12>
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
90006426:	4d94      	ldr	r5, [pc, #592]	@ (90006678 <BSP_I2C4_Init+0x278>)
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
90006428:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
9000642c:	2112      	movs	r1, #18
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
9000642e:	2604      	movs	r6, #4
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
90006430:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
90006434:	f04f 0800 	mov.w	r8, #0
90006438:	f04f 0902 	mov.w	r9, #2
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
9000643c:	f043 0308 	orr.w	r3, r3, #8
90006440:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
90006444:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
90006448:	f003 0308 	and.w	r3, r3, #8
9000644c:	9313      	str	r3, [sp, #76]	@ 0x4c
9000644e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
90006450:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
90006454:	f043 0308 	orr.w	r3, r3, #8
90006458:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
9000645c:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
90006460:	961a      	str	r6, [sp, #104]	@ 0x68
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
90006462:	f003 0308 	and.w	r3, r3, #8
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
90006466:	e9cd 0116 	strd	r0, r1, [sp, #88]	@ 0x58
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
9000646a:	9314      	str	r3, [sp, #80]	@ 0x50
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
9000646c:	a916      	add	r1, sp, #88	@ 0x58
9000646e:	4883      	ldr	r0, [pc, #524]	@ (9000667c <BSP_I2C4_Init+0x27c>)
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
90006470:	9b14      	ldr	r3, [sp, #80]	@ 0x50
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
90006472:	e9cd 8918 	strd	r8, r9, [sp, #96]	@ 0x60
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
90006476:	f001 f8fd 	bl	90007674 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
9000647a:	2312      	movs	r3, #18
9000647c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
90006480:	a916      	add	r1, sp, #88	@ 0x58
90006482:	487e      	ldr	r0, [pc, #504]	@ (9000667c <BSP_I2C4_Init+0x27c>)
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
90006484:	961a      	str	r6, [sp, #104]	@ 0x68
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
90006486:	e9cd 2316 	strd	r2, r3, [sp, #88]	@ 0x58
9000648a:	e9cd 8918 	strd	r8, r9, [sp, #96]	@ 0x60
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
9000648e:	f001 f8f1 	bl	90007674 <HAL_GPIO_Init>
  BUS_I2C4_CLK_ENABLE();
90006492:	f8d5 30f4 	ldr.w	r3, [r5, #244]	@ 0xf4
90006496:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
9000649a:	f8c5 30f4 	str.w	r3, [r5, #244]	@ 0xf4
9000649e:	f8d5 30f4 	ldr.w	r3, [r5, #244]	@ 0xf4
900064a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
900064a6:	9315      	str	r3, [sp, #84]	@ 0x54
900064a8:	9b15      	ldr	r3, [sp, #84]	@ 0x54
  BUS_I2C4_FORCE_RESET();
900064aa:	f8d5 309c 	ldr.w	r3, [r5, #156]	@ 0x9c
900064ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
900064b2:	f8c5 309c 	str.w	r3, [r5, #156]	@ 0x9c
  BUS_I2C4_RELEASE_RESET();
900064b6:	f8d5 309c 	ldr.w	r3, [r5, #156]	@ 0x9c
900064ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
900064be:	f8c5 309c 	str.w	r3, [r5, #156]	@ 0x9c
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
900064c2:	f004 fc37 	bl	9000ad34 <HAL_RCC_GetPCLK2Freq>
  if((clock_src_freq != 0U) && (i2c_freq != 0U))
900064c6:	2800      	cmp	r0, #0
900064c8:	f000 81fd 	beq.w	900068c6 <BSP_I2C4_Init+0x4c6>
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
900064cc:	4b6c      	ldr	r3, [pc, #432]	@ (90006680 <BSP_I2C4_Init+0x280>)
  if (tsdadel_max <= 0)
900064ce:	4625      	mov	r5, r4
  uint32_t prev_presc = I2C_PRESC_MAX;
900064d0:	f04f 0a10 	mov.w	sl, #16
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900064d4:	4e6b      	ldr	r6, [pc, #428]	@ (90006684 <BSP_I2C4_Init+0x284>)
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
900064d6:	eb03 0350 	add.w	r3, r3, r0, lsr #1
900064da:	9401      	str	r4, [sp, #4]
900064dc:	fbb3 f7f0 	udiv	r7, r3, r0
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
900064e0:	00bb      	lsls	r3, r7, #2
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
900064e2:	9700      	str	r7, [sp, #0]
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
900064e4:	eb07 0147 	add.w	r1, r7, r7, lsl #1
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
900064e8:	f5c3 7cc3 	rsb	ip, r3, #390	@ 0x186
900064ec:	4b66      	ldr	r3, [pc, #408]	@ (90006688 <BSP_I2C4_Init+0x288>)
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
900064ee:	007a      	lsls	r2, r7, #1
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
900064f0:	f1c1 0e32 	rsb	lr, r1, #50	@ 0x32
900064f4:	6819      	ldr	r1, [r3, #0]
  if (tsdadel_max <= 0)
900064f6:	ea2c 7cec 	bic.w	ip, ip, ip, asr #31
900064fa:	9202      	str	r2, [sp, #8]
  if (tsdadel_min <= 0)
900064fc:	ea2e 7eee 	bic.w	lr, lr, lr, asr #31
  if (tsdadel_max <= 0)
90006500:	4689      	mov	r9, r1
90006502:	4622      	mov	r2, r4
90006504:	9111      	str	r1, [sp, #68]	@ 0x44
          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
90006506:	ebbc 0f47 	cmp.w	ip, r7, lsl #1
9000650a:	46b8      	mov	r8, r7
9000650c:	eb07 0347 	add.w	r3, r7, r7, lsl #1
90006510:	bf2c      	ite	cs
90006512:	2001      	movcs	r0, #1
90006514:	2000      	movcc	r0, #0
90006516:	ebbe 0f47 	cmp.w	lr, r7, lsl #1
9000651a:	f000 0001 	and.w	r0, r0, #1
9000651e:	eb07 0187 	add.w	r1, r7, r7, lsl #2
90006522:	bf88      	it	hi
90006524:	2000      	movhi	r0, #0
90006526:	459e      	cmp	lr, r3
90006528:	eb07 0483 	add.w	r4, r7, r3, lsl #2
9000652c:	9004      	str	r0, [sp, #16]
9000652e:	bf8c      	ite	hi
90006530:	2000      	movhi	r0, #0
90006532:	2001      	movls	r0, #1
90006534:	459c      	cmp	ip, r3
90006536:	940f      	str	r4, [sp, #60]	@ 0x3c
90006538:	ebc7 0bc7 	rsb	fp, r7, r7, lsl #3
9000653c:	bf38      	it	cc
9000653e:	2000      	movcc	r0, #0
90006540:	ebbe 0f87 	cmp.w	lr, r7, lsl #2
90006544:	9006      	str	r0, [sp, #24]
90006546:	eb07 0041 	add.w	r0, r7, r1, lsl #1
9000654a:	9005      	str	r0, [sp, #20]
9000654c:	bf94      	ite	ls
9000654e:	2001      	movls	r0, #1
90006550:	2000      	movhi	r0, #0
90006552:	ebbc 0f87 	cmp.w	ip, r7, lsl #2
90006556:	f000 0401 	and.w	r4, r0, #1
9000655a:	bf38      	it	cc
9000655c:	2400      	movcc	r4, #0
9000655e:	458e      	cmp	lr, r1
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
90006560:	f04f 0000 	mov.w	r0, #0
          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
90006564:	9407      	str	r4, [sp, #28]
90006566:	bf8c      	ite	hi
90006568:	2400      	movhi	r4, #0
9000656a:	2401      	movls	r4, #1
9000656c:	458c      	cmp	ip, r1
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
9000656e:	9003      	str	r0, [sp, #12]
          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
90006570:	bf38      	it	cc
90006572:	2400      	movcc	r4, #0
90006574:	ebbe 0f43 	cmp.w	lr, r3, lsl #1
90006578:	bf98      	it	ls
9000657a:	2001      	movls	r0, #1
9000657c:	ebbc 0f43 	cmp.w	ip, r3, lsl #1
90006580:	9408      	str	r4, [sp, #32]
90006582:	465c      	mov	r4, fp
90006584:	f000 0001 	and.w	r0, r0, #1
90006588:	bf38      	it	cc
9000658a:	2000      	movcc	r0, #0
9000658c:	45de      	cmp	lr, fp
9000658e:	9009      	str	r0, [sp, #36]	@ 0x24
90006590:	4658      	mov	r0, fp
90006592:	bf8c      	ite	hi
90006594:	2000      	movhi	r0, #0
90006596:	2001      	movls	r0, #1
90006598:	45dc      	cmp	ip, fp
9000659a:	bf38      	it	cc
9000659c:	2000      	movcc	r0, #0
9000659e:	ebbe 0fc7 	cmp.w	lr, r7, lsl #3
900065a2:	4683      	mov	fp, r0
900065a4:	bf94      	ite	ls
900065a6:	f04f 0b01 	movls.w	fp, #1
900065aa:	f04f 0b00 	movhi.w	fp, #0
900065ae:	ebbc 0fc7 	cmp.w	ip, r7, lsl #3
900065b2:	900a      	str	r0, [sp, #40]	@ 0x28
900065b4:	f00b 0b01 	and.w	fp, fp, #1
900065b8:	bf38      	it	cc
900065ba:	f04f 0b00 	movcc.w	fp, #0
900065be:	4658      	mov	r0, fp
900065c0:	f8cd b02c 	str.w	fp, [sp, #44]	@ 0x2c
900065c4:	eb07 0bc7 	add.w	fp, r7, r7, lsl #3
900065c8:	45de      	cmp	lr, fp
900065ca:	bf8c      	ite	hi
900065cc:	2000      	movhi	r0, #0
900065ce:	2001      	movls	r0, #1
900065d0:	45dc      	cmp	ip, fp
900065d2:	bf38      	it	cc
900065d4:	2000      	movcc	r0, #0
900065d6:	ebbe 0f41 	cmp.w	lr, r1, lsl #1
900065da:	900c      	str	r0, [sp, #48]	@ 0x30
900065dc:	bf98      	it	ls
900065de:	f04f 0b01 	movls.w	fp, #1
900065e2:	9805      	ldr	r0, [sp, #20]
900065e4:	bf88      	it	hi
900065e6:	f04f 0b00 	movhi.w	fp, #0
900065ea:	ebbc 0f41 	cmp.w	ip, r1, lsl #1
900065ee:	f00b 0b01 	and.w	fp, fp, #1
900065f2:	4601      	mov	r1, r0
900065f4:	bf38      	it	cc
900065f6:	f04f 0b00 	movcc.w	fp, #0
900065fa:	4586      	cmp	lr, r0
900065fc:	bf8c      	ite	hi
900065fe:	2100      	movhi	r1, #0
90006600:	2101      	movls	r1, #1
90006602:	4584      	cmp	ip, r0
90006604:	4620      	mov	r0, r4
90006606:	bf38      	it	cc
90006608:	2100      	movcc	r1, #0
9000660a:	ebbe 0f83 	cmp.w	lr, r3, lsl #2
9000660e:	910d      	str	r1, [sp, #52]	@ 0x34
90006610:	bf94      	ite	ls
90006612:	2101      	movls	r1, #1
90006614:	2100      	movhi	r1, #0
90006616:	ebbc 0f83 	cmp.w	ip, r3, lsl #2
9000661a:	f001 0101 	and.w	r1, r1, #1
9000661e:	bf38      	it	cc
90006620:	2100      	movcc	r1, #0
90006622:	910e      	str	r1, [sp, #56]	@ 0x38
90006624:	990f      	ldr	r1, [sp, #60]	@ 0x3c
90006626:	4571      	cmp	r1, lr
90006628:	460b      	mov	r3, r1
9000662a:	bf34      	ite	cc
9000662c:	2300      	movcc	r3, #0
9000662e:	2301      	movcs	r3, #1
90006630:	4561      	cmp	r1, ip
90006632:	bf88      	it	hi
90006634:	2300      	movhi	r3, #0
90006636:	ebbe 0f44 	cmp.w	lr, r4, lsl #1
9000663a:	930f      	str	r3, [sp, #60]	@ 0x3c
9000663c:	bf94      	ite	ls
9000663e:	2301      	movls	r3, #1
90006640:	2300      	movhi	r3, #0
90006642:	ebbc 0f44 	cmp.w	ip, r4, lsl #1
90006646:	f04f 0400 	mov.w	r4, #0
9000664a:	f003 0301 	and.w	r3, r3, #1
9000664e:	bf38      	it	cc
90006650:	2300      	movcc	r3, #0
90006652:	9310      	str	r3, [sp, #64]	@ 0x40
90006654:	ebc7 1307 	rsb	r3, r7, r7, lsl #4
90006658:	459e      	cmp	lr, r3
9000665a:	bf8c      	ite	hi
9000665c:	2100      	movhi	r1, #0
9000665e:	2101      	movls	r1, #1
90006660:	459c      	cmp	ip, r3
90006662:	bf38      	it	cc
90006664:	2100      	movcc	r1, #0
90006666:	9105      	str	r1, [sp, #20]
90006668:	e014      	b.n	90006694 <BSP_I2C4_Init+0x294>
9000666a:	bf00      	nop
9000666c:	2400bd28 	.word	0x2400bd28
90006670:	2400b2d0 	.word	0x2400b2d0
90006674:	58001c00 	.word	0x58001c00
90006678:	58024400 	.word	0x58024400
9000667c:	58020c00 	.word	0x58020c00
90006680:	3b9aca00 	.word	0x3b9aca00
90006684:	2400b328 	.word	0x2400b328
90006688:	2400b324 	.word	0x2400b324
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
9000668c:	2c10      	cmp	r4, #16
9000668e:	44b8      	add	r8, r7
90006690:	f000 8273 	beq.w	90006b7a <BSP_I2C4_Init+0x77a>
      if (tscldel >= (uint32_t)tscldel_min)
90006694:	f5b8 7faf 	cmp.w	r8, #350	@ 0x15e
90006698:	4623      	mov	r3, r4
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
9000669a:	f104 0401 	add.w	r4, r4, #1
      if (tscldel >= (uint32_t)tscldel_min)
9000669e:	d3f5      	bcc.n	9000668c <BSP_I2C4_Init+0x28c>
            if(presc != prev_presc)
900066a0:	ebba 0105 	subs.w	r1, sl, r5
900066a4:	bf18      	it	ne
900066a6:	2101      	movne	r1, #1
900066a8:	f1be 0f00 	cmp.w	lr, #0
900066ac:	bf18      	it	ne
900066ae:	2100      	movne	r1, #0
900066b0:	2900      	cmp	r1, #0
900066b2:	f040 8250 	bne.w	90006b56 <BSP_I2C4_Init+0x756>
          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
900066b6:	45bc      	cmp	ip, r7
900066b8:	bf34      	ite	cc
900066ba:	2100      	movcc	r1, #0
900066bc:	2101      	movcs	r1, #1
900066be:	45be      	cmp	lr, r7
900066c0:	bf88      	it	hi
900066c2:	2100      	movhi	r1, #0
            if(presc != prev_presc)
900066c4:	45aa      	cmp	sl, r5
900066c6:	bf0c      	ite	eq
900066c8:	2100      	moveq	r1, #0
900066ca:	f001 0101 	andne.w	r1, r1, #1
900066ce:	2900      	cmp	r1, #0
900066d0:	f000 8103 	beq.w	900068da <BSP_I2C4_Init+0x4da>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900066d4:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
900066d8:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
900066dc:	2001      	movs	r0, #1
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900066de:	46b2      	mov	sl, r6
900066e0:	f846 5022 	str.w	r5, [r6, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
900066e4:	f1b9 0f7f 	cmp.w	r9, #127	@ 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900066e8:	eb06 0282 	add.w	r2, r6, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
900066ec:	6053      	str	r3, [r2, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
900066ee:	6090      	str	r0, [r2, #8]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
900066f0:	f200 81aa 	bhi.w	90006a48 <BSP_I2C4_Init+0x648>
900066f4:	46aa      	mov	sl, r5
            if(presc != prev_presc)
900066f6:	9a06      	ldr	r2, [sp, #24]
900066f8:	45aa      	cmp	sl, r5
900066fa:	bf0c      	ite	eq
900066fc:	2200      	moveq	r2, #0
900066fe:	f002 0201 	andne.w	r2, r2, #1
90006702:	2a00      	cmp	r2, #0
90006704:	f000 8105 	beq.w	90006912 <BSP_I2C4_Init+0x512>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006708:	eb09 0189 	add.w	r1, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
9000670c:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90006710:	2003      	movs	r0, #3
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006712:	46b2      	mov	sl, r6
90006714:	f846 5021 	str.w	r5, [r6, r1, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90006718:	f1b9 0f7f 	cmp.w	r9, #127	@ 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
9000671c:	eb06 0181 	add.w	r1, r6, r1, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90006720:	604b      	str	r3, [r1, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90006722:	6088      	str	r0, [r1, #8]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90006724:	f200 8190 	bhi.w	90006a48 <BSP_I2C4_Init+0x648>
90006728:	4611      	mov	r1, r2
9000672a:	46aa      	mov	sl, r5
            if(presc != prev_presc)
9000672c:	9a08      	ldr	r2, [sp, #32]
9000672e:	45aa      	cmp	sl, r5
90006730:	bf0c      	ite	eq
90006732:	2200      	moveq	r2, #0
90006734:	f002 0201 	andne.w	r2, r2, #1
90006738:	2a00      	cmp	r2, #0
9000673a:	f000 8105 	beq.w	90006948 <BSP_I2C4_Init+0x548>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
9000673e:	eb09 0189 	add.w	r1, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
90006742:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90006746:	2005      	movs	r0, #5
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006748:	46b2      	mov	sl, r6
9000674a:	f846 5021 	str.w	r5, [r6, r1, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
9000674e:	f1b9 0f7f 	cmp.w	r9, #127	@ 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006752:	eb06 0181 	add.w	r1, r6, r1, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90006756:	604b      	str	r3, [r1, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90006758:	6088      	str	r0, [r1, #8]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
9000675a:	f200 8175 	bhi.w	90006a48 <BSP_I2C4_Init+0x648>
9000675e:	4611      	mov	r1, r2
90006760:	46aa      	mov	sl, r5
            if(presc != prev_presc)
90006762:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
90006764:	45aa      	cmp	sl, r5
90006766:	bf0c      	ite	eq
90006768:	2200      	moveq	r2, #0
9000676a:	f002 0201 	andne.w	r2, r2, #1
9000676e:	2a00      	cmp	r2, #0
90006770:	f000 8104 	beq.w	9000697c <BSP_I2C4_Init+0x57c>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006774:	eb09 0189 	add.w	r1, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
90006778:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
9000677c:	2007      	movs	r0, #7
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
9000677e:	46b2      	mov	sl, r6
90006780:	f846 5021 	str.w	r5, [r6, r1, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90006784:	f1b9 0f7f 	cmp.w	r9, #127	@ 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006788:	eb06 0181 	add.w	r1, r6, r1, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
9000678c:	604b      	str	r3, [r1, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
9000678e:	6088      	str	r0, [r1, #8]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90006790:	f200 815a 	bhi.w	90006a48 <BSP_I2C4_Init+0x648>
90006794:	4611      	mov	r1, r2
90006796:	46aa      	mov	sl, r5
            if(presc != prev_presc)
90006798:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
9000679a:	45aa      	cmp	sl, r5
9000679c:	bf0c      	ite	eq
9000679e:	2200      	moveq	r2, #0
900067a0:	f002 0201 	andne.w	r2, r2, #1
900067a4:	2a00      	cmp	r2, #0
900067a6:	f000 8103 	beq.w	900069b0 <BSP_I2C4_Init+0x5b0>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900067aa:	eb09 0189 	add.w	r1, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
900067ae:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
900067b2:	2009      	movs	r0, #9
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900067b4:	46b2      	mov	sl, r6
900067b6:	f846 5021 	str.w	r5, [r6, r1, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
900067ba:	f1b9 0f7f 	cmp.w	r9, #127	@ 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900067be:	eb06 0181 	add.w	r1, r6, r1, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
900067c2:	604b      	str	r3, [r1, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
900067c4:	6088      	str	r0, [r1, #8]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
900067c6:	f200 813f 	bhi.w	90006a48 <BSP_I2C4_Init+0x648>
900067ca:	4611      	mov	r1, r2
900067cc:	46aa      	mov	sl, r5
            if(presc != prev_presc)
900067ce:	980d      	ldr	r0, [sp, #52]	@ 0x34
900067d0:	4555      	cmp	r5, sl
900067d2:	bf0c      	ite	eq
900067d4:	2000      	moveq	r0, #0
900067d6:	f000 0001 	andne.w	r0, r0, #1
900067da:	2800      	cmp	r0, #0
900067dc:	f000 8101 	beq.w	900069e2 <BSP_I2C4_Init+0x5e2>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900067e0:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
900067e4:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
900067e8:	210b      	movs	r1, #11
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900067ea:	46b2      	mov	sl, r6
900067ec:	f846 5022 	str.w	r5, [r6, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
900067f0:	f1b9 0f7f 	cmp.w	r9, #127	@ 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900067f4:	eb06 0282 	add.w	r2, r6, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
900067f8:	6053      	str	r3, [r2, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
900067fa:	6091      	str	r1, [r2, #8]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
900067fc:	f200 8124 	bhi.w	90006a48 <BSP_I2C4_Init+0x648>
90006800:	46aa      	mov	sl, r5
            if(presc != prev_presc)
90006802:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
90006804:	4555      	cmp	r5, sl
90006806:	bf0c      	ite	eq
90006808:	2200      	moveq	r2, #0
9000680a:	f002 0201 	andne.w	r2, r2, #1
9000680e:	2a00      	cmp	r2, #0
90006810:	f000 8100 	beq.w	90006a14 <BSP_I2C4_Init+0x614>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006814:	eb09 0189 	add.w	r1, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
90006818:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
9000681c:	200d      	movs	r0, #13
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
9000681e:	46b2      	mov	sl, r6
90006820:	f846 5021 	str.w	r5, [r6, r1, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90006824:	f1b9 0f7f 	cmp.w	r9, #127	@ 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006828:	eb06 0181 	add.w	r1, r6, r1, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
9000682c:	604b      	str	r3, [r1, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
9000682e:	6088      	str	r0, [r1, #8]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90006830:	f200 810a 	bhi.w	90006a48 <BSP_I2C4_Init+0x648>
90006834:	4610      	mov	r0, r2
90006836:	46aa      	mov	sl, r5
            if(presc != prev_presc)
90006838:	9a05      	ldr	r2, [sp, #20]
9000683a:	4555      	cmp	r5, sl
9000683c:	bf0c      	ite	eq
9000683e:	2200      	moveq	r2, #0
90006840:	f002 0201 	andne.w	r2, r2, #1
90006844:	2a00      	cmp	r2, #0
90006846:	f000 8182 	beq.w	90006b4e <BSP_I2C4_Init+0x74e>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
9000684a:	eb09 0189 	add.w	r1, r9, r9, lsl #2
9000684e:	f8df a360 	ldr.w	sl, [pc, #864]	@ 90006bb0 <BSP_I2C4_Init+0x7b0>
              I2c_valid_timing_nbr ++;
90006852:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006856:	f84a 5021 	str.w	r5, [sl, r1, lsl #2]
9000685a:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
9000685e:	f1b9 0f7f 	cmp.w	r9, #127	@ 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90006862:	604b      	str	r3, [r1, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90006864:	f04f 030f 	mov.w	r3, #15
90006868:	608b      	str	r3, [r1, #8]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
9000686a:	f200 80ed 	bhi.w	90006a48 <BSP_I2C4_Init+0x648>
9000686e:	46aa      	mov	sl, r5
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
90006870:	e70c      	b.n	9000668c <BSP_I2C4_Init+0x28c>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
90006872:	9a06      	ldr	r2, [sp, #24]
90006874:	4661      	mov	r1, ip
90006876:	f109 0914 	add.w	r9, r9, #20
9000687a:	3201      	adds	r2, #1
9000687c:	e9dd e40a 	ldrd	lr, r4, [sp, #40]	@ 0x28
90006880:	e9dd 3c0c 	ldrd	r3, ip, [sp, #48]	@ 0x30
90006884:	4572      	cmp	r2, lr
90006886:	9206      	str	r2, [sp, #24]
90006888:	f040 8103 	bne.w	90006a92 <BSP_I2C4_Init+0x692>
        if (idx < I2C_VALID_TIMING_NBR)
9000688c:	9b01      	ldr	r3, [sp, #4]
9000688e:	2b7f      	cmp	r3, #127	@ 0x7f
90006890:	e9dd 4008 	ldrd	r4, r0, [sp, #32]
90006894:	d817      	bhi.n	900068c6 <BSP_I2C4_Init+0x4c6>
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
90006896:	eb03 0383 	add.w	r3, r3, r3, lsl #2
9000689a:	eb00 0283 	add.w	r2, r0, r3, lsl #2
9000689e:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
900068a2:	6850      	ldr	r0, [r2, #4]
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
900068a4:	7c13      	ldrb	r3, [r2, #16]
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
900068a6:	0500      	lsls	r0, r0, #20
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
900068a8:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
900068ac:	f400 0070 	and.w	r0, r0, #15728640	@ 0xf00000
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
900068b0:	e9d2 1202 	ldrd	r1, r2, [r2, #8]
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
900068b4:	4303      	orrs	r3, r0
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
900068b6:	0409      	lsls	r1, r1, #16
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
900068b8:	0212      	lsls	r2, r2, #8
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
900068ba:	f401 2170 	and.w	r1, r1, #983040	@ 0xf0000
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
900068be:	b292      	uxth	r2, r2
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
900068c0:	430b      	orrs	r3, r1
900068c2:	ea43 0402 	orr.w	r4, r3, r2
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
900068c6:	4621      	mov	r1, r4
900068c8:	48b7      	ldr	r0, [pc, #732]	@ (90006ba8 <BSP_I2C4_Init+0x7a8>)
900068ca:	f7ff fd79 	bl	900063c0 <MX_I2C4_Init>
900068ce:	2800      	cmp	r0, #0
900068d0:	f43f ad9f 	beq.w	90006412 <BSP_I2C4_Init+0x12>
          ret = BSP_ERROR_BUS_FAILURE;
900068d4:	f06f 0007 	mvn.w	r0, #7
  return ret;
900068d8:	e59c      	b.n	90006414 <BSP_I2C4_Init+0x14>
            if(presc != prev_presc)
900068da:	4611      	mov	r1, r2
900068dc:	9a04      	ldr	r2, [sp, #16]
900068de:	45aa      	cmp	sl, r5
900068e0:	bf0c      	ite	eq
900068e2:	2200      	moveq	r2, #0
900068e4:	f002 0201 	andne.w	r2, r2, #1
900068e8:	2a00      	cmp	r2, #0
900068ea:	f43f af04 	beq.w	900066f6 <BSP_I2C4_Init+0x2f6>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900068ee:	eb09 0189 	add.w	r1, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
900068f2:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
900068f6:	2002      	movs	r0, #2
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900068f8:	46b2      	mov	sl, r6
900068fa:	f846 5021 	str.w	r5, [r6, r1, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
900068fe:	f1b9 0f7f 	cmp.w	r9, #127	@ 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006902:	eb06 0181 	add.w	r1, r6, r1, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90006906:	604b      	str	r3, [r1, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90006908:	6088      	str	r0, [r1, #8]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
9000690a:	f200 809d 	bhi.w	90006a48 <BSP_I2C4_Init+0x648>
9000690e:	4611      	mov	r1, r2
90006910:	46aa      	mov	sl, r5
            if(presc != prev_presc)
90006912:	9a07      	ldr	r2, [sp, #28]
90006914:	45aa      	cmp	sl, r5
90006916:	bf0c      	ite	eq
90006918:	2200      	moveq	r2, #0
9000691a:	f002 0201 	andne.w	r2, r2, #1
9000691e:	2a00      	cmp	r2, #0
90006920:	f43f af04 	beq.w	9000672c <BSP_I2C4_Init+0x32c>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006924:	eb09 0189 	add.w	r1, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
90006928:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
9000692c:	2004      	movs	r0, #4
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
9000692e:	46b2      	mov	sl, r6
90006930:	f846 5021 	str.w	r5, [r6, r1, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90006934:	f1b9 0f7f 	cmp.w	r9, #127	@ 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006938:	eb06 0181 	add.w	r1, r6, r1, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
9000693c:	604b      	str	r3, [r1, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
9000693e:	6088      	str	r0, [r1, #8]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90006940:	f200 8082 	bhi.w	90006a48 <BSP_I2C4_Init+0x648>
90006944:	4611      	mov	r1, r2
90006946:	46aa      	mov	sl, r5
            if(presc != prev_presc)
90006948:	9a09      	ldr	r2, [sp, #36]	@ 0x24
9000694a:	45aa      	cmp	sl, r5
9000694c:	bf0c      	ite	eq
9000694e:	2200      	moveq	r2, #0
90006950:	f002 0201 	andne.w	r2, r2, #1
90006954:	2a00      	cmp	r2, #0
90006956:	f43f af04 	beq.w	90006762 <BSP_I2C4_Init+0x362>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
9000695a:	eb09 0189 	add.w	r1, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
9000695e:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90006962:	2006      	movs	r0, #6
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006964:	46b2      	mov	sl, r6
90006966:	f846 5021 	str.w	r5, [r6, r1, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
9000696a:	f1b9 0f7f 	cmp.w	r9, #127	@ 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
9000696e:	eb06 0181 	add.w	r1, r6, r1, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90006972:	604b      	str	r3, [r1, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90006974:	6088      	str	r0, [r1, #8]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90006976:	d867      	bhi.n	90006a48 <BSP_I2C4_Init+0x648>
90006978:	4611      	mov	r1, r2
9000697a:	46aa      	mov	sl, r5
            if(presc != prev_presc)
9000697c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
9000697e:	45aa      	cmp	sl, r5
90006980:	bf0c      	ite	eq
90006982:	2200      	moveq	r2, #0
90006984:	f002 0201 	andne.w	r2, r2, #1
90006988:	2a00      	cmp	r2, #0
9000698a:	f43f af05 	beq.w	90006798 <BSP_I2C4_Init+0x398>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
9000698e:	eb09 0189 	add.w	r1, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
90006992:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90006996:	2008      	movs	r0, #8
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006998:	46b2      	mov	sl, r6
9000699a:	f846 5021 	str.w	r5, [r6, r1, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
9000699e:	f1b9 0f7f 	cmp.w	r9, #127	@ 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900069a2:	eb06 0181 	add.w	r1, r6, r1, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
900069a6:	604b      	str	r3, [r1, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
900069a8:	6088      	str	r0, [r1, #8]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
900069aa:	d84d      	bhi.n	90006a48 <BSP_I2C4_Init+0x648>
900069ac:	4611      	mov	r1, r2
900069ae:	46aa      	mov	sl, r5
            if(presc != prev_presc)
900069b0:	45aa      	cmp	sl, r5
900069b2:	bf0c      	ite	eq
900069b4:	2200      	moveq	r2, #0
900069b6:	f00b 0201 	andne.w	r2, fp, #1
900069ba:	2a00      	cmp	r2, #0
900069bc:	f43f af07 	beq.w	900067ce <BSP_I2C4_Init+0x3ce>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900069c0:	eb09 0189 	add.w	r1, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
900069c4:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
900069c8:	200a      	movs	r0, #10
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900069ca:	46b2      	mov	sl, r6
900069cc:	f846 5021 	str.w	r5, [r6, r1, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
900069d0:	f1b9 0f7f 	cmp.w	r9, #127	@ 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900069d4:	eb06 0181 	add.w	r1, r6, r1, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
900069d8:	604b      	str	r3, [r1, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
900069da:	6088      	str	r0, [r1, #8]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
900069dc:	d834      	bhi.n	90006a48 <BSP_I2C4_Init+0x648>
900069de:	4611      	mov	r1, r2
900069e0:	46aa      	mov	sl, r5
            if(presc != prev_presc)
900069e2:	980e      	ldr	r0, [sp, #56]	@ 0x38
900069e4:	4555      	cmp	r5, sl
900069e6:	bf0c      	ite	eq
900069e8:	2000      	moveq	r0, #0
900069ea:	f000 0001 	andne.w	r0, r0, #1
900069ee:	2800      	cmp	r0, #0
900069f0:	f000 80af 	beq.w	90006b52 <BSP_I2C4_Init+0x752>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900069f4:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
900069f8:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
900069fc:	210c      	movs	r1, #12
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900069fe:	46b2      	mov	sl, r6
90006a00:	f846 5022 	str.w	r5, [r6, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90006a04:	f1b9 0f7f 	cmp.w	r9, #127	@ 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006a08:	eb06 0282 	add.w	r2, r6, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90006a0c:	6053      	str	r3, [r2, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90006a0e:	6091      	str	r1, [r2, #8]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90006a10:	d81a      	bhi.n	90006a48 <BSP_I2C4_Init+0x648>
90006a12:	46aa      	mov	sl, r5
            if(presc != prev_presc)
90006a14:	9a10      	ldr	r2, [sp, #64]	@ 0x40
90006a16:	4555      	cmp	r5, sl
90006a18:	bf0c      	ite	eq
90006a1a:	2200      	moveq	r2, #0
90006a1c:	f002 0201 	andne.w	r2, r2, #1
90006a20:	2a00      	cmp	r2, #0
90006a22:	f43f af09 	beq.w	90006838 <BSP_I2C4_Init+0x438>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006a26:	eb09 0189 	add.w	r1, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
90006a2a:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006a2e:	46b2      	mov	sl, r6
90006a30:	f846 5021 	str.w	r5, [r6, r1, lsl #2]
90006a34:	eb06 0181 	add.w	r1, r6, r1, lsl #2
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90006a38:	f1b9 0f7f 	cmp.w	r9, #127	@ 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90006a3c:	604b      	str	r3, [r1, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90006a3e:	f04f 030e 	mov.w	r3, #14
90006a42:	608b      	str	r3, [r1, #8]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90006a44:	f67f af13 	bls.w	9000686e <BSP_I2C4_Init+0x46e>
90006a48:	4b58      	ldr	r3, [pc, #352]	@ (90006bac <BSP_I2C4_Init+0x7ac>)
90006a4a:	4650      	mov	r0, sl
90006a4c:	9c01      	ldr	r4, [sp, #4]
              I2c_valid_timing_nbr ++;
90006a4e:	4649      	mov	r1, r9
90006a50:	9a02      	ldr	r2, [sp, #8]
90006a52:	f8c3 9000 	str.w	r9, [r3]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
90006a56:	2500      	movs	r5, #0
90006a58:	9f00      	ldr	r7, [sp, #0]
90006a5a:	f240 2657 	movw	r6, #599	@ 0x257
90006a5e:	f240 4301 	movw	r3, #1025	@ 0x401
90006a62:	9506      	str	r5, [sp, #24]
90006a64:	f04f 35ff 	mov.w	r5, #4294967295
90006a68:	42be      	cmp	r6, r7
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
90006a6a:	468e      	mov	lr, r1
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
90006a6c:	9501      	str	r5, [sp, #4]
90006a6e:	f102 0532 	add.w	r5, r2, #50	@ 0x32
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
90006a72:	9408      	str	r4, [sp, #32]
90006a74:	eba3 0302 	sub.w	r3, r3, r2
90006a78:	bf38      	it	cc
90006a7a:	463e      	movcc	r6, r7
90006a7c:	f8df 9130 	ldr.w	r9, [pc, #304]	@ 90006bb0 <BSP_I2C4_Init+0x7b0>
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
90006a80:	f640 1bc4 	movw	fp, #2500	@ 0x9c4
90006a84:	f6a2 0c34 	subw	ip, r2, #2100	@ 0x834
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
90006a88:	f240 4a12 	movw	sl, #1042	@ 0x412
90006a8c:	4639      	mov	r1, r7
90006a8e:	462c      	mov	r4, r5
90006a90:	9009      	str	r0, [sp, #36]	@ 0x24
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
90006a92:	f8d9 0000 	ldr.w	r0, [r9]
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
90006a96:	2500      	movs	r5, #0
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
90006a98:	fb00 1001 	mla	r0, r0, r1, r1
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
90006a9c:	1a1a      	subs	r2, r3, r0
90006a9e:	1827      	adds	r7, r4, r0
90006aa0:	ea4f 0842 	mov.w	r8, r2, lsl #1
90006aa4:	eb0c 0200 	add.w	r2, ip, r0
90006aa8:	e9cd 3c0c 	strd	r3, ip, [sp, #48]	@ 0x30
90006aac:	9207      	str	r2, [sp, #28]
90006aae:	468c      	mov	ip, r1
90006ab0:	e9cd e40a 	strd	lr, r4, [sp, #40]	@ 0x28
90006ab4:	e006      	b.n	90006ac4 <BSP_I2C4_Init+0x6c4>
90006ab6:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
90006aba:	4407      	add	r7, r0
90006abc:	eba8 0800 	sub.w	r8, r8, r0
90006ac0:	f43f aed7 	beq.w	90006872 <BSP_I2C4_Init+0x472>
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
90006ac4:	f240 5314 	movw	r3, #1300	@ 0x514
90006ac8:	9500      	str	r5, [sp, #0]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
90006aca:	3501      	adds	r5, #1
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
90006acc:	429f      	cmp	r7, r3
90006ace:	d9f2      	bls.n	90006ab6 <BSP_I2C4_Init+0x6b6>
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
90006ad0:	f1a7 0332 	sub.w	r3, r7, #50	@ 0x32
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
90006ad4:	ebbc 0f93 	cmp.w	ip, r3, lsr #2
90006ad8:	d2ed      	bcs.n	90006ab6 <BSP_I2C4_Init+0x6b6>
90006ada:	f640 0e34 	movw	lr, #2100	@ 0x834
90006ade:	4644      	mov	r4, r8
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
90006ae0:	2200      	movs	r2, #0
90006ae2:	ebae 0e03 	sub.w	lr, lr, r3
90006ae6:	9b07      	ldr	r3, [sp, #28]
90006ae8:	e9cd 5c02 	strd	r5, ip, [sp, #8]
90006aec:	e9cd 7804 	strd	r7, r8, [sp, #16]
90006af0:	443b      	add	r3, r7
90006af2:	f8dd c004 	ldr.w	ip, [sp, #4]
90006af6:	f8dd 8018 	ldr.w	r8, [sp, #24]
90006afa:	e005      	b.n	90006b08 <BSP_I2C4_Init+0x708>
90006afc:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
90006b00:	4403      	add	r3, r0
90006b02:	eba4 0400 	sub.w	r4, r4, r0
90006b06:	d01a      	beq.n	90006b3e <BSP_I2C4_Init+0x73e>
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
90006b08:	eb0e 0103 	add.w	r1, lr, r3
90006b0c:	4617      	mov	r7, r2
90006b0e:	f203 15a1 	addw	r5, r3, #417	@ 0x1a1
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
90006b12:	3201      	adds	r2, #1
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
90006b14:	42b1      	cmp	r1, r6
90006b16:	d9f1      	bls.n	90006afc <BSP_I2C4_Init+0x6fc>
90006b18:	4555      	cmp	r5, sl
90006b1a:	d8ef      	bhi.n	90006afc <BSP_I2C4_Init+0x6fc>
            if (error < 0)
90006b1c:	ea33 0123 	bics.w	r1, r3, r3, asr #32
90006b20:	bf28      	it	cs
90006b22:	4621      	movcs	r1, r4
            if ((uint32_t)error < prev_error)
90006b24:	458b      	cmp	fp, r1
90006b26:	d9e9      	bls.n	90006afc <BSP_I2C4_Init+0x6fc>
              I2c_valid_timing[count].sclh = sclh;
90006b28:	468b      	mov	fp, r1
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
90006b2a:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
              I2c_valid_timing[count].scll = scll;
90006b2e:	9900      	ldr	r1, [sp, #0]
              I2c_valid_timing[count].sclh = sclh;
90006b30:	46c4      	mov	ip, r8
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
90006b32:	4403      	add	r3, r0
90006b34:	eba4 0400 	sub.w	r4, r4, r0
              I2c_valid_timing[count].sclh = sclh;
90006b38:	e9c9 7103 	strd	r7, r1, [r9, #12]
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
90006b3c:	d1e4      	bne.n	90006b08 <BSP_I2C4_Init+0x708>
90006b3e:	f8cd c004 	str.w	ip, [sp, #4]
90006b42:	9d02      	ldr	r5, [sp, #8]
90006b44:	f8dd 8014 	ldr.w	r8, [sp, #20]
90006b48:	e9dd c703 	ldrd	ip, r7, [sp, #12]
90006b4c:	e7b3      	b.n	90006ab6 <BSP_I2C4_Init+0x6b6>
90006b4e:	4602      	mov	r2, r0
90006b50:	e59c      	b.n	9000668c <BSP_I2C4_Init+0x28c>
            if(presc != prev_presc)
90006b52:	4608      	mov	r0, r1
90006b54:	e655      	b.n	90006802 <BSP_I2C4_Init+0x402>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006b56:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
90006b5a:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90006b5e:	2000      	movs	r0, #0
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006b60:	46b2      	mov	sl, r6
90006b62:	f846 5022 	str.w	r5, [r6, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90006b66:	f1b9 0f7f 	cmp.w	r9, #127	@ 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006b6a:	eb06 0282 	add.w	r2, r6, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90006b6e:	6053      	str	r3, [r2, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90006b70:	6090      	str	r0, [r2, #8]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90006b72:	f63f af69 	bhi.w	90006a48 <BSP_I2C4_Init+0x648>
90006b76:	46aa      	mov	sl, r5
90006b78:	e6b0      	b.n	900068dc <BSP_I2C4_Init+0x4dc>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
90006b7a:	3501      	adds	r5, #1
90006b7c:	9b00      	ldr	r3, [sp, #0]
90006b7e:	2d10      	cmp	r5, #16
90006b80:	441f      	add	r7, r3
90006b82:	f47f acc0 	bne.w	90006506 <BSP_I2C4_Init+0x106>
90006b86:	4693      	mov	fp, r2
90006b88:	9c01      	ldr	r4, [sp, #4]
90006b8a:	9911      	ldr	r1, [sp, #68]	@ 0x44
90006b8c:	9a02      	ldr	r2, [sp, #8]
90006b8e:	f1bb 0f00 	cmp.w	fp, #0
90006b92:	d003      	beq.n	90006b9c <BSP_I2C4_Init+0x79c>
90006b94:	4b05      	ldr	r3, [pc, #20]	@ (90006bac <BSP_I2C4_Init+0x7ac>)
90006b96:	4649      	mov	r1, r9
90006b98:	f8c3 9000 	str.w	r9, [r3]
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
90006b9c:	2900      	cmp	r1, #0
90006b9e:	f43f ae92 	beq.w	900068c6 <BSP_I2C4_Init+0x4c6>
90006ba2:	4803      	ldr	r0, [pc, #12]	@ (90006bb0 <BSP_I2C4_Init+0x7b0>)
90006ba4:	e757      	b.n	90006a56 <BSP_I2C4_Init+0x656>
90006ba6:	bf00      	nop
90006ba8:	2400b2d0 	.word	0x2400b2d0
90006bac:	2400b324 	.word	0x2400b324
90006bb0:	2400b328 	.word	0x2400b328

90006bb4 <BSP_I2C4_WriteReg>:
{
90006bb4:	b530      	push	{r4, r5, lr}
90006bb6:	4614      	mov	r4, r2
90006bb8:	b085      	sub	sp, #20
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
90006bba:	f44f 757a 	mov.w	r5, #1000	@ 0x3e8
90006bbe:	460a      	mov	r2, r1
90006bc0:	9301      	str	r3, [sp, #4]
90006bc2:	4601      	mov	r1, r0
90006bc4:	2301      	movs	r3, #1
90006bc6:	4809      	ldr	r0, [pc, #36]	@ (90006bec <BSP_I2C4_WriteReg+0x38>)
90006bc8:	9502      	str	r5, [sp, #8]
90006bca:	9400      	str	r4, [sp, #0]
90006bcc:	f001 f950 	bl	90007e70 <HAL_I2C_Mem_Write>
90006bd0:	b908      	cbnz	r0, 90006bd6 <BSP_I2C4_WriteReg+0x22>
}
90006bd2:	b005      	add	sp, #20
90006bd4:	bd30      	pop	{r4, r5, pc}
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
90006bd6:	4805      	ldr	r0, [pc, #20]	@ (90006bec <BSP_I2C4_WriteReg+0x38>)
90006bd8:	f001 fbbc 	bl	90008354 <HAL_I2C_GetError>
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
90006bdc:	2804      	cmp	r0, #4
90006bde:	bf14      	ite	ne
90006be0:	f06f 0003 	mvnne.w	r0, #3
90006be4:	f06f 0065 	mvneq.w	r0, #101	@ 0x65
90006be8:	e7f3      	b.n	90006bd2 <BSP_I2C4_WriteReg+0x1e>
90006bea:	bf00      	nop
90006bec:	2400b2d0 	.word	0x2400b2d0

90006bf0 <BSP_I2C4_ReadReg>:
{
90006bf0:	b530      	push	{r4, r5, lr}
90006bf2:	4614      	mov	r4, r2
90006bf4:	b085      	sub	sp, #20
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
90006bf6:	f44f 757a 	mov.w	r5, #1000	@ 0x3e8
90006bfa:	460a      	mov	r2, r1
90006bfc:	9301      	str	r3, [sp, #4]
90006bfe:	4601      	mov	r1, r0
90006c00:	2301      	movs	r3, #1
90006c02:	4809      	ldr	r0, [pc, #36]	@ (90006c28 <BSP_I2C4_ReadReg+0x38>)
90006c04:	9502      	str	r5, [sp, #8]
90006c06:	9400      	str	r4, [sp, #0]
90006c08:	f001 fa60 	bl	900080cc <HAL_I2C_Mem_Read>
90006c0c:	b908      	cbnz	r0, 90006c12 <BSP_I2C4_ReadReg+0x22>
}
90006c0e:	b005      	add	sp, #20
90006c10:	bd30      	pop	{r4, r5, pc}
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
90006c12:	4805      	ldr	r0, [pc, #20]	@ (90006c28 <BSP_I2C4_ReadReg+0x38>)
90006c14:	f001 fb9e 	bl	90008354 <HAL_I2C_GetError>
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
90006c18:	2804      	cmp	r0, #4
90006c1a:	bf14      	ite	ne
90006c1c:	f06f 0003 	mvnne.w	r0, #3
90006c20:	f06f 0065 	mvneq.w	r0, #101	@ 0x65
90006c24:	e7f3      	b.n	90006c0e <BSP_I2C4_ReadReg+0x1e>
90006c26:	bf00      	nop
90006c28:	2400b2d0 	.word	0x2400b2d0

90006c2c <BSP_GetTick>:
  return (int32_t)HAL_GetTick();
90006c2c:	f000 baa0 	b.w	90007170 <HAL_GetTick>

90006c30 <BSP_SDRAM_DeInit>:
  */
int32_t BSP_SDRAM_DeInit(uint32_t Instance)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= SDRAM_INSTANCES_NBR)
90006c30:	b970      	cbnz	r0, 90006c50 <BSP_SDRAM_DeInit+0x20>
{
90006c32:	b510      	push	{r4, lr}
90006c34:	4604      	mov	r4, r0
  {
    ret =  BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    (void)HAL_SDRAM_DeInit(&hsdram[Instance]);
90006c36:	4808      	ldr	r0, [pc, #32]	@ (90006c58 <BSP_SDRAM_DeInit+0x28>)
90006c38:	f005 f958 	bl	9000beec <HAL_SDRAM_DeInit>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(hSdram);

  /* Disable NVIC configuration for DMA interrupt */
  HAL_NVIC_DisableIRQ(SDRAM_MDMAx_IRQn);
90006c3c:	207a      	movs	r0, #122	@ 0x7a
90006c3e:	f000 faff 	bl	90007240 <HAL_NVIC_DisableIRQ>

  /* Deinitialize the stream for new transfer */
  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
90006c42:	4b06      	ldr	r3, [pc, #24]	@ (90006c5c <BSP_SDRAM_DeInit+0x2c>)
90006c44:	4806      	ldr	r0, [pc, #24]	@ (90006c60 <BSP_SDRAM_DeInit+0x30>)
90006c46:	6003      	str	r3, [r0, #0]
  (void)HAL_MDMA_DeInit(&mdma_handle);
90006c48:	f003 f958 	bl	90009efc <HAL_MDMA_DeInit>
  int32_t ret = BSP_ERROR_NONE;
90006c4c:	4620      	mov	r0, r4
}
90006c4e:	bd10      	pop	{r4, pc}
    ret =  BSP_ERROR_WRONG_PARAM;
90006c50:	f06f 0001 	mvn.w	r0, #1
}
90006c54:	4770      	bx	lr
90006c56:	bf00      	nop
90006c58:	2400be24 	.word	0x2400be24
90006c5c:	52000040 	.word	0x52000040
90006c60:	2400bd2c 	.word	0x2400bd2c

90006c64 <MX_SDRAM_BANK2_Init>:
{
90006c64:	b530      	push	{r4, r5, lr}
  hSdram->Init.MemoryDataWidth    = MemoryDataWidth;
90006c66:	6102      	str	r2, [r0, #16]
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
90006c68:	2200      	movs	r2, #0
{
90006c6a:	b089      	sub	sp, #36	@ 0x24
  hsdram->Instance = FMC_SDRAM_DEVICE;
90006c6c:	4c13      	ldr	r4, [pc, #76]	@ (90006cbc <MX_SDRAM_BANK2_Init+0x58>)
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
90006c6e:	6082      	str	r2, [r0, #8]
  hsdram->Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
90006c70:	2540      	movs	r5, #64	@ 0x40
  hSdram->Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
90006c72:	61c2      	str	r2, [r0, #28]
  sdram_timing.ExitSelfRefreshDelay = 7;
90006c74:	2307      	movs	r3, #7
  hSdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
90006c76:	6282      	str	r2, [r0, #40]	@ 0x28
  sdram_timing.LoadToActiveDelay    = 2;
90006c78:	2202      	movs	r2, #2
  hSdram->Init.RowBitsNumber      = RowBitsNumber;
90006c7a:	60c1      	str	r1, [r0, #12]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
90006c7c:	f44f 71c0 	mov.w	r1, #384	@ 0x180
  sdram_timing.LoadToActiveDelay    = 2;
90006c80:	9200      	str	r2, [sp, #0]
  sdram_timing.RCDDelay             = 2;
90006c82:	9206      	str	r2, [sp, #24]
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
90006c84:	2201      	movs	r2, #1
  sdram_timing.ExitSelfRefreshDelay = 7;
90006c86:	9301      	str	r3, [sp, #4]
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
90006c88:	6042      	str	r2, [r0, #4]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
90006c8a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
  hsdram->Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
90006c8e:	6165      	str	r5, [r4, #20]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
90006c90:	f44f 6500 	mov.w	r5, #2048	@ 0x800
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
90006c94:	6181      	str	r1, [r0, #24]
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
90006c96:	4669      	mov	r1, sp
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
90006c98:	e9c0 5208 	strd	r5, r2, [r0, #32]
  sdram_timing.SelfRefreshTime      = 4;
90006c9c:	2204      	movs	r2, #4
90006c9e:	e9cd 2302 	strd	r2, r3, [sp, #8]
  sdram_timing.WriteRecoveryTime    = 2;
90006ca2:	2202      	movs	r2, #2
90006ca4:	2302      	movs	r3, #2
90006ca6:	e9cd 2304 	strd	r2, r3, [sp, #16]
  hsdram->Instance = FMC_SDRAM_DEVICE;
90006caa:	4b05      	ldr	r3, [pc, #20]	@ (90006cc0 <MX_SDRAM_BANK2_Init+0x5c>)
90006cac:	6023      	str	r3, [r4, #0]
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
90006cae:	f005 f8f3 	bl	9000be98 <HAL_SDRAM_Init>
}
90006cb2:	3800      	subs	r0, #0
90006cb4:	bf18      	it	ne
90006cb6:	2001      	movne	r0, #1
90006cb8:	b009      	add	sp, #36	@ 0x24
90006cba:	bd30      	pop	{r4, r5, pc}
90006cbc:	2400be24 	.word	0x2400be24
90006cc0:	52004140 	.word	0x52004140

90006cc4 <BSP_SDRAM_Init>:
  if(Instance >=SDRAM_INSTANCES_NBR)
90006cc4:	2800      	cmp	r0, #0
90006cc6:	f040 80cd 	bne.w	90006e64 <BSP_SDRAM_Init+0x1a0>
  __HAL_RCC_FMC_CLK_ENABLE();
90006cca:	4b69      	ldr	r3, [pc, #420]	@ (90006e70 <BSP_SDRAM_Init+0x1ac>)
  gpio_init_structure.Pull      = GPIO_PULLUP;
90006ccc:	2101      	movs	r1, #1
  __HAL_RCC_FMC_CLK_ENABLE();
90006cce:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
90006cd2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
{
90006cd6:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_RCC_FMC_CLK_ENABLE();
90006cd8:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
{
90006cdc:	b08d      	sub	sp, #52	@ 0x34
  __HAL_RCC_FMC_CLK_ENABLE();
90006cde:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
90006ce2:	4605      	mov	r5, r0
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
90006ce4:	2002      	movs	r0, #2
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
90006ce6:	2703      	movs	r7, #3
  __HAL_RCC_FMC_CLK_ENABLE();
90006ce8:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
  mdma_handle.Init.Request = MDMA_REQUEST_SW;
90006cec:	4c61      	ldr	r4, [pc, #388]	@ (90006e74 <BSP_SDRAM_Init+0x1b0>)
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
90006cee:	4e62      	ldr	r6, [pc, #392]	@ (90006e78 <BSP_SDRAM_Init+0x1b4>)
  __HAL_RCC_FMC_CLK_ENABLE();
90006cf0:	9200      	str	r2, [sp, #0]
90006cf2:	9a00      	ldr	r2, [sp, #0]
  SDRAM_MDMAx_CLK_ENABLE();
90006cf4:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
90006cf8:	430a      	orrs	r2, r1
90006cfa:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
90006cfe:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
90006d02:	400a      	ands	r2, r1
90006d04:	9201      	str	r2, [sp, #4]
90006d06:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
90006d08:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
90006d0c:	f042 0208 	orr.w	r2, r2, #8
90006d10:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
90006d14:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
90006d18:	f002 0208 	and.w	r2, r2, #8
90006d1c:	9202      	str	r2, [sp, #8]
90006d1e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
90006d20:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
90006d24:	f042 0210 	orr.w	r2, r2, #16
90006d28:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
90006d2c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
90006d30:	f002 0210 	and.w	r2, r2, #16
90006d34:	9203      	str	r2, [sp, #12]
90006d36:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
90006d38:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
90006d3c:	f042 0220 	orr.w	r2, r2, #32
90006d40:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
90006d44:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
90006d48:	f002 0220 	and.w	r2, r2, #32
90006d4c:	9204      	str	r2, [sp, #16]
90006d4e:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
90006d50:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
90006d54:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
90006d58:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
90006d5c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
90006d60:	f002 0240 	and.w	r2, r2, #64	@ 0x40
90006d64:	9205      	str	r2, [sp, #20]
90006d66:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
90006d68:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
90006d6c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
90006d70:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
90006d74:	220c      	movs	r2, #12
  __HAL_RCC_GPIOH_CLK_ENABLE();
90006d76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
90006d7a:	9008      	str	r0, [sp, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
90006d7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
90006d80:	483e      	ldr	r0, [pc, #248]	@ (90006e7c <BSP_SDRAM_Init+0x1b8>)
  gpio_init_structure.Pull      = GPIO_PULLUP;
90006d82:	9109      	str	r1, [sp, #36]	@ 0x24
  __HAL_RCC_GPIOH_CLK_ENABLE();
90006d84:	9306      	str	r3, [sp, #24]
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
90006d86:	f24c 7303 	movw	r3, #50947	@ 0xc703
  __HAL_RCC_GPIOH_CLK_ENABLE();
90006d8a:	9906      	ldr	r1, [sp, #24]
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
90006d8c:	a907      	add	r1, sp, #28
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
90006d8e:	9307      	str	r3, [sp, #28]
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
90006d90:	e9cd 720a 	strd	r7, r2, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
90006d94:	f000 fc6e 	bl	90007674 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
90006d98:	f64f 7383 	movw	r3, #65411	@ 0xff83
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
90006d9c:	a907      	add	r1, sp, #28
90006d9e:	4838      	ldr	r0, [pc, #224]	@ (90006e80 <BSP_SDRAM_Init+0x1bc>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
90006da0:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
90006da2:	f000 fc67 	bl	90007674 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
90006da6:	f64f 033f 	movw	r3, #63551	@ 0xf83f
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
90006daa:	a907      	add	r1, sp, #28
90006dac:	4835      	ldr	r0, [pc, #212]	@ (90006e84 <BSP_SDRAM_Init+0x1c0>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
90006dae:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
90006db0:	f000 fc60 	bl	90007674 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
90006db4:	f248 1333 	movw	r3, #33075	@ 0x8133
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
90006db8:	a907      	add	r1, sp, #28
90006dba:	4833      	ldr	r0, [pc, #204]	@ (90006e88 <BSP_SDRAM_Init+0x1c4>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
90006dbc:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
90006dbe:	f000 fc59 	bl	90007674 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 ;
90006dc2:	23e0      	movs	r3, #224	@ 0xe0
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
90006dc4:	a907      	add	r1, sp, #28
90006dc6:	4831      	ldr	r0, [pc, #196]	@ (90006e8c <BSP_SDRAM_Init+0x1c8>)
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 ;
90006dc8:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
90006dca:	f000 fc53 	bl	90007674 <HAL_GPIO_Init>
  mdma_handle.Init.Priority = MDMA_PRIORITY_HIGH;
90006dce:	2380      	movs	r3, #128	@ 0x80
  mdma_handle.Init.Request = MDMA_REQUEST_SW;
90006dd0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
  mdma_handle.Init.SourceInc = MDMA_SRC_INC_WORD;
90006dd4:	f240 2102 	movw	r1, #514	@ 0x202
  HAL_MDMA_DeInit(&mdma_handle);
90006dd8:	4620      	mov	r0, r4
  mdma_handle.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
90006dda:	6223      	str	r3, [r4, #32]
  mdma_handle.Init.BufferTransferLength = 128;
90006ddc:	62a3      	str	r3, [r4, #40]	@ 0x28
  mdma_handle.Init.Request = MDMA_REQUEST_SW;
90006dde:	6062      	str	r2, [r4, #4]
  mdma_handle.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
90006de0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
  mdma_handle.Init.SourceInc = MDMA_SRC_INC_WORD;
90006de4:	6161      	str	r1, [r4, #20]
  mdma_handle.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
90006de6:	60a2      	str	r2, [r4, #8]
  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
90006de8:	4a29      	ldr	r2, [pc, #164]	@ (90006e90 <BSP_SDRAM_Init+0x1cc>)
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
90006dea:	6334      	str	r4, [r6, #48]	@ 0x30
  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
90006dec:	6022      	str	r2, [r4, #0]
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
90006dee:	6426      	str	r6, [r4, #64]	@ 0x40
  mdma_handle.Init.Priority = MDMA_PRIORITY_HIGH;
90006df0:	e9c4 3503 	strd	r3, r5, [r4, #12]
  mdma_handle.Init.DestinationInc = MDMA_DEST_INC_WORD;
90006df4:	f640 0308 	movw	r3, #2056	@ 0x808
90006df8:	61a3      	str	r3, [r4, #24]
  mdma_handle.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
90006dfa:	2320      	movs	r3, #32
90006dfc:	61e3      	str	r3, [r4, #28]
  mdma_handle.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
90006dfe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
  mdma_handle.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
90006e02:	e9c4 550b 	strd	r5, r5, [r4, #44]	@ 0x2c
  mdma_handle.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
90006e06:	6263      	str	r3, [r4, #36]	@ 0x24
  mdma_handle.Init.SourceBlockAddressOffset = 0;
90006e08:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
  HAL_MDMA_DeInit(&mdma_handle);
90006e0c:	f003 f876 	bl	90009efc <HAL_MDMA_DeInit>
  HAL_MDMA_Init(&mdma_handle);
90006e10:	4620      	mov	r0, r4
90006e12:	f002 fff9 	bl	90009e08 <HAL_MDMA_Init>
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, 0x0F, 0);
90006e16:	462a      	mov	r2, r5
90006e18:	210f      	movs	r1, #15
90006e1a:	207a      	movs	r0, #122	@ 0x7a
90006e1c:	f000 f9c6 	bl	900071ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
90006e20:	207a      	movs	r0, #122	@ 0x7a
90006e22:	f000 f9ff 	bl	90007224 <HAL_NVIC_EnableIRQ>
    if(MX_SDRAM_BANK2_Init(&hsdram[Instance],FMC_SDRAM_ROW_BITS_NUM_12, FMC_SDRAM_MEM_BUS_WIDTH_16) != HAL_OK)
90006e26:	2210      	movs	r2, #16
90006e28:	2104      	movs	r1, #4
90006e2a:	4630      	mov	r0, r6
90006e2c:	f7ff ff1a 	bl	90006c64 <MX_SDRAM_BANK2_Init>
90006e30:	4603      	mov	r3, r0
90006e32:	b9d0      	cbnz	r0, 90006e6a <BSP_SDRAM_Init+0x1a6>
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
90006e34:	4917      	ldr	r1, [pc, #92]	@ (90006e94 <BSP_SDRAM_Init+0x1d0>)
90006e36:	2208      	movs	r2, #8
      pRegMode.CASLatency      = MT48LC4M32B2_CAS_LATENCY_3;
90006e38:	2430      	movs	r4, #48	@ 0x30
      if(MT48LC4M32B2_Init(&hsdram[Instance], &pRegMode) != MT48LC4M32B2_OK)
90006e3a:	4630      	mov	r0, r6
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
90006e3c:	600a      	str	r2, [r1, #0]
      pRegMode.RefreshRate     = REFRESH_COUNT;
90006e3e:	f240 6203 	movw	r2, #1539	@ 0x603
      pRegMode.RefreshMode     = MT48LC4M32B2_AUTOREFRESH_MODE_CMD;
90006e42:	604f      	str	r7, [r1, #4]
      pRegMode.RefreshRate     = REFRESH_COUNT;
90006e44:	e9c1 2302 	strd	r2, r3, [r1, #8]
      pRegMode.WriteBurstMode  = MT48LC4M32B2_WRITEBURST_MODE_SINGLE;
90006e48:	f44f 7200 	mov.w	r2, #512	@ 0x200
      pRegMode.CASLatency      = MT48LC4M32B2_CAS_LATENCY_3;
90006e4c:	e9c1 3404 	strd	r3, r4, [r1, #16]
      pRegMode.WriteBurstMode  = MT48LC4M32B2_WRITEBURST_MODE_SINGLE;
90006e50:	e9c1 3206 	strd	r3, r2, [r1, #24]
      if(MT48LC4M32B2_Init(&hsdram[Instance], &pRegMode) != MT48LC4M32B2_OK)
90006e54:	f7ff fa30 	bl	900062b8 <MT48LC4M32B2_Init>
        ret =  BSP_ERROR_COMPONENT_FAILURE;
90006e58:	2800      	cmp	r0, #0
90006e5a:	bf18      	it	ne
90006e5c:	f06f 0004 	mvnne.w	r0, #4
}
90006e60:	b00d      	add	sp, #52	@ 0x34
90006e62:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ret =  BSP_ERROR_WRONG_PARAM;
90006e64:	f06f 0001 	mvn.w	r0, #1
}
90006e68:	4770      	bx	lr
      ret = BSP_ERROR_NO_INIT;
90006e6a:	f04f 30ff 	mov.w	r0, #4294967295
90006e6e:	e7f7      	b.n	90006e60 <BSP_SDRAM_Init+0x19c>
90006e70:	58024400 	.word	0x58024400
90006e74:	2400bd98 	.word	0x2400bd98
90006e78:	2400be24 	.word	0x2400be24
90006e7c:	58020c00 	.word	0x58020c00
90006e80:	58021000 	.word	0x58021000
90006e84:	58021400 	.word	0x58021400
90006e88:	58021800 	.word	0x58021800
90006e8c:	58021c00 	.word	0x58021c00
90006e90:	52000040 	.word	0x52000040
90006e94:	2400be04 	.word	0x2400be04

90006e98 <BSP_TS_Init>:
  * @param  Instance TS instance. Could be only 0.
  * @param  TS_Init  TS Init structure
  * @retval BSP status
  */
int32_t BSP_TS_Init(uint32_t Instance, TS_Init_t *TS_Init)
{
90006e98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90006e9c:	b088      	sub	sp, #32
  int32_t ret = BSP_ERROR_NONE;

  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
90006e9e:	2800      	cmp	r0, #0
90006ea0:	d16b      	bne.n	90006f7a <BSP_TS_Init+0xe2>
90006ea2:	680b      	ldr	r3, [r1, #0]
90006ea4:	460d      	mov	r5, r1
90006ea6:	1e5a      	subs	r2, r3, #1
90006ea8:	f5b2 7ff0 	cmp.w	r2, #480	@ 0x1e0
90006eac:	d265      	bcs.n	90006f7a <BSP_TS_Init+0xe2>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
90006eae:	684a      	ldr	r2, [r1, #4]
90006eb0:	1e51      	subs	r1, r2, #1
90006eb2:	f5b1 7f88 	cmp.w	r1, #272	@ 0x110
90006eb6:	d260      	bcs.n	90006f7a <BSP_TS_Init+0xe2>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
90006eb8:	4293      	cmp	r3, r2
90006eba:	bf28      	it	cs
90006ebc:	4613      	movcs	r3, r2
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
90006ebe:	68ea      	ldr	r2, [r5, #12]
90006ec0:	429a      	cmp	r2, r3
90006ec2:	d85a      	bhi.n	90006f7a <BSP_TS_Init+0xe2>
  FT5336_IO_t              IOCtx;
  static FT5336_Object_t   FT5336Obj;
  uint32_t ft5336_id       = 0;

  /* Configure the touch screen driver */
  IOCtx.Address     = TS_I2C_ADDRESS;
90006ec4:	2270      	movs	r2, #112	@ 0x70
  IOCtx.Init        = BSP_I2C4_Init;
90006ec6:	4b31      	ldr	r3, [pc, #196]	@ (90006f8c <BSP_TS_Init+0xf4>)
  IOCtx.DeInit      = BSP_I2C4_DeInit;
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
  IOCtx.GetTick     = BSP_GetTick;

  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
90006ec8:	4c31      	ldr	r4, [pc, #196]	@ (90006f90 <BSP_TS_Init+0xf8>)
90006eca:	a902      	add	r1, sp, #8
  IOCtx.Address     = TS_I2C_ADDRESS;
90006ecc:	f8ad 2010 	strh.w	r2, [sp, #16]
  IOCtx.Init        = BSP_I2C4_Init;
90006ed0:	9302      	str	r3, [sp, #8]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
90006ed2:	4a30      	ldr	r2, [pc, #192]	@ (90006f94 <BSP_TS_Init+0xfc>)
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
90006ed4:	4b30      	ldr	r3, [pc, #192]	@ (90006f98 <BSP_TS_Init+0x100>)
  IOCtx.DeInit      = BSP_I2C4_DeInit;
90006ed6:	9203      	str	r2, [sp, #12]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
90006ed8:	9306      	str	r3, [sp, #24]
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
90006eda:	4a30      	ldr	r2, [pc, #192]	@ (90006f9c <BSP_TS_Init+0x104>)
  IOCtx.GetTick     = BSP_GetTick;
90006edc:	4b30      	ldr	r3, [pc, #192]	@ (90006fa0 <BSP_TS_Init+0x108>)
  uint32_t ft5336_id       = 0;
90006ede:	9001      	str	r0, [sp, #4]
  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
90006ee0:	4620      	mov	r0, r4
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
90006ee2:	9205      	str	r2, [sp, #20]
  IOCtx.GetTick     = BSP_GetTick;
90006ee4:	9307      	str	r3, [sp, #28]
  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
90006ee6:	f7ff f939 	bl	9000615c <FT5336_RegisterBusIO>
90006eea:	2800      	cmp	r0, #0
90006eec:	d14b      	bne.n	90006f86 <BSP_TS_Init+0xee>
  {
    ret = BSP_ERROR_BUS_FAILURE;
  }
  else if(FT5336_ReadID(&FT5336Obj, &ft5336_id) != FT5336_OK)
90006eee:	a901      	add	r1, sp, #4
90006ef0:	4620      	mov	r0, r4
90006ef2:	f7ff f829 	bl	90005f48 <FT5336_ReadID>
90006ef6:	2800      	cmp	r0, #0
90006ef8:	d145      	bne.n	90006f86 <BSP_TS_Init+0xee>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else if(ft5336_id != FT5336_ID)
90006efa:	9b01      	ldr	r3, [sp, #4]
90006efc:	2b51      	cmp	r3, #81	@ 0x51
90006efe:	d142      	bne.n	90006f86 <BSP_TS_Init+0xee>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else
  {
    Ts_CompObj[Instance] = &FT5336Obj;
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
90006f00:	4b28      	ldr	r3, [pc, #160]	@ (90006fa4 <BSP_TS_Init+0x10c>)

    if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT5336_OK)
90006f02:	4620      	mov	r0, r4
    Ts_CompObj[Instance] = &FT5336Obj;
90006f04:	4f28      	ldr	r7, [pc, #160]	@ (90006fa8 <BSP_TS_Init+0x110>)
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
90006f06:	f8df 80a8 	ldr.w	r8, [pc, #168]	@ 90006fb0 <BSP_TS_Init+0x118>
    Ts_CompObj[Instance] = &FT5336Obj;
90006f0a:	603c      	str	r4, [r7, #0]
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
90006f0c:	f8c8 3000 	str.w	r3, [r8]
    if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT5336_OK)
90006f10:	681b      	ldr	r3, [r3, #0]
90006f12:	4798      	blx	r3
90006f14:	4606      	mov	r6, r0
90006f16:	2800      	cmp	r0, #0
90006f18:	d135      	bne.n	90006f86 <BSP_TS_Init+0xee>
      Ts_Ctx[Instance].Width             = TS_Init->Width;
90006f1a:	4c24      	ldr	r4, [pc, #144]	@ (90006fac <BSP_TS_Init+0x114>)
        if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
90006f1c:	a902      	add	r1, sp, #8
90006f1e:	6838      	ldr	r0, [r7, #0]
90006f20:	f8d8 3000 	ldr.w	r3, [r8]
      Ts_Ctx[Instance].Width             = TS_Init->Width;
90006f24:	e9d5 7200 	ldrd	r7, r2, [r5]
        if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
90006f28:	69db      	ldr	r3, [r3, #28]
      Ts_Ctx[Instance].Width             = TS_Init->Width;
90006f2a:	e9c4 7200 	strd	r7, r2, [r4]
90006f2e:	68aa      	ldr	r2, [r5, #8]
90006f30:	60a2      	str	r2, [r4, #8]
90006f32:	68ea      	ldr	r2, [r5, #12]
90006f34:	60e2      	str	r2, [r4, #12]
        if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
90006f36:	4798      	blx	r3
90006f38:	2800      	cmp	r0, #0
90006f3a:	db18      	blt.n	90006f6e <BSP_TS_Init+0xd6>
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
90006f3c:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
90006f40:	e9c4 3204 	strd	r3, r2, [r4, #16]
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
90006f44:	68eb      	ldr	r3, [r5, #12]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
90006f46:	e9d5 2100 	ldrd	r2, r1, [r5]
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
90006f4a:	441a      	add	r2, r3
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
90006f4c:	440b      	add	r3, r1
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
90006f4e:	3201      	adds	r2, #1
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
90006f50:	3301      	adds	r3, #1
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
90006f52:	e9c4 2206 	strd	r2, r2, [r4, #24]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
90006f56:	e9c4 330b 	strd	r3, r3, [r4, #44]	@ 0x2c
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
90006f5a:	e9c4 2208 	strd	r2, r2, [r4, #32]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
90006f5e:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
90006f62:	62a2      	str	r2, [r4, #40]	@ 0x28
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
90006f64:	63e3      	str	r3, [r4, #60]	@ 0x3c
}
90006f66:	4630      	mov	r0, r6
90006f68:	b008      	add	sp, #32
90006f6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ret = BSP_ERROR_COMPONENT_FAILURE;
90006f6e:	f06f 0604 	mvn.w	r6, #4
}
90006f72:	4630      	mov	r0, r6
90006f74:	b008      	add	sp, #32
90006f76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = BSP_ERROR_WRONG_PARAM;
90006f7a:	f06f 0601 	mvn.w	r6, #1
}
90006f7e:	4630      	mov	r0, r6
90006f80:	b008      	add	sp, #32
90006f82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      ret = BSP_ERROR_NO_INIT;
90006f86:	f04f 36ff 	mov.w	r6, #4294967295
90006f8a:	e7ec      	b.n	90006f66 <BSP_TS_Init+0xce>
90006f8c:	90006401 	.word	0x90006401
90006f90:	2400be58 	.word	0x2400be58
90006f94:	9000636d 	.word	0x9000636d
90006f98:	90006bf1 	.word	0x90006bf1
90006f9c:	90006bb5 	.word	0x90006bb5
90006fa0:	90006c2d 	.word	0x90006c2d
90006fa4:	24000024 	.word	0x24000024
90006fa8:	2400bec0 	.word	0x2400bec0
90006fac:	2400be80 	.word	0x2400be80
90006fb0:	2400bec4 	.word	0x2400bec4

90006fb4 <BSP_TS_GetState>:
  if(Instance >= TS_INSTANCES_NBR)
90006fb4:	2800      	cmp	r0, #0
90006fb6:	d154      	bne.n	90007062 <BSP_TS_GetState+0xae>
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
90006fb8:	4b2b      	ldr	r3, [pc, #172]	@ (90007068 <BSP_TS_GetState+0xb4>)
90006fba:	4a2c      	ldr	r2, [pc, #176]	@ (9000706c <BSP_TS_GetState+0xb8>)
90006fbc:	681b      	ldr	r3, [r3, #0]
90006fbe:	6810      	ldr	r0, [r2, #0]
90006fc0:	691b      	ldr	r3, [r3, #16]
{
90006fc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90006fc6:	b084      	sub	sp, #16
90006fc8:	460c      	mov	r4, r1
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
90006fca:	a901      	add	r1, sp, #4
90006fcc:	4798      	blx	r3
90006fce:	2800      	cmp	r0, #0
90006fd0:	db3f      	blt.n	90007052 <BSP_TS_GetState+0x9e>
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
90006fd2:	4b27      	ldr	r3, [pc, #156]	@ (90007070 <BSP_TS_GetState+0xbc>)
    else if(state.TouchDetected != 0U)
90006fd4:	9801      	ldr	r0, [sp, #4]
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
90006fd6:	699e      	ldr	r6, [r3, #24]
        y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
90006fd8:	6add      	ldr	r5, [r3, #44]	@ 0x2c
    else if(state.TouchDetected != 0U)
90006fda:	b930      	cbnz	r0, 90006fea <BSP_TS_GetState+0x36>
      TS_State->TouchDetected = 0U;
90006fdc:	6020      	str	r0, [r4, #0]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
90006fde:	e9c4 6501 	strd	r6, r5, [r4, #4]
  int32_t ret = BSP_ERROR_NONE;
90006fe2:	2000      	movs	r0, #0
}
90006fe4:	b004      	add	sp, #16
90006fe6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
90006fea:	689f      	ldr	r7, [r3, #8]
90006fec:	073a      	lsls	r2, r7, #28
      y_oriented = state.TouchY;
90006fee:	e9dd c802 	ldrd	ip, r8, [sp, #8]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
90006ff2:	d433      	bmi.n	9000705c <BSP_TS_GetState+0xa8>
      y_oriented = state.TouchY;
90006ff4:	4641      	mov	r1, r8
      x_oriented = state.TouchX;
90006ff6:	4662      	mov	r2, ip
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
90006ff8:	f017 0f02 	tst.w	r7, #2
        x_oriented = Ts_Ctx[Instance].MaxX - state.TouchX - 1UL;
90006ffc:	f8d3 e010 	ldr.w	lr, [r3, #16]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
90007000:	d003      	beq.n	9000700a <BSP_TS_GetState+0x56>
        x_oriented = Ts_Ctx[Instance].MaxX - state.TouchX - 1UL;
90007002:	f10e 32ff 	add.w	r2, lr, #4294967295
90007006:	eba2 020c 	sub.w	r2, r2, ip
        y_oriented = Ts_Ctx[Instance].MaxY - state.TouchY;
9000700a:	f8d3 c014 	ldr.w	ip, [r3, #20]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_Y) == TS_SWAP_Y)
9000700e:	077f      	lsls	r7, r7, #29
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
90007010:	681f      	ldr	r7, [r3, #0]
        y_oriented = Ts_Ctx[Instance].MaxY - state.TouchY;
90007012:	bf48      	it	mi
90007014:	ebac 0108 	submi.w	r1, ip, r8
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
90007018:	fb07 f202 	mul.w	r2, r7, r2
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
9000701c:	685f      	ldr	r7, [r3, #4]
      TS_State->TouchDetected = state.TouchDetected;
9000701e:	6020      	str	r0, [r4, #0]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
90007020:	fb07 f101 	mul.w	r1, r7, r1
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
90007024:	fbb2 f2fe 	udiv	r2, r2, lr
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
90007028:	fbb1 f1fc 	udiv	r1, r1, ip
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
9000702c:	42b2      	cmp	r2, r6
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
9000702e:	6062      	str	r2, [r4, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
90007030:	60a1      	str	r1, [r4, #8]
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
90007032:	bf8c      	ite	hi
90007034:	1b90      	subhi	r0, r2, r6
90007036:	1ab0      	subls	r0, r6, r2
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
90007038:	42a9      	cmp	r1, r5
9000703a:	bf8c      	ite	hi
9000703c:	1b4f      	subhi	r7, r1, r5
9000703e:	1a6f      	subls	r7, r5, r1
          if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
90007040:	42b8      	cmp	r0, r7
90007042:	bf38      	it	cc
90007044:	4638      	movcc	r0, r7
90007046:	68df      	ldr	r7, [r3, #12]
90007048:	4287      	cmp	r7, r0
9000704a:	d2c8      	bcs.n	90006fde <BSP_TS_GetState+0x2a>
            Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
9000704c:	619a      	str	r2, [r3, #24]
            Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
9000704e:	62d9      	str	r1, [r3, #44]	@ 0x2c
90007050:	e7c7      	b.n	90006fe2 <BSP_TS_GetState+0x2e>
      ret = BSP_ERROR_COMPONENT_FAILURE;
90007052:	f06f 0004 	mvn.w	r0, #4
}
90007056:	b004      	add	sp, #16
90007058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        y_oriented = state.TouchX;
9000705c:	4661      	mov	r1, ip
        x_oriented = state.TouchY;
9000705e:	4642      	mov	r2, r8
90007060:	e7ca      	b.n	90006ff8 <BSP_TS_GetState+0x44>
    ret = BSP_ERROR_WRONG_PARAM;
90007062:	f06f 0001 	mvn.w	r0, #1
}
90007066:	4770      	bx	lr
90007068:	2400bec4 	.word	0x2400bec4
9000706c:	2400bec0 	.word	0x2400bec0
90007070:	2400be80 	.word	0x2400be80

90007074 <SystemInit>:
#endif

extern unsigned int VECTOR_TABLE_LOCATION;

void SystemInit (void)
{
90007074:	b410      	push	{r4}
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
90007076:	4c19      	ldr	r4, [pc, #100]	@ (900070dc <SystemInit+0x68>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
90007078:	2200      	movs	r2, #0
  RCC->CR |= RCC_CR_HSION;
9000707a:	4b19      	ldr	r3, [pc, #100]	@ (900070e0 <SystemInit+0x6c>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
9000707c:	f8d4 1088 	ldr.w	r1, [r4, #136]	@ 0x88

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
90007080:	4818      	ldr	r0, [pc, #96]	@ (900070e4 <SystemInit+0x70>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
90007082:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
90007086:	f8c4 1088 	str.w	r1, [r4, #136]	@ 0x88
  RCC->CR |= RCC_CR_HSION;
9000708a:	6819      	ldr	r1, [r3, #0]
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
9000708c:	4c16      	ldr	r4, [pc, #88]	@ (900070e8 <SystemInit+0x74>)
  RCC->CR |= RCC_CR_HSION;
9000708e:	f041 0101 	orr.w	r1, r1, #1
90007092:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
90007094:	611a      	str	r2, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
90007096:	6819      	ldr	r1, [r3, #0]
90007098:	4008      	ands	r0, r1
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
9000709a:	4914      	ldr	r1, [pc, #80]	@ (900070ec <SystemInit+0x78>)
  RCC->CR &= 0xEAF6ED7FU;
9000709c:	6018      	str	r0, [r3, #0]
  RCC->D1CFGR = 0x00000000;
9000709e:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
900070a0:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
900070a2:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x00000000;
900070a4:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLLCFGR = 0x00000000;
900070a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC->PLL1DIVR = 0x00000000;
900070a8:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC->PLL1FRACR = 0x00000000;
900070aa:	635a      	str	r2, [r3, #52]	@ 0x34
  RCC->PLL2DIVR = 0x00000000;
900070ac:	639a      	str	r2, [r3, #56]	@ 0x38
  RCC->PLL2FRACR = 0x00000000;
900070ae:	63da      	str	r2, [r3, #60]	@ 0x3c
  RCC->PLL3DIVR = 0x00000000;
900070b0:	641a      	str	r2, [r3, #64]	@ 0x40
  RCC->PLL3FRACR = 0x00000000;
900070b2:	645a      	str	r2, [r3, #68]	@ 0x44
  RCC->CR &= 0xFFFBFFFFU;
900070b4:	6818      	ldr	r0, [r3, #0]
900070b6:	f420 2080 	bic.w	r0, r0, #262144	@ 0x40000
900070ba:	6018      	str	r0, [r3, #0]
  RCC->CIER = 0x00000000;
900070bc:	661a      	str	r2, [r3, #96]	@ 0x60
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
900070be:	6823      	ldr	r3, [r4, #0]
900070c0:	4019      	ands	r1, r3
900070c2:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
900070c6:	d203      	bcs.n	900070d0 <SystemInit+0x5c>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
900070c8:	4b09      	ldr	r3, [pc, #36]	@ (900070f0 <SystemInit+0x7c>)
900070ca:	2201      	movs	r2, #1
900070cc:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#elif defined(VECT_TAB_QSPI)
  SCB->VTOR = (unsigned int)&VECTOR_TABLE_LOCATION; /* Vector Table Relocation in External FLASH */
900070d0:	4a08      	ldr	r2, [pc, #32]	@ (900070f4 <SystemInit+0x80>)
900070d2:	4b02      	ldr	r3, [pc, #8]	@ (900070dc <SystemInit+0x68>)
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
900070d4:	f85d 4b04 	ldr.w	r4, [sp], #4
  SCB->VTOR = (unsigned int)&VECTOR_TABLE_LOCATION; /* Vector Table Relocation in External FLASH */
900070d8:	609a      	str	r2, [r3, #8]
}
900070da:	4770      	bx	lr
900070dc:	e000ed00 	.word	0xe000ed00
900070e0:	58024400 	.word	0x58024400
900070e4:	eaf6ed7f 	.word	0xeaf6ed7f
900070e8:	5c001000 	.word	0x5c001000
900070ec:	ffff0000 	.word	0xffff0000
900070f0:	51008000 	.word	0x51008000
900070f4:	90000000 	.word	0x90000000

900070f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
900070f8:	b510      	push	{r4, lr}
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
900070fa:	2003      	movs	r0, #3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
900070fc:	4c12      	ldr	r4, [pc, #72]	@ (90007148 <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
900070fe:	f000 f843 	bl	90007188 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
90007102:	f003 fc17 	bl	9000a934 <HAL_RCC_GetSysClockFreq>
90007106:	4b11      	ldr	r3, [pc, #68]	@ (9000714c <HAL_Init+0x54>)
90007108:	4911      	ldr	r1, [pc, #68]	@ (90007150 <HAL_Init+0x58>)
9000710a:	699a      	ldr	r2, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000710c:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
9000710e:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
90007112:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
90007116:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
90007118:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
9000711a:	f002 021f 	and.w	r2, r2, #31
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
9000711e:	490d      	ldr	r1, [pc, #52]	@ (90007154 <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
90007120:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
90007124:	40d0      	lsrs	r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
90007126:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = common_system_clock;
9000712a:	6008      	str	r0, [r1, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
9000712c:	2000      	movs	r0, #0
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000712e:	6023      	str	r3, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
90007130:	f7f9 ff72 	bl	90001018 <HAL_InitTick>
90007134:	b110      	cbz	r0, 9000713c <HAL_Init+0x44>
  {
    return HAL_ERROR;
90007136:	2401      	movs	r4, #1
  /* Init the low level hardware */
  HAL_MspInit();

  /* Return function status */
  return HAL_OK;
}
90007138:	4620      	mov	r0, r4
9000713a:	bd10      	pop	{r4, pc}
9000713c:	4604      	mov	r4, r0
  HAL_MspInit();
9000713e:	f7f9 fd29 	bl	90000b94 <HAL_MspInit>
}
90007142:	4620      	mov	r0, r4
90007144:	bd10      	pop	{r4, pc}
90007146:	bf00      	nop
90007148:	24000054 	.word	0x24000054
9000714c:	58024400 	.word	0x58024400
90007150:	90026294 	.word	0x90026294
90007154:	24000058 	.word	0x24000058

90007158 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
90007158:	4a03      	ldr	r2, [pc, #12]	@ (90007168 <HAL_IncTick+0x10>)
9000715a:	4b04      	ldr	r3, [pc, #16]	@ (9000716c <HAL_IncTick+0x14>)
9000715c:	6811      	ldr	r1, [r2, #0]
9000715e:	781b      	ldrb	r3, [r3, #0]
90007160:	440b      	add	r3, r1
90007162:	6013      	str	r3, [r2, #0]
}
90007164:	4770      	bx	lr
90007166:	bf00      	nop
90007168:	2400bec8 	.word	0x2400bec8
9000716c:	2400005c 	.word	0x2400005c

90007170 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
90007170:	4b01      	ldr	r3, [pc, #4]	@ (90007178 <HAL_GetTick+0x8>)
90007172:	6818      	ldr	r0, [r3, #0]
}
90007174:	4770      	bx	lr
90007176:	bf00      	nop
90007178:	2400bec8 	.word	0x2400bec8

9000717c <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
9000717c:	4b01      	ldr	r3, [pc, #4]	@ (90007184 <HAL_GetREVID+0x8>)
9000717e:	6818      	ldr	r0, [r3, #0]
}
90007180:	0c00      	lsrs	r0, r0, #16
90007182:	4770      	bx	lr
90007184:	5c001000 	.word	0x5c001000

90007188 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
90007188:	4906      	ldr	r1, [pc, #24]	@ (900071a4 <HAL_NVIC_SetPriorityGrouping+0x1c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
9000718a:	f64f 0cff 	movw	ip, #63743	@ 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
9000718e:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
90007190:	4b05      	ldr	r3, [pc, #20]	@ (900071a8 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
90007192:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
90007194:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
90007198:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
9000719c:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
9000719e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
900071a0:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
900071a2:	4770      	bx	lr
900071a4:	e000ed00 	.word	0xe000ed00
900071a8:	05fa0000 	.word	0x05fa0000

900071ac <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
900071ac:	4b1a      	ldr	r3, [pc, #104]	@ (90007218 <HAL_NVIC_SetPriority+0x6c>)
900071ae:	68db      	ldr	r3, [r3, #12]
900071b0:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
900071b4:	b500      	push	{lr}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
900071b6:	f1c3 0e07 	rsb	lr, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
900071ba:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
900071be:	f1be 0f04 	cmp.w	lr, #4
900071c2:	bf28      	it	cs
900071c4:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
900071c8:	f1bc 0f06 	cmp.w	ip, #6
900071cc:	d91a      	bls.n	90007204 <HAL_NVIC_SetPriority+0x58>
900071ce:	f1a3 0c03 	sub.w	ip, r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
900071d2:	f04f 33ff 	mov.w	r3, #4294967295
900071d6:	fa03 f30c 	lsl.w	r3, r3, ip
900071da:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
900071de:	f04f 33ff 	mov.w	r3, #4294967295
  if ((int32_t)(IRQn) >= 0)
900071e2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
900071e4:	fa03 f30e 	lsl.w	r3, r3, lr
900071e8:	ea21 0303 	bic.w	r3, r1, r3
900071ec:	fa03 f30c 	lsl.w	r3, r3, ip
900071f0:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
900071f4:	ea4f 1303 	mov.w	r3, r3, lsl #4
900071f8:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
900071fa:	db06      	blt.n	9000720a <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
900071fc:	4a07      	ldr	r2, [pc, #28]	@ (9000721c <HAL_NVIC_SetPriority+0x70>)
900071fe:	5413      	strb	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
90007200:	f85d fb04 	ldr.w	pc, [sp], #4
90007204:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
90007206:	4694      	mov	ip, r2
90007208:	e7e9      	b.n	900071de <HAL_NVIC_SetPriority+0x32>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
9000720a:	f000 000f 	and.w	r0, r0, #15
9000720e:	4a04      	ldr	r2, [pc, #16]	@ (90007220 <HAL_NVIC_SetPriority+0x74>)
90007210:	5413      	strb	r3, [r2, r0]
90007212:	f85d fb04 	ldr.w	pc, [sp], #4
90007216:	bf00      	nop
90007218:	e000ed00 	.word	0xe000ed00
9000721c:	e000e400 	.word	0xe000e400
90007220:	e000ed14 	.word	0xe000ed14

90007224 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
90007224:	2800      	cmp	r0, #0
90007226:	db07      	blt.n	90007238 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
90007228:	2301      	movs	r3, #1
9000722a:	f000 011f 	and.w	r1, r0, #31
9000722e:	4a03      	ldr	r2, [pc, #12]	@ (9000723c <HAL_NVIC_EnableIRQ+0x18>)
90007230:	0940      	lsrs	r0, r0, #5
90007232:	408b      	lsls	r3, r1
90007234:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
90007238:	4770      	bx	lr
9000723a:	bf00      	nop
9000723c:	e000e100 	.word	0xe000e100

90007240 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
90007240:	2800      	cmp	r0, #0
90007242:	db0c      	blt.n	9000725e <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
90007244:	0943      	lsrs	r3, r0, #5
90007246:	2201      	movs	r2, #1
90007248:	f000 001f 	and.w	r0, r0, #31
9000724c:	4904      	ldr	r1, [pc, #16]	@ (90007260 <HAL_NVIC_DisableIRQ+0x20>)
9000724e:	3320      	adds	r3, #32
90007250:	4082      	lsls	r2, r0
90007252:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
90007256:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
9000725a:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
9000725e:	4770      	bx	lr
90007260:	e000e100 	.word	0xe000e100

90007264 <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
90007264:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
90007268:	4b04      	ldr	r3, [pc, #16]	@ (9000727c <HAL_MPU_Disable+0x18>)

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
9000726a:	2100      	movs	r1, #0
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
9000726c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
9000726e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
90007272:	625a      	str	r2, [r3, #36]	@ 0x24
  MPU->CTRL = 0;
90007274:	f8c3 1094 	str.w	r1, [r3, #148]	@ 0x94
}
90007278:	4770      	bx	lr
9000727a:	bf00      	nop
9000727c:	e000ed00 	.word	0xe000ed00

90007280 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
90007280:	4b06      	ldr	r3, [pc, #24]	@ (9000729c <HAL_MPU_Enable+0x1c>)
90007282:	f040 0001 	orr.w	r0, r0, #1
90007286:	f8c3 0094 	str.w	r0, [r3, #148]	@ 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
9000728a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
9000728c:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
90007290:	625a      	str	r2, [r3, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
90007292:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
90007296:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
9000729a:	4770      	bx	lr
9000729c:	e000ed00 	.word	0xe000ed00

900072a0 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
900072a0:	4a17      	ldr	r2, [pc, #92]	@ (90007300 <HAL_MPU_ConfigRegion+0x60>)
900072a2:	7843      	ldrb	r3, [r0, #1]
900072a4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  if ((MPU_Init->Enable) != 0UL)
900072a8:	7801      	ldrb	r1, [r0, #0]
900072aa:	b321      	cbz	r1, 900072f6 <HAL_MPU_ConfigRegion+0x56>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
900072ac:	6843      	ldr	r3, [r0, #4]
{
900072ae:	b500      	push	{lr}
    MPU->RBAR = MPU_Init->BaseAddress;
900072b0:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
900072b4:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
900072b6:	f890 c00c 	ldrb.w	ip, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
900072ba:	061b      	lsls	r3, r3, #24
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
900072bc:	f890 e00f 	ldrb.w	lr, [r0, #15]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
900072c0:	ea43 730c 	orr.w	r3, r3, ip, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
900072c4:	f890 c00a 	ldrb.w	ip, [r0, #10]
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
900072c8:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
900072ca:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
900072cc:	ea43 43cc 	orr.w	r3, r3, ip, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
900072d0:	f890 c00d 	ldrb.w	ip, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
900072d4:	ea43 438c 	orr.w	r3, r3, ip, lsl #18
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
900072d8:	f890 c009 	ldrb.w	ip, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
900072dc:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
900072e0:	7a01      	ldrb	r1, [r0, #8]
900072e2:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
900072e6:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
900072ea:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
900072ee:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
900072f2:	f85d fb04 	ldr.w	pc, [sp], #4
    MPU->RBAR = 0x00;
900072f6:	f8c2 109c 	str.w	r1, [r2, #156]	@ 0x9c
    MPU->RASR = 0x00;
900072fa:	f8c2 10a0 	str.w	r1, [r2, #160]	@ 0xa0
900072fe:	4770      	bx	lr
90007300:	e000ed00 	.word	0xe000ed00

90007304 <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
90007304:	2800      	cmp	r0, #0
90007306:	d036      	beq.n	90007376 <HAL_CRC_Init+0x72>
{
90007308:	b510      	push	{r4, lr}
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
9000730a:	7f43      	ldrb	r3, [r0, #29]
9000730c:	4604      	mov	r4, r0
9000730e:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
90007312:	b363      	cbz	r3, 9000736e <HAL_CRC_Init+0x6a>
    hcrc->Lock = HAL_UNLOCKED;
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
90007314:	2202      	movs	r2, #2

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
90007316:	7923      	ldrb	r3, [r4, #4]
  hcrc->State = HAL_CRC_STATE_BUSY;
90007318:	7762      	strb	r2, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
9000731a:	b9f3      	cbnz	r3, 9000735a <HAL_CRC_Init+0x56>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
9000731c:	6823      	ldr	r3, [r4, #0]
9000731e:	4a17      	ldr	r2, [pc, #92]	@ (9000737c <HAL_CRC_Init+0x78>)
90007320:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
90007322:	689a      	ldr	r2, [r3, #8]
90007324:	f022 0218 	bic.w	r2, r2, #24
90007328:	609a      	str	r2, [r3, #8]
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
9000732a:	7962      	ldrb	r2, [r4, #5]
9000732c:	b18a      	cbz	r2, 90007352 <HAL_CRC_Init+0x4e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
9000732e:	6922      	ldr	r2, [r4, #16]
90007330:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
90007332:	689a      	ldr	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
90007334:	e9d4 0105 	ldrd	r0, r1, [r4, #20]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
90007338:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
9000733c:	4302      	orrs	r2, r0

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
9000733e:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
90007340:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
90007342:	689a      	ldr	r2, [r3, #8]
90007344:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
90007348:	430a      	orrs	r2, r1
  hcrc->State = HAL_CRC_STATE_READY;
9000734a:	2101      	movs	r1, #1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
9000734c:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
9000734e:	7761      	strb	r1, [r4, #29]
}
90007350:	bd10      	pop	{r4, pc}
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
90007352:	f04f 32ff 	mov.w	r2, #4294967295
90007356:	611a      	str	r2, [r3, #16]
90007358:	e7eb      	b.n	90007332 <HAL_CRC_Init+0x2e>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
9000735a:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
9000735e:	4620      	mov	r0, r4
90007360:	f000 f80e 	bl	90007380 <HAL_CRCEx_Polynomial_Set>
90007364:	b908      	cbnz	r0, 9000736a <HAL_CRC_Init+0x66>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
90007366:	6823      	ldr	r3, [r4, #0]
90007368:	e7df      	b.n	9000732a <HAL_CRC_Init+0x26>
    return HAL_ERROR;
9000736a:	2001      	movs	r0, #1
}
9000736c:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
9000736e:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
90007370:	f7f9 fc2a 	bl	90000bc8 <HAL_CRC_MspInit>
90007374:	e7ce      	b.n	90007314 <HAL_CRC_Init+0x10>
    return HAL_ERROR;
90007376:	2001      	movs	r0, #1
}
90007378:	4770      	bx	lr
9000737a:	bf00      	nop
9000737c:	04c11db7 	.word	0x04c11db7

90007380 <HAL_CRCEx_Polynomial_Set>:

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */ 
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
90007380:	07cb      	lsls	r3, r1, #31
90007382:	d51a      	bpl.n	900073ba <HAL_CRCEx_Polynomial_Set+0x3a>
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
90007384:	231f      	movs	r3, #31
{
90007386:	b410      	push	{r4}
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
90007388:	3b01      	subs	r3, #1
9000738a:	1c5c      	adds	r4, r3, #1
9000738c:	fa21 fc03 	lsr.w	ip, r1, r3
90007390:	d015      	beq.n	900073be <HAL_CRCEx_Polynomial_Set+0x3e>
90007392:	f01c 0f01 	tst.w	ip, #1
90007396:	d0f7      	beq.n	90007388 <HAL_CRCEx_Polynomial_Set+0x8>
    {
    }

    switch (PolyLength)
90007398:	2a18      	cmp	r2, #24
9000739a:	d811      	bhi.n	900073c0 <HAL_CRCEx_Polynomial_Set+0x40>
9000739c:	e8df f002 	tbb	[pc, r2]
900073a0:	10101016 	.word	0x10101016
900073a4:	10101010 	.word	0x10101010
900073a8:	10101024 	.word	0x10101024
900073ac:	10101010 	.word	0x10101010
900073b0:	10101021 	.word	0x10101021
900073b4:	10101010 	.word	0x10101010
900073b8:	14          	.byte	0x14
900073b9:	00          	.byte	0x00
900073ba:	2001      	movs	r0, #1
    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
}
900073bc:	4770      	bx	lr
    switch (PolyLength)
900073be:	b12a      	cbz	r2, 900073cc <HAL_CRCEx_Polynomial_Set+0x4c>
900073c0:	2001      	movs	r0, #1
}
900073c2:	f85d 4b04 	ldr.w	r4, [sp], #4
900073c6:	4770      	bx	lr
        if (msb >= HAL_CRC_LENGTH_7B)
900073c8:	2b06      	cmp	r3, #6
900073ca:	d8f9      	bhi.n	900073c0 <HAL_CRCEx_Polynomial_Set+0x40>
    WRITE_REG(hcrc->Instance->POL, Pol);
900073cc:	6804      	ldr	r4, [r0, #0]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
900073ce:	2000      	movs	r0, #0
    WRITE_REG(hcrc->Instance->POL, Pol);
900073d0:	6161      	str	r1, [r4, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
900073d2:	68a3      	ldr	r3, [r4, #8]
900073d4:	f023 0318 	bic.w	r3, r3, #24
900073d8:	4313      	orrs	r3, r2
900073da:	60a3      	str	r3, [r4, #8]
}
900073dc:	f85d 4b04 	ldr.w	r4, [sp], #4
900073e0:	4770      	bx	lr
        if (msb >= HAL_CRC_LENGTH_8B)
900073e2:	2b07      	cmp	r3, #7
900073e4:	d9f2      	bls.n	900073cc <HAL_CRCEx_Polynomial_Set+0x4c>
900073e6:	e7eb      	b.n	900073c0 <HAL_CRCEx_Polynomial_Set+0x40>
        if (msb >= HAL_CRC_LENGTH_16B)
900073e8:	2b0f      	cmp	r3, #15
900073ea:	d9ef      	bls.n	900073cc <HAL_CRCEx_Polynomial_Set+0x4c>
900073ec:	e7e8      	b.n	900073c0 <HAL_CRCEx_Polynomial_Set+0x40>
900073ee:	bf00      	nop

900073f0 <HAL_DMA2D_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
900073f0:	2800      	cmp	r0, #0
900073f2:	d035      	beq.n	90007460 <HAL_DMA2D_Init+0x70>
{
900073f4:	b538      	push	{r3, r4, r5, lr}

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
900073f6:	f890 3061 	ldrb.w	r3, [r0, #97]	@ 0x61
900073fa:	4604      	mov	r4, r0
900073fc:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
90007400:	b34b      	cbz	r3, 90007456 <HAL_DMA2D_Init+0x66>

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
90007402:	6823      	ldr	r3, [r4, #0]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
90007404:	2002      	movs	r0, #2
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
90007406:	6862      	ldr	r2, [r4, #4]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
90007408:	f884 0061 	strb.w	r0, [r4, #97]	@ 0x61
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
9000740c:	69e1      	ldr	r1, [r4, #28]
9000740e:	681d      	ldr	r5, [r3, #0]
90007410:	4814      	ldr	r0, [pc, #80]	@ (90007464 <HAL_DMA2D_Init+0x74>)
90007412:	4311      	orrs	r1, r2

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
90007414:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
90007416:	4028      	ands	r0, r5
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
90007418:	68e5      	ldr	r5, [r4, #12]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
9000741a:	4301      	orrs	r1, r0
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
9000741c:	69a0      	ldr	r0, [r4, #24]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
9000741e:	6019      	str	r1, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
90007420:	4302      	orrs	r2, r0
90007422:	6b59      	ldr	r1, [r3, #52]	@ 0x34
90007424:	4810      	ldr	r0, [pc, #64]	@ (90007468 <HAL_DMA2D_Init+0x78>)
90007426:	4008      	ands	r0, r1
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
90007428:	4910      	ldr	r1, [pc, #64]	@ (9000746c <HAL_DMA2D_Init+0x7c>)
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
9000742a:	4302      	orrs	r2, r0
9000742c:	635a      	str	r2, [r3, #52]	@ 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
9000742e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
90007430:	4011      	ands	r1, r2
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
90007432:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
90007436:	4329      	orrs	r1, r5
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
90007438:	0552      	lsls	r2, r2, #21
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
9000743a:	6419      	str	r1, [r3, #64]	@ 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
9000743c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
9000743e:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
90007442:	2000      	movs	r0, #0
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
90007444:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
90007448:	430a      	orrs	r2, r1
9000744a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
9000744c:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
9000744e:	6660      	str	r0, [r4, #100]	@ 0x64
  hdma2d->State  = HAL_DMA2D_STATE_READY;
90007450:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61

  return HAL_OK;
}
90007454:	bd38      	pop	{r3, r4, r5, pc}
    hdma2d->Lock = HAL_UNLOCKED;
90007456:	f880 2060 	strb.w	r2, [r0, #96]	@ 0x60
    HAL_DMA2D_MspInit(hdma2d);
9000745a:	f7f9 fbcd 	bl	90000bf8 <HAL_DMA2D_MspInit>
9000745e:	e7d0      	b.n	90007402 <HAL_DMA2D_Init+0x12>
    return HAL_ERROR;
90007460:	2001      	movs	r0, #1
}
90007462:	4770      	bx	lr
90007464:	fff8ffbf 	.word	0xfff8ffbf
90007468:	fffffef8 	.word	0xfffffef8
9000746c:	ffff0000 	.word	0xffff0000

90007470 <HAL_DMA2D_LineEventCallback>:
  * @brief  Transfer watermark callback.
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
90007470:	4770      	bx	lr
90007472:	bf00      	nop

90007474 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @brief  CLUT Transfer Complete callback.
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
90007474:	4770      	bx	lr
90007476:	bf00      	nop

90007478 <HAL_DMA2D_IRQHandler>:
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
90007478:	6803      	ldr	r3, [r0, #0]
{
9000747a:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
9000747c:	685d      	ldr	r5, [r3, #4]
{
9000747e:	4604      	mov	r4, r0
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
90007480:	681e      	ldr	r6, [r3, #0]
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
90007482:	07ea      	lsls	r2, r5, #31
90007484:	d501      	bpl.n	9000748a <HAL_DMA2D_IRQHandler+0x12>
    if ((crflags & DMA2D_IT_TE) != 0U)
90007486:	05f1      	lsls	r1, r6, #23
90007488:	d456      	bmi.n	90007538 <HAL_DMA2D_IRQHandler+0xc0>
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
9000748a:	06aa      	lsls	r2, r5, #26
9000748c:	d501      	bpl.n	90007492 <HAL_DMA2D_IRQHandler+0x1a>
    if ((crflags & DMA2D_IT_CE) != 0U)
9000748e:	04b3      	lsls	r3, r6, #18
90007490:	d43b      	bmi.n	9000750a <HAL_DMA2D_IRQHandler+0x92>
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
90007492:	0728      	lsls	r0, r5, #28
90007494:	d501      	bpl.n	9000749a <HAL_DMA2D_IRQHandler+0x22>
    if ((crflags & DMA2D_IT_CAE) != 0U)
90007496:	0531      	lsls	r1, r6, #20
90007498:	d421      	bmi.n	900074de <HAL_DMA2D_IRQHandler+0x66>
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
9000749a:	076a      	lsls	r2, r5, #29
9000749c:	d501      	bpl.n	900074a2 <HAL_DMA2D_IRQHandler+0x2a>
    if ((crflags & DMA2D_IT_TW) != 0U)
9000749e:	0573      	lsls	r3, r6, #21
900074a0:	d472      	bmi.n	90007588 <HAL_DMA2D_IRQHandler+0x110>
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
900074a2:	07a8      	lsls	r0, r5, #30
900074a4:	d501      	bpl.n	900074aa <HAL_DMA2D_IRQHandler+0x32>
    if ((crflags & DMA2D_IT_TC) != 0U)
900074a6:	05b1      	lsls	r1, r6, #22
900074a8:	d404      	bmi.n	900074b4 <HAL_DMA2D_IRQHandler+0x3c>
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
900074aa:	06ea      	lsls	r2, r5, #27
900074ac:	d501      	bpl.n	900074b2 <HAL_DMA2D_IRQHandler+0x3a>
    if ((crflags & DMA2D_IT_CTC) != 0U)
900074ae:	04f3      	lsls	r3, r6, #19
900074b0:	d457      	bmi.n	90007562 <HAL_DMA2D_IRQHandler+0xea>
}
900074b2:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
900074b4:	6823      	ldr	r3, [r4, #0]
900074b6:	681a      	ldr	r2, [r3, #0]
900074b8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
900074bc:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
900074be:	2202      	movs	r2, #2
900074c0:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_READY;
900074c2:	2201      	movs	r2, #1
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
900074c4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
900074c6:	6663      	str	r3, [r4, #100]	@ 0x64
      __HAL_UNLOCK(hdma2d);
900074c8:	2300      	movs	r3, #0
      hdma2d->State = HAL_DMA2D_STATE_READY;
900074ca:	f884 2061 	strb.w	r2, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
900074ce:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      if (hdma2d->XferCpltCallback != NULL)
900074d2:	6a23      	ldr	r3, [r4, #32]
900074d4:	2b00      	cmp	r3, #0
900074d6:	d0e8      	beq.n	900074aa <HAL_DMA2D_IRQHandler+0x32>
        hdma2d->XferCpltCallback(hdma2d);
900074d8:	4620      	mov	r0, r4
900074da:	4798      	blx	r3
900074dc:	e7e5      	b.n	900074aa <HAL_DMA2D_IRQHandler+0x32>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
900074de:	6823      	ldr	r3, [r4, #0]
900074e0:	681a      	ldr	r2, [r3, #0]
900074e2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
900074e6:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
900074e8:	2208      	movs	r2, #8
900074ea:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
900074ec:	2204      	movs	r2, #4
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
900074ee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
900074f0:	4313      	orrs	r3, r2
900074f2:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
900074f4:	f884 2061 	strb.w	r2, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
900074f8:	2200      	movs	r2, #0
      if (hdma2d->XferErrorCallback != NULL)
900074fa:	6a63      	ldr	r3, [r4, #36]	@ 0x24
      __HAL_UNLOCK(hdma2d);
900074fc:	f884 2060 	strb.w	r2, [r4, #96]	@ 0x60
      if (hdma2d->XferErrorCallback != NULL)
90007500:	2b00      	cmp	r3, #0
90007502:	d0ca      	beq.n	9000749a <HAL_DMA2D_IRQHandler+0x22>
        hdma2d->XferErrorCallback(hdma2d);
90007504:	4620      	mov	r0, r4
90007506:	4798      	blx	r3
90007508:	e7c7      	b.n	9000749a <HAL_DMA2D_IRQHandler+0x22>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
9000750a:	6823      	ldr	r3, [r4, #0]
9000750c:	681a      	ldr	r2, [r3, #0]
9000750e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
90007512:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
90007514:	2220      	movs	r2, #32
90007516:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
90007518:	2204      	movs	r2, #4
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
9000751a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
9000751c:	f043 0302 	orr.w	r3, r3, #2
90007520:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
90007522:	f884 2061 	strb.w	r2, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
90007526:	2200      	movs	r2, #0
      if (hdma2d->XferErrorCallback != NULL)
90007528:	6a63      	ldr	r3, [r4, #36]	@ 0x24
      __HAL_UNLOCK(hdma2d);
9000752a:	f884 2060 	strb.w	r2, [r4, #96]	@ 0x60
      if (hdma2d->XferErrorCallback != NULL)
9000752e:	2b00      	cmp	r3, #0
90007530:	d0af      	beq.n	90007492 <HAL_DMA2D_IRQHandler+0x1a>
        hdma2d->XferErrorCallback(hdma2d);
90007532:	4620      	mov	r0, r4
90007534:	4798      	blx	r3
90007536:	e7ac      	b.n	90007492 <HAL_DMA2D_IRQHandler+0x1a>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
90007538:	681a      	ldr	r2, [r3, #0]
9000753a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
9000753e:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
90007540:	6e42      	ldr	r2, [r0, #100]	@ 0x64
90007542:	f042 0201 	orr.w	r2, r2, #1
90007546:	6642      	str	r2, [r0, #100]	@ 0x64
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
90007548:	2201      	movs	r2, #1
9000754a:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
9000754c:	2304      	movs	r3, #4
9000754e:	f880 3061 	strb.w	r3, [r0, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
90007552:	2300      	movs	r3, #0
90007554:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
      if (hdma2d->XferErrorCallback != NULL)
90007558:	6a43      	ldr	r3, [r0, #36]	@ 0x24
9000755a:	2b00      	cmp	r3, #0
9000755c:	d095      	beq.n	9000748a <HAL_DMA2D_IRQHandler+0x12>
        hdma2d->XferErrorCallback(hdma2d);
9000755e:	4798      	blx	r3
90007560:	e793      	b.n	9000748a <HAL_DMA2D_IRQHandler+0x12>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
90007562:	6823      	ldr	r3, [r4, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
90007564:	2010      	movs	r0, #16
      hdma2d->State = HAL_DMA2D_STATE_READY;
90007566:	2101      	movs	r1, #1
      __HAL_UNLOCK(hdma2d);
90007568:	2500      	movs	r5, #0
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
9000756a:	681a      	ldr	r2, [r3, #0]
9000756c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
90007570:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
90007572:	6098      	str	r0, [r3, #8]
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
90007574:	4620      	mov	r0, r4
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
90007576:	6e63      	ldr	r3, [r4, #100]	@ 0x64
      __HAL_UNLOCK(hdma2d);
90007578:	f884 5060 	strb.w	r5, [r4, #96]	@ 0x60
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
9000757c:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
9000757e:	f884 1061 	strb.w	r1, [r4, #97]	@ 0x61
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
90007582:	f7ff ff77 	bl	90007474 <HAL_DMA2D_CLUTLoadingCpltCallback>
}
90007586:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
90007588:	6823      	ldr	r3, [r4, #0]
      HAL_DMA2D_LineEventCallback(hdma2d);
9000758a:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
9000758c:	681a      	ldr	r2, [r3, #0]
9000758e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
90007592:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
90007594:	2204      	movs	r2, #4
90007596:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
90007598:	f7ff ff6a 	bl	90007470 <HAL_DMA2D_LineEventCallback>
9000759c:	e781      	b.n	900074a2 <HAL_DMA2D_IRQHandler+0x2a>
9000759e:	bf00      	nop

900075a0 <HAL_DMA2D_ConfigLayer>:
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
900075a0:	f890 2060 	ldrb.w	r2, [r0, #96]	@ 0x60
900075a4:	2a01      	cmp	r2, #1
900075a6:	d05f      	beq.n	90007668 <HAL_DMA2D_ConfigLayer+0xc8>
900075a8:	4603      	mov	r3, r0
  hdma2d->State = HAL_DMA2D_STATE_BUSY;

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
900075aa:	ebc1 00c1 	rsb	r0, r1, r1, lsl #3
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
900075ae:	2202      	movs	r2, #2
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
900075b0:	ea4f 0cc1 	mov.w	ip, r1, lsl #3
900075b4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
{
900075b8:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma2d);
900075ba:	2401      	movs	r4, #1
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
900075bc:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
  __HAL_LOCK(hdma2d);
900075c0:	f883 4060 	strb.w	r4, [r3, #96]	@ 0x60
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
900075c4:	6b82      	ldr	r2, [r0, #56]	@ 0x38
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
900075c6:	6b04      	ldr	r4, [r0, #48]	@ 0x30
900075c8:	6ac5      	ldr	r5, [r0, #44]	@ 0x2c
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
900075ca:	0512      	lsls	r2, r2, #20
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
900075cc:	6b46      	ldr	r6, [r0, #52]	@ 0x34
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
900075ce:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
900075d2:	f1a5 0e09 	sub.w	lr, r5, #9
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
900075d6:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
900075d8:	432a      	orrs	r2, r5
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
900075da:	f1be 0f01 	cmp.w	lr, #1
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
900075de:	ea42 5244 	orr.w	r2, r2, r4, lsl #21

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
900075e2:	681c      	ldr	r4, [r3, #0]
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
900075e4:	d923      	bls.n	9000762e <HAL_DMA2D_ConfigLayer+0x8e>
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
900075e6:	ea42 6206 	orr.w	r2, r2, r6, lsl #24
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
900075ea:	b971      	cbnz	r1, 9000760a <HAL_DMA2D_ConfigLayer+0x6a>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
900075ec:	6a60      	ldr	r0, [r4, #36]	@ 0x24
900075ee:	491f      	ldr	r1, [pc, #124]	@ (9000766c <HAL_DMA2D_ConfigLayer+0xcc>)
900075f0:	4001      	ands	r1, r0

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
900075f2:	6a98      	ldr	r0, [r3, #40]	@ 0x28
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
900075f4:	4311      	orrs	r1, r2
900075f6:	6261      	str	r1, [r4, #36]	@ 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
900075f8:	61a0      	str	r0, [r4, #24]
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
900075fa:	2200      	movs	r2, #0
  hdma2d->State = HAL_DMA2D_STATE_READY;
900075fc:	2101      	movs	r1, #1

  return HAL_OK;
900075fe:	4610      	mov	r0, r2
  hdma2d->State = HAL_DMA2D_STATE_READY;
90007600:	f883 1061 	strb.w	r1, [r3, #97]	@ 0x61
  __HAL_UNLOCK(hdma2d);
90007604:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
}
90007608:	bd70      	pop	{r4, r5, r6, pc}
    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
9000760a:	2d0b      	cmp	r5, #11
9000760c:	d12a      	bne.n	90007664 <HAL_DMA2D_ConfigLayer+0xc4>
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
9000760e:	6c00      	ldr	r0, [r0, #64]	@ 0x40
90007610:	ea42 4280 	orr.w	r2, r2, r0, lsl #18
90007614:	4816      	ldr	r0, [pc, #88]	@ (90007670 <HAL_DMA2D_ConfigLayer+0xd0>)
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
90007616:	ebac 0c01 	sub.w	ip, ip, r1
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
9000761a:	69e1      	ldr	r1, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
9000761c:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
90007620:	4001      	ands	r1, r0
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
90007622:	f8dc 5028 	ldr.w	r5, [ip, #40]	@ 0x28
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
90007626:	430a      	orrs	r2, r1
90007628:	61e2      	str	r2, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
9000762a:	6125      	str	r5, [r4, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
9000762c:	e7e5      	b.n	900075fa <HAL_DMA2D_ConfigLayer+0x5a>
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
9000762e:	f006 457f 	and.w	r5, r6, #4278190080	@ 0xff000000
90007632:	432a      	orrs	r2, r5
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
90007634:	b959      	cbnz	r1, 9000764e <HAL_DMA2D_ConfigLayer+0xae>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
90007636:	6a60      	ldr	r0, [r4, #36]	@ 0x24
90007638:	490c      	ldr	r1, [pc, #48]	@ (9000766c <HAL_DMA2D_ConfigLayer+0xcc>)
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
9000763a:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
9000763c:	4001      	ands	r1, r0
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
9000763e:	6b58      	ldr	r0, [r3, #52]	@ 0x34
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
90007640:	4311      	orrs	r1, r2
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
90007642:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
90007646:	6261      	str	r1, [r4, #36]	@ 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
90007648:	61a5      	str	r5, [r4, #24]
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
9000764a:	62a0      	str	r0, [r4, #40]	@ 0x28
9000764c:	e7d5      	b.n	900075fa <HAL_DMA2D_ConfigLayer+0x5a>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
9000764e:	69e5      	ldr	r5, [r4, #28]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
90007650:	f026 467f 	bic.w	r6, r6, #4278190080	@ 0xff000000
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
90007654:	4905      	ldr	r1, [pc, #20]	@ (9000766c <HAL_DMA2D_ConfigLayer+0xcc>)
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
90007656:	6a80      	ldr	r0, [r0, #40]	@ 0x28
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
90007658:	4029      	ands	r1, r5
9000765a:	4311      	orrs	r1, r2
9000765c:	61e1      	str	r1, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
9000765e:	6120      	str	r0, [r4, #16]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
90007660:	6226      	str	r6, [r4, #32]
90007662:	e7ca      	b.n	900075fa <HAL_DMA2D_ConfigLayer+0x5a>
90007664:	4801      	ldr	r0, [pc, #4]	@ (9000766c <HAL_DMA2D_ConfigLayer+0xcc>)
90007666:	e7d6      	b.n	90007616 <HAL_DMA2D_ConfigLayer+0x76>
  __HAL_LOCK(hdma2d);
90007668:	2002      	movs	r0, #2
}
9000766a:	4770      	bx	lr
9000766c:	00ccfff0 	.word	0x00ccfff0
90007670:	00c0fff0 	.word	0x00c0fff0

90007674 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
90007674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
90007678:	680c      	ldr	r4, [r1, #0]
{
9000767a:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00U)
9000767c:	2c00      	cmp	r4, #0
9000767e:	f000 80a5 	beq.w	900077cc <HAL_GPIO_Init+0x158>
  uint32_t position = 0x00U;
90007682:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
90007684:	f04f 0b01 	mov.w	fp, #1
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
90007688:	f04f 4eb0 	mov.w	lr, #1476395008	@ 0x58000000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
9000768c:	9100      	str	r1, [sp, #0]
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
9000768e:	fa0b fc03 	lsl.w	ip, fp, r3
    if (iocurrent != 0x00U)
90007692:	ea1c 0a04 	ands.w	sl, ip, r4
90007696:	f000 8094 	beq.w	900077c2 <HAL_GPIO_Init+0x14e>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
9000769a:	9900      	ldr	r1, [sp, #0]
9000769c:	005f      	lsls	r7, r3, #1
9000769e:	684d      	ldr	r5, [r1, #4]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
900076a0:	2103      	movs	r1, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
900076a2:	f005 0203 	and.w	r2, r5, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
900076a6:	fa01 f607 	lsl.w	r6, r1, r7
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
900076aa:	f102 38ff 	add.w	r8, r2, #4294967295
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
900076ae:	43f6      	mvns	r6, r6
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
900076b0:	f1b8 0f01 	cmp.w	r8, #1
900076b4:	f240 808d 	bls.w	900077d2 <HAL_GPIO_Init+0x15e>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
900076b8:	2a03      	cmp	r2, #3
900076ba:	f040 80cb 	bne.w	90007854 <HAL_GPIO_Init+0x1e0>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
900076be:	40ba      	lsls	r2, r7
      temp = GPIOx->MODER;
900076c0:	6807      	ldr	r7, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
900076c2:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
900076c6:	ea06 0607 	and.w	r6, r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
900076ca:	ea42 0206 	orr.w	r2, r2, r6
      GPIOx->MODER = temp;
900076ce:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
900076d0:	d077      	beq.n	900077c2 <HAL_GPIO_Init+0x14e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
900076d2:	4e7f      	ldr	r6, [pc, #508]	@ (900078d0 <HAL_GPIO_Init+0x25c>)
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
900076d4:	f003 0703 	and.w	r7, r3, #3
900076d8:	210f      	movs	r1, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
900076da:	f8d6 20f4 	ldr.w	r2, [r6, #244]	@ 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
900076de:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
900076e0:	f042 0202 	orr.w	r2, r2, #2
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
900076e4:	fa01 fc07 	lsl.w	ip, r1, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
900076e8:	497a      	ldr	r1, [pc, #488]	@ (900078d4 <HAL_GPIO_Init+0x260>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
900076ea:	f8c6 20f4 	str.w	r2, [r6, #244]	@ 0xf4
900076ee:	f8d6 20f4 	ldr.w	r2, [r6, #244]	@ 0xf4
900076f2:	f023 0603 	bic.w	r6, r3, #3
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
900076f6:	4288      	cmp	r0, r1
900076f8:	f106 46b0 	add.w	r6, r6, #1476395008	@ 0x58000000
        __HAL_RCC_SYSCFG_CLK_ENABLE();
900076fc:	f002 0202 	and.w	r2, r2, #2
90007700:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
90007704:	9203      	str	r2, [sp, #12]
90007706:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
90007708:	68b2      	ldr	r2, [r6, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
9000770a:	ea22 020c 	bic.w	r2, r2, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
9000770e:	d031      	beq.n	90007774 <HAL_GPIO_Init+0x100>
90007710:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
90007714:	4288      	cmp	r0, r1
90007716:	f000 80b0 	beq.w	9000787a <HAL_GPIO_Init+0x206>
9000771a:	496f      	ldr	r1, [pc, #444]	@ (900078d8 <HAL_GPIO_Init+0x264>)
9000771c:	4288      	cmp	r0, r1
9000771e:	f000 80b2 	beq.w	90007886 <HAL_GPIO_Init+0x212>
90007722:	f8df c1b8 	ldr.w	ip, [pc, #440]	@ 900078dc <HAL_GPIO_Init+0x268>
90007726:	4560      	cmp	r0, ip
90007728:	f000 80a1 	beq.w	9000786e <HAL_GPIO_Init+0x1fa>
9000772c:	f8df c1b0 	ldr.w	ip, [pc, #432]	@ 900078e0 <HAL_GPIO_Init+0x26c>
90007730:	4560      	cmp	r0, ip
90007732:	f000 80b4 	beq.w	9000789e <HAL_GPIO_Init+0x22a>
90007736:	f8df c1ac 	ldr.w	ip, [pc, #428]	@ 900078e4 <HAL_GPIO_Init+0x270>
9000773a:	4560      	cmp	r0, ip
9000773c:	f000 80b5 	beq.w	900078aa <HAL_GPIO_Init+0x236>
90007740:	f8df c1a4 	ldr.w	ip, [pc, #420]	@ 900078e8 <HAL_GPIO_Init+0x274>
90007744:	4560      	cmp	r0, ip
90007746:	f000 80a4 	beq.w	90007892 <HAL_GPIO_Init+0x21e>
9000774a:	f8df c1a0 	ldr.w	ip, [pc, #416]	@ 900078ec <HAL_GPIO_Init+0x278>
9000774e:	4560      	cmp	r0, ip
90007750:	f000 80b1 	beq.w	900078b6 <HAL_GPIO_Init+0x242>
90007754:	f8df c198 	ldr.w	ip, [pc, #408]	@ 900078f0 <HAL_GPIO_Init+0x27c>
90007758:	4560      	cmp	r0, ip
9000775a:	f000 80b2 	beq.w	900078c2 <HAL_GPIO_Init+0x24e>
9000775e:	f8df c194 	ldr.w	ip, [pc, #404]	@ 900078f4 <HAL_GPIO_Init+0x280>
90007762:	4560      	cmp	r0, ip
90007764:	bf0c      	ite	eq
90007766:	f04f 0c09 	moveq.w	ip, #9
9000776a:	f04f 0c0a 	movne.w	ip, #10
9000776e:	fa0c f707 	lsl.w	r7, ip, r7
90007772:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
90007774:	60b2      	str	r2, [r6, #8]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
90007776:	02ef      	lsls	r7, r5, #11
        temp = EXTI->RTSR1;
90007778:	f8de 2000 	ldr.w	r2, [lr]
        temp &= ~(iocurrent);
9000777c:	ea6f 060a 	mvn.w	r6, sl
        {
          temp |= iocurrent;
90007780:	bf4c      	ite	mi
90007782:	ea4a 0202 	orrmi.w	r2, sl, r2
        temp &= ~(iocurrent);
90007786:	4032      	andpl	r2, r6
        }
        EXTI->RTSR1 = temp;

        temp = EXTI->FTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
90007788:	02a9      	lsls	r1, r5, #10
        EXTI->RTSR1 = temp;
9000778a:	f8ce 2000 	str.w	r2, [lr]
        temp = EXTI->FTSR1;
9000778e:	f8de 2004 	ldr.w	r2, [lr, #4]
        temp &= ~(iocurrent);
90007792:	bf54      	ite	pl
90007794:	4032      	andpl	r2, r6
        {
          temp |= iocurrent;
90007796:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->FTSR1 = temp;

        temp = EXTI_CurrentCPU->EMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
9000779a:	03af      	lsls	r7, r5, #14
        EXTI->FTSR1 = temp;
9000779c:	f8ce 2004 	str.w	r2, [lr, #4]
        temp = EXTI_CurrentCPU->EMR1;
900077a0:	f8de 2084 	ldr.w	r2, [lr, #132]	@ 0x84
        temp &= ~(iocurrent);
900077a4:	bf54      	ite	pl
900077a6:	4032      	andpl	r2, r6
        {
          temp |= iocurrent;
900077a8:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI_CurrentCPU->EMR1 = temp;

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
900077ac:	03e9      	lsls	r1, r5, #15
        EXTI_CurrentCPU->EMR1 = temp;
900077ae:	f8ce 2084 	str.w	r2, [lr, #132]	@ 0x84
        temp = EXTI_CurrentCPU->IMR1;
900077b2:	f8de 2080 	ldr.w	r2, [lr, #128]	@ 0x80
        temp &= ~(iocurrent);
900077b6:	bf54      	ite	pl
900077b8:	4032      	andpl	r2, r6
        {
          temp |= iocurrent;
900077ba:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI_CurrentCPU->IMR1 = temp;
900077be:	f8ce 2080 	str.w	r2, [lr, #128]	@ 0x80
      }
    }

    position++;
900077c2:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
900077c4:	fa34 f203 	lsrs.w	r2, r4, r3
900077c8:	f47f af61 	bne.w	9000768e <HAL_GPIO_Init+0x1a>
  }
}
900077cc:	b005      	add	sp, #20
900077ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= (GPIO_Init->Speed << (position * 2U));
900077d2:	9900      	ldr	r1, [sp, #0]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
900077d4:	2a02      	cmp	r2, #2
        temp = GPIOx->OSPEEDR;
900077d6:	f8d0 9008 	ldr.w	r9, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
900077da:	68c9      	ldr	r1, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
900077dc:	ea09 0906 	and.w	r9, r9, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
900077e0:	fa01 f807 	lsl.w	r8, r1, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
900077e4:	9900      	ldr	r1, [sp, #0]
        temp |= (GPIO_Init->Speed << (position * 2U));
900077e6:	ea48 0809 	orr.w	r8, r8, r9
      temp |= ((GPIO_Init->Pull) << (position * 2U));
900077ea:	6889      	ldr	r1, [r1, #8]
        GPIOx->OSPEEDR = temp;
900077ec:	f8c0 8008 	str.w	r8, [r0, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
900077f0:	f3c5 1800 	ubfx	r8, r5, #4, #1
        temp = GPIOx->OTYPER;
900077f4:	f8d0 9004 	ldr.w	r9, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
900077f8:	fa08 f803 	lsl.w	r8, r8, r3
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
900077fc:	ea29 0c0c 	bic.w	ip, r9, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
90007800:	ea48 0c0c 	orr.w	ip, r8, ip
        GPIOx->OTYPER = temp;
90007804:	f8c0 c004 	str.w	ip, [r0, #4]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
90007808:	fa01 fc07 	lsl.w	ip, r1, r7
      temp = GPIOx->PUPDR;
9000780c:	f8d0 800c 	ldr.w	r8, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
90007810:	ea08 0806 	and.w	r8, r8, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
90007814:	ea4c 0c08 	orr.w	ip, ip, r8
      GPIOx->PUPDR = temp;
90007818:	f8c0 c00c 	str.w	ip, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
9000781c:	f47f af4f 	bne.w	900076be <HAL_GPIO_Init+0x4a>
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
90007820:	f003 0c07 	and.w	ip, r3, #7
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
90007824:	9900      	ldr	r1, [sp, #0]
        temp = GPIOx->AFR[position >> 3U];
90007826:	ea4f 08d3 	mov.w	r8, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
9000782a:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
9000782e:	6909      	ldr	r1, [r1, #16]
90007830:	eb00 0888 	add.w	r8, r0, r8, lsl #2
90007834:	fa01 f10c 	lsl.w	r1, r1, ip
        temp = GPIOx->AFR[position >> 3U];
90007838:	f8d8 9020 	ldr.w	r9, [r8, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
9000783c:	9101      	str	r1, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
9000783e:	210f      	movs	r1, #15
90007840:	fa01 fc0c 	lsl.w	ip, r1, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
90007844:	9901      	ldr	r1, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
90007846:	ea29 090c 	bic.w	r9, r9, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
9000784a:	ea41 0c09 	orr.w	ip, r1, r9
        GPIOx->AFR[position >> 3U] = temp;
9000784e:	f8c8 c020 	str.w	ip, [r8, #32]
90007852:	e734      	b.n	900076be <HAL_GPIO_Init+0x4a>
      temp |= ((GPIO_Init->Pull) << (position * 2U));
90007854:	9900      	ldr	r1, [sp, #0]
      temp = GPIOx->PUPDR;
90007856:	f8d0 800c 	ldr.w	r8, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
9000785a:	6889      	ldr	r1, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
9000785c:	ea08 0806 	and.w	r8, r8, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
90007860:	fa01 fc07 	lsl.w	ip, r1, r7
90007864:	ea4c 0c08 	orr.w	ip, ip, r8
      GPIOx->PUPDR = temp;
90007868:	f8c0 c00c 	str.w	ip, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
9000786c:	e727      	b.n	900076be <HAL_GPIO_Init+0x4a>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
9000786e:	f04f 0c03 	mov.w	ip, #3
90007872:	fa0c f707 	lsl.w	r7, ip, r7
90007876:	433a      	orrs	r2, r7
90007878:	e77c      	b.n	90007774 <HAL_GPIO_Init+0x100>
9000787a:	f04f 0c01 	mov.w	ip, #1
9000787e:	fa0c f707 	lsl.w	r7, ip, r7
90007882:	433a      	orrs	r2, r7
90007884:	e776      	b.n	90007774 <HAL_GPIO_Init+0x100>
90007886:	f04f 0c02 	mov.w	ip, #2
9000788a:	fa0c f707 	lsl.w	r7, ip, r7
9000788e:	433a      	orrs	r2, r7
90007890:	e770      	b.n	90007774 <HAL_GPIO_Init+0x100>
90007892:	f04f 0c06 	mov.w	ip, #6
90007896:	fa0c f707 	lsl.w	r7, ip, r7
9000789a:	433a      	orrs	r2, r7
9000789c:	e76a      	b.n	90007774 <HAL_GPIO_Init+0x100>
9000789e:	f04f 0c04 	mov.w	ip, #4
900078a2:	fa0c f707 	lsl.w	r7, ip, r7
900078a6:	433a      	orrs	r2, r7
900078a8:	e764      	b.n	90007774 <HAL_GPIO_Init+0x100>
900078aa:	f04f 0c05 	mov.w	ip, #5
900078ae:	fa0c f707 	lsl.w	r7, ip, r7
900078b2:	433a      	orrs	r2, r7
900078b4:	e75e      	b.n	90007774 <HAL_GPIO_Init+0x100>
900078b6:	f04f 0c07 	mov.w	ip, #7
900078ba:	fa0c f707 	lsl.w	r7, ip, r7
900078be:	433a      	orrs	r2, r7
900078c0:	e758      	b.n	90007774 <HAL_GPIO_Init+0x100>
900078c2:	f04f 0c08 	mov.w	ip, #8
900078c6:	fa0c f707 	lsl.w	r7, ip, r7
900078ca:	433a      	orrs	r2, r7
900078cc:	e752      	b.n	90007774 <HAL_GPIO_Init+0x100>
900078ce:	bf00      	nop
900078d0:	58024400 	.word	0x58024400
900078d4:	58020000 	.word	0x58020000
900078d8:	58020800 	.word	0x58020800
900078dc:	58020c00 	.word	0x58020c00
900078e0:	58021000 	.word	0x58021000
900078e4:	58021400 	.word	0x58021400
900078e8:	58021800 	.word	0x58021800
900078ec:	58021c00 	.word	0x58021c00
900078f0:	58022000 	.word	0x58022000
900078f4:	58022400 	.word	0x58022400

900078f8 <HAL_GPIO_DeInit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
900078f8:	2900      	cmp	r1, #0
900078fa:	f000 80ac 	beq.w	90007a56 <HAL_GPIO_DeInit+0x15e>
  uint32_t position = 0x00U;
900078fe:	2300      	movs	r3, #0
{
90007900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
90007904:	2601      	movs	r6, #1
{
90007906:	b083      	sub	sp, #12
90007908:	f8df a168 	ldr.w	sl, [pc, #360]	@ 90007a74 <HAL_GPIO_DeInit+0x17c>
    if (iocurrent != 0x00U)
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
9000790c:	f04f 080f 	mov.w	r8, #15
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
90007910:	f04f 0903 	mov.w	r9, #3
    iocurrent = GPIO_Pin & (1UL << position) ;
90007914:	fa06 f203 	lsl.w	r2, r6, r3
    if (iocurrent != 0x00U)
90007918:	ea12 0c01 	ands.w	ip, r2, r1
9000791c:	d073      	beq.n	90007a06 <HAL_GPIO_DeInit+0x10e>
      tmp = SYSCFG->EXTICR[position >> 2U];
9000791e:	f023 0503 	bic.w	r5, r3, #3
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
90007922:	f003 0403 	and.w	r4, r3, #3
90007926:	4455      	add	r5, sl
90007928:	00a4      	lsls	r4, r4, #2
      tmp = SYSCFG->EXTICR[position >> 2U];
9000792a:	68af      	ldr	r7, [r5, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
9000792c:	fa08 fe04 	lsl.w	lr, r8, r4
90007930:	ea0e 0707 	and.w	r7, lr, r7
90007934:	9701      	str	r7, [sp, #4]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
90007936:	4f4b      	ldr	r7, [pc, #300]	@ (90007a64 <HAL_GPIO_DeInit+0x16c>)
90007938:	42b8      	cmp	r0, r7
9000793a:	d027      	beq.n	9000798c <HAL_GPIO_DeInit+0x94>
9000793c:	f507 6780 	add.w	r7, r7, #1024	@ 0x400
90007940:	42b8      	cmp	r0, r7
90007942:	d067      	beq.n	90007a14 <HAL_GPIO_DeInit+0x11c>
90007944:	4f48      	ldr	r7, [pc, #288]	@ (90007a68 <HAL_GPIO_DeInit+0x170>)
90007946:	42b8      	cmp	r0, r7
90007948:	d067      	beq.n	90007a1a <HAL_GPIO_DeInit+0x122>
9000794a:	4f48      	ldr	r7, [pc, #288]	@ (90007a6c <HAL_GPIO_DeInit+0x174>)
9000794c:	42b8      	cmp	r0, r7
9000794e:	d06e      	beq.n	90007a2e <HAL_GPIO_DeInit+0x136>
90007950:	4f47      	ldr	r7, [pc, #284]	@ (90007a70 <HAL_GPIO_DeInit+0x178>)
90007952:	42b8      	cmp	r0, r7
90007954:	d070      	beq.n	90007a38 <HAL_GPIO_DeInit+0x140>
90007956:	f8df b120 	ldr.w	fp, [pc, #288]	@ 90007a78 <HAL_GPIO_DeInit+0x180>
9000795a:	4558      	cmp	r0, fp
9000795c:	d062      	beq.n	90007a24 <HAL_GPIO_DeInit+0x12c>
9000795e:	f8df b11c 	ldr.w	fp, [pc, #284]	@ 90007a7c <HAL_GPIO_DeInit+0x184>
90007962:	4558      	cmp	r0, fp
90007964:	d072      	beq.n	90007a4c <HAL_GPIO_DeInit+0x154>
90007966:	f8df b118 	ldr.w	fp, [pc, #280]	@ 90007a80 <HAL_GPIO_DeInit+0x188>
9000796a:	4558      	cmp	r0, fp
9000796c:	d074      	beq.n	90007a58 <HAL_GPIO_DeInit+0x160>
9000796e:	f8df b114 	ldr.w	fp, [pc, #276]	@ 90007a84 <HAL_GPIO_DeInit+0x18c>
90007972:	4558      	cmp	r0, fp
90007974:	d065      	beq.n	90007a42 <HAL_GPIO_DeInit+0x14a>
90007976:	f8df b110 	ldr.w	fp, [pc, #272]	@ 90007a88 <HAL_GPIO_DeInit+0x190>
9000797a:	4558      	cmp	r0, fp
9000797c:	bf14      	ite	ne
9000797e:	f04f 0b0a 	movne.w	fp, #10
90007982:	f04f 0b09 	moveq.w	fp, #9
90007986:	fa0b f404 	lsl.w	r4, fp, r4
9000798a:	e000      	b.n	9000798e <HAL_GPIO_DeInit+0x96>
9000798c:	2400      	movs	r4, #0
9000798e:	9f01      	ldr	r7, [sp, #4]
90007990:	42a7      	cmp	r7, r4
90007992:	d119      	bne.n	900079c8 <HAL_GPIO_DeInit+0xd0>
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
90007994:	f04f 44b0 	mov.w	r4, #1476395008	@ 0x58000000
90007998:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
9000799c:	ea27 070c 	bic.w	r7, r7, ip
900079a0:	f8c4 7080 	str.w	r7, [r4, #128]	@ 0x80
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
900079a4:	f8d4 7084 	ldr.w	r7, [r4, #132]	@ 0x84
900079a8:	ea27 070c 	bic.w	r7, r7, ip
900079ac:	f8c4 7084 	str.w	r7, [r4, #132]	@ 0x84
        EXTI->FTSR1 &= ~(iocurrent);
900079b0:	6867      	ldr	r7, [r4, #4]
900079b2:	ea27 070c 	bic.w	r7, r7, ip
900079b6:	6067      	str	r7, [r4, #4]
        EXTI->RTSR1 &= ~(iocurrent);
900079b8:	6827      	ldr	r7, [r4, #0]
900079ba:	ea27 070c 	bic.w	r7, r7, ip
900079be:	6027      	str	r7, [r4, #0]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
900079c0:	68ac      	ldr	r4, [r5, #8]
900079c2:	ea24 040e 	bic.w	r4, r4, lr
900079c6:	60ac      	str	r4, [r5, #8]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
900079c8:	005d      	lsls	r5, r3, #1
900079ca:	6804      	ldr	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
900079cc:	08df      	lsrs	r7, r3, #3
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
900079ce:	fa09 f505 	lsl.w	r5, r9, r5
900079d2:	eb00 0787 	add.w	r7, r0, r7, lsl #2
900079d6:	432c      	orrs	r4, r5
900079d8:	6004      	str	r4, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
900079da:	f003 0407 	and.w	r4, r3, #7
900079de:	f8d7 c020 	ldr.w	ip, [r7, #32]
900079e2:	00a4      	lsls	r4, r4, #2
900079e4:	fa08 f404 	lsl.w	r4, r8, r4
900079e8:	ea2c 0404 	bic.w	r4, ip, r4
900079ec:	623c      	str	r4, [r7, #32]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
900079ee:	68c4      	ldr	r4, [r0, #12]
900079f0:	ea24 0405 	bic.w	r4, r4, r5
900079f4:	60c4      	str	r4, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
900079f6:	6844      	ldr	r4, [r0, #4]
900079f8:	ea24 0202 	bic.w	r2, r4, r2
900079fc:	6042      	str	r2, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
900079fe:	6882      	ldr	r2, [r0, #8]
90007a00:	ea22 0205 	bic.w	r2, r2, r5
90007a04:	6082      	str	r2, [r0, #8]
    }

    position++;
90007a06:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00U)
90007a08:	fa31 f203 	lsrs.w	r2, r1, r3
90007a0c:	d182      	bne.n	90007914 <HAL_GPIO_DeInit+0x1c>
  }
}
90007a0e:	b003      	add	sp, #12
90007a10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
90007a14:	fa06 f404 	lsl.w	r4, r6, r4
90007a18:	e7b9      	b.n	9000798e <HAL_GPIO_DeInit+0x96>
90007a1a:	f04f 0b02 	mov.w	fp, #2
90007a1e:	fa0b f404 	lsl.w	r4, fp, r4
90007a22:	e7b4      	b.n	9000798e <HAL_GPIO_DeInit+0x96>
90007a24:	f04f 0b05 	mov.w	fp, #5
90007a28:	fa0b f404 	lsl.w	r4, fp, r4
90007a2c:	e7af      	b.n	9000798e <HAL_GPIO_DeInit+0x96>
90007a2e:	f04f 0b03 	mov.w	fp, #3
90007a32:	fa0b f404 	lsl.w	r4, fp, r4
90007a36:	e7aa      	b.n	9000798e <HAL_GPIO_DeInit+0x96>
90007a38:	f04f 0b04 	mov.w	fp, #4
90007a3c:	fa0b f404 	lsl.w	r4, fp, r4
90007a40:	e7a5      	b.n	9000798e <HAL_GPIO_DeInit+0x96>
90007a42:	f04f 0b08 	mov.w	fp, #8
90007a46:	fa0b f404 	lsl.w	r4, fp, r4
90007a4a:	e7a0      	b.n	9000798e <HAL_GPIO_DeInit+0x96>
90007a4c:	f04f 0b06 	mov.w	fp, #6
90007a50:	fa0b f404 	lsl.w	r4, fp, r4
90007a54:	e79b      	b.n	9000798e <HAL_GPIO_DeInit+0x96>
90007a56:	4770      	bx	lr
90007a58:	f04f 0b07 	mov.w	fp, #7
90007a5c:	fa0b f404 	lsl.w	r4, fp, r4
90007a60:	e795      	b.n	9000798e <HAL_GPIO_DeInit+0x96>
90007a62:	bf00      	nop
90007a64:	58020000 	.word	0x58020000
90007a68:	58020800 	.word	0x58020800
90007a6c:	58020c00 	.word	0x58020c00
90007a70:	58021000 	.word	0x58021000
90007a74:	58000400 	.word	0x58000400
90007a78:	58021400 	.word	0x58021400
90007a7c:	58021800 	.word	0x58021800
90007a80:	58021c00 	.word	0x58021c00
90007a84:	58022000 	.word	0x58022000
90007a88:	58022400 	.word	0x58022400

90007a8c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
90007a8c:	6903      	ldr	r3, [r0, #16]
90007a8e:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
90007a90:	bf14      	ite	ne
90007a92:	2001      	movne	r0, #1
90007a94:	2000      	moveq	r0, #0
90007a96:	4770      	bx	lr

90007a98 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
90007a98:	b902      	cbnz	r2, 90007a9c <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
90007a9a:	0409      	lsls	r1, r1, #16
90007a9c:	6181      	str	r1, [r0, #24]
  }
}
90007a9e:	4770      	bx	lr

90007aa0 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
90007aa0:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
90007aa2:	ea01 0203 	and.w	r2, r1, r3
90007aa6:	ea21 0103 	bic.w	r1, r1, r3
90007aaa:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
90007aae:	6181      	str	r1, [r0, #24]
}
90007ab0:	4770      	bx	lr
90007ab2:	bf00      	nop

90007ab4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
90007ab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
90007ab8:	6803      	ldr	r3, [r0, #0]
{
90007aba:	4680      	mov	r8, r0
90007abc:	460d      	mov	r5, r1
90007abe:	4692      	mov	sl, r2
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
90007ac0:	2710      	movs	r7, #16
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
90007ac2:	699c      	ldr	r4, [r3, #24]
90007ac4:	f014 0402 	ands.w	r4, r4, #2
90007ac8:	f040 80a5 	bne.w	90007c16 <I2C_WaitOnTXISFlagUntilTimeout+0x162>
  uint32_t itflag   = hi2c->Instance->ISR;
90007acc:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
90007ace:	f012 0c10 	ands.w	ip, r2, #16
90007ad2:	d078      	beq.n	90007bc6 <I2C_WaitOnTXISFlagUntilTimeout+0x112>
  uint32_t tickstart = Tickstart;
90007ad4:	46d1      	mov	r9, sl
  HAL_StatusTypeDef status = HAL_OK;
90007ad6:	4626      	mov	r6, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
90007ad8:	61df      	str	r7, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
90007ada:	1c68      	adds	r0, r5, #1
90007adc:	d001      	beq.n	90007ae2 <I2C_WaitOnTXISFlagUntilTimeout+0x2e>
90007ade:	e041      	b.n	90007b64 <I2C_WaitOnTXISFlagUntilTimeout+0xb0>
90007ae0:	b92e      	cbnz	r6, 90007aee <I2C_WaitOnTXISFlagUntilTimeout+0x3a>
90007ae2:	699a      	ldr	r2, [r3, #24]
90007ae4:	0691      	lsls	r1, r2, #26
90007ae6:	d5fb      	bpl.n	90007ae0 <I2C_WaitOnTXISFlagUntilTimeout+0x2c>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
90007ae8:	b90e      	cbnz	r6, 90007aee <I2C_WaitOnTXISFlagUntilTimeout+0x3a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
90007aea:	2220      	movs	r2, #32
90007aec:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
90007aee:	699a      	ldr	r2, [r3, #24]
    error_code |= HAL_I2C_ERROR_AF;
90007af0:	f044 0c04 	orr.w	ip, r4, #4
    status = HAL_ERROR;
90007af4:	2101      	movs	r1, #1

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
90007af6:	05d0      	lsls	r0, r2, #23
90007af8:	d569      	bpl.n	90007bce <I2C_WaitOnTXISFlagUntilTimeout+0x11a>
  {
    error_code |= HAL_I2C_ERROR_BERR;

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
90007afa:	f44f 7180 	mov.w	r1, #256	@ 0x100

    status = HAL_ERROR;
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
90007afe:	0557      	lsls	r7, r2, #21
    error_code |= HAL_I2C_ERROR_BERR;
90007b00:	f04c 0c01 	orr.w	ip, ip, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
90007b04:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
90007b06:	d504      	bpl.n	90007b12 <I2C_WaitOnTXISFlagUntilTimeout+0x5e>
  {
    error_code |= HAL_I2C_ERROR_OVR;

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
90007b08:	f44f 6180 	mov.w	r1, #1024	@ 0x400
    error_code |= HAL_I2C_ERROR_OVR;
90007b0c:	f04c 0c08 	orr.w	ip, ip, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
90007b10:	61d9      	str	r1, [r3, #28]

    status = HAL_ERROR;
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
90007b12:	0595      	lsls	r5, r2, #22
90007b14:	d504      	bpl.n	90007b20 <I2C_WaitOnTXISFlagUntilTimeout+0x6c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
90007b16:	f44f 7200 	mov.w	r2, #512	@ 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
90007b1a:	f04c 0c02 	orr.w	ip, ip, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
90007b1e:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
90007b20:	699a      	ldr	r2, [r3, #24]
90007b22:	0790      	lsls	r0, r2, #30
90007b24:	d501      	bpl.n	90007b2a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    hi2c->Instance->TXDR = 0x00U;
90007b26:	2200      	movs	r2, #0
90007b28:	629a      	str	r2, [r3, #40]	@ 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
90007b2a:	699a      	ldr	r2, [r3, #24]
90007b2c:	07d1      	lsls	r1, r2, #31
90007b2e:	d403      	bmi.n	90007b38 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
90007b30:	699a      	ldr	r2, [r3, #24]
90007b32:	f042 0201 	orr.w	r2, r2, #1
90007b36:	619a      	str	r2, [r3, #24]
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
90007b38:	685a      	ldr	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
    hi2c->State = HAL_I2C_STATE_READY;
90007b3a:	2020      	movs	r0, #32
    I2C_RESET_CR2(hi2c);
90007b3c:	4c37      	ldr	r4, [pc, #220]	@ (90007c1c <I2C_WaitOnTXISFlagUntilTimeout+0x168>)
    hi2c->Mode = HAL_I2C_MODE_NONE;
90007b3e:	2100      	movs	r1, #0
    I2C_RESET_CR2(hi2c);
90007b40:	4022      	ands	r2, r4
90007b42:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= error_code;
90007b44:	f8d8 3044 	ldr.w	r3, [r8, #68]	@ 0x44
90007b48:	ea43 030c 	orr.w	r3, r3, ip
90007b4c:	f8c8 3044 	str.w	r3, [r8, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
90007b50:	f888 0041 	strb.w	r0, [r8, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
90007b54:	f888 1042 	strb.w	r1, [r8, #66]	@ 0x42
          __HAL_UNLOCK(hi2c);
90007b58:	2300      	movs	r3, #0
      return HAL_ERROR;
90007b5a:	2001      	movs	r0, #1
          __HAL_UNLOCK(hi2c);
90007b5c:	f888 3040 	strb.w	r3, [r8, #64]	@ 0x40
}
90007b60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
90007b64:	699a      	ldr	r2, [r3, #24]
90007b66:	0692      	lsls	r2, r2, #26
90007b68:	d4be      	bmi.n	90007ae8 <I2C_WaitOnTXISFlagUntilTimeout+0x34>
90007b6a:	2e00      	cmp	r6, #0
90007b6c:	d1bf      	bne.n	90007aee <I2C_WaitOnTXISFlagUntilTimeout+0x3a>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
90007b6e:	f7ff faff 	bl	90007170 <HAL_GetTick>
90007b72:	eba0 0009 	sub.w	r0, r0, r9
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
90007b76:	f8d8 3000 	ldr.w	r3, [r8]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
90007b7a:	4285      	cmp	r5, r0
90007b7c:	d301      	bcc.n	90007b82 <I2C_WaitOnTXISFlagUntilTimeout+0xce>
90007b7e:	2d00      	cmp	r5, #0
90007b80:	d1f0      	bne.n	90007b64 <I2C_WaitOnTXISFlagUntilTimeout+0xb0>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
90007b82:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
90007b84:	f898 2042 	ldrb.w	r2, [r8, #66]	@ 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
90007b88:	6999      	ldr	r1, [r3, #24]
          tmp2 = hi2c->Mode;
90007b8a:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
90007b8c:	0409      	lsls	r1, r1, #16
90007b8e:	d50c      	bpl.n	90007baa <I2C_WaitOnTXISFlagUntilTimeout+0xf6>
              (tmp1 != I2C_CR2_STOP) && \
90007b90:	0441      	lsls	r1, r0, #17
90007b92:	d40a      	bmi.n	90007baa <I2C_WaitOnTXISFlagUntilTimeout+0xf6>
90007b94:	2a20      	cmp	r2, #32
90007b96:	d008      	beq.n	90007baa <I2C_WaitOnTXISFlagUntilTimeout+0xf6>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
90007b98:	685a      	ldr	r2, [r3, #4]
90007b9a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
90007b9e:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
90007ba0:	f7ff fae6 	bl	90007170 <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
90007ba4:	f8d8 3000 	ldr.w	r3, [r8]
            tickstart = HAL_GetTick();
90007ba8:	4681      	mov	r9, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
90007baa:	699a      	ldr	r2, [r3, #24]
90007bac:	0692      	lsls	r2, r2, #26
90007bae:	d494      	bmi.n	90007ada <I2C_WaitOnTXISFlagUntilTimeout+0x26>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
90007bb0:	f7ff fade 	bl	90007170 <HAL_GetTick>
90007bb4:	eba0 0009 	sub.w	r0, r0, r9
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
90007bb8:	f8d8 3000 	ldr.w	r3, [r8]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
90007bbc:	2819      	cmp	r0, #25
90007bbe:	d9f4      	bls.n	90007baa <I2C_WaitOnTXISFlagUntilTimeout+0xf6>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
90007bc0:	2420      	movs	r4, #32
              status = HAL_ERROR;
90007bc2:	2601      	movs	r6, #1
90007bc4:	e789      	b.n	90007ada <I2C_WaitOnTXISFlagUntilTimeout+0x26>
  itflag = hi2c->Instance->ISR;
90007bc6:	699a      	ldr	r2, [r3, #24]
  HAL_StatusTypeDef status = HAL_OK;
90007bc8:	4661      	mov	r1, ip
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
90007bca:	05d0      	lsls	r0, r2, #23
90007bcc:	d495      	bmi.n	90007afa <I2C_WaitOnTXISFlagUntilTimeout+0x46>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
90007bce:	0556      	lsls	r6, r2, #21
90007bd0:	d49a      	bmi.n	90007b08 <I2C_WaitOnTXISFlagUntilTimeout+0x54>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
90007bd2:	0594      	lsls	r4, r2, #22
90007bd4:	d49f      	bmi.n	90007b16 <I2C_WaitOnTXISFlagUntilTimeout+0x62>
  if (status != HAL_OK)
90007bd6:	2900      	cmp	r1, #0
90007bd8:	d1a2      	bne.n	90007b20 <I2C_WaitOnTXISFlagUntilTimeout+0x6c>
    if (Timeout != HAL_MAX_DELAY)
90007bda:	1c6a      	adds	r2, r5, #1
90007bdc:	f43f af71 	beq.w	90007ac2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90007be0:	f7ff fac6 	bl	90007170 <HAL_GetTick>
90007be4:	eba0 030a 	sub.w	r3, r0, sl
90007be8:	42ab      	cmp	r3, r5
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
90007bea:	f8d8 3000 	ldr.w	r3, [r8]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90007bee:	d802      	bhi.n	90007bf6 <I2C_WaitOnTXISFlagUntilTimeout+0x142>
90007bf0:	2d00      	cmp	r5, #0
90007bf2:	f47f af65 	bne.w	90007ac0 <I2C_WaitOnTXISFlagUntilTimeout+0xc>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
90007bf6:	699a      	ldr	r2, [r3, #24]
90007bf8:	f012 0202 	ands.w	r2, r2, #2
90007bfc:	f47f af60 	bne.w	90007ac0 <I2C_WaitOnTXISFlagUntilTimeout+0xc>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90007c00:	f8d8 3044 	ldr.w	r3, [r8, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
90007c04:	2120      	movs	r1, #32
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90007c06:	430b      	orrs	r3, r1
90007c08:	f8c8 3044 	str.w	r3, [r8, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
90007c0c:	f888 1041 	strb.w	r1, [r8, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
90007c10:	f888 2042 	strb.w	r2, [r8, #66]	@ 0x42
          return HAL_ERROR;
90007c14:	e7a0      	b.n	90007b58 <I2C_WaitOnTXISFlagUntilTimeout+0xa4>
  return HAL_OK;
90007c16:	2000      	movs	r0, #0
}
90007c18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
90007c1c:	fe00e800 	.word	0xfe00e800

90007c20 <I2C_WaitOnSTOPFlagUntilTimeout>:
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
90007c20:	6803      	ldr	r3, [r0, #0]
{
90007c22:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
90007c26:	4617      	mov	r7, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
90007c28:	699a      	ldr	r2, [r3, #24]
90007c2a:	0694      	lsls	r4, r2, #26
90007c2c:	f100 8092 	bmi.w	90007d54 <I2C_WaitOnSTOPFlagUntilTimeout+0x134>
90007c30:	4605      	mov	r5, r0
90007c32:	460e      	mov	r6, r1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
90007c34:	f04f 0810 	mov.w	r8, #16
  uint32_t itflag   = hi2c->Instance->ISR;
90007c38:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
90007c3a:	f012 0c10 	ands.w	ip, r2, #16
90007c3e:	f000 808c 	beq.w	90007d5a <I2C_WaitOnSTOPFlagUntilTimeout+0x13a>
  uint32_t error_code = 0;
90007c42:	2400      	movs	r4, #0
  uint32_t tickstart = Tickstart;
90007c44:	46b9      	mov	r9, r7
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
90007c46:	f8c3 801c 	str.w	r8, [r3, #28]
  HAL_StatusTypeDef status = HAL_OK;
90007c4a:	46a2      	mov	sl, r4
90007c4c:	1c70      	adds	r0, r6, #1
90007c4e:	d003      	beq.n	90007c58 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
90007c50:	e043      	b.n	90007cda <I2C_WaitOnSTOPFlagUntilTimeout+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
90007c52:	f1ba 0f00 	cmp.w	sl, #0
90007c56:	d107      	bne.n	90007c68 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
90007c58:	699a      	ldr	r2, [r3, #24]
90007c5a:	0691      	lsls	r1, r2, #26
90007c5c:	d5f9      	bpl.n	90007c52 <I2C_WaitOnSTOPFlagUntilTimeout+0x32>
    if (status == HAL_OK)
90007c5e:	f1ba 0f00 	cmp.w	sl, #0
90007c62:	d101      	bne.n	90007c68 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
90007c64:	2220      	movs	r2, #32
90007c66:	61da      	str	r2, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
90007c68:	f044 0c04 	orr.w	ip, r4, #4
    status = HAL_ERROR;
90007c6c:	2101      	movs	r1, #1
  itflag = hi2c->Instance->ISR;
90007c6e:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
90007c70:	05d0      	lsls	r0, r2, #23
90007c72:	d55a      	bpl.n	90007d2a <I2C_WaitOnSTOPFlagUntilTimeout+0x10a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
90007c74:	f44f 7180 	mov.w	r1, #256	@ 0x100
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
90007c78:	0554      	lsls	r4, r2, #21
    error_code |= HAL_I2C_ERROR_BERR;
90007c7a:	f04c 0c01 	orr.w	ip, ip, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
90007c7e:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
90007c80:	d504      	bpl.n	90007c8c <I2C_WaitOnSTOPFlagUntilTimeout+0x6c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
90007c82:	f44f 6180 	mov.w	r1, #1024	@ 0x400
    error_code |= HAL_I2C_ERROR_OVR;
90007c86:	f04c 0c08 	orr.w	ip, ip, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
90007c8a:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
90007c8c:	0596      	lsls	r6, r2, #22
90007c8e:	d504      	bpl.n	90007c9a <I2C_WaitOnSTOPFlagUntilTimeout+0x7a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
90007c90:	f44f 7200 	mov.w	r2, #512	@ 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
90007c94:	f04c 0c02 	orr.w	ip, ip, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
90007c98:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
90007c9a:	699a      	ldr	r2, [r3, #24]
90007c9c:	0790      	lsls	r0, r2, #30
90007c9e:	d501      	bpl.n	90007ca4 <I2C_WaitOnSTOPFlagUntilTimeout+0x84>
    hi2c->Instance->TXDR = 0x00U;
90007ca0:	2200      	movs	r2, #0
90007ca2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
90007ca4:	699a      	ldr	r2, [r3, #24]
90007ca6:	07d1      	lsls	r1, r2, #31
90007ca8:	d403      	bmi.n	90007cb2 <I2C_WaitOnSTOPFlagUntilTimeout+0x92>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
90007caa:	699a      	ldr	r2, [r3, #24]
90007cac:	f042 0201 	orr.w	r2, r2, #1
90007cb0:	619a      	str	r2, [r3, #24]
    I2C_RESET_CR2(hi2c);
90007cb2:	685a      	ldr	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
90007cb4:	2020      	movs	r0, #32
    I2C_RESET_CR2(hi2c);
90007cb6:	4c33      	ldr	r4, [pc, #204]	@ (90007d84 <I2C_WaitOnSTOPFlagUntilTimeout+0x164>)
    hi2c->Mode = HAL_I2C_MODE_NONE;
90007cb8:	2100      	movs	r1, #0
    I2C_RESET_CR2(hi2c);
90007cba:	4022      	ands	r2, r4
90007cbc:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= error_code;
90007cbe:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
90007cc0:	ea43 030c 	orr.w	r3, r3, ip
90007cc4:	646b      	str	r3, [r5, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
90007cc6:	f885 0041 	strb.w	r0, [r5, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
90007cca:	f885 1042 	strb.w	r1, [r5, #66]	@ 0x42
        __HAL_UNLOCK(hi2c);
90007cce:	2300      	movs	r3, #0
      return HAL_ERROR;
90007cd0:	2001      	movs	r0, #1
        __HAL_UNLOCK(hi2c);
90007cd2:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
}
90007cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
90007cda:	699a      	ldr	r2, [r3, #24]
90007cdc:	0692      	lsls	r2, r2, #26
90007cde:	d4be      	bmi.n	90007c5e <I2C_WaitOnSTOPFlagUntilTimeout+0x3e>
90007ce0:	f1ba 0f00 	cmp.w	sl, #0
90007ce4:	d1c0      	bne.n	90007c68 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
90007ce6:	f7ff fa43 	bl	90007170 <HAL_GetTick>
90007cea:	eba0 0009 	sub.w	r0, r0, r9
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
90007cee:	682b      	ldr	r3, [r5, #0]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
90007cf0:	4286      	cmp	r6, r0
90007cf2:	d301      	bcc.n	90007cf8 <I2C_WaitOnSTOPFlagUntilTimeout+0xd8>
90007cf4:	2e00      	cmp	r6, #0
90007cf6:	d1f0      	bne.n	90007cda <I2C_WaitOnSTOPFlagUntilTimeout+0xba>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
90007cf8:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
90007cfa:	f895 2042 	ldrb.w	r2, [r5, #66]	@ 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
90007cfe:	6999      	ldr	r1, [r3, #24]
          tmp2 = hi2c->Mode;
90007d00:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
90007d02:	0409      	lsls	r1, r1, #16
90007d04:	d503      	bpl.n	90007d0e <I2C_WaitOnSTOPFlagUntilTimeout+0xee>
              (tmp1 != I2C_CR2_STOP) && \
90007d06:	0441      	lsls	r1, r0, #17
90007d08:	d401      	bmi.n	90007d0e <I2C_WaitOnSTOPFlagUntilTimeout+0xee>
90007d0a:	2a20      	cmp	r2, #32
90007d0c:	d130      	bne.n	90007d70 <I2C_WaitOnSTOPFlagUntilTimeout+0x150>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
90007d0e:	699a      	ldr	r2, [r3, #24]
90007d10:	0692      	lsls	r2, r2, #26
90007d12:	d49b      	bmi.n	90007c4c <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
90007d14:	f7ff fa2c 	bl	90007170 <HAL_GetTick>
90007d18:	eba0 0009 	sub.w	r0, r0, r9
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
90007d1c:	682b      	ldr	r3, [r5, #0]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
90007d1e:	2819      	cmp	r0, #25
90007d20:	d9f5      	bls.n	90007d0e <I2C_WaitOnSTOPFlagUntilTimeout+0xee>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
90007d22:	2420      	movs	r4, #32
              status = HAL_ERROR;
90007d24:	f04f 0a01 	mov.w	sl, #1
90007d28:	e790      	b.n	90007c4c <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
90007d2a:	0550      	lsls	r0, r2, #21
90007d2c:	d4a9      	bmi.n	90007c82 <I2C_WaitOnSTOPFlagUntilTimeout+0x62>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
90007d2e:	0594      	lsls	r4, r2, #22
90007d30:	d4ae      	bmi.n	90007c90 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  if (status != HAL_OK)
90007d32:	2900      	cmp	r1, #0
90007d34:	d1b1      	bne.n	90007c9a <I2C_WaitOnSTOPFlagUntilTimeout+0x7a>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90007d36:	f7ff fa1b 	bl	90007170 <HAL_GetTick>
90007d3a:	1bc0      	subs	r0, r0, r7
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
90007d3c:	682b      	ldr	r3, [r5, #0]
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90007d3e:	42b0      	cmp	r0, r6
90007d40:	d800      	bhi.n	90007d44 <I2C_WaitOnSTOPFlagUntilTimeout+0x124>
90007d42:	b91e      	cbnz	r6, 90007d4c <I2C_WaitOnSTOPFlagUntilTimeout+0x12c>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
90007d44:	699a      	ldr	r2, [r3, #24]
90007d46:	f012 0220 	ands.w	r2, r2, #32
90007d4a:	d008      	beq.n	90007d5e <I2C_WaitOnSTOPFlagUntilTimeout+0x13e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
90007d4c:	699a      	ldr	r2, [r3, #24]
90007d4e:	0692      	lsls	r2, r2, #26
90007d50:	f57f af72 	bpl.w	90007c38 <I2C_WaitOnSTOPFlagUntilTimeout+0x18>
  return HAL_OK;
90007d54:	2000      	movs	r0, #0
}
90007d56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  HAL_StatusTypeDef status = HAL_OK;
90007d5a:	4661      	mov	r1, ip
90007d5c:	e787      	b.n	90007c6e <I2C_WaitOnSTOPFlagUntilTimeout+0x4e>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90007d5e:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
90007d60:	2120      	movs	r1, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90007d62:	430b      	orrs	r3, r1
90007d64:	646b      	str	r3, [r5, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
90007d66:	f885 1041 	strb.w	r1, [r5, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
90007d6a:	f885 2042 	strb.w	r2, [r5, #66]	@ 0x42
        return HAL_ERROR;
90007d6e:	e7ae      	b.n	90007cce <I2C_WaitOnSTOPFlagUntilTimeout+0xae>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
90007d70:	685a      	ldr	r2, [r3, #4]
90007d72:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
90007d76:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
90007d78:	f7ff f9fa 	bl	90007170 <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
90007d7c:	682b      	ldr	r3, [r5, #0]
            tickstart = HAL_GetTick();
90007d7e:	4681      	mov	r9, r0
90007d80:	e7c5      	b.n	90007d0e <I2C_WaitOnSTOPFlagUntilTimeout+0xee>
90007d82:	bf00      	nop
90007d84:	fe00e800 	.word	0xfe00e800

90007d88 <HAL_I2C_MspInit>:
}
90007d88:	4770      	bx	lr
90007d8a:	bf00      	nop

90007d8c <HAL_I2C_Init>:
  if (hi2c == NULL)
90007d8c:	2800      	cmp	r0, #0
90007d8e:	d04e      	beq.n	90007e2e <HAL_I2C_Init+0xa2>
{
90007d90:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
90007d92:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
90007d96:	4604      	mov	r4, r0
90007d98:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
90007d9c:	2b00      	cmp	r3, #0
90007d9e:	d041      	beq.n	90007e24 <HAL_I2C_Init+0x98>
  __HAL_I2C_DISABLE(hi2c);
90007da0:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
90007da2:	2124      	movs	r1, #36	@ 0x24
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
90007da4:	6862      	ldr	r2, [r4, #4]
  hi2c->State = HAL_I2C_STATE_BUSY;
90007da6:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
90007daa:	6819      	ldr	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
90007dac:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
90007db0:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
90007db2:	f021 0101 	bic.w	r1, r1, #1
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
90007db6:	2801      	cmp	r0, #1
  __HAL_I2C_DISABLE(hi2c);
90007db8:	6019      	str	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
90007dba:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
90007dbc:	689a      	ldr	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
90007dbe:	68a1      	ldr	r1, [r4, #8]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
90007dc0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
90007dc4:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
90007dc6:	d029      	beq.n	90007e1c <HAL_I2C_Init+0x90>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
90007dc8:	f441 4104 	orr.w	r1, r1, #33792	@ 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
90007dcc:	2802      	cmp	r0, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
90007dce:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
90007dd0:	d102      	bne.n	90007dd8 <HAL_I2C_Init+0x4c>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
90007dd2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
90007dd6:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
90007dd8:	6858      	ldr	r0, [r3, #4]
  hi2c->State = HAL_I2C_STATE_READY;
90007dda:	f04f 0c20 	mov.w	ip, #32
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
90007dde:	4915      	ldr	r1, [pc, #84]	@ (90007e34 <HAL_I2C_Init+0xa8>)
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
90007de0:	6922      	ldr	r2, [r4, #16]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
90007de2:	4301      	orrs	r1, r0
90007de4:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
90007de6:	68d9      	ldr	r1, [r3, #12]
90007de8:	f421 4100 	bic.w	r1, r1, #32768	@ 0x8000
90007dec:	60d9      	str	r1, [r3, #12]
                          (hi2c->Init.OwnAddress2Masks << 8));
90007dee:	e9d4 0105 	ldrd	r0, r1, [r4, #20]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
90007df2:	4302      	orrs	r2, r0
90007df4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
90007df8:	e9d4 1007 	ldrd	r1, r0, [r4, #28]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
90007dfc:	60da      	str	r2, [r3, #12]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
90007dfe:	2200      	movs	r2, #0
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
90007e00:	4301      	orrs	r1, r0
  return HAL_OK;
90007e02:	4610      	mov	r0, r2
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
90007e04:	6019      	str	r1, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
90007e06:	6819      	ldr	r1, [r3, #0]
90007e08:	f041 0101 	orr.w	r1, r1, #1
90007e0c:	6019      	str	r1, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
90007e0e:	6462      	str	r2, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
90007e10:	f884 c041 	strb.w	ip, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
90007e14:	6322      	str	r2, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
90007e16:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
}
90007e1a:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
90007e1c:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
90007e20:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
90007e22:	e7d9      	b.n	90007dd8 <HAL_I2C_Init+0x4c>
    hi2c->Lock = HAL_UNLOCKED;
90007e24:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_I2C_MspInit(hi2c);
90007e28:	f7ff ffae 	bl	90007d88 <HAL_I2C_MspInit>
90007e2c:	e7b8      	b.n	90007da0 <HAL_I2C_Init+0x14>
    return HAL_ERROR;
90007e2e:	2001      	movs	r0, #1
}
90007e30:	4770      	bx	lr
90007e32:	bf00      	nop
90007e34:	02008000 	.word	0x02008000

90007e38 <HAL_I2C_MspDeInit>:
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
90007e38:	4770      	bx	lr
90007e3a:	bf00      	nop

90007e3c <HAL_I2C_DeInit>:
  if (hi2c == NULL)
90007e3c:	b1b0      	cbz	r0, 90007e6c <HAL_I2C_DeInit+0x30>
  __HAL_I2C_DISABLE(hi2c);
90007e3e:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
90007e40:	2324      	movs	r3, #36	@ 0x24
{
90007e42:	b510      	push	{r4, lr}
  hi2c->State = HAL_I2C_STATE_BUSY;
90007e44:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
90007e48:	4604      	mov	r4, r0
  __HAL_I2C_DISABLE(hi2c);
90007e4a:	6813      	ldr	r3, [r2, #0]
90007e4c:	f023 0301 	bic.w	r3, r3, #1
90007e50:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
90007e52:	f7ff fff1 	bl	90007e38 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
90007e56:	2300      	movs	r3, #0
90007e58:	6463      	str	r3, [r4, #68]	@ 0x44
  return HAL_OK;
90007e5a:	4618      	mov	r0, r3
  hi2c->State = HAL_I2C_STATE_RESET;
90007e5c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hi2c);
90007e60:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  hi2c->PreviousState = I2C_STATE_NONE;
90007e64:	6323      	str	r3, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
90007e66:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
}
90007e6a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
90007e6c:	2001      	movs	r0, #1
}
90007e6e:	4770      	bx	lr

90007e70 <HAL_I2C_Mem_Write>:
{
90007e70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
90007e74:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
90007e76:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
90007e7a:	f8bd a024 	ldrh.w	sl, [sp, #36]	@ 0x24
  if (hi2c->State == HAL_I2C_STATE_READY)
90007e7e:	2b20      	cmp	r3, #32
{
90007e80:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
90007e82:	d130      	bne.n	90007ee6 <HAL_I2C_Mem_Write+0x76>
    if ((pData == NULL) || (Size == 0U))
90007e84:	9b08      	ldr	r3, [sp, #32]
90007e86:	4604      	mov	r4, r0
90007e88:	b33b      	cbz	r3, 90007eda <HAL_I2C_Mem_Write+0x6a>
90007e8a:	f1ba 0f00 	cmp.w	sl, #0
90007e8e:	d024      	beq.n	90007eda <HAL_I2C_Mem_Write+0x6a>
    __HAL_LOCK(hi2c);
90007e90:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
90007e94:	2b01      	cmp	r3, #1
90007e96:	d026      	beq.n	90007ee6 <HAL_I2C_Mem_Write+0x76>
90007e98:	2301      	movs	r3, #1
90007e9a:	460e      	mov	r6, r1
90007e9c:	4691      	mov	r9, r2
90007e9e:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
90007ea2:	f7ff f965 	bl	90007170 <HAL_GetTick>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
90007ea6:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
90007ea8:	4605      	mov	r5, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
90007eaa:	699a      	ldr	r2, [r3, #24]
90007eac:	0411      	lsls	r1, r2, #16
90007eae:	d51d      	bpl.n	90007eec <HAL_I2C_Mem_Write+0x7c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90007eb0:	f7ff f95e 	bl	90007170 <HAL_GetTick>
90007eb4:	1b40      	subs	r0, r0, r5
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
90007eb6:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90007eb8:	2819      	cmp	r0, #25
90007eba:	d9f6      	bls.n	90007eaa <HAL_I2C_Mem_Write+0x3a>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
90007ebc:	699a      	ldr	r2, [r3, #24]
90007ebe:	0412      	lsls	r2, r2, #16
90007ec0:	d5f3      	bpl.n	90007eaa <HAL_I2C_Mem_Write+0x3a>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90007ec2:	6c63      	ldr	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
90007ec4:	2120      	movs	r1, #32
          hi2c->Mode = HAL_I2C_MODE_NONE;
90007ec6:	2200      	movs	r2, #0
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90007ec8:	430b      	orrs	r3, r1
          __HAL_UNLOCK(hi2c);
90007eca:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90007ece:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
90007ed0:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
90007ed4:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
          return HAL_ERROR;
90007ed8:	e002      	b.n	90007ee0 <HAL_I2C_Mem_Write+0x70>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
90007eda:	f44f 7300 	mov.w	r3, #512	@ 0x200
90007ede:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
90007ee0:	2001      	movs	r0, #1
}
90007ee2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
90007ee6:	2002      	movs	r0, #2
}
90007ee8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hi2c->pBuffPtr  = pData;
90007eec:	9a08      	ldr	r2, [sp, #32]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
90007eee:	2121      	movs	r1, #33	@ 0x21
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
90007ef0:	f3c6 0609 	ubfx	r6, r6, #0, #10
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
90007ef4:	4620      	mov	r0, r4
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
90007ef6:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
90007efa:	2140      	movs	r1, #64	@ 0x40
    hi2c->pBuffPtr  = pData;
90007efc:	6262      	str	r2, [r4, #36]	@ 0x24
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
90007efe:	2200      	movs	r2, #0
    hi2c->Mode      = HAL_I2C_MODE_MEM;
90007f00:	f884 1042 	strb.w	r1, [r4, #66]	@ 0x42
    hi2c->XferISR   = NULL;
90007f04:	6362      	str	r2, [r4, #52]	@ 0x34
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
90007f06:	6462      	str	r2, [r4, #68]	@ 0x44
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
90007f08:	496b      	ldr	r1, [pc, #428]	@ (900080b8 <HAL_I2C_Mem_Write+0x248>)
    hi2c->XferCount = Size;
90007f0a:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
90007f0e:	685a      	ldr	r2, [r3, #4]
90007f10:	400a      	ands	r2, r1
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
90007f12:	fa5f f188 	uxtb.w	r1, r8
  MODIFY_REG(hi2c->Instance->CR2, \
90007f16:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
90007f1a:	4968      	ldr	r1, [pc, #416]	@ (900080bc <HAL_I2C_Mem_Write+0x24c>)
90007f1c:	4332      	orrs	r2, r6
90007f1e:	4311      	orrs	r1, r2
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
90007f20:	462a      	mov	r2, r5
  MODIFY_REG(hi2c->Instance->CR2, \
90007f22:	6059      	str	r1, [r3, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
90007f24:	4639      	mov	r1, r7
90007f26:	f7ff fdc5 	bl	90007ab4 <I2C_WaitOnTXISFlagUntilTimeout>
90007f2a:	2800      	cmp	r0, #0
90007f2c:	d17e      	bne.n	9000802c <HAL_I2C_Mem_Write+0x1bc>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
90007f2e:	f1b8 0f01 	cmp.w	r8, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
90007f32:	6822      	ldr	r2, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
90007f34:	f040 809a 	bne.w	9000806c <HAL_I2C_Mem_Write+0x1fc>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
90007f38:	fa5f f389 	uxtb.w	r3, r9
90007f3c:	6293      	str	r3, [r2, #40]	@ 0x28
90007f3e:	1c78      	adds	r0, r7, #1
90007f40:	d15d      	bne.n	90007ffe <HAL_I2C_Mem_Write+0x18e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
90007f42:	6993      	ldr	r3, [r2, #24]
90007f44:	0619      	lsls	r1, r3, #24
90007f46:	d5fc      	bpl.n	90007f42 <HAL_I2C_Mem_Write+0xd2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
90007f48:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
90007f4a:	b29b      	uxth	r3, r3
90007f4c:	2bff      	cmp	r3, #255	@ 0xff
90007f4e:	d97f      	bls.n	90008050 <HAL_I2C_Mem_Write+0x1e0>
  MODIFY_REG(hi2c->Instance->CR2, \
90007f50:	6853      	ldr	r3, [r2, #4]
90007f52:	495b      	ldr	r1, [pc, #364]	@ (900080c0 <HAL_I2C_Mem_Write+0x250>)
90007f54:	400b      	ands	r3, r1
90007f56:	495b      	ldr	r1, [pc, #364]	@ (900080c4 <HAL_I2C_Mem_Write+0x254>)
90007f58:	4333      	orrs	r3, r6
90007f5a:	4319      	orrs	r1, r3
      hi2c->XferSize = MAX_NBYTE_SIZE;
90007f5c:	23ff      	movs	r3, #255	@ 0xff
90007f5e:	8523      	strh	r3, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
90007f60:	6051      	str	r1, [r2, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
90007f62:	e004      	b.n	90007f6e <HAL_I2C_Mem_Write+0xfe>
    } while (hi2c->XferCount > 0U);
90007f64:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
90007f66:	b29b      	uxth	r3, r3
90007f68:	2b00      	cmp	r3, #0
90007f6a:	f000 808e 	beq.w	9000808a <HAL_I2C_Mem_Write+0x21a>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
90007f6e:	462a      	mov	r2, r5
90007f70:	4639      	mov	r1, r7
90007f72:	4620      	mov	r0, r4
90007f74:	f7ff fd9e 	bl	90007ab4 <I2C_WaitOnTXISFlagUntilTimeout>
90007f78:	2800      	cmp	r0, #0
90007f7a:	d1b1      	bne.n	90007ee0 <HAL_I2C_Mem_Write+0x70>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
90007f7c:	6a60      	ldr	r0, [r4, #36]	@ 0x24
90007f7e:	6821      	ldr	r1, [r4, #0]
90007f80:	f810 2b01 	ldrb.w	r2, [r0], #1
      hi2c->XferSize--;
90007f84:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
90007f86:	628a      	str	r2, [r1, #40]	@ 0x28
      hi2c->XferCount--;
90007f88:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
90007f8a:	3b01      	subs	r3, #1
      hi2c->pBuffPtr++;
90007f8c:	6260      	str	r0, [r4, #36]	@ 0x24
      hi2c->XferCount--;
90007f8e:	3a01      	subs	r2, #1
      hi2c->XferSize--;
90007f90:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
90007f92:	b292      	uxth	r2, r2
      hi2c->XferSize--;
90007f94:	8523      	strh	r3, [r4, #40]	@ 0x28
      hi2c->XferCount--;
90007f96:	8562      	strh	r2, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
90007f98:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
90007f9a:	b292      	uxth	r2, r2
90007f9c:	2a00      	cmp	r2, #0
90007f9e:	d0e1      	beq.n	90007f64 <HAL_I2C_Mem_Write+0xf4>
90007fa0:	2b00      	cmp	r3, #0
90007fa2:	d1df      	bne.n	90007f64 <HAL_I2C_Mem_Write+0xf4>
90007fa4:	1c78      	adds	r0, r7, #1
90007fa6:	d110      	bne.n	90007fca <HAL_I2C_Mem_Write+0x15a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
90007fa8:	698b      	ldr	r3, [r1, #24]
90007faa:	061a      	lsls	r2, r3, #24
90007fac:	d5fc      	bpl.n	90007fa8 <HAL_I2C_Mem_Write+0x138>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
90007fae:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
90007fb0:	b29b      	uxth	r3, r3
90007fb2:	2bff      	cmp	r3, #255	@ 0xff
90007fb4:	d93e      	bls.n	90008034 <HAL_I2C_Mem_Write+0x1c4>
  MODIFY_REG(hi2c->Instance->CR2, \
90007fb6:	684b      	ldr	r3, [r1, #4]
90007fb8:	4a41      	ldr	r2, [pc, #260]	@ (900080c0 <HAL_I2C_Mem_Write+0x250>)
90007fba:	4013      	ands	r3, r2
90007fbc:	4a41      	ldr	r2, [pc, #260]	@ (900080c4 <HAL_I2C_Mem_Write+0x254>)
90007fbe:	4333      	orrs	r3, r6
90007fc0:	431a      	orrs	r2, r3
          hi2c->XferSize = MAX_NBYTE_SIZE;
90007fc2:	23ff      	movs	r3, #255	@ 0xff
90007fc4:	8523      	strh	r3, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
90007fc6:	604a      	str	r2, [r1, #4]
}
90007fc8:	e7cc      	b.n	90007f64 <HAL_I2C_Mem_Write+0xf4>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
90007fca:	698b      	ldr	r3, [r1, #24]
90007fcc:	061b      	lsls	r3, r3, #24
90007fce:	d4ee      	bmi.n	90007fae <HAL_I2C_Mem_Write+0x13e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90007fd0:	f7ff f8ce 	bl	90007170 <HAL_GetTick>
90007fd4:	1b40      	subs	r0, r0, r5
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
90007fd6:	6821      	ldr	r1, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90007fd8:	4287      	cmp	r7, r0
90007fda:	d301      	bcc.n	90007fe0 <HAL_I2C_Mem_Write+0x170>
90007fdc:	2f00      	cmp	r7, #0
90007fde:	d1f4      	bne.n	90007fca <HAL_I2C_Mem_Write+0x15a>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
90007fe0:	698b      	ldr	r3, [r1, #24]
90007fe2:	f013 0380 	ands.w	r3, r3, #128	@ 0x80
90007fe6:	d1f0      	bne.n	90007fca <HAL_I2C_Mem_Write+0x15a>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90007fe8:	6c62      	ldr	r2, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
90007fea:	2120      	movs	r1, #32
          __HAL_UNLOCK(hi2c);
90007fec:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90007ff0:	430a      	orrs	r2, r1
90007ff2:	6462      	str	r2, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
90007ff4:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
90007ff8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
          return HAL_ERROR;
90007ffc:	e770      	b.n	90007ee0 <HAL_I2C_Mem_Write+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
90007ffe:	6993      	ldr	r3, [r2, #24]
90008000:	061b      	lsls	r3, r3, #24
90008002:	d4a1      	bmi.n	90007f48 <HAL_I2C_Mem_Write+0xd8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90008004:	f7ff f8b4 	bl	90007170 <HAL_GetTick>
90008008:	1b40      	subs	r0, r0, r5
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
9000800a:	6822      	ldr	r2, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
9000800c:	4287      	cmp	r7, r0
9000800e:	d301      	bcc.n	90008014 <HAL_I2C_Mem_Write+0x1a4>
90008010:	2f00      	cmp	r7, #0
90008012:	d1f4      	bne.n	90007ffe <HAL_I2C_Mem_Write+0x18e>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
90008014:	6993      	ldr	r3, [r2, #24]
90008016:	f013 0380 	ands.w	r3, r3, #128	@ 0x80
9000801a:	d1f0      	bne.n	90007ffe <HAL_I2C_Mem_Write+0x18e>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
9000801c:	6c62      	ldr	r2, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
9000801e:	2120      	movs	r1, #32
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90008020:	430a      	orrs	r2, r1
90008022:	6462      	str	r2, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
90008024:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
90008028:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
9000802c:	2300      	movs	r3, #0
9000802e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
90008032:	e755      	b.n	90007ee0 <HAL_I2C_Mem_Write+0x70>
          hi2c->XferSize = hi2c->XferCount;
90008034:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
90008036:	4822      	ldr	r0, [pc, #136]	@ (900080c0 <HAL_I2C_Mem_Write+0x250>)
          hi2c->XferSize = hi2c->XferCount;
90008038:	b29b      	uxth	r3, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
9000803a:	b2da      	uxtb	r2, r3
          hi2c->XferSize = hi2c->XferCount;
9000803c:	8523      	strh	r3, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
9000803e:	684b      	ldr	r3, [r1, #4]
90008040:	4003      	ands	r3, r0
90008042:	4333      	orrs	r3, r6
90008044:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
90008048:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
9000804c:	604b      	str	r3, [r1, #4]
}
9000804e:	e789      	b.n	90007f64 <HAL_I2C_Mem_Write+0xf4>
      hi2c->XferSize = hi2c->XferCount;
90008050:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
90008052:	481b      	ldr	r0, [pc, #108]	@ (900080c0 <HAL_I2C_Mem_Write+0x250>)
      hi2c->XferSize = hi2c->XferCount;
90008054:	b29b      	uxth	r3, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
90008056:	b2d9      	uxtb	r1, r3
      hi2c->XferSize = hi2c->XferCount;
90008058:	8523      	strh	r3, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
9000805a:	6853      	ldr	r3, [r2, #4]
9000805c:	4003      	ands	r3, r0
9000805e:	4333      	orrs	r3, r6
90008060:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
90008064:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
90008068:	6053      	str	r3, [r2, #4]
}
9000806a:	e780      	b.n	90007f6e <HAL_I2C_Mem_Write+0xfe>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
9000806c:	ea4f 2319 	mov.w	r3, r9, lsr #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
90008070:	4639      	mov	r1, r7
90008072:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
90008074:	6293      	str	r3, [r2, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
90008076:	462a      	mov	r2, r5
90008078:	f7ff fd1c 	bl	90007ab4 <I2C_WaitOnTXISFlagUntilTimeout>
9000807c:	2800      	cmp	r0, #0
9000807e:	d1d5      	bne.n	9000802c <HAL_I2C_Mem_Write+0x1bc>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
90008080:	fa5f f389 	uxtb.w	r3, r9
90008084:	6822      	ldr	r2, [r4, #0]
90008086:	6293      	str	r3, [r2, #40]	@ 0x28
90008088:	e759      	b.n	90007f3e <HAL_I2C_Mem_Write+0xce>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
9000808a:	462a      	mov	r2, r5
9000808c:	4639      	mov	r1, r7
9000808e:	4620      	mov	r0, r4
90008090:	f7ff fdc6 	bl	90007c20 <I2C_WaitOnSTOPFlagUntilTimeout>
90008094:	2800      	cmp	r0, #0
90008096:	f47f af23 	bne.w	90007ee0 <HAL_I2C_Mem_Write+0x70>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
9000809a:	6823      	ldr	r3, [r4, #0]
9000809c:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
9000809e:	4d0a      	ldr	r5, [pc, #40]	@ (900080c8 <HAL_I2C_Mem_Write+0x258>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
900080a0:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
900080a2:	685a      	ldr	r2, [r3, #4]
900080a4:	402a      	ands	r2, r5
900080a6:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
900080a8:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
900080ac:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
900080b0:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
900080b4:	e715      	b.n	90007ee2 <HAL_I2C_Mem_Write+0x72>
900080b6:	bf00      	nop
900080b8:	fc009800 	.word	0xfc009800
900080bc:	01002000 	.word	0x01002000
900080c0:	fc009c00 	.word	0xfc009c00
900080c4:	01ff0000 	.word	0x01ff0000
900080c8:	fe00e800 	.word	0xfe00e800

900080cc <HAL_I2C_Mem_Read>:
{
900080cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
900080d0:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
900080d2:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
900080d6:	f8bd a024 	ldrh.w	sl, [sp, #36]	@ 0x24
  if (hi2c->State == HAL_I2C_STATE_READY)
900080da:	2b20      	cmp	r3, #32
{
900080dc:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
900080de:	d130      	bne.n	90008142 <HAL_I2C_Mem_Read+0x76>
    if ((pData == NULL) || (Size == 0U))
900080e0:	9b08      	ldr	r3, [sp, #32]
900080e2:	4604      	mov	r4, r0
900080e4:	b33b      	cbz	r3, 90008136 <HAL_I2C_Mem_Read+0x6a>
900080e6:	f1ba 0f00 	cmp.w	sl, #0
900080ea:	d024      	beq.n	90008136 <HAL_I2C_Mem_Read+0x6a>
    __HAL_LOCK(hi2c);
900080ec:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
900080f0:	2b01      	cmp	r3, #1
900080f2:	d026      	beq.n	90008142 <HAL_I2C_Mem_Read+0x76>
900080f4:	2301      	movs	r3, #1
900080f6:	460f      	mov	r7, r1
900080f8:	4691      	mov	r9, r2
900080fa:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
900080fe:	f7ff f837 	bl	90007170 <HAL_GetTick>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
90008102:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
90008104:	4605      	mov	r5, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
90008106:	699a      	ldr	r2, [r3, #24]
90008108:	0411      	lsls	r1, r2, #16
9000810a:	d51d      	bpl.n	90008148 <HAL_I2C_Mem_Read+0x7c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
9000810c:	f7ff f830 	bl	90007170 <HAL_GetTick>
90008110:	1b40      	subs	r0, r0, r5
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
90008112:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90008114:	2819      	cmp	r0, #25
90008116:	d9f6      	bls.n	90008106 <HAL_I2C_Mem_Read+0x3a>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
90008118:	699a      	ldr	r2, [r3, #24]
9000811a:	0412      	lsls	r2, r2, #16
9000811c:	d5f3      	bpl.n	90008106 <HAL_I2C_Mem_Read+0x3a>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
9000811e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
90008120:	2120      	movs	r1, #32
          hi2c->Mode = HAL_I2C_MODE_NONE;
90008122:	2200      	movs	r2, #0
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90008124:	430b      	orrs	r3, r1
          __HAL_UNLOCK(hi2c);
90008126:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
9000812a:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
9000812c:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
90008130:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
          return HAL_ERROR;
90008134:	e002      	b.n	9000813c <HAL_I2C_Mem_Read+0x70>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
90008136:	f44f 7300 	mov.w	r3, #512	@ 0x200
9000813a:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
9000813c:	2001      	movs	r0, #1
}
9000813e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
90008142:	2002      	movs	r0, #2
}
90008144:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hi2c->pBuffPtr  = pData;
90008148:	9a08      	ldr	r2, [sp, #32]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
9000814a:	2122      	movs	r1, #34	@ 0x22
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
9000814c:	f3c7 0709 	ubfx	r7, r7, #0, #10
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
90008150:	4620      	mov	r0, r4
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
90008152:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
90008156:	2140      	movs	r1, #64	@ 0x40
    hi2c->pBuffPtr  = pData;
90008158:	6262      	str	r2, [r4, #36]	@ 0x24
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
9000815a:	2200      	movs	r2, #0
    hi2c->Mode      = HAL_I2C_MODE_MEM;
9000815c:	f884 1042 	strb.w	r1, [r4, #66]	@ 0x42
    hi2c->XferISR   = NULL;
90008160:	6362      	str	r2, [r4, #52]	@ 0x34
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
90008162:	6462      	str	r2, [r4, #68]	@ 0x44
  MODIFY_REG(hi2c->Instance->CR2, \
90008164:	4973      	ldr	r1, [pc, #460]	@ (90008334 <HAL_I2C_Mem_Read+0x268>)
    hi2c->XferCount = Size;
90008166:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
9000816a:	685a      	ldr	r2, [r3, #4]
9000816c:	400a      	ands	r2, r1
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
9000816e:	fa5f f188 	uxtb.w	r1, r8
  MODIFY_REG(hi2c->Instance->CR2, \
90008172:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
90008176:	4631      	mov	r1, r6
  MODIFY_REG(hi2c->Instance->CR2, \
90008178:	433a      	orrs	r2, r7
9000817a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
9000817e:	605a      	str	r2, [r3, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
90008180:	462a      	mov	r2, r5
90008182:	f7ff fc97 	bl	90007ab4 <I2C_WaitOnTXISFlagUntilTimeout>
90008186:	2800      	cmp	r0, #0
90008188:	d16a      	bne.n	90008260 <HAL_I2C_Mem_Read+0x194>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
9000818a:	f1b8 0f01 	cmp.w	r8, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
9000818e:	6821      	ldr	r1, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
90008190:	f040 80aa 	bne.w	900082e8 <HAL_I2C_Mem_Read+0x21c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
90008194:	fa5f f389 	uxtb.w	r3, r9
90008198:	628b      	str	r3, [r1, #40]	@ 0x28
9000819a:	1c70      	adds	r0, r6, #1
9000819c:	d149      	bne.n	90008232 <HAL_I2C_Mem_Read+0x166>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
9000819e:	698b      	ldr	r3, [r1, #24]
900081a0:	065a      	lsls	r2, r3, #25
900081a2:	d5fc      	bpl.n	9000819e <HAL_I2C_Mem_Read+0xd2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
900081a4:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
900081a6:	b29b      	uxth	r3, r3
900081a8:	2bff      	cmp	r3, #255	@ 0xff
900081aa:	f240 808f 	bls.w	900082cc <HAL_I2C_Mem_Read+0x200>
  MODIFY_REG(hi2c->Instance->CR2, \
900081ae:	684b      	ldr	r3, [r1, #4]
900081b0:	4a60      	ldr	r2, [pc, #384]	@ (90008334 <HAL_I2C_Mem_Read+0x268>)
900081b2:	4013      	ands	r3, r2
900081b4:	4a60      	ldr	r2, [pc, #384]	@ (90008338 <HAL_I2C_Mem_Read+0x26c>)
900081b6:	433b      	orrs	r3, r7
900081b8:	431a      	orrs	r2, r3
      hi2c->XferSize = MAX_NBYTE_SIZE;
900081ba:	23ff      	movs	r3, #255	@ 0xff
900081bc:	8523      	strh	r3, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
900081be:	604a      	str	r2, [r1, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
900081c0:	1c70      	adds	r0, r6, #1
900081c2:	d11c      	bne.n	900081fe <HAL_I2C_Mem_Read+0x132>
900081c4:	698b      	ldr	r3, [r1, #24]
900081c6:	075a      	lsls	r2, r3, #29
900081c8:	d5fc      	bpl.n	900081c4 <HAL_I2C_Mem_Read+0xf8>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
900081ca:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
900081cc:	6a63      	ldr	r3, [r4, #36]	@ 0x24
900081ce:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
900081d0:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
900081d2:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
      hi2c->XferCount--;
900081d4:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
900081d6:	6a61      	ldr	r1, [r4, #36]	@ 0x24
      hi2c->XferSize--;
900081d8:	3b01      	subs	r3, #1
      hi2c->XferCount--;
900081da:	b292      	uxth	r2, r2
      hi2c->pBuffPtr++;
900081dc:	3101      	adds	r1, #1
      hi2c->XferSize--;
900081de:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
900081e0:	8562      	strh	r2, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
900081e2:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      hi2c->pBuffPtr++;
900081e4:	6261      	str	r1, [r4, #36]	@ 0x24
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
900081e6:	b292      	uxth	r2, r2
      hi2c->XferSize--;
900081e8:	8523      	strh	r3, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
900081ea:	b90b      	cbnz	r3, 900081f0 <HAL_I2C_Mem_Read+0x124>
900081ec:	2a00      	cmp	r2, #0
900081ee:	d13b      	bne.n	90008268 <HAL_I2C_Mem_Read+0x19c>
    } while (hi2c->XferCount > 0U);
900081f0:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
900081f2:	b29b      	uxth	r3, r3
900081f4:	2b00      	cmp	r3, #0
900081f6:	f000 8086 	beq.w	90008306 <HAL_I2C_Mem_Read+0x23a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
900081fa:	6821      	ldr	r1, [r4, #0]
900081fc:	e7e0      	b.n	900081c0 <HAL_I2C_Mem_Read+0xf4>
900081fe:	698b      	ldr	r3, [r1, #24]
90008200:	075b      	lsls	r3, r3, #29
90008202:	d4e2      	bmi.n	900081ca <HAL_I2C_Mem_Read+0xfe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90008204:	f7fe ffb4 	bl	90007170 <HAL_GetTick>
90008208:	1b40      	subs	r0, r0, r5
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
9000820a:	6821      	ldr	r1, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
9000820c:	4286      	cmp	r6, r0
9000820e:	d301      	bcc.n	90008214 <HAL_I2C_Mem_Read+0x148>
90008210:	2e00      	cmp	r6, #0
90008212:	d1f4      	bne.n	900081fe <HAL_I2C_Mem_Read+0x132>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
90008214:	698b      	ldr	r3, [r1, #24]
90008216:	f013 0304 	ands.w	r3, r3, #4
9000821a:	d1f0      	bne.n	900081fe <HAL_I2C_Mem_Read+0x132>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
9000821c:	6c62      	ldr	r2, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
9000821e:	2120      	movs	r1, #32
          __HAL_UNLOCK(hi2c);
90008220:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90008224:	430a      	orrs	r2, r1
90008226:	6462      	str	r2, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
90008228:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
9000822c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
          return HAL_ERROR;
90008230:	e784      	b.n	9000813c <HAL_I2C_Mem_Read+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
90008232:	698b      	ldr	r3, [r1, #24]
90008234:	065b      	lsls	r3, r3, #25
90008236:	d4b5      	bmi.n	900081a4 <HAL_I2C_Mem_Read+0xd8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90008238:	f7fe ff9a 	bl	90007170 <HAL_GetTick>
9000823c:	1b43      	subs	r3, r0, r5
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
9000823e:	6821      	ldr	r1, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90008240:	429e      	cmp	r6, r3
90008242:	d301      	bcc.n	90008248 <HAL_I2C_Mem_Read+0x17c>
90008244:	2e00      	cmp	r6, #0
90008246:	d1f4      	bne.n	90008232 <HAL_I2C_Mem_Read+0x166>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
90008248:	698b      	ldr	r3, [r1, #24]
9000824a:	f013 0340 	ands.w	r3, r3, #64	@ 0x40
9000824e:	d1f0      	bne.n	90008232 <HAL_I2C_Mem_Read+0x166>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90008250:	6c62      	ldr	r2, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
90008252:	2120      	movs	r1, #32
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90008254:	430a      	orrs	r2, r1
90008256:	6462      	str	r2, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
90008258:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
9000825c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
90008260:	2300      	movs	r3, #0
90008262:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
90008266:	e769      	b.n	9000813c <HAL_I2C_Mem_Read+0x70>
90008268:	1c70      	adds	r0, r6, #1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
9000826a:	6822      	ldr	r2, [r4, #0]
9000826c:	d110      	bne.n	90008290 <HAL_I2C_Mem_Read+0x1c4>
9000826e:	6993      	ldr	r3, [r2, #24]
90008270:	0619      	lsls	r1, r3, #24
90008272:	d5fc      	bpl.n	9000826e <HAL_I2C_Mem_Read+0x1a2>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
90008274:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
90008276:	b29b      	uxth	r3, r3
90008278:	2bff      	cmp	r3, #255	@ 0xff
9000827a:	d919      	bls.n	900082b0 <HAL_I2C_Mem_Read+0x1e4>
  MODIFY_REG(hi2c->Instance->CR2, \
9000827c:	6853      	ldr	r3, [r2, #4]
9000827e:	492f      	ldr	r1, [pc, #188]	@ (9000833c <HAL_I2C_Mem_Read+0x270>)
90008280:	400b      	ands	r3, r1
90008282:	492f      	ldr	r1, [pc, #188]	@ (90008340 <HAL_I2C_Mem_Read+0x274>)
90008284:	433b      	orrs	r3, r7
90008286:	4319      	orrs	r1, r3
          hi2c->XferSize = MAX_NBYTE_SIZE;
90008288:	23ff      	movs	r3, #255	@ 0xff
9000828a:	8523      	strh	r3, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
9000828c:	6051      	str	r1, [r2, #4]
}
9000828e:	e7af      	b.n	900081f0 <HAL_I2C_Mem_Read+0x124>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
90008290:	6993      	ldr	r3, [r2, #24]
90008292:	061b      	lsls	r3, r3, #24
90008294:	d4ee      	bmi.n	90008274 <HAL_I2C_Mem_Read+0x1a8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90008296:	f7fe ff6b 	bl	90007170 <HAL_GetTick>
9000829a:	1b43      	subs	r3, r0, r5
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
9000829c:	6822      	ldr	r2, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
9000829e:	429e      	cmp	r6, r3
900082a0:	d301      	bcc.n	900082a6 <HAL_I2C_Mem_Read+0x1da>
900082a2:	2e00      	cmp	r6, #0
900082a4:	d1f4      	bne.n	90008290 <HAL_I2C_Mem_Read+0x1c4>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
900082a6:	6993      	ldr	r3, [r2, #24]
900082a8:	f013 0380 	ands.w	r3, r3, #128	@ 0x80
900082ac:	d1f0      	bne.n	90008290 <HAL_I2C_Mem_Read+0x1c4>
900082ae:	e7b5      	b.n	9000821c <HAL_I2C_Mem_Read+0x150>
          hi2c->XferSize = hi2c->XferCount;
900082b0:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
900082b2:	4822      	ldr	r0, [pc, #136]	@ (9000833c <HAL_I2C_Mem_Read+0x270>)
          hi2c->XferSize = hi2c->XferCount;
900082b4:	b29b      	uxth	r3, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
900082b6:	b2d9      	uxtb	r1, r3
          hi2c->XferSize = hi2c->XferCount;
900082b8:	8523      	strh	r3, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
900082ba:	6853      	ldr	r3, [r2, #4]
900082bc:	4003      	ands	r3, r0
900082be:	433b      	orrs	r3, r7
900082c0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
900082c4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
900082c8:	6053      	str	r3, [r2, #4]
}
900082ca:	e791      	b.n	900081f0 <HAL_I2C_Mem_Read+0x124>
      hi2c->XferSize = hi2c->XferCount;
900082cc:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
900082ce:	4819      	ldr	r0, [pc, #100]	@ (90008334 <HAL_I2C_Mem_Read+0x268>)
      hi2c->XferSize = hi2c->XferCount;
900082d0:	b29b      	uxth	r3, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
900082d2:	b2da      	uxtb	r2, r3
      hi2c->XferSize = hi2c->XferCount;
900082d4:	8523      	strh	r3, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
900082d6:	684b      	ldr	r3, [r1, #4]
900082d8:	4003      	ands	r3, r0
900082da:	433b      	orrs	r3, r7
900082dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
900082e0:	4a18      	ldr	r2, [pc, #96]	@ (90008344 <HAL_I2C_Mem_Read+0x278>)
900082e2:	431a      	orrs	r2, r3
900082e4:	604a      	str	r2, [r1, #4]
}
900082e6:	e76b      	b.n	900081c0 <HAL_I2C_Mem_Read+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
900082e8:	ea4f 2319 	mov.w	r3, r9, lsr #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
900082ec:	462a      	mov	r2, r5
900082ee:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
900082f0:	628b      	str	r3, [r1, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
900082f2:	4631      	mov	r1, r6
900082f4:	f7ff fbde 	bl	90007ab4 <I2C_WaitOnTXISFlagUntilTimeout>
900082f8:	2800      	cmp	r0, #0
900082fa:	d1b1      	bne.n	90008260 <HAL_I2C_Mem_Read+0x194>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
900082fc:	fa5f f389 	uxtb.w	r3, r9
90008300:	6821      	ldr	r1, [r4, #0]
90008302:	628b      	str	r3, [r1, #40]	@ 0x28
90008304:	e749      	b.n	9000819a <HAL_I2C_Mem_Read+0xce>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
90008306:	462a      	mov	r2, r5
90008308:	4631      	mov	r1, r6
9000830a:	4620      	mov	r0, r4
9000830c:	f7ff fc88 	bl	90007c20 <I2C_WaitOnSTOPFlagUntilTimeout>
90008310:	2800      	cmp	r0, #0
90008312:	f47f af13 	bne.w	9000813c <HAL_I2C_Mem_Read+0x70>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
90008316:	6823      	ldr	r3, [r4, #0]
90008318:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
9000831a:	4d0b      	ldr	r5, [pc, #44]	@ (90008348 <HAL_I2C_Mem_Read+0x27c>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
9000831c:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
9000831e:	685a      	ldr	r2, [r3, #4]
90008320:	402a      	ands	r2, r5
90008322:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
90008324:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
90008328:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
9000832c:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
90008330:	e705      	b.n	9000813e <HAL_I2C_Mem_Read+0x72>
90008332:	bf00      	nop
90008334:	fc009800 	.word	0xfc009800
90008338:	01ff2400 	.word	0x01ff2400
9000833c:	fc009c00 	.word	0xfc009c00
90008340:	01ff0000 	.word	0x01ff0000
90008344:	02002400 	.word	0x02002400
90008348:	fe00e800 	.word	0xfe00e800

9000834c <HAL_I2C_GetState>:
  return hi2c->State;
9000834c:	f890 0041 	ldrb.w	r0, [r0, #65]	@ 0x41
}
90008350:	4770      	bx	lr
90008352:	bf00      	nop

90008354 <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
90008354:	6c40      	ldr	r0, [r0, #68]	@ 0x44
}
90008356:	4770      	bx	lr

90008358 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
90008358:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
9000835c:	2a20      	cmp	r2, #32
9000835e:	d123      	bne.n	900083a8 <HAL_I2CEx_ConfigAnalogFilter+0x50>
90008360:	fa5f fc82 	uxtb.w	ip, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
90008364:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
90008368:	4603      	mov	r3, r0
9000836a:	2a01      	cmp	r2, #1
9000836c:	d01c      	beq.n	900083a8 <HAL_I2CEx_ConfigAnalogFilter+0x50>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
9000836e:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
90008370:	2024      	movs	r0, #36	@ 0x24
{
90008372:	b500      	push	{lr}
    hi2c->State = HAL_I2C_STATE_BUSY;
90008374:	f883 0041 	strb.w	r0, [r3, #65]	@ 0x41
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
90008378:	f04f 0e00 	mov.w	lr, #0
    __HAL_I2C_DISABLE(hi2c);
9000837c:	6810      	ldr	r0, [r2, #0]
9000837e:	f020 0001 	bic.w	r0, r0, #1
90008382:	6010      	str	r0, [r2, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
90008384:	6810      	ldr	r0, [r2, #0]
90008386:	f420 5080 	bic.w	r0, r0, #4096	@ 0x1000
9000838a:	6010      	str	r0, [r2, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
9000838c:	6810      	ldr	r0, [r2, #0]
9000838e:	4301      	orrs	r1, r0

    return HAL_OK;
90008390:	4670      	mov	r0, lr
    hi2c->Instance->CR1 |= AnalogFilter;
90008392:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
90008394:	6811      	ldr	r1, [r2, #0]
90008396:	f041 0101 	orr.w	r1, r1, #1
9000839a:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
9000839c:	f883 c041 	strb.w	ip, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
900083a0:	f883 e040 	strb.w	lr, [r3, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
900083a4:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_LOCK(hi2c);
900083a8:	2002      	movs	r0, #2
}
900083aa:	4770      	bx	lr

900083ac <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
900083ac:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
900083b0:	2a20      	cmp	r2, #32
900083b2:	d122      	bne.n	900083fa <HAL_I2CEx_ConfigDigitalFilter+0x4e>
900083b4:	4603      	mov	r3, r0
{
900083b6:	b500      	push	{lr}
900083b8:	fa5f fe82 	uxtb.w	lr, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
900083bc:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
900083c0:	2a01      	cmp	r2, #1
900083c2:	d01c      	beq.n	900083fe <HAL_I2CEx_ConfigDigitalFilter+0x52>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
900083c4:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
900083c6:	2024      	movs	r0, #36	@ 0x24
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
900083c8:	f04f 0c00 	mov.w	ip, #0
    hi2c->State = HAL_I2C_STATE_BUSY;
900083cc:	f883 0041 	strb.w	r0, [r3, #65]	@ 0x41
    __HAL_I2C_DISABLE(hi2c);
900083d0:	6810      	ldr	r0, [r2, #0]
900083d2:	f020 0001 	bic.w	r0, r0, #1
900083d6:	6010      	str	r0, [r2, #0]
    tmpreg = hi2c->Instance->CR1;
900083d8:	6810      	ldr	r0, [r2, #0]
    tmpreg &= ~(I2C_CR1_DNF);
900083da:	f420 6070 	bic.w	r0, r0, #3840	@ 0xf00
    tmpreg |= DigitalFilter << 8U;
900083de:	ea40 2101 	orr.w	r1, r0, r1, lsl #8

    return HAL_OK;
900083e2:	4660      	mov	r0, ip
    hi2c->Instance->CR1 = tmpreg;
900083e4:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
900083e6:	6811      	ldr	r1, [r2, #0]
900083e8:	f041 0101 	orr.w	r1, r1, #1
900083ec:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
900083ee:	f883 e041 	strb.w	lr, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
900083f2:	f883 c040 	strb.w	ip, [r3, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
900083f6:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_LOCK(hi2c);
900083fa:	2002      	movs	r0, #2
}
900083fc:	4770      	bx	lr
    __HAL_LOCK(hi2c);
900083fe:	2002      	movs	r0, #2
}
90008400:	f85d fb04 	ldr.w	pc, [sp], #4

90008404 <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
90008404:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
90008408:	4699      	mov	r9, r3
9000840a:	4680      	mov	r8, r0
9000840c:	460d      	mov	r5, r1
9000840e:	4614      	mov	r4, r2

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
  for (l = 0; l < 16UL; l++)
  {
    i = (uint32_t)Bits[l];
90008410:	7803      	ldrb	r3, [r0, #0]
90008412:	2601      	movs	r6, #1
  p = 0;
90008414:	2700      	movs	r7, #0
90008416:	e005      	b.n	90008424 <JPEG_Bits_To_SizeCodes+0x20>
    i = (uint32_t)Bits[l];
90008418:	f818 3f01 	ldrb.w	r3, [r8, #1]!
    if ((p + i) > 256UL)
9000841c:	19da      	adds	r2, r3, r7
9000841e:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
90008422:	d83a      	bhi.n	9000849a <JPEG_Bits_To_SizeCodes+0x96>
      /* check for table overflow */
      return HAL_ERROR;
    }
    while (i != 0UL)
    {
      Huffsize[p] = (uint8_t) l + 1U;
90008424:	19e8      	adds	r0, r5, r7
90008426:	461a      	mov	r2, r3
90008428:	4631      	mov	r1, r6
    while (i != 0UL)
9000842a:	b113      	cbz	r3, 90008432 <JPEG_Bits_To_SizeCodes+0x2e>
      p++;
9000842c:	441f      	add	r7, r3
      Huffsize[p] = (uint8_t) l + 1U;
9000842e:	f01a fe8d 	bl	9002314c <memset>
  for (l = 0; l < 16UL; l++)
90008432:	2e10      	cmp	r6, #16
    if ((p + i) > 256UL)
90008434:	f106 0601 	add.w	r6, r6, #1
  for (l = 0; l < 16UL; l++)
90008438:	d1ee      	bne.n	90008418 <JPEG_Bits_To_SizeCodes+0x14>
      i--;
    }
  }
  Huffsize[p] = 0;
9000843a:	2300      	movs	r3, #0
9000843c:	55eb      	strb	r3, [r5, r7]
  *LastK = p;
9000843e:	f8c9 7000 	str.w	r7, [r9]

  /* Figure C.2: Generation of table of Huffman codes */
  code = 0;
  si = Huffsize[0];
90008442:	7829      	ldrb	r1, [r5, #0]
90008444:	460a      	mov	r2, r1
  p = 0;
  while (Huffsize[p] != 0U)
90008446:	b329      	cbz	r1, 90008494 <JPEG_Bits_To_SizeCodes+0x90>
  code = 0;
90008448:	4699      	mov	r9, r3
9000844a:	f06f 4840 	mvn.w	r8, #3221225472	@ 0xc0000000
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
    {
      return HAL_ERROR;
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
9000844e:	2701      	movs	r7, #1
  p = 0;
90008450:	461e      	mov	r6, r3
    while (((uint32_t) Huffsize[p]) == si)
90008452:	4291      	cmp	r1, r2
90008454:	d124      	bne.n	900084a0 <JPEG_Bits_To_SizeCodes+0x9c>
90008456:	eb06 0008 	add.w	r0, r6, r8
9000845a:	eb05 0c06 	add.w	ip, r5, r6
9000845e:	464b      	mov	r3, r9
90008460:	eb04 0080 	add.w	r0, r4, r0, lsl #2
      Huffcode[p] = code;
90008464:	f840 3f04 	str.w	r3, [r0, #4]!
      code++;
90008468:	4619      	mov	r1, r3
    while (((uint32_t) Huffsize[p]) == si)
9000846a:	f81c ef01 	ldrb.w	lr, [ip, #1]!
      code++;
9000846e:	3301      	adds	r3, #1
    while (((uint32_t) Huffsize[p]) == si)
90008470:	4596      	cmp	lr, r2
90008472:	d0f7      	beq.n	90008464 <JPEG_Bits_To_SizeCodes+0x60>
90008474:	3601      	adds	r6, #1
90008476:	eba6 0609 	sub.w	r6, r6, r9
      p++;
9000847a:	440e      	add	r6, r1
    if(si > 31UL)
9000847c:	2a1f      	cmp	r2, #31
9000847e:	d80c      	bhi.n	9000849a <JPEG_Bits_To_SizeCodes+0x96>
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
90008480:	fa07 f102 	lsl.w	r1, r7, r2
90008484:	4299      	cmp	r1, r3
90008486:	d908      	bls.n	9000849a <JPEG_Bits_To_SizeCodes+0x96>
  while (Huffsize[p] != 0U)
90008488:	5da9      	ldrb	r1, [r5, r6]
    {
      return HAL_ERROR;
    }
    code <<= 1;
9000848a:	ea4f 0943 	mov.w	r9, r3, lsl #1
    si++;
9000848e:	3201      	adds	r2, #1
  while (Huffsize[p] != 0U)
90008490:	2900      	cmp	r1, #0
90008492:	d1de      	bne.n	90008452 <JPEG_Bits_To_SizeCodes+0x4e>
  }
  /* Return function status */
  return HAL_OK;
90008494:	2000      	movs	r0, #0
}
90008496:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      return HAL_ERROR;
9000849a:	2001      	movs	r0, #1
}
9000849c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    while (((uint32_t) Huffsize[p]) == si)
900084a0:	464b      	mov	r3, r9
900084a2:	e7eb      	b.n	9000847c <JPEG_Bits_To_SizeCodes+0x78>

900084a4 <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
900084a4:	b5f0      	push	{r4, r5, r6, r7, lr}
900084a6:	f2ad 5d14 	subw	sp, sp, #1300	@ 0x514
900084aa:	460d      	mov	r5, r1
900084ac:	4604      	mov	r4, r0
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
900084ae:	ab01      	add	r3, sp, #4
900084b0:	aa43      	add	r2, sp, #268	@ 0x10c
900084b2:	a902      	add	r1, sp, #8
900084b4:	f7ff ffa6 	bl	90008404 <JPEG_Bits_To_SizeCodes>
  if (error != HAL_OK)
900084b8:	b9d0      	cbnz	r0, 900084f0 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4c>
    return  error;
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;

  while (k < lastK)
900084ba:	9f01      	ldr	r7, [sp, #4]
900084bc:	b1c7      	cbz	r7, 900084f0 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4c>
900084be:	370f      	adds	r7, #15
900084c0:	f50d 7e86 	add.w	lr, sp, #268	@ 0x10c
900084c4:	a902      	add	r1, sp, #8
900084c6:	f104 0c0f 	add.w	ip, r4, #15
900084ca:	4427      	add	r7, r4
900084cc:	e009      	b.n	900084e2 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x3e>
      return HAL_ERROR; /* Huffman Table overflow error*/
    }
    else
    {
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
900084ce:	f811 2b01 	ldrb.w	r2, [r1], #1
  while (k < lastK)
900084d2:	45bc      	cmp	ip, r7
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
900084d4:	f85e 6b04 	ldr.w	r6, [lr], #4
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
900084d8:	f102 32ff 	add.w	r2, r2, #4294967295
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
900084dc:	60e6      	str	r6, [r4, #12]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
900084de:	54ea      	strb	r2, [r5, r3]
  while (k < lastK)
900084e0:	d006      	beq.n	900084f0 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4c>
    l = DC_BitsValsTable->HuffVal[k];
900084e2:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
900084e6:	2b0b      	cmp	r3, #11
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
900084e8:	eb05 0483 	add.w	r4, r5, r3, lsl #2
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
900084ec:	d9ef      	bls.n	900084ce <JPEG_DCHuff_BitsVals_To_SizeCodes+0x2a>
      return HAL_ERROR; /* Huffman Table overflow error*/
900084ee:	2001      	movs	r0, #1
    }
  }

  /* Return function status */
  return HAL_OK;
}
900084f0:	f20d 5d14 	addw	sp, sp, #1300	@ 0x514
900084f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
900084f6:	bf00      	nop

900084f8 <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
900084f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t i;
  uint32_t lsb;
  uint32_t msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
900084fc:	6804      	ldr	r4, [r0, #0]
{
900084fe:	b093      	sub	sp, #76	@ 0x4c
90008500:	4608      	mov	r0, r1
  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
90008502:	f504 63f8 	add.w	r3, r4, #1984	@ 0x7c0
90008506:	429a      	cmp	r2, r3
90008508:	f000 809d 	beq.w	90008646 <JPEG_Set_HuffDC_Mem+0x14e>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
  }
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
9000850c:	f504 63fc 	add.w	r3, r4, #2016	@ 0x7e0
90008510:	429a      	cmp	r2, r3
90008512:	d003      	beq.n	9000851c <JPEG_Set_HuffDC_Mem+0x24>
  {
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
  }
  else
  {
    return HAL_ERROR;
90008514:	2001      	movs	r0, #1
    }
  }

  /* Return function status */
  return HAL_OK;
}
90008516:	b013      	add	sp, #76	@ 0x4c
90008518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
9000851c:	f504 64ff 	add.w	r4, r4, #2040	@ 0x7f8
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
90008520:	a903      	add	r1, sp, #12
90008522:	f7ff ffbf 	bl	900084a4 <JPEG_DCHuff_BitsVals_To_SizeCodes>
    if (error != HAL_OK)
90008526:	2800      	cmp	r0, #0
90008528:	d1f5      	bne.n	90008516 <JPEG_Set_HuffDC_Mem+0x1e>
    *addressDef = 0x0FFF0FFF;
9000852a:	f06f 23f0 	mvn.w	r3, #4026593280	@ 0xf000f000
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000852e:	f89d a017 	ldrb.w	sl, [sp, #23]
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008532:	f89d e016 	ldrb.w	lr, [sp, #22]
    *addressDef = 0x0FFF0FFF;
90008536:	6023      	str	r3, [r4, #0]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008538:	ea4f 2a0a 	mov.w	sl, sl, lsl #8
    *addressDef = 0x0FFF0FFF;
9000853c:	6063      	str	r3, [r4, #4]
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000853e:	ea4f 2e0e 	mov.w	lr, lr, lsl #8
90008542:	f89d 300e 	ldrb.w	r3, [sp, #14]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008546:	f40a 6a70 	and.w	sl, sl, #3840	@ 0xf00
9000854a:	f89d 2044 	ldrb.w	r2, [sp, #68]	@ 0x44
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000854e:	f40e 6e70 	and.w	lr, lr, #3840	@ 0xf00
90008552:	021b      	lsls	r3, r3, #8
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008554:	f89d 9015 	ldrb.w	r9, [sp, #21]
90008558:	ea4a 0a02 	orr.w	sl, sl, r2
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000855c:	f89d c014 	ldrb.w	ip, [sp, #20]
90008560:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008564:	ea4f 2909 	mov.w	r9, r9, lsl #8
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008568:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000856c:	f89d 8013 	ldrb.w	r8, [sp, #19]
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008570:	9301      	str	r3, [sp, #4]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008572:	f409 6970 	and.w	r9, r9, #3840	@ 0xf00
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008576:	f89d 3040 	ldrb.w	r3, [sp, #64]	@ 0x40
9000857a:	f40c 6c70 	and.w	ip, ip, #3840	@ 0xf00
9000857e:	f89d 1012 	ldrb.w	r1, [sp, #18]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008582:	ea4f 2808 	mov.w	r8, r8, lsl #8
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008586:	ea4e 0e03 	orr.w	lr, lr, r3
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000858a:	f89d 7011 	ldrb.w	r7, [sp, #17]
9000858e:	f408 6870 	and.w	r8, r8, #3840	@ 0xf00
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008592:	0209      	lsls	r1, r1, #8
      *address = lsb | (msb << 16);
90008594:	ea4e 4e0a 	orr.w	lr, lr, sl, lsl #16
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008598:	f89d 2010 	ldrb.w	r2, [sp, #16]
9000859c:	f401 6170 	and.w	r1, r1, #3840	@ 0xf00
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
900085a0:	023f      	lsls	r7, r7, #8
      *address = lsb | (msb << 16);
900085a2:	f844 ec04 	str.w	lr, [r4, #-4]
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
900085a6:	0212      	lsls	r2, r2, #8
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
900085a8:	f89d e03c 	ldrb.w	lr, [sp, #60]	@ 0x3c
900085ac:	f407 6770 	and.w	r7, r7, #3840	@ 0xf00
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
900085b0:	f402 6270 	and.w	r2, r2, #3840	@ 0xf00
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
900085b4:	f89d 600f 	ldrb.w	r6, [sp, #15]
900085b8:	ea49 090e 	orr.w	r9, r9, lr
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
900085bc:	f89d e038 	ldrb.w	lr, [sp, #56]	@ 0x38
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
900085c0:	0236      	lsls	r6, r6, #8
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
900085c2:	9b01      	ldr	r3, [sp, #4]
900085c4:	ea4c 0c0e 	orr.w	ip, ip, lr
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
900085c8:	f89d 500d 	ldrb.w	r5, [sp, #13]
900085cc:	f406 6670 	and.w	r6, r6, #3840	@ 0xf00
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
900085d0:	f89d b00c 	ldrb.w	fp, [sp, #12]
      *address = lsb | (msb << 16);
900085d4:	ea4c 4c09 	orr.w	ip, ip, r9, lsl #16
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
900085d8:	022d      	lsls	r5, r5, #8
      *address = lsb | (msb << 16);
900085da:	f844 cc08 	str.w	ip, [r4, #-8]
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
900085de:	ea4f 2b0b 	mov.w	fp, fp, lsl #8
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
900085e2:	f89d c034 	ldrb.w	ip, [sp, #52]	@ 0x34
900085e6:	f405 6570 	and.w	r5, r5, #3840	@ 0xf00
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
900085ea:	f40b 6b70 	and.w	fp, fp, #3840	@ 0xf00
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
900085ee:	ea48 080c 	orr.w	r8, r8, ip
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
900085f2:	f89d c030 	ldrb.w	ip, [sp, #48]	@ 0x30
900085f6:	ea41 010c 	orr.w	r1, r1, ip
      *address = lsb | (msb << 16);
900085fa:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
900085fe:	f844 1c0c 	str.w	r1, [r4, #-12]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008602:	f89d 102c 	ldrb.w	r1, [sp, #44]	@ 0x2c
90008606:	430f      	orrs	r7, r1
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008608:	f89d 1028 	ldrb.w	r1, [sp, #40]	@ 0x28
9000860c:	430a      	orrs	r2, r1
      *address = lsb | (msb << 16);
9000860e:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
90008612:	f844 2c10 	str.w	r2, [r4, #-16]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008616:	f89d 2024 	ldrb.w	r2, [sp, #36]	@ 0x24
9000861a:	4316      	orrs	r6, r2
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000861c:	f89d 2020 	ldrb.w	r2, [sp, #32]
90008620:	4313      	orrs	r3, r2
      *address = lsb | (msb << 16);
90008622:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
90008626:	f844 3c14 	str.w	r3, [r4, #-20]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000862a:	f89d 301c 	ldrb.w	r3, [sp, #28]
9000862e:	431d      	orrs	r5, r3
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008630:	f89d 3018 	ldrb.w	r3, [sp, #24]
90008634:	ea4b 0303 	orr.w	r3, fp, r3
      *address = lsb | (msb << 16);
90008638:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
9000863c:	f844 3c18 	str.w	r3, [r4, #-24]
}
90008640:	b013      	add	sp, #76	@ 0x4c
90008642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
90008646:	f504 64fb 	add.w	r4, r4, #2008	@ 0x7d8
  if (HuffTableDC != NULL)
9000864a:	e769      	b.n	90008520 <JPEG_Set_HuffDC_Mem+0x28>

9000864c <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
9000864c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
90008650:	6804      	ldr	r4, [r0, #0]
{
90008652:	f6ad 0d3c 	subw	sp, sp, #2108	@ 0x83c
90008656:	460d      	mov	r5, r1
  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
90008658:	f504 63a0 	add.w	r3, r4, #1280	@ 0x500
9000865c:	429a      	cmp	r2, r3
9000865e:	d041      	beq.n	900086e4 <JPEG_Set_HuffAC_Mem+0x98>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
  }
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
90008660:	f504 63cc 	add.w	r3, r4, #1632	@ 0x660
90008664:	429a      	cmp	r2, r3
90008666:	d004      	beq.n	90008672 <JPEG_Set_HuffAC_Mem+0x26>
  {
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
  }
  else
  {
    return HAL_ERROR;
90008668:	2001      	movs	r0, #1
    }
  }

  /* Return function status */
  return HAL_OK;
}
9000866a:	f60d 0d3c 	addw	sp, sp, #2108	@ 0x83c
9000866e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
90008672:	f204 74a4 	addw	r4, r4, #1956	@ 0x7a4
  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
90008676:	4628      	mov	r0, r5
90008678:	466b      	mov	r3, sp
9000867a:	f20d 4234 	addw	r2, sp, #1076	@ 0x434
9000867e:	a901      	add	r1, sp, #4
90008680:	f7ff fec0 	bl	90008404 <JPEG_Bits_To_SizeCodes>
  if (error != HAL_OK)
90008684:	2800      	cmp	r0, #0
90008686:	d1f0      	bne.n	9000866a <JPEG_Set_HuffAC_Mem+0x1e>
  while (k < lastK)
90008688:	9b00      	ldr	r3, [sp, #0]
9000868a:	b373      	cbz	r3, 900086ea <JPEG_Set_HuffAC_Mem+0x9e>
9000868c:	330f      	adds	r3, #15
9000868e:	f20d 4c34 	addw	ip, sp, #1076	@ 0x434
90008692:	af01      	add	r7, sp, #4
90008694:	f105 020f 	add.w	r2, r5, #15
90008698:	eb05 0e03 	add.w	lr, r5, r3
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
9000869c:	ae42      	add	r6, sp, #264	@ 0x108
9000869e:	e011      	b.n	900086c4 <JPEG_Set_HuffAC_Mem+0x78>
      l = (msb * 10UL) + lsb - 1UL;
900086a0:	eb03 0345 	add.w	r3, r3, r5, lsl #1
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
900086a4:	2ba1      	cmp	r3, #161	@ 0xa1
900086a6:	d8df      	bhi.n	90008668 <JPEG_Set_HuffAC_Mem+0x1c>
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
900086a8:	f817 5b01 	ldrb.w	r5, [r7], #1
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
900086ac:	eb06 0883 	add.w	r8, r6, r3, lsl #2
900086b0:	f85c 1b04 	ldr.w	r1, [ip], #4
  while (k < lastK)
900086b4:	4572      	cmp	r2, lr
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
900086b6:	f105 35ff 	add.w	r5, r5, #4294967295
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
900086ba:	46b1      	mov	r9, r6
900086bc:	f8c8 10a4 	str.w	r1, [r8, #164]	@ 0xa4
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
900086c0:	54f5      	strb	r5, [r6, r3]
  while (k < lastK)
900086c2:	d014      	beq.n	900086ee <JPEG_Set_HuffAC_Mem+0xa2>
    l = AC_BitsValsTable->HuffVal[k];
900086c4:	f812 1f01 	ldrb.w	r1, [r2, #1]!
      l = 160; /*l = 0x00 EOB code*/
900086c8:	23a0      	movs	r3, #160	@ 0xa0
    if (l == 0UL)
900086ca:	2900      	cmp	r1, #0
900086cc:	d0ec      	beq.n	900086a8 <JPEG_Set_HuffAC_Mem+0x5c>
      msb = (l & 0xF0UL) >> 4;
900086ce:	090d      	lsrs	r5, r1, #4
      lsb = (l & 0x0FUL);
900086d0:	f001 030f 	and.w	r3, r1, #15
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
900086d4:	29f0      	cmp	r1, #240	@ 0xf0
      l = (msb * 10UL) + lsb - 1UL;
900086d6:	eb05 0585 	add.w	r5, r5, r5, lsl #2
900086da:	f103 33ff 	add.w	r3, r3, #4294967295
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
900086de:	d1df      	bne.n	900086a0 <JPEG_Set_HuffAC_Mem+0x54>
      l = 161;
900086e0:	23a1      	movs	r3, #161	@ 0xa1
900086e2:	e7e1      	b.n	900086a8 <JPEG_Set_HuffAC_Mem+0x5c>
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
900086e4:	f204 6444 	addw	r4, r4, #1604	@ 0x644
  if (HuffTableAC != NULL)
900086e8:	e7c5      	b.n	90008676 <JPEG_Set_HuffAC_Mem+0x2a>
900086ea:	f50d 7984 	add.w	r9, sp, #264	@ 0x108
      *addressDef = 0x0FFF0FFF;
900086ee:	f06f 23f0 	mvn.w	r3, #4026593280	@ 0xf000f000
    *addressDef = 0x0FD10FD0;
900086f2:	4a1a      	ldr	r2, [pc, #104]	@ (9000875c <JPEG_Set_HuffAC_Mem+0x110>)
900086f4:	eba9 0c89 	sub.w	ip, r9, r9, lsl #2
900086f8:	4649      	mov	r1, r9
      *addressDef = 0x0FFF0FFF;
900086fa:	6023      	str	r3, [r4, #0]
900086fc:	f10d 0566 	add.w	r5, sp, #102	@ 0x66
90008700:	6063      	str	r3, [r4, #4]
90008702:	f50c 7e4a 	add.w	lr, ip, #808	@ 0x328
90008706:	60a3      	str	r3, [r4, #8]
    *addressDef = 0x0FD30FD2;
90008708:	f103 33d3 	add.w	r3, r3, #3553874899	@ 0xd3d3d3d3
    *addressDef = 0x0FD10FD0;
9000870c:	60e2      	str	r2, [r4, #12]
    *addressDef = 0x0FD30FD2;
9000870e:	f50c 7c49 	add.w	ip, ip, #804	@ 0x324
90008712:	f103 232c 	add.w	r3, r3, #738208768	@ 0x2c002c00
90008716:	6123      	str	r3, [r4, #16]
    *addressDef = 0x0FD50FD4;
90008718:	f103 1302 	add.w	r3, r3, #131074	@ 0x20002
9000871c:	6163      	str	r3, [r4, #20]
    *addressDef = 0x0FD70FD6;
9000871e:	f103 1302 	add.w	r3, r3, #131074	@ 0x20002
90008722:	61a3      	str	r3, [r4, #24]
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
90008724:	f891 20a1 	ldrb.w	r2, [r1, #161]	@ 0xa1
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
90008728:	f891 30a0 	ldrb.w	r3, [r1, #160]	@ 0xa0
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
9000872c:	0212      	lsls	r2, r2, #8
9000872e:	f81e 7021 	ldrb.w	r7, [lr, r1, lsl #2]
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
90008732:	021b      	lsls	r3, r3, #8
90008734:	f81c 6021 	ldrb.w	r6, [ip, r1, lsl #2]
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
90008738:	f402 6270 	and.w	r2, r2, #3840	@ 0xf00
    while (i > 1UL)
9000873c:	3902      	subs	r1, #2
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
9000873e:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
90008742:	433a      	orrs	r2, r7
    while (i > 1UL)
90008744:	42a9      	cmp	r1, r5
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
90008746:	ea43 0306 	orr.w	r3, r3, r6
      *address = lsb | (msb << 16);
9000874a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
9000874e:	f844 3d04 	str.w	r3, [r4, #-4]!
    while (i > 1UL)
90008752:	d1e7      	bne.n	90008724 <JPEG_Set_HuffAC_Mem+0xd8>
}
90008754:	f60d 0d3c 	addw	sp, sp, #2108	@ 0x83c
90008758:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
9000875c:	0fd10fd0 	.word	0x0fd10fd0

90008760 <JPEG_Init_Process>:
  * @retval None
  */
static void JPEG_Init_Process(JPEG_HandleTypeDef *hjpeg)
{
  /*Reset pause*/
  hjpeg->Context &= (~(JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT));
90008760:	6d42      	ldr	r2, [r0, #84]	@ 0x54

  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
  {
    /*Set JPEG Codec to Decoding mode */
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
90008762:	6803      	ldr	r3, [r0, #0]
  hjpeg->Context &= (~(JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT));
90008764:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
90008768:	6542      	str	r2, [r0, #84]	@ 0x54
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
9000876a:	6d42      	ldr	r2, [r0, #84]	@ 0x54
9000876c:	f002 0203 	and.w	r2, r2, #3
90008770:	2a02      	cmp	r2, #2
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
90008772:	685a      	ldr	r2, [r3, #4]
90008774:	bf0c      	ite	eq
90008776:	f042 0208 	orreq.w	r2, r2, #8
  }
  else /* JPEG_CONTEXT_ENCODE */
  {
    /*Set JPEG Codec to Encoding mode */
    hjpeg->Instance->CONFR1 &= ~JPEG_CONFR1_DE;
9000877a:	f022 0208 	bicne.w	r2, r2, #8
9000877e:	605a      	str	r2, [r3, #4]
  }

  /*Stop JPEG processing */
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
90008780:	681a      	ldr	r2, [r3, #0]
90008782:	f022 0201 	bic.w	r2, r2, #1
90008786:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
90008788:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
9000878a:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
9000878e:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
90008790:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
90008792:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
90008796:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
90008798:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
9000879a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
9000879e:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
900087a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
900087a2:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
900087a6:	639a      	str	r2, [r3, #56]	@ 0x38

  /*Start Encoding/Decoding*/
  hjpeg->Instance->CONFR0 |=  JPEG_CONFR0_START;
900087a8:	681a      	ldr	r2, [r3, #0]
900087aa:	f042 0201 	orr.w	r2, r2, #1
900087ae:	601a      	str	r2, [r3, #0]

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
900087b0:	6d42      	ldr	r2, [r0, #84]	@ 0x54
900087b2:	f002 020c 	and.w	r2, r2, #12
900087b6:	2a08      	cmp	r2, #8
900087b8:	d00a      	beq.n	900087d0 <JPEG_Init_Process+0x70>
  {
    /*Enable IN/OUT, end of Conversation, and end of header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
900087ba:	6d42      	ldr	r2, [r0, #84]	@ 0x54
900087bc:	f002 020c 	and.w	r2, r2, #12
900087c0:	2a0c      	cmp	r2, #12
900087c2:	d000      	beq.n	900087c6 <JPEG_Init_Process+0x66>
  }
  else
  {
    /* Nothing to do */
  }
}
900087c4:	4770      	bx	lr
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
900087c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
900087c8:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
900087cc:	631a      	str	r2, [r3, #48]	@ 0x30
}
900087ce:	4770      	bx	lr
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
900087d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
900087d2:	f042 026e 	orr.w	r2, r2, #110	@ 0x6e
900087d6:	631a      	str	r2, [r3, #48]	@ 0x30
900087d8:	4770      	bx	lr
900087da:	bf00      	nop

900087dc <JPEG_DMA_StartProcess>:
  /*if the MDMA In is triggred with JPEG In FIFO Threshold flag
      then MDMA In buffer size is 32 bytes
    else (MDMA In is triggred with JPEG In FIFO not full flag)
      then MDMA In buffer size is 4 bytes
    */
  inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
900087dc:	6b01      	ldr	r1, [r0, #48]	@ 0x30
    else (MDMA Out is triggred with JPEG Out FIFO not empty flag)
      then MDMA buffer size is 4 bytes
    */
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;

  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
900087de:	6a82      	ldr	r2, [r0, #40]	@ 0x28
{
900087e0:	b5f0      	push	{r4, r5, r6, r7, lr}
  inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
900087e2:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
{
900087e4:	b083      	sub	sp, #12
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
900087e6:	42aa      	cmp	r2, r5
900087e8:	d32a      	bcc.n	90008840 <JPEG_DMA_StartProcess+0x64>
900087ea:	4604      	mov	r4, r0
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
900087ec:	6b40      	ldr	r0, [r0, #52]	@ 0x34
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
900087ee:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
900087f0:	6a86      	ldr	r6, [r0, #40]	@ 0x28
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
900087f2:	42b3      	cmp	r3, r6
900087f4:	d324      	bcc.n	90008840 <JPEG_DMA_StartProcess+0x64>
    return HAL_ERROR;
  }
  /* Set the JPEG MDMA In transfer complete callback */
  hjpeg->hdmain->XferCpltCallback = JPEG_MDMAInCpltCallback;
  /* Set the MDMA In error callback */
  hjpeg->hdmain->XferErrorCallback = JPEG_MDMAErrorCallback;
900087f6:	4f19      	ldr	r7, [pc, #100]	@ (9000885c <JPEG_DMA_StartProcess+0x80>)
  hjpeg->hdmain->XferCpltCallback = JPEG_MDMAInCpltCallback;
900087f8:	f8df c06c 	ldr.w	ip, [pc, #108]	@ 90008868 <JPEG_DMA_StartProcess+0x8c>
  hjpeg->hdmain->XferErrorCallback = JPEG_MDMAErrorCallback;
900087fc:	654f      	str	r7, [r1, #84]	@ 0x54
  hjpeg->hdmain->XferCpltCallback = JPEG_MDMAInCpltCallback;
900087fe:	f8c1 c044 	str.w	ip, [r1, #68]	@ 0x44

  /* Set the JPEG MDMA Out transfer complete callback */
  hjpeg->hdmaout->XferCpltCallback = JPEG_MDMAOutCpltCallback;
90008802:	4917      	ldr	r1, [pc, #92]	@ (90008860 <JPEG_DMA_StartProcess+0x84>)
  /* Set the MDMA In error callback */
  hjpeg->hdmaout->XferErrorCallback = JPEG_MDMAErrorCallback;
90008804:	6547      	str	r7, [r0, #84]	@ 0x54
  hjpeg->hdmaout->XferCpltCallback = JPEG_MDMAOutCpltCallback;
90008806:	6441      	str	r1, [r0, #68]	@ 0x44
  /* Set the MDMA Out Abort callback */
  hjpeg->hdmaout->XferAbortCallback = JPEG_MDMAOutAbortCallback;
90008808:	4916      	ldr	r1, [pc, #88]	@ (90008864 <JPEG_DMA_StartProcess+0x88>)
9000880a:	6581      	str	r1, [r0, #88]	@ 0x58

  if ((inXfrSize == 0UL) || (outXfrSize == 0UL))
9000880c:	b1a5      	cbz	r5, 90008838 <JPEG_DMA_StartProcess+0x5c>
9000880e:	b19e      	cbz	r6, 90008838 <JPEG_DMA_StartProcess+0x5c>
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
    return HAL_ERROR;
  }
  /*MDMA transfer size (BNDTR) must be a multiple of MDMA buffer size (TLEN)*/
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
90008810:	fbb2 f1f5 	udiv	r1, r2, r5
90008814:	fb05 2111 	mls	r1, r5, r1, r2
  /*MDMA transfer size (BNDTR) must be a multiple of MDMA buffer size (TLEN)*/
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);


  /* Start MDMA FIFO Out transfer */
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
90008818:	2501      	movs	r5, #1
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
9000881a:	1a52      	subs	r2, r2, r1
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
9000881c:	6821      	ldr	r1, [r4, #0]
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
9000881e:	62a2      	str	r2, [r4, #40]	@ 0x28
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
90008820:	3144      	adds	r1, #68	@ 0x44
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
90008822:	fbb3 f2f6 	udiv	r2, r3, r6
90008826:	fb06 3212 	mls	r2, r6, r2, r3
9000882a:	1a9b      	subs	r3, r3, r2
9000882c:	62e3      	str	r3, [r4, #44]	@ 0x2c
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
9000882e:	9500      	str	r5, [sp, #0]
90008830:	69e2      	ldr	r2, [r4, #28]
90008832:	f001 fbb3 	bl	90009f9c <HAL_MDMA_Start_IT>
90008836:	b130      	cbz	r0, 90008846 <JPEG_DMA_StartProcess+0x6a>
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
90008838:	6d23      	ldr	r3, [r4, #80]	@ 0x50
9000883a:	f043 0304 	orr.w	r3, r3, #4
9000883e:	6523      	str	r3, [r4, #80]	@ 0x50
    return HAL_ERROR;
90008840:	2001      	movs	r0, #1
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
    return HAL_ERROR;
  }

  return HAL_OK;
}
90008842:	b003      	add	sp, #12
90008844:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
90008846:	6822      	ldr	r2, [r4, #0]
90008848:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
9000884a:	69a1      	ldr	r1, [r4, #24]
9000884c:	3240      	adds	r2, #64	@ 0x40
9000884e:	9500      	str	r5, [sp, #0]
90008850:	6b20      	ldr	r0, [r4, #48]	@ 0x30
90008852:	f001 fba3 	bl	90009f9c <HAL_MDMA_Start_IT>
90008856:	2800      	cmp	r0, #0
90008858:	d0f3      	beq.n	90008842 <JPEG_DMA_StartProcess+0x66>
9000885a:	e7ed      	b.n	90008838 <JPEG_DMA_StartProcess+0x5c>
9000885c:	90008d71 	.word	0x90008d71
90008860:	90008fe5 	.word	0x90008fe5
90008864:	90009065 	.word	0x90009065
90008868:	90008d9d 	.word	0x90008d9d

9000886c <HAL_JPEG_GetInfo.part.0>:
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
9000886c:	6803      	ldr	r3, [r0, #0]
9000886e:	685a      	ldr	r2, [r3, #4]
90008870:	f002 0203 	and.w	r2, r2, #3
90008874:	2a02      	cmp	r2, #2
HAL_StatusTypeDef HAL_JPEG_GetInfo(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
90008876:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
9000887a:	4689      	mov	r9, r1
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
9000887c:	d018      	beq.n	900088b0 <HAL_JPEG_GetInfo.part.0+0x44>
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
9000887e:	685a      	ldr	r2, [r3, #4]
90008880:	f012 0203 	ands.w	r2, r2, #3
90008884:	d10b      	bne.n	9000889e <HAL_JPEG_GetInfo.part.0+0x32>
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
90008886:	6859      	ldr	r1, [r3, #4]
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
90008888:	f8c9 2000 	str.w	r2, [r9]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
9000888c:	68da      	ldr	r2, [r3, #12]
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
9000888e:	0c09      	lsrs	r1, r1, #16
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
90008890:	0c12      	lsrs	r2, r2, #16
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
90008892:	f8c9 1008 	str.w	r1, [r9, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
90008896:	f8c9 200c 	str.w	r2, [r9, #12]
  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
9000889a:	2100      	movs	r1, #0
9000889c:	e02f      	b.n	900088fe <HAL_JPEG_GetInfo.part.0+0x92>
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF)
9000889e:	685a      	ldr	r2, [r3, #4]
900088a0:	f002 0203 	and.w	r2, r2, #3
900088a4:	2a03      	cmp	r2, #3
900088a6:	f000 8097 	beq.w	900089d8 <HAL_JPEG_GetInfo.part.0+0x16c>
    return HAL_ERROR;
900088aa:	2001      	movs	r0, #1
}
900088ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
900088b0:	2110      	movs	r1, #16
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
900088b2:	685a      	ldr	r2, [r3, #4]
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
900088b4:	f8c9 1000 	str.w	r1, [r9]
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
900088b8:	0c12      	lsrs	r2, r2, #16
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
900088ba:	68d9      	ldr	r1, [r3, #12]
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
900088bc:	f8c9 2008 	str.w	r2, [r9, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
900088c0:	0c09      	lsrs	r1, r1, #16
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
900088c2:	691a      	ldr	r2, [r3, #16]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
900088c4:	695c      	ldr	r4, [r3, #20]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
900088c6:	f8c9 100c 	str.w	r1, [r9, #12]
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
900088ca:	0916      	lsrs	r6, r2, #4
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
900088cc:	6999      	ldr	r1, [r3, #24]
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
900088ce:	f014 0ff0 	tst.w	r4, #240	@ 0xf0
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
900088d2:	f3c2 1203 	ubfx	r2, r2, #4, #4
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
900088d6:	ea4f 1714 	mov.w	r7, r4, lsr #4
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
900088da:	ea4f 1111 	mov.w	r1, r1, lsr #4
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
900088de:	d105      	bne.n	900088ec <HAL_JPEG_GetInfo.part.0+0x80>
900088e0:	2a01      	cmp	r2, #1
900088e2:	d103      	bne.n	900088ec <HAL_JPEG_GetInfo.part.0+0x80>
900088e4:	070d      	lsls	r5, r1, #28
900088e6:	d1d8      	bne.n	9000889a <HAL_JPEG_GetInfo.part.0+0x2e>
900088e8:	2102      	movs	r1, #2
900088ea:	e008      	b.n	900088fe <HAL_JPEG_GetInfo.part.0+0x92>
    else if ((yblockNb == 0UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
900088ec:	433e      	orrs	r6, r7
900088ee:	0734      	lsls	r4, r6, #28
900088f0:	d0d3      	beq.n	9000889a <HAL_JPEG_GetInfo.part.0+0x2e>
    else if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
900088f2:	430f      	orrs	r7, r1
900088f4:	0739      	lsls	r1, r7, #28
900088f6:	d1d0      	bne.n	9000889a <HAL_JPEG_GetInfo.part.0+0x2e>
900088f8:	2a03      	cmp	r2, #3
900088fa:	d1ce      	bne.n	9000889a <HAL_JPEG_GetInfo.part.0+0x2e>
900088fc:	2101      	movs	r1, #1
900088fe:	4a42      	ldr	r2, [pc, #264]	@ (90008a08 <HAL_JPEG_GetInfo.part.0+0x19c>)
  */
static uint32_t JPEG_GetQuality(JPEG_HandleTypeDef *hjpeg)
{
  uint32_t quality = 0;
  uint32_t quantRow, quantVal, scale, i, j;
  __IO uint32_t *tableAddress = hjpeg->Instance->QMEM0;
90008900:	f103 0c50 	add.w	ip, r3, #80	@ 0x50
      pInfo->ChromaSubsampling = JPEG_422_SUBSAMPLING; /*16x8 block*/
90008904:	f8c9 1004 	str.w	r1, [r9, #4]
  uint32_t quality = 0;
90008908:	2600      	movs	r6, #0
9000890a:	f102 0440 	add.w	r4, r2, #64	@ 0x40
        quality += 100UL;
      }
      else
      {
        /* Note that the quantization coefficients must be specified in the table in zigzag order */
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
9000890e:	f04f 0e64 	mov.w	lr, #100	@ 0x64
        {
          quality += (200UL - scale) / 2UL;
        }
        else
        {
          quality += 5000UL / scale;
90008912:	f241 3188 	movw	r1, #5000	@ 0x1388
90008916:	e033      	b.n	90008980 <HAL_JPEG_GetInfo.part.0+0x114>
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
90008918:	f892 8001 	ldrb.w	r8, [r2, #1]
9000891c:	fb0e f707 	mul.w	r7, lr, r7
90008920:	6bc5      	ldr	r5, [r0, #60]	@ 0x3c
90008922:	f815 8008 	ldrb.w	r8, [r5, r8]
90008926:	fbb7 f7f8 	udiv	r7, r7, r8
        if (scale <= 100UL)
9000892a:	2f64      	cmp	r7, #100	@ 0x64
9000892c:	d958      	bls.n	900089e0 <HAL_JPEG_GetInfo.part.0+0x174>
          quality += 5000UL / scale;
9000892e:	fbb1 f7f7 	udiv	r7, r1, r7
90008932:	443e      	add	r6, r7
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
90008934:	f3c3 4707 	ubfx	r7, r3, #16, #8
      if (quantVal == 1UL)
90008938:	2f01      	cmp	r7, #1
9000893a:	d03d      	beq.n	900089b8 <HAL_JPEG_GetInfo.part.0+0x14c>
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
9000893c:	f892 8002 	ldrb.w	r8, [r2, #2]
90008940:	fb0e f707 	mul.w	r7, lr, r7
90008944:	6bc5      	ldr	r5, [r0, #60]	@ 0x3c
90008946:	f815 8008 	ldrb.w	r8, [r5, r8]
9000894a:	fbb7 f7f8 	udiv	r7, r7, r8
        if (scale <= 100UL)
9000894e:	2f64      	cmp	r7, #100	@ 0x64
90008950:	d955      	bls.n	900089fe <HAL_JPEG_GetInfo.part.0+0x192>
          quality += 5000UL / scale;
90008952:	fbb1 f7f7 	udiv	r7, r1, r7
90008956:	443e      	add	r6, r7
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
90008958:	0e1b      	lsrs	r3, r3, #24
      if (quantVal == 1UL)
9000895a:	2b01      	cmp	r3, #1
9000895c:	d030      	beq.n	900089c0 <HAL_JPEG_GetInfo.part.0+0x154>
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
9000895e:	78d7      	ldrb	r7, [r2, #3]
90008960:	fb0e f303 	mul.w	r3, lr, r3
90008964:	6bc5      	ldr	r5, [r0, #60]	@ 0x3c
90008966:	5def      	ldrb	r7, [r5, r7]
90008968:	fbb3 f3f7 	udiv	r3, r3, r7
        if (scale <= 100UL)
9000896c:	2b64      	cmp	r3, #100	@ 0x64
9000896e:	d93c      	bls.n	900089ea <HAL_JPEG_GetInfo.part.0+0x17e>
          quality += 5000UL / scale;
90008970:	fbb1 f3f3 	udiv	r3, r1, r3
90008974:	441e      	add	r6, r3
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
90008976:	3204      	adds	r2, #4
        }
      }
    }

    i += 4UL;
    tableAddress ++;
90008978:	f10c 0c04 	add.w	ip, ip, #4
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
9000897c:	4294      	cmp	r4, r2
9000897e:	d025      	beq.n	900089cc <HAL_JPEG_GetInfo.part.0+0x160>
    quantRow = *tableAddress;
90008980:	f8dc 3000 	ldr.w	r3, [ip]
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
90008984:	b2df      	uxtb	r7, r3
      if (quantVal == 1UL)
90008986:	2f01      	cmp	r7, #1
90008988:	d028      	beq.n	900089dc <HAL_JPEG_GetInfo.part.0+0x170>
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
9000898a:	f892 8000 	ldrb.w	r8, [r2]
9000898e:	fb0e f707 	mul.w	r7, lr, r7
90008992:	6bc5      	ldr	r5, [r0, #60]	@ 0x3c
90008994:	f815 8008 	ldrb.w	r8, [r5, r8]
90008998:	fbb7 f7f8 	udiv	r7, r7, r8
        if (scale <= 100UL)
9000899c:	2f64      	cmp	r7, #100	@ 0x64
9000899e:	d929      	bls.n	900089f4 <HAL_JPEG_GetInfo.part.0+0x188>
          quality += 5000UL / scale;
900089a0:	fbb1 f7f7 	udiv	r7, r1, r7
900089a4:	443e      	add	r6, r7
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
900089a6:	f3c3 2707 	ubfx	r7, r3, #8, #8
      if (quantVal == 1UL)
900089aa:	2f01      	cmp	r7, #1
900089ac:	d1b4      	bne.n	90008918 <HAL_JPEG_GetInfo.part.0+0xac>
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
900089ae:	f3c3 4707 	ubfx	r7, r3, #16, #8
        quality += 100UL;
900089b2:	3664      	adds	r6, #100	@ 0x64
      if (quantVal == 1UL)
900089b4:	2f01      	cmp	r7, #1
900089b6:	d1c1      	bne.n	9000893c <HAL_JPEG_GetInfo.part.0+0xd0>
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
900089b8:	0e1b      	lsrs	r3, r3, #24
        quality += 100UL;
900089ba:	3664      	adds	r6, #100	@ 0x64
      if (quantVal == 1UL)
900089bc:	2b01      	cmp	r3, #1
900089be:	d1ce      	bne.n	9000895e <HAL_JPEG_GetInfo.part.0+0xf2>
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
900089c0:	3204      	adds	r2, #4
        quality += 100UL;
900089c2:	3664      	adds	r6, #100	@ 0x64
    tableAddress ++;
900089c4:	f10c 0c04 	add.w	ip, ip, #4
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
900089c8:	4294      	cmp	r4, r2
900089ca:	d1d9      	bne.n	90008980 <HAL_JPEG_GetInfo.part.0+0x114>
  }

  return (quality / 64UL);
900089cc:	09b6      	lsrs	r6, r6, #6
  return HAL_OK;
900089ce:	2000      	movs	r0, #0
  pInfo->ImageQuality = JPEG_GetQuality(hjpeg);
900089d0:	f8c9 6010 	str.w	r6, [r9, #16]
}
900089d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
900089d8:	2130      	movs	r1, #48	@ 0x30
900089da:	e76a      	b.n	900088b2 <HAL_JPEG_GetInfo.part.0+0x46>
        quality += 100UL;
900089dc:	3664      	adds	r6, #100	@ 0x64
900089de:	e7e2      	b.n	900089a6 <HAL_JPEG_GetInfo.part.0+0x13a>
          quality += (200UL - scale) / 2UL;
900089e0:	f1c7 07c8 	rsb	r7, r7, #200	@ 0xc8
900089e4:	eb06 0657 	add.w	r6, r6, r7, lsr #1
900089e8:	e7a4      	b.n	90008934 <HAL_JPEG_GetInfo.part.0+0xc8>
900089ea:	f1c3 03c8 	rsb	r3, r3, #200	@ 0xc8
900089ee:	eb06 0653 	add.w	r6, r6, r3, lsr #1
900089f2:	e7c0      	b.n	90008976 <HAL_JPEG_GetInfo.part.0+0x10a>
900089f4:	f1c7 07c8 	rsb	r7, r7, #200	@ 0xc8
900089f8:	eb06 0657 	add.w	r6, r6, r7, lsr #1
900089fc:	e7d3      	b.n	900089a6 <HAL_JPEG_GetInfo.part.0+0x13a>
900089fe:	f1c7 07c8 	rsb	r7, r7, #200	@ 0xc8
90008a02:	eb06 0657 	add.w	r6, r6, r7, lsr #1
90008a06:	e7a7      	b.n	90008958 <HAL_JPEG_GetInfo.part.0+0xec>
90008a08:	90026324 	.word	0x90026324

90008a0c <HAL_JPEG_Init>:
  if (hjpeg == NULL)
90008a0c:	2800      	cmp	r0, #0
90008a0e:	f000 8107 	beq.w	90008c20 <HAL_JPEG_Init+0x214>
{
90008a12:	b570      	push	{r4, r5, r6, lr}
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
90008a14:	f890 304d 	ldrb.w	r3, [r0, #77]	@ 0x4d
90008a18:	4605      	mov	r5, r0
90008a1a:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
90008a1e:	2b00      	cmp	r3, #0
90008a20:	f000 80f9 	beq.w	90008c16 <HAL_JPEG_Init+0x20a>
  __HAL_JPEG_ENABLE(hjpeg);
90008a24:	682c      	ldr	r4, [r5, #0]
  hjpeg->State = HAL_JPEG_STATE_BUSY;
90008a26:	2202      	movs	r2, #2
  hjpeg->QuantTable2 = NULL;
90008a28:	2300      	movs	r3, #0
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
90008a2a:	497e      	ldr	r1, [pc, #504]	@ (90008c24 <HAL_JPEG_Init+0x218>)
  hjpeg->State = HAL_JPEG_STATE_BUSY;
90008a2c:	f885 204d 	strb.w	r2, [r5, #77]	@ 0x4d
  __HAL_JPEG_ENABLE(hjpeg);
90008a30:	6b22      	ldr	r2, [r4, #48]	@ 0x30
90008a32:	f042 0201 	orr.w	r2, r2, #1
90008a36:	6322      	str	r2, [r4, #48]	@ 0x30
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
90008a38:	6822      	ldr	r2, [r4, #0]
90008a3a:	f022 0201 	bic.w	r2, r2, #1
90008a3e:	6022      	str	r2, [r4, #0]
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
90008a40:	6b22      	ldr	r2, [r4, #48]	@ 0x30
90008a42:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
90008a46:	6322      	str	r2, [r4, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_IFF;
90008a48:	6b22      	ldr	r2, [r4, #48]	@ 0x30
90008a4a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
90008a4e:	6322      	str	r2, [r4, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
90008a50:	6b22      	ldr	r2, [r4, #48]	@ 0x30
90008a52:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
90008a56:	6322      	str	r2, [r4, #48]	@ 0x30
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
90008a58:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
90008a5a:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
90008a5e:	63a2      	str	r2, [r4, #56]	@ 0x38
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
90008a60:	4a71      	ldr	r2, [pc, #452]	@ (90008c28 <HAL_JPEG_Init+0x21c>)
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
90008a62:	63e9      	str	r1, [r5, #60]	@ 0x3c
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
90008a64:	2101      	movs	r1, #1
  hjpeg->QuantTable2 = NULL;
90008a66:	64ab      	str	r3, [r5, #72]	@ 0x48
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
90008a68:	e9c5 2310 	strd	r2, r3, [r5, #64]	@ 0x40
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
90008a6c:	f8c4 336c 	str.w	r3, [r4, #876]	@ 0x36c
90008a70:	f04f 3201 	mov.w	r2, #16843009	@ 0x1010101
90008a74:	4b6d      	ldr	r3, [pc, #436]	@ (90008c2c <HAL_JPEG_Init+0x220>)
90008a76:	f8c4 1368 	str.w	r1, [r4, #872]	@ 0x368
90008a7a:	f8c4 2364 	str.w	r2, [r4, #868]	@ 0x364
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
90008a7e:	496c      	ldr	r1, [pc, #432]	@ (90008c30 <HAL_JPEG_Init+0x224>)
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
90008a80:	f8c4 3360 	str.w	r3, [r4, #864]	@ 0x360
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
90008a84:	4b6b      	ldr	r3, [pc, #428]	@ (90008c34 <HAL_JPEG_Init+0x228>)
90008a86:	f8c4 1378 	str.w	r1, [r4, #888]	@ 0x378
90008a8a:	4a6b      	ldr	r2, [pc, #428]	@ (90008c38 <HAL_JPEG_Init+0x22c>)
90008a8c:	f8c4 3374 	str.w	r3, [r4, #884]	@ 0x374
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
90008a90:	4b6a      	ldr	r3, [pc, #424]	@ (90008c3c <HAL_JPEG_Init+0x230>)
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
90008a92:	f8c4 2370 	str.w	r2, [r4, #880]	@ 0x370
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
90008a96:	496a      	ldr	r1, [pc, #424]	@ (90008c40 <HAL_JPEG_Init+0x234>)
90008a98:	f8c4 3388 	str.w	r3, [r4, #904]	@ 0x388
90008a9c:	4a69      	ldr	r2, [pc, #420]	@ (90008c44 <HAL_JPEG_Init+0x238>)
90008a9e:	4b6a      	ldr	r3, [pc, #424]	@ (90008c48 <HAL_JPEG_Init+0x23c>)
90008aa0:	f8c4 1384 	str.w	r1, [r4, #900]	@ 0x384
90008aa4:	f8c4 2380 	str.w	r2, [r4, #896]	@ 0x380
90008aa8:	f8c4 337c 	str.w	r3, [r4, #892]	@ 0x37c
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
90008aac:	f64f 23f9 	movw	r3, #64249	@ 0xfaf9
  value = *address & 0xFFFF0000U;
90008ab0:	f8d4 142c 	ldr.w	r1, [r4, #1068]	@ 0x42c
90008ab4:	4a65      	ldr	r2, [pc, #404]	@ (90008c4c <HAL_JPEG_Init+0x240>)
90008ab6:	400a      	ands	r2, r1
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
90008ab8:	f504 6185 	add.w	r1, r4, #1064	@ 0x428
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
90008abc:	4313      	orrs	r3, r2
  *address = value;
90008abe:	4a64      	ldr	r2, [pc, #400]	@ (90008c50 <HAL_JPEG_Init+0x244>)
90008ac0:	f1a2 06a0 	sub.w	r6, r2, #160	@ 0xa0
90008ac4:	f8c4 342c 	str.w	r3, [r4, #1068]	@ 0x42c
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
90008ac8:	f892 30ae 	ldrb.w	r3, [r2, #174]	@ 0xae
  while (index > 3UL)
90008acc:	3a04      	subs	r2, #4
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
90008ace:	f892 e0b3 	ldrb.w	lr, [r2, #179]	@ 0xb3
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
90008ad2:	041b      	lsls	r3, r3, #16
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
90008ad4:	f892 c0b0 	ldrb.w	ip, [r2, #176]	@ 0xb0
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
90008ad8:	f892 00b1 	ldrb.w	r0, [r2, #177]	@ 0xb1
  while (index > 3UL)
90008adc:	4296      	cmp	r6, r2
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
90008ade:	ea43 630e 	orr.w	r3, r3, lr, lsl #24
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
90008ae2:	ea43 030c 	orr.w	r3, r3, ip
90008ae6:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
90008aea:	f841 3904 	str.w	r3, [r1], #-4
  while (index > 3UL)
90008aee:	d1eb      	bne.n	90008ac8 <HAL_JPEG_Init+0xbc>
  value = *address & 0x0000FFFFU;
90008af0:	f8d4 342c 	ldr.w	r3, [r4, #1068]	@ 0x42c
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
90008af4:	f04f 3201 	mov.w	r2, #16843009	@ 0x1010101
  value = *address & 0xFFFF0000U;
90008af8:	4954      	ldr	r1, [pc, #336]	@ (90008c4c <HAL_JPEG_Init+0x240>)
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
90008afa:	2001      	movs	r0, #1
  value = *address & 0x0000FFFFU;
90008afc:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
90008afe:	f043 7340 	orr.w	r3, r3, #50331648	@ 0x3000000
  *address = value;
90008b02:	f8c4 342c 	str.w	r3, [r4, #1068]	@ 0x42c
  value = *address & 0xFFFF0000U;
90008b06:	f8d4 343c 	ldr.w	r3, [r4, #1084]	@ 0x43c
90008b0a:	400b      	ands	r3, r1
  *address = value;
90008b0c:	f8c4 343c 	str.w	r3, [r4, #1084]	@ 0x43c
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
90008b10:	f8c4 0438 	str.w	r0, [r4, #1080]	@ 0x438
90008b14:	f8c4 2434 	str.w	r2, [r4, #1076]	@ 0x434
90008b18:	f8c4 2430 	str.w	r2, [r4, #1072]	@ 0x430
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
90008b1c:	f640 320a 	movw	r2, #2826	@ 0xb0a
  value = *address & 0x0000FFFFUL;
90008b20:	f8d4 343c 	ldr.w	r3, [r4, #1084]	@ 0x43c
90008b24:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
90008b26:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
  *address = value;
90008b2a:	f8c4 343c 	str.w	r3, [r4, #1084]	@ 0x43c
  value = *address & 0xFFFF0000UL;
90008b2e:	f8d4 3448 	ldr.w	r3, [r4, #1096]	@ 0x448
90008b32:	400b      	ands	r3, r1
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
90008b34:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
90008b36:	4b47      	ldr	r3, [pc, #284]	@ (90008c54 <HAL_JPEG_Init+0x248>)
  *address = value;
90008b38:	f8c4 2448 	str.w	r2, [r4, #1096]	@ 0x448
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
90008b3c:	f247 7202 	movw	r2, #30466	@ 0x7702
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
90008b40:	f8c4 3444 	str.w	r3, [r4, #1092]	@ 0x444
90008b44:	f1a3 3304 	sub.w	r3, r3, #67372036	@ 0x4040404
90008b48:	f8c4 3440 	str.w	r3, [r4, #1088]	@ 0x440
  value = *address & 0x0000FFFFU;
90008b4c:	f8d4 3448 	ldr.w	r3, [r4, #1096]	@ 0x448
90008b50:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
90008b52:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
  *address = value;
90008b56:	f8c4 3448 	str.w	r3, [r4, #1096]	@ 0x448
  value = *address & 0xFFFF0000U;
90008b5a:	f8d4 3458 	ldr.w	r3, [r4, #1112]	@ 0x458
90008b5e:	400b      	ands	r3, r1
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
90008b60:	493d      	ldr	r1, [pc, #244]	@ (90008c58 <HAL_JPEG_Init+0x24c>)
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
90008b62:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
90008b64:	4b3d      	ldr	r3, [pc, #244]	@ (90008c5c <HAL_JPEG_Init+0x250>)
  *address = value;
90008b66:	f8c4 2458 	str.w	r2, [r4, #1112]	@ 0x458
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
90008b6a:	4a3d      	ldr	r2, [pc, #244]	@ (90008c60 <HAL_JPEG_Init+0x254>)
90008b6c:	f8c4 1454 	str.w	r1, [r4, #1108]	@ 0x454
  address = (hjpeg->Instance->DHTMEM + 102);
90008b70:	f504 619f 	add.w	r1, r4, #1272	@ 0x4f8
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
90008b74:	f8c4 2450 	str.w	r2, [r4, #1104]	@ 0x450
90008b78:	f8c4 344c 	str.w	r3, [r4, #1100]	@ 0x44c
  value = *address & 0x0000FFFFUL;
90008b7c:	f8d4 3458 	ldr.w	r3, [r4, #1112]	@ 0x458
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
90008b80:	4a38      	ldr	r2, [pc, #224]	@ (90008c64 <HAL_JPEG_Init+0x258>)
  value = *address & 0x0000FFFFUL;
90008b82:	b29b      	uxth	r3, r3
90008b84:	f1a2 06a0 	sub.w	r6, r2, #160	@ 0xa0
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
90008b88:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
  *address = value;
90008b8c:	f8c4 3458 	str.w	r3, [r4, #1112]	@ 0x458
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
90008b90:	f892 30b0 	ldrb.w	r3, [r2, #176]	@ 0xb0
  while (index > 3UL)
90008b94:	3a04      	subs	r2, #4
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
90008b96:	f892 e0b5 	ldrb.w	lr, [r2, #181]	@ 0xb5
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
90008b9a:	041b      	lsls	r3, r3, #16
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
90008b9c:	f892 c0b2 	ldrb.w	ip, [r2, #178]	@ 0xb2
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
90008ba0:	f892 00b3 	ldrb.w	r0, [r2, #179]	@ 0xb3
  while (index > 3UL)
90008ba4:	4296      	cmp	r6, r2
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
90008ba6:	ea43 630e 	orr.w	r3, r3, lr, lsl #24
90008baa:	ea43 030c 	orr.w	r3, r3, ip
90008bae:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
90008bb2:	f841 3904 	str.w	r3, [r1], #-4
  while (index > 3UL)
90008bb6:	d1eb      	bne.n	90008b90 <HAL_JPEG_Init+0x184>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
90008bb8:	f504 62a0 	add.w	r2, r4, #1280	@ 0x500
90008bbc:	4924      	ldr	r1, [pc, #144]	@ (90008c50 <HAL_JPEG_Init+0x244>)
90008bbe:	4628      	mov	r0, r5
90008bc0:	f7ff fd44 	bl	9000864c <JPEG_Set_HuffAC_Mem>
  if (error != HAL_OK)
90008bc4:	b118      	cbz	r0, 90008bce <HAL_JPEG_Init+0x1c2>
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
90008bc6:	2301      	movs	r3, #1
    return HAL_ERROR;
90008bc8:	2001      	movs	r0, #1
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
90008bca:	652b      	str	r3, [r5, #80]	@ 0x50
}
90008bcc:	bd70      	pop	{r4, r5, r6, pc}
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
90008bce:	f504 62cc 	add.w	r2, r4, #1632	@ 0x660
90008bd2:	4924      	ldr	r1, [pc, #144]	@ (90008c64 <HAL_JPEG_Init+0x258>)
90008bd4:	4628      	mov	r0, r5
90008bd6:	f7ff fd39 	bl	9000864c <JPEG_Set_HuffAC_Mem>
  if (error != HAL_OK)
90008bda:	2800      	cmp	r0, #0
90008bdc:	d1f3      	bne.n	90008bc6 <HAL_JPEG_Init+0x1ba>
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
90008bde:	f504 62f8 	add.w	r2, r4, #1984	@ 0x7c0
90008be2:	4921      	ldr	r1, [pc, #132]	@ (90008c68 <HAL_JPEG_Init+0x25c>)
90008be4:	4628      	mov	r0, r5
90008be6:	f7ff fc87 	bl	900084f8 <JPEG_Set_HuffDC_Mem>
  if (error != HAL_OK)
90008bea:	2800      	cmp	r0, #0
90008bec:	d1eb      	bne.n	90008bc6 <HAL_JPEG_Init+0x1ba>
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
90008bee:	f504 62fc 	add.w	r2, r4, #2016	@ 0x7e0
90008bf2:	491e      	ldr	r1, [pc, #120]	@ (90008c6c <HAL_JPEG_Init+0x260>)
90008bf4:	4628      	mov	r0, r5
90008bf6:	f7ff fc7f 	bl	900084f8 <JPEG_Set_HuffDC_Mem>
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
90008bfa:	2800      	cmp	r0, #0
90008bfc:	d1e3      	bne.n	90008bc6 <HAL_JPEG_Init+0x1ba>
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
90008bfe:	6863      	ldr	r3, [r4, #4]
  hjpeg->State = HAL_JPEG_STATE_READY;
90008c00:	2201      	movs	r2, #1
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
90008c02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
90008c06:	6063      	str	r3, [r4, #4]
  hjpeg->JpegInCount = 0;
90008c08:	6228      	str	r0, [r5, #32]
  hjpeg->JpegOutCount = 0;
90008c0a:	6268      	str	r0, [r5, #36]	@ 0x24
  hjpeg->State = HAL_JPEG_STATE_READY;
90008c0c:	f885 204d 	strb.w	r2, [r5, #77]	@ 0x4d
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
90008c10:	6528      	str	r0, [r5, #80]	@ 0x50
  hjpeg->Context = 0;
90008c12:	6568      	str	r0, [r5, #84]	@ 0x54
}
90008c14:	bd70      	pop	{r4, r5, r6, pc}
    hjpeg->Lock = HAL_UNLOCKED;
90008c16:	f880 204c 	strb.w	r2, [r0, #76]	@ 0x4c
    HAL_JPEG_MspInit(hjpeg);
90008c1a:	f7f8 f811 	bl	90000c40 <HAL_JPEG_MspInit>
90008c1e:	e701      	b.n	90008a24 <HAL_JPEG_Init+0x18>
    return HAL_ERROR;
90008c20:	2001      	movs	r0, #1
}
90008c22:	4770      	bx	lr
90008c24:	900262e4 	.word	0x900262e4
90008c28:	900262a4 	.word	0x900262a4
90008c2c:	01050100 	.word	0x01050100
90008c30:	0b0a0908 	.word	0x0b0a0908
90008c34:	07060504 	.word	0x07060504
90008c38:	03020100 	.word	0x03020100
90008c3c:	7d010000 	.word	0x7d010000
90008c40:	04040505 	.word	0x04040505
90008c44:	03040203 	.word	0x03040203
90008c48:	03010200 	.word	0x03010200
90008c4c:	ffff0000 	.word	0xffff0000
90008c50:	90026418 	.word	0x90026418
90008c54:	09080706 	.word	0x09080706
90008c58:	01000404 	.word	0x01000404
90008c5c:	04040201 	.word	0x04040201
90008c60:	05070403 	.word	0x05070403
90008c64:	90026364 	.word	0x90026364
90008c68:	900264e8 	.word	0x900264e8
90008c6c:	900264cc 	.word	0x900264cc

90008c70 <HAL_JPEG_Decode_DMA>:
  if ((hjpeg == NULL) || (pDataIn == NULL) || (pDataOutMCU == NULL))
90008c70:	2b00      	cmp	r3, #0
90008c72:	bf18      	it	ne
90008c74:	2900      	cmpne	r1, #0
90008c76:	d036      	beq.n	90008ce6 <HAL_JPEG_Decode_DMA+0x76>
{
90008c78:	b538      	push	{r3, r4, r5, lr}
  if ((hjpeg == NULL) || (pDataIn == NULL) || (pDataOutMCU == NULL))
90008c7a:	fab0 f580 	clz	r5, r0
90008c7e:	4604      	mov	r4, r0
90008c80:	096d      	lsrs	r5, r5, #5
90008c82:	b370      	cbz	r0, 90008ce2 <HAL_JPEG_Decode_DMA+0x72>
  __HAL_LOCK(hjpeg);
90008c84:	f890 c04c 	ldrb.w	ip, [r0, #76]	@ 0x4c
90008c88:	f1bc 0f01 	cmp.w	ip, #1
90008c8c:	d022      	beq.n	90008cd4 <HAL_JPEG_Decode_DMA+0x64>
90008c8e:	f04f 0c01 	mov.w	ip, #1
90008c92:	f880 c04c 	strb.w	ip, [r0, #76]	@ 0x4c
  if (hjpeg->State == HAL_JPEG_STATE_READY)
90008c96:	f890 c04d 	ldrb.w	ip, [r0, #77]	@ 0x4d
90008c9a:	f1bc 0f01 	cmp.w	ip, #1
90008c9e:	d117      	bne.n	90008cd0 <HAL_JPEG_Decode_DMA+0x60>
    hjpeg->InDataLength = InDataLength;
90008ca0:	6282      	str	r2, [r0, #40]	@ 0x28
    hjpeg->pJpegOutBuffPtr = pDataOutMCU;
90008ca2:	e9c0 1306 	strd	r1, r3, [r0, #24]
    hjpeg->OutDataLength = OutDataLength;
90008ca6:	9b04      	ldr	r3, [sp, #16]
90008ca8:	62c3      	str	r3, [r0, #44]	@ 0x2c
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
90008caa:	2304      	movs	r3, #4
90008cac:	f880 304d 	strb.w	r3, [r0, #77]	@ 0x4d
    hjpeg->Context &= ~(JPEG_CONTEXT_OPERATION_MASK | JPEG_CONTEXT_METHOD_MASK);
90008cb0:	6d43      	ldr	r3, [r0, #84]	@ 0x54
90008cb2:	f023 030f 	bic.w	r3, r3, #15
90008cb6:	6543      	str	r3, [r0, #84]	@ 0x54
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_DMA);
90008cb8:	6d43      	ldr	r3, [r0, #84]	@ 0x54
90008cba:	f043 030e 	orr.w	r3, r3, #14
90008cbe:	6543      	str	r3, [r0, #84]	@ 0x54
    hjpeg->JpegInCount = 0;
90008cc0:	6205      	str	r5, [r0, #32]
    hjpeg->JpegOutCount = 0;
90008cc2:	6245      	str	r5, [r0, #36]	@ 0x24
    JPEG_Init_Process(hjpeg);
90008cc4:	f7ff fd4c 	bl	90008760 <JPEG_Init_Process>
    if (JPEG_DMA_StartProcess(hjpeg) != HAL_OK)
90008cc8:	f7ff fd88 	bl	900087dc <JPEG_DMA_StartProcess>
90008ccc:	b920      	cbnz	r0, 90008cd8 <HAL_JPEG_Decode_DMA+0x68>
}
90008cce:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_UNLOCK(hjpeg);
90008cd0:	f880 504c 	strb.w	r5, [r0, #76]	@ 0x4c
  __HAL_LOCK(hjpeg);
90008cd4:	2002      	movs	r0, #2
}
90008cd6:	bd38      	pop	{r3, r4, r5, pc}
      hjpeg->State = HAL_JPEG_STATE_ERROR;
90008cd8:	2306      	movs	r3, #6
      __HAL_UNLOCK(hjpeg);
90008cda:	f884 504c 	strb.w	r5, [r4, #76]	@ 0x4c
      hjpeg->State = HAL_JPEG_STATE_ERROR;
90008cde:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
    return HAL_ERROR;
90008ce2:	2001      	movs	r0, #1
}
90008ce4:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
90008ce6:	2001      	movs	r0, #1
}
90008ce8:	4770      	bx	lr
90008cea:	bf00      	nop

90008cec <HAL_JPEG_Pause>:
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
90008cec:	6d43      	ldr	r3, [r0, #84]	@ 0x54
90008cee:	f003 030c 	and.w	r3, r3, #12
90008cf2:	2b0c      	cmp	r3, #12
90008cf4:	d01a      	beq.n	90008d2c <HAL_JPEG_Pause+0x40>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
90008cf6:	6d43      	ldr	r3, [r0, #84]	@ 0x54
90008cf8:	f003 030c 	and.w	r3, r3, #12
90008cfc:	2b08      	cmp	r3, #8
90008cfe:	d001      	beq.n	90008d04 <HAL_JPEG_Pause+0x18>
}
90008d00:	2000      	movs	r0, #0
90008d02:	4770      	bx	lr
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
90008d04:	07ca      	lsls	r2, r1, #31
90008d06:	d41f      	bmi.n	90008d48 <HAL_JPEG_Pause+0x5c>
90008d08:	f04f 3cff 	mov.w	ip, #4294967295
90008d0c:	f06f 0228 	mvn.w	r2, #40	@ 0x28
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
90008d10:	078b      	lsls	r3, r1, #30
90008d12:	d504      	bpl.n	90008d1e <HAL_JPEG_Pause+0x32>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
90008d14:	6d43      	ldr	r3, [r0, #84]	@ 0x54
90008d16:	4694      	mov	ip, r2
90008d18:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
90008d1c:	6543      	str	r3, [r0, #84]	@ 0x54
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
90008d1e:	6802      	ldr	r2, [r0, #0]
}
90008d20:	2000      	movs	r0, #0
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
90008d22:	6b13      	ldr	r3, [r2, #48]	@ 0x30
90008d24:	ea03 030c 	and.w	r3, r3, ip
90008d28:	6313      	str	r3, [r2, #48]	@ 0x30
}
90008d2a:	4770      	bx	lr
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
90008d2c:	07cb      	lsls	r3, r1, #31
90008d2e:	d503      	bpl.n	90008d38 <HAL_JPEG_Pause+0x4c>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
90008d30:	6d43      	ldr	r3, [r0, #84]	@ 0x54
90008d32:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
90008d36:	6543      	str	r3, [r0, #84]	@ 0x54
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
90008d38:	0789      	lsls	r1, r1, #30
90008d3a:	d5e1      	bpl.n	90008d00 <HAL_JPEG_Pause+0x14>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
90008d3c:	6d43      	ldr	r3, [r0, #84]	@ 0x54
90008d3e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
90008d42:	6543      	str	r3, [r0, #84]	@ 0x54
}
90008d44:	2000      	movs	r0, #0
90008d46:	4770      	bx	lr
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
90008d48:	6d43      	ldr	r3, [r0, #84]	@ 0x54
90008d4a:	f06f 0c06 	mvn.w	ip, #6
90008d4e:	f06f 022e 	mvn.w	r2, #46	@ 0x2e
90008d52:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
90008d56:	6543      	str	r3, [r0, #84]	@ 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
90008d58:	e7da      	b.n	90008d10 <HAL_JPEG_Pause+0x24>
90008d5a:	bf00      	nop

90008d5c <HAL_JPEG_ConfigInputBuffer>:
  hjpeg->pJpegInBuffPtr =  pNewInputBuffer;
90008d5c:	6181      	str	r1, [r0, #24]
  hjpeg->InDataLength = InDataLength;
90008d5e:	6282      	str	r2, [r0, #40]	@ 0x28
}
90008d60:	4770      	bx	lr
90008d62:	bf00      	nop

90008d64 <HAL_JPEG_ConfigOutputBuffer>:
  hjpeg->pJpegOutBuffPtr = pNewOutputBuffer;
90008d64:	61c1      	str	r1, [r0, #28]
  hjpeg->OutDataLength = OutDataLength;
90008d66:	62c2      	str	r2, [r0, #44]	@ 0x2c
}
90008d68:	4770      	bx	lr
90008d6a:	bf00      	nop

90008d6c <HAL_JPEG_EncodeCpltCallback>:
__weak void HAL_JPEG_EncodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
90008d6c:	4770      	bx	lr
90008d6e:	bf00      	nop

90008d70 <JPEG_MDMAErrorCallback>:
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
90008d70:	6c00      	ldr	r0, [r0, #64]	@ 0x40
  hjpeg->State = HAL_JPEG_STATE_READY;
90008d72:	2101      	movs	r1, #1
{
90008d74:	b508      	push	{r3, lr}
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
90008d76:	6803      	ldr	r3, [r0, #0]
90008d78:	681a      	ldr	r2, [r3, #0]
90008d7a:	f022 0201 	bic.w	r2, r2, #1
90008d7e:	601a      	str	r2, [r3, #0]
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
90008d80:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
90008d82:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
90008d86:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->State = HAL_JPEG_STATE_READY;
90008d88:	f880 104d 	strb.w	r1, [r0, #77]	@ 0x4d
  hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
90008d8c:	6d03      	ldr	r3, [r0, #80]	@ 0x50
90008d8e:	f043 0304 	orr.w	r3, r3, #4
90008d92:	6503      	str	r3, [r0, #80]	@ 0x50
  HAL_JPEG_ErrorCallback(hjpeg);
90008d94:	f7f9 fc58 	bl	90002648 <HAL_JPEG_ErrorCallback>
}
90008d98:	bd08      	pop	{r3, pc}
90008d9a:	bf00      	nop

90008d9c <JPEG_MDMAInCpltCallback>:
{
90008d9c:	b530      	push	{r4, r5, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
90008d9e:	6c04      	ldr	r4, [r0, #64]	@ 0x40
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) == JPEG_CONTEXT_DMA)
90008da0:	f248 010c 	movw	r1, #32780	@ 0x800c
{
90008da4:	b083      	sub	sp, #12
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
90008da6:	6822      	ldr	r2, [r4, #0]
90008da8:	6b13      	ldr	r3, [r2, #48]	@ 0x30
90008daa:	f023 037e 	bic.w	r3, r3, #126	@ 0x7e
90008dae:	6313      	str	r3, [r2, #48]	@ 0x30
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) == JPEG_CONTEXT_DMA)
90008db0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
90008db2:	400b      	ands	r3, r1
90008db4:	2b0c      	cmp	r3, #12
90008db6:	d001      	beq.n	90008dbc <JPEG_MDMAInCpltCallback+0x20>
}
90008db8:	b003      	add	sp, #12
90008dba:	bd30      	pop	{r4, r5, pc}
    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
90008dbc:	6802      	ldr	r2, [r0, #0]
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
90008dbe:	4620      	mov	r0, r4
    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
90008dc0:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
90008dc2:	6952      	ldr	r2, [r2, #20]
    inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
90008dc4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
90008dc6:	f3c2 0210 	ubfx	r2, r2, #0, #17
    inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
90008dca:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
90008dcc:	1a9b      	subs	r3, r3, r2
90008dce:	6223      	str	r3, [r4, #32]
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
90008dd0:	6a21      	ldr	r1, [r4, #32]
90008dd2:	f7f9 fbd7 	bl	90002584 <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength >= inXfrSize)
90008dd6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
90008dd8:	42ab      	cmp	r3, r5
90008dda:	d311      	bcc.n	90008e00 <JPEG_MDMAInCpltCallback+0x64>
      if (inXfrSize == 0UL)
90008ddc:	b305      	cbz	r5, 90008e20 <JPEG_MDMAInCpltCallback+0x84>
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
90008dde:	fbb3 f2f5 	udiv	r2, r3, r5
90008de2:	fb05 3212 	mls	r2, r5, r2, r3
90008de6:	1a9b      	subs	r3, r3, r2
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
90008de8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
90008dea:	62a3      	str	r3, [r4, #40]	@ 0x28
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
90008dec:	04d1      	lsls	r1, r2, #19
90008dee:	d400      	bmi.n	90008df2 <JPEG_MDMAInCpltCallback+0x56>
90008df0:	b963      	cbnz	r3, 90008e0c <JPEG_MDMAInCpltCallback+0x70>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
90008df2:	6822      	ldr	r2, [r4, #0]
90008df4:	6b13      	ldr	r3, [r2, #48]	@ 0x30
90008df6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
90008dfa:	6313      	str	r3, [r2, #48]	@ 0x30
}
90008dfc:	b003      	add	sp, #12
90008dfe:	bd30      	pop	{r4, r5, pc}
    else if (hjpeg->InDataLength > 0UL)
90008e00:	b1cb      	cbz	r3, 90008e36 <JPEG_MDMAInCpltCallback+0x9a>
      if ((hjpeg->InDataLength % 4UL) != 0UL)
90008e02:	0798      	lsls	r0, r3, #30
90008e04:	d119      	bne.n	90008e3a <JPEG_MDMAInCpltCallback+0x9e>
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
90008e06:	6d62      	ldr	r2, [r4, #84]	@ 0x54
90008e08:	04d2      	lsls	r2, r2, #19
90008e0a:	d4f2      	bmi.n	90008df2 <JPEG_MDMAInCpltCallback+0x56>
      if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
90008e0c:	6822      	ldr	r2, [r4, #0]
90008e0e:	2501      	movs	r5, #1
90008e10:	69a1      	ldr	r1, [r4, #24]
90008e12:	6b20      	ldr	r0, [r4, #48]	@ 0x30
90008e14:	3240      	adds	r2, #64	@ 0x40
90008e16:	9500      	str	r5, [sp, #0]
90008e18:	f001 f8c0 	bl	90009f9c <HAL_MDMA_Start_IT>
90008e1c:	2800      	cmp	r0, #0
90008e1e:	d0e8      	beq.n	90008df2 <JPEG_MDMAInCpltCallback+0x56>
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
90008e20:	6d23      	ldr	r3, [r4, #80]	@ 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
90008e22:	2206      	movs	r2, #6
        HAL_JPEG_ErrorCallback(hjpeg);
90008e24:	4620      	mov	r0, r4
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
90008e26:	f043 0304 	orr.w	r3, r3, #4
90008e2a:	6523      	str	r3, [r4, #80]	@ 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
90008e2c:	f884 204d 	strb.w	r2, [r4, #77]	@ 0x4d
        HAL_JPEG_ErrorCallback(hjpeg);
90008e30:	f7f9 fc0a 	bl	90002648 <HAL_JPEG_ErrorCallback>
        return;
90008e34:	e7c0      	b.n	90008db8 <JPEG_MDMAInCpltCallback+0x1c>
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
90008e36:	6d63      	ldr	r3, [r4, #84]	@ 0x54
90008e38:	e7db      	b.n	90008df2 <JPEG_MDMAInCpltCallback+0x56>
        hjpeg->InDataLength = ((hjpeg->InDataLength / 4UL) + 1UL) * 4UL;
90008e3a:	f023 0303 	bic.w	r3, r3, #3
90008e3e:	3304      	adds	r3, #4
90008e40:	e7d2      	b.n	90008de8 <JPEG_MDMAInCpltCallback+0x4c>
90008e42:	bf00      	nop

90008e44 <JPEG_DMA_PollResidualData>:
{
90008e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
90008e46:	6802      	ldr	r2, [r0, #0]
90008e48:	2610      	movs	r6, #16
{
90008e4a:	4604      	mov	r4, r0
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
90008e4c:	6d65      	ldr	r5, [r4, #84]	@ 0x54
90008e4e:	f415 5500 	ands.w	r5, r5, #8192	@ 0x2000
90008e52:	d11d      	bne.n	90008e90 <JPEG_DMA_PollResidualData+0x4c>
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
90008e54:	6b53      	ldr	r3, [r2, #52]	@ 0x34
90008e56:	06df      	lsls	r7, r3, #27
90008e58:	d51a      	bpl.n	90008e90 <JPEG_DMA_PollResidualData+0x4c>
        dataOut = hjpeg->Instance->DOR;
90008e5a:	6c53      	ldr	r3, [r2, #68]	@ 0x44
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
90008e5c:	69e7      	ldr	r7, [r4, #28]
90008e5e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
90008e60:	0a18      	lsrs	r0, r3, #8
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
90008e62:	0c19      	lsrs	r1, r3, #16
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
90008e64:	54bb      	strb	r3, [r7, r2]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
90008e66:	0e1b      	lsrs	r3, r3, #24
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
90008e68:	6a67      	ldr	r7, [r4, #36]	@ 0x24
90008e6a:	69e2      	ldr	r2, [r4, #28]
90008e6c:	443a      	add	r2, r7
90008e6e:	7050      	strb	r0, [r2, #1]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
90008e70:	6a60      	ldr	r0, [r4, #36]	@ 0x24
90008e72:	69e2      	ldr	r2, [r4, #28]
90008e74:	4402      	add	r2, r0
90008e76:	7091      	strb	r1, [r2, #2]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
90008e78:	6a61      	ldr	r1, [r4, #36]	@ 0x24
90008e7a:	69e2      	ldr	r2, [r4, #28]
90008e7c:	440a      	add	r2, r1
90008e7e:	70d3      	strb	r3, [r2, #3]
        hjpeg->JpegOutCount += 4UL;
90008e80:	6a63      	ldr	r3, [r4, #36]	@ 0x24
        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
90008e82:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
        hjpeg->JpegOutCount += 4UL;
90008e84:	3304      	adds	r3, #4
90008e86:	6263      	str	r3, [r4, #36]	@ 0x24
        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
90008e88:	6a63      	ldr	r3, [r4, #36]	@ 0x24
90008e8a:	4293      	cmp	r3, r2
90008e8c:	d021      	beq.n	90008ed2 <JPEG_DMA_PollResidualData+0x8e>
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
90008e8e:	6822      	ldr	r2, [r4, #0]
  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
90008e90:	3e01      	subs	r6, #1
90008e92:	d1db      	bne.n	90008e4c <JPEG_DMA_PollResidualData+0x8>
  tmpContext = hjpeg->Context;
90008e94:	6d61      	ldr	r1, [r4, #84]	@ 0x54
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
90008e96:	6b53      	ldr	r3, [r2, #52]	@ 0x34
90008e98:	06d8      	lsls	r0, r3, #27
90008e9a:	d501      	bpl.n	90008ea0 <JPEG_DMA_PollResidualData+0x5c>
90008e9c:	048b      	lsls	r3, r1, #18
90008e9e:	d417      	bmi.n	90008ed0 <JPEG_DMA_PollResidualData+0x8c>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
90008ea0:	6813      	ldr	r3, [r2, #0]
90008ea2:	f023 0301 	bic.w	r3, r3, #1
90008ea6:	6013      	str	r3, [r2, #0]
    if (hjpeg->JpegOutCount > 0UL)
90008ea8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
90008eaa:	b9eb      	cbnz	r3, 90008ee8 <JPEG_DMA_PollResidualData+0xa4>
    tmpContext = hjpeg->Context;
90008eac:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hjpeg);
90008eae:	2000      	movs	r0, #0
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
90008eb0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    hjpeg->State = HAL_JPEG_STATE_READY;
90008eb2:	2101      	movs	r1, #1
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
90008eb4:	f003 0303 	and.w	r3, r3, #3
    __HAL_UNLOCK(hjpeg);
90008eb8:	f884 004c 	strb.w	r0, [r4, #76]	@ 0x4c
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
90008ebc:	f402 4282 	and.w	r2, r2, #16640	@ 0x4100
      HAL_JPEG_DecodeCpltCallback(hjpeg);
90008ec0:	4620      	mov	r0, r4
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
90008ec2:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
90008ec4:	6562      	str	r2, [r4, #84]	@ 0x54
    hjpeg->State = HAL_JPEG_STATE_READY;
90008ec6:	f884 104d 	strb.w	r1, [r4, #77]	@ 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
90008eca:	d00a      	beq.n	90008ee2 <JPEG_DMA_PollResidualData+0x9e>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
90008ecc:	f7ff ff4e 	bl	90008d6c <HAL_JPEG_EncodeCpltCallback>
}
90008ed0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
90008ed2:	6a62      	ldr	r2, [r4, #36]	@ 0x24
90008ed4:	4620      	mov	r0, r4
90008ed6:	69e1      	ldr	r1, [r4, #28]
90008ed8:	f7f9 fb74 	bl	900025c4 <HAL_JPEG_DataReadyCallback>
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
90008edc:	6822      	ldr	r2, [r4, #0]
          hjpeg->JpegOutCount = 0;
90008ede:	6265      	str	r5, [r4, #36]	@ 0x24
90008ee0:	e7d6      	b.n	90008e90 <JPEG_DMA_PollResidualData+0x4c>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
90008ee2:	f7f9 fbb3 	bl	9000264c <HAL_JPEG_DecodeCpltCallback>
}
90008ee6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
90008ee8:	6a62      	ldr	r2, [r4, #36]	@ 0x24
90008eea:	4620      	mov	r0, r4
90008eec:	69e1      	ldr	r1, [r4, #28]
90008eee:	f7f9 fb69 	bl	900025c4 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
90008ef2:	2300      	movs	r3, #0
90008ef4:	6263      	str	r3, [r4, #36]	@ 0x24
90008ef6:	e7d9      	b.n	90008eac <JPEG_DMA_PollResidualData+0x68>

90008ef8 <HAL_JPEG_Resume>:
  if ((hjpeg->Context & (JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT)) == 0UL)
90008ef8:	6d43      	ldr	r3, [r0, #84]	@ 0x54
90008efa:	f413 5f40 	tst.w	r3, #12288	@ 0x3000
90008efe:	d06f      	beq.n	90008fe0 <HAL_JPEG_Resume+0xe8>
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
90008f00:	6d43      	ldr	r3, [r0, #84]	@ 0x54
90008f02:	f003 030c 	and.w	r3, r3, #12
90008f06:	2b0c      	cmp	r3, #12
{
90008f08:	b530      	push	{r4, r5, lr}
90008f0a:	4604      	mov	r4, r0
90008f0c:	b083      	sub	sp, #12
90008f0e:	460d      	mov	r5, r1
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
90008f10:	d007      	beq.n	90008f22 <HAL_JPEG_Resume+0x2a>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
90008f12:	6d43      	ldr	r3, [r0, #84]	@ 0x54
90008f14:	f003 030c 	and.w	r3, r3, #12
90008f18:	2b08      	cmp	r3, #8
90008f1a:	d035      	beq.n	90008f88 <HAL_JPEG_Resume+0x90>
  return HAL_OK;
90008f1c:	2000      	movs	r0, #0
}
90008f1e:	b003      	add	sp, #12
90008f20:	bd30      	pop	{r4, r5, pc}
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
90008f22:	07c8      	lsls	r0, r1, #31
90008f24:	d415      	bmi.n	90008f52 <HAL_JPEG_Resume+0x5a>
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
90008f26:	07a9      	lsls	r1, r5, #30
90008f28:	d5f8      	bpl.n	90008f1c <HAL_JPEG_Resume+0x24>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
90008f2a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
90008f2c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
90008f30:	6563      	str	r3, [r4, #84]	@ 0x54
      if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
90008f32:	6d63      	ldr	r3, [r4, #84]	@ 0x54
90008f34:	041a      	lsls	r2, r3, #16
90008f36:	d44f      	bmi.n	90008fd8 <HAL_JPEG_Resume+0xe0>
        xfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
90008f38:	6b60      	ldr	r0, [r4, #52]	@ 0x34
90008f3a:	6a82      	ldr	r2, [r0, #40]	@ 0x28
        if (xfrSize == 0UL)
90008f3c:	2a00      	cmp	r2, #0
90008f3e:	d13a      	bne.n	90008fb6 <HAL_JPEG_Resume+0xbe>
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
90008f40:	6d23      	ldr	r3, [r4, #80]	@ 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
90008f42:	2206      	movs	r2, #6
    return HAL_ERROR;
90008f44:	2001      	movs	r0, #1
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
90008f46:	f043 0304 	orr.w	r3, r3, #4
90008f4a:	6523      	str	r3, [r4, #80]	@ 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
90008f4c:	f884 204d 	strb.w	r2, [r4, #77]	@ 0x4d
          return HAL_ERROR;
90008f50:	e7e5      	b.n	90008f1e <HAL_JPEG_Resume+0x26>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
90008f52:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      xfrSize = hjpeg->hdmain->Init.BufferTransferLength;
90008f54:	6b20      	ldr	r0, [r4, #48]	@ 0x30
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
90008f56:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
      xfrSize = hjpeg->hdmain->Init.BufferTransferLength;
90008f5a:	6a82      	ldr	r2, [r0, #40]	@ 0x28
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
90008f5c:	6563      	str	r3, [r4, #84]	@ 0x54
      if (xfrSize == 0UL)
90008f5e:	2a00      	cmp	r2, #0
90008f60:	d0ee      	beq.n	90008f40 <HAL_JPEG_Resume+0x48>
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % xfrSize);
90008f62:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
90008f64:	fbb3 f1f2 	udiv	r1, r3, r2
90008f68:	fb02 3211 	mls	r2, r2, r1, r3
90008f6c:	1a9b      	subs	r3, r3, r2
90008f6e:	62a3      	str	r3, [r4, #40]	@ 0x28
      if (hjpeg->InDataLength > 0UL)
90008f70:	2b00      	cmp	r3, #0
90008f72:	d0d8      	beq.n	90008f26 <HAL_JPEG_Resume+0x2e>
        if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
90008f74:	6822      	ldr	r2, [r4, #0]
90008f76:	2101      	movs	r1, #1
90008f78:	3240      	adds	r2, #64	@ 0x40
90008f7a:	9100      	str	r1, [sp, #0]
90008f7c:	69a1      	ldr	r1, [r4, #24]
90008f7e:	f001 f80d 	bl	90009f9c <HAL_MDMA_Start_IT>
90008f82:	2800      	cmp	r0, #0
90008f84:	d0cf      	beq.n	90008f26 <HAL_JPEG_Resume+0x2e>
90008f86:	e7db      	b.n	90008f40 <HAL_JPEG_Resume+0x48>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
90008f88:	f011 0101 	ands.w	r1, r1, #1
90008f8c:	d011      	beq.n	90008fb2 <HAL_JPEG_Resume+0xba>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
90008f8e:	6d43      	ldr	r3, [r0, #84]	@ 0x54
90008f90:	222e      	movs	r2, #46	@ 0x2e
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
90008f92:	2106      	movs	r1, #6
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
90008f94:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
90008f98:	6543      	str	r3, [r0, #84]	@ 0x54
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
90008f9a:	07ab      	lsls	r3, r5, #30
90008f9c:	d504      	bpl.n	90008fa8 <HAL_JPEG_Resume+0xb0>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
90008f9e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
90008fa0:	4611      	mov	r1, r2
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
90008fa2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
90008fa6:	6563      	str	r3, [r4, #84]	@ 0x54
    __HAL_JPEG_ENABLE_IT(hjpeg, mask);
90008fa8:	6822      	ldr	r2, [r4, #0]
90008faa:	6b13      	ldr	r3, [r2, #48]	@ 0x30
90008fac:	430b      	orrs	r3, r1
90008fae:	6313      	str	r3, [r2, #48]	@ 0x30
90008fb0:	e7b4      	b.n	90008f1c <HAL_JPEG_Resume+0x24>
90008fb2:	2228      	movs	r2, #40	@ 0x28
90008fb4:	e7f1      	b.n	90008f9a <HAL_JPEG_Resume+0xa2>
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
90008fb6:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
90008fb8:	fbb3 f1f2 	udiv	r1, r3, r2
90008fbc:	fb02 3211 	mls	r2, r2, r1, r3
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
90008fc0:	6821      	ldr	r1, [r4, #0]
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
90008fc2:	1a9b      	subs	r3, r3, r2
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
90008fc4:	2201      	movs	r2, #1
90008fc6:	3144      	adds	r1, #68	@ 0x44
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
90008fc8:	62e3      	str	r3, [r4, #44]	@ 0x2c
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
90008fca:	9200      	str	r2, [sp, #0]
90008fcc:	69e2      	ldr	r2, [r4, #28]
90008fce:	f000 ffe5 	bl	90009f9c <HAL_MDMA_Start_IT>
90008fd2:	2800      	cmp	r0, #0
90008fd4:	d0a2      	beq.n	90008f1c <HAL_JPEG_Resume+0x24>
90008fd6:	e7b3      	b.n	90008f40 <HAL_JPEG_Resume+0x48>
        JPEG_DMA_PollResidualData(hjpeg);
90008fd8:	4620      	mov	r0, r4
90008fda:	f7ff ff33 	bl	90008e44 <JPEG_DMA_PollResidualData>
90008fde:	e79d      	b.n	90008f1c <HAL_JPEG_Resume+0x24>
    return HAL_ERROR;
90008fe0:	2001      	movs	r0, #1
}
90008fe2:	4770      	bx	lr

90008fe4 <JPEG_MDMAOutCpltCallback>:
{
90008fe4:	b530      	push	{r4, r5, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
90008fe6:	6c04      	ldr	r4, [r0, #64]	@ 0x40
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
90008fe8:	f248 010c 	movw	r1, #32780	@ 0x800c
{
90008fec:	b083      	sub	sp, #12
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
90008fee:	6823      	ldr	r3, [r4, #0]
90008ff0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
90008ff2:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
90008ff6:	631a      	str	r2, [r3, #48]	@ 0x30
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
90008ff8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
90008ffa:	400a      	ands	r2, r1
90008ffc:	2a0c      	cmp	r2, #12
90008ffe:	d001      	beq.n	90009004 <JPEG_MDMAOutCpltCallback+0x20>
}
90009000:	b003      	add	sp, #12
90009002:	bd30      	pop	{r4, r5, pc}
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) == 0UL)
90009004:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
90009006:	0692      	lsls	r2, r2, #26
90009008:	d505      	bpl.n	90009016 <JPEG_MDMAOutCpltCallback+0x32>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
9000900a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
9000900c:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
90009010:	631a      	str	r2, [r3, #48]	@ 0x30
}
90009012:	b003      	add	sp, #12
90009014:	bd30      	pop	{r4, r5, pc}
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
90009016:	6802      	ldr	r2, [r0, #0]
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
90009018:	4620      	mov	r0, r4
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
9000901a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
9000901c:	6952      	ldr	r2, [r2, #20]
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
9000901e:	69e1      	ldr	r1, [r4, #28]
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
90009020:	f3c2 0210 	ubfx	r2, r2, #0, #17
90009024:	1a9b      	subs	r3, r3, r2
90009026:	6263      	str	r3, [r4, #36]	@ 0x24
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
90009028:	6a62      	ldr	r2, [r4, #36]	@ 0x24
9000902a:	f7f9 facb 	bl	900025c4 <HAL_JPEG_DataReadyCallback>
      if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
9000902e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
90009030:	049b      	lsls	r3, r3, #18
90009032:	d501      	bpl.n	90009038 <JPEG_MDMAOutCpltCallback+0x54>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
90009034:	6823      	ldr	r3, [r4, #0]
90009036:	e7e8      	b.n	9000900a <JPEG_MDMAOutCpltCallback+0x26>
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
90009038:	6821      	ldr	r1, [r4, #0]
9000903a:	2501      	movs	r5, #1
9000903c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
9000903e:	69e2      	ldr	r2, [r4, #28]
90009040:	3144      	adds	r1, #68	@ 0x44
90009042:	6b60      	ldr	r0, [r4, #52]	@ 0x34
90009044:	9500      	str	r5, [sp, #0]
90009046:	f000 ffa9 	bl	90009f9c <HAL_MDMA_Start_IT>
9000904a:	2800      	cmp	r0, #0
9000904c:	d0f2      	beq.n	90009034 <JPEG_MDMAOutCpltCallback+0x50>
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
9000904e:	6d23      	ldr	r3, [r4, #80]	@ 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
90009050:	2206      	movs	r2, #6
          HAL_JPEG_ErrorCallback(hjpeg);
90009052:	4620      	mov	r0, r4
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
90009054:	f043 0304 	orr.w	r3, r3, #4
90009058:	6523      	str	r3, [r4, #80]	@ 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
9000905a:	f884 204d 	strb.w	r2, [r4, #77]	@ 0x4d
          HAL_JPEG_ErrorCallback(hjpeg);
9000905e:	f7f9 faf3 	bl	90002648 <HAL_JPEG_ErrorCallback>
          return;
90009062:	e7cd      	b.n	90009000 <JPEG_MDMAOutCpltCallback+0x1c>

90009064 <JPEG_MDMAOutAbortCallback>:
{
90009064:	b538      	push	{r3, r4, r5, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
90009066:	6c04      	ldr	r4, [r0, #64]	@ 0x40
  if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
90009068:	6d63      	ldr	r3, [r4, #84]	@ 0x54
9000906a:	041a      	lsls	r2, r3, #16
9000906c:	d400      	bmi.n	90009070 <JPEG_MDMAOutAbortCallback+0xc>
}
9000906e:	bd38      	pop	{r3, r4, r5, pc}
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
90009070:	6b63      	ldr	r3, [r4, #52]	@ 0x34
90009072:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
90009074:	681b      	ldr	r3, [r3, #0]
90009076:	695b      	ldr	r3, [r3, #20]
90009078:	f3c3 0310 	ubfx	r3, r3, #0, #17
9000907c:	1ad3      	subs	r3, r2, r3
9000907e:	6263      	str	r3, [r4, #36]	@ 0x24
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
90009080:	6a63      	ldr	r3, [r4, #36]	@ 0x24
90009082:	429a      	cmp	r2, r3
90009084:	d025      	beq.n	900090d2 <JPEG_MDMAOutAbortCallback+0x6e>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
90009086:	6822      	ldr	r2, [r4, #0]
90009088:	6b55      	ldr	r5, [r2, #52]	@ 0x34
9000908a:	f015 0510 	ands.w	r5, r5, #16
9000908e:	d118      	bne.n	900090c2 <JPEG_MDMAOutAbortCallback+0x5e>
    if (hjpeg->JpegOutCount > 0UL)
90009090:	6a63      	ldr	r3, [r4, #36]	@ 0x24
90009092:	bb4b      	cbnz	r3, 900090e8 <JPEG_MDMAOutAbortCallback+0x84>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
90009094:	6813      	ldr	r3, [r2, #0]
    __HAL_UNLOCK(hjpeg);
90009096:	2000      	movs	r0, #0
    hjpeg->State = HAL_JPEG_STATE_READY;
90009098:	2101      	movs	r1, #1
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
9000909a:	f023 0301 	bic.w	r3, r3, #1
9000909e:	6013      	str	r3, [r2, #0]
    tmpContext = hjpeg->Context;
900090a0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
900090a2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
900090a4:	f003 0303 	and.w	r3, r3, #3
    __HAL_UNLOCK(hjpeg);
900090a8:	f884 004c 	strb.w	r0, [r4, #76]	@ 0x4c
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
900090ac:	f402 4282 	and.w	r2, r2, #16640	@ 0x4100
      HAL_JPEG_DecodeCpltCallback(hjpeg);
900090b0:	4620      	mov	r0, r4
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
900090b2:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
900090b4:	6562      	str	r2, [r4, #84]	@ 0x54
    hjpeg->State = HAL_JPEG_STATE_READY;
900090b6:	f884 104d 	strb.w	r1, [r4, #77]	@ 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
900090ba:	d012      	beq.n	900090e2 <JPEG_MDMAOutAbortCallback+0x7e>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
900090bc:	f7ff fe56 	bl	90008d6c <HAL_JPEG_EncodeCpltCallback>
}
900090c0:	bd38      	pop	{r3, r4, r5, pc}
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
900090c2:	6d63      	ldr	r3, [r4, #84]	@ 0x54
900090c4:	049b      	lsls	r3, r3, #18
900090c6:	d4d2      	bmi.n	9000906e <JPEG_MDMAOutAbortCallback+0xa>
    JPEG_DMA_PollResidualData(hjpeg);
900090c8:	4620      	mov	r0, r4
}
900090ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    JPEG_DMA_PollResidualData(hjpeg);
900090ce:	f7ff beb9 	b.w	90008e44 <JPEG_DMA_PollResidualData>
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
900090d2:	6a62      	ldr	r2, [r4, #36]	@ 0x24
900090d4:	4620      	mov	r0, r4
900090d6:	69e1      	ldr	r1, [r4, #28]
900090d8:	f7f9 fa74 	bl	900025c4 <HAL_JPEG_DataReadyCallback>
    hjpeg->JpegOutCount = 0;
900090dc:	2300      	movs	r3, #0
900090de:	6263      	str	r3, [r4, #36]	@ 0x24
900090e0:	e7d1      	b.n	90009086 <JPEG_MDMAOutAbortCallback+0x22>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
900090e2:	f7f9 fab3 	bl	9000264c <HAL_JPEG_DecodeCpltCallback>
}
900090e6:	bd38      	pop	{r3, r4, r5, pc}
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
900090e8:	6a62      	ldr	r2, [r4, #36]	@ 0x24
900090ea:	4620      	mov	r0, r4
900090ec:	69e1      	ldr	r1, [r4, #28]
900090ee:	f7f9 fa69 	bl	900025c4 <HAL_JPEG_DataReadyCallback>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
900090f2:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount = 0;
900090f4:	6265      	str	r5, [r4, #36]	@ 0x24
900090f6:	e7cd      	b.n	90009094 <JPEG_MDMAOutAbortCallback+0x30>

900090f8 <JPEG_Process>:
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
900090f8:	6d42      	ldr	r2, [r0, #84]	@ 0x54
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
900090fa:	6803      	ldr	r3, [r0, #0]
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
900090fc:	f002 0203 	and.w	r2, r2, #3
90009100:	2a02      	cmp	r2, #2
{
90009102:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90009106:	4604      	mov	r4, r0
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
90009108:	d01e      	beq.n	90009148 <JPEG_Process+0x50>
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL)
9000910a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
9000910c:	04d7      	lsls	r7, r2, #19
9000910e:	d407      	bmi.n	90009120 <JPEG_Process+0x28>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFTF) != 0UL)
90009110:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
90009112:	0796      	lsls	r6, r2, #30
90009114:	f100 811b 	bmi.w	9000934e <JPEG_Process+0x256>
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFNFF) != 0UL)
90009118:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
9000911a:	0750      	lsls	r0, r2, #29
9000911c:	f100 81cc 	bmi.w	900094b8 <JPEG_Process+0x3c0>
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
90009120:	6d65      	ldr	r5, [r4, #84]	@ 0x54
90009122:	f415 5500 	ands.w	r5, r5, #8192	@ 0x2000
90009126:	d107      	bne.n	90009138 <JPEG_Process+0x40>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFTF) != 0UL)
90009128:	6b5e      	ldr	r6, [r3, #52]	@ 0x34
9000912a:	f016 0608 	ands.w	r6, r6, #8
9000912e:	d14a      	bne.n	900091c6 <JPEG_Process+0xce>
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
90009130:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
90009132:	06d2      	lsls	r2, r2, #27
90009134:	f100 81fe 	bmi.w	90009534 <JPEG_Process+0x43c>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
90009138:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
9000913a:	f002 0238 	and.w	r2, r2, #56	@ 0x38
9000913e:	2a20      	cmp	r2, #32
90009140:	d019      	beq.n	90009176 <JPEG_Process+0x7e>
  return JPEG_PROCESS_ONGOING;
90009142:	2000      	movs	r0, #0
}
90009144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
90009148:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
9000914a:	0652      	lsls	r2, r2, #25
9000914c:	d5dd      	bpl.n	9000910a <JPEG_Process+0x12>
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
9000914e:	1d05      	adds	r5, r0, #4
  if ((hjpeg == NULL) || (pInfo == NULL))
90009150:	4629      	mov	r1, r5
90009152:	f7ff fb8b 	bl	9000886c <HAL_JPEG_GetInfo.part.0>
      hjpeg->Conf.ImageQuality = 0;
90009156:	2300      	movs	r3, #0
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
90009158:	4629      	mov	r1, r5
9000915a:	4620      	mov	r0, r4
      hjpeg->Conf.ImageQuality = 0;
9000915c:	6163      	str	r3, [r4, #20]
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
9000915e:	f7f9 f9bf 	bl	900024e0 <HAL_JPEG_InfoReadyCallback>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
90009162:	6823      	ldr	r3, [r4, #0]
90009164:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
90009166:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
9000916a:	631a      	str	r2, [r3, #48]	@ 0x30
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
9000916c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
9000916e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
90009172:	639a      	str	r2, [r3, #56]	@ 0x38
90009174:	e7c9      	b.n	9000910a <JPEG_Process+0x12>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
90009176:	681a      	ldr	r2, [r3, #0]
90009178:	f022 0201 	bic.w	r2, r2, #1
9000917c:	601a      	str	r2, [r3, #0]
    if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
9000917e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
90009180:	f002 020c 	and.w	r2, r2, #12
90009184:	2a08      	cmp	r2, #8
90009186:	f000 8201 	beq.w	9000958c <JPEG_Process+0x494>
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
9000918a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
9000918c:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
90009190:	639a      	str	r2, [r3, #56]	@ 0x38
    if (hjpeg->JpegOutCount > 0UL)
90009192:	6a63      	ldr	r3, [r4, #36]	@ 0x24
90009194:	2b00      	cmp	r3, #0
90009196:	f040 81fe 	bne.w	90009596 <JPEG_Process+0x49e>
    tmpContext = hjpeg->Context;
9000919a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hjpeg);
9000919c:	2000      	movs	r0, #0
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
9000919e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    hjpeg->State = HAL_JPEG_STATE_READY;
900091a0:	2101      	movs	r1, #1
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
900091a2:	f003 0303 	and.w	r3, r3, #3
    __HAL_UNLOCK(hjpeg);
900091a6:	f884 004c 	strb.w	r0, [r4, #76]	@ 0x4c
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
900091aa:	f402 4282 	and.w	r2, r2, #16640	@ 0x4100
      HAL_JPEG_DecodeCpltCallback(hjpeg);
900091ae:	4620      	mov	r0, r4
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
900091b0:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
900091b2:	6562      	str	r2, [r4, #84]	@ 0x54
    hjpeg->State = HAL_JPEG_STATE_READY;
900091b4:	f884 104d 	strb.w	r1, [r4, #77]	@ 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
900091b8:	f000 81e5 	beq.w	90009586 <JPEG_Process+0x48e>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
900091bc:	f7ff fdd6 	bl	90008d6c <HAL_JPEG_EncodeCpltCallback>
    return JPEG_PROCESS_DONE;
900091c0:	2001      	movs	r0, #1
}
900091c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
900091c6:	6a62      	ldr	r2, [r4, #36]	@ 0x24
900091c8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
900091ca:	3220      	adds	r2, #32
900091cc:	4296      	cmp	r6, r2
900091ce:	f0c0 8200 	bcc.w	900095d2 <JPEG_Process+0x4da>
      dataword = hjpeg->Instance->DOR;
900091d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
900091d4:	69e1      	ldr	r1, [r4, #28]
900091d6:	6a62      	ldr	r2, [r4, #36]	@ 0x24
900091d8:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
900091da:	6a61      	ldr	r1, [r4, #36]	@ 0x24
900091dc:	69e2      	ldr	r2, [r4, #28]
900091de:	440a      	add	r2, r1
900091e0:	0a19      	lsrs	r1, r3, #8
900091e2:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
900091e4:	6a61      	ldr	r1, [r4, #36]	@ 0x24
900091e6:	69e2      	ldr	r2, [r4, #28]
900091e8:	440a      	add	r2, r1
900091ea:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
900091ec:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
900091ee:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
900091f0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
900091f2:	69e2      	ldr	r2, [r4, #28]
900091f4:	440a      	add	r2, r1
900091f6:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
900091f8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
900091fa:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount += 4UL;
900091fc:	3304      	adds	r3, #4
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
900091fe:	69e1      	ldr	r1, [r4, #28]
      hjpeg->JpegOutCount += 4UL;
90009200:	6263      	str	r3, [r4, #36]	@ 0x24
      dataword = hjpeg->Instance->DOR;
90009202:	6c53      	ldr	r3, [r2, #68]	@ 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
90009204:	6a62      	ldr	r2, [r4, #36]	@ 0x24
90009206:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
90009208:	6a61      	ldr	r1, [r4, #36]	@ 0x24
9000920a:	69e2      	ldr	r2, [r4, #28]
9000920c:	440a      	add	r2, r1
9000920e:	0a19      	lsrs	r1, r3, #8
90009210:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90009212:	6a61      	ldr	r1, [r4, #36]	@ 0x24
90009214:	69e2      	ldr	r2, [r4, #28]
90009216:	440a      	add	r2, r1
90009218:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
9000921a:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
9000921c:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
9000921e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
90009220:	69e2      	ldr	r2, [r4, #28]
90009222:	440a      	add	r2, r1
90009224:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
90009226:	6a63      	ldr	r3, [r4, #36]	@ 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
90009228:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount += 4UL;
9000922a:	3304      	adds	r3, #4
9000922c:	6263      	str	r3, [r4, #36]	@ 0x24
      dataword = hjpeg->Instance->DOR;
9000922e:	6c53      	ldr	r3, [r2, #68]	@ 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
90009230:	6a62      	ldr	r2, [r4, #36]	@ 0x24
90009232:	69e1      	ldr	r1, [r4, #28]
90009234:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
90009236:	6a61      	ldr	r1, [r4, #36]	@ 0x24
90009238:	69e2      	ldr	r2, [r4, #28]
9000923a:	440a      	add	r2, r1
9000923c:	0a19      	lsrs	r1, r3, #8
9000923e:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90009240:	6a61      	ldr	r1, [r4, #36]	@ 0x24
90009242:	69e2      	ldr	r2, [r4, #28]
90009244:	440a      	add	r2, r1
90009246:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90009248:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
9000924a:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
9000924c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
9000924e:	69e2      	ldr	r2, [r4, #28]
90009250:	440a      	add	r2, r1
90009252:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
90009254:	6a63      	ldr	r3, [r4, #36]	@ 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
90009256:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount += 4UL;
90009258:	3304      	adds	r3, #4
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
9000925a:	69e1      	ldr	r1, [r4, #28]
      hjpeg->JpegOutCount += 4UL;
9000925c:	6263      	str	r3, [r4, #36]	@ 0x24
      dataword = hjpeg->Instance->DOR;
9000925e:	6c53      	ldr	r3, [r2, #68]	@ 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
90009260:	6a62      	ldr	r2, [r4, #36]	@ 0x24
90009262:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
90009264:	6a61      	ldr	r1, [r4, #36]	@ 0x24
90009266:	69e2      	ldr	r2, [r4, #28]
90009268:	440a      	add	r2, r1
9000926a:	0a19      	lsrs	r1, r3, #8
9000926c:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
9000926e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
90009270:	69e2      	ldr	r2, [r4, #28]
90009272:	440a      	add	r2, r1
90009274:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90009276:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90009278:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
9000927a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
9000927c:	69e2      	ldr	r2, [r4, #28]
9000927e:	440a      	add	r2, r1
90009280:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
90009282:	6a63      	ldr	r3, [r4, #36]	@ 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
90009284:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount += 4UL;
90009286:	3304      	adds	r3, #4
90009288:	6263      	str	r3, [r4, #36]	@ 0x24
      dataword = hjpeg->Instance->DOR;
9000928a:	6c53      	ldr	r3, [r2, #68]	@ 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
9000928c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
9000928e:	69e1      	ldr	r1, [r4, #28]
90009290:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
90009292:	6a61      	ldr	r1, [r4, #36]	@ 0x24
90009294:	69e2      	ldr	r2, [r4, #28]
90009296:	440a      	add	r2, r1
90009298:	0a19      	lsrs	r1, r3, #8
9000929a:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
9000929c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
9000929e:	69e2      	ldr	r2, [r4, #28]
900092a0:	440a      	add	r2, r1
900092a2:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
900092a4:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
900092a6:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
900092a8:	6a61      	ldr	r1, [r4, #36]	@ 0x24
900092aa:	69e2      	ldr	r2, [r4, #28]
900092ac:	440a      	add	r2, r1
900092ae:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
900092b0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
900092b2:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount += 4UL;
900092b4:	3304      	adds	r3, #4
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
900092b6:	69e1      	ldr	r1, [r4, #28]
      hjpeg->JpegOutCount += 4UL;
900092b8:	6263      	str	r3, [r4, #36]	@ 0x24
      dataword = hjpeg->Instance->DOR;
900092ba:	6c53      	ldr	r3, [r2, #68]	@ 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
900092bc:	6a62      	ldr	r2, [r4, #36]	@ 0x24
900092be:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
900092c0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
900092c2:	69e2      	ldr	r2, [r4, #28]
900092c4:	440a      	add	r2, r1
900092c6:	0a19      	lsrs	r1, r3, #8
900092c8:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
900092ca:	6a61      	ldr	r1, [r4, #36]	@ 0x24
900092cc:	69e2      	ldr	r2, [r4, #28]
900092ce:	440a      	add	r2, r1
900092d0:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
900092d2:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
900092d4:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
900092d6:	6a61      	ldr	r1, [r4, #36]	@ 0x24
900092d8:	69e2      	ldr	r2, [r4, #28]
900092da:	440a      	add	r2, r1
900092dc:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
900092de:	6a63      	ldr	r3, [r4, #36]	@ 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
900092e0:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount += 4UL;
900092e2:	3304      	adds	r3, #4
900092e4:	6263      	str	r3, [r4, #36]	@ 0x24
      dataword = hjpeg->Instance->DOR;
900092e6:	6c53      	ldr	r3, [r2, #68]	@ 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
900092e8:	6a62      	ldr	r2, [r4, #36]	@ 0x24
900092ea:	69e1      	ldr	r1, [r4, #28]
900092ec:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
900092ee:	6a61      	ldr	r1, [r4, #36]	@ 0x24
900092f0:	69e2      	ldr	r2, [r4, #28]
900092f2:	440a      	add	r2, r1
900092f4:	0a19      	lsrs	r1, r3, #8
900092f6:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
900092f8:	6a61      	ldr	r1, [r4, #36]	@ 0x24
900092fa:	69e2      	ldr	r2, [r4, #28]
900092fc:	440a      	add	r2, r1
900092fe:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90009300:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90009302:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90009304:	6a61      	ldr	r1, [r4, #36]	@ 0x24
90009306:	69e2      	ldr	r2, [r4, #28]
90009308:	440a      	add	r2, r1
9000930a:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
9000930c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
9000930e:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount += 4UL;
90009310:	3304      	adds	r3, #4
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
90009312:	69e1      	ldr	r1, [r4, #28]
      hjpeg->JpegOutCount += 4UL;
90009314:	6263      	str	r3, [r4, #36]	@ 0x24
      dataword = hjpeg->Instance->DOR;
90009316:	6c53      	ldr	r3, [r2, #68]	@ 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
90009318:	6a62      	ldr	r2, [r4, #36]	@ 0x24
9000931a:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
9000931c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
9000931e:	69e2      	ldr	r2, [r4, #28]
90009320:	440a      	add	r2, r1
90009322:	0a19      	lsrs	r1, r3, #8
90009324:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90009326:	6a61      	ldr	r1, [r4, #36]	@ 0x24
90009328:	69e2      	ldr	r2, [r4, #28]
9000932a:	440a      	add	r2, r1
9000932c:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
9000932e:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90009330:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90009332:	6a61      	ldr	r1, [r4, #36]	@ 0x24
90009334:	69e2      	ldr	r2, [r4, #28]
90009336:	440a      	add	r2, r1
90009338:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
9000933a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
9000933c:	3304      	adds	r3, #4
9000933e:	6263      	str	r3, [r4, #36]	@ 0x24
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
90009340:	6a63      	ldr	r3, [r4, #36]	@ 0x24
90009342:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
90009344:	429a      	cmp	r2, r3
90009346:	f000 8258 	beq.w	900097fa <JPEG_Process+0x702>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
9000934a:	6823      	ldr	r3, [r4, #0]
9000934c:	e6f4      	b.n	90009138 <JPEG_Process+0x40>
  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
9000934e:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
90009350:	2a00      	cmp	r2, #0
90009352:	f000 8128 	beq.w	900095a6 <JPEG_Process+0x4ae>
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
90009356:	6a21      	ldr	r1, [r4, #32]
90009358:	428a      	cmp	r2, r1
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
9000935a:	6a21      	ldr	r1, [r4, #32]
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
9000935c:	f240 81b9 	bls.w	900096d2 <JPEG_Process+0x5da>
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
90009360:	1a52      	subs	r2, r2, r1
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
90009362:	6d61      	ldr	r1, [r4, #84]	@ 0x54
90009364:	04cd      	lsls	r5, r1, #19
90009366:	f53f aedb 	bmi.w	90009120 <JPEG_Process+0x28>
9000936a:	2a00      	cmp	r2, #0
9000936c:	f43f aed8 	beq.w	90009120 <JPEG_Process+0x28>
    if (nb_words >= nbRequestWords)
90009370:	2a1f      	cmp	r2, #31
    nb_words = nb_bytes / 4UL;
90009372:	ea4f 0092 	mov.w	r0, r2, lsr #2
    if (nb_words >= nbRequestWords)
90009376:	f200 8248 	bhi.w	9000980a <JPEG_Process+0x712>
      if (nb_words > 0UL)
9000937a:	2a03      	cmp	r2, #3
9000937c:	f240 82c0 	bls.w	90009900 <JPEG_Process+0x808>
          input_count = hjpeg->JpegInCount;
90009380:	6a21      	ldr	r1, [r4, #32]
        for (index = 0; index < nb_words; index++)
90009382:	2801      	cmp	r0, #1
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
90009384:	69a2      	ldr	r2, [r4, #24]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009386:	eb02 0501 	add.w	r5, r2, r1
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000938a:	5c56      	ldrb	r6, [r2, r1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000938c:	78a9      	ldrb	r1, [r5, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000938e:	786f      	ldrb	r7, [r5, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009390:	ea4f 4101 	mov.w	r1, r1, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
90009394:	78ed      	ldrb	r5, [r5, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009396:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
9000939a:	ea41 0106 	orr.w	r1, r1, r6
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000939e:	ea41 6105 	orr.w	r1, r1, r5, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
900093a2:	6419      	str	r1, [r3, #64]	@ 0x40
          hjpeg->JpegInCount += 4UL;
900093a4:	6a21      	ldr	r1, [r4, #32]
900093a6:	f101 0104 	add.w	r1, r1, #4
900093aa:	6221      	str	r1, [r4, #32]
        for (index = 0; index < nb_words; index++)
900093ac:	f43f aeb8 	beq.w	90009120 <JPEG_Process+0x28>
          input_count = hjpeg->JpegInCount;
900093b0:	6a21      	ldr	r1, [r4, #32]
        for (index = 0; index < nb_words; index++)
900093b2:	2802      	cmp	r0, #2
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
900093b4:	eb02 0501 	add.w	r5, r2, r1
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
900093b8:	5c56      	ldrb	r6, [r2, r1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
900093ba:	78a9      	ldrb	r1, [r5, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
900093bc:	786f      	ldrb	r7, [r5, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
900093be:	ea4f 4101 	mov.w	r1, r1, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
900093c2:	78ed      	ldrb	r5, [r5, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
900093c4:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
900093c8:	ea41 0106 	orr.w	r1, r1, r6
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
900093cc:	ea41 6105 	orr.w	r1, r1, r5, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
900093d0:	6419      	str	r1, [r3, #64]	@ 0x40
          hjpeg->JpegInCount += 4UL;
900093d2:	6a21      	ldr	r1, [r4, #32]
900093d4:	f101 0104 	add.w	r1, r1, #4
900093d8:	6221      	str	r1, [r4, #32]
        for (index = 0; index < nb_words; index++)
900093da:	f43f aea1 	beq.w	90009120 <JPEG_Process+0x28>
          input_count = hjpeg->JpegInCount;
900093de:	6a21      	ldr	r1, [r4, #32]
        for (index = 0; index < nb_words; index++)
900093e0:	2803      	cmp	r0, #3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
900093e2:	eb02 0501 	add.w	r5, r2, r1
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
900093e6:	5c56      	ldrb	r6, [r2, r1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
900093e8:	78a9      	ldrb	r1, [r5, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
900093ea:	786f      	ldrb	r7, [r5, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
900093ec:	ea4f 4101 	mov.w	r1, r1, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
900093f0:	78ed      	ldrb	r5, [r5, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
900093f2:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
900093f6:	ea41 0106 	orr.w	r1, r1, r6
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
900093fa:	ea41 6105 	orr.w	r1, r1, r5, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
900093fe:	6419      	str	r1, [r3, #64]	@ 0x40
          hjpeg->JpegInCount += 4UL;
90009400:	6a21      	ldr	r1, [r4, #32]
90009402:	f101 0104 	add.w	r1, r1, #4
90009406:	6221      	str	r1, [r4, #32]
        for (index = 0; index < nb_words; index++)
90009408:	f43f ae8a 	beq.w	90009120 <JPEG_Process+0x28>
          input_count = hjpeg->JpegInCount;
9000940c:	6a21      	ldr	r1, [r4, #32]
        for (index = 0; index < nb_words; index++)
9000940e:	2804      	cmp	r0, #4
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009410:	eb02 0501 	add.w	r5, r2, r1
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
90009414:	5c56      	ldrb	r6, [r2, r1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009416:	78a9      	ldrb	r1, [r5, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009418:	786f      	ldrb	r7, [r5, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000941a:	ea4f 4101 	mov.w	r1, r1, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
9000941e:	78ed      	ldrb	r5, [r5, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009420:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
90009424:	ea41 0106 	orr.w	r1, r1, r6
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009428:	ea41 6105 	orr.w	r1, r1, r5, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000942c:	6419      	str	r1, [r3, #64]	@ 0x40
          hjpeg->JpegInCount += 4UL;
9000942e:	6a21      	ldr	r1, [r4, #32]
90009430:	f101 0104 	add.w	r1, r1, #4
90009434:	6221      	str	r1, [r4, #32]
        for (index = 0; index < nb_words; index++)
90009436:	f43f ae73 	beq.w	90009120 <JPEG_Process+0x28>
          input_count = hjpeg->JpegInCount;
9000943a:	6a21      	ldr	r1, [r4, #32]
        for (index = 0; index < nb_words; index++)
9000943c:	2805      	cmp	r0, #5
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000943e:	eb02 0501 	add.w	r5, r2, r1
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
90009442:	5c56      	ldrb	r6, [r2, r1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009444:	78a9      	ldrb	r1, [r5, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009446:	786f      	ldrb	r7, [r5, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009448:	ea4f 4101 	mov.w	r1, r1, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
9000944c:	78ed      	ldrb	r5, [r5, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000944e:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
90009452:	ea41 0106 	orr.w	r1, r1, r6
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009456:	ea41 6105 	orr.w	r1, r1, r5, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000945a:	6419      	str	r1, [r3, #64]	@ 0x40
          hjpeg->JpegInCount += 4UL;
9000945c:	6a21      	ldr	r1, [r4, #32]
9000945e:	f101 0104 	add.w	r1, r1, #4
90009462:	6221      	str	r1, [r4, #32]
        for (index = 0; index < nb_words; index++)
90009464:	f43f ae5c 	beq.w	90009120 <JPEG_Process+0x28>
          input_count = hjpeg->JpegInCount;
90009468:	6a21      	ldr	r1, [r4, #32]
        for (index = 0; index < nb_words; index++)
9000946a:	2807      	cmp	r0, #7
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000946c:	eb02 0501 	add.w	r5, r2, r1
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
90009470:	5c56      	ldrb	r6, [r2, r1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009472:	78a9      	ldrb	r1, [r5, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009474:	786f      	ldrb	r7, [r5, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009476:	ea4f 4101 	mov.w	r1, r1, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
9000947a:	78ed      	ldrb	r5, [r5, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000947c:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
90009480:	ea41 0106 	orr.w	r1, r1, r6
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009484:	ea41 6105 	orr.w	r1, r1, r5, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
90009488:	6419      	str	r1, [r3, #64]	@ 0x40
          hjpeg->JpegInCount += 4UL;
9000948a:	6a21      	ldr	r1, [r4, #32]
9000948c:	f101 0104 	add.w	r1, r1, #4
90009490:	6221      	str	r1, [r4, #32]
        for (index = 0; index < nb_words; index++)
90009492:	f47f ae45 	bne.w	90009120 <JPEG_Process+0x28>
          input_count = hjpeg->JpegInCount;
90009496:	6a20      	ldr	r0, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009498:	1881      	adds	r1, r0, r2
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000949a:	5c85      	ldrb	r5, [r0, r2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000949c:	788a      	ldrb	r2, [r1, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
9000949e:	78c8      	ldrb	r0, [r1, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
900094a0:	0412      	lsls	r2, r2, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
900094a2:	7849      	ldrb	r1, [r1, #1]
900094a4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
900094a8:	432a      	orrs	r2, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
900094aa:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
900094ae:	641a      	str	r2, [r3, #64]	@ 0x40
        hjpeg->JpegInCount += 4UL;
900094b0:	6a22      	ldr	r2, [r4, #32]
900094b2:	3204      	adds	r2, #4
900094b4:	6222      	str	r2, [r4, #32]
      for (index = 0; index < nbRequestWords; index++)
900094b6:	e633      	b.n	90009120 <JPEG_Process+0x28>
  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
900094b8:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
900094ba:	2a00      	cmp	r2, #0
900094bc:	d073      	beq.n	900095a6 <JPEG_Process+0x4ae>
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
900094be:	6a21      	ldr	r1, [r4, #32]
900094c0:	428a      	cmp	r2, r1
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
900094c2:	6a21      	ldr	r1, [r4, #32]
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
900094c4:	f200 8182 	bhi.w	900097cc <JPEG_Process+0x6d4>
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
900094c8:	428a      	cmp	r2, r1
900094ca:	f040 8104 	bne.w	900096d6 <JPEG_Process+0x5de>
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
900094ce:	6a21      	ldr	r1, [r4, #32]
900094d0:	4620      	mov	r0, r4
900094d2:	f7f9 f857 	bl	90002584 <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength > 4UL)
900094d6:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
900094d8:	2a04      	cmp	r2, #4
900094da:	d902      	bls.n	900094e2 <JPEG_Process+0x3ea>
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
900094dc:	f022 0203 	bic.w	r2, r2, #3
900094e0:	62a2      	str	r2, [r4, #40]	@ 0x28
    hjpeg->JpegInCount = 0;
900094e2:	2100      	movs	r1, #0
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
900094e4:	6823      	ldr	r3, [r4, #0]
    hjpeg->JpegInCount = 0;
900094e6:	6221      	str	r1, [r4, #32]
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
900094e8:	6d61      	ldr	r1, [r4, #84]	@ 0x54
900094ea:	04c9      	lsls	r1, r1, #19
900094ec:	f53f ae18 	bmi.w	90009120 <JPEG_Process+0x28>
900094f0:	2a00      	cmp	r2, #0
900094f2:	f43f ae15 	beq.w	90009120 <JPEG_Process+0x28>
    if (nb_words >= nbRequestWords)
900094f6:	0891      	lsrs	r1, r2, #2
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
900094f8:	69a0      	ldr	r0, [r4, #24]
    if (nb_words >= nbRequestWords)
900094fa:	f040 8177 	bne.w	900097ec <JPEG_Process+0x6f4>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
900094fe:	6a21      	ldr	r1, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
90009500:	2a01      	cmp	r2, #1
          hjpeg->JpegInCount++;
90009502:	6a25      	ldr	r5, [r4, #32]
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
90009504:	5c41      	ldrb	r1, [r0, r1]
          hjpeg->JpegInCount++;
90009506:	f105 0501 	add.w	r5, r5, #1
9000950a:	6225      	str	r5, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
9000950c:	d010      	beq.n	90009530 <JPEG_Process+0x438>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
9000950e:	6a25      	ldr	r5, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
90009510:	2a03      	cmp	r2, #3
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
90009512:	5d45      	ldrb	r5, [r0, r5]
90009514:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
          hjpeg->JpegInCount++;
90009518:	6a25      	ldr	r5, [r4, #32]
9000951a:	f105 0501 	add.w	r5, r5, #1
9000951e:	6225      	str	r5, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
90009520:	d106      	bne.n	90009530 <JPEG_Process+0x438>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
90009522:	6a22      	ldr	r2, [r4, #32]
90009524:	5c80      	ldrb	r0, [r0, r2]
          hjpeg->JpegInCount++;
90009526:	6a22      	ldr	r2, [r4, #32]
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
90009528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
          hjpeg->JpegInCount++;
9000952c:	3201      	adds	r2, #1
9000952e:	6222      	str	r2, [r4, #32]
        hjpeg->Instance->DIR = dataword;
90009530:	6419      	str	r1, [r3, #64]	@ 0x40
90009532:	e5f5      	b.n	90009120 <JPEG_Process+0x28>
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
90009534:	6a62      	ldr	r2, [r4, #36]	@ 0x24
90009536:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
90009538:	3204      	adds	r2, #4
9000953a:	4295      	cmp	r5, r2
9000953c:	f0c0 80cd 	bcc.w	900096da <JPEG_Process+0x5e2>
      dataword = hjpeg->Instance->DOR;
90009540:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
90009542:	69e1      	ldr	r1, [r4, #28]
90009544:	6a62      	ldr	r2, [r4, #36]	@ 0x24
90009546:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
90009548:	6a61      	ldr	r1, [r4, #36]	@ 0x24
9000954a:	69e2      	ldr	r2, [r4, #28]
9000954c:	440a      	add	r2, r1
9000954e:	0a19      	lsrs	r1, r3, #8
90009550:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90009552:	6a61      	ldr	r1, [r4, #36]	@ 0x24
90009554:	69e2      	ldr	r2, [r4, #28]
90009556:	440a      	add	r2, r1
90009558:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
9000955a:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
9000955c:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
9000955e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
90009560:	69e2      	ldr	r2, [r4, #28]
90009562:	440a      	add	r2, r1
90009564:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
90009566:	6a63      	ldr	r3, [r4, #36]	@ 0x24
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
90009568:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
      hjpeg->JpegOutCount += 4UL;
9000956a:	3304      	adds	r3, #4
9000956c:	6263      	str	r3, [r4, #36]	@ 0x24
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
9000956e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
90009570:	429a      	cmp	r2, r3
90009572:	f47f aeea 	bne.w	9000934a <JPEG_Process+0x252>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
90009576:	6a62      	ldr	r2, [r4, #36]	@ 0x24
90009578:	4620      	mov	r0, r4
9000957a:	69e1      	ldr	r1, [r4, #28]
9000957c:	f7f9 f822 	bl	900025c4 <HAL_JPEG_DataReadyCallback>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
90009580:	6823      	ldr	r3, [r4, #0]
      hjpeg->JpegOutCount = 0;
90009582:	6266      	str	r6, [r4, #36]	@ 0x24
90009584:	e5d8      	b.n	90009138 <JPEG_Process+0x40>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
90009586:	f7f9 f861 	bl	9000264c <HAL_JPEG_DecodeCpltCallback>
9000958a:	e619      	b.n	900091c0 <JPEG_Process+0xc8>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
9000958c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
9000958e:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
90009592:	631a      	str	r2, [r3, #48]	@ 0x30
90009594:	e5f9      	b.n	9000918a <JPEG_Process+0x92>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
90009596:	6a62      	ldr	r2, [r4, #36]	@ 0x24
90009598:	4620      	mov	r0, r4
9000959a:	69e1      	ldr	r1, [r4, #28]
9000959c:	f7f9 f812 	bl	900025c4 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
900095a0:	2300      	movs	r3, #0
900095a2:	6263      	str	r3, [r4, #36]	@ 0x24
900095a4:	e5f9      	b.n	9000919a <JPEG_Process+0xa2>
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
900095a6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
900095a8:	f002 020c 	and.w	r2, r2, #12
900095ac:	2a0c      	cmp	r2, #12
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
900095ae:	6d62      	ldr	r2, [r4, #84]	@ 0x54
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
900095b0:	f000 811e 	beq.w	900097f0 <JPEG_Process+0x6f8>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
900095b4:	f002 020c 	and.w	r2, r2, #12
900095b8:	2a08      	cmp	r2, #8
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
900095ba:	6d62      	ldr	r2, [r4, #84]	@ 0x54
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
900095bc:	f47f adb0 	bne.w	90009120 <JPEG_Process+0x28>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
900095c0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
900095c4:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
900095c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
900095c8:	f022 0206 	bic.w	r2, r2, #6
900095cc:	631a      	str	r2, [r3, #48]	@ 0x30
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
900095ce:	6d62      	ldr	r2, [r4, #84]	@ 0x54
900095d0:	e5a6      	b.n	90009120 <JPEG_Process+0x28>
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
900095d2:	6a62      	ldr	r2, [r4, #36]	@ 0x24
900095d4:	4296      	cmp	r6, r2
900095d6:	f67f adaf 	bls.w	90009138 <JPEG_Process+0x40>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
900095da:	6a60      	ldr	r0, [r4, #36]	@ 0x24
900095dc:	1a30      	subs	r0, r6, r0
    for (index = 0; index < nb_words; index++)
900095de:	0880      	lsrs	r0, r0, #2
900095e0:	d020      	beq.n	90009624 <JPEG_Process+0x52c>
900095e2:	4629      	mov	r1, r5
900095e4:	e000      	b.n	900095e8 <JPEG_Process+0x4f0>
      dataword = hjpeg->Instance->DOR;
900095e6:	6823      	ldr	r3, [r4, #0]
900095e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    for (index = 0; index < nb_words; index++)
900095ea:	3101      	adds	r1, #1
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
900095ec:	6a62      	ldr	r2, [r4, #36]	@ 0x24
900095ee:	69e6      	ldr	r6, [r4, #28]
    for (index = 0; index < nb_words; index++)
900095f0:	4288      	cmp	r0, r1
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
900095f2:	54b3      	strb	r3, [r6, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
900095f4:	6a66      	ldr	r6, [r4, #36]	@ 0x24
900095f6:	69e2      	ldr	r2, [r4, #28]
900095f8:	4432      	add	r2, r6
900095fa:	ea4f 2613 	mov.w	r6, r3, lsr #8
900095fe:	7056      	strb	r6, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90009600:	6a66      	ldr	r6, [r4, #36]	@ 0x24
90009602:	69e2      	ldr	r2, [r4, #28]
90009604:	4432      	add	r2, r6
90009606:	ea4f 4613 	mov.w	r6, r3, lsr #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
9000960a:	ea4f 6313 	mov.w	r3, r3, lsr #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
9000960e:	7096      	strb	r6, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90009610:	6a66      	ldr	r6, [r4, #36]	@ 0x24
90009612:	69e2      	ldr	r2, [r4, #28]
90009614:	4432      	add	r2, r6
90009616:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
90009618:	6a63      	ldr	r3, [r4, #36]	@ 0x24
9000961a:	f103 0304 	add.w	r3, r3, #4
9000961e:	6263      	str	r3, [r4, #36]	@ 0x24
    for (index = 0; index < nb_words; index++)
90009620:	d1e1      	bne.n	900095e6 <JPEG_Process+0x4ee>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
90009622:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
90009624:	6a63      	ldr	r3, [r4, #36]	@ 0x24
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
90009626:	69e1      	ldr	r1, [r4, #28]
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
90009628:	429e      	cmp	r6, r3
9000962a:	f000 8161 	beq.w	900098f0 <JPEG_Process+0x7f8>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
9000962e:	f8d4 8024 	ldr.w	r8, [r4, #36]	@ 0x24
      dataword = hjpeg->Instance->DOR;
90009632:	6823      	ldr	r3, [r4, #0]
      for (index = 0; index < nb_bytes; index++)
90009634:	ebb6 0008 	subs.w	r0, r6, r8
      dataword = hjpeg->Instance->DOR;
90009638:	6c5f      	ldr	r7, [r3, #68]	@ 0x44
      for (index = 0; index < nb_bytes; index++)
9000963a:	d00e      	beq.n	9000965a <JPEG_Process+0x562>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
9000963c:	f005 0303 	and.w	r3, r5, #3
90009640:	6a62      	ldr	r2, [r4, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
90009642:	3501      	adds	r5, #1
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
90009644:	00db      	lsls	r3, r3, #3
      for (index = 0; index < nb_bytes; index++)
90009646:	42a8      	cmp	r0, r5
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
90009648:	fa27 f303 	lsr.w	r3, r7, r3
9000964c:	548b      	strb	r3, [r1, r2]
        hjpeg->JpegOutCount++;
9000964e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
90009650:	69e1      	ldr	r1, [r4, #28]
90009652:	f103 0301 	add.w	r3, r3, #1
90009656:	6263      	str	r3, [r4, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
90009658:	d1f0      	bne.n	9000963c <JPEG_Process+0x544>
      nb_bytes = 4UL - nb_bytes;
9000965a:	f108 0804 	add.w	r8, r8, #4
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
9000965e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
90009660:	4620      	mov	r0, r4
      nb_bytes = 4UL - nb_bytes;
90009662:	eba8 0606 	sub.w	r6, r8, r6
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
90009666:	f7f8 ffad 	bl	900025c4 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
9000966a:	2200      	movs	r2, #0
      for (index = nb_bytes; index < 4UL; index++)
9000966c:	2e03      	cmp	r6, #3
      hjpeg->JpegOutCount = 0;
9000966e:	6262      	str	r2, [r4, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
90009670:	f63f ae6b 	bhi.w	9000934a <JPEG_Process+0x252>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
90009674:	ea4f 02c6 	mov.w	r2, r6, lsl #3
90009678:	6a61      	ldr	r1, [r4, #36]	@ 0x24
9000967a:	69e0      	ldr	r0, [r4, #28]
9000967c:	fa27 f502 	lsr.w	r5, r7, r2
90009680:	5445      	strb	r5, [r0, r1]
        hjpeg->JpegOutCount++;
90009682:	6a61      	ldr	r1, [r4, #36]	@ 0x24
90009684:	f101 0101 	add.w	r1, r1, #1
90009688:	6261      	str	r1, [r4, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
9000968a:	f43f ae5e 	beq.w	9000934a <JPEG_Process+0x252>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
9000968e:	f102 0108 	add.w	r1, r2, #8
90009692:	6a60      	ldr	r0, [r4, #36]	@ 0x24
90009694:	69e5      	ldr	r5, [r4, #28]
      for (index = nb_bytes; index < 4UL; index++)
90009696:	2e02      	cmp	r6, #2
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
90009698:	fa27 f101 	lsr.w	r1, r7, r1
9000969c:	5429      	strb	r1, [r5, r0]
        hjpeg->JpegOutCount++;
9000969e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
900096a0:	f101 0101 	add.w	r1, r1, #1
900096a4:	6261      	str	r1, [r4, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
900096a6:	f43f ae50 	beq.w	9000934a <JPEG_Process+0x252>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
900096aa:	3210      	adds	r2, #16
900096ac:	6a61      	ldr	r1, [r4, #36]	@ 0x24
900096ae:	69e0      	ldr	r0, [r4, #28]
900096b0:	fa27 f202 	lsr.w	r2, r7, r2
900096b4:	5442      	strb	r2, [r0, r1]
        hjpeg->JpegOutCount++;
900096b6:	6a62      	ldr	r2, [r4, #36]	@ 0x24
900096b8:	3201      	adds	r2, #1
900096ba:	6262      	str	r2, [r4, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
900096bc:	2e00      	cmp	r6, #0
900096be:	f47f ae44 	bne.w	9000934a <JPEG_Process+0x252>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
900096c2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
900096c4:	0e3f      	lsrs	r7, r7, #24
900096c6:	69e2      	ldr	r2, [r4, #28]
900096c8:	54d7      	strb	r7, [r2, r3]
        hjpeg->JpegOutCount++;
900096ca:	6a63      	ldr	r3, [r4, #36]	@ 0x24
900096cc:	3301      	adds	r3, #1
900096ce:	6263      	str	r3, [r4, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
900096d0:	e63b      	b.n	9000934a <JPEG_Process+0x252>
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
900096d2:	428a      	cmp	r2, r1
900096d4:	d07c      	beq.n	900097d0 <JPEG_Process+0x6d8>
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
900096d6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
900096d8:	e522      	b.n	90009120 <JPEG_Process+0x28>
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
900096da:	6a62      	ldr	r2, [r4, #36]	@ 0x24
900096dc:	4295      	cmp	r5, r2
900096de:	f67f ad2b 	bls.w	90009138 <JPEG_Process+0x40>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
900096e2:	6a60      	ldr	r0, [r4, #36]	@ 0x24
900096e4:	1a28      	subs	r0, r5, r0
    for (index = 0; index < nb_words; index++)
900096e6:	0880      	lsrs	r0, r0, #2
900096e8:	d020      	beq.n	9000972c <JPEG_Process+0x634>
900096ea:	4631      	mov	r1, r6
900096ec:	e000      	b.n	900096f0 <JPEG_Process+0x5f8>
      dataword = hjpeg->Instance->DOR;
900096ee:	6823      	ldr	r3, [r4, #0]
900096f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    for (index = 0; index < nb_words; index++)
900096f2:	3101      	adds	r1, #1
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
900096f4:	6a62      	ldr	r2, [r4, #36]	@ 0x24
900096f6:	69e5      	ldr	r5, [r4, #28]
    for (index = 0; index < nb_words; index++)
900096f8:	4288      	cmp	r0, r1
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
900096fa:	54ab      	strb	r3, [r5, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
900096fc:	6a65      	ldr	r5, [r4, #36]	@ 0x24
900096fe:	69e2      	ldr	r2, [r4, #28]
90009700:	442a      	add	r2, r5
90009702:	ea4f 2513 	mov.w	r5, r3, lsr #8
90009706:	7055      	strb	r5, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90009708:	6a65      	ldr	r5, [r4, #36]	@ 0x24
9000970a:	69e2      	ldr	r2, [r4, #28]
9000970c:	442a      	add	r2, r5
9000970e:	ea4f 4513 	mov.w	r5, r3, lsr #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90009712:	ea4f 6313 	mov.w	r3, r3, lsr #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90009716:	7095      	strb	r5, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90009718:	6a65      	ldr	r5, [r4, #36]	@ 0x24
9000971a:	69e2      	ldr	r2, [r4, #28]
9000971c:	442a      	add	r2, r5
9000971e:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
90009720:	6a63      	ldr	r3, [r4, #36]	@ 0x24
90009722:	f103 0304 	add.w	r3, r3, #4
90009726:	6263      	str	r3, [r4, #36]	@ 0x24
    for (index = 0; index < nb_words; index++)
90009728:	d1e1      	bne.n	900096ee <JPEG_Process+0x5f6>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
9000972a:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
9000972c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
9000972e:	69e1      	ldr	r1, [r4, #28]
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
90009730:	429d      	cmp	r5, r3
90009732:	f000 80dd 	beq.w	900098f0 <JPEG_Process+0x7f8>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
90009736:	f8d4 8024 	ldr.w	r8, [r4, #36]	@ 0x24
      dataword = hjpeg->Instance->DOR;
9000973a:	6823      	ldr	r3, [r4, #0]
      for (index = 0; index < nb_bytes; index++)
9000973c:	ebb5 0008 	subs.w	r0, r5, r8
      dataword = hjpeg->Instance->DOR;
90009740:	6c5f      	ldr	r7, [r3, #68]	@ 0x44
      for (index = 0; index < nb_bytes; index++)
90009742:	d00e      	beq.n	90009762 <JPEG_Process+0x66a>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
90009744:	f006 0303 	and.w	r3, r6, #3
90009748:	6a62      	ldr	r2, [r4, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
9000974a:	3601      	adds	r6, #1
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
9000974c:	00db      	lsls	r3, r3, #3
      for (index = 0; index < nb_bytes; index++)
9000974e:	42b0      	cmp	r0, r6
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
90009750:	fa27 f303 	lsr.w	r3, r7, r3
90009754:	548b      	strb	r3, [r1, r2]
        hjpeg->JpegOutCount++;
90009756:	6a63      	ldr	r3, [r4, #36]	@ 0x24
90009758:	69e1      	ldr	r1, [r4, #28]
9000975a:	f103 0301 	add.w	r3, r3, #1
9000975e:	6263      	str	r3, [r4, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
90009760:	d1f0      	bne.n	90009744 <JPEG_Process+0x64c>
      nb_bytes = 4UL - nb_bytes;
90009762:	f108 0804 	add.w	r8, r8, #4
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
90009766:	6a62      	ldr	r2, [r4, #36]	@ 0x24
90009768:	4620      	mov	r0, r4
9000976a:	f7f8 ff2b 	bl	900025c4 <HAL_JPEG_DataReadyCallback>
      nb_bytes = 4UL - nb_bytes;
9000976e:	eba8 0305 	sub.w	r3, r8, r5
      hjpeg->JpegOutCount = 0;
90009772:	2200      	movs	r2, #0
      for (index = nb_bytes; index < 4UL; index++)
90009774:	2b03      	cmp	r3, #3
      hjpeg->JpegOutCount = 0;
90009776:	6262      	str	r2, [r4, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
90009778:	f63f ade7 	bhi.w	9000934a <JPEG_Process+0x252>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
9000977c:	ea4f 02c3 	mov.w	r2, r3, lsl #3
90009780:	6a61      	ldr	r1, [r4, #36]	@ 0x24
90009782:	69e0      	ldr	r0, [r4, #28]
90009784:	fa27 f502 	lsr.w	r5, r7, r2
90009788:	5445      	strb	r5, [r0, r1]
        hjpeg->JpegOutCount++;
9000978a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
9000978c:	f101 0101 	add.w	r1, r1, #1
90009790:	6261      	str	r1, [r4, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
90009792:	f43f adda 	beq.w	9000934a <JPEG_Process+0x252>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
90009796:	f102 0108 	add.w	r1, r2, #8
9000979a:	6a60      	ldr	r0, [r4, #36]	@ 0x24
9000979c:	69e5      	ldr	r5, [r4, #28]
      for (index = nb_bytes; index < 4UL; index++)
9000979e:	2b02      	cmp	r3, #2
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
900097a0:	fa27 f101 	lsr.w	r1, r7, r1
900097a4:	5429      	strb	r1, [r5, r0]
        hjpeg->JpegOutCount++;
900097a6:	6a61      	ldr	r1, [r4, #36]	@ 0x24
900097a8:	f101 0101 	add.w	r1, r1, #1
900097ac:	6261      	str	r1, [r4, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
900097ae:	f43f adcc 	beq.w	9000934a <JPEG_Process+0x252>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
900097b2:	3210      	adds	r2, #16
900097b4:	6a61      	ldr	r1, [r4, #36]	@ 0x24
900097b6:	69e0      	ldr	r0, [r4, #28]
900097b8:	fa27 f202 	lsr.w	r2, r7, r2
900097bc:	5442      	strb	r2, [r0, r1]
        hjpeg->JpegOutCount++;
900097be:	6a62      	ldr	r2, [r4, #36]	@ 0x24
900097c0:	3201      	adds	r2, #1
900097c2:	6262      	str	r2, [r4, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
900097c4:	2b00      	cmp	r3, #0
900097c6:	f43f af7c 	beq.w	900096c2 <JPEG_Process+0x5ca>
900097ca:	e5be      	b.n	9000934a <JPEG_Process+0x252>
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
900097cc:	1a52      	subs	r2, r2, r1
900097ce:	e68b      	b.n	900094e8 <JPEG_Process+0x3f0>
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
900097d0:	6a21      	ldr	r1, [r4, #32]
900097d2:	4620      	mov	r0, r4
900097d4:	f7f8 fed6 	bl	90002584 <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength > 4UL)
900097d8:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
900097da:	2a04      	cmp	r2, #4
900097dc:	d902      	bls.n	900097e4 <JPEG_Process+0x6ec>
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
900097de:	f022 0203 	bic.w	r2, r2, #3
900097e2:	62a2      	str	r2, [r4, #40]	@ 0x28
    hjpeg->JpegInCount = 0;
900097e4:	2100      	movs	r1, #0
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
900097e6:	6823      	ldr	r3, [r4, #0]
    hjpeg->JpegInCount = 0;
900097e8:	6221      	str	r1, [r4, #32]
    nb_bytes = hjpeg->InDataLength;
900097ea:	e5ba      	b.n	90009362 <JPEG_Process+0x26a>
        input_count = hjpeg->JpegInCount;
900097ec:	6a22      	ldr	r2, [r4, #32]
900097ee:	e653      	b.n	90009498 <JPEG_Process+0x3a0>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
900097f0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
900097f4:	6562      	str	r2, [r4, #84]	@ 0x54
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
900097f6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
900097f8:	e492      	b.n	90009120 <JPEG_Process+0x28>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
900097fa:	6a62      	ldr	r2, [r4, #36]	@ 0x24
900097fc:	4620      	mov	r0, r4
900097fe:	69e1      	ldr	r1, [r4, #28]
90009800:	f7f8 fee0 	bl	900025c4 <HAL_JPEG_DataReadyCallback>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
90009804:	6823      	ldr	r3, [r4, #0]
      hjpeg->JpegOutCount = 0;
90009806:	6265      	str	r5, [r4, #36]	@ 0x24
90009808:	e496      	b.n	90009138 <JPEG_Process+0x40>
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000980a:	69a2      	ldr	r2, [r4, #24]
        input_count = hjpeg->JpegInCount;
9000980c:	6a21      	ldr	r1, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000980e:	1850      	adds	r0, r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
90009810:	5c55      	ldrb	r5, [r2, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009812:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009814:	7846      	ldrb	r6, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009816:	0409      	lsls	r1, r1, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
90009818:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000981a:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
9000981e:	4329      	orrs	r1, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009820:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
90009824:	6419      	str	r1, [r3, #64]	@ 0x40
        hjpeg->JpegInCount += 4UL;
90009826:	6a21      	ldr	r1, [r4, #32]
90009828:	3104      	adds	r1, #4
9000982a:	6221      	str	r1, [r4, #32]
        input_count = hjpeg->JpegInCount;
9000982c:	6a21      	ldr	r1, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000982e:	1850      	adds	r0, r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
90009830:	5c55      	ldrb	r5, [r2, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009832:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009834:	7846      	ldrb	r6, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009836:	0409      	lsls	r1, r1, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
90009838:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000983a:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
9000983e:	4329      	orrs	r1, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009840:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
90009844:	6419      	str	r1, [r3, #64]	@ 0x40
        hjpeg->JpegInCount += 4UL;
90009846:	6a21      	ldr	r1, [r4, #32]
90009848:	3104      	adds	r1, #4
9000984a:	6221      	str	r1, [r4, #32]
        input_count = hjpeg->JpegInCount;
9000984c:	6a21      	ldr	r1, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000984e:	1850      	adds	r0, r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
90009850:	5c55      	ldrb	r5, [r2, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009852:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009854:	7846      	ldrb	r6, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009856:	0409      	lsls	r1, r1, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
90009858:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000985a:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
9000985e:	4329      	orrs	r1, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009860:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
90009864:	6419      	str	r1, [r3, #64]	@ 0x40
        hjpeg->JpegInCount += 4UL;
90009866:	6a21      	ldr	r1, [r4, #32]
90009868:	3104      	adds	r1, #4
9000986a:	6221      	str	r1, [r4, #32]
        input_count = hjpeg->JpegInCount;
9000986c:	6a21      	ldr	r1, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000986e:	1850      	adds	r0, r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
90009870:	5c55      	ldrb	r5, [r2, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009872:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009874:	7846      	ldrb	r6, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009876:	0409      	lsls	r1, r1, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
90009878:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000987a:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
9000987e:	4329      	orrs	r1, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009880:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
90009884:	6419      	str	r1, [r3, #64]	@ 0x40
        hjpeg->JpegInCount += 4UL;
90009886:	6a21      	ldr	r1, [r4, #32]
90009888:	3104      	adds	r1, #4
9000988a:	6221      	str	r1, [r4, #32]
        input_count = hjpeg->JpegInCount;
9000988c:	6a21      	ldr	r1, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000988e:	1850      	adds	r0, r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
90009890:	5c55      	ldrb	r5, [r2, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009892:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009894:	7846      	ldrb	r6, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009896:	0409      	lsls	r1, r1, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
90009898:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000989a:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
9000989e:	4329      	orrs	r1, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
900098a0:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
900098a4:	6419      	str	r1, [r3, #64]	@ 0x40
        hjpeg->JpegInCount += 4UL;
900098a6:	6a21      	ldr	r1, [r4, #32]
900098a8:	3104      	adds	r1, #4
900098aa:	6221      	str	r1, [r4, #32]
        input_count = hjpeg->JpegInCount;
900098ac:	6a21      	ldr	r1, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
900098ae:	1850      	adds	r0, r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
900098b0:	5c55      	ldrb	r5, [r2, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
900098b2:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
900098b4:	7846      	ldrb	r6, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
900098b6:	0409      	lsls	r1, r1, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
900098b8:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
900098ba:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
900098be:	4329      	orrs	r1, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
900098c0:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
900098c4:	6419      	str	r1, [r3, #64]	@ 0x40
        hjpeg->JpegInCount += 4UL;
900098c6:	6a21      	ldr	r1, [r4, #32]
900098c8:	3104      	adds	r1, #4
900098ca:	6221      	str	r1, [r4, #32]
        input_count = hjpeg->JpegInCount;
900098cc:	6a21      	ldr	r1, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
900098ce:	1850      	adds	r0, r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
900098d0:	5c55      	ldrb	r5, [r2, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
900098d2:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
900098d4:	7846      	ldrb	r6, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
900098d6:	0409      	lsls	r1, r1, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
900098d8:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
900098da:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
900098de:	4329      	orrs	r1, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
900098e0:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
900098e4:	6419      	str	r1, [r3, #64]	@ 0x40
        hjpeg->JpegInCount += 4UL;
900098e6:	6a21      	ldr	r1, [r4, #32]
900098e8:	3104      	adds	r1, #4
900098ea:	6221      	str	r1, [r4, #32]
        input_count = hjpeg->JpegInCount;
900098ec:	6a20      	ldr	r0, [r4, #32]
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
900098ee:	e5d3      	b.n	90009498 <JPEG_Process+0x3a0>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
900098f0:	6a62      	ldr	r2, [r4, #36]	@ 0x24
900098f2:	4620      	mov	r0, r4
900098f4:	f7f8 fe66 	bl	900025c4 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
900098f8:	2200      	movs	r2, #0
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
900098fa:	6823      	ldr	r3, [r4, #0]
      hjpeg->JpegOutCount = 0;
900098fc:	6262      	str	r2, [r4, #36]	@ 0x24
900098fe:	e41b      	b.n	90009138 <JPEG_Process+0x40>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
90009900:	6a21      	ldr	r1, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
90009902:	2a01      	cmp	r2, #1
          hjpeg->JpegInCount++;
90009904:	6a20      	ldr	r0, [r4, #32]
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
90009906:	69a5      	ldr	r5, [r4, #24]
          hjpeg->JpegInCount++;
90009908:	f100 0001 	add.w	r0, r0, #1
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
9000990c:	5c69      	ldrb	r1, [r5, r1]
          hjpeg->JpegInCount++;
9000990e:	6220      	str	r0, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
90009910:	f43f ae0e 	beq.w	90009530 <JPEG_Process+0x438>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
90009914:	6a20      	ldr	r0, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
90009916:	2a03      	cmp	r2, #3
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
90009918:	5c28      	ldrb	r0, [r5, r0]
9000991a:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
          hjpeg->JpegInCount++;
9000991e:	6a20      	ldr	r0, [r4, #32]
90009920:	f100 0001 	add.w	r0, r0, #1
90009924:	6220      	str	r0, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
90009926:	f47f ae03 	bne.w	90009530 <JPEG_Process+0x438>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
9000992a:	6a22      	ldr	r2, [r4, #32]
9000992c:	5ca8      	ldrb	r0, [r5, r2]
          hjpeg->JpegInCount++;
9000992e:	6a22      	ldr	r2, [r4, #32]
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
90009930:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
          hjpeg->JpegInCount++;
90009934:	3201      	adds	r2, #1
90009936:	6222      	str	r2, [r4, #32]
        hjpeg->Instance->DIR = dataword;
90009938:	e5fa      	b.n	90009530 <JPEG_Process+0x438>
9000993a:	bf00      	nop

9000993c <HAL_JPEG_IRQHandler>:
{
9000993c:	b538      	push	{r3, r4, r5, lr}
  switch (hjpeg->State)
9000993e:	f890 304d 	ldrb.w	r3, [r0, #77]	@ 0x4d
90009942:	3b03      	subs	r3, #3
90009944:	2b01      	cmp	r3, #1
90009946:	d900      	bls.n	9000994a <HAL_JPEG_IRQHandler+0xe>
}
90009948:	bd38      	pop	{r3, r4, r5, pc}
      if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
9000994a:	6d43      	ldr	r3, [r0, #84]	@ 0x54
9000994c:	4604      	mov	r4, r0
9000994e:	f003 030c 	and.w	r3, r3, #12
90009952:	2b08      	cmp	r3, #8
90009954:	d050      	beq.n	900099f8 <HAL_JPEG_IRQHandler+0xbc>
      else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
90009956:	6d43      	ldr	r3, [r0, #84]	@ 0x54
90009958:	f003 030c 	and.w	r3, r3, #12
9000995c:	2b0c      	cmp	r3, #12
9000995e:	d1f3      	bne.n	90009948 <HAL_JPEG_IRQHandler+0xc>
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
90009960:	6d42      	ldr	r2, [r0, #84]	@ 0x54
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
90009962:	6803      	ldr	r3, [r0, #0]
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
90009964:	f002 0203 	and.w	r2, r2, #3
90009968:	2a02      	cmp	r2, #2
9000996a:	d049      	beq.n	90009a00 <HAL_JPEG_IRQHandler+0xc4>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) != 0UL)
9000996c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
9000996e:	0692      	lsls	r2, r2, #26
90009970:	d5ea      	bpl.n	90009948 <HAL_JPEG_IRQHandler+0xc>
    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
90009972:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
90009974:	6b20      	ldr	r0, [r4, #48]	@ 0x30
    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
90009976:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
9000997a:	6562      	str	r2, [r4, #84]	@ 0x54
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
9000997c:	681a      	ldr	r2, [r3, #0]
9000997e:	f022 0201 	bic.w	r2, r2, #1
90009982:	601a      	str	r2, [r3, #0]
    __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
90009984:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
90009986:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
9000998a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
9000998c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
9000998e:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
90009992:	639a      	str	r2, [r3, #56]	@ 0x38
    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
90009994:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
90009998:	2b02      	cmp	r3, #2
9000999a:	d054      	beq.n	90009a46 <HAL_JPEG_IRQHandler+0x10a>
    if (hjpeg->hdmaout->State == HAL_MDMA_STATE_BUSY)
9000999c:	6b60      	ldr	r0, [r4, #52]	@ 0x34
9000999e:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
900099a2:	2b02      	cmp	r3, #2
900099a4:	d043      	beq.n	90009a2e <HAL_JPEG_IRQHandler+0xf2>
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
900099a6:	6803      	ldr	r3, [r0, #0]
900099a8:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
900099aa:	695b      	ldr	r3, [r3, #20]
900099ac:	f3c3 0310 	ubfx	r3, r3, #0, #17
900099b0:	1ad3      	subs	r3, r2, r3
900099b2:	6263      	str	r3, [r4, #36]	@ 0x24
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
900099b4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
900099b6:	429a      	cmp	r2, r3
900099b8:	d048      	beq.n	90009a4c <HAL_JPEG_IRQHandler+0x110>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
900099ba:	6822      	ldr	r2, [r4, #0]
900099bc:	6b55      	ldr	r5, [r2, #52]	@ 0x34
900099be:	f015 0510 	ands.w	r5, r5, #16
900099c2:	d138      	bne.n	90009a36 <HAL_JPEG_IRQHandler+0xfa>
    if (hjpeg->JpegOutCount > 0UL)
900099c4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
900099c6:	2b00      	cmp	r3, #0
900099c8:	d14b      	bne.n	90009a62 <HAL_JPEG_IRQHandler+0x126>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
900099ca:	6813      	ldr	r3, [r2, #0]
    __HAL_UNLOCK(hjpeg);
900099cc:	2000      	movs	r0, #0
    hjpeg->State = HAL_JPEG_STATE_READY;
900099ce:	2101      	movs	r1, #1
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
900099d0:	f023 0301 	bic.w	r3, r3, #1
900099d4:	6013      	str	r3, [r2, #0]
    tmpContext = hjpeg->Context;
900099d6:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
900099d8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
900099da:	f003 0303 	and.w	r3, r3, #3
    __HAL_UNLOCK(hjpeg);
900099de:	f884 004c 	strb.w	r0, [r4, #76]	@ 0x4c
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
900099e2:	f402 4282 	and.w	r2, r2, #16640	@ 0x4100
      HAL_JPEG_DecodeCpltCallback(hjpeg);
900099e6:	4620      	mov	r0, r4
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
900099e8:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
900099ea:	6562      	str	r2, [r4, #84]	@ 0x54
    hjpeg->State = HAL_JPEG_STATE_READY;
900099ec:	f884 104d 	strb.w	r1, [r4, #77]	@ 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
900099f0:	d034      	beq.n	90009a5c <HAL_JPEG_IRQHandler+0x120>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
900099f2:	f7ff f9bb 	bl	90008d6c <HAL_JPEG_EncodeCpltCallback>
}
900099f6:	bd38      	pop	{r3, r4, r5, pc}
900099f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        (void) JPEG_Process(hjpeg);
900099fc:	f7ff bb7c 	b.w	900090f8 <JPEG_Process>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
90009a00:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
90009a02:	0651      	lsls	r1, r2, #25
90009a04:	d5b2      	bpl.n	9000996c <HAL_JPEG_IRQHandler+0x30>
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
90009a06:	1d05      	adds	r5, r0, #4
  if ((hjpeg == NULL) || (pInfo == NULL))
90009a08:	4629      	mov	r1, r5
90009a0a:	f7fe ff2f 	bl	9000886c <HAL_JPEG_GetInfo.part.0>
      hjpeg->Conf.ImageQuality = 0;
90009a0e:	2300      	movs	r3, #0
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
90009a10:	4629      	mov	r1, r5
90009a12:	4620      	mov	r0, r4
      hjpeg->Conf.ImageQuality = 0;
90009a14:	6163      	str	r3, [r4, #20]
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
90009a16:	f7f8 fd63 	bl	900024e0 <HAL_JPEG_InfoReadyCallback>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
90009a1a:	6823      	ldr	r3, [r4, #0]
90009a1c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
90009a1e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
90009a22:	631a      	str	r2, [r3, #48]	@ 0x30
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
90009a24:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
90009a26:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
90009a2a:	639a      	str	r2, [r3, #56]	@ 0x38
90009a2c:	e79e      	b.n	9000996c <HAL_JPEG_IRQHandler+0x30>
}
90009a2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmaout);
90009a32:	f000 bb25 	b.w	9000a080 <HAL_MDMA_Abort_IT>
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
90009a36:	6d63      	ldr	r3, [r4, #84]	@ 0x54
90009a38:	049b      	lsls	r3, r3, #18
90009a3a:	d485      	bmi.n	90009948 <HAL_JPEG_IRQHandler+0xc>
    JPEG_DMA_PollResidualData(hjpeg);
90009a3c:	4620      	mov	r0, r4
}
90009a3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    JPEG_DMA_PollResidualData(hjpeg);
90009a42:	f7ff b9ff 	b.w	90008e44 <JPEG_DMA_PollResidualData>
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmain);
90009a46:	f000 fb1b 	bl	9000a080 <HAL_MDMA_Abort_IT>
90009a4a:	e7a7      	b.n	9000999c <HAL_JPEG_IRQHandler+0x60>
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
90009a4c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
90009a4e:	4620      	mov	r0, r4
90009a50:	69e1      	ldr	r1, [r4, #28]
90009a52:	f7f8 fdb7 	bl	900025c4 <HAL_JPEG_DataReadyCallback>
    hjpeg->JpegOutCount = 0;
90009a56:	2300      	movs	r3, #0
90009a58:	6263      	str	r3, [r4, #36]	@ 0x24
90009a5a:	e7ae      	b.n	900099ba <HAL_JPEG_IRQHandler+0x7e>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
90009a5c:	f7f8 fdf6 	bl	9000264c <HAL_JPEG_DecodeCpltCallback>
}
90009a60:	bd38      	pop	{r3, r4, r5, pc}
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
90009a62:	6a62      	ldr	r2, [r4, #36]	@ 0x24
90009a64:	4620      	mov	r0, r4
90009a66:	69e1      	ldr	r1, [r4, #28]
90009a68:	f7f8 fdac 	bl	900025c4 <HAL_JPEG_DataReadyCallback>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
90009a6c:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount = 0;
90009a6e:	6265      	str	r5, [r4, #36]	@ 0x24
90009a70:	e7ab      	b.n	900099ca <HAL_JPEG_IRQHandler+0x8e>
90009a72:	bf00      	nop

90009a74 <HAL_LTDC_Init>:
{
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
90009a74:	2800      	cmp	r0, #0
90009a76:	d067      	beq.n	90009b48 <HAL_LTDC_Init+0xd4>
{
90009a78:	b538      	push	{r3, r4, r5, lr}
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
90009a7a:	f890 30a1 	ldrb.w	r3, [r0, #161]	@ 0xa1
90009a7e:	4604      	mov	r4, r0
90009a80:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
90009a84:	2b00      	cmp	r3, #0
90009a86:	d05a      	beq.n	90009b3e <HAL_LTDC_Init+0xca>
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
90009a88:	68a0      	ldr	r0, [r4, #8]
  hltdc->State = HAL_LTDC_STATE_BUSY;
90009a8a:	2102      	movs	r1, #2
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
90009a8c:	e9d4 3200 	ldrd	r3, r2, [r4]
  hltdc->State = HAL_LTDC_STATE_BUSY;
90009a90:	f884 10a1 	strb.w	r1, [r4, #161]	@ 0xa1
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
90009a94:	4302      	orrs	r2, r0
90009a96:	68e1      	ldr	r1, [r4, #12]
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
90009a98:	6998      	ldr	r0, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
90009a9a:	430a      	orrs	r2, r1
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
90009a9c:	6921      	ldr	r1, [r4, #16]
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
90009a9e:	f020 4070 	bic.w	r0, r0, #4026531840	@ 0xf0000000
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
90009aa2:	430a      	orrs	r2, r1

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
90009aa4:	4929      	ldr	r1, [pc, #164]	@ (90009b4c <HAL_LTDC_Init+0xd8>)
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
90009aa6:	6198      	str	r0, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
90009aa8:	6998      	ldr	r0, [r3, #24]
90009aaa:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16U);
90009aac:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
90009aae:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
90009ab0:	689a      	ldr	r2, [r3, #8]
90009ab2:	400a      	ands	r2, r1
90009ab4:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
90009ab6:	689a      	ldr	r2, [r3, #8]
90009ab8:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
90009abc:	69a0      	ldr	r0, [r4, #24]
90009abe:	4302      	orrs	r2, r0

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
90009ac0:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
90009ac2:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
90009ac4:	68da      	ldr	r2, [r3, #12]
90009ac6:	400a      	ands	r2, r1
90009ac8:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
90009aca:	68da      	ldr	r2, [r3, #12]
90009acc:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
90009ad0:	6a20      	ldr	r0, [r4, #32]
90009ad2:	4302      	orrs	r2, r0

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
90009ad4:	6a60      	ldr	r0, [r4, #36]	@ 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
90009ad6:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
90009ad8:	691a      	ldr	r2, [r3, #16]
90009ada:	400a      	ands	r2, r1
90009adc:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
90009ade:	691a      	ldr	r2, [r3, #16]
90009ae0:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
90009ae4:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
90009ae6:	4302      	orrs	r2, r0

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
  tmp = (hltdc->Init.TotalWidth << 16U);
90009ae8:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
90009aea:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
90009aec:	695a      	ldr	r2, [r3, #20]
90009aee:	400a      	ands	r2, r1
90009af0:	615a      	str	r2, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
90009af2:	695a      	ldr	r2, [r3, #20]
90009af4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
90009af6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
90009afa:	430a      	orrs	r2, r1
90009afc:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
90009afe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
90009b00:	f894 0035 	ldrb.w	r0, [r4, #53]	@ 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
90009b04:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
90009b08:	f894 1036 	ldrb.w	r1, [r4, #54]	@ 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
90009b0c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
90009b0e:	6add      	ldr	r5, [r3, #44]	@ 0x2c
90009b10:	f894 2034 	ldrb.w	r2, [r4, #52]	@ 0x34
90009b14:	432a      	orrs	r2, r5
90009b16:	ea42 2200 	orr.w	r2, r2, r0, lsl #8

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
90009b1a:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
90009b1c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
90009b20:	62da      	str	r2, [r3, #44]	@ 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
90009b22:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
90009b24:	f042 0206 	orr.w	r2, r2, #6
90009b28:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_LTDC_ENABLE(hltdc);
90009b2a:	699a      	ldr	r2, [r3, #24]
90009b2c:	f042 0201 	orr.w	r2, r2, #1
90009b30:	619a      	str	r2, [r3, #24]

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
90009b32:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
90009b34:	f8c4 00a4 	str.w	r0, [r4, #164]	@ 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
90009b38:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1

  return HAL_OK;
}
90009b3c:	bd38      	pop	{r3, r4, r5, pc}
    hltdc->Lock = HAL_UNLOCKED;
90009b3e:	f880 20a0 	strb.w	r2, [r0, #160]	@ 0xa0
    HAL_LTDC_MspInit(hltdc);
90009b42:	f7f7 f909 	bl	90000d58 <HAL_LTDC_MspInit>
90009b46:	e79f      	b.n	90009a88 <HAL_LTDC_Init+0x14>
    return HAL_ERROR;
90009b48:	2001      	movs	r0, #1
}
90009b4a:	4770      	bx	lr
90009b4c:	f000f800 	.word	0xf000f800

90009b50 <HAL_LTDC_ErrorCallback>:
  * @brief  Error LTDC callback.
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
90009b50:	4770      	bx	lr
90009b52:	bf00      	nop

90009b54 <HAL_LTDC_ReloadEventCallback>:
  * @brief  Reload Event callback.
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
90009b54:	4770      	bx	lr
90009b56:	bf00      	nop

90009b58 <HAL_LTDC_IRQHandler>:
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
90009b58:	6803      	ldr	r3, [r0, #0]
{
90009b5a:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
90009b5c:	6b9d      	ldr	r5, [r3, #56]	@ 0x38
{
90009b5e:	4604      	mov	r4, r0
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
90009b60:	6b5e      	ldr	r6, [r3, #52]	@ 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
90009b62:	076a      	lsls	r2, r5, #29
90009b64:	d501      	bpl.n	90009b6a <HAL_LTDC_IRQHandler+0x12>
90009b66:	0771      	lsls	r1, r6, #29
90009b68:	d41d      	bmi.n	90009ba6 <HAL_LTDC_IRQHandler+0x4e>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
90009b6a:	07aa      	lsls	r2, r5, #30
90009b6c:	d501      	bpl.n	90009b72 <HAL_LTDC_IRQHandler+0x1a>
90009b6e:	07b3      	lsls	r3, r6, #30
90009b70:	d42d      	bmi.n	90009bce <HAL_LTDC_IRQHandler+0x76>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
90009b72:	07e8      	lsls	r0, r5, #31
90009b74:	d501      	bpl.n	90009b7a <HAL_LTDC_IRQHandler+0x22>
90009b76:	07f1      	lsls	r1, r6, #31
90009b78:	d440      	bmi.n	90009bfc <HAL_LTDC_IRQHandler+0xa4>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
90009b7a:	072a      	lsls	r2, r5, #28
90009b7c:	d501      	bpl.n	90009b82 <HAL_LTDC_IRQHandler+0x2a>
90009b7e:	0733      	lsls	r3, r6, #28
90009b80:	d400      	bmi.n	90009b84 <HAL_LTDC_IRQHandler+0x2c>
}
90009b82:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
90009b84:	6823      	ldr	r3, [r4, #0]
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
90009b86:	2008      	movs	r0, #8
    hltdc->State = HAL_LTDC_STATE_READY;
90009b88:	2501      	movs	r5, #1
    __HAL_UNLOCK(hltdc);
90009b8a:	2100      	movs	r1, #0
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
90009b8c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
90009b8e:	f022 0208 	bic.w	r2, r2, #8
90009b92:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
90009b94:	63d8      	str	r0, [r3, #60]	@ 0x3c
    HAL_LTDC_ReloadEventCallback(hltdc);
90009b96:	4620      	mov	r0, r4
    hltdc->State = HAL_LTDC_STATE_READY;
90009b98:	f884 50a1 	strb.w	r5, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
90009b9c:	f884 10a0 	strb.w	r1, [r4, #160]	@ 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
90009ba0:	f7ff ffd8 	bl	90009b54 <HAL_LTDC_ReloadEventCallback>
}
90009ba4:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
90009ba6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
90009ba8:	f022 0204 	bic.w	r2, r2, #4
90009bac:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
90009bae:	2204      	movs	r2, #4
90009bb0:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
90009bb2:	f8d0 30a4 	ldr.w	r3, [r0, #164]	@ 0xa4
90009bb6:	f043 0301 	orr.w	r3, r3, #1
90009bba:	f8c0 30a4 	str.w	r3, [r0, #164]	@ 0xa4
    __HAL_UNLOCK(hltdc);
90009bbe:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
90009bc0:	f880 20a1 	strb.w	r2, [r0, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
90009bc4:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
90009bc8:	f7ff ffc2 	bl	90009b50 <HAL_LTDC_ErrorCallback>
90009bcc:	e7cd      	b.n	90009b6a <HAL_LTDC_IRQHandler+0x12>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
90009bce:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ErrorCallback(hltdc);
90009bd0:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
90009bd2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
90009bd4:	f022 0202 	bic.w	r2, r2, #2
90009bd8:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
90009bda:	2202      	movs	r2, #2
90009bdc:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->State = HAL_LTDC_STATE_ERROR;
90009bde:	2204      	movs	r2, #4
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
90009be0:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
90009be4:	f043 0302 	orr.w	r3, r3, #2
90009be8:	f8c4 30a4 	str.w	r3, [r4, #164]	@ 0xa4
    __HAL_UNLOCK(hltdc);
90009bec:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
90009bee:	f884 20a1 	strb.w	r2, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
90009bf2:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
90009bf6:	f7ff ffab 	bl	90009b50 <HAL_LTDC_ErrorCallback>
90009bfa:	e7ba      	b.n	90009b72 <HAL_LTDC_IRQHandler+0x1a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
90009bfc:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_LineEventCallback(hltdc);
90009bfe:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
90009c00:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
90009c02:	f022 0201 	bic.w	r2, r2, #1
90009c06:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
90009c08:	2201      	movs	r2, #1
90009c0a:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_UNLOCK(hltdc);
90009c0c:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_READY;
90009c0e:	f884 20a1 	strb.w	r2, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
90009c12:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
90009c16:	f7f9 fce7 	bl	900035e8 <HAL_LTDC_LineEventCallback>
90009c1a:	e7ae      	b.n	90009b7a <HAL_LTDC_IRQHandler+0x22>

90009c1c <HAL_LTDC_ConfigLayer>:
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
90009c1c:	f890 30a0 	ldrb.w	r3, [r0, #160]	@ 0xa0
90009c20:	2b01      	cmp	r3, #1
90009c22:	f000 80c6 	beq.w	90009db2 <HAL_LTDC_ConfigLayer+0x196>

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
90009c26:	2302      	movs	r3, #2
{
90009c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
90009c2c:	f04f 0e34 	mov.w	lr, #52	@ 0x34
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
90009c30:	f8d0 9000 	ldr.w	r9, [r0]
  hltdc->State = HAL_LTDC_STATE_BUSY;
90009c34:	f880 30a1 	strb.w	r3, [r0, #161]	@ 0xa1
{
90009c38:	b083      	sub	sp, #12
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
90009c3a:	fb0e 0e02 	mla	lr, lr, r2, r0
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
90009c3e:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
90009c40:	f8d9 300c 	ldr.w	r3, [r9, #12]
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
90009c44:	460c      	mov	r4, r1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
90009c46:	f102 0684 	add.w	r6, r2, #132	@ 0x84
90009c4a:	460d      	mov	r5, r1
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
90009c4c:	f3c3 4b0b 	ubfx	fp, r3, #16, #12
90009c50:	4680      	mov	r8, r0
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
90009c52:	eb09 0c06 	add.w	ip, r9, r6
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
90009c56:	f10e 0e38 	add.w	lr, lr, #56	@ 0x38
  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
90009c5a:	f8df a164 	ldr.w	sl, [pc, #356]	@ 90009dc0 <HAL_LTDC_ConfigLayer+0x1a4>
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
90009c5e:	f8dc 3004 	ldr.w	r3, [ip, #4]
90009c62:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
90009c66:	9301      	str	r3, [sp, #4]
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
90009c68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
90009c6a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
90009c6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
90009c70:	686f      	ldr	r7, [r5, #4]
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
90009c72:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
90009c76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
90009c78:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
90009c7c:	6823      	ldr	r3, [r4, #0]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
90009c7e:	44bb      	add	fp, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
90009c80:	f8ce 3000 	str.w	r3, [lr]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
90009c84:	9b01      	ldr	r3, [sp, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
90009c86:	682a      	ldr	r2, [r5, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
90009c88:	f8cc 3004 	str.w	r3, [ip, #4]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
90009c8c:	f8d9 300c 	ldr.w	r3, [r9, #12]
90009c90:	1c51      	adds	r1, r2, #1
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
90009c92:	68e8      	ldr	r0, [r5, #12]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
90009c94:	f3c3 430b 	ubfx	r3, r3, #16, #12
  tmp2 = (pLayerCfg->Alpha0 << 24U);
90009c98:	f8d5 e018 	ldr.w	lr, [r5, #24]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
90009c9c:	440b      	add	r3, r1
90009c9e:	ea43 430b 	orr.w	r3, r3, fp, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
90009ca2:	f8cc 3004 	str.w	r3, [ip, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
90009ca6:	f8d9 100c 	ldr.w	r1, [r9, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
90009caa:	f8dc 3008 	ldr.w	r3, [ip, #8]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
90009cae:	f3c1 010a 	ubfx	r1, r1, #0, #11
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
90009cb2:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
90009cb6:	4401      	add	r1, r0
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
90009cb8:	f8cc 3008 	str.w	r3, [ip, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
90009cbc:	68ab      	ldr	r3, [r5, #8]
90009cbe:	f8d9 000c 	ldr.w	r0, [r9, #12]
90009cc2:	3301      	adds	r3, #1
90009cc4:	f3c0 000a 	ubfx	r0, r0, #0, #11
90009cc8:	4403      	add	r3, r0
90009cca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
90009cce:	6929      	ldr	r1, [r5, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
90009cd0:	f8cc 3008 	str.w	r3, [ip, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
90009cd4:	f8dc 3010 	ldr.w	r3, [ip, #16]
90009cd8:	f023 0307 	bic.w	r3, r3, #7
90009cdc:	f8cc 3010 	str.w	r3, [ip, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
90009ce0:	f8cc 1010 	str.w	r1, [ip, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
90009ce4:	f8dc 3018 	ldr.w	r3, [ip, #24]
90009ce8:	2300      	movs	r3, #0
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
90009cea:	f895 0032 	ldrb.w	r0, [r5, #50]	@ 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
90009cee:	f895 4031 	ldrb.w	r4, [r5, #49]	@ 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
90009cf2:	f8cc 3018 	str.w	r3, [ip, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
90009cf6:	f895 3030 	ldrb.w	r3, [r5, #48]	@ 0x30
90009cfa:	ea43 630e 	orr.w	r3, r3, lr, lsl #24
90009cfe:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
90009d02:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
90009d06:	f8cc 3018 	str.w	r3, [ip, #24]
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
90009d0a:	f8dc 3014 	ldr.w	r3, [ip, #20]
90009d0e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
90009d12:	f8cc 3014 	str.w	r3, [ip, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
90009d16:	696b      	ldr	r3, [r5, #20]
90009d18:	f8cc 3014 	str.w	r3, [ip, #20]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
90009d1c:	f8dc 001c 	ldr.w	r0, [ip, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
90009d20:	69eb      	ldr	r3, [r5, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
90009d22:	ea00 0a0a 	and.w	sl, r0, sl
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
90009d26:	6a28      	ldr	r0, [r5, #32]
90009d28:	4303      	orrs	r3, r0
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
90009d2a:	f8cc a01c 	str.w	sl, [ip, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
90009d2e:	f8cc 301c 	str.w	r3, [ip, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
90009d32:	f8dc 3028 	ldr.w	r3, [ip, #40]	@ 0x28
90009d36:	2300      	movs	r3, #0
90009d38:	f8cc 3028 	str.w	r3, [ip, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
90009d3c:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
90009d3e:	f8cc 3028 	str.w	r3, [ip, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
90009d42:	b3a1      	cbz	r1, 90009dae <HAL_LTDC_ConfigLayer+0x192>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
90009d44:	2901      	cmp	r1, #1
90009d46:	d036      	beq.n	90009db6 <HAL_LTDC_ConfigLayer+0x19a>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
90009d48:	1e8b      	subs	r3, r1, #2
90009d4a:	2907      	cmp	r1, #7
90009d4c:	bf18      	it	ne
90009d4e:	2b02      	cmpne	r3, #2
90009d50:	bf94      	ite	ls
90009d52:	2301      	movls	r3, #1
90009d54:	2300      	movhi	r3, #0
90009d56:	3301      	adds	r3, #1
    tmp = 1U;
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
90009d58:	1abf      	subs	r7, r7, r2
90009d5a:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
90009d5c:	fb03 f707 	mul.w	r7, r3, r7
90009d60:	fb02 f303 	mul.w	r3, r2, r3
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
90009d64:	6aea      	ldr	r2, [r5, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
90009d66:	3707      	adds	r7, #7
90009d68:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
90009d6c:	f8dc 302c 	ldr.w	r3, [ip, #44]	@ 0x2c
90009d70:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
90009d74:	f8cc 302c 	str.w	r3, [ip, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
90009d78:	f8cc 702c 	str.w	r7, [ip, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
90009d7c:	4b0f      	ldr	r3, [pc, #60]	@ (90009dbc <HAL_LTDC_ConfigLayer+0x1a0>)
90009d7e:	f8dc 1030 	ldr.w	r1, [ip, #48]	@ 0x30
90009d82:	400b      	ands	r3, r1
90009d84:	f8cc 3030 	str.w	r3, [ip, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
90009d88:	f8cc 2030 	str.w	r2, [ip, #48]	@ 0x30
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
90009d8c:	2201      	movs	r2, #1

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
90009d8e:	f859 3006 	ldr.w	r3, [r9, r6]
90009d92:	4313      	orrs	r3, r2
90009d94:	f849 3006 	str.w	r3, [r9, r6]
  __HAL_UNLOCK(hltdc);
90009d98:	2300      	movs	r3, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
90009d9a:	f8c9 2024 	str.w	r2, [r9, #36]	@ 0x24
  return HAL_OK;
90009d9e:	4618      	mov	r0, r3
  hltdc->State  = HAL_LTDC_STATE_READY;
90009da0:	f888 20a1 	strb.w	r2, [r8, #161]	@ 0xa1
  __HAL_UNLOCK(hltdc);
90009da4:	f888 30a0 	strb.w	r3, [r8, #160]	@ 0xa0
}
90009da8:	b003      	add	sp, #12
90009daa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    tmp = 4U;
90009dae:	2304      	movs	r3, #4
90009db0:	e7d2      	b.n	90009d58 <HAL_LTDC_ConfigLayer+0x13c>
  __HAL_LOCK(hltdc);
90009db2:	2002      	movs	r0, #2
}
90009db4:	4770      	bx	lr
    tmp = 3U;
90009db6:	2303      	movs	r3, #3
90009db8:	e7ce      	b.n	90009d58 <HAL_LTDC_ConfigLayer+0x13c>
90009dba:	bf00      	nop
90009dbc:	fffff800 	.word	0xfffff800
90009dc0:	fffff8f8 	.word	0xfffff8f8

90009dc4 <HAL_LTDC_ProgramLineEvent>:
  __HAL_LOCK(hltdc);
90009dc4:	f890 20a0 	ldrb.w	r2, [r0, #160]	@ 0xa0
90009dc8:	2a01      	cmp	r2, #1
90009dca:	d019      	beq.n	90009e00 <HAL_LTDC_ProgramLineEvent+0x3c>
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
90009dcc:	6802      	ldr	r2, [r0, #0]
90009dce:	4603      	mov	r3, r0
  hltdc->State = HAL_LTDC_STATE_BUSY;
90009dd0:	2002      	movs	r0, #2
  __HAL_UNLOCK(hltdc);
90009dd2:	f04f 0c00 	mov.w	ip, #0
{
90009dd6:	b410      	push	{r4}
  hltdc->State = HAL_LTDC_STATE_BUSY;
90009dd8:	f883 00a1 	strb.w	r0, [r3, #161]	@ 0xa1
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
90009ddc:	6b50      	ldr	r0, [r2, #52]	@ 0x34
  LTDC->LIPCR = (uint32_t)Line;
90009dde:	4c09      	ldr	r4, [pc, #36]	@ (90009e04 <HAL_LTDC_ProgramLineEvent+0x40>)
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
90009de0:	f020 0001 	bic.w	r0, r0, #1
90009de4:	6350      	str	r0, [r2, #52]	@ 0x34
  hltdc->State = HAL_LTDC_STATE_READY;
90009de6:	2001      	movs	r0, #1
  LTDC->LIPCR = (uint32_t)Line;
90009de8:	6421      	str	r1, [r4, #64]	@ 0x40
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
90009dea:	6b51      	ldr	r1, [r2, #52]	@ 0x34
90009dec:	4301      	orrs	r1, r0
90009dee:	6351      	str	r1, [r2, #52]	@ 0x34
  hltdc->State = HAL_LTDC_STATE_READY;
90009df0:	f883 00a1 	strb.w	r0, [r3, #161]	@ 0xa1
  return HAL_OK;
90009df4:	4660      	mov	r0, ip
  __HAL_UNLOCK(hltdc);
90009df6:	f883 c0a0 	strb.w	ip, [r3, #160]	@ 0xa0
}
90009dfa:	f85d 4b04 	ldr.w	r4, [sp], #4
90009dfe:	4770      	bx	lr
  __HAL_LOCK(hltdc);
90009e00:	2002      	movs	r0, #2
}
90009e02:	4770      	bx	lr
90009e04:	50001000 	.word	0x50001000

90009e08 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
90009e08:	b538      	push	{r3, r4, r5, lr}
90009e0a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
90009e0c:	f7fd f9b0 	bl	90007170 <HAL_GetTick>

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
90009e10:	2c00      	cmp	r4, #0
90009e12:	d058      	beq.n	90009ec6 <HAL_MDMA_Init+0xbe>

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
90009e14:	6823      	ldr	r3, [r4, #0]
  hmdma->State = HAL_MDMA_STATE_BUSY;
90009e16:	2202      	movs	r2, #2
  __HAL_UNLOCK(hmdma);
90009e18:	2100      	movs	r1, #0
90009e1a:	4605      	mov	r5, r0
  hmdma->State = HAL_MDMA_STATE_BUSY;
90009e1c:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(hmdma);
90009e20:	f884 103c 	strb.w	r1, [r4, #60]	@ 0x3c
  __HAL_MDMA_DISABLE(hmdma);
90009e24:	68da      	ldr	r2, [r3, #12]
90009e26:	f022 0201 	bic.w	r2, r2, #1
90009e2a:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
90009e2c:	e005      	b.n	90009e3a <HAL_MDMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
90009e2e:	f7fd f99f 	bl	90007170 <HAL_GetTick>
90009e32:	1b43      	subs	r3, r0, r5
90009e34:	2b05      	cmp	r3, #5
90009e36:	d841      	bhi.n	90009ebc <HAL_MDMA_Init+0xb4>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
90009e38:	6823      	ldr	r3, [r4, #0]
90009e3a:	68da      	ldr	r2, [r3, #12]
90009e3c:	07d2      	lsls	r2, r2, #31
90009e3e:	d4f6      	bmi.n	90009e2e <HAL_MDMA_Init+0x26>
  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
                           hmdma->Init.DestBurst                                   | \
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
90009e40:	e9d4 2505 	ldrd	r2, r5, [r4, #20]
90009e44:	69e0      	ldr	r0, [r4, #28]
90009e46:	432a      	orrs	r2, r5
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
90009e48:	68e1      	ldr	r1, [r4, #12]
90009e4a:	6925      	ldr	r5, [r4, #16]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
90009e4c:	4302      	orrs	r2, r0
90009e4e:	6a20      	ldr	r0, [r4, #32]
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
90009e50:	4329      	orrs	r1, r5
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
90009e52:	4302      	orrs	r2, r0
90009e54:	6a60      	ldr	r0, [r4, #36]	@ 0x24
90009e56:	4302      	orrs	r2, r0
90009e58:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
90009e5a:	4302      	orrs	r2, r0
90009e5c:	6b20      	ldr	r0, [r4, #48]	@ 0x30
90009e5e:	4302      	orrs	r2, r0
90009e60:	68a0      	ldr	r0, [r4, #8]
90009e62:	4302      	orrs	r2, r0
90009e64:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
90009e66:	3801      	subs	r0, #1
90009e68:	ea42 4280 	orr.w	r2, r2, r0, lsl #18
                           hmdma->Init.TransferTriggerMode;

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
90009e6c:	6860      	ldr	r0, [r4, #4]
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
90009e6e:	60d9      	str	r1, [r3, #12]
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
90009e70:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
90009e74:	611a      	str	r2, [r3, #16]
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
90009e76:	d103      	bne.n	90009e80 <HAL_MDMA_Init+0x78>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
90009e78:	691a      	ldr	r2, [r3, #16]
90009e7a:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
90009e7e:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
90009e80:	2100      	movs	r1, #0

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
90009e82:	6b62      	ldr	r2, [r4, #52]	@ 0x34
90009e84:	428a      	cmp	r2, r1
  hmdma->Instance->CBNDTR = 0;
90009e86:	6159      	str	r1, [r3, #20]
  if(hmdma->Init.SourceBlockAddressOffset < 0)
90009e88:	db1f      	blt.n	90009eca <HAL_MDMA_Init+0xc2>
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
90009e8a:	b292      	uxth	r2, r2
90009e8c:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
90009e8e:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
90009e90:	2a00      	cmp	r2, #0
90009e92:	db24      	blt.n	90009ede <HAL_MDMA_Init+0xd6>
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
90009e94:	6a19      	ldr	r1, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
90009e96:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
90009e9a:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
90009e9e:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
90009ea0:	d029      	beq.n	90009ef6 <HAL_MDMA_Init+0xee>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
90009ea2:	b2c0      	uxtb	r0, r0
90009ea4:	6298      	str	r0, [r3, #40]	@ 0x28
  {
    hmdma->Instance->CTBR = 0;
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
90009ea6:	2200      	movs	r2, #0
  hmdma->State = HAL_MDMA_STATE_READY;
90009ea8:	2101      	movs	r1, #1
  hmdma->Instance->CLAR =  0;
90009eaa:	625a      	str	r2, [r3, #36]	@ 0x24
  return HAL_OK;
90009eac:	4610      	mov	r0, r2
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
90009eae:	66a2      	str	r2, [r4, #104]	@ 0x68
  hmdma->LinkedListNodeCounter  = 0;
90009eb0:	6662      	str	r2, [r4, #100]	@ 0x64
  hmdma->State = HAL_MDMA_STATE_READY;
90009eb2:	f884 103d 	strb.w	r1, [r4, #61]	@ 0x3d
  hmdma->FirstLinkedListNodeAddress  = 0;
90009eb6:	e9c4 2217 	strd	r2, r2, [r4, #92]	@ 0x5c
}
90009eba:	bd38      	pop	{r3, r4, r5, pc}
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
90009ebc:	2240      	movs	r2, #64	@ 0x40
      hmdma->State = HAL_MDMA_STATE_ERROR;
90009ebe:	2303      	movs	r3, #3
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
90009ec0:	66a2      	str	r2, [r4, #104]	@ 0x68
      hmdma->State = HAL_MDMA_STATE_ERROR;
90009ec2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    return HAL_ERROR;
90009ec6:	2001      	movs	r0, #1
}
90009ec8:	bd38      	pop	{r3, r4, r5, pc}
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
90009eca:	6959      	ldr	r1, [r3, #20]
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
90009ecc:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
90009ece:	f441 2180 	orr.w	r1, r1, #262144	@ 0x40000
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
90009ed2:	b292      	uxth	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
90009ed4:	6159      	str	r1, [r3, #20]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
90009ed6:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.DestBlockAddressOffset < 0)
90009ed8:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
90009eda:	2a00      	cmp	r2, #0
90009edc:	dada      	bge.n	90009e94 <HAL_MDMA_Init+0x8c>
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
90009ede:	6959      	ldr	r1, [r3, #20]
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
90009ee0:	4252      	negs	r2, r2
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
90009ee2:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
90009ee6:	f441 2100 	orr.w	r1, r1, #524288	@ 0x80000
90009eea:	6159      	str	r1, [r3, #20]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
90009eec:	6a19      	ldr	r1, [r3, #32]
90009eee:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
90009ef2:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
90009ef4:	d1d5      	bne.n	90009ea2 <HAL_MDMA_Init+0x9a>
    hmdma->Instance->CTBR = 0;
90009ef6:	2200      	movs	r2, #0
90009ef8:	629a      	str	r2, [r3, #40]	@ 0x28
90009efa:	e7d4      	b.n	90009ea6 <HAL_MDMA_Init+0x9e>

90009efc <HAL_MDMA_DeInit>:
  if(hmdma == NULL)
90009efc:	b1f8      	cbz	r0, 90009f3e <HAL_MDMA_DeInit+0x42>
  __HAL_MDMA_DISABLE(hmdma);
90009efe:	6802      	ldr	r2, [r0, #0]
90009f00:	4601      	mov	r1, r0
  hmdma->Instance->CCR  = 0;
90009f02:	2300      	movs	r3, #0
  __HAL_MDMA_DISABLE(hmdma);
90009f04:	68d0      	ldr	r0, [r2, #12]
{
90009f06:	b410      	push	{r4}
  __HAL_MDMA_DISABLE(hmdma);
90009f08:	f020 0001 	bic.w	r0, r0, #1
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
90009f0c:	241f      	movs	r4, #31
  __HAL_MDMA_DISABLE(hmdma);
90009f0e:	60d0      	str	r0, [r2, #12]
  return HAL_OK;
90009f10:	4618      	mov	r0, r3
  hmdma->Instance->CCR  = 0;
90009f12:	60d3      	str	r3, [r2, #12]
  hmdma->Instance->CTCR = 0;
90009f14:	6113      	str	r3, [r2, #16]
  hmdma->Instance->CBNDTR = 0;
90009f16:	6153      	str	r3, [r2, #20]
  hmdma->Instance->CSAR = 0;
90009f18:	6193      	str	r3, [r2, #24]
  hmdma->Instance->CDAR = 0;
90009f1a:	61d3      	str	r3, [r2, #28]
  hmdma->Instance->CBRUR = 0;
90009f1c:	6213      	str	r3, [r2, #32]
  hmdma->Instance->CLAR = 0;
90009f1e:	6253      	str	r3, [r2, #36]	@ 0x24
  hmdma->Instance->CTBR = 0;
90009f20:	6293      	str	r3, [r2, #40]	@ 0x28
  hmdma->Instance->CMAR = 0;
90009f22:	6313      	str	r3, [r2, #48]	@ 0x30
  hmdma->Instance->CMDR = 0;
90009f24:	6353      	str	r3, [r2, #52]	@ 0x34
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
90009f26:	6054      	str	r4, [r2, #4]
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
90009f28:	668b      	str	r3, [r1, #104]	@ 0x68
  __HAL_UNLOCK(hmdma);
90009f2a:	f881 303c 	strb.w	r3, [r1, #60]	@ 0x3c
  hmdma->State = HAL_MDMA_STATE_RESET;
90009f2e:	f881 303d 	strb.w	r3, [r1, #61]	@ 0x3d
}
90009f32:	f85d 4b04 	ldr.w	r4, [sp], #4
  hmdma->LinkedListNodeCounter  = 0;
90009f36:	664b      	str	r3, [r1, #100]	@ 0x64
  hmdma->FirstLinkedListNodeAddress  = 0;
90009f38:	e9c1 3317 	strd	r3, r3, [r1, #92]	@ 0x5c
}
90009f3c:	4770      	bx	lr
    return HAL_ERROR;
90009f3e:	2001      	movs	r0, #1
}
90009f40:	4770      	bx	lr
90009f42:	bf00      	nop

90009f44 <HAL_MDMA_ConfigPostRequestMask>:
  if(hmdma == NULL)
90009f44:	b308      	cbz	r0, 90009f8a <HAL_MDMA_ConfigPostRequestMask+0x46>
90009f46:	4603      	mov	r3, r0
  __HAL_LOCK(hmdma);
90009f48:	f890 003c 	ldrb.w	r0, [r0, #60]	@ 0x3c
90009f4c:	2801      	cmp	r0, #1
90009f4e:	d01e      	beq.n	90009f8e <HAL_MDMA_ConfigPostRequestMask+0x4a>
{
90009f50:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hmdma);
90009f52:	f04f 0e01 	mov.w	lr, #1
  if(HAL_MDMA_STATE_READY == hmdma->State)
90009f56:	f893 c03d 	ldrb.w	ip, [r3, #61]	@ 0x3d
90009f5a:	45f4      	cmp	ip, lr
90009f5c:	fa5f f08c 	uxtb.w	r0, ip
  __HAL_LOCK(hmdma);
90009f60:	f883 e03c 	strb.w	lr, [r3, #60]	@ 0x3c
  if(HAL_MDMA_STATE_READY == hmdma->State)
90009f64:	d004      	beq.n	90009f70 <HAL_MDMA_ConfigPostRequestMask+0x2c>
      status =  HAL_ERROR;
90009f66:	4670      	mov	r0, lr
  __HAL_UNLOCK(hmdma);
90009f68:	2200      	movs	r2, #0
90009f6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
90009f6e:	bd30      	pop	{r4, r5, pc}
    if((hmdma->Instance->CTCR & MDMA_CTCR_SWRM) == 0U)
90009f70:	681c      	ldr	r4, [r3, #0]
90009f72:	6925      	ldr	r5, [r4, #16]
90009f74:	006d      	lsls	r5, r5, #1
90009f76:	d4f7      	bmi.n	90009f68 <HAL_MDMA_ConfigPostRequestMask+0x24>
      hmdma->Instance->CMAR = MaskAddress;
90009f78:	6321      	str	r1, [r4, #48]	@ 0x30
      hmdma->Instance->CMDR = MaskData;
90009f7a:	6362      	str	r2, [r4, #52]	@ 0x34
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
90009f7c:	6922      	ldr	r2, [r4, #16]
      if(MaskAddress == 0U)
90009f7e:	b941      	cbnz	r1, 90009f92 <HAL_MDMA_ConfigPostRequestMask+0x4e>
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
90009f80:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
90009f84:	6122      	str	r2, [r4, #16]
  HAL_StatusTypeDef  status = HAL_OK;
90009f86:	2000      	movs	r0, #0
90009f88:	e7ee      	b.n	90009f68 <HAL_MDMA_ConfigPostRequestMask+0x24>
    return HAL_ERROR;
90009f8a:	2001      	movs	r0, #1
90009f8c:	4770      	bx	lr
  __HAL_LOCK(hmdma);
90009f8e:	2002      	movs	r0, #2
}
90009f90:	4770      	bx	lr
        hmdma->Instance->CTCR |=  MDMA_CTCR_BWM;
90009f92:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
90009f96:	6122      	str	r2, [r4, #16]
90009f98:	e7f5      	b.n	90009f86 <HAL_MDMA_ConfigPostRequestMask+0x42>
90009f9a:	bf00      	nop

90009f9c <HAL_MDMA_Start_IT>:
  if(hmdma == NULL)
90009f9c:	2800      	cmp	r0, #0
90009f9e:	d06b      	beq.n	9000a078 <HAL_MDMA_Start_IT+0xdc>
{
90009fa0:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(hmdma);
90009fa2:	f890 403c 	ldrb.w	r4, [r0, #60]	@ 0x3c
90009fa6:	2c01      	cmp	r4, #1
90009fa8:	d009      	beq.n	90009fbe <HAL_MDMA_Start_IT+0x22>
90009faa:	2401      	movs	r4, #1
90009fac:	f880 403c 	strb.w	r4, [r0, #60]	@ 0x3c
  if(HAL_MDMA_STATE_READY == hmdma->State)
90009fb0:	f890 403d 	ldrb.w	r4, [r0, #61]	@ 0x3d
90009fb4:	2c01      	cmp	r4, #1
90009fb6:	d005      	beq.n	90009fc4 <HAL_MDMA_Start_IT+0x28>
    __HAL_UNLOCK(hmdma);
90009fb8:	2300      	movs	r3, #0
90009fba:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  __HAL_LOCK(hmdma);
90009fbe:	2002      	movs	r0, #2
}
90009fc0:	bc70      	pop	{r4, r5, r6}
90009fc2:	4770      	bx	lr
    hmdma->State = HAL_MDMA_STATE_BUSY;
90009fc4:	2402      	movs	r4, #2
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
90009fc6:	9e03      	ldr	r6, [sp, #12]
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
90009fc8:	4d2c      	ldr	r5, [pc, #176]	@ (9000a07c <HAL_MDMA_Start_IT+0xe0>)
90009fca:	f3c3 0310 	ubfx	r3, r3, #0, #17
    hmdma->State = HAL_MDMA_STATE_BUSY;
90009fce:	f880 403d 	strb.w	r4, [r0, #61]	@ 0x3d
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
90009fd2:	2400      	movs	r4, #0
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
90009fd4:	f106 3cff 	add.w	ip, r6, #4294967295
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
90009fd8:	f011 4f5f 	tst.w	r1, #3741319168	@ 0xdf000000
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
90009fdc:	6684      	str	r4, [r0, #104]	@ 0x68
    __HAL_MDMA_DISABLE(hmdma);
90009fde:	6804      	ldr	r4, [r0, #0]
90009fe0:	68e6      	ldr	r6, [r4, #12]
90009fe2:	f026 0601 	bic.w	r6, r6, #1
90009fe6:	60e6      	str	r6, [r4, #12]
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
90009fe8:	6966      	ldr	r6, [r4, #20]
90009fea:	ea05 0506 	and.w	r5, r5, r6
90009fee:	ea45 0503 	orr.w	r5, r5, r3
90009ff2:	6165      	str	r5, [r4, #20]
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
90009ff4:	6963      	ldr	r3, [r4, #20]
90009ff6:	f3c3 0313 	ubfx	r3, r3, #0, #20
90009ffa:	ea43 530c 	orr.w	r3, r3, ip, lsl #20
90009ffe:	6163      	str	r3, [r4, #20]
  __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_CISR_BRTIF | MDMA_CISR_BTIF | MDMA_CISR_TCIF);
9000a000:	f04f 031f 	mov.w	r3, #31
9000a004:	6063      	str	r3, [r4, #4]
  hmdma->Instance->CDAR = DstAddress;
9000a006:	61e2      	str	r2, [r4, #28]
  hmdma->Instance->CSAR = SrcAddress;
9000a008:	61a1      	str	r1, [r4, #24]
    hmdma->Instance->CTBR |= MDMA_CTBR_SBUS;
9000a00a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
9000a00c:	bf0c      	ite	eq
9000a00e:	f443 3380 	orreq.w	r3, r3, #65536	@ 0x10000
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
9000a012:	f423 3380 	bicne.w	r3, r3, #65536	@ 0x10000
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
9000a016:	f012 4f5f 	tst.w	r2, #3741319168	@ 0xdf000000
    if(hmdma->XferBlockCpltCallback != NULL)
9000a01a:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
9000a01c:	62a3      	str	r3, [r4, #40]	@ 0x28
    hmdma->Instance->CTBR |= MDMA_CTBR_DBUS;
9000a01e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
9000a020:	bf0c      	ite	eq
9000a022:	f443 3300 	orreq.w	r3, r3, #131072	@ 0x20000
    hmdma->Instance->CTBR &= (~MDMA_CTBR_DBUS);
9000a026:	f423 3300 	bicne.w	r3, r3, #131072	@ 0x20000
9000a02a:	62a3      	str	r3, [r4, #40]	@ 0x28
  hmdma->Instance->CLAR = (uint32_t)hmdma->FirstLinkedListNodeAddress;
9000a02c:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
9000a02e:	6263      	str	r3, [r4, #36]	@ 0x24
    __HAL_MDMA_ENABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC));
9000a030:	68e3      	ldr	r3, [r4, #12]
9000a032:	f043 0306 	orr.w	r3, r3, #6
9000a036:	60e3      	str	r3, [r4, #12]
    if(hmdma->XferBlockCpltCallback != NULL)
9000a038:	b11a      	cbz	r2, 9000a042 <HAL_MDMA_Start_IT+0xa6>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BT);
9000a03a:	68e3      	ldr	r3, [r4, #12]
9000a03c:	f043 0310 	orr.w	r3, r3, #16
9000a040:	60e3      	str	r3, [r4, #12]
    if(hmdma->XferRepeatBlockCpltCallback != NULL)
9000a042:	6d03      	ldr	r3, [r0, #80]	@ 0x50
9000a044:	b11b      	cbz	r3, 9000a04e <HAL_MDMA_Start_IT+0xb2>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BRT);
9000a046:	68e3      	ldr	r3, [r4, #12]
9000a048:	f043 0308 	orr.w	r3, r3, #8
9000a04c:	60e3      	str	r3, [r4, #12]
    if(hmdma->XferBufferCpltCallback != NULL)
9000a04e:	6c83      	ldr	r3, [r0, #72]	@ 0x48
9000a050:	b11b      	cbz	r3, 9000a05a <HAL_MDMA_Start_IT+0xbe>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BFTC);
9000a052:	68e3      	ldr	r3, [r4, #12]
9000a054:	f043 0320 	orr.w	r3, r3, #32
9000a058:	60e3      	str	r3, [r4, #12]
    __HAL_MDMA_ENABLE(hmdma);
9000a05a:	68e3      	ldr	r3, [r4, #12]
    if(hmdma->Init.Request == MDMA_REQUEST_SW)
9000a05c:	6842      	ldr	r2, [r0, #4]
    __HAL_MDMA_ENABLE(hmdma);
9000a05e:	f043 0301 	orr.w	r3, r3, #1
    if(hmdma->Init.Request == MDMA_REQUEST_SW)
9000a062:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
    __HAL_MDMA_ENABLE(hmdma);
9000a066:	60e3      	str	r3, [r4, #12]
    if(hmdma->Init.Request == MDMA_REQUEST_SW)
9000a068:	d103      	bne.n	9000a072 <HAL_MDMA_Start_IT+0xd6>
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
9000a06a:	68e3      	ldr	r3, [r4, #12]
9000a06c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
9000a070:	60e3      	str	r3, [r4, #12]
  return HAL_OK;
9000a072:	2000      	movs	r0, #0
}
9000a074:	bc70      	pop	{r4, r5, r6}
9000a076:	4770      	bx	lr
    return HAL_ERROR;
9000a078:	2001      	movs	r0, #1
}
9000a07a:	4770      	bx	lr
9000a07c:	fffe0000 	.word	0xfffe0000

9000a080 <HAL_MDMA_Abort_IT>:
  if(hmdma == NULL)
9000a080:	4603      	mov	r3, r0
9000a082:	b128      	cbz	r0, 9000a090 <HAL_MDMA_Abort_IT+0x10>
  if(HAL_MDMA_STATE_BUSY != hmdma->State)
9000a084:	f890 203d 	ldrb.w	r2, [r0, #61]	@ 0x3d
9000a088:	2a02      	cmp	r2, #2
9000a08a:	d003      	beq.n	9000a094 <HAL_MDMA_Abort_IT+0x14>
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
9000a08c:	2280      	movs	r2, #128	@ 0x80
9000a08e:	6682      	str	r2, [r0, #104]	@ 0x68
    return HAL_ERROR;
9000a090:	2001      	movs	r0, #1
9000a092:	4770      	bx	lr
    __HAL_MDMA_DISABLE(hmdma);
9000a094:	6802      	ldr	r2, [r0, #0]
    hmdma->State = HAL_MDMA_STATE_ABORT;
9000a096:	2104      	movs	r1, #4
  return HAL_OK;
9000a098:	2000      	movs	r0, #0
    hmdma->State = HAL_MDMA_STATE_ABORT;
9000a09a:	f883 103d 	strb.w	r1, [r3, #61]	@ 0x3d
    __HAL_MDMA_DISABLE(hmdma);
9000a09e:	68d3      	ldr	r3, [r2, #12]
9000a0a0:	f023 0301 	bic.w	r3, r3, #1
9000a0a4:	60d3      	str	r3, [r2, #12]
}
9000a0a6:	4770      	bx	lr

9000a0a8 <HAL_MDMA_IRQHandler>:
{
9000a0a8:	b530      	push	{r4, r5, lr}
  __IO uint32_t count = 0;
9000a0aa:	2300      	movs	r3, #0
{
9000a0ac:	b083      	sub	sp, #12
  if((MDMA->GISR0 & generalIntFlag) == 0U)
9000a0ae:	f04f 45a4 	mov.w	r5, #1375731712	@ 0x52000000
{
9000a0b2:	4604      	mov	r4, r0
  __IO uint32_t count = 0;
9000a0b4:	9301      	str	r3, [sp, #4]
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
9000a0b6:	2101      	movs	r1, #1
  uint32_t timeout = SystemCoreClock / 9600U;
9000a0b8:	4b57      	ldr	r3, [pc, #348]	@ (9000a218 <HAL_MDMA_IRQHandler+0x170>)
  if((MDMA->GISR0 & generalIntFlag) == 0U)
9000a0ba:	6828      	ldr	r0, [r5, #0]
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
9000a0bc:	4a57      	ldr	r2, [pc, #348]	@ (9000a21c <HAL_MDMA_IRQHandler+0x174>)
  uint32_t timeout = SystemCoreClock / 9600U;
9000a0be:	681d      	ldr	r5, [r3, #0]
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
9000a0c0:	6823      	ldr	r3, [r4, #0]
9000a0c2:	441a      	add	r2, r3
9000a0c4:	f3c2 1284 	ubfx	r2, r2, #6, #5
9000a0c8:	fa01 f202 	lsl.w	r2, r1, r2
  if((MDMA->GISR0 & generalIntFlag) == 0U)
9000a0cc:	4202      	tst	r2, r0
9000a0ce:	f000 80a0 	beq.w	9000a212 <HAL_MDMA_IRQHandler+0x16a>
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
9000a0d2:	681a      	ldr	r2, [r3, #0]
9000a0d4:	07d1      	lsls	r1, r2, #31
9000a0d6:	d529      	bpl.n	9000a12c <HAL_MDMA_IRQHandler+0x84>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
9000a0d8:	68da      	ldr	r2, [r3, #12]
9000a0da:	0792      	lsls	r2, r2, #30
9000a0dc:	d526      	bpl.n	9000a12c <HAL_MDMA_IRQHandler+0x84>
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
9000a0de:	68da      	ldr	r2, [r3, #12]
9000a0e0:	f022 0202 	bic.w	r2, r2, #2
9000a0e4:	60da      	str	r2, [r3, #12]
      errorFlag = hmdma->Instance->CESR;
9000a0e6:	689a      	ldr	r2, [r3, #8]
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
9000a0e8:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_TED) == 0U)
9000a0ea:	0610      	lsls	r0, r2, #24
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
9000a0ec:	bf54      	ite	pl
9000a0ee:	f041 0101 	orrpl.w	r1, r1, #1
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
9000a0f2:	f041 0102 	orrmi.w	r1, r1, #2
9000a0f6:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_TEMD) != 0U)
9000a0f8:	0591      	lsls	r1, r2, #22
9000a0fa:	d503      	bpl.n	9000a104 <HAL_MDMA_IRQHandler+0x5c>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
9000a0fc:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
9000a0fe:	f041 0104 	orr.w	r1, r1, #4
9000a102:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_TELD) != 0U)
9000a104:	05d0      	lsls	r0, r2, #23
9000a106:	d503      	bpl.n	9000a110 <HAL_MDMA_IRQHandler+0x68>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
9000a108:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
9000a10a:	f041 0108 	orr.w	r1, r1, #8
9000a10e:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_ASE) != 0U)
9000a110:	0551      	lsls	r1, r2, #21
9000a112:	d503      	bpl.n	9000a11c <HAL_MDMA_IRQHandler+0x74>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
9000a114:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
9000a116:	f041 0110 	orr.w	r1, r1, #16
9000a11a:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_BSE) != 0U)
9000a11c:	0510      	lsls	r0, r2, #20
9000a11e:	d503      	bpl.n	9000a128 <HAL_MDMA_IRQHandler+0x80>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
9000a120:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
9000a122:	f042 0220 	orr.w	r2, r2, #32
9000a126:	66a2      	str	r2, [r4, #104]	@ 0x68
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
9000a128:	2201      	movs	r2, #1
9000a12a:	605a      	str	r2, [r3, #4]
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
9000a12c:	681a      	ldr	r2, [r3, #0]
9000a12e:	06d1      	lsls	r1, r2, #27
9000a130:	d509      	bpl.n	9000a146 <HAL_MDMA_IRQHandler+0x9e>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
9000a132:	68da      	ldr	r2, [r3, #12]
9000a134:	0692      	lsls	r2, r2, #26
9000a136:	d506      	bpl.n	9000a146 <HAL_MDMA_IRQHandler+0x9e>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
9000a138:	2110      	movs	r1, #16
      if(hmdma->XferBufferCpltCallback != NULL)
9000a13a:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
9000a13c:	6059      	str	r1, [r3, #4]
      if(hmdma->XferBufferCpltCallback != NULL)
9000a13e:	b112      	cbz	r2, 9000a146 <HAL_MDMA_IRQHandler+0x9e>
        hmdma->XferBufferCpltCallback(hmdma);
9000a140:	4620      	mov	r0, r4
9000a142:	4790      	blx	r2
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
9000a144:	6823      	ldr	r3, [r4, #0]
9000a146:	681a      	ldr	r2, [r3, #0]
9000a148:	0710      	lsls	r0, r2, #28
9000a14a:	d509      	bpl.n	9000a160 <HAL_MDMA_IRQHandler+0xb8>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
9000a14c:	68da      	ldr	r2, [r3, #12]
9000a14e:	06d1      	lsls	r1, r2, #27
9000a150:	d506      	bpl.n	9000a160 <HAL_MDMA_IRQHandler+0xb8>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
9000a152:	2108      	movs	r1, #8
      if(hmdma->XferBlockCpltCallback != NULL)
9000a154:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
9000a156:	6059      	str	r1, [r3, #4]
      if(hmdma->XferBlockCpltCallback != NULL)
9000a158:	b112      	cbz	r2, 9000a160 <HAL_MDMA_IRQHandler+0xb8>
        hmdma->XferBlockCpltCallback(hmdma);
9000a15a:	4620      	mov	r0, r4
9000a15c:	4790      	blx	r2
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
9000a15e:	6823      	ldr	r3, [r4, #0]
9000a160:	681a      	ldr	r2, [r3, #0]
9000a162:	0752      	lsls	r2, r2, #29
9000a164:	d509      	bpl.n	9000a17a <HAL_MDMA_IRQHandler+0xd2>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
9000a166:	68da      	ldr	r2, [r3, #12]
9000a168:	0710      	lsls	r0, r2, #28
9000a16a:	d506      	bpl.n	9000a17a <HAL_MDMA_IRQHandler+0xd2>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
9000a16c:	2104      	movs	r1, #4
      if(hmdma->XferRepeatBlockCpltCallback != NULL)
9000a16e:	6d22      	ldr	r2, [r4, #80]	@ 0x50
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
9000a170:	6059      	str	r1, [r3, #4]
      if(hmdma->XferRepeatBlockCpltCallback != NULL)
9000a172:	b112      	cbz	r2, 9000a17a <HAL_MDMA_IRQHandler+0xd2>
        hmdma->XferRepeatBlockCpltCallback(hmdma);
9000a174:	4620      	mov	r0, r4
9000a176:	4790      	blx	r2
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
9000a178:	6823      	ldr	r3, [r4, #0]
9000a17a:	681a      	ldr	r2, [r3, #0]
9000a17c:	0791      	lsls	r1, r2, #30
9000a17e:	d516      	bpl.n	9000a1ae <HAL_MDMA_IRQHandler+0x106>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
9000a180:	68da      	ldr	r2, [r3, #12]
9000a182:	0752      	lsls	r2, r2, #29
9000a184:	d513      	bpl.n	9000a1ae <HAL_MDMA_IRQHandler+0x106>
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
9000a186:	68da      	ldr	r2, [r3, #12]
9000a188:	f022 023e 	bic.w	r2, r2, #62	@ 0x3e
9000a18c:	60da      	str	r2, [r3, #12]
      if(HAL_MDMA_STATE_ABORT == hmdma->State)
9000a18e:	f894 203d 	ldrb.w	r2, [r4, #61]	@ 0x3d
9000a192:	2a04      	cmp	r2, #4
9000a194:	d034      	beq.n	9000a200 <HAL_MDMA_IRQHandler+0x158>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
9000a196:	2202      	movs	r2, #2
      __HAL_UNLOCK(hmdma);
9000a198:	2100      	movs	r1, #0
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
9000a19a:	605a      	str	r2, [r3, #4]
      hmdma->State = HAL_MDMA_STATE_READY;
9000a19c:	2201      	movs	r2, #1
      if(hmdma->XferCpltCallback != NULL)
9000a19e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
      __HAL_UNLOCK(hmdma);
9000a1a0:	f884 103c 	strb.w	r1, [r4, #60]	@ 0x3c
      hmdma->State = HAL_MDMA_STATE_READY;
9000a1a4:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
      if(hmdma->XferCpltCallback != NULL)
9000a1a8:	b10b      	cbz	r3, 9000a1ae <HAL_MDMA_IRQHandler+0x106>
        hmdma->XferCpltCallback(hmdma);
9000a1aa:	4620      	mov	r0, r4
9000a1ac:	4798      	blx	r3
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
9000a1ae:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
9000a1b0:	2b00      	cmp	r3, #0
9000a1b2:	d02e      	beq.n	9000a212 <HAL_MDMA_IRQHandler+0x16a>
    __HAL_MDMA_DISABLE(hmdma);
9000a1b4:	6821      	ldr	r1, [r4, #0]
    hmdma->State = HAL_MDMA_STATE_ABORT;
9000a1b6:	2004      	movs	r0, #4
  uint32_t timeout = SystemCoreClock / 9600U;
9000a1b8:	4b19      	ldr	r3, [pc, #100]	@ (9000a220 <HAL_MDMA_IRQHandler+0x178>)
    hmdma->State = HAL_MDMA_STATE_ABORT;
9000a1ba:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
  uint32_t timeout = SystemCoreClock / 9600U;
9000a1be:	fba3 3205 	umull	r3, r2, r3, r5
    __HAL_MDMA_DISABLE(hmdma);
9000a1c2:	68cb      	ldr	r3, [r1, #12]
9000a1c4:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600U;
9000a1c8:	0a92      	lsrs	r2, r2, #10
    __HAL_MDMA_DISABLE(hmdma);
9000a1ca:	60cb      	str	r3, [r1, #12]
9000a1cc:	e002      	b.n	9000a1d4 <HAL_MDMA_IRQHandler+0x12c>
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
9000a1ce:	68cb      	ldr	r3, [r1, #12]
9000a1d0:	07d8      	lsls	r0, r3, #31
9000a1d2:	d504      	bpl.n	9000a1de <HAL_MDMA_IRQHandler+0x136>
      if (++count > timeout)
9000a1d4:	9b01      	ldr	r3, [sp, #4]
9000a1d6:	3301      	adds	r3, #1
9000a1d8:	4293      	cmp	r3, r2
9000a1da:	9301      	str	r3, [sp, #4]
9000a1dc:	d9f7      	bls.n	9000a1ce <HAL_MDMA_IRQHandler+0x126>
    __HAL_UNLOCK(hmdma);
9000a1de:	2300      	movs	r3, #0
9000a1e0:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
9000a1e4:	68cb      	ldr	r3, [r1, #12]
9000a1e6:	07db      	lsls	r3, r3, #31
      hmdma->State = HAL_MDMA_STATE_ERROR;
9000a1e8:	bf4c      	ite	mi
9000a1ea:	2303      	movmi	r3, #3
      hmdma->State = HAL_MDMA_STATE_READY;
9000a1ec:	2301      	movpl	r3, #1
9000a1ee:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    if (hmdma->XferErrorCallback != NULL)
9000a1f2:	6d63      	ldr	r3, [r4, #84]	@ 0x54
9000a1f4:	b16b      	cbz	r3, 9000a212 <HAL_MDMA_IRQHandler+0x16a>
      hmdma->XferErrorCallback(hmdma);
9000a1f6:	4620      	mov	r0, r4
}
9000a1f8:	b003      	add	sp, #12
9000a1fa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      hmdma->XferErrorCallback(hmdma);
9000a1fe:	4718      	bx	r3
        __HAL_UNLOCK(hmdma);
9000a200:	2100      	movs	r1, #0
        hmdma->State = HAL_MDMA_STATE_READY;
9000a202:	2201      	movs	r2, #1
        if(hmdma->XferAbortCallback != NULL)
9000a204:	6da3      	ldr	r3, [r4, #88]	@ 0x58
        __HAL_UNLOCK(hmdma);
9000a206:	f884 103c 	strb.w	r1, [r4, #60]	@ 0x3c
        hmdma->State = HAL_MDMA_STATE_READY;
9000a20a:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
        if(hmdma->XferAbortCallback != NULL)
9000a20e:	2b00      	cmp	r3, #0
9000a210:	d1f1      	bne.n	9000a1f6 <HAL_MDMA_IRQHandler+0x14e>
}
9000a212:	b003      	add	sp, #12
9000a214:	bd30      	pop	{r4, r5, pc}
9000a216:	bf00      	nop
9000a218:	24000058 	.word	0x24000058
9000a21c:	adffffc0 	.word	0xadffffc0
9000a220:	1b4e81b5 	.word	0x1b4e81b5

9000a224 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
9000a224:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
9000a226:	4c10      	ldr	r4, [pc, #64]	@ (9000a268 <HAL_PWREx_ConfigSupply+0x44>)
9000a228:	68e3      	ldr	r3, [r4, #12]
9000a22a:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
9000a22e:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
9000a230:	d105      	bne.n	9000a23e <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
9000a232:	f003 0307 	and.w	r3, r3, #7
9000a236:	1a18      	subs	r0, r3, r0
9000a238:	bf18      	it	ne
9000a23a:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
9000a23c:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
9000a23e:	f023 0307 	bic.w	r3, r3, #7
9000a242:	4303      	orrs	r3, r0
9000a244:	60e3      	str	r3, [r4, #12]
  tickstart = HAL_GetTick ();
9000a246:	f7fc ff93 	bl	90007170 <HAL_GetTick>
9000a24a:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
9000a24c:	e005      	b.n	9000a25a <HAL_PWREx_ConfigSupply+0x36>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
9000a24e:	f7fc ff8f 	bl	90007170 <HAL_GetTick>
9000a252:	1b40      	subs	r0, r0, r5
9000a254:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
9000a258:	d804      	bhi.n	9000a264 <HAL_PWREx_ConfigSupply+0x40>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
9000a25a:	6863      	ldr	r3, [r4, #4]
9000a25c:	049b      	lsls	r3, r3, #18
9000a25e:	d5f6      	bpl.n	9000a24e <HAL_PWREx_ConfigSupply+0x2a>
      return HAL_OK;
9000a260:	2000      	movs	r0, #0
}
9000a262:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
9000a264:	2001      	movs	r0, #1
}
9000a266:	bd38      	pop	{r3, r4, r5, pc}
9000a268:	58024800 	.word	0x58024800

9000a26c <HAL_RCC_GetSysClockFreq.part.0>:
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
9000a26c:	4b33      	ldr	r3, [pc, #204]	@ (9000a33c <HAL_RCC_GetSysClockFreq.part.0+0xd0>)
uint32_t HAL_RCC_GetSysClockFreq(void)
9000a26e:	b430      	push	{r4, r5}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
9000a270:	6a99      	ldr	r1, [r3, #40]	@ 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
9000a272:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
9000a274:	6add      	ldr	r5, [r3, #44]	@ 0x2c
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));

      if (pllm != 0U)
9000a276:	f414 7f7c 	tst.w	r4, #1008	@ 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
9000a27a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
9000a27c:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
9000a280:	d036      	beq.n	9000a2f0 <HAL_RCC_GetSysClockFreq.part.0+0x84>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
9000a282:	f3c2 02cc 	ubfx	r2, r2, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
9000a286:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
9000a28a:	f001 0103 	and.w	r1, r1, #3
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000a28e:	ee07 0a90 	vmov	s15, r0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
9000a292:	fb05 f202 	mul.w	r2, r5, r2
9000a296:	2901      	cmp	r1, #1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000a298:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
9000a29c:	ee06 2a90 	vmov	s13, r2
9000a2a0:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
9000a2a4:	d002      	beq.n	9000a2ac <HAL_RCC_GetSysClockFreq.part.0+0x40>
9000a2a6:	2902      	cmp	r1, #2
9000a2a8:	d042      	beq.n	9000a330 <HAL_RCC_GetSysClockFreq.part.0+0xc4>
9000a2aa:	b319      	cbz	r1, 9000a2f4 <HAL_RCC_GetSysClockFreq.part.0+0x88>
          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            break;

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000a2ac:	eddf 7a24 	vldr	s15, [pc, #144]	@ 9000a340 <HAL_RCC_GetSysClockFreq.part.0+0xd4>
9000a2b0:	ee87 6a87 	vdiv.f32	s12, s15, s14
9000a2b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
9000a2b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
9000a2ba:	ee07 3a90 	vmov	s15, r3
9000a2be:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
9000a2c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000a2c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
9000a2ca:	ee77 7aa5 	vadd.f32	s15, s15, s11
9000a2ce:	ee67 7a86 	vmul.f32	s15, s15, s12
            break;
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
9000a2d2:	4b1a      	ldr	r3, [pc, #104]	@ (9000a33c <HAL_RCC_GetSysClockFreq.part.0+0xd0>)
9000a2d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
9000a2d6:	f3c3 2346 	ubfx	r3, r3, #9, #7
9000a2da:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
9000a2dc:	ee07 3a10 	vmov	s14, r3
9000a2e0:	eef8 6ac7 	vcvt.f32.s32	s13, s14
9000a2e4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
9000a2e8:	eefc 7ac7 	vcvt.u32.f32	s15, s14
9000a2ec:	ee17 0a90 	vmov	r0, s15
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
9000a2f0:	bc30      	pop	{r4, r5}
9000a2f2:	4770      	bx	lr
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000a2f4:	681a      	ldr	r2, [r3, #0]
9000a2f6:	0692      	lsls	r2, r2, #26
9000a2f8:	d51d      	bpl.n	9000a336 <HAL_RCC_GetSysClockFreq.part.0+0xca>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000a2fa:	6819      	ldr	r1, [r3, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000a2fc:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000a300:	4a10      	ldr	r2, [pc, #64]	@ (9000a344 <HAL_RCC_GetSysClockFreq.part.0+0xd8>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000a302:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000a304:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000a308:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000a30c:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000a30e:	ee07 3a90 	vmov	s15, r3
9000a312:	ee06 2a10 	vmov	s12, r2
9000a316:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000a31a:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
9000a31e:	ee77 6aa6 	vadd.f32	s13, s15, s13
9000a322:	eec6 7a07 	vdiv.f32	s15, s12, s14
9000a326:	ee36 7aa5 	vadd.f32	s14, s13, s11
9000a32a:	ee67 7a87 	vmul.f32	s15, s15, s14
9000a32e:	e7d0      	b.n	9000a2d2 <HAL_RCC_GetSysClockFreq.part.0+0x66>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000a330:	eddf 7a05 	vldr	s15, [pc, #20]	@ 9000a348 <HAL_RCC_GetSysClockFreq.part.0+0xdc>
9000a334:	e7bc      	b.n	9000a2b0 <HAL_RCC_GetSysClockFreq.part.0+0x44>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000a336:	eddf 7a05 	vldr	s15, [pc, #20]	@ 9000a34c <HAL_RCC_GetSysClockFreq.part.0+0xe0>
9000a33a:	e7b9      	b.n	9000a2b0 <HAL_RCC_GetSysClockFreq.part.0+0x44>
9000a33c:	58024400 	.word	0x58024400
9000a340:	4a742400 	.word	0x4a742400
9000a344:	03d09000 	.word	0x03d09000
9000a348:	4bbebc20 	.word	0x4bbebc20
9000a34c:	4c742400 	.word	0x4c742400

9000a350 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
9000a350:	2800      	cmp	r0, #0
9000a352:	f000 82e9 	beq.w	9000a928 <HAL_RCC_OscConfig+0x5d8>
{
9000a356:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
9000a358:	6803      	ldr	r3, [r0, #0]
9000a35a:	4604      	mov	r4, r0
9000a35c:	07d9      	lsls	r1, r3, #31
9000a35e:	d52e      	bpl.n	9000a3be <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
9000a360:	4997      	ldr	r1, [pc, #604]	@ (9000a5c0 <HAL_RCC_OscConfig+0x270>)
9000a362:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
9000a364:	6a89      	ldr	r1, [r1, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
9000a366:	f002 0238 	and.w	r2, r2, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
9000a36a:	2a10      	cmp	r2, #16
9000a36c:	f000 80ee 	beq.w	9000a54c <HAL_RCC_OscConfig+0x1fc>
9000a370:	2a18      	cmp	r2, #24
9000a372:	f000 80e6 	beq.w	9000a542 <HAL_RCC_OscConfig+0x1f2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
9000a376:	6863      	ldr	r3, [r4, #4]
9000a378:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
9000a37c:	f000 8111 	beq.w	9000a5a2 <HAL_RCC_OscConfig+0x252>
9000a380:	2b00      	cmp	r3, #0
9000a382:	f000 8167 	beq.w	9000a654 <HAL_RCC_OscConfig+0x304>
9000a386:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
9000a38a:	4b8d      	ldr	r3, [pc, #564]	@ (9000a5c0 <HAL_RCC_OscConfig+0x270>)
9000a38c:	681a      	ldr	r2, [r3, #0]
9000a38e:	f000 828a 	beq.w	9000a8a6 <HAL_RCC_OscConfig+0x556>
9000a392:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
9000a396:	601a      	str	r2, [r3, #0]
9000a398:	681a      	ldr	r2, [r3, #0]
9000a39a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
9000a39e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
9000a3a0:	f7fc fee6 	bl	90007170 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
9000a3a4:	4e86      	ldr	r6, [pc, #536]	@ (9000a5c0 <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
9000a3a6:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
9000a3a8:	e005      	b.n	9000a3b6 <HAL_RCC_OscConfig+0x66>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
9000a3aa:	f7fc fee1 	bl	90007170 <HAL_GetTick>
9000a3ae:	1b40      	subs	r0, r0, r5
9000a3b0:	2864      	cmp	r0, #100	@ 0x64
9000a3b2:	f200 814d 	bhi.w	9000a650 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
9000a3b6:	6833      	ldr	r3, [r6, #0]
9000a3b8:	039b      	lsls	r3, r3, #14
9000a3ba:	d5f6      	bpl.n	9000a3aa <HAL_RCC_OscConfig+0x5a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
9000a3bc:	6823      	ldr	r3, [r4, #0]
9000a3be:	079d      	lsls	r5, r3, #30
9000a3c0:	d470      	bmi.n	9000a4a4 <HAL_RCC_OscConfig+0x154>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
9000a3c2:	06d9      	lsls	r1, r3, #27
9000a3c4:	d533      	bpl.n	9000a42e <HAL_RCC_OscConfig+0xde>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
9000a3c6:	4a7e      	ldr	r2, [pc, #504]	@ (9000a5c0 <HAL_RCC_OscConfig+0x270>)
9000a3c8:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
9000a3ca:	6a92      	ldr	r2, [r2, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
9000a3cc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
9000a3d0:	2b08      	cmp	r3, #8
9000a3d2:	f000 80cb 	beq.w	9000a56c <HAL_RCC_OscConfig+0x21c>
9000a3d6:	2b18      	cmp	r3, #24
9000a3d8:	f000 80c3 	beq.w	9000a562 <HAL_RCC_OscConfig+0x212>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
9000a3dc:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_CSI_ENABLE();
9000a3de:	4d78      	ldr	r5, [pc, #480]	@ (9000a5c0 <HAL_RCC_OscConfig+0x270>)
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
9000a3e0:	2b00      	cmp	r3, #0
9000a3e2:	f000 816f 	beq.w	9000a6c4 <HAL_RCC_OscConfig+0x374>
        __HAL_RCC_CSI_ENABLE();
9000a3e6:	682b      	ldr	r3, [r5, #0]
9000a3e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
9000a3ec:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
9000a3ee:	f7fc febf 	bl	90007170 <HAL_GetTick>
9000a3f2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
9000a3f4:	e005      	b.n	9000a402 <HAL_RCC_OscConfig+0xb2>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
9000a3f6:	f7fc febb 	bl	90007170 <HAL_GetTick>
9000a3fa:	1b80      	subs	r0, r0, r6
9000a3fc:	2802      	cmp	r0, #2
9000a3fe:	f200 8127 	bhi.w	9000a650 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
9000a402:	682b      	ldr	r3, [r5, #0]
9000a404:	05db      	lsls	r3, r3, #23
9000a406:	d5f6      	bpl.n	9000a3f6 <HAL_RCC_OscConfig+0xa6>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
9000a408:	f7fc feb8 	bl	9000717c <HAL_GetREVID>
9000a40c:	f241 0303 	movw	r3, #4099	@ 0x1003
9000a410:	4298      	cmp	r0, r3
9000a412:	f200 8269 	bhi.w	9000a8e8 <HAL_RCC_OscConfig+0x598>
9000a416:	6a22      	ldr	r2, [r4, #32]
9000a418:	686b      	ldr	r3, [r5, #4]
9000a41a:	2a20      	cmp	r2, #32
9000a41c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
9000a420:	bf0c      	ite	eq
9000a422:	f043 4380 	orreq.w	r3, r3, #1073741824	@ 0x40000000
9000a426:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
9000a42a:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
9000a42c:	6823      	ldr	r3, [r4, #0]
9000a42e:	071d      	lsls	r5, r3, #28
9000a430:	d516      	bpl.n	9000a460 <HAL_RCC_OscConfig+0x110>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
9000a432:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
9000a434:	4d62      	ldr	r5, [pc, #392]	@ (9000a5c0 <HAL_RCC_OscConfig+0x270>)
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
9000a436:	2b00      	cmp	r3, #0
9000a438:	f000 8122 	beq.w	9000a680 <HAL_RCC_OscConfig+0x330>
      __HAL_RCC_LSI_ENABLE();
9000a43c:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
9000a43e:	f043 0301 	orr.w	r3, r3, #1
9000a442:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
9000a444:	f7fc fe94 	bl	90007170 <HAL_GetTick>
9000a448:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
9000a44a:	e005      	b.n	9000a458 <HAL_RCC_OscConfig+0x108>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
9000a44c:	f7fc fe90 	bl	90007170 <HAL_GetTick>
9000a450:	1b80      	subs	r0, r0, r6
9000a452:	2802      	cmp	r0, #2
9000a454:	f200 80fc 	bhi.w	9000a650 <HAL_RCC_OscConfig+0x300>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
9000a458:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
9000a45a:	0798      	lsls	r0, r3, #30
9000a45c:	d5f6      	bpl.n	9000a44c <HAL_RCC_OscConfig+0xfc>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
9000a45e:	6823      	ldr	r3, [r4, #0]
9000a460:	069a      	lsls	r2, r3, #26
9000a462:	d516      	bpl.n	9000a492 <HAL_RCC_OscConfig+0x142>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
9000a464:	69a3      	ldr	r3, [r4, #24]
      __HAL_RCC_HSI48_ENABLE();
9000a466:	4d56      	ldr	r5, [pc, #344]	@ (9000a5c0 <HAL_RCC_OscConfig+0x270>)
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
9000a468:	2b00      	cmp	r3, #0
9000a46a:	f000 811a 	beq.w	9000a6a2 <HAL_RCC_OscConfig+0x352>
      __HAL_RCC_HSI48_ENABLE();
9000a46e:	682b      	ldr	r3, [r5, #0]
9000a470:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
9000a474:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
9000a476:	f7fc fe7b 	bl	90007170 <HAL_GetTick>
9000a47a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
9000a47c:	e005      	b.n	9000a48a <HAL_RCC_OscConfig+0x13a>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
9000a47e:	f7fc fe77 	bl	90007170 <HAL_GetTick>
9000a482:	1b80      	subs	r0, r0, r6
9000a484:	2802      	cmp	r0, #2
9000a486:	f200 80e3 	bhi.w	9000a650 <HAL_RCC_OscConfig+0x300>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
9000a48a:	682b      	ldr	r3, [r5, #0]
9000a48c:	049f      	lsls	r7, r3, #18
9000a48e:	d5f6      	bpl.n	9000a47e <HAL_RCC_OscConfig+0x12e>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
9000a490:	6823      	ldr	r3, [r4, #0]
9000a492:	0759      	lsls	r1, r3, #29
9000a494:	f100 808b 	bmi.w	9000a5ae <HAL_RCC_OscConfig+0x25e>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
9000a498:	6a63      	ldr	r3, [r4, #36]	@ 0x24
9000a49a:	2b00      	cmp	r3, #0
9000a49c:	f040 80bf 	bne.w	9000a61e <HAL_RCC_OscConfig+0x2ce>
  return HAL_OK;
9000a4a0:	2000      	movs	r0, #0
}
9000a4a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
9000a4a4:	4a46      	ldr	r2, [pc, #280]	@ (9000a5c0 <HAL_RCC_OscConfig+0x270>)
9000a4a6:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
9000a4a8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
9000a4aa:	f013 0338 	ands.w	r3, r3, #56	@ 0x38
9000a4ae:	d12d      	bne.n	9000a50c <HAL_RCC_OscConfig+0x1bc>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
9000a4b0:	4b43      	ldr	r3, [pc, #268]	@ (9000a5c0 <HAL_RCC_OscConfig+0x270>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
9000a4b2:	68e2      	ldr	r2, [r4, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
9000a4b4:	681b      	ldr	r3, [r3, #0]
9000a4b6:	0759      	lsls	r1, r3, #29
9000a4b8:	d501      	bpl.n	9000a4be <HAL_RCC_OscConfig+0x16e>
9000a4ba:	2a00      	cmp	r2, #0
9000a4bc:	d04f      	beq.n	9000a55e <HAL_RCC_OscConfig+0x20e>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
9000a4be:	4d40      	ldr	r5, [pc, #256]	@ (9000a5c0 <HAL_RCC_OscConfig+0x270>)
9000a4c0:	682b      	ldr	r3, [r5, #0]
9000a4c2:	f023 0319 	bic.w	r3, r3, #25
9000a4c6:	4313      	orrs	r3, r2
9000a4c8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
9000a4ca:	f7fc fe51 	bl	90007170 <HAL_GetTick>
9000a4ce:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
9000a4d0:	e005      	b.n	9000a4de <HAL_RCC_OscConfig+0x18e>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
9000a4d2:	f7fc fe4d 	bl	90007170 <HAL_GetTick>
9000a4d6:	1b80      	subs	r0, r0, r6
9000a4d8:	2802      	cmp	r0, #2
9000a4da:	f200 80b9 	bhi.w	9000a650 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
9000a4de:	682b      	ldr	r3, [r5, #0]
9000a4e0:	075b      	lsls	r3, r3, #29
9000a4e2:	d5f6      	bpl.n	9000a4d2 <HAL_RCC_OscConfig+0x182>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
9000a4e4:	f7fc fe4a 	bl	9000717c <HAL_GetREVID>
9000a4e8:	f241 0303 	movw	r3, #4099	@ 0x1003
9000a4ec:	4298      	cmp	r0, r3
9000a4ee:	f200 8110 	bhi.w	9000a712 <HAL_RCC_OscConfig+0x3c2>
9000a4f2:	6922      	ldr	r2, [r4, #16]
9000a4f4:	686b      	ldr	r3, [r5, #4]
9000a4f6:	2a40      	cmp	r2, #64	@ 0x40
9000a4f8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
9000a4fc:	bf0c      	ite	eq
9000a4fe:	f443 3300 	orreq.w	r3, r3, #131072	@ 0x20000
9000a502:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
9000a506:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
9000a508:	6823      	ldr	r3, [r4, #0]
9000a50a:	e75a      	b.n	9000a3c2 <HAL_RCC_OscConfig+0x72>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
9000a50c:	2b18      	cmp	r3, #24
9000a50e:	f000 80fc 	beq.w	9000a70a <HAL_RCC_OscConfig+0x3ba>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
9000a512:	4d2b      	ldr	r5, [pc, #172]	@ (9000a5c0 <HAL_RCC_OscConfig+0x270>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
9000a514:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
9000a516:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
9000a518:	2a00      	cmp	r2, #0
9000a51a:	f000 80e5 	beq.w	9000a6e8 <HAL_RCC_OscConfig+0x398>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
9000a51e:	f023 0319 	bic.w	r3, r3, #25
9000a522:	4313      	orrs	r3, r2
9000a524:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
9000a526:	f7fc fe23 	bl	90007170 <HAL_GetTick>
9000a52a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
9000a52c:	e005      	b.n	9000a53a <HAL_RCC_OscConfig+0x1ea>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
9000a52e:	f7fc fe1f 	bl	90007170 <HAL_GetTick>
9000a532:	1b80      	subs	r0, r0, r6
9000a534:	2802      	cmp	r0, #2
9000a536:	f200 808b 	bhi.w	9000a650 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
9000a53a:	682b      	ldr	r3, [r5, #0]
9000a53c:	075f      	lsls	r7, r3, #29
9000a53e:	d5f6      	bpl.n	9000a52e <HAL_RCC_OscConfig+0x1de>
9000a540:	e7d0      	b.n	9000a4e4 <HAL_RCC_OscConfig+0x194>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
9000a542:	f001 0103 	and.w	r1, r1, #3
9000a546:	2902      	cmp	r1, #2
9000a548:	f47f af15 	bne.w	9000a376 <HAL_RCC_OscConfig+0x26>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
9000a54c:	4a1c      	ldr	r2, [pc, #112]	@ (9000a5c0 <HAL_RCC_OscConfig+0x270>)
9000a54e:	6812      	ldr	r2, [r2, #0]
9000a550:	0392      	lsls	r2, r2, #14
9000a552:	f57f af34 	bpl.w	9000a3be <HAL_RCC_OscConfig+0x6e>
9000a556:	6862      	ldr	r2, [r4, #4]
9000a558:	2a00      	cmp	r2, #0
9000a55a:	f47f af30 	bne.w	9000a3be <HAL_RCC_OscConfig+0x6e>
    return HAL_ERROR;
9000a55e:	2001      	movs	r0, #1
}
9000a560:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
9000a562:	f002 0203 	and.w	r2, r2, #3
9000a566:	2a01      	cmp	r2, #1
9000a568:	f47f af38 	bne.w	9000a3dc <HAL_RCC_OscConfig+0x8c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
9000a56c:	4b14      	ldr	r3, [pc, #80]	@ (9000a5c0 <HAL_RCC_OscConfig+0x270>)
9000a56e:	681b      	ldr	r3, [r3, #0]
9000a570:	05da      	lsls	r2, r3, #23
9000a572:	d502      	bpl.n	9000a57a <HAL_RCC_OscConfig+0x22a>
9000a574:	69e3      	ldr	r3, [r4, #28]
9000a576:	2b80      	cmp	r3, #128	@ 0x80
9000a578:	d1f1      	bne.n	9000a55e <HAL_RCC_OscConfig+0x20e>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
9000a57a:	f7fc fdff 	bl	9000717c <HAL_GetREVID>
9000a57e:	f241 0303 	movw	r3, #4099	@ 0x1003
9000a582:	4298      	cmp	r0, r3
9000a584:	f200 80ce 	bhi.w	9000a724 <HAL_RCC_OscConfig+0x3d4>
9000a588:	6a22      	ldr	r2, [r4, #32]
9000a58a:	2a20      	cmp	r2, #32
9000a58c:	f000 81bb 	beq.w	9000a906 <HAL_RCC_OscConfig+0x5b6>
9000a590:	490b      	ldr	r1, [pc, #44]	@ (9000a5c0 <HAL_RCC_OscConfig+0x270>)
9000a592:	684b      	ldr	r3, [r1, #4]
9000a594:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
9000a598:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
9000a59c:	604b      	str	r3, [r1, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
9000a59e:	6823      	ldr	r3, [r4, #0]
9000a5a0:	e745      	b.n	9000a42e <HAL_RCC_OscConfig+0xde>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
9000a5a2:	4a07      	ldr	r2, [pc, #28]	@ (9000a5c0 <HAL_RCC_OscConfig+0x270>)
9000a5a4:	6813      	ldr	r3, [r2, #0]
9000a5a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
9000a5aa:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
9000a5ac:	e6f8      	b.n	9000a3a0 <HAL_RCC_OscConfig+0x50>
    PWR->CR1 |= PWR_CR1_DBP;
9000a5ae:	4d05      	ldr	r5, [pc, #20]	@ (9000a5c4 <HAL_RCC_OscConfig+0x274>)
9000a5b0:	682b      	ldr	r3, [r5, #0]
9000a5b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
9000a5b6:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
9000a5b8:	f7fc fdda 	bl	90007170 <HAL_GetTick>
9000a5bc:	4606      	mov	r6, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
9000a5be:	e008      	b.n	9000a5d2 <HAL_RCC_OscConfig+0x282>
9000a5c0:	58024400 	.word	0x58024400
9000a5c4:	58024800 	.word	0x58024800
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
9000a5c8:	f7fc fdd2 	bl	90007170 <HAL_GetTick>
9000a5cc:	1b80      	subs	r0, r0, r6
9000a5ce:	2864      	cmp	r0, #100	@ 0x64
9000a5d0:	d83e      	bhi.n	9000a650 <HAL_RCC_OscConfig+0x300>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
9000a5d2:	682b      	ldr	r3, [r5, #0]
9000a5d4:	05da      	lsls	r2, r3, #23
9000a5d6:	d5f7      	bpl.n	9000a5c8 <HAL_RCC_OscConfig+0x278>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
9000a5d8:	68a3      	ldr	r3, [r4, #8]
9000a5da:	2b01      	cmp	r3, #1
9000a5dc:	f000 818d 	beq.w	9000a8fa <HAL_RCC_OscConfig+0x5aa>
9000a5e0:	2b00      	cmp	r3, #0
9000a5e2:	f000 8168 	beq.w	9000a8b6 <HAL_RCC_OscConfig+0x566>
9000a5e6:	2b05      	cmp	r3, #5
9000a5e8:	4b85      	ldr	r3, [pc, #532]	@ (9000a800 <HAL_RCC_OscConfig+0x4b0>)
9000a5ea:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
9000a5ec:	f000 8194 	beq.w	9000a918 <HAL_RCC_OscConfig+0x5c8>
9000a5f0:	f022 0201 	bic.w	r2, r2, #1
9000a5f4:	671a      	str	r2, [r3, #112]	@ 0x70
9000a5f6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
9000a5f8:	f022 0204 	bic.w	r2, r2, #4
9000a5fc:	671a      	str	r2, [r3, #112]	@ 0x70
      tickstart = HAL_GetTick();
9000a5fe:	f7fc fdb7 	bl	90007170 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
9000a602:	4e7f      	ldr	r6, [pc, #508]	@ (9000a800 <HAL_RCC_OscConfig+0x4b0>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
9000a604:	f241 3788 	movw	r7, #5000	@ 0x1388
      tickstart = HAL_GetTick();
9000a608:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
9000a60a:	e004      	b.n	9000a616 <HAL_RCC_OscConfig+0x2c6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
9000a60c:	f7fc fdb0 	bl	90007170 <HAL_GetTick>
9000a610:	1b40      	subs	r0, r0, r5
9000a612:	42b8      	cmp	r0, r7
9000a614:	d81c      	bhi.n	9000a650 <HAL_RCC_OscConfig+0x300>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
9000a616:	6f33      	ldr	r3, [r6, #112]	@ 0x70
9000a618:	079b      	lsls	r3, r3, #30
9000a61a:	d5f7      	bpl.n	9000a60c <HAL_RCC_OscConfig+0x2bc>
9000a61c:	e73c      	b.n	9000a498 <HAL_RCC_OscConfig+0x148>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
9000a61e:	4d78      	ldr	r5, [pc, #480]	@ (9000a800 <HAL_RCC_OscConfig+0x4b0>)
9000a620:	692a      	ldr	r2, [r5, #16]
9000a622:	f002 0238 	and.w	r2, r2, #56	@ 0x38
9000a626:	2a18      	cmp	r2, #24
9000a628:	f000 80f0 	beq.w	9000a80c <HAL_RCC_OscConfig+0x4bc>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
9000a62c:	2b02      	cmp	r3, #2
        __HAL_RCC_PLL_DISABLE();
9000a62e:	682b      	ldr	r3, [r5, #0]
9000a630:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
9000a634:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
9000a636:	d07f      	beq.n	9000a738 <HAL_RCC_OscConfig+0x3e8>
        tickstart = HAL_GetTick();
9000a638:	f7fc fd9a 	bl	90007170 <HAL_GetTick>
9000a63c:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
9000a63e:	682b      	ldr	r3, [r5, #0]
9000a640:	019b      	lsls	r3, r3, #6
9000a642:	f57f af2d 	bpl.w	9000a4a0 <HAL_RCC_OscConfig+0x150>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
9000a646:	f7fc fd93 	bl	90007170 <HAL_GetTick>
9000a64a:	1b00      	subs	r0, r0, r4
9000a64c:	2802      	cmp	r0, #2
9000a64e:	d9f6      	bls.n	9000a63e <HAL_RCC_OscConfig+0x2ee>
            return HAL_TIMEOUT;
9000a650:	2003      	movs	r0, #3
}
9000a652:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
9000a654:	4d6a      	ldr	r5, [pc, #424]	@ (9000a800 <HAL_RCC_OscConfig+0x4b0>)
9000a656:	682b      	ldr	r3, [r5, #0]
9000a658:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
9000a65c:	602b      	str	r3, [r5, #0]
9000a65e:	682b      	ldr	r3, [r5, #0]
9000a660:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
9000a664:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
9000a666:	f7fc fd83 	bl	90007170 <HAL_GetTick>
9000a66a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
9000a66c:	e004      	b.n	9000a678 <HAL_RCC_OscConfig+0x328>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
9000a66e:	f7fc fd7f 	bl	90007170 <HAL_GetTick>
9000a672:	1b80      	subs	r0, r0, r6
9000a674:	2864      	cmp	r0, #100	@ 0x64
9000a676:	d8eb      	bhi.n	9000a650 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
9000a678:	682b      	ldr	r3, [r5, #0]
9000a67a:	039f      	lsls	r7, r3, #14
9000a67c:	d4f7      	bmi.n	9000a66e <HAL_RCC_OscConfig+0x31e>
9000a67e:	e69d      	b.n	9000a3bc <HAL_RCC_OscConfig+0x6c>
      __HAL_RCC_LSI_DISABLE();
9000a680:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
9000a682:	f023 0301 	bic.w	r3, r3, #1
9000a686:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
9000a688:	f7fc fd72 	bl	90007170 <HAL_GetTick>
9000a68c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
9000a68e:	e004      	b.n	9000a69a <HAL_RCC_OscConfig+0x34a>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
9000a690:	f7fc fd6e 	bl	90007170 <HAL_GetTick>
9000a694:	1b80      	subs	r0, r0, r6
9000a696:	2802      	cmp	r0, #2
9000a698:	d8da      	bhi.n	9000a650 <HAL_RCC_OscConfig+0x300>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
9000a69a:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
9000a69c:	0799      	lsls	r1, r3, #30
9000a69e:	d4f7      	bmi.n	9000a690 <HAL_RCC_OscConfig+0x340>
9000a6a0:	e6dd      	b.n	9000a45e <HAL_RCC_OscConfig+0x10e>
      __HAL_RCC_HSI48_DISABLE();
9000a6a2:	682b      	ldr	r3, [r5, #0]
9000a6a4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
9000a6a8:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
9000a6aa:	f7fc fd61 	bl	90007170 <HAL_GetTick>
9000a6ae:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
9000a6b0:	e004      	b.n	9000a6bc <HAL_RCC_OscConfig+0x36c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
9000a6b2:	f7fc fd5d 	bl	90007170 <HAL_GetTick>
9000a6b6:	1b80      	subs	r0, r0, r6
9000a6b8:	2802      	cmp	r0, #2
9000a6ba:	d8c9      	bhi.n	9000a650 <HAL_RCC_OscConfig+0x300>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
9000a6bc:	682b      	ldr	r3, [r5, #0]
9000a6be:	0498      	lsls	r0, r3, #18
9000a6c0:	d4f7      	bmi.n	9000a6b2 <HAL_RCC_OscConfig+0x362>
9000a6c2:	e6e5      	b.n	9000a490 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_CSI_DISABLE();
9000a6c4:	682b      	ldr	r3, [r5, #0]
9000a6c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
9000a6ca:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
9000a6cc:	f7fc fd50 	bl	90007170 <HAL_GetTick>
9000a6d0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
9000a6d2:	e004      	b.n	9000a6de <HAL_RCC_OscConfig+0x38e>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
9000a6d4:	f7fc fd4c 	bl	90007170 <HAL_GetTick>
9000a6d8:	1b80      	subs	r0, r0, r6
9000a6da:	2802      	cmp	r0, #2
9000a6dc:	d8b8      	bhi.n	9000a650 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
9000a6de:	682b      	ldr	r3, [r5, #0]
9000a6e0:	05df      	lsls	r7, r3, #23
9000a6e2:	d4f7      	bmi.n	9000a6d4 <HAL_RCC_OscConfig+0x384>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
9000a6e4:	6823      	ldr	r3, [r4, #0]
9000a6e6:	e6a2      	b.n	9000a42e <HAL_RCC_OscConfig+0xde>
        __HAL_RCC_HSI_DISABLE();
9000a6e8:	f023 0301 	bic.w	r3, r3, #1
9000a6ec:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
9000a6ee:	f7fc fd3f 	bl	90007170 <HAL_GetTick>
9000a6f2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
9000a6f4:	e004      	b.n	9000a700 <HAL_RCC_OscConfig+0x3b0>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
9000a6f6:	f7fc fd3b 	bl	90007170 <HAL_GetTick>
9000a6fa:	1b80      	subs	r0, r0, r6
9000a6fc:	2802      	cmp	r0, #2
9000a6fe:	d8a7      	bhi.n	9000a650 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
9000a700:	682b      	ldr	r3, [r5, #0]
9000a702:	0758      	lsls	r0, r3, #29
9000a704:	d4f7      	bmi.n	9000a6f6 <HAL_RCC_OscConfig+0x3a6>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
9000a706:	6823      	ldr	r3, [r4, #0]
9000a708:	e65b      	b.n	9000a3c2 <HAL_RCC_OscConfig+0x72>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
9000a70a:	0790      	lsls	r0, r2, #30
9000a70c:	f47f af01 	bne.w	9000a512 <HAL_RCC_OscConfig+0x1c2>
9000a710:	e6ce      	b.n	9000a4b0 <HAL_RCC_OscConfig+0x160>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
9000a712:	686b      	ldr	r3, [r5, #4]
9000a714:	6922      	ldr	r2, [r4, #16]
9000a716:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
9000a71a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
9000a71e:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
9000a720:	6823      	ldr	r3, [r4, #0]
9000a722:	e64e      	b.n	9000a3c2 <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
9000a724:	4a36      	ldr	r2, [pc, #216]	@ (9000a800 <HAL_RCC_OscConfig+0x4b0>)
9000a726:	6a21      	ldr	r1, [r4, #32]
9000a728:	68d3      	ldr	r3, [r2, #12]
9000a72a:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
9000a72e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
9000a732:	60d3      	str	r3, [r2, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
9000a734:	6823      	ldr	r3, [r4, #0]
9000a736:	e67a      	b.n	9000a42e <HAL_RCC_OscConfig+0xde>
        tickstart = HAL_GetTick();
9000a738:	f7fc fd1a 	bl	90007170 <HAL_GetTick>
9000a73c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
9000a73e:	e004      	b.n	9000a74a <HAL_RCC_OscConfig+0x3fa>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
9000a740:	f7fc fd16 	bl	90007170 <HAL_GetTick>
9000a744:	1b80      	subs	r0, r0, r6
9000a746:	2802      	cmp	r0, #2
9000a748:	d882      	bhi.n	9000a650 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
9000a74a:	682b      	ldr	r3, [r5, #0]
9000a74c:	0199      	lsls	r1, r3, #6
9000a74e:	d4f7      	bmi.n	9000a740 <HAL_RCC_OscConfig+0x3f0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
9000a750:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
9000a752:	4b2c      	ldr	r3, [pc, #176]	@ (9000a804 <HAL_RCC_OscConfig+0x4b4>)
9000a754:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
9000a756:	400b      	ands	r3, r1
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
9000a758:	492b      	ldr	r1, [pc, #172]	@ (9000a808 <HAL_RCC_OscConfig+0x4b8>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
9000a75a:	4e29      	ldr	r6, [pc, #164]	@ (9000a800 <HAL_RCC_OscConfig+0x4b0>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
9000a75c:	4313      	orrs	r3, r2
9000a75e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
9000a760:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
9000a764:	62ab      	str	r3, [r5, #40]	@ 0x28
9000a766:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	@ 0x34
9000a76a:	3b01      	subs	r3, #1
9000a76c:	3a01      	subs	r2, #1
9000a76e:	025b      	lsls	r3, r3, #9
9000a770:	0412      	lsls	r2, r2, #16
9000a772:	b29b      	uxth	r3, r3
9000a774:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
9000a778:	4313      	orrs	r3, r2
9000a77a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
9000a77c:	3a01      	subs	r2, #1
9000a77e:	f3c2 0208 	ubfx	r2, r2, #0, #9
9000a782:	4313      	orrs	r3, r2
9000a784:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
9000a786:	3a01      	subs	r2, #1
9000a788:	0612      	lsls	r2, r2, #24
9000a78a:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
9000a78e:	4313      	orrs	r3, r2
9000a790:	632b      	str	r3, [r5, #48]	@ 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
9000a792:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
9000a794:	f023 0301 	bic.w	r3, r3, #1
9000a798:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
9000a79a:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
9000a79c:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
9000a79e:	4011      	ands	r1, r2
9000a7a0:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
9000a7a4:	6369      	str	r1, [r5, #52]	@ 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
9000a7a6:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
9000a7a8:	6c22      	ldr	r2, [r4, #64]	@ 0x40
9000a7aa:	f023 030c 	bic.w	r3, r3, #12
9000a7ae:	4313      	orrs	r3, r2
9000a7b0:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
9000a7b2:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
9000a7b4:	6c62      	ldr	r2, [r4, #68]	@ 0x44
9000a7b6:	f023 0302 	bic.w	r3, r3, #2
9000a7ba:	4313      	orrs	r3, r2
9000a7bc:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
9000a7be:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
9000a7c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
9000a7c4:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000a7c6:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
9000a7c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
9000a7cc:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
9000a7ce:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
9000a7d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
9000a7d4:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
9000a7d6:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
9000a7d8:	f043 0301 	orr.w	r3, r3, #1
9000a7dc:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_ENABLE();
9000a7de:	682b      	ldr	r3, [r5, #0]
9000a7e0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
9000a7e4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
9000a7e6:	f7fc fcc3 	bl	90007170 <HAL_GetTick>
9000a7ea:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
9000a7ec:	6833      	ldr	r3, [r6, #0]
9000a7ee:	019a      	lsls	r2, r3, #6
9000a7f0:	f53f ae56 	bmi.w	9000a4a0 <HAL_RCC_OscConfig+0x150>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
9000a7f4:	f7fc fcbc 	bl	90007170 <HAL_GetTick>
9000a7f8:	1b00      	subs	r0, r0, r4
9000a7fa:	2802      	cmp	r0, #2
9000a7fc:	d9f6      	bls.n	9000a7ec <HAL_RCC_OscConfig+0x49c>
9000a7fe:	e727      	b.n	9000a650 <HAL_RCC_OscConfig+0x300>
9000a800:	58024400 	.word	0x58024400
9000a804:	fffffc0c 	.word	0xfffffc0c
9000a808:	ffff0007 	.word	0xffff0007
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
9000a80c:	2b01      	cmp	r3, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
9000a80e:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
9000a810:	6b28      	ldr	r0, [r5, #48]	@ 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
9000a812:	f43f aea4 	beq.w	9000a55e <HAL_RCC_OscConfig+0x20e>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
9000a816:	f002 0303 	and.w	r3, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
9000a81a:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
9000a81c:	428b      	cmp	r3, r1
9000a81e:	f47f ae9e 	bne.w	9000a55e <HAL_RCC_OscConfig+0x20e>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
9000a822:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
9000a826:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
9000a828:	429a      	cmp	r2, r3
9000a82a:	f47f ae98 	bne.w	9000a55e <HAL_RCC_OscConfig+0x20e>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
9000a82e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
9000a830:	f3c0 0208 	ubfx	r2, r0, #0, #9
9000a834:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
9000a836:	429a      	cmp	r2, r3
9000a838:	f47f ae91 	bne.w	9000a55e <HAL_RCC_OscConfig+0x20e>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
9000a83c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
9000a83e:	f3c0 2246 	ubfx	r2, r0, #9, #7
9000a842:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
9000a844:	429a      	cmp	r2, r3
9000a846:	f47f ae8a 	bne.w	9000a55e <HAL_RCC_OscConfig+0x20e>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
9000a84a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
9000a84c:	f3c0 4206 	ubfx	r2, r0, #16, #7
9000a850:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
9000a852:	429a      	cmp	r2, r3
9000a854:	f47f ae83 	bne.w	9000a55e <HAL_RCC_OscConfig+0x20e>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
9000a858:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
9000a85a:	f3c0 6006 	ubfx	r0, r0, #24, #7
9000a85e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
9000a860:	4298      	cmp	r0, r3
9000a862:	f47f ae7c 	bne.w	9000a55e <HAL_RCC_OscConfig+0x20e>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
9000a866:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
9000a868:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
9000a86a:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
9000a86e:	429a      	cmp	r2, r3
9000a870:	f43f ae16 	beq.w	9000a4a0 <HAL_RCC_OscConfig+0x150>
          __HAL_RCC_PLLFRACN_DISABLE();
9000a874:	4a2d      	ldr	r2, [pc, #180]	@ (9000a92c <HAL_RCC_OscConfig+0x5dc>)
9000a876:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
9000a878:	f023 0301 	bic.w	r3, r3, #1
9000a87c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          tickstart = HAL_GetTick();
9000a87e:	f7fc fc77 	bl	90007170 <HAL_GetTick>
9000a882:	4605      	mov	r5, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
9000a884:	f7fc fc74 	bl	90007170 <HAL_GetTick>
9000a888:	42a8      	cmp	r0, r5
9000a88a:	d0fb      	beq.n	9000a884 <HAL_RCC_OscConfig+0x534>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
9000a88c:	4a27      	ldr	r2, [pc, #156]	@ (9000a92c <HAL_RCC_OscConfig+0x5dc>)
9000a88e:	4b28      	ldr	r3, [pc, #160]	@ (9000a930 <HAL_RCC_OscConfig+0x5e0>)
9000a890:	6b50      	ldr	r0, [r2, #52]	@ 0x34
9000a892:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
9000a894:	4003      	ands	r3, r0
9000a896:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
9000a89a:	6353      	str	r3, [r2, #52]	@ 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
9000a89c:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
9000a89e:	f043 0301 	orr.w	r3, r3, #1
9000a8a2:	62d3      	str	r3, [r2, #44]	@ 0x2c
9000a8a4:	e5fc      	b.n	9000a4a0 <HAL_RCC_OscConfig+0x150>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
9000a8a6:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
9000a8aa:	601a      	str	r2, [r3, #0]
9000a8ac:	681a      	ldr	r2, [r3, #0]
9000a8ae:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
9000a8b2:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
9000a8b4:	e574      	b.n	9000a3a0 <HAL_RCC_OscConfig+0x50>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
9000a8b6:	4d1d      	ldr	r5, [pc, #116]	@ (9000a92c <HAL_RCC_OscConfig+0x5dc>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
9000a8b8:	f241 3788 	movw	r7, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
9000a8bc:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
9000a8be:	f023 0301 	bic.w	r3, r3, #1
9000a8c2:	672b      	str	r3, [r5, #112]	@ 0x70
9000a8c4:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
9000a8c6:	f023 0304 	bic.w	r3, r3, #4
9000a8ca:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();
9000a8cc:	f7fc fc50 	bl	90007170 <HAL_GetTick>
9000a8d0:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
9000a8d2:	e005      	b.n	9000a8e0 <HAL_RCC_OscConfig+0x590>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
9000a8d4:	f7fc fc4c 	bl	90007170 <HAL_GetTick>
9000a8d8:	1b80      	subs	r0, r0, r6
9000a8da:	42b8      	cmp	r0, r7
9000a8dc:	f63f aeb8 	bhi.w	9000a650 <HAL_RCC_OscConfig+0x300>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
9000a8e0:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
9000a8e2:	0798      	lsls	r0, r3, #30
9000a8e4:	d4f6      	bmi.n	9000a8d4 <HAL_RCC_OscConfig+0x584>
9000a8e6:	e5d7      	b.n	9000a498 <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
9000a8e8:	68eb      	ldr	r3, [r5, #12]
9000a8ea:	6a22      	ldr	r2, [r4, #32]
9000a8ec:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
9000a8f0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
9000a8f4:	60eb      	str	r3, [r5, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
9000a8f6:	6823      	ldr	r3, [r4, #0]
9000a8f8:	e599      	b.n	9000a42e <HAL_RCC_OscConfig+0xde>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
9000a8fa:	4a0c      	ldr	r2, [pc, #48]	@ (9000a92c <HAL_RCC_OscConfig+0x5dc>)
9000a8fc:	6f13      	ldr	r3, [r2, #112]	@ 0x70
9000a8fe:	f043 0301 	orr.w	r3, r3, #1
9000a902:	6713      	str	r3, [r2, #112]	@ 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
9000a904:	e67b      	b.n	9000a5fe <HAL_RCC_OscConfig+0x2ae>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
9000a906:	4a09      	ldr	r2, [pc, #36]	@ (9000a92c <HAL_RCC_OscConfig+0x5dc>)
9000a908:	6853      	ldr	r3, [r2, #4]
9000a90a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
9000a90e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
9000a912:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
9000a914:	6823      	ldr	r3, [r4, #0]
9000a916:	e58a      	b.n	9000a42e <HAL_RCC_OscConfig+0xde>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
9000a918:	f042 0204 	orr.w	r2, r2, #4
9000a91c:	671a      	str	r2, [r3, #112]	@ 0x70
9000a91e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
9000a920:	f042 0201 	orr.w	r2, r2, #1
9000a924:	671a      	str	r2, [r3, #112]	@ 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
9000a926:	e66a      	b.n	9000a5fe <HAL_RCC_OscConfig+0x2ae>
    return HAL_ERROR;
9000a928:	2001      	movs	r0, #1
}
9000a92a:	4770      	bx	lr
9000a92c:	58024400 	.word	0x58024400
9000a930:	ffff0007 	.word	0xffff0007

9000a934 <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
9000a934:	4a3f      	ldr	r2, [pc, #252]	@ (9000aa34 <HAL_RCC_GetSysClockFreq+0x100>)
9000a936:	6913      	ldr	r3, [r2, #16]
9000a938:	f003 0338 	and.w	r3, r3, #56	@ 0x38
9000a93c:	2b10      	cmp	r3, #16
9000a93e:	d004      	beq.n	9000a94a <HAL_RCC_GetSysClockFreq+0x16>
9000a940:	2b18      	cmp	r3, #24
9000a942:	d00d      	beq.n	9000a960 <HAL_RCC_GetSysClockFreq+0x2c>
9000a944:	b11b      	cbz	r3, 9000a94e <HAL_RCC_GetSysClockFreq+0x1a>
      sysclockfreq = CSI_VALUE;
9000a946:	483c      	ldr	r0, [pc, #240]	@ (9000aa38 <HAL_RCC_GetSysClockFreq+0x104>)
9000a948:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
9000a94a:	483c      	ldr	r0, [pc, #240]	@ (9000aa3c <HAL_RCC_GetSysClockFreq+0x108>)
9000a94c:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000a94e:	6813      	ldr	r3, [r2, #0]
9000a950:	0699      	lsls	r1, r3, #26
9000a952:	d548      	bpl.n	9000a9e6 <HAL_RCC_GetSysClockFreq+0xb2>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000a954:	6813      	ldr	r3, [r2, #0]
9000a956:	483a      	ldr	r0, [pc, #232]	@ (9000aa40 <HAL_RCC_GetSysClockFreq+0x10c>)
9000a958:	f3c3 03c1 	ubfx	r3, r3, #3, #2
9000a95c:	40d8      	lsrs	r0, r3
9000a95e:	4770      	bx	lr
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
9000a960:	6a91      	ldr	r1, [r2, #40]	@ 0x28
{
9000a962:	b430      	push	{r4, r5}
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
9000a964:	6a94      	ldr	r4, [r2, #40]	@ 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
9000a966:	6ad5      	ldr	r5, [r2, #44]	@ 0x2c
      if (pllm != 0U)
9000a968:	f414 7f7c 	tst.w	r4, #1008	@ 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
9000a96c:	6b53      	ldr	r3, [r2, #52]	@ 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
9000a96e:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
9000a972:	d036      	beq.n	9000a9e2 <HAL_RCC_GetSysClockFreq+0xae>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
9000a974:	f3c3 03cc 	ubfx	r3, r3, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
9000a978:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
9000a97c:	f001 0103 	and.w	r1, r1, #3
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000a980:	ee07 0a90 	vmov	s15, r0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
9000a984:	fb05 f303 	mul.w	r3, r5, r3
9000a988:	2901      	cmp	r1, #1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000a98a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000a98e:	ee06 3a90 	vmov	s13, r3
9000a992:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
9000a996:	d002      	beq.n	9000a99e <HAL_RCC_GetSysClockFreq+0x6a>
9000a998:	2902      	cmp	r1, #2
9000a99a:	d026      	beq.n	9000a9ea <HAL_RCC_GetSysClockFreq+0xb6>
9000a99c:	b341      	cbz	r1, 9000a9f0 <HAL_RCC_GetSysClockFreq+0xbc>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000a99e:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 9000aa44 <HAL_RCC_GetSysClockFreq+0x110>
9000a9a2:	ee87 6a27 	vdiv.f32	s12, s14, s15
9000a9a6:	6b13      	ldr	r3, [r2, #48]	@ 0x30
9000a9a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
9000a9ac:	ee07 3a10 	vmov	s14, r3
9000a9b0:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
9000a9b4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
9000a9b8:	ee37 7a26 	vadd.f32	s14, s14, s13
9000a9bc:	ee37 7a25 	vadd.f32	s14, s14, s11
9000a9c0:	ee27 7a06 	vmul.f32	s14, s14, s12
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
9000a9c4:	4b1b      	ldr	r3, [pc, #108]	@ (9000aa34 <HAL_RCC_GetSysClockFreq+0x100>)
9000a9c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
9000a9c8:	f3c3 2346 	ubfx	r3, r3, #9, #7
9000a9cc:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
9000a9ce:	ee07 3a90 	vmov	s15, r3
9000a9d2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
9000a9d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
9000a9da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
9000a9de:	ee17 0a90 	vmov	r0, s15
}
9000a9e2:	bc30      	pop	{r4, r5}
9000a9e4:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
9000a9e6:	4816      	ldr	r0, [pc, #88]	@ (9000aa40 <HAL_RCC_GetSysClockFreq+0x10c>)
}
9000a9e8:	4770      	bx	lr
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000a9ea:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 9000aa48 <HAL_RCC_GetSysClockFreq+0x114>
9000a9ee:	e7d8      	b.n	9000a9a2 <HAL_RCC_GetSysClockFreq+0x6e>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000a9f0:	6813      	ldr	r3, [r2, #0]
9000a9f2:	069b      	lsls	r3, r3, #26
9000a9f4:	d51a      	bpl.n	9000aa2c <HAL_RCC_GetSysClockFreq+0xf8>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000a9f6:	6810      	ldr	r0, [r2, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000a9f8:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
9000a9fc:	6b13      	ldr	r3, [r2, #48]	@ 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000a9fe:	4910      	ldr	r1, [pc, #64]	@ (9000aa40 <HAL_RCC_GetSysClockFreq+0x10c>)
9000aa00:	f3c0 02c1 	ubfx	r2, r0, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000aa04:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000aa08:	40d1      	lsrs	r1, r2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000aa0a:	ee07 3a10 	vmov	s14, r3
9000aa0e:	ee06 1a10 	vmov	s12, r1
9000aa12:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
9000aa16:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
9000aa1a:	ee77 6a26 	vadd.f32	s13, s14, s13
9000aa1e:	ee86 7a27 	vdiv.f32	s14, s12, s15
9000aa22:	ee76 7aa5 	vadd.f32	s15, s13, s11
9000aa26:	ee27 7a27 	vmul.f32	s14, s14, s15
9000aa2a:	e7cb      	b.n	9000a9c4 <HAL_RCC_GetSysClockFreq+0x90>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000aa2c:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 9000aa4c <HAL_RCC_GetSysClockFreq+0x118>
9000aa30:	e7b7      	b.n	9000a9a2 <HAL_RCC_GetSysClockFreq+0x6e>
9000aa32:	bf00      	nop
9000aa34:	58024400 	.word	0x58024400
9000aa38:	003d0900 	.word	0x003d0900
9000aa3c:	017d7840 	.word	0x017d7840
9000aa40:	03d09000 	.word	0x03d09000
9000aa44:	4a742400 	.word	0x4a742400
9000aa48:	4bbebc20 	.word	0x4bbebc20
9000aa4c:	4c742400 	.word	0x4c742400

9000aa50 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
9000aa50:	2800      	cmp	r0, #0
9000aa52:	f000 810e 	beq.w	9000ac72 <HAL_RCC_ClockConfig+0x222>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
9000aa56:	4a8d      	ldr	r2, [pc, #564]	@ (9000ac8c <HAL_RCC_ClockConfig+0x23c>)
9000aa58:	6813      	ldr	r3, [r2, #0]
9000aa5a:	f003 030f 	and.w	r3, r3, #15
9000aa5e:	428b      	cmp	r3, r1
{
9000aa60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000aa64:	4604      	mov	r4, r0
9000aa66:	460d      	mov	r5, r1
  if (FLatency > __HAL_FLASH_GET_LATENCY())
9000aa68:	d20c      	bcs.n	9000aa84 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
9000aa6a:	6813      	ldr	r3, [r2, #0]
9000aa6c:	f023 030f 	bic.w	r3, r3, #15
9000aa70:	430b      	orrs	r3, r1
9000aa72:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
9000aa74:	6813      	ldr	r3, [r2, #0]
9000aa76:	f003 030f 	and.w	r3, r3, #15
9000aa7a:	428b      	cmp	r3, r1
9000aa7c:	d002      	beq.n	9000aa84 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
9000aa7e:	2001      	movs	r0, #1
}
9000aa80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
9000aa84:	6823      	ldr	r3, [r4, #0]
9000aa86:	0758      	lsls	r0, r3, #29
9000aa88:	d50b      	bpl.n	9000aaa2 <HAL_RCC_ClockConfig+0x52>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
9000aa8a:	4981      	ldr	r1, [pc, #516]	@ (9000ac90 <HAL_RCC_ClockConfig+0x240>)
9000aa8c:	6920      	ldr	r0, [r4, #16]
9000aa8e:	698a      	ldr	r2, [r1, #24]
9000aa90:	f002 0270 	and.w	r2, r2, #112	@ 0x70
9000aa94:	4290      	cmp	r0, r2
9000aa96:	d904      	bls.n	9000aaa2 <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
9000aa98:	698a      	ldr	r2, [r1, #24]
9000aa9a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
9000aa9e:	4302      	orrs	r2, r0
9000aaa0:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
9000aaa2:	0719      	lsls	r1, r3, #28
9000aaa4:	d50b      	bpl.n	9000aabe <HAL_RCC_ClockConfig+0x6e>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
9000aaa6:	497a      	ldr	r1, [pc, #488]	@ (9000ac90 <HAL_RCC_ClockConfig+0x240>)
9000aaa8:	6960      	ldr	r0, [r4, #20]
9000aaaa:	69ca      	ldr	r2, [r1, #28]
9000aaac:	f002 0270 	and.w	r2, r2, #112	@ 0x70
9000aab0:	4290      	cmp	r0, r2
9000aab2:	d904      	bls.n	9000aabe <HAL_RCC_ClockConfig+0x6e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
9000aab4:	69ca      	ldr	r2, [r1, #28]
9000aab6:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
9000aaba:	4302      	orrs	r2, r0
9000aabc:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
9000aabe:	06da      	lsls	r2, r3, #27
9000aac0:	d50b      	bpl.n	9000aada <HAL_RCC_ClockConfig+0x8a>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
9000aac2:	4973      	ldr	r1, [pc, #460]	@ (9000ac90 <HAL_RCC_ClockConfig+0x240>)
9000aac4:	69a0      	ldr	r0, [r4, #24]
9000aac6:	69ca      	ldr	r2, [r1, #28]
9000aac8:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
9000aacc:	4290      	cmp	r0, r2
9000aace:	d904      	bls.n	9000aada <HAL_RCC_ClockConfig+0x8a>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
9000aad0:	69ca      	ldr	r2, [r1, #28]
9000aad2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
9000aad6:	4302      	orrs	r2, r0
9000aad8:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
9000aada:	069f      	lsls	r7, r3, #26
9000aadc:	d50b      	bpl.n	9000aaf6 <HAL_RCC_ClockConfig+0xa6>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
9000aade:	496c      	ldr	r1, [pc, #432]	@ (9000ac90 <HAL_RCC_ClockConfig+0x240>)
9000aae0:	69e0      	ldr	r0, [r4, #28]
9000aae2:	6a0a      	ldr	r2, [r1, #32]
9000aae4:	f002 0270 	and.w	r2, r2, #112	@ 0x70
9000aae8:	4290      	cmp	r0, r2
9000aaea:	d904      	bls.n	9000aaf6 <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
9000aaec:	6a0a      	ldr	r2, [r1, #32]
9000aaee:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
9000aaf2:	4302      	orrs	r2, r0
9000aaf4:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
9000aaf6:	079e      	lsls	r6, r3, #30
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
9000aaf8:	f003 0201 	and.w	r2, r3, #1
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
9000aafc:	f140 80ab 	bpl.w	9000ac56 <HAL_RCC_ClockConfig+0x206>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
9000ab00:	4e63      	ldr	r6, [pc, #396]	@ (9000ac90 <HAL_RCC_ClockConfig+0x240>)
9000ab02:	68e0      	ldr	r0, [r4, #12]
9000ab04:	69b1      	ldr	r1, [r6, #24]
9000ab06:	f001 010f 	and.w	r1, r1, #15
9000ab0a:	4288      	cmp	r0, r1
9000ab0c:	d904      	bls.n	9000ab18 <HAL_RCC_ClockConfig+0xc8>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
9000ab0e:	69b1      	ldr	r1, [r6, #24]
9000ab10:	f021 010f 	bic.w	r1, r1, #15
9000ab14:	4301      	orrs	r1, r0
9000ab16:	61b1      	str	r1, [r6, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
9000ab18:	2a00      	cmp	r2, #0
9000ab1a:	d030      	beq.n	9000ab7e <HAL_RCC_ClockConfig+0x12e>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
9000ab1c:	4a5c      	ldr	r2, [pc, #368]	@ (9000ac90 <HAL_RCC_ClockConfig+0x240>)
9000ab1e:	68a1      	ldr	r1, [r4, #8]
9000ab20:	6993      	ldr	r3, [r2, #24]
9000ab22:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
9000ab26:	430b      	orrs	r3, r1
9000ab28:	6193      	str	r3, [r2, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
9000ab2a:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
9000ab2c:	6813      	ldr	r3, [r2, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
9000ab2e:	2902      	cmp	r1, #2
9000ab30:	f000 80a1 	beq.w	9000ac76 <HAL_RCC_ClockConfig+0x226>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
9000ab34:	2903      	cmp	r1, #3
9000ab36:	f000 8098 	beq.w	9000ac6a <HAL_RCC_ClockConfig+0x21a>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
9000ab3a:	2901      	cmp	r1, #1
9000ab3c:	f000 80a1 	beq.w	9000ac82 <HAL_RCC_ClockConfig+0x232>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
9000ab40:	075f      	lsls	r7, r3, #29
9000ab42:	d59c      	bpl.n	9000aa7e <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
9000ab44:	4e52      	ldr	r6, [pc, #328]	@ (9000ac90 <HAL_RCC_ClockConfig+0x240>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
9000ab46:	f241 3888 	movw	r8, #5000	@ 0x1388
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
9000ab4a:	6933      	ldr	r3, [r6, #16]
9000ab4c:	f023 0307 	bic.w	r3, r3, #7
9000ab50:	430b      	orrs	r3, r1
9000ab52:	6133      	str	r3, [r6, #16]
    tickstart = HAL_GetTick();
9000ab54:	f7fc fb0c 	bl	90007170 <HAL_GetTick>
9000ab58:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
9000ab5a:	e005      	b.n	9000ab68 <HAL_RCC_ClockConfig+0x118>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
9000ab5c:	f7fc fb08 	bl	90007170 <HAL_GetTick>
9000ab60:	1bc0      	subs	r0, r0, r7
9000ab62:	4540      	cmp	r0, r8
9000ab64:	f200 808b 	bhi.w	9000ac7e <HAL_RCC_ClockConfig+0x22e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
9000ab68:	6933      	ldr	r3, [r6, #16]
9000ab6a:	6862      	ldr	r2, [r4, #4]
9000ab6c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
9000ab70:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
9000ab74:	d1f2      	bne.n	9000ab5c <HAL_RCC_ClockConfig+0x10c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
9000ab76:	6823      	ldr	r3, [r4, #0]
9000ab78:	079e      	lsls	r6, r3, #30
9000ab7a:	d506      	bpl.n	9000ab8a <HAL_RCC_ClockConfig+0x13a>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
9000ab7c:	68e0      	ldr	r0, [r4, #12]
9000ab7e:	4944      	ldr	r1, [pc, #272]	@ (9000ac90 <HAL_RCC_ClockConfig+0x240>)
9000ab80:	698a      	ldr	r2, [r1, #24]
9000ab82:	f002 020f 	and.w	r2, r2, #15
9000ab86:	4282      	cmp	r2, r0
9000ab88:	d869      	bhi.n	9000ac5e <HAL_RCC_ClockConfig+0x20e>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
9000ab8a:	4940      	ldr	r1, [pc, #256]	@ (9000ac8c <HAL_RCC_ClockConfig+0x23c>)
9000ab8c:	680a      	ldr	r2, [r1, #0]
9000ab8e:	f002 020f 	and.w	r2, r2, #15
9000ab92:	42aa      	cmp	r2, r5
9000ab94:	d90a      	bls.n	9000abac <HAL_RCC_ClockConfig+0x15c>
    __HAL_FLASH_SET_LATENCY(FLatency);
9000ab96:	680a      	ldr	r2, [r1, #0]
9000ab98:	f022 020f 	bic.w	r2, r2, #15
9000ab9c:	432a      	orrs	r2, r5
9000ab9e:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
9000aba0:	680a      	ldr	r2, [r1, #0]
9000aba2:	f002 020f 	and.w	r2, r2, #15
9000aba6:	42aa      	cmp	r2, r5
9000aba8:	f47f af69 	bne.w	9000aa7e <HAL_RCC_ClockConfig+0x2e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
9000abac:	0758      	lsls	r0, r3, #29
9000abae:	d50b      	bpl.n	9000abc8 <HAL_RCC_ClockConfig+0x178>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
9000abb0:	4937      	ldr	r1, [pc, #220]	@ (9000ac90 <HAL_RCC_ClockConfig+0x240>)
9000abb2:	6920      	ldr	r0, [r4, #16]
9000abb4:	698a      	ldr	r2, [r1, #24]
9000abb6:	f002 0270 	and.w	r2, r2, #112	@ 0x70
9000abba:	4290      	cmp	r0, r2
9000abbc:	d204      	bcs.n	9000abc8 <HAL_RCC_ClockConfig+0x178>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
9000abbe:	698a      	ldr	r2, [r1, #24]
9000abc0:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
9000abc4:	4302      	orrs	r2, r0
9000abc6:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
9000abc8:	0719      	lsls	r1, r3, #28
9000abca:	d50b      	bpl.n	9000abe4 <HAL_RCC_ClockConfig+0x194>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
9000abcc:	4930      	ldr	r1, [pc, #192]	@ (9000ac90 <HAL_RCC_ClockConfig+0x240>)
9000abce:	6960      	ldr	r0, [r4, #20]
9000abd0:	69ca      	ldr	r2, [r1, #28]
9000abd2:	f002 0270 	and.w	r2, r2, #112	@ 0x70
9000abd6:	4290      	cmp	r0, r2
9000abd8:	d204      	bcs.n	9000abe4 <HAL_RCC_ClockConfig+0x194>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
9000abda:	69ca      	ldr	r2, [r1, #28]
9000abdc:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
9000abe0:	4302      	orrs	r2, r0
9000abe2:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
9000abe4:	06da      	lsls	r2, r3, #27
9000abe6:	d50b      	bpl.n	9000ac00 <HAL_RCC_ClockConfig+0x1b0>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
9000abe8:	4929      	ldr	r1, [pc, #164]	@ (9000ac90 <HAL_RCC_ClockConfig+0x240>)
9000abea:	69a0      	ldr	r0, [r4, #24]
9000abec:	69ca      	ldr	r2, [r1, #28]
9000abee:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
9000abf2:	4290      	cmp	r0, r2
9000abf4:	d204      	bcs.n	9000ac00 <HAL_RCC_ClockConfig+0x1b0>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
9000abf6:	69ca      	ldr	r2, [r1, #28]
9000abf8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
9000abfc:	4302      	orrs	r2, r0
9000abfe:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
9000ac00:	069b      	lsls	r3, r3, #26
9000ac02:	d50b      	bpl.n	9000ac1c <HAL_RCC_ClockConfig+0x1cc>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
9000ac04:	4a22      	ldr	r2, [pc, #136]	@ (9000ac90 <HAL_RCC_ClockConfig+0x240>)
9000ac06:	69e1      	ldr	r1, [r4, #28]
9000ac08:	6a13      	ldr	r3, [r2, #32]
9000ac0a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
9000ac0e:	4299      	cmp	r1, r3
9000ac10:	d204      	bcs.n	9000ac1c <HAL_RCC_ClockConfig+0x1cc>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
9000ac12:	6a13      	ldr	r3, [r2, #32]
9000ac14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
9000ac18:	430b      	orrs	r3, r1
9000ac1a:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
9000ac1c:	f7ff fe8a 	bl	9000a934 <HAL_RCC_GetSysClockFreq>
9000ac20:	4a1b      	ldr	r2, [pc, #108]	@ (9000ac90 <HAL_RCC_ClockConfig+0x240>)
9000ac22:	4603      	mov	r3, r0
9000ac24:	481b      	ldr	r0, [pc, #108]	@ (9000ac94 <HAL_RCC_ClockConfig+0x244>)
9000ac26:	6991      	ldr	r1, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000ac28:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
9000ac2a:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemCoreClock = common_system_clock;
9000ac2e:	4d1a      	ldr	r5, [pc, #104]	@ (9000ac98 <HAL_RCC_ClockConfig+0x248>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000ac30:	f002 020f 	and.w	r2, r2, #15
9000ac34:	4c19      	ldr	r4, [pc, #100]	@ (9000ac9c <HAL_RCC_ClockConfig+0x24c>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
9000ac36:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000ac38:	5c82      	ldrb	r2, [r0, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
9000ac3a:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick(uwTickPrio);
9000ac3e:	4818      	ldr	r0, [pc, #96]	@ (9000aca0 <HAL_RCC_ClockConfig+0x250>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000ac40:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
9000ac44:	40cb      	lsrs	r3, r1
  halstatus = HAL_InitTick(uwTickPrio);
9000ac46:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = common_system_clock;
9000ac48:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000ac4a:	40d3      	lsrs	r3, r2
9000ac4c:	6023      	str	r3, [r4, #0]
}
9000ac4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
9000ac52:	f7f6 b9e1 	b.w	90001018 <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
9000ac56:	2a00      	cmp	r2, #0
9000ac58:	f47f af60 	bne.w	9000ab1c <HAL_RCC_ClockConfig+0xcc>
9000ac5c:	e795      	b.n	9000ab8a <HAL_RCC_ClockConfig+0x13a>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
9000ac5e:	698a      	ldr	r2, [r1, #24]
9000ac60:	f022 020f 	bic.w	r2, r2, #15
9000ac64:	4302      	orrs	r2, r0
9000ac66:	618a      	str	r2, [r1, #24]
9000ac68:	e78f      	b.n	9000ab8a <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
9000ac6a:	019a      	lsls	r2, r3, #6
9000ac6c:	f53f af6a 	bmi.w	9000ab44 <HAL_RCC_ClockConfig+0xf4>
9000ac70:	e705      	b.n	9000aa7e <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
9000ac72:	2001      	movs	r0, #1
}
9000ac74:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
9000ac76:	0398      	lsls	r0, r3, #14
9000ac78:	f53f af64 	bmi.w	9000ab44 <HAL_RCC_ClockConfig+0xf4>
9000ac7c:	e6ff      	b.n	9000aa7e <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
9000ac7e:	2003      	movs	r0, #3
9000ac80:	e6fe      	b.n	9000aa80 <HAL_RCC_ClockConfig+0x30>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
9000ac82:	05db      	lsls	r3, r3, #23
9000ac84:	f53f af5e 	bmi.w	9000ab44 <HAL_RCC_ClockConfig+0xf4>
9000ac88:	e6f9      	b.n	9000aa7e <HAL_RCC_ClockConfig+0x2e>
9000ac8a:	bf00      	nop
9000ac8c:	52002000 	.word	0x52002000
9000ac90:	58024400 	.word	0x58024400
9000ac94:	90026294 	.word	0x90026294
9000ac98:	24000058 	.word	0x24000058
9000ac9c:	24000054 	.word	0x24000054
9000aca0:	24000060 	.word	0x24000060

9000aca4 <HAL_RCC_GetPCLK1Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
9000aca4:	4a1c      	ldr	r2, [pc, #112]	@ (9000ad18 <HAL_RCC_GetPCLK1Freq+0x74>)
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
9000aca6:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
9000aca8:	6913      	ldr	r3, [r2, #16]
9000acaa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
9000acae:	2b10      	cmp	r3, #16
9000acb0:	d020      	beq.n	9000acf4 <HAL_RCC_GetPCLK1Freq+0x50>
9000acb2:	2b18      	cmp	r3, #24
9000acb4:	d029      	beq.n	9000ad0a <HAL_RCC_GetPCLK1Freq+0x66>
9000acb6:	b1fb      	cbz	r3, 9000acf8 <HAL_RCC_GetPCLK1Freq+0x54>
      sysclockfreq = CSI_VALUE;
9000acb8:	4b18      	ldr	r3, [pc, #96]	@ (9000ad1c <HAL_RCC_GetPCLK1Freq+0x78>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
9000acba:	4a17      	ldr	r2, [pc, #92]	@ (9000ad18 <HAL_RCC_GetPCLK1Freq+0x74>)
9000acbc:	4918      	ldr	r1, [pc, #96]	@ (9000ad20 <HAL_RCC_GetPCLK1Freq+0x7c>)
9000acbe:	6990      	ldr	r0, [r2, #24]
  SystemCoreClock = common_system_clock;
9000acc0:	4d18      	ldr	r5, [pc, #96]	@ (9000ad24 <HAL_RCC_GetPCLK1Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
9000acc2:	f3c0 2003 	ubfx	r0, r0, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000acc6:	4c18      	ldr	r4, [pc, #96]	@ (9000ad28 <HAL_RCC_GetPCLK1Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
9000acc8:	5c08      	ldrb	r0, [r1, r0]
9000acca:	f000 001f 	and.w	r0, r0, #31
9000acce:	40c3      	lsrs	r3, r0
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000acd0:	6990      	ldr	r0, [r2, #24]
9000acd2:	f000 000f 	and.w	r0, r0, #15
  SystemCoreClock = common_system_clock;
9000acd6:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000acd8:	5c08      	ldrb	r0, [r1, r0]
9000acda:	f000 001f 	and.w	r0, r0, #31
9000acde:	40c3      	lsrs	r3, r0
9000ace0:	6023      	str	r3, [r4, #0]
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
9000ace2:	69d2      	ldr	r2, [r2, #28]
9000ace4:	f3c2 1202 	ubfx	r2, r2, #4, #3
9000ace8:	5c88      	ldrb	r0, [r1, r2]
9000acea:	f000 001f 	and.w	r0, r0, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
9000acee:	fa23 f000 	lsr.w	r0, r3, r0
9000acf2:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
9000acf4:	4b0d      	ldr	r3, [pc, #52]	@ (9000ad2c <HAL_RCC_GetPCLK1Freq+0x88>)
9000acf6:	e7e0      	b.n	9000acba <HAL_RCC_GetPCLK1Freq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000acf8:	6813      	ldr	r3, [r2, #0]
9000acfa:	069b      	lsls	r3, r3, #26
9000acfc:	d509      	bpl.n	9000ad12 <HAL_RCC_GetPCLK1Freq+0x6e>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000acfe:	6812      	ldr	r2, [r2, #0]
9000ad00:	4b0b      	ldr	r3, [pc, #44]	@ (9000ad30 <HAL_RCC_GetPCLK1Freq+0x8c>)
9000ad02:	f3c2 02c1 	ubfx	r2, r2, #3, #2
9000ad06:	40d3      	lsrs	r3, r2
9000ad08:	e7d7      	b.n	9000acba <HAL_RCC_GetPCLK1Freq+0x16>
9000ad0a:	f7ff faaf 	bl	9000a26c <HAL_RCC_GetSysClockFreq.part.0>
9000ad0e:	4603      	mov	r3, r0
9000ad10:	e7d3      	b.n	9000acba <HAL_RCC_GetPCLK1Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
9000ad12:	4b07      	ldr	r3, [pc, #28]	@ (9000ad30 <HAL_RCC_GetPCLK1Freq+0x8c>)
9000ad14:	e7d1      	b.n	9000acba <HAL_RCC_GetPCLK1Freq+0x16>
9000ad16:	bf00      	nop
9000ad18:	58024400 	.word	0x58024400
9000ad1c:	003d0900 	.word	0x003d0900
9000ad20:	90026294 	.word	0x90026294
9000ad24:	24000058 	.word	0x24000058
9000ad28:	24000054 	.word	0x24000054
9000ad2c:	017d7840 	.word	0x017d7840
9000ad30:	03d09000 	.word	0x03d09000

9000ad34 <HAL_RCC_GetPCLK2Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
9000ad34:	4a1c      	ldr	r2, [pc, #112]	@ (9000ada8 <HAL_RCC_GetPCLK2Freq+0x74>)
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
9000ad36:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
9000ad38:	6913      	ldr	r3, [r2, #16]
9000ad3a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
9000ad3e:	2b10      	cmp	r3, #16
9000ad40:	d020      	beq.n	9000ad84 <HAL_RCC_GetPCLK2Freq+0x50>
9000ad42:	2b18      	cmp	r3, #24
9000ad44:	d029      	beq.n	9000ad9a <HAL_RCC_GetPCLK2Freq+0x66>
9000ad46:	b1fb      	cbz	r3, 9000ad88 <HAL_RCC_GetPCLK2Freq+0x54>
      sysclockfreq = CSI_VALUE;
9000ad48:	4b18      	ldr	r3, [pc, #96]	@ (9000adac <HAL_RCC_GetPCLK2Freq+0x78>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
9000ad4a:	4a17      	ldr	r2, [pc, #92]	@ (9000ada8 <HAL_RCC_GetPCLK2Freq+0x74>)
9000ad4c:	4918      	ldr	r1, [pc, #96]	@ (9000adb0 <HAL_RCC_GetPCLK2Freq+0x7c>)
9000ad4e:	6990      	ldr	r0, [r2, #24]
  SystemCoreClock = common_system_clock;
9000ad50:	4d18      	ldr	r5, [pc, #96]	@ (9000adb4 <HAL_RCC_GetPCLK2Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
9000ad52:	f3c0 2003 	ubfx	r0, r0, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000ad56:	4c18      	ldr	r4, [pc, #96]	@ (9000adb8 <HAL_RCC_GetPCLK2Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
9000ad58:	5c08      	ldrb	r0, [r1, r0]
9000ad5a:	f000 001f 	and.w	r0, r0, #31
9000ad5e:	40c3      	lsrs	r3, r0
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000ad60:	6990      	ldr	r0, [r2, #24]
9000ad62:	f000 000f 	and.w	r0, r0, #15
  SystemCoreClock = common_system_clock;
9000ad66:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000ad68:	5c08      	ldrb	r0, [r1, r0]
9000ad6a:	f000 001f 	and.w	r0, r0, #31
9000ad6e:	40c3      	lsrs	r3, r0
9000ad70:	6023      	str	r3, [r4, #0]
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
9000ad72:	69d2      	ldr	r2, [r2, #28]
9000ad74:	f3c2 2202 	ubfx	r2, r2, #8, #3
9000ad78:	5c88      	ldrb	r0, [r1, r2]
9000ad7a:	f000 001f 	and.w	r0, r0, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
9000ad7e:	fa23 f000 	lsr.w	r0, r3, r0
9000ad82:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
9000ad84:	4b0d      	ldr	r3, [pc, #52]	@ (9000adbc <HAL_RCC_GetPCLK2Freq+0x88>)
9000ad86:	e7e0      	b.n	9000ad4a <HAL_RCC_GetPCLK2Freq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000ad88:	6813      	ldr	r3, [r2, #0]
9000ad8a:	069b      	lsls	r3, r3, #26
9000ad8c:	d509      	bpl.n	9000ada2 <HAL_RCC_GetPCLK2Freq+0x6e>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000ad8e:	6812      	ldr	r2, [r2, #0]
9000ad90:	4b0b      	ldr	r3, [pc, #44]	@ (9000adc0 <HAL_RCC_GetPCLK2Freq+0x8c>)
9000ad92:	f3c2 02c1 	ubfx	r2, r2, #3, #2
9000ad96:	40d3      	lsrs	r3, r2
9000ad98:	e7d7      	b.n	9000ad4a <HAL_RCC_GetPCLK2Freq+0x16>
9000ad9a:	f7ff fa67 	bl	9000a26c <HAL_RCC_GetSysClockFreq.part.0>
9000ad9e:	4603      	mov	r3, r0
9000ada0:	e7d3      	b.n	9000ad4a <HAL_RCC_GetPCLK2Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
9000ada2:	4b07      	ldr	r3, [pc, #28]	@ (9000adc0 <HAL_RCC_GetPCLK2Freq+0x8c>)
9000ada4:	e7d1      	b.n	9000ad4a <HAL_RCC_GetPCLK2Freq+0x16>
9000ada6:	bf00      	nop
9000ada8:	58024400 	.word	0x58024400
9000adac:	003d0900 	.word	0x003d0900
9000adb0:	90026294 	.word	0x90026294
9000adb4:	24000058 	.word	0x24000058
9000adb8:	24000054 	.word	0x24000054
9000adbc:	017d7840 	.word	0x017d7840
9000adc0:	03d09000 	.word	0x03d09000

9000adc4 <HAL_RCC_GetClockConfig>:
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
9000adc4:	4b13      	ldr	r3, [pc, #76]	@ (9000ae14 <HAL_RCC_GetClockConfig+0x50>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
9000adc6:	223f      	movs	r2, #63	@ 0x3f
9000adc8:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
9000adca:	691a      	ldr	r2, [r3, #16]
9000adcc:	f002 0207 	and.w	r2, r2, #7
9000add0:	6042      	str	r2, [r0, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
9000add2:	699a      	ldr	r2, [r3, #24]
9000add4:	f402 6270 	and.w	r2, r2, #3840	@ 0xf00
9000add8:	6082      	str	r2, [r0, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
9000adda:	699a      	ldr	r2, [r3, #24]
9000addc:	f002 020f 	and.w	r2, r2, #15
9000ade0:	60c2      	str	r2, [r0, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
9000ade2:	699a      	ldr	r2, [r3, #24]
9000ade4:	f002 0270 	and.w	r2, r2, #112	@ 0x70
9000ade8:	6102      	str	r2, [r0, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
9000adea:	69da      	ldr	r2, [r3, #28]
9000adec:	f002 0270 	and.w	r2, r2, #112	@ 0x70
9000adf0:	6142      	str	r2, [r0, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
9000adf2:	69da      	ldr	r2, [r3, #28]
9000adf4:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
9000adf8:	6182      	str	r2, [r0, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
9000adfa:	6a1b      	ldr	r3, [r3, #32]
{
9000adfc:	b410      	push	{r4}
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
9000adfe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
9000ae02:	4c05      	ldr	r4, [pc, #20]	@ (9000ae18 <HAL_RCC_GetClockConfig+0x54>)
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
9000ae04:	61c3      	str	r3, [r0, #28]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
9000ae06:	6823      	ldr	r3, [r4, #0]
}
9000ae08:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
9000ae0c:	f003 030f 	and.w	r3, r3, #15
9000ae10:	600b      	str	r3, [r1, #0]
}
9000ae12:	4770      	bx	lr
9000ae14:	58024400 	.word	0x58024400
9000ae18:	52002000 	.word	0x52002000

9000ae1c <RCCEx_PLL2_Config.part.0>:
  * @param  Divider  divider parameter to be updated
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
9000ae1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
9000ae1e:	4c36      	ldr	r4, [pc, #216]	@ (9000aef8 <RCCEx_PLL2_Config.part.0+0xdc>)
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
9000ae20:	4606      	mov	r6, r0
9000ae22:	460f      	mov	r7, r1
    __HAL_RCC_PLL2_DISABLE();
9000ae24:	6823      	ldr	r3, [r4, #0]
9000ae26:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
9000ae2a:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
9000ae2c:	f7fc f9a0 	bl	90007170 <HAL_GetTick>
9000ae30:	4605      	mov	r5, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
9000ae32:	e004      	b.n	9000ae3e <RCCEx_PLL2_Config.part.0+0x22>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
9000ae34:	f7fc f99c 	bl	90007170 <HAL_GetTick>
9000ae38:	1b40      	subs	r0, r0, r5
9000ae3a:	2802      	cmp	r0, #2
9000ae3c:	d856      	bhi.n	9000aeec <RCCEx_PLL2_Config.part.0+0xd0>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
9000ae3e:	6823      	ldr	r3, [r4, #0]
9000ae40:	011a      	lsls	r2, r3, #4
9000ae42:	d4f7      	bmi.n	9000ae34 <RCCEx_PLL2_Config.part.0+0x18>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
9000ae44:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
9000ae46:	6832      	ldr	r2, [r6, #0]
9000ae48:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
9000ae4c:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
9000ae50:	62a3      	str	r3, [r4, #40]	@ 0x28
9000ae52:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
9000ae56:	3b01      	subs	r3, #1
9000ae58:	3a01      	subs	r2, #1
9000ae5a:	025b      	lsls	r3, r3, #9
9000ae5c:	0412      	lsls	r2, r2, #16
9000ae5e:	b29b      	uxth	r3, r3
9000ae60:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
9000ae64:	4313      	orrs	r3, r2
9000ae66:	6872      	ldr	r2, [r6, #4]
9000ae68:	3a01      	subs	r2, #1
9000ae6a:	f3c2 0208 	ubfx	r2, r2, #0, #9
9000ae6e:	4313      	orrs	r3, r2
9000ae70:	6932      	ldr	r2, [r6, #16]
9000ae72:	3a01      	subs	r2, #1
9000ae74:	0612      	lsls	r2, r2, #24
9000ae76:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
9000ae7a:	4313      	orrs	r3, r2
9000ae7c:	63a3      	str	r3, [r4, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
9000ae7e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
9000ae80:	6972      	ldr	r2, [r6, #20]
9000ae82:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
9000ae86:	4313      	orrs	r3, r2
9000ae88:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
9000ae8a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
9000ae8c:	69b3      	ldr	r3, [r6, #24]
9000ae8e:	f022 0220 	bic.w	r2, r2, #32
9000ae92:	431a      	orrs	r2, r3

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
9000ae94:	4b19      	ldr	r3, [pc, #100]	@ (9000aefc <RCCEx_PLL2_Config.part.0+0xe0>)
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
9000ae96:	62e2      	str	r2, [r4, #44]	@ 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
9000ae98:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
9000ae9a:	f022 0210 	bic.w	r2, r2, #16
9000ae9e:	62e2      	str	r2, [r4, #44]	@ 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
9000aea0:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
9000aea2:	69f2      	ldr	r2, [r6, #28]
9000aea4:	400b      	ands	r3, r1
9000aea6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
9000aeaa:	63e3      	str	r3, [r4, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
9000aeac:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
9000aeae:	f043 0310 	orr.w	r3, r3, #16
9000aeb2:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
9000aeb4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
9000aeb6:	b1df      	cbz	r7, 9000aef0 <RCCEx_PLL2_Config.part.0+0xd4>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
9000aeb8:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
9000aeba:	bf0c      	ite	eq
9000aebc:	f443 1380 	orreq.w	r3, r3, #1048576	@ 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
9000aec0:	f443 1300 	orrne.w	r3, r3, #2097152	@ 0x200000
9000aec4:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
9000aec6:	4c0c      	ldr	r4, [pc, #48]	@ (9000aef8 <RCCEx_PLL2_Config.part.0+0xdc>)
9000aec8:	6823      	ldr	r3, [r4, #0]
9000aeca:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
9000aece:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
9000aed0:	f7fc f94e 	bl	90007170 <HAL_GetTick>
9000aed4:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
9000aed6:	e004      	b.n	9000aee2 <RCCEx_PLL2_Config.part.0+0xc6>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
9000aed8:	f7fc f94a 	bl	90007170 <HAL_GetTick>
9000aedc:	1b40      	subs	r0, r0, r5
9000aede:	2802      	cmp	r0, #2
9000aee0:	d804      	bhi.n	9000aeec <RCCEx_PLL2_Config.part.0+0xd0>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
9000aee2:	6823      	ldr	r3, [r4, #0]
9000aee4:	011b      	lsls	r3, r3, #4
9000aee6:	d5f7      	bpl.n	9000aed8 <RCCEx_PLL2_Config.part.0+0xbc>
    }

  }


  return status;
9000aee8:	2000      	movs	r0, #0
}
9000aeea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
9000aeec:	2003      	movs	r0, #3
}
9000aeee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
9000aef0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
9000aef4:	62e3      	str	r3, [r4, #44]	@ 0x2c
9000aef6:	e7e6      	b.n	9000aec6 <RCCEx_PLL2_Config.part.0+0xaa>
9000aef8:	58024400 	.word	0x58024400
9000aefc:	ffff0007 	.word	0xffff0007

9000af00 <RCCEx_PLL3_Config.part.0>:
  * @param  Divider  divider parameter to be updated
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
9000af00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
9000af02:	4c36      	ldr	r4, [pc, #216]	@ (9000afdc <RCCEx_PLL3_Config.part.0+0xdc>)
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
9000af04:	4606      	mov	r6, r0
9000af06:	460f      	mov	r7, r1
    __HAL_RCC_PLL3_DISABLE();
9000af08:	6823      	ldr	r3, [r4, #0]
9000af0a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
9000af0e:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
9000af10:	f7fc f92e 	bl	90007170 <HAL_GetTick>
9000af14:	4605      	mov	r5, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
9000af16:	e004      	b.n	9000af22 <RCCEx_PLL3_Config.part.0+0x22>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
9000af18:	f7fc f92a 	bl	90007170 <HAL_GetTick>
9000af1c:	1b40      	subs	r0, r0, r5
9000af1e:	2802      	cmp	r0, #2
9000af20:	d856      	bhi.n	9000afd0 <RCCEx_PLL3_Config.part.0+0xd0>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
9000af22:	6823      	ldr	r3, [r4, #0]
9000af24:	009a      	lsls	r2, r3, #2
9000af26:	d4f7      	bmi.n	9000af18 <RCCEx_PLL3_Config.part.0+0x18>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
9000af28:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
9000af2a:	6832      	ldr	r2, [r6, #0]
9000af2c:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
9000af30:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
9000af34:	62a3      	str	r3, [r4, #40]	@ 0x28
9000af36:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
9000af3a:	3b01      	subs	r3, #1
9000af3c:	3a01      	subs	r2, #1
9000af3e:	025b      	lsls	r3, r3, #9
9000af40:	0412      	lsls	r2, r2, #16
9000af42:	b29b      	uxth	r3, r3
9000af44:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
9000af48:	4313      	orrs	r3, r2
9000af4a:	6872      	ldr	r2, [r6, #4]
9000af4c:	3a01      	subs	r2, #1
9000af4e:	f3c2 0208 	ubfx	r2, r2, #0, #9
9000af52:	4313      	orrs	r3, r2
9000af54:	6932      	ldr	r2, [r6, #16]
9000af56:	3a01      	subs	r2, #1
9000af58:	0612      	lsls	r2, r2, #24
9000af5a:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
9000af5e:	4313      	orrs	r3, r2
9000af60:	6423      	str	r3, [r4, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
9000af62:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
9000af64:	6972      	ldr	r2, [r6, #20]
9000af66:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
9000af6a:	4313      	orrs	r3, r2
9000af6c:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
9000af6e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
9000af70:	69b3      	ldr	r3, [r6, #24]
9000af72:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
9000af76:	431a      	orrs	r2, r3

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
9000af78:	4b19      	ldr	r3, [pc, #100]	@ (9000afe0 <RCCEx_PLL3_Config.part.0+0xe0>)
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
9000af7a:	62e2      	str	r2, [r4, #44]	@ 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
9000af7c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
9000af7e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
9000af82:	62e2      	str	r2, [r4, #44]	@ 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
9000af84:	6c61      	ldr	r1, [r4, #68]	@ 0x44
9000af86:	69f2      	ldr	r2, [r6, #28]
9000af88:	400b      	ands	r3, r1
9000af8a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
9000af8e:	6463      	str	r3, [r4, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
9000af90:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
9000af92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
9000af96:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
9000af98:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
9000af9a:	b1df      	cbz	r7, 9000afd4 <RCCEx_PLL3_Config.part.0+0xd4>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
9000af9c:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
9000af9e:	bf0c      	ite	eq
9000afa0:	f443 0300 	orreq.w	r3, r3, #8388608	@ 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
9000afa4:	f043 7380 	orrne.w	r3, r3, #16777216	@ 0x1000000
9000afa8:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
9000afaa:	4c0c      	ldr	r4, [pc, #48]	@ (9000afdc <RCCEx_PLL3_Config.part.0+0xdc>)
9000afac:	6823      	ldr	r3, [r4, #0]
9000afae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
9000afb2:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
9000afb4:	f7fc f8dc 	bl	90007170 <HAL_GetTick>
9000afb8:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
9000afba:	e004      	b.n	9000afc6 <RCCEx_PLL3_Config.part.0+0xc6>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
9000afbc:	f7fc f8d8 	bl	90007170 <HAL_GetTick>
9000afc0:	1b40      	subs	r0, r0, r5
9000afc2:	2802      	cmp	r0, #2
9000afc4:	d804      	bhi.n	9000afd0 <RCCEx_PLL3_Config.part.0+0xd0>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
9000afc6:	6823      	ldr	r3, [r4, #0]
9000afc8:	009b      	lsls	r3, r3, #2
9000afca:	d5f7      	bpl.n	9000afbc <RCCEx_PLL3_Config.part.0+0xbc>
    }

  }


  return status;
9000afcc:	2000      	movs	r0, #0
}
9000afce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
9000afd0:	2003      	movs	r0, #3
}
9000afd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
9000afd4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
9000afd8:	62e3      	str	r3, [r4, #44]	@ 0x2c
9000afda:	e7e6      	b.n	9000afaa <RCCEx_PLL3_Config.part.0+0xaa>
9000afdc:	58024400 	.word	0x58024400
9000afe0:	ffff0007 	.word	0xffff0007

9000afe4 <HAL_RCCEx_PeriphCLKConfig>:
{
9000afe4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
9000afe8:	e9d0 3200 	ldrd	r3, r2, [r0]
{
9000afec:	4604      	mov	r4, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
9000afee:	011d      	lsls	r5, r3, #4
9000aff0:	f003 6600 	and.w	r6, r3, #134217728	@ 0x8000000
9000aff4:	d525      	bpl.n	9000b042 <HAL_RCCEx_PeriphCLKConfig+0x5e>
    switch (PeriphClkInit->SpdifrxClockSelection)
9000aff6:	6e81      	ldr	r1, [r0, #104]	@ 0x68
9000aff8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
9000affc:	f000 8660 	beq.w	9000bcc0 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
9000b000:	d814      	bhi.n	9000b02c <HAL_RCCEx_PeriphCLKConfig+0x48>
9000b002:	2900      	cmp	r1, #0
9000b004:	f000 86fa 	beq.w	9000bdfc <HAL_RCCEx_PeriphCLKConfig+0xe18>
9000b008:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
9000b00c:	f040 8466 	bne.w	9000b8dc <HAL_RCCEx_PeriphCLKConfig+0x8f8>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
9000b010:	49ad      	ldr	r1, [pc, #692]	@ (9000b2c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
9000b012:	6a89      	ldr	r1, [r1, #40]	@ 0x28
9000b014:	f001 0103 	and.w	r1, r1, #3
9000b018:	2903      	cmp	r1, #3
9000b01a:	f000 845f 	beq.w	9000b8dc <HAL_RCCEx_PeriphCLKConfig+0x8f8>
9000b01e:	2102      	movs	r1, #2
9000b020:	3008      	adds	r0, #8
9000b022:	f7ff fefb 	bl	9000ae1c <RCCEx_PLL2_Config.part.0>
9000b026:	4606      	mov	r6, r0
        break;
9000b028:	f000 be56 	b.w	9000bcd8 <HAL_RCCEx_PeriphCLKConfig+0xcf4>
    switch (PeriphClkInit->SpdifrxClockSelection)
9000b02c:	f5b1 1f40 	cmp.w	r1, #3145728	@ 0x300000
9000b030:	f040 8454 	bne.w	9000b8dc <HAL_RCCEx_PeriphCLKConfig+0x8f8>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
9000b034:	4da4      	ldr	r5, [pc, #656]	@ (9000b2c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
9000b036:	2600      	movs	r6, #0
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
9000b038:	6d28      	ldr	r0, [r5, #80]	@ 0x50
9000b03a:	f420 1040 	bic.w	r0, r0, #3145728	@ 0x300000
9000b03e:	4301      	orrs	r1, r0
9000b040:	6529      	str	r1, [r5, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
9000b042:	05d8      	lsls	r0, r3, #23
9000b044:	d50a      	bpl.n	9000b05c <HAL_RCCEx_PeriphCLKConfig+0x78>
    switch (PeriphClkInit->Sai1ClockSelection)
9000b046:	6da1      	ldr	r1, [r4, #88]	@ 0x58
9000b048:	2904      	cmp	r1, #4
9000b04a:	d806      	bhi.n	9000b05a <HAL_RCCEx_PeriphCLKConfig+0x76>
9000b04c:	e8df f011 	tbh	[pc, r1, lsl #1]
9000b050:	064c04a8 	.word	0x064c04a8
9000b054:	04ad0661 	.word	0x04ad0661
9000b058:	04ad      	.short	0x04ad
9000b05a:	2601      	movs	r6, #1
9000b05c:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
9000b05e:	0599      	lsls	r1, r3, #22
9000b060:	d524      	bpl.n	9000b0ac <HAL_RCCEx_PeriphCLKConfig+0xc8>
    switch (PeriphClkInit->Sai23ClockSelection)
9000b062:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
9000b064:	2980      	cmp	r1, #128	@ 0x80
9000b066:	f000 8664 	beq.w	9000bd32 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
9000b06a:	f200 8122 	bhi.w	9000b2b2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
9000b06e:	2900      	cmp	r1, #0
9000b070:	f000 84ac 	beq.w	9000b9cc <HAL_RCCEx_PeriphCLKConfig+0x9e8>
9000b074:	2940      	cmp	r1, #64	@ 0x40
9000b076:	f040 8123 	bne.w	9000b2c0 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
9000b07a:	4993      	ldr	r1, [pc, #588]	@ (9000b2c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
9000b07c:	6a89      	ldr	r1, [r1, #40]	@ 0x28
9000b07e:	f001 0103 	and.w	r1, r1, #3
9000b082:	2903      	cmp	r1, #3
9000b084:	f000 811c 	beq.w	9000b2c0 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
9000b088:	2100      	movs	r1, #0
9000b08a:	f104 0008 	add.w	r0, r4, #8
9000b08e:	f7ff fec5 	bl	9000ae1c <RCCEx_PLL2_Config.part.0>
9000b092:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
9000b094:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000b098:	2d00      	cmp	r5, #0
9000b09a:	f040 851b 	bne.w	9000bad4 <HAL_RCCEx_PeriphCLKConfig+0xaf0>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
9000b09e:	4f8a      	ldr	r7, [pc, #552]	@ (9000b2c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
9000b0a0:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
9000b0a2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
9000b0a4:	f421 71e0 	bic.w	r1, r1, #448	@ 0x1c0
9000b0a8:	4301      	orrs	r1, r0
9000b0aa:	6539      	str	r1, [r7, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
9000b0ac:	055f      	lsls	r7, r3, #21
9000b0ae:	d528      	bpl.n	9000b102 <HAL_RCCEx_PeriphCLKConfig+0x11e>
    switch (PeriphClkInit->Sai4AClockSelection)
9000b0b0:	f8d4 10a8 	ldr.w	r1, [r4, #168]	@ 0xa8
9000b0b4:	f5b1 0f80 	cmp.w	r1, #4194304	@ 0x400000
9000b0b8:	f000 864f 	beq.w	9000bd5a <HAL_RCCEx_PeriphCLKConfig+0xd76>
9000b0bc:	f200 8106 	bhi.w	9000b2cc <HAL_RCCEx_PeriphCLKConfig+0x2e8>
9000b0c0:	2900      	cmp	r1, #0
9000b0c2:	f000 8463 	beq.w	9000b98c <HAL_RCCEx_PeriphCLKConfig+0x9a8>
9000b0c6:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
9000b0ca:	f040 8107 	bne.w	9000b2dc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
9000b0ce:	497e      	ldr	r1, [pc, #504]	@ (9000b2c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
9000b0d0:	6a89      	ldr	r1, [r1, #40]	@ 0x28
9000b0d2:	f001 0103 	and.w	r1, r1, #3
9000b0d6:	2903      	cmp	r1, #3
9000b0d8:	f000 8100 	beq.w	9000b2dc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
9000b0dc:	2100      	movs	r1, #0
9000b0de:	f104 0008 	add.w	r0, r4, #8
9000b0e2:	f7ff fe9b 	bl	9000ae1c <RCCEx_PLL2_Config.part.0>
9000b0e6:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
9000b0e8:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000b0ec:	2d00      	cmp	r5, #0
9000b0ee:	f040 84f4 	bne.w	9000bada <HAL_RCCEx_PeriphCLKConfig+0xaf6>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
9000b0f2:	4f75      	ldr	r7, [pc, #468]	@ (9000b2c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
9000b0f4:	f8d4 00a8 	ldr.w	r0, [r4, #168]	@ 0xa8
9000b0f8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
9000b0fa:	f421 0160 	bic.w	r1, r1, #14680064	@ 0xe00000
9000b0fe:	4301      	orrs	r1, r0
9000b100:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
9000b102:	0518      	lsls	r0, r3, #20
9000b104:	d528      	bpl.n	9000b158 <HAL_RCCEx_PeriphCLKConfig+0x174>
    switch (PeriphClkInit->Sai4BClockSelection)
9000b106:	f8d4 10ac 	ldr.w	r1, [r4, #172]	@ 0xac
9000b10a:	f1b1 7f00 	cmp.w	r1, #33554432	@ 0x2000000
9000b10e:	f000 85ac 	beq.w	9000bc6a <HAL_RCCEx_PeriphCLKConfig+0xc86>
9000b112:	f200 80e6 	bhi.w	9000b2e2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
9000b116:	2900      	cmp	r1, #0
9000b118:	f000 8425 	beq.w	9000b966 <HAL_RCCEx_PeriphCLKConfig+0x982>
9000b11c:	f1b1 7f80 	cmp.w	r1, #16777216	@ 0x1000000
9000b120:	f040 80e7 	bne.w	9000b2f2 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
9000b124:	4968      	ldr	r1, [pc, #416]	@ (9000b2c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
9000b126:	6a89      	ldr	r1, [r1, #40]	@ 0x28
9000b128:	f001 0103 	and.w	r1, r1, #3
9000b12c:	2903      	cmp	r1, #3
9000b12e:	f000 80e0 	beq.w	9000b2f2 <HAL_RCCEx_PeriphCLKConfig+0x30e>
9000b132:	2100      	movs	r1, #0
9000b134:	f104 0008 	add.w	r0, r4, #8
9000b138:	f7ff fe70 	bl	9000ae1c <RCCEx_PLL2_Config.part.0>
9000b13c:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
9000b13e:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000b142:	2d00      	cmp	r5, #0
9000b144:	f040 84cc 	bne.w	9000bae0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
9000b148:	4f5f      	ldr	r7, [pc, #380]	@ (9000b2c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
9000b14a:	f8d4 00ac 	ldr.w	r0, [r4, #172]	@ 0xac
9000b14e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
9000b150:	f021 61e0 	bic.w	r1, r1, #117440512	@ 0x7000000
9000b154:	4301      	orrs	r1, r0
9000b156:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
9000b158:	0199      	lsls	r1, r3, #6
9000b15a:	d518      	bpl.n	9000b18e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    switch (PeriphClkInit->QspiClockSelection)
9000b15c:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
9000b15e:	2920      	cmp	r1, #32
9000b160:	f000 84ff 	beq.w	9000bb62 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
9000b164:	f200 80c8 	bhi.w	9000b2f8 <HAL_RCCEx_PeriphCLKConfig+0x314>
9000b168:	b139      	cbz	r1, 9000b17a <HAL_RCCEx_PeriphCLKConfig+0x196>
9000b16a:	2910      	cmp	r1, #16
9000b16c:	f040 80c7 	bne.w	9000b2fe <HAL_RCCEx_PeriphCLKConfig+0x31a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000b170:	4855      	ldr	r0, [pc, #340]	@ (9000b2c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
9000b172:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
9000b174:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
9000b178:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
9000b17a:	2d00      	cmp	r5, #0
9000b17c:	f040 849f 	bne.w	9000babe <HAL_RCCEx_PeriphCLKConfig+0xada>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
9000b180:	4f51      	ldr	r7, [pc, #324]	@ (9000b2c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
9000b182:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
9000b184:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
9000b186:	f021 0130 	bic.w	r1, r1, #48	@ 0x30
9000b18a:	4301      	orrs	r1, r0
9000b18c:	64f9      	str	r1, [r7, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
9000b18e:	04df      	lsls	r7, r3, #19
9000b190:	d526      	bpl.n	9000b1e0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
    switch (PeriphClkInit->Spi123ClockSelection)
9000b192:	6e21      	ldr	r1, [r4, #96]	@ 0x60
9000b194:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
9000b198:	f000 857b 	beq.w	9000bc92 <HAL_RCCEx_PeriphCLKConfig+0xcae>
9000b19c:	f200 80b2 	bhi.w	9000b304 <HAL_RCCEx_PeriphCLKConfig+0x320>
9000b1a0:	2900      	cmp	r1, #0
9000b1a2:	f000 83ea 	beq.w	9000b97a <HAL_RCCEx_PeriphCLKConfig+0x996>
9000b1a6:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
9000b1aa:	f040 80b3 	bne.w	9000b314 <HAL_RCCEx_PeriphCLKConfig+0x330>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
9000b1ae:	4946      	ldr	r1, [pc, #280]	@ (9000b2c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
9000b1b0:	6a89      	ldr	r1, [r1, #40]	@ 0x28
9000b1b2:	f001 0103 	and.w	r1, r1, #3
9000b1b6:	2903      	cmp	r1, #3
9000b1b8:	f000 80ac 	beq.w	9000b314 <HAL_RCCEx_PeriphCLKConfig+0x330>
9000b1bc:	2100      	movs	r1, #0
9000b1be:	f104 0008 	add.w	r0, r4, #8
9000b1c2:	f7ff fe2b 	bl	9000ae1c <RCCEx_PLL2_Config.part.0>
9000b1c6:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
9000b1c8:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000b1cc:	2d00      	cmp	r5, #0
9000b1ce:	f040 848a 	bne.w	9000bae6 <HAL_RCCEx_PeriphCLKConfig+0xb02>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
9000b1d2:	4f3d      	ldr	r7, [pc, #244]	@ (9000b2c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
9000b1d4:	6e20      	ldr	r0, [r4, #96]	@ 0x60
9000b1d6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
9000b1d8:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
9000b1dc:	4301      	orrs	r1, r0
9000b1de:	6539      	str	r1, [r7, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
9000b1e0:	0498      	lsls	r0, r3, #18
9000b1e2:	d524      	bpl.n	9000b22e <HAL_RCCEx_PeriphCLKConfig+0x24a>
    switch (PeriphClkInit->Spi45ClockSelection)
9000b1e4:	6e61      	ldr	r1, [r4, #100]	@ 0x64
9000b1e6:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
9000b1ea:	f000 8516 	beq.w	9000bc1a <HAL_RCCEx_PeriphCLKConfig+0xc36>
9000b1ee:	f200 8094 	bhi.w	9000b31a <HAL_RCCEx_PeriphCLKConfig+0x336>
9000b1f2:	b191      	cbz	r1, 9000b21a <HAL_RCCEx_PeriphCLKConfig+0x236>
9000b1f4:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
9000b1f8:	f040 8099 	bne.w	9000b32e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
9000b1fc:	4932      	ldr	r1, [pc, #200]	@ (9000b2c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
9000b1fe:	6a89      	ldr	r1, [r1, #40]	@ 0x28
9000b200:	f001 0103 	and.w	r1, r1, #3
9000b204:	2903      	cmp	r1, #3
9000b206:	f000 8092 	beq.w	9000b32e <HAL_RCCEx_PeriphCLKConfig+0x34a>
9000b20a:	2101      	movs	r1, #1
9000b20c:	f104 0008 	add.w	r0, r4, #8
9000b210:	f7ff fe04 	bl	9000ae1c <RCCEx_PLL2_Config.part.0>
9000b214:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
9000b216:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000b21a:	2d00      	cmp	r5, #0
9000b21c:	f040 8476 	bne.w	9000bb0c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
9000b220:	4f29      	ldr	r7, [pc, #164]	@ (9000b2c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
9000b222:	6e60      	ldr	r0, [r4, #100]	@ 0x64
9000b224:	6d39      	ldr	r1, [r7, #80]	@ 0x50
9000b226:	f421 21e0 	bic.w	r1, r1, #458752	@ 0x70000
9000b22a:	4301      	orrs	r1, r0
9000b22c:	6539      	str	r1, [r7, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
9000b22e:	0459      	lsls	r1, r3, #17
9000b230:	d523      	bpl.n	9000b27a <HAL_RCCEx_PeriphCLKConfig+0x296>
    switch (PeriphClkInit->Spi6ClockSelection)
9000b232:	f8d4 10b0 	ldr.w	r1, [r4, #176]	@ 0xb0
9000b236:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
9000b23a:	f000 8502 	beq.w	9000bc42 <HAL_RCCEx_PeriphCLKConfig+0xc5e>
9000b23e:	d879      	bhi.n	9000b334 <HAL_RCCEx_PeriphCLKConfig+0x350>
9000b240:	b181      	cbz	r1, 9000b264 <HAL_RCCEx_PeriphCLKConfig+0x280>
9000b242:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
9000b246:	d17d      	bne.n	9000b344 <HAL_RCCEx_PeriphCLKConfig+0x360>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
9000b248:	491f      	ldr	r1, [pc, #124]	@ (9000b2c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
9000b24a:	6a89      	ldr	r1, [r1, #40]	@ 0x28
9000b24c:	f001 0103 	and.w	r1, r1, #3
9000b250:	2903      	cmp	r1, #3
9000b252:	d077      	beq.n	9000b344 <HAL_RCCEx_PeriphCLKConfig+0x360>
9000b254:	2101      	movs	r1, #1
9000b256:	f104 0008 	add.w	r0, r4, #8
9000b25a:	f7ff fddf 	bl	9000ae1c <RCCEx_PLL2_Config.part.0>
9000b25e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
9000b260:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000b264:	2d00      	cmp	r5, #0
9000b266:	f040 8454 	bne.w	9000bb12 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
9000b26a:	4f17      	ldr	r7, [pc, #92]	@ (9000b2c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
9000b26c:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
9000b270:	6db9      	ldr	r1, [r7, #88]	@ 0x58
9000b272:	f021 41e0 	bic.w	r1, r1, #1879048192	@ 0x70000000
9000b276:	4301      	orrs	r1, r0
9000b278:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
9000b27a:	041f      	lsls	r7, r3, #16
9000b27c:	d50d      	bpl.n	9000b29a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
    switch (PeriphClkInit->FdcanClockSelection)
9000b27e:	6f21      	ldr	r1, [r4, #112]	@ 0x70
9000b280:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
9000b284:	f000 82e2 	beq.w	9000b84c <HAL_RCCEx_PeriphCLKConfig+0x868>
9000b288:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
9000b28c:	f000 83f0 	beq.w	9000ba70 <HAL_RCCEx_PeriphCLKConfig+0xa8c>
9000b290:	2900      	cmp	r1, #0
9000b292:	f000 82e0 	beq.w	9000b856 <HAL_RCCEx_PeriphCLKConfig+0x872>
9000b296:	2601      	movs	r6, #1
9000b298:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
9000b29a:	01d8      	lsls	r0, r3, #7
9000b29c:	d55e      	bpl.n	9000b35c <HAL_RCCEx_PeriphCLKConfig+0x378>
    switch (PeriphClkInit->FmcClockSelection)
9000b29e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
9000b2a0:	2903      	cmp	r1, #3
9000b2a2:	f200 85cd 	bhi.w	9000be40 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
9000b2a6:	e8df f011 	tbh	[pc, r1, lsl #1]
9000b2aa:	0055      	.short	0x0055
9000b2ac:	04930050 	.word	0x04930050
9000b2b0:	0055      	.short	0x0055
    switch (PeriphClkInit->Sai23ClockSelection)
9000b2b2:	29c0      	cmp	r1, #192	@ 0xc0
9000b2b4:	f43f aef0 	beq.w	9000b098 <HAL_RCCEx_PeriphCLKConfig+0xb4>
9000b2b8:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
9000b2bc:	f43f aeec 	beq.w	9000b098 <HAL_RCCEx_PeriphCLKConfig+0xb4>
9000b2c0:	2601      	movs	r6, #1
9000b2c2:	4635      	mov	r5, r6
9000b2c4:	e6f2      	b.n	9000b0ac <HAL_RCCEx_PeriphCLKConfig+0xc8>
9000b2c6:	bf00      	nop
9000b2c8:	58024400 	.word	0x58024400
    switch (PeriphClkInit->Sai4AClockSelection)
9000b2cc:	f5b1 0fc0 	cmp.w	r1, #6291456	@ 0x600000
9000b2d0:	f43f af0c 	beq.w	9000b0ec <HAL_RCCEx_PeriphCLKConfig+0x108>
9000b2d4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
9000b2d8:	f43f af08 	beq.w	9000b0ec <HAL_RCCEx_PeriphCLKConfig+0x108>
9000b2dc:	2601      	movs	r6, #1
9000b2de:	4635      	mov	r5, r6
9000b2e0:	e70f      	b.n	9000b102 <HAL_RCCEx_PeriphCLKConfig+0x11e>
    switch (PeriphClkInit->Sai4BClockSelection)
9000b2e2:	f1b1 7f40 	cmp.w	r1, #50331648	@ 0x3000000
9000b2e6:	f43f af2c 	beq.w	9000b142 <HAL_RCCEx_PeriphCLKConfig+0x15e>
9000b2ea:	f1b1 6f80 	cmp.w	r1, #67108864	@ 0x4000000
9000b2ee:	f43f af28 	beq.w	9000b142 <HAL_RCCEx_PeriphCLKConfig+0x15e>
9000b2f2:	2601      	movs	r6, #1
9000b2f4:	4635      	mov	r5, r6
9000b2f6:	e72f      	b.n	9000b158 <HAL_RCCEx_PeriphCLKConfig+0x174>
    switch (PeriphClkInit->QspiClockSelection)
9000b2f8:	2930      	cmp	r1, #48	@ 0x30
9000b2fa:	f43f af3e 	beq.w	9000b17a <HAL_RCCEx_PeriphCLKConfig+0x196>
9000b2fe:	2601      	movs	r6, #1
9000b300:	4635      	mov	r5, r6
9000b302:	e744      	b.n	9000b18e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    switch (PeriphClkInit->Spi123ClockSelection)
9000b304:	f5b1 5f40 	cmp.w	r1, #12288	@ 0x3000
9000b308:	f43f af60 	beq.w	9000b1cc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
9000b30c:	f5b1 4f80 	cmp.w	r1, #16384	@ 0x4000
9000b310:	f43f af5c 	beq.w	9000b1cc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
9000b314:	2601      	movs	r6, #1
9000b316:	4635      	mov	r5, r6
9000b318:	e762      	b.n	9000b1e0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
    switch (PeriphClkInit->Spi45ClockSelection)
9000b31a:	f421 3080 	bic.w	r0, r1, #65536	@ 0x10000
9000b31e:	f5b0 2f80 	cmp.w	r0, #262144	@ 0x40000
9000b322:	f43f af7a 	beq.w	9000b21a <HAL_RCCEx_PeriphCLKConfig+0x236>
9000b326:	f5b1 3f40 	cmp.w	r1, #196608	@ 0x30000
9000b32a:	f43f af76 	beq.w	9000b21a <HAL_RCCEx_PeriphCLKConfig+0x236>
9000b32e:	2601      	movs	r6, #1
9000b330:	4635      	mov	r5, r6
9000b332:	e77c      	b.n	9000b22e <HAL_RCCEx_PeriphCLKConfig+0x24a>
    switch (PeriphClkInit->Spi6ClockSelection)
9000b334:	f021 5080 	bic.w	r0, r1, #268435456	@ 0x10000000
9000b338:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
9000b33c:	d092      	beq.n	9000b264 <HAL_RCCEx_PeriphCLKConfig+0x280>
9000b33e:	f1b1 5f40 	cmp.w	r1, #805306368	@ 0x30000000
9000b342:	d08f      	beq.n	9000b264 <HAL_RCCEx_PeriphCLKConfig+0x280>
9000b344:	2601      	movs	r6, #1
9000b346:	4635      	mov	r5, r6
9000b348:	e797      	b.n	9000b27a <HAL_RCCEx_PeriphCLKConfig+0x296>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000b34a:	4837      	ldr	r0, [pc, #220]	@ (9000b428 <HAL_RCCEx_PeriphCLKConfig+0x444>)
9000b34c:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
9000b34e:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
9000b352:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
9000b354:	2d00      	cmp	r5, #0
9000b356:	f000 83b5 	beq.w	9000bac4 <HAL_RCCEx_PeriphCLKConfig+0xae0>
9000b35a:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
9000b35c:	0259      	lsls	r1, r3, #9
9000b35e:	f100 82c0 	bmi.w	9000b8e2 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
9000b362:	07df      	lsls	r7, r3, #31
9000b364:	d52f      	bpl.n	9000b3c6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
    switch (PeriphClkInit->Usart16ClockSelection)
9000b366:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
9000b368:	2928      	cmp	r1, #40	@ 0x28
9000b36a:	d82a      	bhi.n	9000b3c2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
9000b36c:	e8df f011 	tbh	[pc, r1, lsl #1]
9000b370:	002902ab 	.word	0x002902ab
9000b374:	00290029 	.word	0x00290029
9000b378:	00290029 	.word	0x00290029
9000b37c:	00290029 	.word	0x00290029
9000b380:	0029029c 	.word	0x0029029c
9000b384:	00290029 	.word	0x00290029
9000b388:	00290029 	.word	0x00290029
9000b38c:	00290029 	.word	0x00290029
9000b390:	0029052d 	.word	0x0029052d
9000b394:	00290029 	.word	0x00290029
9000b398:	00290029 	.word	0x00290029
9000b39c:	00290029 	.word	0x00290029
9000b3a0:	002902ab 	.word	0x002902ab
9000b3a4:	00290029 	.word	0x00290029
9000b3a8:	00290029 	.word	0x00290029
9000b3ac:	00290029 	.word	0x00290029
9000b3b0:	002902ab 	.word	0x002902ab
9000b3b4:	00290029 	.word	0x00290029
9000b3b8:	00290029 	.word	0x00290029
9000b3bc:	00290029 	.word	0x00290029
9000b3c0:	02ab      	.short	0x02ab
9000b3c2:	2601      	movs	r6, #1
9000b3c4:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
9000b3c6:	0798      	lsls	r0, r3, #30
9000b3c8:	d51e      	bpl.n	9000b408 <HAL_RCCEx_PeriphCLKConfig+0x424>
    switch (PeriphClkInit->Usart234578ClockSelection)
9000b3ca:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
9000b3cc:	2905      	cmp	r1, #5
9000b3ce:	f200 851c 	bhi.w	9000be0a <HAL_RCCEx_PeriphCLKConfig+0xe26>
9000b3d2:	e8df f011 	tbh	[pc, r1, lsl #1]
9000b3d6:	0015      	.short	0x0015
9000b3d8:	04e80006 	.word	0x04e80006
9000b3dc:	00150015 	.word	0x00150015
9000b3e0:	0015      	.short	0x0015
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
9000b3e2:	4911      	ldr	r1, [pc, #68]	@ (9000b428 <HAL_RCCEx_PeriphCLKConfig+0x444>)
9000b3e4:	6a89      	ldr	r1, [r1, #40]	@ 0x28
9000b3e6:	f001 0103 	and.w	r1, r1, #3
9000b3ea:	2903      	cmp	r1, #3
9000b3ec:	f000 850d 	beq.w	9000be0a <HAL_RCCEx_PeriphCLKConfig+0xe26>
9000b3f0:	2101      	movs	r1, #1
9000b3f2:	f104 0008 	add.w	r0, r4, #8
9000b3f6:	f7ff fd11 	bl	9000ae1c <RCCEx_PLL2_Config.part.0>
9000b3fa:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
9000b3fc:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000b400:	2d00      	cmp	r5, #0
9000b402:	f000 837b 	beq.w	9000bafc <HAL_RCCEx_PeriphCLKConfig+0xb18>
9000b406:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
9000b408:	0759      	lsls	r1, r3, #29
9000b40a:	d522      	bpl.n	9000b452 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    switch (PeriphClkInit->Lpuart1ClockSelection)
9000b40c:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
9000b410:	2905      	cmp	r1, #5
9000b412:	f200 84fe 	bhi.w	9000be12 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
9000b416:	e8df f011 	tbh	[pc, r1, lsl #1]
9000b41a:	0018      	.short	0x0018
9000b41c:	04b40009 	.word	0x04b40009
9000b420:	00180018 	.word	0x00180018
9000b424:	0018      	.short	0x0018
9000b426:	bf00      	nop
9000b428:	58024400 	.word	0x58024400
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
9000b42c:	49b0      	ldr	r1, [pc, #704]	@ (9000b6f0 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
9000b42e:	6a89      	ldr	r1, [r1, #40]	@ 0x28
9000b430:	f001 0103 	and.w	r1, r1, #3
9000b434:	2903      	cmp	r1, #3
9000b436:	f000 84ec 	beq.w	9000be12 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
9000b43a:	2101      	movs	r1, #1
9000b43c:	f104 0008 	add.w	r0, r4, #8
9000b440:	f7ff fcec 	bl	9000ae1c <RCCEx_PLL2_Config.part.0>
9000b444:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
9000b446:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000b44a:	2d00      	cmp	r5, #0
9000b44c:	f000 8364 	beq.w	9000bb18 <HAL_RCCEx_PeriphCLKConfig+0xb34>
9000b450:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
9000b452:	069f      	lsls	r7, r3, #26
9000b454:	d526      	bpl.n	9000b4a4 <HAL_RCCEx_PeriphCLKConfig+0x4c0>
    switch (PeriphClkInit->Lptim1ClockSelection)
9000b456:	f8d4 1090 	ldr.w	r1, [r4, #144]	@ 0x90
9000b45a:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
9000b45e:	f000 836e 	beq.w	9000bb3e <HAL_RCCEx_PeriphCLKConfig+0xb5a>
9000b462:	f200 8194 	bhi.w	9000b78e <HAL_RCCEx_PeriphCLKConfig+0x7aa>
9000b466:	b191      	cbz	r1, 9000b48e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
9000b468:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
9000b46c:	f040 8199 	bne.w	9000b7a2 <HAL_RCCEx_PeriphCLKConfig+0x7be>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
9000b470:	499f      	ldr	r1, [pc, #636]	@ (9000b6f0 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
9000b472:	6a89      	ldr	r1, [r1, #40]	@ 0x28
9000b474:	f001 0103 	and.w	r1, r1, #3
9000b478:	2903      	cmp	r1, #3
9000b47a:	f000 8192 	beq.w	9000b7a2 <HAL_RCCEx_PeriphCLKConfig+0x7be>
9000b47e:	2100      	movs	r1, #0
9000b480:	f104 0008 	add.w	r0, r4, #8
9000b484:	f7ff fcca 	bl	9000ae1c <RCCEx_PLL2_Config.part.0>
9000b488:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
9000b48a:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000b48e:	2d00      	cmp	r5, #0
9000b490:	f040 834b 	bne.w	9000bb2a <HAL_RCCEx_PeriphCLKConfig+0xb46>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
9000b494:	4f96      	ldr	r7, [pc, #600]	@ (9000b6f0 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
9000b496:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
9000b49a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
9000b49c:	f021 41e0 	bic.w	r1, r1, #1879048192	@ 0x70000000
9000b4a0:	4301      	orrs	r1, r0
9000b4a2:	6579      	str	r1, [r7, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
9000b4a4:	0658      	lsls	r0, r3, #25
9000b4a6:	d526      	bpl.n	9000b4f6 <HAL_RCCEx_PeriphCLKConfig+0x512>
    switch (PeriphClkInit->Lptim2ClockSelection)
9000b4a8:	f8d4 109c 	ldr.w	r1, [r4, #156]	@ 0x9c
9000b4ac:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
9000b4b0:	f000 83a1 	beq.w	9000bbf6 <HAL_RCCEx_PeriphCLKConfig+0xc12>
9000b4b4:	f200 8178 	bhi.w	9000b7a8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
9000b4b8:	b191      	cbz	r1, 9000b4e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
9000b4ba:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
9000b4be:	f040 817d 	bne.w	9000b7bc <HAL_RCCEx_PeriphCLKConfig+0x7d8>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
9000b4c2:	498b      	ldr	r1, [pc, #556]	@ (9000b6f0 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
9000b4c4:	6a89      	ldr	r1, [r1, #40]	@ 0x28
9000b4c6:	f001 0103 	and.w	r1, r1, #3
9000b4ca:	2903      	cmp	r1, #3
9000b4cc:	f000 8176 	beq.w	9000b7bc <HAL_RCCEx_PeriphCLKConfig+0x7d8>
9000b4d0:	2100      	movs	r1, #0
9000b4d2:	f104 0008 	add.w	r0, r4, #8
9000b4d6:	f7ff fca1 	bl	9000ae1c <RCCEx_PLL2_Config.part.0>
9000b4da:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
9000b4dc:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000b4e0:	2d00      	cmp	r5, #0
9000b4e2:	f040 8328 	bne.w	9000bb36 <HAL_RCCEx_PeriphCLKConfig+0xb52>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
9000b4e6:	4f82      	ldr	r7, [pc, #520]	@ (9000b6f0 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
9000b4e8:	f8d4 009c 	ldr.w	r0, [r4, #156]	@ 0x9c
9000b4ec:	6db9      	ldr	r1, [r7, #88]	@ 0x58
9000b4ee:	f421 51e0 	bic.w	r1, r1, #7168	@ 0x1c00
9000b4f2:	4301      	orrs	r1, r0
9000b4f4:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
9000b4f6:	0619      	lsls	r1, r3, #24
9000b4f8:	d526      	bpl.n	9000b548 <HAL_RCCEx_PeriphCLKConfig+0x564>
    switch (PeriphClkInit->Lptim345ClockSelection)
9000b4fa:	f8d4 10a0 	ldr.w	r1, [r4, #160]	@ 0xa0
9000b4fe:	f5b1 4f80 	cmp.w	r1, #16384	@ 0x4000
9000b502:	f000 8353 	beq.w	9000bbac <HAL_RCCEx_PeriphCLKConfig+0xbc8>
9000b506:	f200 815c 	bhi.w	9000b7c2 <HAL_RCCEx_PeriphCLKConfig+0x7de>
9000b50a:	b191      	cbz	r1, 9000b532 <HAL_RCCEx_PeriphCLKConfig+0x54e>
9000b50c:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
9000b510:	f040 8161 	bne.w	9000b7d6 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
9000b514:	4976      	ldr	r1, [pc, #472]	@ (9000b6f0 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
9000b516:	6a89      	ldr	r1, [r1, #40]	@ 0x28
9000b518:	f001 0103 	and.w	r1, r1, #3
9000b51c:	2903      	cmp	r1, #3
9000b51e:	f000 815a 	beq.w	9000b7d6 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
9000b522:	2100      	movs	r1, #0
9000b524:	f104 0008 	add.w	r0, r4, #8
9000b528:	f7ff fc78 	bl	9000ae1c <RCCEx_PLL2_Config.part.0>
9000b52c:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
9000b52e:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000b532:	2d00      	cmp	r5, #0
9000b534:	f040 82fb 	bne.w	9000bb2e <HAL_RCCEx_PeriphCLKConfig+0xb4a>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
9000b538:	4f6d      	ldr	r7, [pc, #436]	@ (9000b6f0 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
9000b53a:	f8d4 00a0 	ldr.w	r0, [r4, #160]	@ 0xa0
9000b53e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
9000b540:	f421 4160 	bic.w	r1, r1, #57344	@ 0xe000
9000b544:	4301      	orrs	r1, r0
9000b546:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
9000b548:	071f      	lsls	r7, r3, #28
9000b54a:	d50b      	bpl.n	9000b564 <HAL_RCCEx_PeriphCLKConfig+0x580>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
9000b54c:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
9000b550:	f5b0 5f80 	cmp.w	r0, #4096	@ 0x1000
9000b554:	f000 8250 	beq.w	9000b9f8 <HAL_RCCEx_PeriphCLKConfig+0xa14>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
9000b558:	4f65      	ldr	r7, [pc, #404]	@ (9000b6f0 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
9000b55a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
9000b55c:	f421 5140 	bic.w	r1, r1, #12288	@ 0x3000
9000b560:	4301      	orrs	r1, r0
9000b562:	6579      	str	r1, [r7, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
9000b564:	06d8      	lsls	r0, r3, #27
9000b566:	d50b      	bpl.n	9000b580 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
9000b568:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
9000b56c:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
9000b570:	f000 8257 	beq.w	9000ba22 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
9000b574:	4f5e      	ldr	r7, [pc, #376]	@ (9000b6f0 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
9000b576:	6db9      	ldr	r1, [r7, #88]	@ 0x58
9000b578:	f421 7140 	bic.w	r1, r1, #768	@ 0x300
9000b57c:	4301      	orrs	r1, r0
9000b57e:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
9000b580:	0319      	lsls	r1, r3, #12
9000b582:	d50e      	bpl.n	9000b5a2 <HAL_RCCEx_PeriphCLKConfig+0x5be>
    switch (PeriphClkInit->AdcClockSelection)
9000b584:	f8d4 10a4 	ldr.w	r1, [r4, #164]	@ 0xa4
9000b588:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
9000b58c:	f000 816e 	beq.w	9000b86c <HAL_RCCEx_PeriphCLKConfig+0x888>
9000b590:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
9000b594:	f000 8179 	beq.w	9000b88a <HAL_RCCEx_PeriphCLKConfig+0x8a6>
9000b598:	2900      	cmp	r1, #0
9000b59a:	f000 827a 	beq.w	9000ba92 <HAL_RCCEx_PeriphCLKConfig+0xaae>
9000b59e:	2601      	movs	r6, #1
9000b5a0:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
9000b5a2:	035f      	lsls	r7, r3, #13
9000b5a4:	d50f      	bpl.n	9000b5c6 <HAL_RCCEx_PeriphCLKConfig+0x5e2>
    switch (PeriphClkInit->UsbClockSelection)
9000b5a6:	f8d4 1088 	ldr.w	r1, [r4, #136]	@ 0x88
9000b5aa:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
9000b5ae:	f000 82eb 	beq.w	9000bb88 <HAL_RCCEx_PeriphCLKConfig+0xba4>
9000b5b2:	f5b1 1f40 	cmp.w	r1, #3145728	@ 0x300000
9000b5b6:	f000 813d 	beq.w	9000b834 <HAL_RCCEx_PeriphCLKConfig+0x850>
9000b5ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
9000b5be:	f000 8134 	beq.w	9000b82a <HAL_RCCEx_PeriphCLKConfig+0x846>
9000b5c2:	2601      	movs	r6, #1
9000b5c4:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
9000b5c6:	03d8      	lsls	r0, r3, #15
9000b5c8:	d520      	bpl.n	9000b60c <HAL_RCCEx_PeriphCLKConfig+0x628>
    switch (PeriphClkInit->SdmmcClockSelection)
9000b5ca:	6d21      	ldr	r1, [r4, #80]	@ 0x50
9000b5cc:	2900      	cmp	r1, #0
9000b5ce:	f000 8245 	beq.w	9000ba5c <HAL_RCCEx_PeriphCLKConfig+0xa78>
9000b5d2:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
9000b5d6:	f040 8125 	bne.w	9000b824 <HAL_RCCEx_PeriphCLKConfig+0x840>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
9000b5da:	4945      	ldr	r1, [pc, #276]	@ (9000b6f0 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
9000b5dc:	6a89      	ldr	r1, [r1, #40]	@ 0x28
9000b5de:	f001 0103 	and.w	r1, r1, #3
9000b5e2:	2903      	cmp	r1, #3
9000b5e4:	f000 811e 	beq.w	9000b824 <HAL_RCCEx_PeriphCLKConfig+0x840>
9000b5e8:	2102      	movs	r1, #2
9000b5ea:	f104 0008 	add.w	r0, r4, #8
9000b5ee:	f7ff fc15 	bl	9000ae1c <RCCEx_PLL2_Config.part.0>
9000b5f2:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
9000b5f4:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000b5f8:	2d00      	cmp	r5, #0
9000b5fa:	f040 8237 	bne.w	9000ba6c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
9000b5fe:	4f3c      	ldr	r7, [pc, #240]	@ (9000b6f0 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
9000b600:	6d20      	ldr	r0, [r4, #80]	@ 0x50
9000b602:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
9000b604:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
9000b608:	4301      	orrs	r1, r0
9000b60a:	64f9      	str	r1, [r7, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
9000b60c:	0099      	lsls	r1, r3, #2
9000b60e:	d50e      	bpl.n	9000b62e <HAL_RCCEx_PeriphCLKConfig+0x64a>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
9000b610:	4937      	ldr	r1, [pc, #220]	@ (9000b6f0 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
9000b612:	6a89      	ldr	r1, [r1, #40]	@ 0x28
9000b614:	f001 0103 	and.w	r1, r1, #3
9000b618:	2903      	cmp	r1, #3
9000b61a:	d007      	beq.n	9000b62c <HAL_RCCEx_PeriphCLKConfig+0x648>
9000b61c:	2102      	movs	r1, #2
9000b61e:	f104 0028 	add.w	r0, r4, #40	@ 0x28
9000b622:	f7ff fc6d 	bl	9000af00 <RCCEx_PLL3_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
9000b626:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
9000b62a:	b100      	cbz	r0, 9000b62e <HAL_RCCEx_PeriphCLKConfig+0x64a>
      status = HAL_ERROR;
9000b62c:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
9000b62e:	039f      	lsls	r7, r3, #14
9000b630:	f140 80e0 	bpl.w	9000b7f4 <HAL_RCCEx_PeriphCLKConfig+0x810>
    switch (PeriphClkInit->RngClockSelection)
9000b634:	f8d4 1080 	ldr.w	r1, [r4, #128]	@ 0x80
9000b638:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
9000b63c:	f000 8205 	beq.w	9000ba4a <HAL_RCCEx_PeriphCLKConfig+0xa66>
9000b640:	f240 80cc 	bls.w	9000b7dc <HAL_RCCEx_PeriphCLKConfig+0x7f8>
9000b644:	f421 7080 	bic.w	r0, r1, #256	@ 0x100
9000b648:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
9000b64c:	f000 80c9 	beq.w	9000b7e2 <HAL_RCCEx_PeriphCLKConfig+0x7fe>
9000b650:	2501      	movs	r5, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
9000b652:	02d8      	lsls	r0, r3, #11
9000b654:	d506      	bpl.n	9000b664 <HAL_RCCEx_PeriphCLKConfig+0x680>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
9000b656:	4826      	ldr	r0, [pc, #152]	@ (9000b6f0 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
9000b658:	6f66      	ldr	r6, [r4, #116]	@ 0x74
9000b65a:	6d01      	ldr	r1, [r0, #80]	@ 0x50
9000b65c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
9000b660:	4331      	orrs	r1, r6
9000b662:	6501      	str	r1, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
9000b664:	00d9      	lsls	r1, r3, #3
9000b666:	d507      	bpl.n	9000b678 <HAL_RCCEx_PeriphCLKConfig+0x694>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
9000b668:	4821      	ldr	r0, [pc, #132]	@ (9000b6f0 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
9000b66a:	f8d4 60b8 	ldr.w	r6, [r4, #184]	@ 0xb8
9000b66e:	6901      	ldr	r1, [r0, #16]
9000b670:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
9000b674:	4331      	orrs	r1, r6
9000b676:	6101      	str	r1, [r0, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
9000b678:	029f      	lsls	r7, r3, #10
9000b67a:	d506      	bpl.n	9000b68a <HAL_RCCEx_PeriphCLKConfig+0x6a6>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
9000b67c:	481c      	ldr	r0, [pc, #112]	@ (9000b6f0 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
9000b67e:	6ee6      	ldr	r6, [r4, #108]	@ 0x6c
9000b680:	6d01      	ldr	r1, [r0, #80]	@ 0x50
9000b682:	f021 7180 	bic.w	r1, r1, #16777216	@ 0x1000000
9000b686:	4331      	orrs	r1, r6
9000b688:	6501      	str	r1, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
9000b68a:	005e      	lsls	r6, r3, #1
9000b68c:	d509      	bpl.n	9000b6a2 <HAL_RCCEx_PeriphCLKConfig+0x6be>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
9000b68e:	4918      	ldr	r1, [pc, #96]	@ (9000b6f0 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
9000b690:	6908      	ldr	r0, [r1, #16]
9000b692:	f420 4000 	bic.w	r0, r0, #32768	@ 0x8000
9000b696:	6108      	str	r0, [r1, #16]
9000b698:	6908      	ldr	r0, [r1, #16]
9000b69a:	f8d4 60bc 	ldr.w	r6, [r4, #188]	@ 0xbc
9000b69e:	4330      	orrs	r0, r6
9000b6a0:	6108      	str	r0, [r1, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
9000b6a2:	2b00      	cmp	r3, #0
9000b6a4:	da06      	bge.n	9000b6b4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
9000b6a6:	4812      	ldr	r0, [pc, #72]	@ (9000b6f0 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
9000b6a8:	6d66      	ldr	r6, [r4, #84]	@ 0x54
9000b6aa:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
9000b6ac:	f021 5140 	bic.w	r1, r1, #805306368	@ 0x30000000
9000b6b0:	4331      	orrs	r1, r6
9000b6b2:	64c1      	str	r1, [r0, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
9000b6b4:	0218      	lsls	r0, r3, #8
9000b6b6:	d507      	bpl.n	9000b6c8 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
9000b6b8:	490d      	ldr	r1, [pc, #52]	@ (9000b6f0 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
9000b6ba:	f8d4 008c 	ldr.w	r0, [r4, #140]	@ 0x8c
9000b6be:	6d4b      	ldr	r3, [r1, #84]	@ 0x54
9000b6c0:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
9000b6c4:	4303      	orrs	r3, r0
9000b6c6:	654b      	str	r3, [r1, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
9000b6c8:	07d1      	lsls	r1, r2, #31
9000b6ca:	d513      	bpl.n	9000b6f4 <HAL_RCCEx_PeriphCLKConfig+0x710>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
9000b6cc:	4b08      	ldr	r3, [pc, #32]	@ (9000b6f0 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
9000b6ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000b6d0:	f003 0303 	and.w	r3, r3, #3
9000b6d4:	2b03      	cmp	r3, #3
9000b6d6:	f000 818d 	beq.w	9000b9f4 <HAL_RCCEx_PeriphCLKConfig+0xa10>
9000b6da:	2100      	movs	r1, #0
9000b6dc:	f104 0008 	add.w	r0, r4, #8
9000b6e0:	f7ff fb9c 	bl	9000ae1c <RCCEx_PLL2_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
9000b6e4:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
9000b6e6:	2800      	cmp	r0, #0
9000b6e8:	f040 8204 	bne.w	9000baf4 <HAL_RCCEx_PeriphCLKConfig+0xb10>
9000b6ec:	e002      	b.n	9000b6f4 <HAL_RCCEx_PeriphCLKConfig+0x710>
9000b6ee:	bf00      	nop
9000b6f0:	58024400 	.word	0x58024400
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
9000b6f4:	0793      	lsls	r3, r2, #30
9000b6f6:	d50f      	bpl.n	9000b718 <HAL_RCCEx_PeriphCLKConfig+0x734>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
9000b6f8:	4bb2      	ldr	r3, [pc, #712]	@ (9000b9c4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
9000b6fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000b6fc:	f003 0303 	and.w	r3, r3, #3
9000b700:	2b03      	cmp	r3, #3
9000b702:	f000 816c 	beq.w	9000b9de <HAL_RCCEx_PeriphCLKConfig+0x9fa>
9000b706:	2101      	movs	r1, #1
9000b708:	f104 0008 	add.w	r0, r4, #8
9000b70c:	f7ff fb86 	bl	9000ae1c <RCCEx_PLL2_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
9000b710:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
9000b712:	2800      	cmp	r0, #0
9000b714:	f040 81f0 	bne.w	9000baf8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
9000b718:	0757      	lsls	r7, r2, #29
9000b71a:	d50f      	bpl.n	9000b73c <HAL_RCCEx_PeriphCLKConfig+0x758>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
9000b71c:	4ba9      	ldr	r3, [pc, #676]	@ (9000b9c4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
9000b71e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000b720:	f003 0303 	and.w	r3, r3, #3
9000b724:	2b03      	cmp	r3, #3
9000b726:	f000 815c 	beq.w	9000b9e2 <HAL_RCCEx_PeriphCLKConfig+0x9fe>
9000b72a:	2102      	movs	r1, #2
9000b72c:	f104 0008 	add.w	r0, r4, #8
9000b730:	f7ff fb74 	bl	9000ae1c <RCCEx_PLL2_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
9000b734:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
9000b736:	2800      	cmp	r0, #0
9000b738:	f040 81d8 	bne.w	9000baec <HAL_RCCEx_PeriphCLKConfig+0xb08>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
9000b73c:	0716      	lsls	r6, r2, #28
9000b73e:	d50f      	bpl.n	9000b760 <HAL_RCCEx_PeriphCLKConfig+0x77c>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
9000b740:	4ba0      	ldr	r3, [pc, #640]	@ (9000b9c4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
9000b742:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000b744:	f003 0303 	and.w	r3, r3, #3
9000b748:	2b03      	cmp	r3, #3
9000b74a:	f000 814c 	beq.w	9000b9e6 <HAL_RCCEx_PeriphCLKConfig+0xa02>
9000b74e:	2100      	movs	r1, #0
9000b750:	f104 0028 	add.w	r0, r4, #40	@ 0x28
9000b754:	f7ff fbd4 	bl	9000af00 <RCCEx_PLL3_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
9000b758:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
9000b75a:	2800      	cmp	r0, #0
9000b75c:	f040 81c8 	bne.w	9000baf0 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
9000b760:	06d0      	lsls	r0, r2, #27
9000b762:	d54a      	bpl.n	9000b7fa <HAL_RCCEx_PeriphCLKConfig+0x816>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
9000b764:	4b97      	ldr	r3, [pc, #604]	@ (9000b9c4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
9000b766:	f104 0628 	add.w	r6, r4, #40	@ 0x28
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
9000b76a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000b76c:	f003 0303 	and.w	r3, r3, #3
9000b770:	2b03      	cmp	r3, #3
9000b772:	f000 813a 	beq.w	9000b9ea <HAL_RCCEx_PeriphCLKConfig+0xa06>
9000b776:	2101      	movs	r1, #1
9000b778:	4630      	mov	r0, r6
9000b77a:	f7ff fbc1 	bl	9000af00 <RCCEx_PLL3_Config.part.0>
    if (ret == HAL_OK)
9000b77e:	2800      	cmp	r0, #0
9000b780:	d03a      	beq.n	9000b7f8 <HAL_RCCEx_PeriphCLKConfig+0x814>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
9000b782:	6863      	ldr	r3, [r4, #4]
9000b784:	069a      	lsls	r2, r3, #26
9000b786:	f140 808c 	bpl.w	9000b8a2 <HAL_RCCEx_PeriphCLKConfig+0x8be>
9000b78a:	4605      	mov	r5, r0
9000b78c:	e039      	b.n	9000b802 <HAL_RCCEx_PeriphCLKConfig+0x81e>
    switch (PeriphClkInit->Lptim1ClockSelection)
9000b78e:	f021 5080 	bic.w	r0, r1, #268435456	@ 0x10000000
9000b792:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
9000b796:	f43f ae7a 	beq.w	9000b48e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
9000b79a:	f1b1 5f40 	cmp.w	r1, #805306368	@ 0x30000000
9000b79e:	f43f ae76 	beq.w	9000b48e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
9000b7a2:	2601      	movs	r6, #1
9000b7a4:	4635      	mov	r5, r6
9000b7a6:	e67d      	b.n	9000b4a4 <HAL_RCCEx_PeriphCLKConfig+0x4c0>
    switch (PeriphClkInit->Lptim2ClockSelection)
9000b7a8:	f421 6080 	bic.w	r0, r1, #1024	@ 0x400
9000b7ac:	f5b0 5f80 	cmp.w	r0, #4096	@ 0x1000
9000b7b0:	f43f ae96 	beq.w	9000b4e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
9000b7b4:	f5b1 6f40 	cmp.w	r1, #3072	@ 0xc00
9000b7b8:	f43f ae92 	beq.w	9000b4e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
9000b7bc:	2601      	movs	r6, #1
9000b7be:	4635      	mov	r5, r6
9000b7c0:	e699      	b.n	9000b4f6 <HAL_RCCEx_PeriphCLKConfig+0x512>
    switch (PeriphClkInit->Lptim345ClockSelection)
9000b7c2:	f421 5000 	bic.w	r0, r1, #8192	@ 0x2000
9000b7c6:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
9000b7ca:	f43f aeb2 	beq.w	9000b532 <HAL_RCCEx_PeriphCLKConfig+0x54e>
9000b7ce:	f5b1 4fc0 	cmp.w	r1, #24576	@ 0x6000
9000b7d2:	f43f aeae 	beq.w	9000b532 <HAL_RCCEx_PeriphCLKConfig+0x54e>
9000b7d6:	2601      	movs	r6, #1
9000b7d8:	4635      	mov	r5, r6
9000b7da:	e6b5      	b.n	9000b548 <HAL_RCCEx_PeriphCLKConfig+0x564>
    switch (PeriphClkInit->RngClockSelection)
9000b7dc:	2900      	cmp	r1, #0
9000b7de:	f47f af37 	bne.w	9000b650 <HAL_RCCEx_PeriphCLKConfig+0x66c>
    if (ret == HAL_OK)
9000b7e2:	2d00      	cmp	r5, #0
9000b7e4:	f47f af35 	bne.w	9000b652 <HAL_RCCEx_PeriphCLKConfig+0x66e>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
9000b7e8:	4d76      	ldr	r5, [pc, #472]	@ (9000b9c4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
9000b7ea:	6d68      	ldr	r0, [r5, #84]	@ 0x54
9000b7ec:	f420 7040 	bic.w	r0, r0, #768	@ 0x300
9000b7f0:	4301      	orrs	r1, r0
9000b7f2:	6569      	str	r1, [r5, #84]	@ 0x54
      status = HAL_ERROR;
9000b7f4:	4635      	mov	r5, r6
9000b7f6:	e72c      	b.n	9000b652 <HAL_RCCEx_PeriphCLKConfig+0x66e>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
9000b7f8:	6862      	ldr	r2, [r4, #4]
9000b7fa:	0693      	lsls	r3, r2, #26
9000b7fc:	d50d      	bpl.n	9000b81a <HAL_RCCEx_PeriphCLKConfig+0x836>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
9000b7fe:	f104 0628 	add.w	r6, r4, #40	@ 0x28
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
9000b802:	4b70      	ldr	r3, [pc, #448]	@ (9000b9c4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
9000b804:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000b806:	f003 0303 	and.w	r3, r3, #3
9000b80a:	2b03      	cmp	r3, #3
9000b80c:	d049      	beq.n	9000b8a2 <HAL_RCCEx_PeriphCLKConfig+0x8be>
9000b80e:	2102      	movs	r1, #2
9000b810:	4630      	mov	r0, r6
9000b812:	f7ff fb75 	bl	9000af00 <RCCEx_PLL3_Config.part.0>
    if (ret == HAL_OK)
9000b816:	2800      	cmp	r0, #0
9000b818:	d143      	bne.n	9000b8a2 <HAL_RCCEx_PeriphCLKConfig+0x8be>
  if (status == HAL_OK)
9000b81a:	1e28      	subs	r0, r5, #0
9000b81c:	bf18      	it	ne
9000b81e:	2001      	movne	r0, #1
}
9000b820:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
9000b824:	2601      	movs	r6, #1
9000b826:	4635      	mov	r5, r6
9000b828:	e6f0      	b.n	9000b60c <HAL_RCCEx_PeriphCLKConfig+0x628>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000b82a:	4866      	ldr	r0, [pc, #408]	@ (9000b9c4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
9000b82c:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
9000b82e:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
9000b832:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
9000b834:	2d00      	cmp	r5, #0
9000b836:	f040 8140 	bne.w	9000baba <HAL_RCCEx_PeriphCLKConfig+0xad6>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
9000b83a:	4f62      	ldr	r7, [pc, #392]	@ (9000b9c4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
9000b83c:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
9000b840:	6d79      	ldr	r1, [r7, #84]	@ 0x54
9000b842:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
9000b846:	4301      	orrs	r1, r0
9000b848:	6579      	str	r1, [r7, #84]	@ 0x54
9000b84a:	e6bc      	b.n	9000b5c6 <HAL_RCCEx_PeriphCLKConfig+0x5e2>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000b84c:	485d      	ldr	r0, [pc, #372]	@ (9000b9c4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
9000b84e:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
9000b850:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
9000b854:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
9000b856:	2d00      	cmp	r5, #0
9000b858:	f040 812c 	bne.w	9000bab4 <HAL_RCCEx_PeriphCLKConfig+0xad0>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
9000b85c:	4f59      	ldr	r7, [pc, #356]	@ (9000b9c4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
9000b85e:	6f20      	ldr	r0, [r4, #112]	@ 0x70
9000b860:	6d39      	ldr	r1, [r7, #80]	@ 0x50
9000b862:	f021 5140 	bic.w	r1, r1, #805306368	@ 0x30000000
9000b866:	4301      	orrs	r1, r0
9000b868:	6539      	str	r1, [r7, #80]	@ 0x50
9000b86a:	e516      	b.n	9000b29a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
9000b86c:	4955      	ldr	r1, [pc, #340]	@ (9000b9c4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
9000b86e:	6a89      	ldr	r1, [r1, #40]	@ 0x28
9000b870:	f001 0103 	and.w	r1, r1, #3
9000b874:	2903      	cmp	r1, #3
9000b876:	f43f ae92 	beq.w	9000b59e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
9000b87a:	2102      	movs	r1, #2
9000b87c:	f104 0028 	add.w	r0, r4, #40	@ 0x28
9000b880:	f7ff fb3e 	bl	9000af00 <RCCEx_PLL3_Config.part.0>
9000b884:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
9000b886:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000b88a:	2d00      	cmp	r5, #0
9000b88c:	f040 8151 	bne.w	9000bb32 <HAL_RCCEx_PeriphCLKConfig+0xb4e>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
9000b890:	4f4c      	ldr	r7, [pc, #304]	@ (9000b9c4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
9000b892:	f8d4 00a4 	ldr.w	r0, [r4, #164]	@ 0xa4
9000b896:	6db9      	ldr	r1, [r7, #88]	@ 0x58
9000b898:	f421 3140 	bic.w	r1, r1, #196608	@ 0x30000
9000b89c:	4301      	orrs	r1, r0
9000b89e:	65b9      	str	r1, [r7, #88]	@ 0x58
9000b8a0:	e67f      	b.n	9000b5a2 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  return HAL_ERROR;
9000b8a2:	2001      	movs	r0, #1
}
9000b8a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
9000b8a8:	4946      	ldr	r1, [pc, #280]	@ (9000b9c4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
9000b8aa:	6a89      	ldr	r1, [r1, #40]	@ 0x28
9000b8ac:	f001 0103 	and.w	r1, r1, #3
9000b8b0:	2903      	cmp	r1, #3
9000b8b2:	f43f ad86 	beq.w	9000b3c2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
9000b8b6:	2101      	movs	r1, #1
9000b8b8:	f104 0008 	add.w	r0, r4, #8
9000b8bc:	f7ff faae 	bl	9000ae1c <RCCEx_PLL2_Config.part.0>
9000b8c0:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
9000b8c2:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000b8c6:	2d00      	cmp	r5, #0
9000b8c8:	f040 8137 	bne.w	9000bb3a <HAL_RCCEx_PeriphCLKConfig+0xb56>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
9000b8cc:	4f3d      	ldr	r7, [pc, #244]	@ (9000b9c4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
9000b8ce:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
9000b8d0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
9000b8d2:	f021 0138 	bic.w	r1, r1, #56	@ 0x38
9000b8d6:	4301      	orrs	r1, r0
9000b8d8:	6579      	str	r1, [r7, #84]	@ 0x54
9000b8da:	e574      	b.n	9000b3c6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
9000b8dc:	2601      	movs	r6, #1
9000b8de:	f7ff bbb0 	b.w	9000b042 <HAL_RCCEx_PeriphCLKConfig+0x5e>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
9000b8e2:	4f39      	ldr	r7, [pc, #228]	@ (9000b9c8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>)
9000b8e4:	683b      	ldr	r3, [r7, #0]
9000b8e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
9000b8ea:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
9000b8ec:	f7fb fc40 	bl	90007170 <HAL_GetTick>
9000b8f0:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
9000b8f2:	e006      	b.n	9000b902 <HAL_RCCEx_PeriphCLKConfig+0x91e>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
9000b8f4:	f7fb fc3c 	bl	90007170 <HAL_GetTick>
9000b8f8:	eba0 0008 	sub.w	r0, r0, r8
9000b8fc:	2864      	cmp	r0, #100	@ 0x64
9000b8fe:	f200 8277 	bhi.w	9000bdf0 <HAL_RCCEx_PeriphCLKConfig+0xe0c>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
9000b902:	683b      	ldr	r3, [r7, #0]
9000b904:	05da      	lsls	r2, r3, #23
9000b906:	d5f5      	bpl.n	9000b8f4 <HAL_RCCEx_PeriphCLKConfig+0x910>
    if (ret == HAL_OK)
9000b908:	2d00      	cmp	r5, #0
9000b90a:	f040 8272 	bne.w	9000bdf2 <HAL_RCCEx_PeriphCLKConfig+0xe0e>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
9000b90e:	4a2d      	ldr	r2, [pc, #180]	@ (9000b9c4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
9000b910:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
9000b914:	6f11      	ldr	r1, [r2, #112]	@ 0x70
9000b916:	4059      	eors	r1, r3
9000b918:	f411 7f40 	tst.w	r1, #768	@ 0x300
9000b91c:	d00b      	beq.n	9000b936 <HAL_RCCEx_PeriphCLKConfig+0x952>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
9000b91e:	6f11      	ldr	r1, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
9000b920:	6f10      	ldr	r0, [r2, #112]	@ 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
9000b922:	f421 7140 	bic.w	r1, r1, #768	@ 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
9000b926:	f440 3080 	orr.w	r0, r0, #65536	@ 0x10000
9000b92a:	6710      	str	r0, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
9000b92c:	6f10      	ldr	r0, [r2, #112]	@ 0x70
9000b92e:	f420 3080 	bic.w	r0, r0, #65536	@ 0x10000
9000b932:	6710      	str	r0, [r2, #112]	@ 0x70
        RCC->BDCR = tmpreg;
9000b934:	6711      	str	r1, [r2, #112]	@ 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
9000b936:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
9000b93a:	f000 8285 	beq.w	9000be48 <HAL_RCCEx_PeriphCLKConfig+0xe64>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
9000b93e:	f403 7240 	and.w	r2, r3, #768	@ 0x300
9000b942:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
9000b946:	f000 8293 	beq.w	9000be70 <HAL_RCCEx_PeriphCLKConfig+0xe8c>
9000b94a:	491e      	ldr	r1, [pc, #120]	@ (9000b9c4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
9000b94c:	690a      	ldr	r2, [r1, #16]
9000b94e:	f422 527c 	bic.w	r2, r2, #16128	@ 0x3f00
9000b952:	610a      	str	r2, [r1, #16]
9000b954:	481b      	ldr	r0, [pc, #108]	@ (9000b9c4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
9000b956:	f3c3 010b 	ubfx	r1, r3, #0, #12
9000b95a:	6f07      	ldr	r7, [r0, #112]	@ 0x70
9000b95c:	4339      	orrs	r1, r7
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
9000b95e:	e9d4 3200 	ldrd	r3, r2, [r4]
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
9000b962:	6701      	str	r1, [r0, #112]	@ 0x70
9000b964:	e4fd      	b.n	9000b362 <HAL_RCCEx_PeriphCLKConfig+0x37e>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000b966:	4817      	ldr	r0, [pc, #92]	@ (9000b9c4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
9000b968:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
9000b96a:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
9000b96e:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
9000b970:	2d00      	cmp	r5, #0
9000b972:	f040 80b5 	bne.w	9000bae0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
9000b976:	f7ff bbe7 	b.w	9000b148 <HAL_RCCEx_PeriphCLKConfig+0x164>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000b97a:	4812      	ldr	r0, [pc, #72]	@ (9000b9c4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
9000b97c:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
9000b97e:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
9000b982:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
9000b984:	2d00      	cmp	r5, #0
9000b986:	f040 80ae 	bne.w	9000bae6 <HAL_RCCEx_PeriphCLKConfig+0xb02>
9000b98a:	e422      	b.n	9000b1d2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000b98c:	480d      	ldr	r0, [pc, #52]	@ (9000b9c4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
9000b98e:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
9000b990:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
9000b994:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
9000b996:	2d00      	cmp	r5, #0
9000b998:	f040 809f 	bne.w	9000bada <HAL_RCCEx_PeriphCLKConfig+0xaf6>
9000b99c:	f7ff bba9 	b.w	9000b0f2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000b9a0:	4808      	ldr	r0, [pc, #32]	@ (9000b9c4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
9000b9a2:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
9000b9a4:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
9000b9a8:	62c1      	str	r1, [r0, #44]	@ 0x2c
        break;
9000b9aa:	4635      	mov	r5, r6
    if (ret == HAL_OK)
9000b9ac:	2d00      	cmp	r5, #0
9000b9ae:	f040 81ad 	bne.w	9000bd0c <HAL_RCCEx_PeriphCLKConfig+0xd28>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
9000b9b2:	4f04      	ldr	r7, [pc, #16]	@ (9000b9c4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
9000b9b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
9000b9b6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
9000b9b8:	f021 0107 	bic.w	r1, r1, #7
9000b9bc:	4301      	orrs	r1, r0
9000b9be:	6539      	str	r1, [r7, #80]	@ 0x50
9000b9c0:	f7ff bb4d 	b.w	9000b05e <HAL_RCCEx_PeriphCLKConfig+0x7a>
9000b9c4:	58024400 	.word	0x58024400
9000b9c8:	58024800 	.word	0x58024800
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000b9cc:	48bb      	ldr	r0, [pc, #748]	@ (9000bcbc <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
9000b9ce:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
9000b9d0:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
9000b9d4:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
9000b9d6:	2d00      	cmp	r5, #0
9000b9d8:	d17c      	bne.n	9000bad4 <HAL_RCCEx_PeriphCLKConfig+0xaf0>
9000b9da:	f7ff bb60 	b.w	9000b09e <HAL_RCCEx_PeriphCLKConfig+0xba>
    return HAL_ERROR;
9000b9de:	2501      	movs	r5, #1
9000b9e0:	e69a      	b.n	9000b718 <HAL_RCCEx_PeriphCLKConfig+0x734>
9000b9e2:	2501      	movs	r5, #1
9000b9e4:	e6aa      	b.n	9000b73c <HAL_RCCEx_PeriphCLKConfig+0x758>
    return HAL_ERROR;
9000b9e6:	2501      	movs	r5, #1
9000b9e8:	e6ba      	b.n	9000b760 <HAL_RCCEx_PeriphCLKConfig+0x77c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
9000b9ea:	0691      	lsls	r1, r2, #26
9000b9ec:	f57f af59 	bpl.w	9000b8a2 <HAL_RCCEx_PeriphCLKConfig+0x8be>
    return HAL_ERROR;
9000b9f0:	2501      	movs	r5, #1
9000b9f2:	e706      	b.n	9000b802 <HAL_RCCEx_PeriphCLKConfig+0x81e>
    return HAL_ERROR;
9000b9f4:	2501      	movs	r5, #1
9000b9f6:	e67d      	b.n	9000b6f4 <HAL_RCCEx_PeriphCLKConfig+0x710>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
9000b9f8:	49b0      	ldr	r1, [pc, #704]	@ (9000bcbc <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
9000b9fa:	6a89      	ldr	r1, [r1, #40]	@ 0x28
9000b9fc:	f001 0103 	and.w	r1, r1, #3
9000ba00:	2903      	cmp	r1, #3
9000ba02:	f000 820a 	beq.w	9000be1a <HAL_RCCEx_PeriphCLKConfig+0xe36>
9000ba06:	2102      	movs	r1, #2
9000ba08:	f104 0028 	add.w	r0, r4, #40	@ 0x28
9000ba0c:	f7ff fa78 	bl	9000af00 <RCCEx_PLL3_Config.part.0>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
9000ba10:	2800      	cmp	r0, #0
9000ba12:	f000 820f 	beq.w	9000be34 <HAL_RCCEx_PeriphCLKConfig+0xe50>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
9000ba16:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
        status = HAL_ERROR;
9000ba1a:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
9000ba1c:	e9d4 3200 	ldrd	r3, r2, [r4]
9000ba20:	e59a      	b.n	9000b558 <HAL_RCCEx_PeriphCLKConfig+0x574>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
9000ba22:	49a6      	ldr	r1, [pc, #664]	@ (9000bcbc <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
9000ba24:	6a89      	ldr	r1, [r1, #40]	@ 0x28
9000ba26:	f001 0103 	and.w	r1, r1, #3
9000ba2a:	2903      	cmp	r1, #3
9000ba2c:	f000 81f8 	beq.w	9000be20 <HAL_RCCEx_PeriphCLKConfig+0xe3c>
9000ba30:	2102      	movs	r1, #2
9000ba32:	f104 0028 	add.w	r0, r4, #40	@ 0x28
9000ba36:	f7ff fa63 	bl	9000af00 <RCCEx_PLL3_Config.part.0>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
9000ba3a:	2800      	cmp	r0, #0
9000ba3c:	f040 81f3 	bne.w	9000be26 <HAL_RCCEx_PeriphCLKConfig+0xe42>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
9000ba40:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
9000ba44:	e9d4 3200 	ldrd	r3, r2, [r4]
9000ba48:	e594      	b.n	9000b574 <HAL_RCCEx_PeriphCLKConfig+0x590>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000ba4a:	4f9c      	ldr	r7, [pc, #624]	@ (9000bcbc <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
9000ba4c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
9000ba4e:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
9000ba52:	62f8      	str	r0, [r7, #44]	@ 0x2c
    if (ret == HAL_OK)
9000ba54:	2d00      	cmp	r5, #0
9000ba56:	f47f adfc 	bne.w	9000b652 <HAL_RCCEx_PeriphCLKConfig+0x66e>
9000ba5a:	e6c5      	b.n	9000b7e8 <HAL_RCCEx_PeriphCLKConfig+0x804>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000ba5c:	4897      	ldr	r0, [pc, #604]	@ (9000bcbc <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
9000ba5e:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
9000ba60:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
9000ba64:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
9000ba66:	2d00      	cmp	r5, #0
9000ba68:	f43f adc9 	beq.w	9000b5fe <HAL_RCCEx_PeriphCLKConfig+0x61a>
9000ba6c:	462e      	mov	r6, r5
9000ba6e:	e5cd      	b.n	9000b60c <HAL_RCCEx_PeriphCLKConfig+0x628>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
9000ba70:	4992      	ldr	r1, [pc, #584]	@ (9000bcbc <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
9000ba72:	6a89      	ldr	r1, [r1, #40]	@ 0x28
9000ba74:	f001 0103 	and.w	r1, r1, #3
9000ba78:	2903      	cmp	r1, #3
9000ba7a:	f43f ac0c 	beq.w	9000b296 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
9000ba7e:	2101      	movs	r1, #1
9000ba80:	f104 0008 	add.w	r0, r4, #8
9000ba84:	f7ff f9ca 	bl	9000ae1c <RCCEx_PLL2_Config.part.0>
9000ba88:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
9000ba8a:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000ba8e:	b98d      	cbnz	r5, 9000bab4 <HAL_RCCEx_PeriphCLKConfig+0xad0>
9000ba90:	e6e4      	b.n	9000b85c <HAL_RCCEx_PeriphCLKConfig+0x878>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
9000ba92:	488a      	ldr	r0, [pc, #552]	@ (9000bcbc <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
9000ba94:	6a80      	ldr	r0, [r0, #40]	@ 0x28
9000ba96:	f000 0003 	and.w	r0, r0, #3
9000ba9a:	2803      	cmp	r0, #3
9000ba9c:	f43f ad7f 	beq.w	9000b59e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
9000baa0:	f104 0008 	add.w	r0, r4, #8
9000baa4:	f7ff f9ba 	bl	9000ae1c <RCCEx_PLL2_Config.part.0>
9000baa8:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
9000baaa:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000baae:	2d00      	cmp	r5, #0
9000bab0:	d13f      	bne.n	9000bb32 <HAL_RCCEx_PeriphCLKConfig+0xb4e>
9000bab2:	e6ed      	b.n	9000b890 <HAL_RCCEx_PeriphCLKConfig+0x8ac>
9000bab4:	462e      	mov	r6, r5
9000bab6:	f7ff bbf0 	b.w	9000b29a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
9000baba:	462e      	mov	r6, r5
9000babc:	e583      	b.n	9000b5c6 <HAL_RCCEx_PeriphCLKConfig+0x5e2>
9000babe:	462e      	mov	r6, r5
9000bac0:	f7ff bb65 	b.w	9000b18e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
9000bac4:	4f7d      	ldr	r7, [pc, #500]	@ (9000bcbc <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
9000bac6:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
9000bac8:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
9000baca:	f021 0103 	bic.w	r1, r1, #3
9000bace:	4301      	orrs	r1, r0
9000bad0:	64f9      	str	r1, [r7, #76]	@ 0x4c
9000bad2:	e443      	b.n	9000b35c <HAL_RCCEx_PeriphCLKConfig+0x378>
9000bad4:	462e      	mov	r6, r5
9000bad6:	f7ff bae9 	b.w	9000b0ac <HAL_RCCEx_PeriphCLKConfig+0xc8>
9000bada:	462e      	mov	r6, r5
9000badc:	f7ff bb11 	b.w	9000b102 <HAL_RCCEx_PeriphCLKConfig+0x11e>
9000bae0:	462e      	mov	r6, r5
9000bae2:	f7ff bb39 	b.w	9000b158 <HAL_RCCEx_PeriphCLKConfig+0x174>
9000bae6:	462e      	mov	r6, r5
9000bae8:	f7ff bb7a 	b.w	9000b1e0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
9000baec:	4605      	mov	r5, r0
9000baee:	e625      	b.n	9000b73c <HAL_RCCEx_PeriphCLKConfig+0x758>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
9000baf0:	4605      	mov	r5, r0
9000baf2:	e635      	b.n	9000b760 <HAL_RCCEx_PeriphCLKConfig+0x77c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
9000baf4:	4605      	mov	r5, r0
9000baf6:	e5fd      	b.n	9000b6f4 <HAL_RCCEx_PeriphCLKConfig+0x710>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
9000baf8:	4605      	mov	r5, r0
9000bafa:	e60d      	b.n	9000b718 <HAL_RCCEx_PeriphCLKConfig+0x734>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
9000bafc:	4f6f      	ldr	r7, [pc, #444]	@ (9000bcbc <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
9000bafe:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
9000bb00:	6d79      	ldr	r1, [r7, #84]	@ 0x54
9000bb02:	f021 0107 	bic.w	r1, r1, #7
9000bb06:	4301      	orrs	r1, r0
9000bb08:	6579      	str	r1, [r7, #84]	@ 0x54
9000bb0a:	e47d      	b.n	9000b408 <HAL_RCCEx_PeriphCLKConfig+0x424>
9000bb0c:	462e      	mov	r6, r5
9000bb0e:	f7ff bb8e 	b.w	9000b22e <HAL_RCCEx_PeriphCLKConfig+0x24a>
9000bb12:	462e      	mov	r6, r5
9000bb14:	f7ff bbb1 	b.w	9000b27a <HAL_RCCEx_PeriphCLKConfig+0x296>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
9000bb18:	4f68      	ldr	r7, [pc, #416]	@ (9000bcbc <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
9000bb1a:	f8d4 0094 	ldr.w	r0, [r4, #148]	@ 0x94
9000bb1e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
9000bb20:	f021 0107 	bic.w	r1, r1, #7
9000bb24:	4301      	orrs	r1, r0
9000bb26:	65b9      	str	r1, [r7, #88]	@ 0x58
9000bb28:	e493      	b.n	9000b452 <HAL_RCCEx_PeriphCLKConfig+0x46e>
9000bb2a:	462e      	mov	r6, r5
9000bb2c:	e4ba      	b.n	9000b4a4 <HAL_RCCEx_PeriphCLKConfig+0x4c0>
9000bb2e:	462e      	mov	r6, r5
9000bb30:	e50a      	b.n	9000b548 <HAL_RCCEx_PeriphCLKConfig+0x564>
9000bb32:	462e      	mov	r6, r5
9000bb34:	e535      	b.n	9000b5a2 <HAL_RCCEx_PeriphCLKConfig+0x5be>
9000bb36:	462e      	mov	r6, r5
9000bb38:	e4dd      	b.n	9000b4f6 <HAL_RCCEx_PeriphCLKConfig+0x512>
9000bb3a:	462e      	mov	r6, r5
9000bb3c:	e443      	b.n	9000b3c6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
9000bb3e:	495f      	ldr	r1, [pc, #380]	@ (9000bcbc <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
9000bb40:	6a89      	ldr	r1, [r1, #40]	@ 0x28
9000bb42:	f001 0103 	and.w	r1, r1, #3
9000bb46:	2903      	cmp	r1, #3
9000bb48:	f43f ae2b 	beq.w	9000b7a2 <HAL_RCCEx_PeriphCLKConfig+0x7be>
9000bb4c:	2102      	movs	r1, #2
9000bb4e:	f104 0028 	add.w	r0, r4, #40	@ 0x28
9000bb52:	f7ff f9d5 	bl	9000af00 <RCCEx_PLL3_Config.part.0>
9000bb56:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
9000bb58:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000bb5c:	2d00      	cmp	r5, #0
9000bb5e:	d1e4      	bne.n	9000bb2a <HAL_RCCEx_PeriphCLKConfig+0xb46>
9000bb60:	e498      	b.n	9000b494 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
9000bb62:	4956      	ldr	r1, [pc, #344]	@ (9000bcbc <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
9000bb64:	6a89      	ldr	r1, [r1, #40]	@ 0x28
9000bb66:	f001 0103 	and.w	r1, r1, #3
9000bb6a:	2903      	cmp	r1, #3
9000bb6c:	f43f abc7 	beq.w	9000b2fe <HAL_RCCEx_PeriphCLKConfig+0x31a>
9000bb70:	2102      	movs	r1, #2
9000bb72:	f104 0008 	add.w	r0, r4, #8
9000bb76:	f7ff f951 	bl	9000ae1c <RCCEx_PLL2_Config.part.0>
9000bb7a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
9000bb7c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000bb80:	2d00      	cmp	r5, #0
9000bb82:	d19c      	bne.n	9000babe <HAL_RCCEx_PeriphCLKConfig+0xada>
9000bb84:	f7ff bafc 	b.w	9000b180 <HAL_RCCEx_PeriphCLKConfig+0x19c>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
9000bb88:	494c      	ldr	r1, [pc, #304]	@ (9000bcbc <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
9000bb8a:	6a89      	ldr	r1, [r1, #40]	@ 0x28
9000bb8c:	f001 0103 	and.w	r1, r1, #3
9000bb90:	2903      	cmp	r1, #3
9000bb92:	f43f ad16 	beq.w	9000b5c2 <HAL_RCCEx_PeriphCLKConfig+0x5de>
9000bb96:	2101      	movs	r1, #1
9000bb98:	f104 0028 	add.w	r0, r4, #40	@ 0x28
9000bb9c:	f7ff f9b0 	bl	9000af00 <RCCEx_PLL3_Config.part.0>
9000bba0:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
9000bba2:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000bba6:	2d00      	cmp	r5, #0
9000bba8:	d187      	bne.n	9000baba <HAL_RCCEx_PeriphCLKConfig+0xad6>
9000bbaa:	e646      	b.n	9000b83a <HAL_RCCEx_PeriphCLKConfig+0x856>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
9000bbac:	4943      	ldr	r1, [pc, #268]	@ (9000bcbc <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
9000bbae:	6a89      	ldr	r1, [r1, #40]	@ 0x28
9000bbb0:	f001 0103 	and.w	r1, r1, #3
9000bbb4:	2903      	cmp	r1, #3
9000bbb6:	f43f ae0e 	beq.w	9000b7d6 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
9000bbba:	2102      	movs	r1, #2
9000bbbc:	f104 0028 	add.w	r0, r4, #40	@ 0x28
9000bbc0:	f7ff f99e 	bl	9000af00 <RCCEx_PLL3_Config.part.0>
9000bbc4:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
9000bbc6:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000bbca:	2d00      	cmp	r5, #0
9000bbcc:	d1af      	bne.n	9000bb2e <HAL_RCCEx_PeriphCLKConfig+0xb4a>
9000bbce:	e4b3      	b.n	9000b538 <HAL_RCCEx_PeriphCLKConfig+0x554>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
9000bbd0:	493a      	ldr	r1, [pc, #232]	@ (9000bcbc <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
9000bbd2:	6a89      	ldr	r1, [r1, #40]	@ 0x28
9000bbd4:	f001 0103 	and.w	r1, r1, #3
9000bbd8:	2903      	cmp	r1, #3
9000bbda:	f000 8131 	beq.w	9000be40 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
9000bbde:	2102      	movs	r1, #2
9000bbe0:	f104 0008 	add.w	r0, r4, #8
9000bbe4:	f7ff f91a 	bl	9000ae1c <RCCEx_PLL2_Config.part.0>
9000bbe8:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
9000bbea:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000bbee:	2d00      	cmp	r5, #0
9000bbf0:	f47f abb3 	bne.w	9000b35a <HAL_RCCEx_PeriphCLKConfig+0x376>
9000bbf4:	e766      	b.n	9000bac4 <HAL_RCCEx_PeriphCLKConfig+0xae0>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
9000bbf6:	4931      	ldr	r1, [pc, #196]	@ (9000bcbc <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
9000bbf8:	6a89      	ldr	r1, [r1, #40]	@ 0x28
9000bbfa:	f001 0103 	and.w	r1, r1, #3
9000bbfe:	2903      	cmp	r1, #3
9000bc00:	f43f addc 	beq.w	9000b7bc <HAL_RCCEx_PeriphCLKConfig+0x7d8>
9000bc04:	2102      	movs	r1, #2
9000bc06:	f104 0028 	add.w	r0, r4, #40	@ 0x28
9000bc0a:	f7ff f979 	bl	9000af00 <RCCEx_PLL3_Config.part.0>
9000bc0e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
9000bc10:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000bc14:	2d00      	cmp	r5, #0
9000bc16:	d18e      	bne.n	9000bb36 <HAL_RCCEx_PeriphCLKConfig+0xb52>
9000bc18:	e465      	b.n	9000b4e6 <HAL_RCCEx_PeriphCLKConfig+0x502>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
9000bc1a:	4928      	ldr	r1, [pc, #160]	@ (9000bcbc <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
9000bc1c:	6a89      	ldr	r1, [r1, #40]	@ 0x28
9000bc1e:	f001 0103 	and.w	r1, r1, #3
9000bc22:	2903      	cmp	r1, #3
9000bc24:	f43f ab83 	beq.w	9000b32e <HAL_RCCEx_PeriphCLKConfig+0x34a>
9000bc28:	2101      	movs	r1, #1
9000bc2a:	f104 0028 	add.w	r0, r4, #40	@ 0x28
9000bc2e:	f7ff f967 	bl	9000af00 <RCCEx_PLL3_Config.part.0>
9000bc32:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
9000bc34:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000bc38:	2d00      	cmp	r5, #0
9000bc3a:	f47f af67 	bne.w	9000bb0c <HAL_RCCEx_PeriphCLKConfig+0xb28>
9000bc3e:	f7ff baef 	b.w	9000b220 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
9000bc42:	491e      	ldr	r1, [pc, #120]	@ (9000bcbc <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
9000bc44:	6a89      	ldr	r1, [r1, #40]	@ 0x28
9000bc46:	f001 0103 	and.w	r1, r1, #3
9000bc4a:	2903      	cmp	r1, #3
9000bc4c:	f43f ab7a 	beq.w	9000b344 <HAL_RCCEx_PeriphCLKConfig+0x360>
9000bc50:	2101      	movs	r1, #1
9000bc52:	f104 0028 	add.w	r0, r4, #40	@ 0x28
9000bc56:	f7ff f953 	bl	9000af00 <RCCEx_PLL3_Config.part.0>
9000bc5a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
9000bc5c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000bc60:	2d00      	cmp	r5, #0
9000bc62:	f47f af56 	bne.w	9000bb12 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
9000bc66:	f7ff bb00 	b.w	9000b26a <HAL_RCCEx_PeriphCLKConfig+0x286>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
9000bc6a:	4914      	ldr	r1, [pc, #80]	@ (9000bcbc <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
9000bc6c:	6a89      	ldr	r1, [r1, #40]	@ 0x28
9000bc6e:	f001 0103 	and.w	r1, r1, #3
9000bc72:	2903      	cmp	r1, #3
9000bc74:	f43f ab3d 	beq.w	9000b2f2 <HAL_RCCEx_PeriphCLKConfig+0x30e>
9000bc78:	2100      	movs	r1, #0
9000bc7a:	f104 0028 	add.w	r0, r4, #40	@ 0x28
9000bc7e:	f7ff f93f 	bl	9000af00 <RCCEx_PLL3_Config.part.0>
9000bc82:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
9000bc84:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000bc88:	2d00      	cmp	r5, #0
9000bc8a:	f47f af29 	bne.w	9000bae0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
9000bc8e:	f7ff ba5b 	b.w	9000b148 <HAL_RCCEx_PeriphCLKConfig+0x164>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
9000bc92:	490a      	ldr	r1, [pc, #40]	@ (9000bcbc <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
9000bc94:	6a89      	ldr	r1, [r1, #40]	@ 0x28
9000bc96:	f001 0103 	and.w	r1, r1, #3
9000bc9a:	2903      	cmp	r1, #3
9000bc9c:	f43f ab3a 	beq.w	9000b314 <HAL_RCCEx_PeriphCLKConfig+0x330>
9000bca0:	2100      	movs	r1, #0
9000bca2:	f104 0028 	add.w	r0, r4, #40	@ 0x28
9000bca6:	f7ff f92b 	bl	9000af00 <RCCEx_PLL3_Config.part.0>
9000bcaa:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
9000bcac:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000bcb0:	2d00      	cmp	r5, #0
9000bcb2:	f47f af18 	bne.w	9000bae6 <HAL_RCCEx_PeriphCLKConfig+0xb02>
9000bcb6:	f7ff ba8c 	b.w	9000b1d2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
9000bcba:	bf00      	nop
9000bcbc:	58024400 	.word	0x58024400
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
9000bcc0:	4973      	ldr	r1, [pc, #460]	@ (9000be90 <HAL_RCCEx_PeriphCLKConfig+0xeac>)
9000bcc2:	6a89      	ldr	r1, [r1, #40]	@ 0x28
9000bcc4:	f001 0103 	and.w	r1, r1, #3
9000bcc8:	2903      	cmp	r1, #3
9000bcca:	f43f ae07 	beq.w	9000b8dc <HAL_RCCEx_PeriphCLKConfig+0x8f8>
9000bcce:	2102      	movs	r1, #2
9000bcd0:	3028      	adds	r0, #40	@ 0x28
9000bcd2:	f7ff f915 	bl	9000af00 <RCCEx_PLL3_Config.part.0>
9000bcd6:	4606      	mov	r6, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
9000bcd8:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000bcdc:	2e00      	cmp	r6, #0
9000bcde:	f47f a9b0 	bne.w	9000b042 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
9000bce2:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
9000bce4:	f7ff b9a6 	b.w	9000b034 <HAL_RCCEx_PeriphCLKConfig+0x50>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
9000bce8:	4969      	ldr	r1, [pc, #420]	@ (9000be90 <HAL_RCCEx_PeriphCLKConfig+0xeac>)
9000bcea:	6a89      	ldr	r1, [r1, #40]	@ 0x28
9000bcec:	f001 0103 	and.w	r1, r1, #3
9000bcf0:	2903      	cmp	r1, #3
9000bcf2:	f43f a9b2 	beq.w	9000b05a <HAL_RCCEx_PeriphCLKConfig+0x76>
9000bcf6:	2100      	movs	r1, #0
9000bcf8:	f104 0008 	add.w	r0, r4, #8
9000bcfc:	f7ff f88e 	bl	9000ae1c <RCCEx_PLL2_Config.part.0>
9000bd00:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
9000bd02:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000bd06:	2d00      	cmp	r5, #0
9000bd08:	f43f ae53 	beq.w	9000b9b2 <HAL_RCCEx_PeriphCLKConfig+0x9ce>
9000bd0c:	462e      	mov	r6, r5
9000bd0e:	f7ff b9a6 	b.w	9000b05e <HAL_RCCEx_PeriphCLKConfig+0x7a>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
9000bd12:	495f      	ldr	r1, [pc, #380]	@ (9000be90 <HAL_RCCEx_PeriphCLKConfig+0xeac>)
9000bd14:	6a89      	ldr	r1, [r1, #40]	@ 0x28
9000bd16:	f001 0103 	and.w	r1, r1, #3
9000bd1a:	2903      	cmp	r1, #3
9000bd1c:	f43f a99d 	beq.w	9000b05a <HAL_RCCEx_PeriphCLKConfig+0x76>
9000bd20:	2100      	movs	r1, #0
9000bd22:	f104 0028 	add.w	r0, r4, #40	@ 0x28
9000bd26:	f7ff f8eb 	bl	9000af00 <RCCEx_PLL3_Config.part.0>
9000bd2a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
9000bd2c:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
9000bd30:	e63c      	b.n	9000b9ac <HAL_RCCEx_PeriphCLKConfig+0x9c8>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
9000bd32:	4957      	ldr	r1, [pc, #348]	@ (9000be90 <HAL_RCCEx_PeriphCLKConfig+0xeac>)
9000bd34:	6a89      	ldr	r1, [r1, #40]	@ 0x28
9000bd36:	f001 0103 	and.w	r1, r1, #3
9000bd3a:	2903      	cmp	r1, #3
9000bd3c:	f43f aac0 	beq.w	9000b2c0 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
9000bd40:	2100      	movs	r1, #0
9000bd42:	f104 0028 	add.w	r0, r4, #40	@ 0x28
9000bd46:	f7ff f8db 	bl	9000af00 <RCCEx_PLL3_Config.part.0>
9000bd4a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
9000bd4c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000bd50:	2d00      	cmp	r5, #0
9000bd52:	f47f aebf 	bne.w	9000bad4 <HAL_RCCEx_PeriphCLKConfig+0xaf0>
9000bd56:	f7ff b9a2 	b.w	9000b09e <HAL_RCCEx_PeriphCLKConfig+0xba>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
9000bd5a:	494d      	ldr	r1, [pc, #308]	@ (9000be90 <HAL_RCCEx_PeriphCLKConfig+0xeac>)
9000bd5c:	6a89      	ldr	r1, [r1, #40]	@ 0x28
9000bd5e:	f001 0103 	and.w	r1, r1, #3
9000bd62:	2903      	cmp	r1, #3
9000bd64:	f43f aaba 	beq.w	9000b2dc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
9000bd68:	2100      	movs	r1, #0
9000bd6a:	f104 0028 	add.w	r0, r4, #40	@ 0x28
9000bd6e:	f7ff f8c7 	bl	9000af00 <RCCEx_PLL3_Config.part.0>
9000bd72:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
9000bd74:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000bd78:	2d00      	cmp	r5, #0
9000bd7a:	f47f aeae 	bne.w	9000bada <HAL_RCCEx_PeriphCLKConfig+0xaf6>
9000bd7e:	f7ff b9b8 	b.w	9000b0f2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
9000bd82:	4943      	ldr	r1, [pc, #268]	@ (9000be90 <HAL_RCCEx_PeriphCLKConfig+0xeac>)
9000bd84:	6a89      	ldr	r1, [r1, #40]	@ 0x28
9000bd86:	f001 0103 	and.w	r1, r1, #3
9000bd8a:	2903      	cmp	r1, #3
9000bd8c:	d041      	beq.n	9000be12 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
9000bd8e:	2101      	movs	r1, #1
9000bd90:	f104 0028 	add.w	r0, r4, #40	@ 0x28
9000bd94:	f7ff f8b4 	bl	9000af00 <RCCEx_PLL3_Config.part.0>
9000bd98:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
9000bd9a:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000bd9e:	2d00      	cmp	r5, #0
9000bda0:	f47f ab56 	bne.w	9000b450 <HAL_RCCEx_PeriphCLKConfig+0x46c>
9000bda4:	e6b8      	b.n	9000bb18 <HAL_RCCEx_PeriphCLKConfig+0xb34>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
9000bda6:	493a      	ldr	r1, [pc, #232]	@ (9000be90 <HAL_RCCEx_PeriphCLKConfig+0xeac>)
9000bda8:	6a89      	ldr	r1, [r1, #40]	@ 0x28
9000bdaa:	f001 0103 	and.w	r1, r1, #3
9000bdae:	2903      	cmp	r1, #3
9000bdb0:	d02b      	beq.n	9000be0a <HAL_RCCEx_PeriphCLKConfig+0xe26>
9000bdb2:	2101      	movs	r1, #1
9000bdb4:	f104 0028 	add.w	r0, r4, #40	@ 0x28
9000bdb8:	f7ff f8a2 	bl	9000af00 <RCCEx_PLL3_Config.part.0>
9000bdbc:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
9000bdbe:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000bdc2:	2d00      	cmp	r5, #0
9000bdc4:	f47f ab1f 	bne.w	9000b406 <HAL_RCCEx_PeriphCLKConfig+0x422>
9000bdc8:	e698      	b.n	9000bafc <HAL_RCCEx_PeriphCLKConfig+0xb18>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
9000bdca:	4931      	ldr	r1, [pc, #196]	@ (9000be90 <HAL_RCCEx_PeriphCLKConfig+0xeac>)
9000bdcc:	6a89      	ldr	r1, [r1, #40]	@ 0x28
9000bdce:	f001 0103 	and.w	r1, r1, #3
9000bdd2:	2903      	cmp	r1, #3
9000bdd4:	f43f aaf5 	beq.w	9000b3c2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
9000bdd8:	2101      	movs	r1, #1
9000bdda:	f104 0028 	add.w	r0, r4, #40	@ 0x28
9000bdde:	f7ff f88f 	bl	9000af00 <RCCEx_PLL3_Config.part.0>
9000bde2:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
9000bde4:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000bde8:	2d00      	cmp	r5, #0
9000bdea:	f47f aea6 	bne.w	9000bb3a <HAL_RCCEx_PeriphCLKConfig+0xb56>
9000bdee:	e56d      	b.n	9000b8cc <HAL_RCCEx_PeriphCLKConfig+0x8e8>
        ret = HAL_TIMEOUT;
9000bdf0:	2503      	movs	r5, #3
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
9000bdf2:	462e      	mov	r6, r5
9000bdf4:	e9d4 3200 	ldrd	r3, r2, [r4]
9000bdf8:	f7ff bab3 	b.w	9000b362 <HAL_RCCEx_PeriphCLKConfig+0x37e>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000bdfc:	4d24      	ldr	r5, [pc, #144]	@ (9000be90 <HAL_RCCEx_PeriphCLKConfig+0xeac>)
9000bdfe:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
9000be00:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
9000be04:	62e8      	str	r0, [r5, #44]	@ 0x2c
    if (ret == HAL_OK)
9000be06:	f7ff b915 	b.w	9000b034 <HAL_RCCEx_PeriphCLKConfig+0x50>
9000be0a:	2601      	movs	r6, #1
9000be0c:	4635      	mov	r5, r6
9000be0e:	f7ff bafb 	b.w	9000b408 <HAL_RCCEx_PeriphCLKConfig+0x424>
9000be12:	2601      	movs	r6, #1
9000be14:	4635      	mov	r5, r6
9000be16:	f7ff bb1c 	b.w	9000b452 <HAL_RCCEx_PeriphCLKConfig+0x46e>
        status = HAL_ERROR;
9000be1a:	2601      	movs	r6, #1
9000be1c:	f7ff bb9c 	b.w	9000b558 <HAL_RCCEx_PeriphCLKConfig+0x574>
        status = HAL_ERROR;
9000be20:	2601      	movs	r6, #1
9000be22:	f7ff bba7 	b.w	9000b574 <HAL_RCCEx_PeriphCLKConfig+0x590>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
9000be26:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
        status = HAL_ERROR;
9000be2a:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
9000be2c:	e9d4 3200 	ldrd	r3, r2, [r4]
9000be30:	f7ff bba0 	b.w	9000b574 <HAL_RCCEx_PeriphCLKConfig+0x590>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
9000be34:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
9000be38:	e9d4 3200 	ldrd	r3, r2, [r4]
9000be3c:	f7ff bb8c 	b.w	9000b558 <HAL_RCCEx_PeriphCLKConfig+0x574>
9000be40:	2601      	movs	r6, #1
9000be42:	4635      	mov	r5, r6
9000be44:	f7ff ba8a 	b.w	9000b35c <HAL_RCCEx_PeriphCLKConfig+0x378>
        tickstart = HAL_GetTick();
9000be48:	f7fb f992 	bl	90007170 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
9000be4c:	f8df 8040 	ldr.w	r8, [pc, #64]	@ 9000be90 <HAL_RCCEx_PeriphCLKConfig+0xeac>
        tickstart = HAL_GetTick();
9000be50:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
9000be52:	f241 3988 	movw	r9, #5000	@ 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
9000be56:	e004      	b.n	9000be62 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
9000be58:	f7fb f98a 	bl	90007170 <HAL_GetTick>
9000be5c:	1bc0      	subs	r0, r0, r7
9000be5e:	4548      	cmp	r0, r9
9000be60:	d810      	bhi.n	9000be84 <HAL_RCCEx_PeriphCLKConfig+0xea0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
9000be62:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
9000be66:	079b      	lsls	r3, r3, #30
9000be68:	d5f6      	bpl.n	9000be58 <HAL_RCCEx_PeriphCLKConfig+0xe74>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
9000be6a:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
9000be6e:	e566      	b.n	9000b93e <HAL_RCCEx_PeriphCLKConfig+0x95a>
9000be70:	4807      	ldr	r0, [pc, #28]	@ (9000be90 <HAL_RCCEx_PeriphCLKConfig+0xeac>)
9000be72:	4a08      	ldr	r2, [pc, #32]	@ (9000be94 <HAL_RCCEx_PeriphCLKConfig+0xeb0>)
9000be74:	6901      	ldr	r1, [r0, #16]
9000be76:	ea02 1213 	and.w	r2, r2, r3, lsr #4
9000be7a:	f421 517c 	bic.w	r1, r1, #16128	@ 0x3f00
9000be7e:	430a      	orrs	r2, r1
9000be80:	6102      	str	r2, [r0, #16]
9000be82:	e567      	b.n	9000b954 <HAL_RCCEx_PeriphCLKConfig+0x970>
        status = ret;
9000be84:	2603      	movs	r6, #3
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
9000be86:	e9d4 3200 	ldrd	r3, r2, [r4]
9000be8a:	4635      	mov	r5, r6
9000be8c:	f7ff ba69 	b.w	9000b362 <HAL_RCCEx_PeriphCLKConfig+0x37e>
9000be90:	58024400 	.word	0x58024400
9000be94:	00ffffcf 	.word	0x00ffffcf

9000be98 <HAL_SDRAM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
9000be98:	b318      	cbz	r0, 9000bee2 <HAL_SDRAM_Init+0x4a>
{
9000be9a:	b538      	push	{r3, r4, r5, lr}
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
9000be9c:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
9000bea0:	4604      	mov	r4, r0
9000bea2:	460d      	mov	r5, r1
9000bea4:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
9000bea8:	b1b3      	cbz	r3, 9000bed8 <HAL_SDRAM_Init+0x40>

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
9000beaa:	4621      	mov	r1, r4
  hsdram->State = HAL_SDRAM_STATE_BUSY;
9000beac:	2302      	movs	r3, #2
9000beae:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
9000beb2:	f851 0b04 	ldr.w	r0, [r1], #4
9000beb6:	f000 fa17 	bl	9000c2e8 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
9000beba:	6862      	ldr	r2, [r4, #4]
9000bebc:	4629      	mov	r1, r5
9000bebe:	6820      	ldr	r0, [r4, #0]
9000bec0:	f000 fa4a 	bl	9000c358 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
9000bec4:	4a08      	ldr	r2, [pc, #32]	@ (9000bee8 <HAL_SDRAM_Init+0x50>)
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
9000bec6:	2101      	movs	r1, #1

  return HAL_OK;
9000bec8:	2000      	movs	r0, #0
  __FMC_ENABLE();
9000beca:	6813      	ldr	r3, [r2, #0]
9000becc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
9000bed0:	6013      	str	r3, [r2, #0]
  hsdram->State = HAL_SDRAM_STATE_READY;
9000bed2:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
}
9000bed6:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
9000bed8:	f880 202d 	strb.w	r2, [r0, #45]	@ 0x2d
    HAL_SDRAM_MspInit(hsdram);
9000bedc:	f7f4 ffea 	bl	90000eb4 <HAL_SDRAM_MspInit>
9000bee0:	e7e3      	b.n	9000beaa <HAL_SDRAM_Init+0x12>
    return HAL_ERROR;
9000bee2:	2001      	movs	r0, #1
}
9000bee4:	4770      	bx	lr
9000bee6:	bf00      	nop
9000bee8:	52004000 	.word	0x52004000

9000beec <HAL_SDRAM_DeInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_DeInit(SDRAM_HandleTypeDef *hsdram)
{
9000beec:	b510      	push	{r4, lr}
9000beee:	4604      	mov	r4, r0

  /* DeInit the low level hardware */
  hsdram->MspDeInitCallback(hsdram);
#else
  /* Initialize the low level hardware (MSP) */
  HAL_SDRAM_MspDeInit(hsdram);
9000bef0:	f7f5 f85c 	bl	90000fac <HAL_SDRAM_MspDeInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */

  /* Configure the SDRAM registers with their reset values */
  (void)FMC_SDRAM_DeInit(hsdram->Instance, hsdram->Init.SDBank);
9000bef4:	e9d4 0100 	ldrd	r0, r1, [r4]
9000bef8:	f000 fa6c 	bl	9000c3d4 <FMC_SDRAM_DeInit>

  /* Reset the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_RESET;
9000befc:	2000      	movs	r0, #0
9000befe:	f884 002c 	strb.w	r0, [r4, #44]	@ 0x2c

  /* Release Lock */
  __HAL_UNLOCK(hsdram);
9000bf02:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d

  return HAL_OK;
}
9000bf06:	bd10      	pop	{r4, pc}

9000bf08 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
9000bf08:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
9000bf0a:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
{
9000bf0e:	4605      	mov	r5, r0

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
9000bf10:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
9000bf12:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
9000bf14:	d004      	beq.n	9000bf20 <HAL_SDRAM_SendCommand+0x18>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
9000bf16:	f000 04fb 	and.w	r4, r0, #251	@ 0xfb
9000bf1a:	2c01      	cmp	r4, #1
9000bf1c:	d001      	beq.n	9000bf22 <HAL_SDRAM_SendCommand+0x1a>
      hsdram->State = HAL_SDRAM_STATE_READY;
    }
  }
  else
  {
    return HAL_ERROR;
9000bf1e:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
9000bf20:	bd70      	pop	{r4, r5, r6, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
9000bf22:	2302      	movs	r3, #2
9000bf24:	460e      	mov	r6, r1
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
9000bf26:	6828      	ldr	r0, [r5, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
9000bf28:	f885 302c 	strb.w	r3, [r5, #44]	@ 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
9000bf2c:	f000 fa66 	bl	9000c3fc <FMC_SDRAM_SendCommand>
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
9000bf30:	6833      	ldr	r3, [r6, #0]
9000bf32:	2b02      	cmp	r3, #2
9000bf34:	d003      	beq.n	9000bf3e <HAL_SDRAM_SendCommand+0x36>
      hsdram->State = HAL_SDRAM_STATE_READY;
9000bf36:	f885 402c 	strb.w	r4, [r5, #44]	@ 0x2c
  return HAL_OK;
9000bf3a:	2000      	movs	r0, #0
}
9000bf3c:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
9000bf3e:	2305      	movs	r3, #5
9000bf40:	f885 302c 	strb.w	r3, [r5, #44]	@ 0x2c
9000bf44:	e7f9      	b.n	9000bf3a <HAL_SDRAM_SendCommand+0x32>
9000bf46:	bf00      	nop

9000bf48 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
9000bf48:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
9000bf4a:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
{
9000bf4e:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
9000bf50:	2b02      	cmp	r3, #2
9000bf52:	b2d8      	uxtb	r0, r3
9000bf54:	d005      	beq.n	9000bf62 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
9000bf56:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
9000bf5a:	2b01      	cmp	r3, #1
9000bf5c:	b2dd      	uxtb	r5, r3
9000bf5e:	d001      	beq.n	9000bf64 <HAL_SDRAM_ProgramRefreshRate+0x1c>
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  else
  {
    return HAL_ERROR;
9000bf60:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
9000bf62:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
9000bf64:	2302      	movs	r3, #2
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
9000bf66:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
9000bf68:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
9000bf6c:	f000 fa5e 	bl	9000c42c <FMC_SDRAM_ProgramRefreshRate>
  return HAL_OK;
9000bf70:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
9000bf72:	f884 502c 	strb.w	r5, [r4, #44]	@ 0x2c
}
9000bf76:	bd38      	pop	{r3, r4, r5, pc}

9000bf78 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
9000bf78:	4770      	bx	lr
9000bf7a:	bf00      	nop

9000bf7c <HAL_TIM_Base_Init>:
  if (htim == NULL)
9000bf7c:	2800      	cmp	r0, #0
9000bf7e:	f000 808c 	beq.w	9000c09a <HAL_TIM_Base_Init+0x11e>
{
9000bf82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
9000bf84:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
9000bf88:	4604      	mov	r4, r0
9000bf8a:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
9000bf8e:	2b00      	cmp	r3, #0
9000bf90:	d073      	beq.n	9000c07a <HAL_TIM_Base_Init+0xfe>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
9000bf92:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
9000bf94:	2302      	movs	r3, #2
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000bf96:	4942      	ldr	r1, [pc, #264]	@ (9000c0a0 <HAL_TIM_Base_Init+0x124>)
9000bf98:	4842      	ldr	r0, [pc, #264]	@ (9000c0a4 <HAL_TIM_Base_Init+0x128>)
9000bf9a:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
9000bf9e:	eba2 0101 	sub.w	r1, r2, r1
  htim->State = HAL_TIM_STATE_BUSY;
9000bfa2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000bfa6:	eba2 0e00 	sub.w	lr, r2, r0
  tmpcr1 = TIMx->CR1;
9000bfaa:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000bfac:	fab1 f181 	clz	r1, r1
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
9000bfb0:	69a7      	ldr	r7, [r4, #24]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000bfb2:	fabe fe8e 	clz	lr, lr

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
9000bfb6:	6865      	ldr	r5, [r4, #4]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000bfb8:	ea4f 1151 	mov.w	r1, r1, lsr #5
  TIMx->ARR = (uint32_t)Structure->Period ;
9000bfbc:	68e6      	ldr	r6, [r4, #12]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000bfbe:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
9000bfc2:	d020      	beq.n	9000c006 <HAL_TIM_Base_Init+0x8a>
9000bfc4:	b9f9      	cbnz	r1, 9000c006 <HAL_TIM_Base_Init+0x8a>
9000bfc6:	f8df c0ec 	ldr.w	ip, [pc, #236]	@ 9000c0b4 <HAL_TIM_Base_Init+0x138>
9000bfca:	4562      	cmp	r2, ip
9000bfcc:	d01b      	beq.n	9000c006 <HAL_TIM_Base_Init+0x8a>
9000bfce:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
9000bfd2:	4562      	cmp	r2, ip
9000bfd4:	d017      	beq.n	9000c006 <HAL_TIM_Base_Init+0x8a>
9000bfd6:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
9000bfda:	4562      	cmp	r2, ip
9000bfdc:	d013      	beq.n	9000c006 <HAL_TIM_Base_Init+0x8a>
9000bfde:	f1be 0f00 	cmp.w	lr, #0
9000bfe2:	d110      	bne.n	9000c006 <HAL_TIM_Base_Init+0x8a>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
9000bfe4:	4830      	ldr	r0, [pc, #192]	@ (9000c0a8 <HAL_TIM_Base_Init+0x12c>)
9000bfe6:	4931      	ldr	r1, [pc, #196]	@ (9000c0ac <HAL_TIM_Base_Init+0x130>)
9000bfe8:	428a      	cmp	r2, r1
9000bfea:	bf18      	it	ne
9000bfec:	4282      	cmpne	r2, r0
9000bfee:	d049      	beq.n	9000c084 <HAL_TIM_Base_Init+0x108>
9000bff0:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
9000bff4:	428a      	cmp	r2, r1
9000bff6:	d045      	beq.n	9000c084 <HAL_TIM_Base_Init+0x108>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
9000bff8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
9000bffc:	433b      	orrs	r3, r7
  TIMx->CR1 = tmpcr1;
9000bffe:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
9000c000:	62d6      	str	r6, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
9000c002:	6295      	str	r5, [r2, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
9000c004:	e01d      	b.n	9000c042 <HAL_TIM_Base_Init+0xc6>
    tmpcr1 |= Structure->CounterMode;
9000c006:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
9000c008:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
9000c00c:	4303      	orrs	r3, r0
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
9000c00e:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
9000c010:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
9000c014:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
9000c016:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
9000c01a:	433b      	orrs	r3, r7
  TIMx->CR1 = tmpcr1;
9000c01c:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
9000c01e:	62d6      	str	r6, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
9000c020:	6295      	str	r5, [r2, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
9000c022:	b961      	cbnz	r1, 9000c03e <HAL_TIM_Base_Init+0xc2>
9000c024:	f1be 0f00 	cmp.w	lr, #0
9000c028:	d109      	bne.n	9000c03e <HAL_TIM_Base_Init+0xc2>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
9000c02a:	4921      	ldr	r1, [pc, #132]	@ (9000c0b0 <HAL_TIM_Base_Init+0x134>)
9000c02c:	4b1e      	ldr	r3, [pc, #120]	@ (9000c0a8 <HAL_TIM_Base_Init+0x12c>)
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
9000c02e:	429a      	cmp	r2, r3
9000c030:	bf18      	it	ne
9000c032:	428a      	cmpne	r2, r1
9000c034:	d003      	beq.n	9000c03e <HAL_TIM_Base_Init+0xc2>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
9000c036:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
9000c03a:	429a      	cmp	r2, r3
9000c03c:	d101      	bne.n	9000c042 <HAL_TIM_Base_Init+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
9000c03e:	6963      	ldr	r3, [r4, #20]
9000c040:	6313      	str	r3, [r2, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
9000c042:	2301      	movs	r3, #1
  return HAL_OK;
9000c044:	2000      	movs	r0, #0
  TIMx->EGR = TIM_EGR_UG;
9000c046:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
9000c048:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
9000c04c:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
9000c050:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
9000c054:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
9000c058:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
9000c05c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
9000c060:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
9000c064:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
9000c068:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
9000c06c:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
9000c070:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
9000c074:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
9000c078:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    htim->Lock = HAL_UNLOCKED;
9000c07a:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
9000c07e:	f7ff ff7b 	bl	9000bf78 <HAL_TIM_Base_MspInit>
9000c082:	e786      	b.n	9000bf92 <HAL_TIM_Base_Init+0x16>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
9000c084:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
9000c086:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
9000c08a:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
9000c08c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
9000c090:	433b      	orrs	r3, r7
  TIMx->CR1 = tmpcr1;
9000c092:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
9000c094:	62d6      	str	r6, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
9000c096:	6295      	str	r5, [r2, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
9000c098:	e7c7      	b.n	9000c02a <HAL_TIM_Base_Init+0xae>
    return HAL_ERROR;
9000c09a:	2001      	movs	r0, #1
}
9000c09c:	4770      	bx	lr
9000c09e:	bf00      	nop
9000c0a0:	40010000 	.word	0x40010000
9000c0a4:	40010400 	.word	0x40010400
9000c0a8:	40014000 	.word	0x40014000
9000c0ac:	40014400 	.word	0x40014400
9000c0b0:	40014800 	.word	0x40014800
9000c0b4:	40000400 	.word	0x40000400

9000c0b8 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
9000c0b8:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
9000c0bc:	2b01      	cmp	r3, #1
9000c0be:	d13d      	bne.n	9000c13c <HAL_TIM_Base_Start_IT+0x84>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
9000c0c0:	6802      	ldr	r2, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
9000c0c2:	2102      	movs	r1, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
9000c0c4:	4b1e      	ldr	r3, [pc, #120]	@ (9000c140 <HAL_TIM_Base_Start_IT+0x88>)
9000c0c6:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
9000c0ca:	bf18      	it	ne
9000c0cc:	429a      	cmpne	r2, r3
{
9000c0ce:	b430      	push	{r4, r5}
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
9000c0d0:	bf0c      	ite	eq
9000c0d2:	2301      	moveq	r3, #1
9000c0d4:	2300      	movne	r3, #0
9000c0d6:	4d1b      	ldr	r5, [pc, #108]	@ (9000c144 <HAL_TIM_Base_Start_IT+0x8c>)
9000c0d8:	4c1b      	ldr	r4, [pc, #108]	@ (9000c148 <HAL_TIM_Base_Start_IT+0x90>)
9000c0da:	42aa      	cmp	r2, r5
9000c0dc:	bf08      	it	eq
9000c0de:	f043 0301 	orreq.w	r3, r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
9000c0e2:	f880 103d 	strb.w	r1, [r0, #61]	@ 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
9000c0e6:	68d1      	ldr	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
9000c0e8:	42a2      	cmp	r2, r4
9000c0ea:	bf08      	it	eq
9000c0ec:	f043 0301 	orreq.w	r3, r3, #1
9000c0f0:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
9000c0f4:	f041 0101 	orr.w	r1, r1, #1
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
9000c0f8:	4814      	ldr	r0, [pc, #80]	@ (9000c14c <HAL_TIM_Base_Start_IT+0x94>)
9000c0fa:	42a2      	cmp	r2, r4
9000c0fc:	bf08      	it	eq
9000c0fe:	f043 0301 	orreq.w	r3, r3, #1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
9000c102:	60d1      	str	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
9000c104:	4282      	cmp	r2, r0
9000c106:	bf08      	it	eq
9000c108:	f043 0301 	orreq.w	r3, r3, #1
9000c10c:	4910      	ldr	r1, [pc, #64]	@ (9000c150 <HAL_TIM_Base_Start_IT+0x98>)
9000c10e:	428a      	cmp	r2, r1
9000c110:	bf08      	it	eq
9000c112:	f043 0301 	orreq.w	r3, r3, #1
9000c116:	b913      	cbnz	r3, 9000c11e <HAL_TIM_Base_Start_IT+0x66>
9000c118:	4b0e      	ldr	r3, [pc, #56]	@ (9000c154 <HAL_TIM_Base_Start_IT+0x9c>)
9000c11a:	429a      	cmp	r2, r3
9000c11c:	d107      	bne.n	9000c12e <HAL_TIM_Base_Start_IT+0x76>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
9000c11e:	6891      	ldr	r1, [r2, #8]
9000c120:	4b0d      	ldr	r3, [pc, #52]	@ (9000c158 <HAL_TIM_Base_Start_IT+0xa0>)
9000c122:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
9000c124:	2b06      	cmp	r3, #6
9000c126:	d006      	beq.n	9000c136 <HAL_TIM_Base_Start_IT+0x7e>
9000c128:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
9000c12c:	d003      	beq.n	9000c136 <HAL_TIM_Base_Start_IT+0x7e>
      __HAL_TIM_ENABLE(htim);
9000c12e:	6813      	ldr	r3, [r2, #0]
9000c130:	f043 0301 	orr.w	r3, r3, #1
9000c134:	6013      	str	r3, [r2, #0]
  return HAL_OK;
9000c136:	2000      	movs	r0, #0
}
9000c138:	bc30      	pop	{r4, r5}
9000c13a:	4770      	bx	lr
    return HAL_ERROR;
9000c13c:	2001      	movs	r0, #1
}
9000c13e:	4770      	bx	lr
9000c140:	40010000 	.word	0x40010000
9000c144:	40000400 	.word	0x40000400
9000c148:	40000800 	.word	0x40000800
9000c14c:	40010400 	.word	0x40010400
9000c150:	40001800 	.word	0x40001800
9000c154:	40014000 	.word	0x40014000
9000c158:	00010007 	.word	0x00010007

9000c15c <HAL_TIM_OC_DelayElapsedCallback>:
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
9000c15c:	4770      	bx	lr
9000c15e:	bf00      	nop

9000c160 <HAL_TIM_IC_CaptureCallback>:
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
9000c160:	4770      	bx	lr
9000c162:	bf00      	nop

9000c164 <HAL_TIM_PWM_PulseFinishedCallback>:
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
9000c164:	4770      	bx	lr
9000c166:	bf00      	nop

9000c168 <HAL_TIM_TriggerCallback>:
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
9000c168:	4770      	bx	lr
9000c16a:	bf00      	nop

9000c16c <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
9000c16c:	6803      	ldr	r3, [r0, #0]
9000c16e:	691a      	ldr	r2, [r3, #16]
9000c170:	0791      	lsls	r1, r2, #30
{
9000c172:	b510      	push	{r4, lr}
9000c174:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
9000c176:	d502      	bpl.n	9000c17e <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
9000c178:	68da      	ldr	r2, [r3, #12]
9000c17a:	0792      	lsls	r2, r2, #30
9000c17c:	d468      	bmi.n	9000c250 <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
9000c17e:	691a      	ldr	r2, [r3, #16]
9000c180:	0752      	lsls	r2, r2, #29
9000c182:	d502      	bpl.n	9000c18a <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
9000c184:	68da      	ldr	r2, [r3, #12]
9000c186:	0750      	lsls	r0, r2, #29
9000c188:	d44f      	bmi.n	9000c22a <HAL_TIM_IRQHandler+0xbe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
9000c18a:	691a      	ldr	r2, [r3, #16]
9000c18c:	0711      	lsls	r1, r2, #28
9000c18e:	d502      	bpl.n	9000c196 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
9000c190:	68da      	ldr	r2, [r3, #12]
9000c192:	0712      	lsls	r2, r2, #28
9000c194:	d437      	bmi.n	9000c206 <HAL_TIM_IRQHandler+0x9a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
9000c196:	691a      	ldr	r2, [r3, #16]
9000c198:	06d0      	lsls	r0, r2, #27
9000c19a:	d502      	bpl.n	9000c1a2 <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
9000c19c:	68da      	ldr	r2, [r3, #12]
9000c19e:	06d1      	lsls	r1, r2, #27
9000c1a0:	d41e      	bmi.n	9000c1e0 <HAL_TIM_IRQHandler+0x74>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
9000c1a2:	691a      	ldr	r2, [r3, #16]
9000c1a4:	07d2      	lsls	r2, r2, #31
9000c1a6:	d502      	bpl.n	9000c1ae <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
9000c1a8:	68da      	ldr	r2, [r3, #12]
9000c1aa:	07d0      	lsls	r0, r2, #31
9000c1ac:	d469      	bmi.n	9000c282 <HAL_TIM_IRQHandler+0x116>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
9000c1ae:	691a      	ldr	r2, [r3, #16]
9000c1b0:	0611      	lsls	r1, r2, #24
9000c1b2:	d502      	bpl.n	9000c1ba <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
9000c1b4:	68da      	ldr	r2, [r3, #12]
9000c1b6:	0612      	lsls	r2, r2, #24
9000c1b8:	d46b      	bmi.n	9000c292 <HAL_TIM_IRQHandler+0x126>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
9000c1ba:	691a      	ldr	r2, [r3, #16]
9000c1bc:	05d0      	lsls	r0, r2, #23
9000c1be:	d502      	bpl.n	9000c1c6 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
9000c1c0:	68da      	ldr	r2, [r3, #12]
9000c1c2:	0611      	lsls	r1, r2, #24
9000c1c4:	d46d      	bmi.n	9000c2a2 <HAL_TIM_IRQHandler+0x136>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
9000c1c6:	691a      	ldr	r2, [r3, #16]
9000c1c8:	0652      	lsls	r2, r2, #25
9000c1ca:	d502      	bpl.n	9000c1d2 <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
9000c1cc:	68da      	ldr	r2, [r3, #12]
9000c1ce:	0650      	lsls	r0, r2, #25
9000c1d0:	d46f      	bmi.n	9000c2b2 <HAL_TIM_IRQHandler+0x146>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
9000c1d2:	691a      	ldr	r2, [r3, #16]
9000c1d4:	0691      	lsls	r1, r2, #26
9000c1d6:	d502      	bpl.n	9000c1de <HAL_TIM_IRQHandler+0x72>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
9000c1d8:	68da      	ldr	r2, [r3, #12]
9000c1da:	0692      	lsls	r2, r2, #26
9000c1dc:	d449      	bmi.n	9000c272 <HAL_TIM_IRQHandler+0x106>
}
9000c1de:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
9000c1e0:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
9000c1e4:	2208      	movs	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
9000c1e6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
9000c1e8:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
9000c1ea:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
9000c1ec:	69db      	ldr	r3, [r3, #28]
9000c1ee:	f413 7f40 	tst.w	r3, #768	@ 0x300
9000c1f2:	d16f      	bne.n	9000c2d4 <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
9000c1f4:	f7ff ffb2 	bl	9000c15c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
9000c1f8:	4620      	mov	r0, r4
9000c1fa:	f7ff ffb3 	bl	9000c164 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
9000c1fe:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
9000c200:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
9000c202:	7722      	strb	r2, [r4, #28]
9000c204:	e7cd      	b.n	9000c1a2 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
9000c206:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
9000c20a:	2204      	movs	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
9000c20c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
9000c20e:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
9000c210:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
9000c212:	69db      	ldr	r3, [r3, #28]
9000c214:	079b      	lsls	r3, r3, #30
9000c216:	d15a      	bne.n	9000c2ce <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
9000c218:	f7ff ffa0 	bl	9000c15c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
9000c21c:	4620      	mov	r0, r4
9000c21e:	f7ff ffa1 	bl	9000c164 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
9000c222:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
9000c224:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
9000c226:	7722      	strb	r2, [r4, #28]
9000c228:	e7b5      	b.n	9000c196 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
9000c22a:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
9000c22e:	2202      	movs	r2, #2
        HAL_TIM_IC_CaptureCallback(htim);
9000c230:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
9000c232:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
9000c234:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
9000c236:	699b      	ldr	r3, [r3, #24]
9000c238:	f413 7f40 	tst.w	r3, #768	@ 0x300
9000c23c:	d144      	bne.n	9000c2c8 <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
9000c23e:	f7ff ff8d 	bl	9000c15c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
9000c242:	4620      	mov	r0, r4
9000c244:	f7ff ff8e 	bl	9000c164 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
9000c248:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
9000c24a:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
9000c24c:	7722      	strb	r2, [r4, #28]
9000c24e:	e79c      	b.n	9000c18a <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
9000c250:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
9000c254:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
9000c256:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
9000c258:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
9000c25a:	699b      	ldr	r3, [r3, #24]
9000c25c:	0799      	lsls	r1, r3, #30
9000c25e:	d130      	bne.n	9000c2c2 <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
9000c260:	f7ff ff7c 	bl	9000c15c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
9000c264:	4620      	mov	r0, r4
9000c266:	f7ff ff7d 	bl	9000c164 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
9000c26a:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
9000c26c:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
9000c26e:	7722      	strb	r2, [r4, #28]
9000c270:	e785      	b.n	9000c17e <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
9000c272:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
9000c276:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
9000c278:	611a      	str	r2, [r3, #16]
}
9000c27a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
9000c27e:	f000 b82d 	b.w	9000c2dc <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
9000c282:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
9000c286:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
9000c288:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
9000c28a:	f7f4 fc77 	bl	90000b7c <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
9000c28e:	6823      	ldr	r3, [r4, #0]
9000c290:	e78d      	b.n	9000c1ae <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
9000c292:	f06f 0280 	mvn.w	r2, #128	@ 0x80
      HAL_TIMEx_BreakCallback(htim);
9000c296:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
9000c298:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
9000c29a:	f000 f821 	bl	9000c2e0 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
9000c29e:	6823      	ldr	r3, [r4, #0]
9000c2a0:	e78b      	b.n	9000c1ba <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
9000c2a2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
      HAL_TIMEx_Break2Callback(htim);
9000c2a6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
9000c2a8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
9000c2aa:	f000 f81b 	bl	9000c2e4 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
9000c2ae:	6823      	ldr	r3, [r4, #0]
9000c2b0:	e789      	b.n	9000c1c6 <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
9000c2b2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
      HAL_TIM_TriggerCallback(htim);
9000c2b6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
9000c2b8:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
9000c2ba:	f7ff ff55 	bl	9000c168 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
9000c2be:	6823      	ldr	r3, [r4, #0]
9000c2c0:	e787      	b.n	9000c1d2 <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
9000c2c2:	f7ff ff4d 	bl	9000c160 <HAL_TIM_IC_CaptureCallback>
9000c2c6:	e7d0      	b.n	9000c26a <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
9000c2c8:	f7ff ff4a 	bl	9000c160 <HAL_TIM_IC_CaptureCallback>
9000c2cc:	e7bc      	b.n	9000c248 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
9000c2ce:	f7ff ff47 	bl	9000c160 <HAL_TIM_IC_CaptureCallback>
9000c2d2:	e7a6      	b.n	9000c222 <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
9000c2d4:	f7ff ff44 	bl	9000c160 <HAL_TIM_IC_CaptureCallback>
9000c2d8:	e791      	b.n	9000c1fe <HAL_TIM_IRQHandler+0x92>
9000c2da:	bf00      	nop

9000c2dc <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
9000c2dc:	4770      	bx	lr
9000c2de:	bf00      	nop

9000c2e0 <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
9000c2e0:	4770      	bx	lr
9000c2e2:	bf00      	nop

9000c2e4 <HAL_TIMEx_Break2Callback>:
/**
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
9000c2e4:	4770      	bx	lr
9000c2e6:	bf00      	nop

9000c2e8 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
9000c2e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
9000c2ec:	e9d1 3e07 	ldrd	r3, lr, [r1, #28]
9000c2f0:	e9d1 8200 	ldrd	r8, r2, [r1]
9000c2f4:	6a4f      	ldr	r7, [r1, #36]	@ 0x24
9000c2f6:	ea43 030e 	orr.w	r3, r3, lr
9000c2fa:	e9d1 c602 	ldrd	ip, r6, [r1, #8]
9000c2fe:	e9d1 5404 	ldrd	r5, r4, [r1, #16]
9000c302:	6989      	ldr	r1, [r1, #24]
  if (Init->SDBank == FMC_SDRAM_BANK1)
9000c304:	f1b8 0f00 	cmp.w	r8, #0
9000c308:	d10f      	bne.n	9000c32a <FMC_SDRAM_Init+0x42>
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
9000c30a:	433b      	orrs	r3, r7
9000c30c:	4313      	orrs	r3, r2
9000c30e:	4a11      	ldr	r2, [pc, #68]	@ (9000c354 <FMC_SDRAM_Init+0x6c>)
9000c310:	ea43 030c 	orr.w	r3, r3, ip
9000c314:	4333      	orrs	r3, r6
9000c316:	432b      	orrs	r3, r5
9000c318:	4323      	orrs	r3, r4
9000c31a:	430b      	orrs	r3, r1
9000c31c:	6801      	ldr	r1, [r0, #0]
9000c31e:	400a      	ands	r2, r1
9000c320:	4313      	orrs	r3, r2
9000c322:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
9000c324:	2000      	movs	r0, #0
9000c326:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
9000c32a:	ea42 020c 	orr.w	r2, r2, ip
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
9000c32e:	433b      	orrs	r3, r7
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
9000c330:	4332      	orrs	r2, r6
9000c332:	432a      	orrs	r2, r5
9000c334:	4322      	orrs	r2, r4
9000c336:	4c07      	ldr	r4, [pc, #28]	@ (9000c354 <FMC_SDRAM_Init+0x6c>)
9000c338:	430a      	orrs	r2, r1
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
9000c33a:	6801      	ldr	r1, [r0, #0]
9000c33c:	f421 41f8 	bic.w	r1, r1, #31744	@ 0x7c00
9000c340:	430b      	orrs	r3, r1
9000c342:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
9000c344:	6843      	ldr	r3, [r0, #4]
9000c346:	401c      	ands	r4, r3
9000c348:	4322      	orrs	r2, r4
9000c34a:	6042      	str	r2, [r0, #4]
}
9000c34c:	2000      	movs	r0, #0
9000c34e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
9000c352:	bf00      	nop
9000c354:	ffff8000 	.word	0xffff8000

9000c358 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
9000c358:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
9000c35a:	68cc      	ldr	r4, [r1, #12]
9000c35c:	694b      	ldr	r3, [r1, #20]
9000c35e:	3c01      	subs	r4, #1
9000c360:	688d      	ldr	r5, [r1, #8]
9000c362:	698f      	ldr	r7, [r1, #24]
9000c364:	3b01      	subs	r3, #1
9000c366:	ea4f 3e04 	mov.w	lr, r4, lsl #12
9000c36a:	684c      	ldr	r4, [r1, #4]
9000c36c:	680e      	ldr	r6, [r1, #0]
9000c36e:	3d01      	subs	r5, #1
9000c370:	3c01      	subs	r4, #1
9000c372:	051b      	lsls	r3, r3, #20
9000c374:	022d      	lsls	r5, r5, #8
9000c376:	3e01      	subs	r6, #1
9000c378:	ea4f 1c04 	mov.w	ip, r4, lsl #4
9000c37c:	690c      	ldr	r4, [r1, #16]
9000c37e:	1e79      	subs	r1, r7, #1
9000c380:	3c01      	subs	r4, #1
9000c382:	0609      	lsls	r1, r1, #24
9000c384:	0424      	lsls	r4, r4, #16
  if (Bank == FMC_SDRAM_BANK1)
9000c386:	b972      	cbnz	r2, 9000c3a6 <FMC_SDRAM_Timing_Init+0x4e>
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
9000c388:	ea4e 0303 	orr.w	r3, lr, r3
9000c38c:	6882      	ldr	r2, [r0, #8]
9000c38e:	4333      	orrs	r3, r6
9000c390:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
9000c394:	ea43 030c 	orr.w	r3, r3, ip
9000c398:	432b      	orrs	r3, r5
9000c39a:	4323      	orrs	r3, r4
9000c39c:	430b      	orrs	r3, r1
9000c39e:	4313      	orrs	r3, r2
9000c3a0:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
}
9000c3a2:	2000      	movs	r0, #0
9000c3a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
9000c3a6:	ea4e 0e03 	orr.w	lr, lr, r3
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
9000c3aa:	ea4c 0305 	orr.w	r3, ip, r5
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
9000c3ae:	4a08      	ldr	r2, [pc, #32]	@ (9000c3d0 <FMC_SDRAM_Timing_Init+0x78>)
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
9000c3b0:	4333      	orrs	r3, r6
9000c3b2:	4323      	orrs	r3, r4
9000c3b4:	430b      	orrs	r3, r1
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
9000c3b6:	6881      	ldr	r1, [r0, #8]
9000c3b8:	400a      	ands	r2, r1
9000c3ba:	ea42 020e 	orr.w	r2, r2, lr
9000c3be:	6082      	str	r2, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
9000c3c0:	68c2      	ldr	r2, [r0, #12]
9000c3c2:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
9000c3c6:	4313      	orrs	r3, r2
9000c3c8:	60c3      	str	r3, [r0, #12]
}
9000c3ca:	2000      	movs	r0, #0
9000c3cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
9000c3ce:	bf00      	nop
9000c3d0:	ff0f0fff 	.word	0xff0f0fff

9000c3d4 <FMC_SDRAM_DeInit>:
  * @brief  DeInitializes the FMC_SDRAM peripheral
  * @param  Device Pointer to SDRAM device instance
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_DeInit(FMC_SDRAM_TypeDef *Device, uint32_t Bank)
{
9000c3d4:	b430      	push	{r4, r5}
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* De-initialize the SDRAM device */
  Device->SDCR[Bank] = 0x000002D0U;
  Device->SDTR[Bank] = 0x0FFFFFFFU;
  Device->SDCMR      = 0x00000000U;
9000c3d6:	2200      	movs	r2, #0
{
9000c3d8:	4603      	mov	r3, r0
  Device->SDCR[Bank] = 0x000002D0U;
9000c3da:	f44f 7534 	mov.w	r5, #720	@ 0x2d0
  Device->SDTR[Bank] = 0x0FFFFFFFU;
9000c3de:	f06f 4470 	mvn.w	r4, #4026531840	@ 0xf0000000
9000c3e2:	eb00 0c81 	add.w	ip, r0, r1, lsl #2
  Device->SDCR[Bank] = 0x000002D0U;
9000c3e6:	f840 5021 	str.w	r5, [r0, r1, lsl #2]
  Device->SDRTR      = 0x00000000U;
  Device->SDSR       = 0x00000000U;

  return HAL_OK;
}
9000c3ea:	4610      	mov	r0, r2
  Device->SDTR[Bank] = 0x0FFFFFFFU;
9000c3ec:	f8cc 4008 	str.w	r4, [ip, #8]
  Device->SDCMR      = 0x00000000U;
9000c3f0:	611a      	str	r2, [r3, #16]
  Device->SDRTR      = 0x00000000U;
9000c3f2:	615a      	str	r2, [r3, #20]
  Device->SDSR       = 0x00000000U;
9000c3f4:	619a      	str	r2, [r3, #24]
}
9000c3f6:	bc30      	pop	{r4, r5}
9000c3f8:	4770      	bx	lr
9000c3fa:	bf00      	nop

9000c3fc <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
9000c3fc:	b410      	push	{r4}
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
9000c3fe:	e9d1 3400 	ldrd	r3, r4, [r1]
{
9000c402:	4602      	mov	r2, r0
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
9000c404:	6900      	ldr	r0, [r0, #16]
9000c406:	4323      	orrs	r3, r4
9000c408:	e9d1 1402 	ldrd	r1, r4, [r1, #8]
9000c40c:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
9000c410:	4c05      	ldr	r4, [pc, #20]	@ (9000c428 <FMC_SDRAM_SendCommand+0x2c>)
9000c412:	3901      	subs	r1, #1
9000c414:	4004      	ands	r4, r0
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
9000c416:	2000      	movs	r0, #0
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
9000c418:	4323      	orrs	r3, r4
}
9000c41a:	f85d 4b04 	ldr.w	r4, [sp], #4
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
9000c41e:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
9000c422:	6113      	str	r3, [r2, #16]
}
9000c424:	4770      	bx	lr
9000c426:	bf00      	nop
9000c428:	ffc00000 	.word	0xffc00000

9000c42c <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
9000c42c:	4602      	mov	r2, r0
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
9000c42e:	4b05      	ldr	r3, [pc, #20]	@ (9000c444 <FMC_SDRAM_ProgramRefreshRate+0x18>)

  return HAL_OK;
}
9000c430:	2000      	movs	r0, #0
{
9000c432:	b410      	push	{r4}
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
9000c434:	6954      	ldr	r4, [r2, #20]
9000c436:	4023      	ands	r3, r4
}
9000c438:	f85d 4b04 	ldr.w	r4, [sp], #4
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
9000c43c:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
9000c440:	6153      	str	r3, [r2, #20]
}
9000c442:	4770      	bx	lr
9000c444:	ffffc001 	.word	0xffffc001

9000c448 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
9000c448:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
9000c44a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
9000c44e:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
9000c450:	f002 fcd8 	bl	9000ee04 <xTaskGetSchedulerState>
9000c454:	2801      	cmp	r0, #1
9000c456:	d100      	bne.n	9000c45a <SysTick_Handler+0x12>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
9000c458:	bd08      	pop	{r3, pc}
9000c45a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
9000c45e:	f000 bcf1 	b.w	9000ce44 <xPortSysTickHandler>
9000c462:	bf00      	nop

9000c464 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
9000c464:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
9000c468:	b92b      	cbnz	r3, 9000c476 <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
9000c46a:	4b06      	ldr	r3, [pc, #24]	@ (9000c484 <osKernelInitialize+0x20>)
9000c46c:	6818      	ldr	r0, [r3, #0]
9000c46e:	b928      	cbnz	r0, 9000c47c <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
9000c470:	2201      	movs	r2, #1
9000c472:	601a      	str	r2, [r3, #0]
      stat = osOK;
9000c474:	4770      	bx	lr
    stat = osErrorISR;
9000c476:	f06f 0005 	mvn.w	r0, #5
9000c47a:	4770      	bx	lr
    } else {
      stat = osError;
9000c47c:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
9000c480:	4770      	bx	lr
9000c482:	bf00      	nop
9000c484:	2400c58c 	.word	0x2400c58c

9000c488 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
9000c488:	b510      	push	{r4, lr}
9000c48a:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
9000c48e:	b974      	cbnz	r4, 9000c4ae <osKernelStart+0x26>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
9000c490:	4b08      	ldr	r3, [pc, #32]	@ (9000c4b4 <osKernelStart+0x2c>)
9000c492:	681a      	ldr	r2, [r3, #0]
9000c494:	2a01      	cmp	r2, #1
9000c496:	d107      	bne.n	9000c4a8 <osKernelStart+0x20>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
9000c498:	4907      	ldr	r1, [pc, #28]	@ (9000c4b8 <osKernelStart+0x30>)
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
9000c49a:	2202      	movs	r2, #2
9000c49c:	77cc      	strb	r4, [r1, #31]
9000c49e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
9000c4a0:	f002 fa48 	bl	9000e934 <vTaskStartScheduler>
      stat = osOK;
9000c4a4:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
9000c4a6:	bd10      	pop	{r4, pc}
      stat = osError;
9000c4a8:	f04f 30ff 	mov.w	r0, #4294967295
}
9000c4ac:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
9000c4ae:	f06f 0005 	mvn.w	r0, #5
}
9000c4b2:	bd10      	pop	{r4, pc}
9000c4b4:	2400c58c 	.word	0x2400c58c
9000c4b8:	e000ed00 	.word	0xe000ed00

9000c4bc <osKernelLock>:

int32_t osKernelLock (void) {
9000c4bc:	b510      	push	{r4, lr}
9000c4be:	f3ef 8405 	mrs	r4, IPSR
  int32_t lock;

  if (IS_IRQ()) {
9000c4c2:	b96c      	cbnz	r4, 9000c4e0 <osKernelLock+0x24>
    lock = (int32_t)osErrorISR;
  }
  else {
    switch (xTaskGetSchedulerState()) {
9000c4c4:	f002 fc9e 	bl	9000ee04 <xTaskGetSchedulerState>
9000c4c8:	b140      	cbz	r0, 9000c4dc <osKernelLock+0x20>
9000c4ca:	2802      	cmp	r0, #2
9000c4cc:	d002      	beq.n	9000c4d4 <osKernelLock+0x18>
9000c4ce:	f04f 30ff 	mov.w	r0, #4294967295
        break;
    }
  }

  return (lock);
}
9000c4d2:	bd10      	pop	{r4, pc}
        vTaskSuspendAll();
9000c4d4:	f002 faca 	bl	9000ea6c <vTaskSuspendAll>
        lock = 0;
9000c4d8:	4620      	mov	r0, r4
}
9000c4da:	bd10      	pop	{r4, pc}
        lock = 1;
9000c4dc:	2001      	movs	r0, #1
}
9000c4de:	bd10      	pop	{r4, pc}
    lock = (int32_t)osErrorISR;
9000c4e0:	f06f 0005 	mvn.w	r0, #5
}
9000c4e4:	bd10      	pop	{r4, pc}
9000c4e6:	bf00      	nop

9000c4e8 <osKernelUnlock>:

int32_t osKernelUnlock (void) {
9000c4e8:	b510      	push	{r4, lr}
9000c4ea:	f3ef 8405 	mrs	r4, IPSR
  int32_t lock;

  if (IS_IRQ()) {
9000c4ee:	b9ac      	cbnz	r4, 9000c51c <osKernelUnlock+0x34>
    lock = (int32_t)osErrorISR;
  }
  else {
    switch (xTaskGetSchedulerState()) {
9000c4f0:	f002 fc88 	bl	9000ee04 <xTaskGetSchedulerState>
9000c4f4:	b130      	cbz	r0, 9000c504 <osKernelUnlock+0x1c>
9000c4f6:	2802      	cmp	r0, #2
9000c4f8:	d002      	beq.n	9000c500 <osKernelUnlock+0x18>
        lock = 0;
        break;

      case taskSCHEDULER_NOT_STARTED:
      default:
        lock = (int32_t)osError;
9000c4fa:	f04f 30ff 	mov.w	r0, #4294967295
        break;
    }
  }

  return (lock);
}
9000c4fe:	bd10      	pop	{r4, pc}
        lock = 0;
9000c500:	4620      	mov	r0, r4
}
9000c502:	bd10      	pop	{r4, pc}
        if (xTaskResumeAll() != pdTRUE) {
9000c504:	f002 faba 	bl	9000ea7c <xTaskResumeAll>
9000c508:	2801      	cmp	r0, #1
9000c50a:	d101      	bne.n	9000c510 <osKernelUnlock+0x28>
        lock = 1;
9000c50c:	2001      	movs	r0, #1
}
9000c50e:	bd10      	pop	{r4, pc}
          if (xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED) {
9000c510:	f002 fc78 	bl	9000ee04 <xTaskGetSchedulerState>
9000c514:	2800      	cmp	r0, #0
9000c516:	d0f0      	beq.n	9000c4fa <osKernelUnlock+0x12>
        lock = 1;
9000c518:	2001      	movs	r0, #1
9000c51a:	e7f8      	b.n	9000c50e <osKernelUnlock+0x26>
    lock = (int32_t)osErrorISR;
9000c51c:	f06f 0005 	mvn.w	r0, #5
}
9000c520:	bd10      	pop	{r4, pc}
9000c522:	bf00      	nop

9000c524 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
9000c524:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
9000c526:	2500      	movs	r5, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
9000c528:	b087      	sub	sp, #28
  hTask = NULL;
9000c52a:	9505      	str	r5, [sp, #20]
9000c52c:	f3ef 8305 	mrs	r3, IPSR

  if (!IS_IRQ() && (func != NULL)) {
9000c530:	b300      	cbz	r0, 9000c574 <osThreadNew+0x50>
9000c532:	b9fb      	cbnz	r3, 9000c574 <osThreadNew+0x50>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
9000c534:	4614      	mov	r4, r2
9000c536:	b302      	cbz	r2, 9000c57a <osThreadNew+0x56>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
9000c538:	6996      	ldr	r6, [r2, #24]
9000c53a:	b9c6      	cbnz	r6, 9000c56e <osThreadNew+0x4a>
9000c53c:	2618      	movs	r6, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
9000c53e:	6863      	ldr	r3, [r4, #4]
9000c540:	07db      	lsls	r3, r3, #31
9000c542:	d417      	bmi.n	9000c574 <osThreadNew+0x50>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
9000c544:	6963      	ldr	r3, [r4, #20]
9000c546:	b32b      	cbz	r3, 9000c594 <osThreadNew+0x70>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
9000c548:	089a      	lsrs	r2, r3, #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
9000c54a:	68a5      	ldr	r5, [r4, #8]
      if (attr->name != NULL) {
9000c54c:	f8d4 c000 	ldr.w	ip, [r4]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
9000c550:	68e7      	ldr	r7, [r4, #12]
9000c552:	b30d      	cbz	r5, 9000c598 <osThreadNew+0x74>
9000c554:	2f5f      	cmp	r7, #95	@ 0x5f
9000c556:	d90d      	bls.n	9000c574 <osThreadNew+0x50>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
9000c558:	6924      	ldr	r4, [r4, #16]
9000c55a:	b15b      	cbz	r3, 9000c574 <osThreadNew+0x50>
9000c55c:	b154      	cbz	r4, 9000c574 <osThreadNew+0x50>
      mem = 0;
    }

    if (mem == 1) {
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
9000c55e:	460b      	mov	r3, r1
9000c560:	9600      	str	r6, [sp, #0]
9000c562:	4661      	mov	r1, ip
9000c564:	e9cd 4501 	strd	r4, r5, [sp, #4]
9000c568:	f002 f852 	bl	9000e610 <xTaskCreateStatic>
9000c56c:	e003      	b.n	9000c576 <osThreadNew+0x52>
      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
9000c56e:	1e72      	subs	r2, r6, #1
9000c570:	2a37      	cmp	r2, #55	@ 0x37
9000c572:	d9e4      	bls.n	9000c53e <osThreadNew+0x1a>
        return (NULL);
9000c574:	2000      	movs	r0, #0
      }
    }
  }

  return ((osThreadId_t)hTask);
}
9000c576:	b007      	add	sp, #28
9000c578:	bdf0      	pop	{r4, r5, r6, r7, pc}
9000c57a:	2280      	movs	r2, #128	@ 0x80
    prio  = (UBaseType_t)osPriorityNormal;
9000c57c:	2618      	movs	r6, #24
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
9000c57e:	460b      	mov	r3, r1
9000c580:	4621      	mov	r1, r4
9000c582:	ac05      	add	r4, sp, #20
9000c584:	9600      	str	r6, [sp, #0]
9000c586:	9401      	str	r4, [sp, #4]
9000c588:	f002 f8ec 	bl	9000e764 <xTaskCreate>
9000c58c:	2801      	cmp	r0, #1
9000c58e:	d1f1      	bne.n	9000c574 <osThreadNew+0x50>
  return ((osThreadId_t)hTask);
9000c590:	9805      	ldr	r0, [sp, #20]
9000c592:	e7f0      	b.n	9000c576 <osThreadNew+0x52>
    stack = configMINIMAL_STACK_SIZE;
9000c594:	2280      	movs	r2, #128	@ 0x80
9000c596:	e7d8      	b.n	9000c54a <osThreadNew+0x26>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
9000c598:	2f00      	cmp	r7, #0
9000c59a:	d1eb      	bne.n	9000c574 <osThreadNew+0x50>
9000c59c:	6923      	ldr	r3, [r4, #16]
9000c59e:	2b00      	cmp	r3, #0
9000c5a0:	d1e8      	bne.n	9000c574 <osThreadNew+0x50>
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
9000c5a2:	b292      	uxth	r2, r2
9000c5a4:	4664      	mov	r4, ip
9000c5a6:	e7ea      	b.n	9000c57e <osThreadNew+0x5a>

9000c5a8 <osDelay>:
9000c5a8:	f3ef 8205 	mrs	r2, IPSR
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
  osStatus_t stat;

  if (IS_IRQ()) {
9000c5ac:	b93a      	cbnz	r2, 9000c5be <osDelay+0x16>
osStatus_t osDelay (uint32_t ticks) {
9000c5ae:	b508      	push	{r3, lr}
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
9000c5b0:	b908      	cbnz	r0, 9000c5b6 <osDelay+0xe>
    stat = osOK;
9000c5b2:	2000      	movs	r0, #0
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
9000c5b4:	bd08      	pop	{r3, pc}
      vTaskDelay(ticks);
9000c5b6:	f002 f967 	bl	9000e888 <vTaskDelay>
    stat = osOK;
9000c5ba:	2000      	movs	r0, #0
}
9000c5bc:	bd08      	pop	{r3, pc}
    stat = osErrorISR;
9000c5be:	f06f 0005 	mvn.w	r0, #5
}
9000c5c2:	4770      	bx	lr

9000c5c4 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
9000c5c4:	b530      	push	{r4, r5, lr}
9000c5c6:	b083      	sub	sp, #12
9000c5c8:	f3ef 8505 	mrs	r5, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
9000c5cc:	b9bd      	cbnz	r5, 9000c5fe <osMutexNew+0x3a>
    if (attr != NULL) {
9000c5ce:	4604      	mov	r4, r0
9000c5d0:	b1c0      	cbz	r0, 9000c604 <osMutexNew+0x40>
      type = attr->attr_bits;
9000c5d2:	6845      	ldr	r5, [r0, #4]
      rmtx = 1U;
    } else {
      rmtx = 0U;
    }

    if ((type & osMutexRobust) != osMutexRobust) {
9000c5d4:	072b      	lsls	r3, r5, #28
9000c5d6:	d412      	bmi.n	9000c5fe <osMutexNew+0x3a>
      mem = -1;

      if (attr != NULL) {
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
9000c5d8:	6881      	ldr	r1, [r0, #8]
    if ((type & osMutexRecursive) == osMutexRecursive) {
9000c5da:	f005 0501 	and.w	r5, r5, #1
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
9000c5de:	68c3      	ldr	r3, [r0, #12]
9000c5e0:	b309      	cbz	r1, 9000c626 <osMutexNew+0x62>
9000c5e2:	2b4f      	cmp	r3, #79	@ 0x4f
9000c5e4:	d90b      	bls.n	9000c5fe <osMutexNew+0x3a>
        mem = 0;
      }

      if (mem == 1) {
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
9000c5e6:	b345      	cbz	r5, 9000c63a <osMutexNew+0x76>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
9000c5e8:	2004      	movs	r0, #4
9000c5ea:	f001 f831 	bl	9000d650 <xQueueCreateMutexStatic>
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
9000c5ee:	b130      	cbz	r0, 9000c5fe <osMutexNew+0x3a>
        if (attr != NULL) {
          name = attr->name;
9000c5f0:	6824      	ldr	r4, [r4, #0]
9000c5f2:	e00c      	b.n	9000c60e <osMutexNew+0x4a>
              hMutex = xSemaphoreCreateRecursiveMutex ();
9000c5f4:	2004      	movs	r0, #4
9000c5f6:	f001 f89b 	bl	9000d730 <xQueueCreateMutex>
      if (hMutex != NULL) {
9000c5fa:	2800      	cmp	r0, #0
9000c5fc:	d1f8      	bne.n	9000c5f0 <osMutexNew+0x2c>
  hMutex = NULL;
9000c5fe:	2000      	movs	r0, #0
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
9000c600:	b003      	add	sp, #12
9000c602:	bd30      	pop	{r4, r5, pc}
              hMutex = xSemaphoreCreateMutex ();
9000c604:	2001      	movs	r0, #1
9000c606:	f001 f893 	bl	9000d730 <xQueueCreateMutex>
      if (hMutex != NULL) {
9000c60a:	2800      	cmp	r0, #0
9000c60c:	d0f7      	beq.n	9000c5fe <osMutexNew+0x3a>
        vQueueAddToRegistry (hMutex, name);
9000c60e:	4621      	mov	r1, r4
9000c610:	9001      	str	r0, [sp, #4]
9000c612:	f001 fd57 	bl	9000e0c4 <vQueueAddToRegistry>
      if ((hMutex != NULL) && (rmtx != 0U)) {
9000c616:	9801      	ldr	r0, [sp, #4]
9000c618:	f015 0f01 	tst.w	r5, #1
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
9000c61c:	bf18      	it	ne
9000c61e:	f040 0001 	orrne.w	r0, r0, #1
}
9000c622:	b003      	add	sp, #12
9000c624:	bd30      	pop	{r4, r5, pc}
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
9000c626:	2b00      	cmp	r3, #0
9000c628:	d1e9      	bne.n	9000c5fe <osMutexNew+0x3a>
            if (rmtx != 0U) {
9000c62a:	2d00      	cmp	r5, #0
9000c62c:	d1e2      	bne.n	9000c5f4 <osMutexNew+0x30>
              hMutex = xSemaphoreCreateMutex ();
9000c62e:	2001      	movs	r0, #1
9000c630:	f001 f87e 	bl	9000d730 <xQueueCreateMutex>
      if (hMutex != NULL) {
9000c634:	2800      	cmp	r0, #0
9000c636:	d1db      	bne.n	9000c5f0 <osMutexNew+0x2c>
9000c638:	e7e1      	b.n	9000c5fe <osMutexNew+0x3a>
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
9000c63a:	2001      	movs	r0, #1
9000c63c:	f001 f808 	bl	9000d650 <xQueueCreateMutexStatic>
      if (hMutex != NULL) {
9000c640:	2800      	cmp	r0, #0
9000c642:	d1d5      	bne.n	9000c5f0 <osMutexNew+0x2c>
9000c644:	e7db      	b.n	9000c5fe <osMutexNew+0x3a>
9000c646:	bf00      	nop

9000c648 <osMutexAcquire>:
9000c648:	f3ef 8205 	mrs	r2, IPSR

  rmtx = (uint32_t)mutex_id & 1U;

  stat = osOK;

  if (IS_IRQ()) {
9000c64c:	b9d2      	cbnz	r2, 9000c684 <osMutexAcquire+0x3c>
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
9000c64e:	2801      	cmp	r0, #1
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
9000c650:	b538      	push	{r3, r4, r5, lr}
9000c652:	4603      	mov	r3, r0
  else if (hMutex == NULL) {
9000c654:	d919      	bls.n	9000c68a <osMutexAcquire+0x42>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
9000c656:	f003 0501 	and.w	r5, r3, #1
9000c65a:	460c      	mov	r4, r1
9000c65c:	f020 0001 	bic.w	r0, r0, #1
9000c660:	b955      	cbnz	r5, 9000c678 <osMutexAcquire+0x30>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
9000c662:	f001 fadf 	bl	9000dc24 <xQueueSemaphoreTake>
9000c666:	2801      	cmp	r0, #1
9000c668:	d00a      	beq.n	9000c680 <osMutexAcquire+0x38>
        if (timeout != 0U) {
          stat = osErrorTimeout;
        } else {
          stat = osErrorResource;
9000c66a:	2c00      	cmp	r4, #0
9000c66c:	bf14      	ite	ne
9000c66e:	f06f 0001 	mvnne.w	r0, #1
9000c672:	f06f 0002 	mvneq.w	r0, #2
      }
    }
  }

  return (stat);
}
9000c676:	bd38      	pop	{r3, r4, r5, pc}
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
9000c678:	f001 fc60 	bl	9000df3c <xQueueTakeMutexRecursive>
9000c67c:	2801      	cmp	r0, #1
9000c67e:	d1f4      	bne.n	9000c66a <osMutexAcquire+0x22>
  stat = osOK;
9000c680:	2000      	movs	r0, #0
}
9000c682:	bd38      	pop	{r3, r4, r5, pc}
    stat = osErrorISR;
9000c684:	f06f 0005 	mvn.w	r0, #5
}
9000c688:	4770      	bx	lr
    stat = osErrorParameter;
9000c68a:	f06f 0003 	mvn.w	r0, #3
}
9000c68e:	bd38      	pop	{r3, r4, r5, pc}

9000c690 <osMutexRelease>:
9000c690:	f3ef 8105 	mrs	r1, IPSR

  rmtx = (uint32_t)mutex_id & 1U;

  stat = osOK;

  if (IS_IRQ()) {
9000c694:	b9b9      	cbnz	r1, 9000c6c6 <osMutexRelease+0x36>
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
9000c696:	2801      	cmp	r0, #1
9000c698:	4602      	mov	r2, r0
9000c69a:	d917      	bls.n	9000c6cc <osMutexRelease+0x3c>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
9000c69c:	f020 0001 	bic.w	r0, r0, #1
osStatus_t osMutexRelease (osMutexId_t mutex_id) {
9000c6a0:	b508      	push	{r3, lr}
9000c6a2:	f002 0301 	and.w	r3, r2, #1
    if (rmtx != 0U) {
9000c6a6:	b93b      	cbnz	r3, 9000c6b8 <osMutexRelease+0x28>
        stat = osErrorResource;
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
9000c6a8:	461a      	mov	r2, r3
9000c6aa:	4619      	mov	r1, r3
9000c6ac:	f000 fe4e 	bl	9000d34c <xQueueGenericSend>
9000c6b0:	2801      	cmp	r0, #1
9000c6b2:	d105      	bne.n	9000c6c0 <osMutexRelease+0x30>
  stat = osOK;
9000c6b4:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
9000c6b6:	bd08      	pop	{r3, pc}
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
9000c6b8:	f001 f81a 	bl	9000d6f0 <xQueueGiveMutexRecursive>
9000c6bc:	2801      	cmp	r0, #1
9000c6be:	d0f9      	beq.n	9000c6b4 <osMutexRelease+0x24>
        stat = osErrorResource;
9000c6c0:	f06f 0002 	mvn.w	r0, #2
}
9000c6c4:	bd08      	pop	{r3, pc}
    stat = osErrorISR;
9000c6c6:	f06f 0005 	mvn.w	r0, #5
9000c6ca:	4770      	bx	lr
    stat = osErrorParameter;
9000c6cc:	f06f 0003 	mvn.w	r0, #3
}
9000c6d0:	4770      	bx	lr
9000c6d2:	bf00      	nop

9000c6d4 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
9000c6d4:	b5f0      	push	{r4, r5, r6, r7, lr}
9000c6d6:	b083      	sub	sp, #12
9000c6d8:	f3ef 8605 	mrs	r6, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
9000c6dc:	b98e      	cbnz	r6, 9000c702 <osSemaphoreNew+0x2e>
9000c6de:	4605      	mov	r5, r0
9000c6e0:	b178      	cbz	r0, 9000c702 <osSemaphoreNew+0x2e>
9000c6e2:	4288      	cmp	r0, r1
9000c6e4:	460f      	mov	r7, r1
9000c6e6:	d30c      	bcc.n	9000c702 <osSemaphoreNew+0x2e>
    mem = -1;

    if (attr != NULL) {
9000c6e8:	4614      	mov	r4, r2
9000c6ea:	b172      	cbz	r2, 9000c70a <osSemaphoreNew+0x36>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
9000c6ec:	e9d2 2302 	ldrd	r2, r3, [r2, #8]
9000c6f0:	b14a      	cbz	r2, 9000c706 <osSemaphoreNew+0x32>
9000c6f2:	2b4f      	cmp	r3, #79	@ 0x4f
9000c6f4:	d905      	bls.n	9000c702 <osSemaphoreNew+0x2e>
    else {
      mem = 0;
    }

    if (mem != -1) {
      if (max_count == 1U) {
9000c6f6:	2801      	cmp	r0, #1
9000c6f8:	d02f      	beq.n	9000c75a <osSemaphoreNew+0x86>
        }
      }
      else {
        if (mem == 1) {
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
9000c6fa:	f000 fd81 	bl	9000d200 <xQueueCreateCountingSemaphoreStatic>
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
9000c6fe:	4605      	mov	r5, r0
9000c700:	b968      	cbnz	r0, 9000c71e <osSemaphoreNew+0x4a>
  hSemaphore = NULL;
9000c702:	2500      	movs	r5, #0
9000c704:	e010      	b.n	9000c728 <osSemaphoreNew+0x54>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
9000c706:	2b00      	cmp	r3, #0
9000c708:	d1fb      	bne.n	9000c702 <osSemaphoreNew+0x2e>
      if (max_count == 1U) {
9000c70a:	2d01      	cmp	r5, #1
9000c70c:	d00f      	beq.n	9000c72e <osSemaphoreNew+0x5a>
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
9000c70e:	4628      	mov	r0, r5
9000c710:	4639      	mov	r1, r7
9000c712:	f000 fdd5 	bl	9000d2c0 <xQueueCreateCountingSemaphore>
9000c716:	4605      	mov	r5, r0
      if (hSemaphore != NULL) {
9000c718:	2d00      	cmp	r5, #0
9000c71a:	d0f2      	beq.n	9000c702 <osSemaphoreNew+0x2e>
        if (attr != NULL) {
9000c71c:	b104      	cbz	r4, 9000c720 <osSemaphoreNew+0x4c>
          name = attr->name;
9000c71e:	6824      	ldr	r4, [r4, #0]
        } else {
          name = NULL;
        }
        vQueueAddToRegistry (hSemaphore, name);
9000c720:	4621      	mov	r1, r4
9000c722:	4628      	mov	r0, r5
9000c724:	f001 fcce 	bl	9000e0c4 <vQueueAddToRegistry>
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
9000c728:	4628      	mov	r0, r5
9000c72a:	b003      	add	sp, #12
9000c72c:	bdf0      	pop	{r4, r5, r6, r7, pc}
            hSemaphore = xSemaphoreCreateBinary();
9000c72e:	4628      	mov	r0, r5
9000c730:	2203      	movs	r2, #3
9000c732:	2100      	movs	r1, #0
9000c734:	f000 fd22 	bl	9000d17c <xQueueGenericCreate>
9000c738:	4605      	mov	r5, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
9000c73a:	2d00      	cmp	r5, #0
9000c73c:	d0e1      	beq.n	9000c702 <osSemaphoreNew+0x2e>
9000c73e:	2f00      	cmp	r7, #0
9000c740:	d0ea      	beq.n	9000c718 <osSemaphoreNew+0x44>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
9000c742:	2300      	movs	r3, #0
9000c744:	4628      	mov	r0, r5
9000c746:	461a      	mov	r2, r3
9000c748:	4619      	mov	r1, r3
9000c74a:	f000 fdff 	bl	9000d34c <xQueueGenericSend>
9000c74e:	2801      	cmp	r0, #1
9000c750:	d0e4      	beq.n	9000c71c <osSemaphoreNew+0x48>
            vSemaphoreDelete (hSemaphore);
9000c752:	4628      	mov	r0, r5
9000c754:	f001 fc70 	bl	9000e038 <vQueueDelete>
      if (hSemaphore != NULL) {
9000c758:	e7d3      	b.n	9000c702 <osSemaphoreNew+0x2e>
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
9000c75a:	4613      	mov	r3, r2
9000c75c:	2203      	movs	r2, #3
9000c75e:	4631      	mov	r1, r6
9000c760:	9200      	str	r2, [sp, #0]
9000c762:	4632      	mov	r2, r6
9000c764:	f000 fc9e 	bl	9000d0a4 <xQueueGenericCreateStatic>
9000c768:	4605      	mov	r5, r0
9000c76a:	e7e6      	b.n	9000c73a <osSemaphoreNew+0x66>

9000c76c <osSemaphoreAcquire>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
9000c76c:	b360      	cbz	r0, 9000c7c8 <osSemaphoreAcquire+0x5c>
osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
9000c76e:	b510      	push	{r4, lr}
9000c770:	460c      	mov	r4, r1
9000c772:	b082      	sub	sp, #8
9000c774:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
9000c778:	b1b3      	cbz	r3, 9000c7a8 <osSemaphoreAcquire+0x3c>
    if (timeout != 0U) {
9000c77a:	bb11      	cbnz	r1, 9000c7c2 <osSemaphoreAcquire+0x56>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
9000c77c:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
9000c77e:	9101      	str	r1, [sp, #4]
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
9000c780:	f001 fbfc 	bl	9000df7c <xQueueReceiveFromISR>
9000c784:	2801      	cmp	r0, #1
9000c786:	d118      	bne.n	9000c7ba <osSemaphoreAcquire+0x4e>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
9000c788:	9b01      	ldr	r3, [sp, #4]
9000c78a:	b913      	cbnz	r3, 9000c792 <osSemaphoreAcquire+0x26>
  stat = osOK;
9000c78c:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
9000c78e:	b002      	add	sp, #8
9000c790:	bd10      	pop	{r4, pc}
        portYIELD_FROM_ISR (yield);
9000c792:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
9000c796:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
9000c79a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
9000c79e:	f3bf 8f4f 	dsb	sy
9000c7a2:	f3bf 8f6f 	isb	sy
9000c7a6:	e7f1      	b.n	9000c78c <osSemaphoreAcquire+0x20>
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
9000c7a8:	f001 fa3c 	bl	9000dc24 <xQueueSemaphoreTake>
9000c7ac:	2801      	cmp	r0, #1
9000c7ae:	d0ed      	beq.n	9000c78c <osSemaphoreAcquire+0x20>
      if (timeout != 0U) {
9000c7b0:	b11c      	cbz	r4, 9000c7ba <osSemaphoreAcquire+0x4e>
        stat = osErrorTimeout;
9000c7b2:	f06f 0001 	mvn.w	r0, #1
}
9000c7b6:	b002      	add	sp, #8
9000c7b8:	bd10      	pop	{r4, pc}
        stat = osErrorResource;
9000c7ba:	f06f 0002 	mvn.w	r0, #2
}
9000c7be:	b002      	add	sp, #8
9000c7c0:	bd10      	pop	{r4, pc}
    stat = osErrorParameter;
9000c7c2:	f06f 0003 	mvn.w	r0, #3
  return (stat);
9000c7c6:	e7e2      	b.n	9000c78e <osSemaphoreAcquire+0x22>
    stat = osErrorParameter;
9000c7c8:	f06f 0003 	mvn.w	r0, #3
}
9000c7cc:	4770      	bx	lr
9000c7ce:	bf00      	nop

9000c7d0 <osSemaphoreRelease>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
9000c7d0:	b328      	cbz	r0, 9000c81e <osSemaphoreRelease+0x4e>
osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
9000c7d2:	b500      	push	{lr}
9000c7d4:	b083      	sub	sp, #12
9000c7d6:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
9000c7da:	b19b      	cbz	r3, 9000c804 <osSemaphoreRelease+0x34>
    yield = pdFALSE;
9000c7dc:	2300      	movs	r3, #0

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
9000c7de:	a901      	add	r1, sp, #4
    yield = pdFALSE;
9000c7e0:	9301      	str	r3, [sp, #4]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
9000c7e2:	f001 f843 	bl	9000d86c <xQueueGiveFromISR>
9000c7e6:	2801      	cmp	r0, #1
9000c7e8:	d116      	bne.n	9000c818 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
    } else {
      portYIELD_FROM_ISR (yield);
9000c7ea:	9b01      	ldr	r3, [sp, #4]
9000c7ec:	b183      	cbz	r3, 9000c810 <osSemaphoreRelease+0x40>
9000c7ee:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
9000c7f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
9000c7f6:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
9000c7fa:	f3bf 8f4f 	dsb	sy
9000c7fe:	f3bf 8f6f 	isb	sy
9000c802:	e005      	b.n	9000c810 <osSemaphoreRelease+0x40>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
9000c804:	461a      	mov	r2, r3
9000c806:	4619      	mov	r1, r3
9000c808:	f000 fda0 	bl	9000d34c <xQueueGenericSend>
9000c80c:	2801      	cmp	r0, #1
9000c80e:	d103      	bne.n	9000c818 <osSemaphoreRelease+0x48>
  stat = osOK;
9000c810:	2000      	movs	r0, #0
      stat = osErrorResource;
    }
  }

  return (stat);
}
9000c812:	b003      	add	sp, #12
9000c814:	f85d fb04 	ldr.w	pc, [sp], #4
      stat = osErrorResource;
9000c818:	f06f 0002 	mvn.w	r0, #2
9000c81c:	e7f9      	b.n	9000c812 <osSemaphoreRelease+0x42>
    stat = osErrorParameter;
9000c81e:	f06f 0003 	mvn.w	r0, #3
}
9000c822:	4770      	bx	lr

9000c824 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
9000c824:	b5f0      	push	{r4, r5, r6, r7, lr}
9000c826:	b083      	sub	sp, #12
9000c828:	f3ef 8705 	mrs	r7, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
9000c82c:	b987      	cbnz	r7, 9000c850 <osMessageQueueNew+0x2c>
9000c82e:	4605      	mov	r5, r0
9000c830:	b170      	cbz	r0, 9000c850 <osMessageQueueNew+0x2c>
9000c832:	b169      	cbz	r1, 9000c850 <osMessageQueueNew+0x2c>
    mem = -1;

    if (attr != NULL) {
9000c834:	4614      	mov	r4, r2
9000c836:	b17a      	cbz	r2, 9000c858 <osMessageQueueNew+0x34>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
9000c838:	e9d2 3202 	ldrd	r3, r2, [r2, #8]
9000c83c:	b1c3      	cbz	r3, 9000c870 <osMessageQueueNew+0x4c>
9000c83e:	2a4f      	cmp	r2, #79	@ 0x4f
9000c840:	d906      	bls.n	9000c850 <osMessageQueueNew+0x2c>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
9000c842:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
9000c844:	b122      	cbz	r2, 9000c850 <osMessageQueueNew+0x2c>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
9000c846:	fb01 f505 	mul.w	r5, r1, r5
9000c84a:	6966      	ldr	r6, [r4, #20]
9000c84c:	42ae      	cmp	r6, r5
9000c84e:	d21e      	bcs.n	9000c88e <osMessageQueueNew+0x6a>
  hQueue = NULL;
9000c850:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
9000c852:	4628      	mov	r0, r5
9000c854:	b003      	add	sp, #12
9000c856:	bdf0      	pop	{r4, r5, r6, r7, pc}
          hQueue = xQueueCreate (msg_count, msg_size);
9000c858:	f000 fc90 	bl	9000d17c <xQueueGenericCreate>
    if (hQueue != NULL) {
9000c85c:	4605      	mov	r5, r0
9000c85e:	2800      	cmp	r0, #0
9000c860:	d0f6      	beq.n	9000c850 <osMessageQueueNew+0x2c>
      vQueueAddToRegistry (hQueue, name);
9000c862:	4628      	mov	r0, r5
9000c864:	4621      	mov	r1, r4
9000c866:	f001 fc2d 	bl	9000e0c4 <vQueueAddToRegistry>
}
9000c86a:	4628      	mov	r0, r5
9000c86c:	b003      	add	sp, #12
9000c86e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
9000c870:	2a00      	cmp	r2, #0
9000c872:	d1ed      	bne.n	9000c850 <osMessageQueueNew+0x2c>
9000c874:	6923      	ldr	r3, [r4, #16]
9000c876:	2b00      	cmp	r3, #0
9000c878:	d1ea      	bne.n	9000c850 <osMessageQueueNew+0x2c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
9000c87a:	6962      	ldr	r2, [r4, #20]
9000c87c:	2a00      	cmp	r2, #0
9000c87e:	d1e7      	bne.n	9000c850 <osMessageQueueNew+0x2c>
          hQueue = xQueueCreate (msg_count, msg_size);
9000c880:	f000 fc7c 	bl	9000d17c <xQueueGenericCreate>
    if (hQueue != NULL) {
9000c884:	4605      	mov	r5, r0
9000c886:	2800      	cmp	r0, #0
9000c888:	d0e2      	beq.n	9000c850 <osMessageQueueNew+0x2c>
        name = attr->name;
9000c88a:	6824      	ldr	r4, [r4, #0]
9000c88c:	e7e9      	b.n	9000c862 <osMessageQueueNew+0x3e>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
9000c88e:	9700      	str	r7, [sp, #0]
9000c890:	f000 fc08 	bl	9000d0a4 <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
9000c894:	4605      	mov	r5, r0
9000c896:	2800      	cmp	r0, #0
9000c898:	d1f7      	bne.n	9000c88a <osMessageQueueNew+0x66>
9000c89a:	e7d9      	b.n	9000c850 <osMessageQueueNew+0x2c>

9000c89c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
9000c89c:	b560      	push	{r5, r6, lr}
9000c89e:	461e      	mov	r6, r3
9000c8a0:	b083      	sub	sp, #12
9000c8a2:	f3ef 8205 	mrs	r2, IPSR
  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
9000c8a6:	fab0 f580 	clz	r5, r0
9000c8aa:	fab1 f381 	clz	r3, r1
9000c8ae:	096d      	lsrs	r5, r5, #5
9000c8b0:	095b      	lsrs	r3, r3, #5
  if (IS_IRQ()) {
9000c8b2:	b1da      	cbz	r2, 9000c8ec <osMessageQueuePut+0x50>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
9000c8b4:	2e00      	cmp	r6, #0
9000c8b6:	bf18      	it	ne
9000c8b8:	f043 0301 	orrne.w	r3, r3, #1
9000c8bc:	bb33      	cbnz	r3, 9000c90c <osMessageQueuePut+0x70>
9000c8be:	bb2d      	cbnz	r5, 9000c90c <osMessageQueuePut+0x70>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
9000c8c0:	462b      	mov	r3, r5
9000c8c2:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
9000c8c4:	9501      	str	r5, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
9000c8c6:	f000 ff6b 	bl	9000d7a0 <xQueueGenericSendFromISR>
9000c8ca:	2801      	cmp	r0, #1
9000c8cc:	d11a      	bne.n	9000c904 <osMessageQueuePut+0x68>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
9000c8ce:	9b01      	ldr	r3, [sp, #4]
9000c8d0:	b14b      	cbz	r3, 9000c8e6 <osMessageQueuePut+0x4a>
9000c8d2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
9000c8d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
9000c8da:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
9000c8de:	f3bf 8f4f 	dsb	sy
9000c8e2:	f3bf 8f6f 	isb	sy
  stat = osOK;
9000c8e6:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
9000c8e8:	b003      	add	sp, #12
9000c8ea:	bd60      	pop	{r5, r6, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
9000c8ec:	b975      	cbnz	r5, 9000c90c <osMessageQueuePut+0x70>
9000c8ee:	b96b      	cbnz	r3, 9000c90c <osMessageQueuePut+0x70>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
9000c8f0:	4632      	mov	r2, r6
9000c8f2:	f000 fd2b 	bl	9000d34c <xQueueGenericSend>
9000c8f6:	2801      	cmp	r0, #1
9000c8f8:	d0f5      	beq.n	9000c8e6 <osMessageQueuePut+0x4a>
        if (timeout != 0U) {
9000c8fa:	b11e      	cbz	r6, 9000c904 <osMessageQueuePut+0x68>
          stat = osErrorTimeout;
9000c8fc:	f06f 0001 	mvn.w	r0, #1
}
9000c900:	b003      	add	sp, #12
9000c902:	bd60      	pop	{r5, r6, pc}
        stat = osErrorResource;
9000c904:	f06f 0002 	mvn.w	r0, #2
}
9000c908:	b003      	add	sp, #12
9000c90a:	bd60      	pop	{r5, r6, pc}
      stat = osErrorParameter;
9000c90c:	f06f 0003 	mvn.w	r0, #3
  return (stat);
9000c910:	e7ea      	b.n	9000c8e8 <osMessageQueuePut+0x4c>
9000c912:	bf00      	nop

9000c914 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
9000c914:	b570      	push	{r4, r5, r6, lr}
9000c916:	461e      	mov	r6, r3
9000c918:	b082      	sub	sp, #8
9000c91a:	f3ef 8305 	mrs	r3, IPSR
  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
9000c91e:	fab0 f580 	clz	r5, r0
9000c922:	fab1 f481 	clz	r4, r1
9000c926:	096d      	lsrs	r5, r5, #5
9000c928:	0964      	lsrs	r4, r4, #5
  if (IS_IRQ()) {
9000c92a:	b1d3      	cbz	r3, 9000c962 <osMessageQueueGet+0x4e>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
9000c92c:	2e00      	cmp	r6, #0
9000c92e:	bf18      	it	ne
9000c930:	f044 0401 	orrne.w	r4, r4, #1
9000c934:	bb2c      	cbnz	r4, 9000c982 <osMessageQueueGet+0x6e>
9000c936:	bb25      	cbnz	r5, 9000c982 <osMessageQueueGet+0x6e>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
9000c938:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
9000c93a:	9501      	str	r5, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
9000c93c:	f001 fb1e 	bl	9000df7c <xQueueReceiveFromISR>
9000c940:	2801      	cmp	r0, #1
9000c942:	d11a      	bne.n	9000c97a <osMessageQueueGet+0x66>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
9000c944:	9b01      	ldr	r3, [sp, #4]
9000c946:	b14b      	cbz	r3, 9000c95c <osMessageQueueGet+0x48>
9000c948:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
9000c94c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
9000c950:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
9000c954:	f3bf 8f4f 	dsb	sy
9000c958:	f3bf 8f6f 	isb	sy
  stat = osOK;
9000c95c:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
9000c95e:	b002      	add	sp, #8
9000c960:	bd70      	pop	{r4, r5, r6, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
9000c962:	b975      	cbnz	r5, 9000c982 <osMessageQueueGet+0x6e>
9000c964:	b96c      	cbnz	r4, 9000c982 <osMessageQueueGet+0x6e>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
9000c966:	4632      	mov	r2, r6
9000c968:	f000 ffd6 	bl	9000d918 <xQueueReceive>
9000c96c:	2801      	cmp	r0, #1
9000c96e:	d0f5      	beq.n	9000c95c <osMessageQueueGet+0x48>
        if (timeout != 0U) {
9000c970:	b11e      	cbz	r6, 9000c97a <osMessageQueueGet+0x66>
          stat = osErrorTimeout;
9000c972:	f06f 0001 	mvn.w	r0, #1
}
9000c976:	b002      	add	sp, #8
9000c978:	bd70      	pop	{r4, r5, r6, pc}
        stat = osErrorResource;
9000c97a:	f06f 0002 	mvn.w	r0, #2
}
9000c97e:	b002      	add	sp, #8
9000c980:	bd70      	pop	{r4, r5, r6, pc}
      stat = osErrorParameter;
9000c982:	f06f 0003 	mvn.w	r0, #3
  return (stat);
9000c986:	e7ea      	b.n	9000c95e <osMessageQueueGet+0x4a>

9000c988 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
9000c988:	4b04      	ldr	r3, [pc, #16]	@ (9000c99c <vApplicationGetIdleTaskMemory+0x14>)
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
9000c98a:	b410      	push	{r4}
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
9000c98c:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
9000c98e:	2380      	movs	r3, #128	@ 0x80
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
9000c990:	4c03      	ldr	r4, [pc, #12]	@ (9000c9a0 <vApplicationGetIdleTaskMemory+0x18>)
9000c992:	600c      	str	r4, [r1, #0]
}
9000c994:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
9000c998:	6013      	str	r3, [r2, #0]
}
9000c99a:	4770      	bx	lr
9000c99c:	2400c52c 	.word	0x2400c52c
9000c9a0:	2400c32c 	.word	0x2400c32c

9000c9a4 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
9000c9a4:	4b05      	ldr	r3, [pc, #20]	@ (9000c9bc <vApplicationGetTimerTaskMemory+0x18>)
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
9000c9a6:	b410      	push	{r4}
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
9000c9a8:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
9000c9aa:	f44f 7380 	mov.w	r3, #256	@ 0x100
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
9000c9ae:	4c04      	ldr	r4, [pc, #16]	@ (9000c9c0 <vApplicationGetTimerTaskMemory+0x1c>)
9000c9b0:	600c      	str	r4, [r1, #0]
}
9000c9b2:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
9000c9b6:	6013      	str	r3, [r2, #0]
}
9000c9b8:	4770      	bx	lr
9000c9ba:	bf00      	nop
9000c9bc:	2400c2cc 	.word	0x2400c2cc
9000c9c0:	2400becc 	.word	0x2400becc

9000c9c4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
9000c9c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
9000c9c8:	4604      	mov	r4, r0
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
9000c9ca:	f002 f84f 	bl	9000ea6c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
9000c9ce:	4a53      	ldr	r2, [pc, #332]	@ (9000cb1c <pvPortMalloc+0x158>)
9000c9d0:	6815      	ldr	r5, [r2, #0]
9000c9d2:	2d00      	cmp	r5, #0
9000c9d4:	d035      	beq.n	9000ca42 <pvPortMalloc+0x7e>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
9000c9d6:	4b52      	ldr	r3, [pc, #328]	@ (9000cb20 <pvPortMalloc+0x15c>)
9000c9d8:	681e      	ldr	r6, [r3, #0]
9000c9da:	4234      	tst	r4, r6
9000c9dc:	d12b      	bne.n	9000ca36 <pvPortMalloc+0x72>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
9000c9de:	b354      	cbz	r4, 9000ca36 <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
9000c9e0:	f104 0008 	add.w	r0, r4, #8

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
9000c9e4:	0764      	lsls	r4, r4, #29
9000c9e6:	d002      	beq.n	9000c9ee <pvPortMalloc+0x2a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
9000c9e8:	f020 0007 	bic.w	r0, r0, #7
9000c9ec:	3008      	adds	r0, #8
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
9000c9ee:	b310      	cbz	r0, 9000ca36 <pvPortMalloc+0x72>
9000c9f0:	f8df e140 	ldr.w	lr, [pc, #320]	@ 9000cb34 <pvPortMalloc+0x170>
9000c9f4:	f8de c000 	ldr.w	ip, [lr]
9000c9f8:	4584      	cmp	ip, r0
9000c9fa:	d31c      	bcc.n	9000ca36 <pvPortMalloc+0x72>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
9000c9fc:	4c49      	ldr	r4, [pc, #292]	@ (9000cb24 <pvPortMalloc+0x160>)
9000c9fe:	6823      	ldr	r3, [r4, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
9000ca00:	e003      	b.n	9000ca0a <pvPortMalloc+0x46>
9000ca02:	681a      	ldr	r2, [r3, #0]
9000ca04:	b122      	cbz	r2, 9000ca10 <pvPortMalloc+0x4c>
9000ca06:	461c      	mov	r4, r3
9000ca08:	4613      	mov	r3, r2
9000ca0a:	6859      	ldr	r1, [r3, #4]
9000ca0c:	4281      	cmp	r1, r0
9000ca0e:	d3f8      	bcc.n	9000ca02 <pvPortMalloc+0x3e>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
9000ca10:	42ab      	cmp	r3, r5
9000ca12:	d010      	beq.n	9000ca36 <pvPortMalloc+0x72>
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
9000ca14:	681a      	ldr	r2, [r3, #0]
9000ca16:	6022      	str	r2, [r4, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
9000ca18:	1a0a      	subs	r2, r1, r0
9000ca1a:	2a10      	cmp	r2, #16
9000ca1c:	d947      	bls.n	9000caae <pvPortMalloc+0xea>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
9000ca1e:	181c      	adds	r4, r3, r0
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
9000ca20:	0761      	lsls	r1, r4, #29
9000ca22:	d02d      	beq.n	9000ca80 <pvPortMalloc+0xbc>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
9000ca24:	f04f 0350 	mov.w	r3, #80	@ 0x50
9000ca28:	f383 8811 	msr	BASEPRI, r3
9000ca2c:	f3bf 8f6f 	isb	sy
9000ca30:	f3bf 8f4f 	dsb	sy
9000ca34:	e7fe      	b.n	9000ca34 <pvPortMalloc+0x70>
void *pvReturn = NULL;
9000ca36:	2400      	movs	r4, #0
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
9000ca38:	f002 f820 	bl	9000ea7c <xTaskResumeAll>
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
}
9000ca3c:	4620      	mov	r0, r4
9000ca3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
9000ca42:	4b39      	ldr	r3, [pc, #228]	@ (9000cb28 <pvPortMalloc+0x164>)
	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
9000ca44:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
9000ca48:	4e36      	ldr	r6, [pc, #216]	@ (9000cb24 <pvPortMalloc+0x160>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
9000ca4a:	075d      	lsls	r5, r3, #29
	uxAddress -= xHeapStructSize;
9000ca4c:	4d37      	ldr	r5, [pc, #220]	@ (9000cb2c <pvPortMalloc+0x168>)
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
9000ca4e:	bf18      	it	ne
9000ca50:	3307      	addne	r3, #7
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
9000ca52:	f025 0507 	bic.w	r5, r5, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
9000ca56:	bf18      	it	ne
9000ca58:	f023 0307 	bicne.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
9000ca5c:	6015      	str	r5, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
9000ca5e:	2200      	movs	r2, #0
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
9000ca60:	6033      	str	r3, [r6, #0]
9000ca62:	4619      	mov	r1, r3
	xStart.xBlockSize = ( size_t ) 0;
9000ca64:	6072      	str	r2, [r6, #4]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
9000ca66:	1aeb      	subs	r3, r5, r3
}
9000ca68:	4606      	mov	r6, r0
	pxEnd->pxNextFreeBlock = NULL;
9000ca6a:	e9c5 2200 	strd	r2, r2, [r5]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
9000ca6e:	4a30      	ldr	r2, [pc, #192]	@ (9000cb30 <pvPortMalloc+0x16c>)
9000ca70:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
9000ca72:	4a30      	ldr	r2, [pc, #192]	@ (9000cb34 <pvPortMalloc+0x170>)
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
9000ca74:	e9c1 5300 	strd	r5, r3, [r1]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
9000ca78:	6013      	str	r3, [r2, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
9000ca7a:	4b29      	ldr	r3, [pc, #164]	@ (9000cb20 <pvPortMalloc+0x15c>)
9000ca7c:	6018      	str	r0, [r3, #0]
}
9000ca7e:	e7ac      	b.n	9000c9da <pvPortMalloc+0x16>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
9000ca80:	6062      	str	r2, [r4, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
9000ca82:	4a28      	ldr	r2, [pc, #160]	@ (9000cb24 <pvPortMalloc+0x160>)
						pxBlock->xBlockSize = xWantedSize;
9000ca84:	6058      	str	r0, [r3, #4]
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
9000ca86:	4617      	mov	r7, r2
9000ca88:	6812      	ldr	r2, [r2, #0]
9000ca8a:	4294      	cmp	r4, r2
9000ca8c:	d8fb      	bhi.n	9000ca86 <pvPortMalloc+0xc2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
9000ca8e:	6879      	ldr	r1, [r7, #4]
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
9000ca90:	f8d4 8004 	ldr.w	r8, [r4, #4]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
9000ca94:	eb07 0901 	add.w	r9, r7, r1
9000ca98:	454c      	cmp	r4, r9
9000ca9a:	d028      	beq.n	9000caee <pvPortMalloc+0x12a>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
9000ca9c:	eb04 0108 	add.w	r1, r4, r8
9000caa0:	428a      	cmp	r2, r1
9000caa2:	d02e      	beq.n	9000cb02 <pvPortMalloc+0x13e>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
9000caa4:	4601      	mov	r1, r0
9000caa6:	6022      	str	r2, [r4, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
9000caa8:	42a7      	cmp	r7, r4
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
9000caaa:	bf18      	it	ne
9000caac:	603c      	strne	r4, [r7, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
9000caae:	4820      	ldr	r0, [pc, #128]	@ (9000cb30 <pvPortMalloc+0x16c>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
9000cab0:	ebac 0201 	sub.w	r2, ip, r1
					pxBlock->pxNextFreeBlock = NULL;
9000cab4:	2500      	movs	r5, #0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
9000cab6:	4331      	orrs	r1, r6
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
9000cab8:	6804      	ldr	r4, [r0, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
9000caba:	f8ce 2000 	str.w	r2, [lr]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
9000cabe:	42a2      	cmp	r2, r4
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
9000cac0:	f103 0408 	add.w	r4, r3, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
9000cac4:	6059      	str	r1, [r3, #4]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
9000cac6:	bf38      	it	cc
9000cac8:	6002      	strcc	r2, [r0, #0]
					xNumberOfSuccessfulAllocations++;
9000caca:	481b      	ldr	r0, [pc, #108]	@ (9000cb38 <pvPortMalloc+0x174>)
					pxBlock->pxNextFreeBlock = NULL;
9000cacc:	601d      	str	r5, [r3, #0]
					xNumberOfSuccessfulAllocations++;
9000cace:	6802      	ldr	r2, [r0, #0]
9000cad0:	3201      	adds	r2, #1
9000cad2:	6002      	str	r2, [r0, #0]
	( void ) xTaskResumeAll();
9000cad4:	f001 ffd2 	bl	9000ea7c <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
9000cad8:	0763      	lsls	r3, r4, #29
9000cada:	d0af      	beq.n	9000ca3c <pvPortMalloc+0x78>
9000cadc:	f04f 0350 	mov.w	r3, #80	@ 0x50
9000cae0:	f383 8811 	msr	BASEPRI, r3
9000cae4:	f3bf 8f6f 	isb	sy
9000cae8:	f3bf 8f4f 	dsb	sy
9000caec:	e7fe      	b.n	9000caec <pvPortMalloc+0x128>
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
9000caee:	4488      	add	r8, r1
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
9000caf0:	eb07 0108 	add.w	r1, r7, r8
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
9000caf4:	f8c7 8004 	str.w	r8, [r7, #4]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
9000caf8:	428a      	cmp	r2, r1
9000cafa:	d001      	beq.n	9000cb00 <pvPortMalloc+0x13c>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
9000cafc:	6859      	ldr	r1, [r3, #4]
9000cafe:	e7d6      	b.n	9000caae <pvPortMalloc+0xea>
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
9000cb00:	463c      	mov	r4, r7
		if( pxIterator->pxNextFreeBlock != pxEnd )
9000cb02:	42aa      	cmp	r2, r5
9000cb04:	d006      	beq.n	9000cb14 <pvPortMalloc+0x150>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
9000cb06:	6851      	ldr	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
9000cb08:	6812      	ldr	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
9000cb0a:	4441      	add	r1, r8
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
9000cb0c:	6022      	str	r2, [r4, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
9000cb0e:	6061      	str	r1, [r4, #4]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
9000cb10:	6859      	ldr	r1, [r3, #4]
9000cb12:	e7c9      	b.n	9000caa8 <pvPortMalloc+0xe4>
9000cb14:	6859      	ldr	r1, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
9000cb16:	6022      	str	r2, [r4, #0]
9000cb18:	e7c6      	b.n	9000caa8 <pvPortMalloc+0xe4>
9000cb1a:	bf00      	nop
9000cb1c:	2400c5a4 	.word	0x2400c5a4
9000cb20:	2400c590 	.word	0x2400c590
9000cb24:	2400c5a8 	.word	0x2400c5a8
9000cb28:	2400c5b0 	.word	0x2400c5b0
9000cb2c:	24024c48 	.word	0x24024c48
9000cb30:	2400c59c 	.word	0x2400c59c
9000cb34:	2400c5a0 	.word	0x2400c5a0
9000cb38:	2400c598 	.word	0x2400c598

9000cb3c <vPortFree>:
	if( pv != NULL )
9000cb3c:	b1d0      	cbz	r0, 9000cb74 <vPortFree+0x38>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
9000cb3e:	4a2d      	ldr	r2, [pc, #180]	@ (9000cbf4 <vPortFree+0xb8>)
9000cb40:	f850 3c04 	ldr.w	r3, [r0, #-4]
9000cb44:	6812      	ldr	r2, [r2, #0]
9000cb46:	4213      	tst	r3, r2
9000cb48:	d00b      	beq.n	9000cb62 <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
9000cb4a:	f850 1c08 	ldr.w	r1, [r0, #-8]
9000cb4e:	b191      	cbz	r1, 9000cb76 <vPortFree+0x3a>
9000cb50:	f04f 0350 	mov.w	r3, #80	@ 0x50
9000cb54:	f383 8811 	msr	BASEPRI, r3
9000cb58:	f3bf 8f6f 	isb	sy
9000cb5c:	f3bf 8f4f 	dsb	sy
9000cb60:	e7fe      	b.n	9000cb60 <vPortFree+0x24>
9000cb62:	f04f 0350 	mov.w	r3, #80	@ 0x50
9000cb66:	f383 8811 	msr	BASEPRI, r3
9000cb6a:	f3bf 8f6f 	isb	sy
9000cb6e:	f3bf 8f4f 	dsb	sy
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
9000cb72:	e7fe      	b.n	9000cb72 <vPortFree+0x36>
9000cb74:	4770      	bx	lr
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
9000cb76:	ea23 0302 	bic.w	r3, r3, r2
{
9000cb7a:	b530      	push	{r4, r5, lr}
9000cb7c:	b083      	sub	sp, #12
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
9000cb7e:	f840 3c04 	str.w	r3, [r0, #-4]
		puc -= xHeapStructSize;
9000cb82:	f1a0 0408 	sub.w	r4, r0, #8
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
9000cb86:	9001      	str	r0, [sp, #4]
				vTaskSuspendAll();
9000cb88:	f001 ff70 	bl	9000ea6c <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
9000cb8c:	4a1a      	ldr	r2, [pc, #104]	@ (9000cbf8 <vPortFree+0xbc>)
9000cb8e:	9801      	ldr	r0, [sp, #4]
9000cb90:	6813      	ldr	r3, [r2, #0]
9000cb92:	f850 1c04 	ldr.w	r1, [r0, #-4]
9000cb96:	440b      	add	r3, r1
9000cb98:	6013      	str	r3, [r2, #0]
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
9000cb9a:	4b18      	ldr	r3, [pc, #96]	@ (9000cbfc <vPortFree+0xc0>)
9000cb9c:	461a      	mov	r2, r3
9000cb9e:	681b      	ldr	r3, [r3, #0]
9000cba0:	429c      	cmp	r4, r3
9000cba2:	d8fb      	bhi.n	9000cb9c <vPortFree+0x60>
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
9000cba4:	6855      	ldr	r5, [r2, #4]
9000cba6:	eb02 0e05 	add.w	lr, r2, r5
9000cbaa:	4574      	cmp	r4, lr
9000cbac:	d011      	beq.n	9000cbd2 <vPortFree+0x96>
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
9000cbae:	eb04 0c01 	add.w	ip, r4, r1
9000cbb2:	4563      	cmp	r3, ip
9000cbb4:	d013      	beq.n	9000cbde <vPortFree+0xa2>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
9000cbb6:	f840 3c08 	str.w	r3, [r0, #-8]
	if( pxIterator != pxBlockToInsert )
9000cbba:	42a2      	cmp	r2, r4
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
9000cbbc:	bf18      	it	ne
9000cbbe:	6014      	strne	r4, [r2, #0]
					xNumberOfSuccessfulFrees++;
9000cbc0:	4a0f      	ldr	r2, [pc, #60]	@ (9000cc00 <vPortFree+0xc4>)
9000cbc2:	6813      	ldr	r3, [r2, #0]
9000cbc4:	3301      	adds	r3, #1
9000cbc6:	6013      	str	r3, [r2, #0]
}
9000cbc8:	b003      	add	sp, #12
9000cbca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
				( void ) xTaskResumeAll();
9000cbce:	f001 bf55 	b.w	9000ea7c <xTaskResumeAll>
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
9000cbd2:	4429      	add	r1, r5
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
9000cbd4:	1850      	adds	r0, r2, r1
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
9000cbd6:	6051      	str	r1, [r2, #4]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
9000cbd8:	4283      	cmp	r3, r0
9000cbda:	d1f1      	bne.n	9000cbc0 <vPortFree+0x84>
9000cbdc:	4614      	mov	r4, r2
		if( pxIterator->pxNextFreeBlock != pxEnd )
9000cbde:	4809      	ldr	r0, [pc, #36]	@ (9000cc04 <vPortFree+0xc8>)
9000cbe0:	6800      	ldr	r0, [r0, #0]
9000cbe2:	4283      	cmp	r3, r0
9000cbe4:	d003      	beq.n	9000cbee <vPortFree+0xb2>
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
9000cbe6:	e9d3 0500 	ldrd	r0, r5, [r3]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
9000cbea:	4429      	add	r1, r5
9000cbec:	6061      	str	r1, [r4, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
9000cbee:	6020      	str	r0, [r4, #0]
9000cbf0:	e7e3      	b.n	9000cbba <vPortFree+0x7e>
9000cbf2:	bf00      	nop
9000cbf4:	2400c590 	.word	0x2400c590
9000cbf8:	2400c5a0 	.word	0x2400c5a0
9000cbfc:	2400c5a8 	.word	0x2400c5a8
9000cc00:	2400c594 	.word	0x2400c594
9000cc04:	2400c5a4 	.word	0x2400c5a4

9000cc08 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
9000cc08:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
9000cc0c:	f04f 31ff 	mov.w	r1, #4294967295
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
9000cc10:	2200      	movs	r2, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
9000cc12:	6081      	str	r1, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
9000cc14:	6002      	str	r2, [r0, #0]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
9000cc16:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
9000cc18:	e9c0 3303 	strd	r3, r3, [r0, #12]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
9000cc1c:	4770      	bx	lr
9000cc1e:	bf00      	nop

9000cc20 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
9000cc20:	2300      	movs	r3, #0
9000cc22:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
9000cc24:	4770      	bx	lr
9000cc26:	bf00      	nop

9000cc28 <vListInsertEnd>:
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
9000cc28:	6803      	ldr	r3, [r0, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
9000cc2a:	6842      	ldr	r2, [r0, #4]
	( pxList->uxNumberOfItems )++;
9000cc2c:	3301      	adds	r3, #1
{
9000cc2e:	b410      	push	{r4}
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
9000cc30:	6894      	ldr	r4, [r2, #8]
9000cc32:	e9c1 2401 	strd	r2, r4, [r1, #4]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
9000cc36:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
9000cc38:	6091      	str	r1, [r2, #8]
}
9000cc3a:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxNewListItem->pxContainer = pxList;
9000cc3e:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
9000cc40:	6003      	str	r3, [r0, #0]
}
9000cc42:	4770      	bx	lr

9000cc44 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
9000cc44:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
9000cc46:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
9000cc48:	1c6b      	adds	r3, r5, #1
9000cc4a:	d010      	beq.n	9000cc6e <vListInsert+0x2a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
9000cc4c:	f100 0308 	add.w	r3, r0, #8
9000cc50:	461c      	mov	r4, r3
9000cc52:	685b      	ldr	r3, [r3, #4]
9000cc54:	681a      	ldr	r2, [r3, #0]
9000cc56:	42aa      	cmp	r2, r5
9000cc58:	d9fa      	bls.n	9000cc50 <vListInsert+0xc>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
9000cc5a:	6802      	ldr	r2, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
9000cc5c:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
9000cc5e:	3201      	adds	r2, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
9000cc60:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
9000cc62:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
9000cc64:	6061      	str	r1, [r4, #4]
	pxNewListItem->pxContainer = pxList;
9000cc66:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
9000cc68:	6002      	str	r2, [r0, #0]
}
9000cc6a:	bc30      	pop	{r4, r5}
9000cc6c:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
9000cc6e:	6904      	ldr	r4, [r0, #16]
	pxNewListItem->pxNext = pxIterator->pxNext;
9000cc70:	6863      	ldr	r3, [r4, #4]
9000cc72:	e7f2      	b.n	9000cc5a <vListInsert+0x16>

9000cc74 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
9000cc74:	6903      	ldr	r3, [r0, #16]
{
9000cc76:	b410      	push	{r4}

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
9000cc78:	685c      	ldr	r4, [r3, #4]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
9000cc7a:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
	if( pxList->pxIndex == pxItemToRemove )
9000cc7e:	4284      	cmp	r4, r0

	pxItemToRemove->pxContainer = NULL;
	( pxList->uxNumberOfItems )--;

	return pxList->uxNumberOfItems;
}
9000cc80:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
9000cc84:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
9000cc86:	6051      	str	r1, [r2, #4]
	pxItemToRemove->pxContainer = NULL;
9000cc88:	f04f 0100 	mov.w	r1, #0
		pxList->pxIndex = pxItemToRemove->pxPrevious;
9000cc8c:	bf08      	it	eq
9000cc8e:	605a      	streq	r2, [r3, #4]
	( pxList->uxNumberOfItems )--;
9000cc90:	681a      	ldr	r2, [r3, #0]
	pxItemToRemove->pxContainer = NULL;
9000cc92:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;
9000cc94:	3a01      	subs	r2, #1
9000cc96:	601a      	str	r2, [r3, #0]
	return pxList->uxNumberOfItems;
9000cc98:	6818      	ldr	r0, [r3, #0]
}
9000cc9a:	4770      	bx	lr

9000cc9c <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
9000cc9c:	4808      	ldr	r0, [pc, #32]	@ (9000ccc0 <prvPortStartFirstTask+0x24>)
9000cc9e:	6800      	ldr	r0, [r0, #0]
9000cca0:	6800      	ldr	r0, [r0, #0]
9000cca2:	f380 8808 	msr	MSP, r0
9000cca6:	f04f 0000 	mov.w	r0, #0
9000ccaa:	f380 8814 	msr	CONTROL, r0
9000ccae:	b662      	cpsie	i
9000ccb0:	b661      	cpsie	f
9000ccb2:	f3bf 8f4f 	dsb	sy
9000ccb6:	f3bf 8f6f 	isb	sy
9000ccba:	df00      	svc	0
9000ccbc:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
9000ccbe:	0000      	.short	0x0000
9000ccc0:	e000ed08 	.word	0xe000ed08

9000ccc4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
9000ccc4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 9000ccd4 <vPortEnableVFP+0x10>
9000ccc8:	6801      	ldr	r1, [r0, #0]
9000ccca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
9000ccce:	6001      	str	r1, [r0, #0]
9000ccd0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
9000ccd2:	0000      	.short	0x0000
9000ccd4:	e000ed88 	.word	0xe000ed88

9000ccd8 <prvTaskExitError>:
	configASSERT( uxCriticalNesting == ~0UL );
9000ccd8:	4b0e      	ldr	r3, [pc, #56]	@ (9000cd14 <prvTaskExitError+0x3c>)
{
9000ccda:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
9000ccdc:	2200      	movs	r2, #0
	configASSERT( uxCriticalNesting == ~0UL );
9000ccde:	681b      	ldr	r3, [r3, #0]
volatile uint32_t ulDummy = 0;
9000cce0:	9201      	str	r2, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
9000cce2:	3301      	adds	r3, #1
9000cce4:	d008      	beq.n	9000ccf8 <prvTaskExitError+0x20>
9000cce6:	f04f 0350 	mov.w	r3, #80	@ 0x50
9000ccea:	f383 8811 	msr	BASEPRI, r3
9000ccee:	f3bf 8f6f 	isb	sy
9000ccf2:	f3bf 8f4f 	dsb	sy
9000ccf6:	e7fe      	b.n	9000ccf6 <prvTaskExitError+0x1e>
9000ccf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
9000ccfc:	f383 8811 	msr	BASEPRI, r3
9000cd00:	f3bf 8f6f 	isb	sy
9000cd04:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
9000cd08:	9b01      	ldr	r3, [sp, #4]
9000cd0a:	2b00      	cmp	r3, #0
9000cd0c:	d0fc      	beq.n	9000cd08 <prvTaskExitError+0x30>
}
9000cd0e:	b002      	add	sp, #8
9000cd10:	4770      	bx	lr
9000cd12:	bf00      	nop
9000cd14:	24000064 	.word	0x24000064

9000cd18 <pxPortInitialiseStack>:
{
9000cd18:	4603      	mov	r3, r0
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
9000cd1a:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
9000cd1e:	4809      	ldr	r0, [pc, #36]	@ (9000cd44 <pxPortInitialiseStack+0x2c>)
{
9000cd20:	b410      	push	{r4}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
9000cd22:	f04f 7480 	mov.w	r4, #16777216	@ 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
9000cd26:	f843 0c0c 	str.w	r0, [r3, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
9000cd2a:	f843 2c20 	str.w	r2, [r3, #-32]
}
9000cd2e:	f1a3 0044 	sub.w	r0, r3, #68	@ 0x44
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
9000cd32:	e943 1402 	strd	r1, r4, [r3, #-8]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
9000cd36:	f06f 0102 	mvn.w	r1, #2
}
9000cd3a:	f85d 4b04 	ldr.w	r4, [sp], #4
	*pxTopOfStack = portINITIAL_EXC_RETURN;
9000cd3e:	f843 1c24 	str.w	r1, [r3, #-36]
}
9000cd42:	4770      	bx	lr
9000cd44:	9000ccd9 	.word	0x9000ccd9
	...

9000cd50 <SVC_Handler>:
	__asm volatile (
9000cd50:	4b07      	ldr	r3, [pc, #28]	@ (9000cd70 <pxCurrentTCBConst2>)
9000cd52:	6819      	ldr	r1, [r3, #0]
9000cd54:	6808      	ldr	r0, [r1, #0]
9000cd56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9000cd5a:	f380 8809 	msr	PSP, r0
9000cd5e:	f3bf 8f6f 	isb	sy
9000cd62:	f04f 0000 	mov.w	r0, #0
9000cd66:	f380 8811 	msr	BASEPRI, r0
9000cd6a:	4770      	bx	lr
9000cd6c:	f3af 8000 	nop.w

9000cd70 <pxCurrentTCBConst2>:
9000cd70:	24025190 	.word	0x24025190

9000cd74 <vPortEnterCritical>:
9000cd74:	f04f 0350 	mov.w	r3, #80	@ 0x50
9000cd78:	f383 8811 	msr	BASEPRI, r3
9000cd7c:	f3bf 8f6f 	isb	sy
9000cd80:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
9000cd84:	4a0b      	ldr	r2, [pc, #44]	@ (9000cdb4 <vPortEnterCritical+0x40>)
9000cd86:	6813      	ldr	r3, [r2, #0]
9000cd88:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
9000cd8a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
9000cd8c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
9000cd8e:	d000      	beq.n	9000cd92 <vPortEnterCritical+0x1e>
}
9000cd90:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
9000cd92:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
9000cd96:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
9000cd9a:	b2db      	uxtb	r3, r3
9000cd9c:	2b00      	cmp	r3, #0
9000cd9e:	d0f7      	beq.n	9000cd90 <vPortEnterCritical+0x1c>
9000cda0:	f04f 0350 	mov.w	r3, #80	@ 0x50
9000cda4:	f383 8811 	msr	BASEPRI, r3
9000cda8:	f3bf 8f6f 	isb	sy
9000cdac:	f3bf 8f4f 	dsb	sy
9000cdb0:	e7fe      	b.n	9000cdb0 <vPortEnterCritical+0x3c>
9000cdb2:	bf00      	nop
9000cdb4:	24000064 	.word	0x24000064

9000cdb8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
9000cdb8:	4a08      	ldr	r2, [pc, #32]	@ (9000cddc <vPortExitCritical+0x24>)
9000cdba:	6813      	ldr	r3, [r2, #0]
9000cdbc:	b943      	cbnz	r3, 9000cdd0 <vPortExitCritical+0x18>
9000cdbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
9000cdc2:	f383 8811 	msr	BASEPRI, r3
9000cdc6:	f3bf 8f6f 	isb	sy
9000cdca:	f3bf 8f4f 	dsb	sy
9000cdce:	e7fe      	b.n	9000cdce <vPortExitCritical+0x16>
	uxCriticalNesting--;
9000cdd0:	3b01      	subs	r3, #1
9000cdd2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
9000cdd4:	b90b      	cbnz	r3, 9000cdda <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
9000cdd6:	f383 8811 	msr	BASEPRI, r3
}
9000cdda:	4770      	bx	lr
9000cddc:	24000064 	.word	0x24000064

9000cde0 <PendSV_Handler>:
	__asm volatile
9000cde0:	f3ef 8009 	mrs	r0, PSP
9000cde4:	f3bf 8f6f 	isb	sy
9000cde8:	4b15      	ldr	r3, [pc, #84]	@ (9000ce40 <pxCurrentTCBConst>)
9000cdea:	681a      	ldr	r2, [r3, #0]
9000cdec:	f01e 0f10 	tst.w	lr, #16
9000cdf0:	bf08      	it	eq
9000cdf2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
9000cdf6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9000cdfa:	6010      	str	r0, [r2, #0]
9000cdfc:	e92d 0009 	stmdb	sp!, {r0, r3}
9000ce00:	f04f 0050 	mov.w	r0, #80	@ 0x50
9000ce04:	f380 8811 	msr	BASEPRI, r0
9000ce08:	f3bf 8f4f 	dsb	sy
9000ce0c:	f3bf 8f6f 	isb	sy
9000ce10:	f001 fe70 	bl	9000eaf4 <vTaskSwitchContext>
9000ce14:	f04f 0000 	mov.w	r0, #0
9000ce18:	f380 8811 	msr	BASEPRI, r0
9000ce1c:	bc09      	pop	{r0, r3}
9000ce1e:	6819      	ldr	r1, [r3, #0]
9000ce20:	6808      	ldr	r0, [r1, #0]
9000ce22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9000ce26:	f01e 0f10 	tst.w	lr, #16
9000ce2a:	bf08      	it	eq
9000ce2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
9000ce30:	f380 8809 	msr	PSP, r0
9000ce34:	f3bf 8f6f 	isb	sy
9000ce38:	4770      	bx	lr
9000ce3a:	bf00      	nop
9000ce3c:	f3af 8000 	nop.w

9000ce40 <pxCurrentTCBConst>:
9000ce40:	24025190 	.word	0x24025190

9000ce44 <xPortSysTickHandler>:
{
9000ce44:	b508      	push	{r3, lr}
	__asm volatile
9000ce46:	f04f 0350 	mov.w	r3, #80	@ 0x50
9000ce4a:	f383 8811 	msr	BASEPRI, r3
9000ce4e:	f3bf 8f6f 	isb	sy
9000ce52:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
9000ce56:	f001 fe27 	bl	9000eaa8 <xTaskIncrementTick>
9000ce5a:	b128      	cbz	r0, 9000ce68 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
9000ce5c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
9000ce60:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
9000ce64:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
9000ce68:	2300      	movs	r3, #0
9000ce6a:	f383 8811 	msr	BASEPRI, r3
}
9000ce6e:	bd08      	pop	{r3, pc}

9000ce70 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
9000ce70:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
9000ce74:	2300      	movs	r3, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
9000ce76:	4806      	ldr	r0, [pc, #24]	@ (9000ce90 <vPortSetupTimerInterrupt+0x20>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
9000ce78:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
9000ce7a:	4906      	ldr	r1, [pc, #24]	@ (9000ce94 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
9000ce7c:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
9000ce7e:	6803      	ldr	r3, [r0, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
9000ce80:	2007      	movs	r0, #7
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
9000ce82:	fba1 1303 	umull	r1, r3, r1, r3
9000ce86:	099b      	lsrs	r3, r3, #6
9000ce88:	3b01      	subs	r3, #1
9000ce8a:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
9000ce8c:	6110      	str	r0, [r2, #16]
}
9000ce8e:	4770      	bx	lr
9000ce90:	24000058 	.word	0x24000058
9000ce94:	10624dd3 	.word	0x10624dd3

9000ce98 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
9000ce98:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
9000ce9c:	4a48      	ldr	r2, [pc, #288]	@ (9000cfc0 <xPortStartScheduler+0x128>)
9000ce9e:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	@ 0xd00
9000cea2:	4291      	cmp	r1, r2
9000cea4:	d041      	beq.n	9000cf2a <xPortStartScheduler+0x92>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
9000cea6:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
9000ceaa:	4b46      	ldr	r3, [pc, #280]	@ (9000cfc4 <xPortStartScheduler+0x12c>)
9000ceac:	429a      	cmp	r2, r3
9000ceae:	d033      	beq.n	9000cf18 <xPortStartScheduler+0x80>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
9000ceb0:	4b45      	ldr	r3, [pc, #276]	@ (9000cfc8 <xPortStartScheduler+0x130>)
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
9000ceb2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
9000ceb6:	4845      	ldr	r0, [pc, #276]	@ (9000cfcc <xPortStartScheduler+0x134>)
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
9000ceb8:	4945      	ldr	r1, [pc, #276]	@ (9000cfd0 <xPortStartScheduler+0x138>)
{
9000ceba:	b570      	push	{r4, r5, r6, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
9000cebc:	781a      	ldrb	r2, [r3, #0]
{
9000cebe:	b084      	sub	sp, #16
		ulOriginalPriority = *pucFirstUserPriorityRegister;
9000cec0:	b2d2      	uxtb	r2, r2
9000cec2:	9202      	str	r2, [sp, #8]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
9000cec4:	2207      	movs	r2, #7
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
9000cec6:	f883 c000 	strb.w	ip, [r3]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
9000ceca:	781b      	ldrb	r3, [r3, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
9000cecc:	6002      	str	r2, [r0, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
9000cece:	b2db      	uxtb	r3, r3
9000ced0:	f88d 3007 	strb.w	r3, [sp, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
9000ced4:	f89d 3007 	ldrb.w	r3, [sp, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
9000ced8:	f89d 2007 	ldrb.w	r2, [sp, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
9000cedc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
9000cee0:	0612      	lsls	r2, r2, #24
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
9000cee2:	700b      	strb	r3, [r1, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
9000cee4:	d50f      	bpl.n	9000cf06 <xPortStartScheduler+0x6e>
9000cee6:	2206      	movs	r2, #6
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
9000cee8:	f89d 3007 	ldrb.w	r3, [sp, #7]
9000ceec:	4611      	mov	r1, r2
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
9000ceee:	3a01      	subs	r2, #1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
9000cef0:	005b      	lsls	r3, r3, #1
9000cef2:	b2db      	uxtb	r3, r3
9000cef4:	f88d 3007 	strb.w	r3, [sp, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
9000cef8:	f89d 3007 	ldrb.w	r3, [sp, #7]
9000cefc:	061b      	lsls	r3, r3, #24
9000cefe:	d4f3      	bmi.n	9000cee8 <xPortStartScheduler+0x50>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
9000cf00:	2903      	cmp	r1, #3
9000cf02:	d01b      	beq.n	9000cf3c <xPortStartScheduler+0xa4>
9000cf04:	6001      	str	r1, [r0, #0]
	__asm volatile
9000cf06:	f04f 0350 	mov.w	r3, #80	@ 0x50
9000cf0a:	f383 8811 	msr	BASEPRI, r3
9000cf0e:	f3bf 8f6f 	isb	sy
9000cf12:	f3bf 8f4f 	dsb	sy
9000cf16:	e7fe      	b.n	9000cf16 <xPortStartScheduler+0x7e>
9000cf18:	f04f 0350 	mov.w	r3, #80	@ 0x50
9000cf1c:	f383 8811 	msr	BASEPRI, r3
9000cf20:	f3bf 8f6f 	isb	sy
9000cf24:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
9000cf28:	e7fe      	b.n	9000cf28 <xPortStartScheduler+0x90>
9000cf2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
9000cf2e:	f383 8811 	msr	BASEPRI, r3
9000cf32:	f3bf 8f6f 	isb	sy
9000cf36:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
9000cf3a:	e7fe      	b.n	9000cf3a <xPortStartScheduler+0xa2>
		*pucFirstUserPriorityRegister = ulOriginalPriority;
9000cf3c:	9b02      	ldr	r3, [sp, #8]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
9000cf3e:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
9000cf42:	f44f 7140 	mov.w	r1, #768	@ 0x300
		*pucFirstUserPriorityRegister = ulOriginalPriority;
9000cf46:	4a20      	ldr	r2, [pc, #128]	@ (9000cfc8 <xPortStartScheduler+0x130>)
9000cf48:	b2db      	uxtb	r3, r3
	uxCriticalNesting = 0;
9000cf4a:	4e22      	ldr	r6, [pc, #136]	@ (9000cfd4 <xPortStartScheduler+0x13c>)
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
9000cf4c:	6001      	str	r1, [r0, #0]
	uxCriticalNesting = 0;
9000cf4e:	2500      	movs	r5, #0
		*pucFirstUserPriorityRegister = ulOriginalPriority;
9000cf50:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
9000cf52:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
9000cf56:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
9000cf5a:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
9000cf5e:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
9000cf62:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
9000cf66:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
9000cf6a:	f7ff ff81 	bl	9000ce70 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
9000cf6e:	6035      	str	r5, [r6, #0]
	vPortEnableVFP();
9000cf70:	f7ff fea8 	bl	9000ccc4 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
9000cf74:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
9000cf78:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
9000cf7c:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
9000cf80:	f7ff fe8c 	bl	9000cc9c <prvPortStartFirstTask>
	vTaskSwitchContext();
9000cf84:	f001 fdb6 	bl	9000eaf4 <vTaskSwitchContext>
	configASSERT( uxCriticalNesting == ~0UL );
9000cf88:	6833      	ldr	r3, [r6, #0]
volatile uint32_t ulDummy = 0;
9000cf8a:	9503      	str	r5, [sp, #12]
	configASSERT( uxCriticalNesting == ~0UL );
9000cf8c:	3301      	adds	r3, #1
9000cf8e:	d008      	beq.n	9000cfa2 <xPortStartScheduler+0x10a>
9000cf90:	f04f 0350 	mov.w	r3, #80	@ 0x50
9000cf94:	f383 8811 	msr	BASEPRI, r3
9000cf98:	f3bf 8f6f 	isb	sy
9000cf9c:	f3bf 8f4f 	dsb	sy
9000cfa0:	e7fe      	b.n	9000cfa0 <xPortStartScheduler+0x108>
9000cfa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
9000cfa6:	f383 8811 	msr	BASEPRI, r3
9000cfaa:	f3bf 8f6f 	isb	sy
9000cfae:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
9000cfb2:	9b03      	ldr	r3, [sp, #12]
9000cfb4:	2b00      	cmp	r3, #0
9000cfb6:	d0fc      	beq.n	9000cfb2 <xPortStartScheduler+0x11a>
}
9000cfb8:	2000      	movs	r0, #0
9000cfba:	b004      	add	sp, #16
9000cfbc:	bd70      	pop	{r4, r5, r6, pc}
9000cfbe:	bf00      	nop
9000cfc0:	410fc271 	.word	0x410fc271
9000cfc4:	410fc270 	.word	0x410fc270
9000cfc8:	e000e400 	.word	0xe000e400
9000cfcc:	24024c50 	.word	0x24024c50
9000cfd0:	24024c54 	.word	0x24024c54
9000cfd4:	24000064 	.word	0x24000064

9000cfd8 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
9000cfd8:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
9000cfdc:	2b0f      	cmp	r3, #15
9000cfde:	d90e      	bls.n	9000cffe <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
9000cfe0:	4911      	ldr	r1, [pc, #68]	@ (9000d028 <vPortValidateInterruptPriority+0x50>)
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
9000cfe2:	4a12      	ldr	r2, [pc, #72]	@ (9000d02c <vPortValidateInterruptPriority+0x54>)
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
9000cfe4:	5c5b      	ldrb	r3, [r3, r1]
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
9000cfe6:	7812      	ldrb	r2, [r2, #0]
9000cfe8:	429a      	cmp	r2, r3
9000cfea:	d908      	bls.n	9000cffe <vPortValidateInterruptPriority+0x26>
9000cfec:	f04f 0350 	mov.w	r3, #80	@ 0x50
9000cff0:	f383 8811 	msr	BASEPRI, r3
9000cff4:	f3bf 8f6f 	isb	sy
9000cff8:	f3bf 8f4f 	dsb	sy
9000cffc:	e7fe      	b.n	9000cffc <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
9000cffe:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
9000d002:	4a0b      	ldr	r2, [pc, #44]	@ (9000d030 <vPortValidateInterruptPriority+0x58>)
9000d004:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
9000d008:	6812      	ldr	r2, [r2, #0]
9000d00a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
9000d00e:	4293      	cmp	r3, r2
9000d010:	d908      	bls.n	9000d024 <vPortValidateInterruptPriority+0x4c>
9000d012:	f04f 0350 	mov.w	r3, #80	@ 0x50
9000d016:	f383 8811 	msr	BASEPRI, r3
9000d01a:	f3bf 8f6f 	isb	sy
9000d01e:	f3bf 8f4f 	dsb	sy
9000d022:	e7fe      	b.n	9000d022 <vPortValidateInterruptPriority+0x4a>
	}
9000d024:	4770      	bx	lr
9000d026:	bf00      	nop
9000d028:	e000e3f0 	.word	0xe000e3f0
9000d02c:	24024c54 	.word	0x24024c54
9000d030:	24024c50 	.word	0x24024c50

9000d034 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
9000d034:	b570      	push	{r4, r5, r6, lr}
9000d036:	4616      	mov	r6, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
9000d038:	6c02      	ldr	r2, [r0, #64]	@ 0x40
{
9000d03a:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
9000d03c:	6b85      	ldr	r5, [r0, #56]	@ 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
9000d03e:	b92a      	cbnz	r2, 9000d04c <prvCopyDataToQueue+0x18>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
9000d040:	6806      	ldr	r6, [r0, #0]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
9000d042:	3501      	adds	r5, #1
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
9000d044:	b34e      	cbz	r6, 9000d09a <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
9000d046:	4610      	mov	r0, r2
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
9000d048:	63a5      	str	r5, [r4, #56]	@ 0x38

	return xReturn;
}
9000d04a:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
9000d04c:	b97e      	cbnz	r6, 9000d06e <prvCopyDataToQueue+0x3a>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
9000d04e:	6840      	ldr	r0, [r0, #4]
9000d050:	f016 f95d 	bl	9002330e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
9000d054:	6863      	ldr	r3, [r4, #4]
9000d056:	6c21      	ldr	r1, [r4, #64]	@ 0x40
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
9000d058:	68a2      	ldr	r2, [r4, #8]
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
9000d05a:	440b      	add	r3, r1
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
9000d05c:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
9000d05e:	6063      	str	r3, [r4, #4]
			pxQueue->pcWriteTo = pxQueue->pcHead;
9000d060:	bf24      	itt	cs
9000d062:	6823      	ldrcs	r3, [r4, #0]
9000d064:	6063      	strcs	r3, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
9000d066:	3501      	adds	r5, #1
BaseType_t xReturn = pdFALSE;
9000d068:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
9000d06a:	63a5      	str	r5, [r4, #56]	@ 0x38
}
9000d06c:	bd70      	pop	{r4, r5, r6, pc}
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
9000d06e:	68c0      	ldr	r0, [r0, #12]
9000d070:	f016 f94d 	bl	9002330e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
9000d074:	6c22      	ldr	r2, [r4, #64]	@ 0x40
9000d076:	68e3      	ldr	r3, [r4, #12]
9000d078:	4251      	negs	r1, r2
9000d07a:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
9000d07c:	6822      	ldr	r2, [r4, #0]
9000d07e:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
9000d080:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
9000d082:	d202      	bcs.n	9000d08a <prvCopyDataToQueue+0x56>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
9000d084:	68a3      	ldr	r3, [r4, #8]
9000d086:	440b      	add	r3, r1
9000d088:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
9000d08a:	2e02      	cmp	r6, #2
9000d08c:	d1eb      	bne.n	9000d066 <prvCopyDataToQueue+0x32>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
9000d08e:	2d01      	cmp	r5, #1
BaseType_t xReturn = pdFALSE;
9000d090:	f04f 0000 	mov.w	r0, #0
9000d094:	bf38      	it	cc
9000d096:	2501      	movcc	r5, #1
9000d098:	e7d6      	b.n	9000d048 <prvCopyDataToQueue+0x14>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
9000d09a:	6880      	ldr	r0, [r0, #8]
9000d09c:	f001 ff02 	bl	9000eea4 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
9000d0a0:	60a6      	str	r6, [r4, #8]
9000d0a2:	e7d1      	b.n	9000d048 <prvCopyDataToQueue+0x14>

9000d0a4 <xQueueGenericCreateStatic>:
	{
9000d0a4:	b530      	push	{r4, r5, lr}
9000d0a6:	b083      	sub	sp, #12
9000d0a8:	f89d 5018 	ldrb.w	r5, [sp, #24]
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
9000d0ac:	b940      	cbnz	r0, 9000d0c0 <xQueueGenericCreateStatic+0x1c>
9000d0ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
9000d0b2:	f383 8811 	msr	BASEPRI, r3
9000d0b6:	f3bf 8f6f 	isb	sy
9000d0ba:	f3bf 8f4f 	dsb	sy
9000d0be:	e7fe      	b.n	9000d0be <xQueueGenericCreateStatic+0x1a>
		configASSERT( pxStaticQueue != NULL );
9000d0c0:	461c      	mov	r4, r3
9000d0c2:	b153      	cbz	r3, 9000d0da <xQueueGenericCreateStatic+0x36>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
9000d0c4:	b30a      	cbz	r2, 9000d10a <xQueueGenericCreateStatic+0x66>
9000d0c6:	b989      	cbnz	r1, 9000d0ec <xQueueGenericCreateStatic+0x48>
9000d0c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
9000d0cc:	f383 8811 	msr	BASEPRI, r3
9000d0d0:	f3bf 8f6f 	isb	sy
9000d0d4:	f3bf 8f4f 	dsb	sy
9000d0d8:	e7fe      	b.n	9000d0d8 <xQueueGenericCreateStatic+0x34>
9000d0da:	f04f 0350 	mov.w	r3, #80	@ 0x50
9000d0de:	f383 8811 	msr	BASEPRI, r3
9000d0e2:	f3bf 8f6f 	isb	sy
9000d0e6:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
9000d0ea:	e7fe      	b.n	9000d0ea <xQueueGenericCreateStatic+0x46>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
9000d0ec:	b16a      	cbz	r2, 9000d10a <xQueueGenericCreateStatic+0x66>
			volatile size_t xSize = sizeof( StaticQueue_t );
9000d0ee:	2350      	movs	r3, #80	@ 0x50
9000d0f0:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
9000d0f2:	9b01      	ldr	r3, [sp, #4]
9000d0f4:	2b50      	cmp	r3, #80	@ 0x50
9000d0f6:	d013      	beq.n	9000d120 <xQueueGenericCreateStatic+0x7c>
9000d0f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
9000d0fc:	f383 8811 	msr	BASEPRI, r3
9000d100:	f3bf 8f6f 	isb	sy
9000d104:	f3bf 8f4f 	dsb	sy
9000d108:	e7fe      	b.n	9000d108 <xQueueGenericCreateStatic+0x64>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
9000d10a:	2900      	cmp	r1, #0
9000d10c:	d0ef      	beq.n	9000d0ee <xQueueGenericCreateStatic+0x4a>
9000d10e:	f04f 0350 	mov.w	r3, #80	@ 0x50
9000d112:	f383 8811 	msr	BASEPRI, r3
9000d116:	f3bf 8f6f 	isb	sy
9000d11a:	f3bf 8f4f 	dsb	sy
9000d11e:	e7fe      	b.n	9000d11e <xQueueGenericCreateStatic+0x7a>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
9000d120:	2900      	cmp	r1, #0
9000d122:	bf08      	it	eq
9000d124:	4622      	moveq	r2, r4
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
9000d126:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
9000d128:	2301      	movs	r3, #1
	pxNewQueue->uxLength = uxQueueLength;
9000d12a:	63e0      	str	r0, [r4, #60]	@ 0x3c
9000d12c:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
9000d12e:	6421      	str	r1, [r4, #64]	@ 0x40
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
9000d130:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
	taskENTER_CRITICAL();
9000d134:	f7ff fe1e 	bl	9000cd74 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000d138:	6822      	ldr	r2, [r4, #0]
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000d13a:	f104 0010 	add.w	r0, r4, #16
		pxQueue->pcWriteTo = pxQueue->pcHead;
9000d13e:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000d140:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	@ 0x3c
9000d144:	fb01 f303 	mul.w	r3, r1, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000d148:	1a59      	subs	r1, r3, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000d14a:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000d14c:	440a      	add	r2, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000d14e:	60a3      	str	r3, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
9000d150:	2100      	movs	r1, #0
		pxQueue->cRxLock = queueUNLOCKED;
9000d152:	23ff      	movs	r3, #255	@ 0xff
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000d154:	60e2      	str	r2, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
9000d156:	63a1      	str	r1, [r4, #56]	@ 0x38
		pxQueue->cRxLock = queueUNLOCKED;
9000d158:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
9000d15c:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000d160:	f7ff fd52 	bl	9000cc08 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
9000d164:	f104 0024 	add.w	r0, r4, #36	@ 0x24
9000d168:	f7ff fd4e 	bl	9000cc08 <vListInitialise>
	taskEXIT_CRITICAL();
9000d16c:	f7ff fe24 	bl	9000cdb8 <vPortExitCritical>
	}
9000d170:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
9000d172:	f884 504c 	strb.w	r5, [r4, #76]	@ 0x4c
	}
9000d176:	b003      	add	sp, #12
9000d178:	bd30      	pop	{r4, r5, pc}
9000d17a:	bf00      	nop

9000d17c <xQueueGenericCreate>:
	{
9000d17c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
9000d17e:	b940      	cbnz	r0, 9000d192 <xQueueGenericCreate+0x16>
9000d180:	f04f 0350 	mov.w	r3, #80	@ 0x50
9000d184:	f383 8811 	msr	BASEPRI, r3
9000d188:	f3bf 8f6f 	isb	sy
9000d18c:	f3bf 8f4f 	dsb	sy
9000d190:	e7fe      	b.n	9000d190 <xQueueGenericCreate+0x14>
9000d192:	4605      	mov	r5, r0
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
9000d194:	fb01 f000 	mul.w	r0, r1, r0
9000d198:	460e      	mov	r6, r1
9000d19a:	4617      	mov	r7, r2
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
9000d19c:	3050      	adds	r0, #80	@ 0x50
9000d19e:	f7ff fc11 	bl	9000c9c4 <pvPortMalloc>
		if( pxNewQueue != NULL )
9000d1a2:	4604      	mov	r4, r0
9000d1a4:	b340      	cbz	r0, 9000d1f8 <xQueueGenericCreate+0x7c>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
9000d1a6:	2300      	movs	r3, #0
9000d1a8:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
9000d1ac:	b336      	cbz	r6, 9000d1fc <xQueueGenericCreate+0x80>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000d1ae:	f100 0350 	add.w	r3, r0, #80	@ 0x50
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
9000d1b2:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
9000d1b4:	e9c4 560f 	strd	r5, r6, [r4, #60]	@ 0x3c
	taskENTER_CRITICAL();
9000d1b8:	f7ff fddc 	bl	9000cd74 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000d1bc:	6822      	ldr	r2, [r4, #0]
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000d1be:	f104 0010 	add.w	r0, r4, #16
		pxQueue->pcWriteTo = pxQueue->pcHead;
9000d1c2:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000d1c4:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	@ 0x3c
9000d1c8:	fb01 f303 	mul.w	r3, r1, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000d1cc:	1a59      	subs	r1, r3, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000d1ce:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000d1d0:	440a      	add	r2, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000d1d2:	60a3      	str	r3, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
9000d1d4:	2100      	movs	r1, #0
		pxQueue->cRxLock = queueUNLOCKED;
9000d1d6:	23ff      	movs	r3, #255	@ 0xff
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000d1d8:	60e2      	str	r2, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
9000d1da:	63a1      	str	r1, [r4, #56]	@ 0x38
		pxQueue->cRxLock = queueUNLOCKED;
9000d1dc:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
9000d1e0:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000d1e4:	f7ff fd10 	bl	9000cc08 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
9000d1e8:	f104 0024 	add.w	r0, r4, #36	@ 0x24
9000d1ec:	f7ff fd0c 	bl	9000cc08 <vListInitialise>
	taskEXIT_CRITICAL();
9000d1f0:	f7ff fde2 	bl	9000cdb8 <vPortExitCritical>
		pxNewQueue->ucQueueType = ucQueueType;
9000d1f4:	f884 704c 	strb.w	r7, [r4, #76]	@ 0x4c
	}
9000d1f8:	4620      	mov	r0, r4
9000d1fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
9000d1fc:	4603      	mov	r3, r0
9000d1fe:	e7d8      	b.n	9000d1b2 <xQueueGenericCreate+0x36>

9000d200 <xQueueCreateCountingSemaphoreStatic>:
		configASSERT( uxMaxCount != 0 );
9000d200:	b940      	cbnz	r0, 9000d214 <xQueueCreateCountingSemaphoreStatic+0x14>
9000d202:	f04f 0350 	mov.w	r3, #80	@ 0x50
9000d206:	f383 8811 	msr	BASEPRI, r3
9000d20a:	f3bf 8f6f 	isb	sy
9000d20e:	f3bf 8f4f 	dsb	sy
9000d212:	e7fe      	b.n	9000d212 <xQueueCreateCountingSemaphoreStatic+0x12>
		configASSERT( uxInitialCount <= uxMaxCount );
9000d214:	4288      	cmp	r0, r1
9000d216:	d208      	bcs.n	9000d22a <xQueueCreateCountingSemaphoreStatic+0x2a>
9000d218:	f04f 0350 	mov.w	r3, #80	@ 0x50
9000d21c:	f383 8811 	msr	BASEPRI, r3
9000d220:	f3bf 8f6f 	isb	sy
9000d224:	f3bf 8f4f 	dsb	sy
9000d228:	e7fe      	b.n	9000d228 <xQueueCreateCountingSemaphoreStatic+0x28>
	{
9000d22a:	b530      	push	{r4, r5, lr}
9000d22c:	4614      	mov	r4, r2
9000d22e:	b085      	sub	sp, #20
		configASSERT( pxStaticQueue != NULL );
9000d230:	2a00      	cmp	r2, #0
9000d232:	d03b      	beq.n	9000d2ac <xQueueCreateCountingSemaphoreStatic+0xac>
			volatile size_t xSize = sizeof( StaticQueue_t );
9000d234:	2350      	movs	r3, #80	@ 0x50
9000d236:	9303      	str	r3, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
9000d238:	9b03      	ldr	r3, [sp, #12]
9000d23a:	2b50      	cmp	r3, #80	@ 0x50
9000d23c:	d008      	beq.n	9000d250 <xQueueCreateCountingSemaphoreStatic+0x50>
9000d23e:	f04f 0350 	mov.w	r3, #80	@ 0x50
9000d242:	f383 8811 	msr	BASEPRI, r3
9000d246:	f3bf 8f6f 	isb	sy
9000d24a:	f3bf 8f4f 	dsb	sy
9000d24e:	e7fe      	b.n	9000d24e <xQueueCreateCountingSemaphoreStatic+0x4e>
	pxNewQueue->uxItemSize = uxItemSize;
9000d250:	2500      	movs	r5, #0
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
9000d252:	2301      	movs	r3, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
9000d254:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
9000d256:	63d0      	str	r0, [r2, #60]	@ 0x3c
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
9000d258:	f882 3046 	strb.w	r3, [r2, #70]	@ 0x46
	pxNewQueue->uxItemSize = uxItemSize;
9000d25c:	6415      	str	r5, [r2, #64]	@ 0x40
9000d25e:	9101      	str	r1, [sp, #4]
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
9000d260:	9b03      	ldr	r3, [sp, #12]
	taskENTER_CRITICAL();
9000d262:	f7ff fd87 	bl	9000cd74 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000d266:	6822      	ldr	r2, [r4, #0]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
9000d268:	63a5      	str	r5, [r4, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
9000d26a:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000d26c:	e9d4 300f 	ldrd	r3, r0, [r4, #60]	@ 0x3c
9000d270:	fb00 f303 	mul.w	r3, r0, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000d274:	1a18      	subs	r0, r3, r0
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000d276:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000d278:	4402      	add	r2, r0
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000d27a:	60a3      	str	r3, [r4, #8]
		pxQueue->cRxLock = queueUNLOCKED;
9000d27c:	23ff      	movs	r3, #255	@ 0xff
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000d27e:	f104 0010 	add.w	r0, r4, #16
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000d282:	60e2      	str	r2, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
9000d284:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
9000d288:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000d28c:	f7ff fcbc 	bl	9000cc08 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
9000d290:	f104 0024 	add.w	r0, r4, #36	@ 0x24
9000d294:	f7ff fcb8 	bl	9000cc08 <vListInitialise>
	taskEXIT_CRITICAL();
9000d298:	f7ff fd8e 	bl	9000cdb8 <vPortExitCritical>
		pxNewQueue->ucQueueType = ucQueueType;
9000d29c:	2302      	movs	r3, #2
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
9000d29e:	9901      	ldr	r1, [sp, #4]
	}
9000d2a0:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
9000d2a2:	f884 304c 	strb.w	r3, [r4, #76]	@ 0x4c
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
9000d2a6:	63a1      	str	r1, [r4, #56]	@ 0x38
	}
9000d2a8:	b005      	add	sp, #20
9000d2aa:	bd30      	pop	{r4, r5, pc}
9000d2ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
9000d2b0:	f383 8811 	msr	BASEPRI, r3
9000d2b4:	f3bf 8f6f 	isb	sy
9000d2b8:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
9000d2bc:	e7fe      	b.n	9000d2bc <xQueueCreateCountingSemaphoreStatic+0xbc>
9000d2be:	bf00      	nop

9000d2c0 <xQueueCreateCountingSemaphore>:
	{
9000d2c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( uxMaxCount != 0 );
9000d2c2:	b940      	cbnz	r0, 9000d2d6 <xQueueCreateCountingSemaphore+0x16>
9000d2c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
9000d2c8:	f383 8811 	msr	BASEPRI, r3
9000d2cc:	f3bf 8f6f 	isb	sy
9000d2d0:	f3bf 8f4f 	dsb	sy
9000d2d4:	e7fe      	b.n	9000d2d4 <xQueueCreateCountingSemaphore+0x14>
		configASSERT( uxInitialCount <= uxMaxCount );
9000d2d6:	4288      	cmp	r0, r1
9000d2d8:	4604      	mov	r4, r0
9000d2da:	460e      	mov	r6, r1
9000d2dc:	d208      	bcs.n	9000d2f0 <xQueueCreateCountingSemaphore+0x30>
9000d2de:	f04f 0350 	mov.w	r3, #80	@ 0x50
9000d2e2:	f383 8811 	msr	BASEPRI, r3
9000d2e6:	f3bf 8f6f 	isb	sy
9000d2ea:	f3bf 8f4f 	dsb	sy
9000d2ee:	e7fe      	b.n	9000d2ee <xQueueCreateCountingSemaphore+0x2e>
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
9000d2f0:	2050      	movs	r0, #80	@ 0x50
9000d2f2:	f7ff fb67 	bl	9000c9c4 <pvPortMalloc>
		if( pxNewQueue != NULL )
9000d2f6:	4605      	mov	r5, r0
9000d2f8:	b330      	cbz	r0, 9000d348 <xQueueCreateCountingSemaphore+0x88>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
9000d2fa:	2700      	movs	r7, #0
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
9000d2fc:	6000      	str	r0, [r0, #0]
	pxNewQueue->uxLength = uxQueueLength;
9000d2fe:	63c4      	str	r4, [r0, #60]	@ 0x3c
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
9000d300:	f880 7046 	strb.w	r7, [r0, #70]	@ 0x46
	pxNewQueue->uxItemSize = uxItemSize;
9000d304:	6407      	str	r7, [r0, #64]	@ 0x40
	taskENTER_CRITICAL();
9000d306:	f7ff fd35 	bl	9000cd74 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000d30a:	682a      	ldr	r2, [r5, #0]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
9000d30c:	63af      	str	r7, [r5, #56]	@ 0x38
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000d30e:	f105 0010 	add.w	r0, r5, #16
		pxQueue->pcWriteTo = pxQueue->pcHead;
9000d312:	606a      	str	r2, [r5, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000d314:	e9d5 310f 	ldrd	r3, r1, [r5, #60]	@ 0x3c
9000d318:	fb01 f303 	mul.w	r3, r1, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000d31c:	1a59      	subs	r1, r3, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000d31e:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000d320:	440a      	add	r2, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000d322:	60ab      	str	r3, [r5, #8]
		pxQueue->cRxLock = queueUNLOCKED;
9000d324:	23ff      	movs	r3, #255	@ 0xff
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000d326:	60ea      	str	r2, [r5, #12]
		pxQueue->cRxLock = queueUNLOCKED;
9000d328:	f885 3044 	strb.w	r3, [r5, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
9000d32c:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000d330:	f7ff fc6a 	bl	9000cc08 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
9000d334:	f105 0024 	add.w	r0, r5, #36	@ 0x24
9000d338:	f7ff fc66 	bl	9000cc08 <vListInitialise>
	taskEXIT_CRITICAL();
9000d33c:	f7ff fd3c 	bl	9000cdb8 <vPortExitCritical>
		pxNewQueue->ucQueueType = ucQueueType;
9000d340:	2302      	movs	r3, #2
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
9000d342:	63ae      	str	r6, [r5, #56]	@ 0x38
		pxNewQueue->ucQueueType = ucQueueType;
9000d344:	f885 304c 	strb.w	r3, [r5, #76]	@ 0x4c
	}
9000d348:	4628      	mov	r0, r5
9000d34a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

9000d34c <xQueueGenericSend>:
{
9000d34c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9000d350:	b084      	sub	sp, #16
9000d352:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
9000d354:	2800      	cmp	r0, #0
9000d356:	f000 8103 	beq.w	9000d560 <xQueueGenericSend+0x214>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
9000d35a:	4688      	mov	r8, r1
9000d35c:	4604      	mov	r4, r0
9000d35e:	461f      	mov	r7, r3
9000d360:	2900      	cmp	r1, #0
9000d362:	f000 8097 	beq.w	9000d494 <xQueueGenericSend+0x148>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
9000d366:	2f02      	cmp	r7, #2
9000d368:	d10b      	bne.n	9000d382 <xQueueGenericSend+0x36>
9000d36a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
9000d36c:	2b01      	cmp	r3, #1
9000d36e:	d008      	beq.n	9000d382 <xQueueGenericSend+0x36>
9000d370:	f04f 0350 	mov.w	r3, #80	@ 0x50
9000d374:	f383 8811 	msr	BASEPRI, r3
9000d378:	f3bf 8f6f 	isb	sy
9000d37c:	f3bf 8f4f 	dsb	sy
9000d380:	e7fe      	b.n	9000d380 <xQueueGenericSend+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
9000d382:	f001 fd3f 	bl	9000ee04 <xTaskGetSchedulerState>
9000d386:	2800      	cmp	r0, #0
9000d388:	f000 80f3 	beq.w	9000d572 <xQueueGenericSend+0x226>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
9000d38c:	f1a7 0902 	sub.w	r9, r7, #2
9000d390:	2500      	movs	r5, #0
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000d392:	f104 0624 	add.w	r6, r4, #36	@ 0x24
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
9000d396:	fab9 f989 	clz	r9, r9
9000d39a:	ea4f 1959 	mov.w	r9, r9, lsr #5
		taskENTER_CRITICAL();
9000d39e:	f7ff fce9 	bl	9000cd74 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
9000d3a2:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
9000d3a4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
9000d3a6:	429a      	cmp	r2, r3
9000d3a8:	f0c0 80f0 	bcc.w	9000d58c <xQueueGenericSend+0x240>
9000d3ac:	f1b9 0f00 	cmp.w	r9, #0
9000d3b0:	f040 80ec 	bne.w	9000d58c <xQueueGenericSend+0x240>
				if( xTicksToWait == ( TickType_t ) 0 )
9000d3b4:	9b01      	ldr	r3, [sp, #4]
9000d3b6:	2b00      	cmp	r3, #0
9000d3b8:	f000 8101 	beq.w	9000d5be <xQueueGenericSend+0x272>
				else if( xEntryTimeSet == pdFALSE )
9000d3bc:	2d00      	cmp	r5, #0
9000d3be:	f000 80cb 	beq.w	9000d558 <xQueueGenericSend+0x20c>
		taskEXIT_CRITICAL();
9000d3c2:	f7ff fcf9 	bl	9000cdb8 <vPortExitCritical>
		vTaskSuspendAll();
9000d3c6:	f001 fb51 	bl	9000ea6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
9000d3ca:	f7ff fcd3 	bl	9000cd74 <vPortEnterCritical>
9000d3ce:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
9000d3d2:	2bff      	cmp	r3, #255	@ 0xff
9000d3d4:	d102      	bne.n	9000d3dc <xQueueGenericSend+0x90>
9000d3d6:	2300      	movs	r3, #0
9000d3d8:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
9000d3dc:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
9000d3e0:	2bff      	cmp	r3, #255	@ 0xff
9000d3e2:	d102      	bne.n	9000d3ea <xQueueGenericSend+0x9e>
9000d3e4:	2300      	movs	r3, #0
9000d3e6:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
9000d3ea:	f7ff fce5 	bl	9000cdb8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
9000d3ee:	a901      	add	r1, sp, #4
9000d3f0:	a802      	add	r0, sp, #8
9000d3f2:	f001 fcb9 	bl	9000ed68 <xTaskCheckForTimeOut>
9000d3f6:	2800      	cmp	r0, #0
9000d3f8:	f040 80e5 	bne.w	9000d5c6 <xQueueGenericSend+0x27a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
9000d3fc:	f7ff fcba 	bl	9000cd74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
9000d400:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
9000d402:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
9000d404:	429a      	cmp	r2, r3
9000d406:	d052      	beq.n	9000d4ae <xQueueGenericSend+0x162>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
9000d408:	f7ff fcd6 	bl	9000cdb8 <vPortExitCritical>
	taskENTER_CRITICAL();
9000d40c:	f7ff fcb2 	bl	9000cd74 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
9000d410:	f894 2045 	ldrb.w	r2, [r4, #69]	@ 0x45
9000d414:	b255      	sxtb	r5, r2
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000d416:	2d00      	cmp	r5, #0
9000d418:	dc04      	bgt.n	9000d424 <xQueueGenericSend+0xd8>
9000d41a:	e011      	b.n	9000d440 <xQueueGenericSend+0xf4>
			--cTxLock;
9000d41c:	1e6a      	subs	r2, r5, #1
9000d41e:	b2d3      	uxtb	r3, r2
9000d420:	b255      	sxtb	r5, r2
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000d422:	b16b      	cbz	r3, 9000d440 <xQueueGenericSend+0xf4>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000d424:	6a63      	ldr	r3, [r4, #36]	@ 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000d426:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000d428:	b153      	cbz	r3, 9000d440 <xQueueGenericSend+0xf4>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000d42a:	f001 fc4b 	bl	9000ecc4 <xTaskRemoveFromEventList>
9000d42e:	2800      	cmp	r0, #0
9000d430:	d0f4      	beq.n	9000d41c <xQueueGenericSend+0xd0>
						vTaskMissedYield();
9000d432:	f001 fcdb 	bl	9000edec <vTaskMissedYield>
			--cTxLock;
9000d436:	1e6a      	subs	r2, r5, #1
9000d438:	b2d3      	uxtb	r3, r2
9000d43a:	b255      	sxtb	r5, r2
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000d43c:	2b00      	cmp	r3, #0
9000d43e:	d1f1      	bne.n	9000d424 <xQueueGenericSend+0xd8>
		pxQueue->cTxLock = queueUNLOCKED;
9000d440:	23ff      	movs	r3, #255	@ 0xff
9000d442:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
9000d446:	f7ff fcb7 	bl	9000cdb8 <vPortExitCritical>
	taskENTER_CRITICAL();
9000d44a:	f7ff fc93 	bl	9000cd74 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
9000d44e:	f894 2044 	ldrb.w	r2, [r4, #68]	@ 0x44
9000d452:	b255      	sxtb	r5, r2
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000d454:	2d00      	cmp	r5, #0
9000d456:	dd14      	ble.n	9000d482 <xQueueGenericSend+0x136>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000d458:	f104 0a10 	add.w	sl, r4, #16
9000d45c:	e003      	b.n	9000d466 <xQueueGenericSend+0x11a>
				--cRxLock;
9000d45e:	1e6a      	subs	r2, r5, #1
9000d460:	b2d3      	uxtb	r3, r2
9000d462:	b255      	sxtb	r5, r2
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000d464:	b16b      	cbz	r3, 9000d482 <xQueueGenericSend+0x136>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000d466:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000d468:	4650      	mov	r0, sl
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000d46a:	b153      	cbz	r3, 9000d482 <xQueueGenericSend+0x136>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000d46c:	f001 fc2a 	bl	9000ecc4 <xTaskRemoveFromEventList>
9000d470:	2800      	cmp	r0, #0
9000d472:	d0f4      	beq.n	9000d45e <xQueueGenericSend+0x112>
					vTaskMissedYield();
9000d474:	f001 fcba 	bl	9000edec <vTaskMissedYield>
				--cRxLock;
9000d478:	1e6a      	subs	r2, r5, #1
9000d47a:	b2d3      	uxtb	r3, r2
9000d47c:	b255      	sxtb	r5, r2
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000d47e:	2b00      	cmp	r3, #0
9000d480:	d1f1      	bne.n	9000d466 <xQueueGenericSend+0x11a>
		pxQueue->cRxLock = queueUNLOCKED;
9000d482:	23ff      	movs	r3, #255	@ 0xff
9000d484:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
	taskEXIT_CRITICAL();
9000d488:	f7ff fc96 	bl	9000cdb8 <vPortExitCritical>
				( void ) xTaskResumeAll();
9000d48c:	f001 faf6 	bl	9000ea7c <xTaskResumeAll>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
9000d490:	2501      	movs	r5, #1
9000d492:	e784      	b.n	9000d39e <xQueueGenericSend+0x52>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
9000d494:	6c03      	ldr	r3, [r0, #64]	@ 0x40
9000d496:	2b00      	cmp	r3, #0
9000d498:	f43f af65 	beq.w	9000d366 <xQueueGenericSend+0x1a>
9000d49c:	f04f 0350 	mov.w	r3, #80	@ 0x50
9000d4a0:	f383 8811 	msr	BASEPRI, r3
9000d4a4:	f3bf 8f6f 	isb	sy
9000d4a8:	f3bf 8f4f 	dsb	sy
9000d4ac:	e7fe      	b.n	9000d4ac <xQueueGenericSend+0x160>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
9000d4ae:	f104 0a10 	add.w	sl, r4, #16
	taskEXIT_CRITICAL();
9000d4b2:	f7ff fc81 	bl	9000cdb8 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
9000d4b6:	9901      	ldr	r1, [sp, #4]
9000d4b8:	4650      	mov	r0, sl
9000d4ba:	f001 fb75 	bl	9000eba8 <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
9000d4be:	f7ff fc59 	bl	9000cd74 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
9000d4c2:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
9000d4c6:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000d4c8:	2d00      	cmp	r5, #0
9000d4ca:	dc04      	bgt.n	9000d4d6 <xQueueGenericSend+0x18a>
9000d4cc:	e011      	b.n	9000d4f2 <xQueueGenericSend+0x1a6>
			--cTxLock;
9000d4ce:	1e6b      	subs	r3, r5, #1
9000d4d0:	b2da      	uxtb	r2, r3
9000d4d2:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000d4d4:	b16a      	cbz	r2, 9000d4f2 <xQueueGenericSend+0x1a6>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000d4d6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000d4d8:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000d4da:	b153      	cbz	r3, 9000d4f2 <xQueueGenericSend+0x1a6>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000d4dc:	f001 fbf2 	bl	9000ecc4 <xTaskRemoveFromEventList>
9000d4e0:	2800      	cmp	r0, #0
9000d4e2:	d0f4      	beq.n	9000d4ce <xQueueGenericSend+0x182>
						vTaskMissedYield();
9000d4e4:	f001 fc82 	bl	9000edec <vTaskMissedYield>
			--cTxLock;
9000d4e8:	1e6b      	subs	r3, r5, #1
9000d4ea:	b2da      	uxtb	r2, r3
9000d4ec:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000d4ee:	2a00      	cmp	r2, #0
9000d4f0:	d1f1      	bne.n	9000d4d6 <xQueueGenericSend+0x18a>
		pxQueue->cTxLock = queueUNLOCKED;
9000d4f2:	23ff      	movs	r3, #255	@ 0xff
9000d4f4:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
9000d4f8:	f7ff fc5e 	bl	9000cdb8 <vPortExitCritical>
	taskENTER_CRITICAL();
9000d4fc:	f7ff fc3a 	bl	9000cd74 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
9000d500:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
9000d504:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000d506:	2d00      	cmp	r5, #0
9000d508:	dc04      	bgt.n	9000d514 <xQueueGenericSend+0x1c8>
9000d50a:	e011      	b.n	9000d530 <xQueueGenericSend+0x1e4>
				--cRxLock;
9000d50c:	1e6b      	subs	r3, r5, #1
9000d50e:	b2da      	uxtb	r2, r3
9000d510:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000d512:	b16a      	cbz	r2, 9000d530 <xQueueGenericSend+0x1e4>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000d514:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000d516:	4650      	mov	r0, sl
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000d518:	b153      	cbz	r3, 9000d530 <xQueueGenericSend+0x1e4>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000d51a:	f001 fbd3 	bl	9000ecc4 <xTaskRemoveFromEventList>
9000d51e:	2800      	cmp	r0, #0
9000d520:	d0f4      	beq.n	9000d50c <xQueueGenericSend+0x1c0>
					vTaskMissedYield();
9000d522:	f001 fc63 	bl	9000edec <vTaskMissedYield>
				--cRxLock;
9000d526:	1e6b      	subs	r3, r5, #1
9000d528:	b2da      	uxtb	r2, r3
9000d52a:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000d52c:	2a00      	cmp	r2, #0
9000d52e:	d1f1      	bne.n	9000d514 <xQueueGenericSend+0x1c8>
		pxQueue->cRxLock = queueUNLOCKED;
9000d530:	23ff      	movs	r3, #255	@ 0xff
9000d532:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
	taskEXIT_CRITICAL();
9000d536:	f7ff fc3f 	bl	9000cdb8 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
9000d53a:	f001 fa9f 	bl	9000ea7c <xTaskResumeAll>
9000d53e:	2800      	cmp	r0, #0
9000d540:	d1a6      	bne.n	9000d490 <xQueueGenericSend+0x144>
					portYIELD_WITHIN_API();
9000d542:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
9000d546:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
9000d54a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
9000d54e:	f3bf 8f4f 	dsb	sy
9000d552:	f3bf 8f6f 	isb	sy
9000d556:	e79b      	b.n	9000d490 <xQueueGenericSend+0x144>
					vTaskInternalSetTimeOutState( &xTimeOut );
9000d558:	a802      	add	r0, sp, #8
9000d55a:	f001 fbf9 	bl	9000ed50 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
9000d55e:	e730      	b.n	9000d3c2 <xQueueGenericSend+0x76>
9000d560:	f04f 0350 	mov.w	r3, #80	@ 0x50
9000d564:	f383 8811 	msr	BASEPRI, r3
9000d568:	f3bf 8f6f 	isb	sy
9000d56c:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
9000d570:	e7fe      	b.n	9000d570 <xQueueGenericSend+0x224>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
9000d572:	9b01      	ldr	r3, [sp, #4]
9000d574:	2b00      	cmp	r3, #0
9000d576:	f43f af09 	beq.w	9000d38c <xQueueGenericSend+0x40>
9000d57a:	f04f 0350 	mov.w	r3, #80	@ 0x50
9000d57e:	f383 8811 	msr	BASEPRI, r3
9000d582:	f3bf 8f6f 	isb	sy
9000d586:	f3bf 8f4f 	dsb	sy
9000d58a:	e7fe      	b.n	9000d58a <xQueueGenericSend+0x23e>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
9000d58c:	463a      	mov	r2, r7
9000d58e:	4641      	mov	r1, r8
9000d590:	4620      	mov	r0, r4
9000d592:	f7ff fd4f 	bl	9000d034 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000d596:	6a63      	ldr	r3, [r4, #36]	@ 0x24
9000d598:	2b00      	cmp	r3, #0
9000d59a:	d151      	bne.n	9000d640 <xQueueGenericSend+0x2f4>
					else if( xYieldRequired != pdFALSE )
9000d59c:	b148      	cbz	r0, 9000d5b2 <xQueueGenericSend+0x266>
						queueYIELD_IF_USING_PREEMPTION();
9000d59e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
9000d5a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
9000d5a6:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
9000d5aa:	f3bf 8f4f 	dsb	sy
9000d5ae:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
9000d5b2:	f7ff fc01 	bl	9000cdb8 <vPortExitCritical>
				return pdPASS;
9000d5b6:	2001      	movs	r0, #1
}
9000d5b8:	b004      	add	sp, #16
9000d5ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					taskEXIT_CRITICAL();
9000d5be:	f7ff fbfb 	bl	9000cdb8 <vPortExitCritical>
					return errQUEUE_FULL;
9000d5c2:	2000      	movs	r0, #0
9000d5c4:	e7f8      	b.n	9000d5b8 <xQueueGenericSend+0x26c>
	taskENTER_CRITICAL();
9000d5c6:	f7ff fbd5 	bl	9000cd74 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
9000d5ca:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
9000d5ce:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000d5d0:	2d00      	cmp	r5, #0
9000d5d2:	dd10      	ble.n	9000d5f6 <xQueueGenericSend+0x2aa>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000d5d4:	f104 0624 	add.w	r6, r4, #36	@ 0x24
9000d5d8:	e003      	b.n	9000d5e2 <xQueueGenericSend+0x296>
			--cTxLock;
9000d5da:	1e6b      	subs	r3, r5, #1
9000d5dc:	b2da      	uxtb	r2, r3
9000d5de:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000d5e0:	b14a      	cbz	r2, 9000d5f6 <xQueueGenericSend+0x2aa>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000d5e2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000d5e4:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000d5e6:	b133      	cbz	r3, 9000d5f6 <xQueueGenericSend+0x2aa>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000d5e8:	f001 fb6c 	bl	9000ecc4 <xTaskRemoveFromEventList>
9000d5ec:	2800      	cmp	r0, #0
9000d5ee:	d0f4      	beq.n	9000d5da <xQueueGenericSend+0x28e>
						vTaskMissedYield();
9000d5f0:	f001 fbfc 	bl	9000edec <vTaskMissedYield>
9000d5f4:	e7f1      	b.n	9000d5da <xQueueGenericSend+0x28e>
		pxQueue->cTxLock = queueUNLOCKED;
9000d5f6:	23ff      	movs	r3, #255	@ 0xff
9000d5f8:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
9000d5fc:	f7ff fbdc 	bl	9000cdb8 <vPortExitCritical>
	taskENTER_CRITICAL();
9000d600:	f7ff fbb8 	bl	9000cd74 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
9000d604:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
9000d608:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000d60a:	2d00      	cmp	r5, #0
9000d60c:	dd10      	ble.n	9000d630 <xQueueGenericSend+0x2e4>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000d60e:	f104 0610 	add.w	r6, r4, #16
9000d612:	e003      	b.n	9000d61c <xQueueGenericSend+0x2d0>
				--cRxLock;
9000d614:	1e6b      	subs	r3, r5, #1
9000d616:	b2da      	uxtb	r2, r3
9000d618:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000d61a:	b14a      	cbz	r2, 9000d630 <xQueueGenericSend+0x2e4>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000d61c:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000d61e:	4630      	mov	r0, r6
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000d620:	b133      	cbz	r3, 9000d630 <xQueueGenericSend+0x2e4>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000d622:	f001 fb4f 	bl	9000ecc4 <xTaskRemoveFromEventList>
9000d626:	2800      	cmp	r0, #0
9000d628:	d0f4      	beq.n	9000d614 <xQueueGenericSend+0x2c8>
					vTaskMissedYield();
9000d62a:	f001 fbdf 	bl	9000edec <vTaskMissedYield>
9000d62e:	e7f1      	b.n	9000d614 <xQueueGenericSend+0x2c8>
		pxQueue->cRxLock = queueUNLOCKED;
9000d630:	23ff      	movs	r3, #255	@ 0xff
9000d632:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
	taskEXIT_CRITICAL();
9000d636:	f7ff fbbf 	bl	9000cdb8 <vPortExitCritical>
			( void ) xTaskResumeAll();
9000d63a:	f001 fa1f 	bl	9000ea7c <xTaskResumeAll>
			return errQUEUE_FULL;
9000d63e:	e7c0      	b.n	9000d5c2 <xQueueGenericSend+0x276>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000d640:	f104 0024 	add.w	r0, r4, #36	@ 0x24
9000d644:	f001 fb3e 	bl	9000ecc4 <xTaskRemoveFromEventList>
9000d648:	2800      	cmp	r0, #0
9000d64a:	d0b2      	beq.n	9000d5b2 <xQueueGenericSend+0x266>
9000d64c:	e7a7      	b.n	9000d59e <xQueueGenericSend+0x252>
9000d64e:	bf00      	nop

9000d650 <xQueueCreateMutexStatic>:
		configASSERT( pxStaticQueue != NULL );
9000d650:	b179      	cbz	r1, 9000d672 <xQueueCreateMutexStatic+0x22>
			volatile size_t xSize = sizeof( StaticQueue_t );
9000d652:	2350      	movs	r3, #80	@ 0x50
	{
9000d654:	b570      	push	{r4, r5, r6, lr}
9000d656:	b082      	sub	sp, #8
			volatile size_t xSize = sizeof( StaticQueue_t );
9000d658:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
9000d65a:	9b01      	ldr	r3, [sp, #4]
9000d65c:	2b50      	cmp	r3, #80	@ 0x50
9000d65e:	d011      	beq.n	9000d684 <xQueueCreateMutexStatic+0x34>
9000d660:	f04f 0350 	mov.w	r3, #80	@ 0x50
9000d664:	f383 8811 	msr	BASEPRI, r3
9000d668:	f3bf 8f6f 	isb	sy
9000d66c:	f3bf 8f4f 	dsb	sy
9000d670:	e7fe      	b.n	9000d670 <xQueueCreateMutexStatic+0x20>
9000d672:	f04f 0350 	mov.w	r3, #80	@ 0x50
9000d676:	f383 8811 	msr	BASEPRI, r3
9000d67a:	f3bf 8f6f 	isb	sy
9000d67e:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
9000d682:	e7fe      	b.n	9000d682 <xQueueCreateMutexStatic+0x32>
	pxNewQueue->uxLength = uxQueueLength;
9000d684:	2600      	movs	r6, #0
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
9000d686:	2301      	movs	r3, #1
9000d688:	460c      	mov	r4, r1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
9000d68a:	6009      	str	r1, [r1, #0]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
9000d68c:	f881 3046 	strb.w	r3, [r1, #70]	@ 0x46
9000d690:	4605      	mov	r5, r0
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
9000d692:	9a01      	ldr	r2, [sp, #4]
	pxNewQueue->uxLength = uxQueueLength;
9000d694:	e9c1 360f 	strd	r3, r6, [r1, #60]	@ 0x3c
	taskENTER_CRITICAL();
9000d698:	f7ff fb6c 	bl	9000cd74 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000d69c:	6821      	ldr	r1, [r4, #0]
		pxQueue->cRxLock = queueUNLOCKED;
9000d69e:	23ff      	movs	r3, #255	@ 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
9000d6a0:	63a6      	str	r6, [r4, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
9000d6a2:	6061      	str	r1, [r4, #4]
		pxQueue->cRxLock = queueUNLOCKED;
9000d6a4:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
9000d6a8:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000d6ac:	e9d4 200f 	ldrd	r2, r0, [r4, #60]	@ 0x3c
9000d6b0:	fb00 f202 	mul.w	r2, r0, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000d6b4:	1a10      	subs	r0, r2, r0
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000d6b6:	440a      	add	r2, r1
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000d6b8:	4401      	add	r1, r0
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000d6ba:	f104 0010 	add.w	r0, r4, #16
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000d6be:	e9c4 2102 	strd	r2, r1, [r4, #8]
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000d6c2:	f7ff faa1 	bl	9000cc08 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
9000d6c6:	f104 0024 	add.w	r0, r4, #36	@ 0x24
9000d6ca:	f7ff fa9d 	bl	9000cc08 <vListInitialise>
	taskEXIT_CRITICAL();
9000d6ce:	f7ff fb73 	bl	9000cdb8 <vPortExitCritical>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
9000d6d2:	4633      	mov	r3, r6
9000d6d4:	4632      	mov	r2, r6
9000d6d6:	4631      	mov	r1, r6
9000d6d8:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
9000d6da:	f884 504c 	strb.w	r5, [r4, #76]	@ 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
9000d6de:	60a6      	str	r6, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
9000d6e0:	6026      	str	r6, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
9000d6e2:	60e6      	str	r6, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
9000d6e4:	f7ff fe32 	bl	9000d34c <xQueueGenericSend>
	}
9000d6e8:	4620      	mov	r0, r4
9000d6ea:	b002      	add	sp, #8
9000d6ec:	bd70      	pop	{r4, r5, r6, pc}
9000d6ee:	bf00      	nop

9000d6f0 <xQueueGiveMutexRecursive>:
	{
9000d6f0:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
9000d6f2:	b138      	cbz	r0, 9000d704 <xQueueGiveMutexRecursive+0x14>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
9000d6f4:	6885      	ldr	r5, [r0, #8]
9000d6f6:	4604      	mov	r4, r0
9000d6f8:	f001 fb7e 	bl	9000edf8 <xTaskGetCurrentTaskHandle>
9000d6fc:	4285      	cmp	r5, r0
9000d6fe:	d00a      	beq.n	9000d716 <xQueueGiveMutexRecursive+0x26>
			xReturn = pdFAIL;
9000d700:	2000      	movs	r0, #0
	}
9000d702:	bd38      	pop	{r3, r4, r5, pc}
9000d704:	f04f 0350 	mov.w	r3, #80	@ 0x50
9000d708:	f383 8811 	msr	BASEPRI, r3
9000d70c:	f3bf 8f6f 	isb	sy
9000d710:	f3bf 8f4f 	dsb	sy
		configASSERT( pxMutex );
9000d714:	e7fe      	b.n	9000d714 <xQueueGiveMutexRecursive+0x24>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
9000d716:	68e3      	ldr	r3, [r4, #12]
9000d718:	3b01      	subs	r3, #1
9000d71a:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
9000d71c:	b10b      	cbz	r3, 9000d722 <xQueueGiveMutexRecursive+0x32>
			xReturn = pdPASS;
9000d71e:	2001      	movs	r0, #1
	}
9000d720:	bd38      	pop	{r3, r4, r5, pc}
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
9000d722:	461a      	mov	r2, r3
9000d724:	4619      	mov	r1, r3
9000d726:	4620      	mov	r0, r4
9000d728:	f7ff fe10 	bl	9000d34c <xQueueGenericSend>
9000d72c:	e7f7      	b.n	9000d71e <xQueueGiveMutexRecursive+0x2e>
9000d72e:	bf00      	nop

9000d730 <xQueueCreateMutex>:
	{
9000d730:	b570      	push	{r4, r5, r6, lr}
9000d732:	4605      	mov	r5, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
9000d734:	2050      	movs	r0, #80	@ 0x50
9000d736:	f7ff f945 	bl	9000c9c4 <pvPortMalloc>
		if( pxNewQueue != NULL )
9000d73a:	4604      	mov	r4, r0
9000d73c:	b370      	cbz	r0, 9000d79c <xQueueCreateMutex+0x6c>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
9000d73e:	2600      	movs	r6, #0
	pxNewQueue->uxLength = uxQueueLength;
9000d740:	2301      	movs	r3, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
9000d742:	6020      	str	r0, [r4, #0]
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
9000d744:	f880 6046 	strb.w	r6, [r0, #70]	@ 0x46
	pxNewQueue->uxLength = uxQueueLength;
9000d748:	e9c0 360f 	strd	r3, r6, [r0, #60]	@ 0x3c
	taskENTER_CRITICAL();
9000d74c:	f7ff fb12 	bl	9000cd74 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000d750:	6821      	ldr	r1, [r4, #0]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
9000d752:	63a6      	str	r6, [r4, #56]	@ 0x38
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000d754:	f104 0010 	add.w	r0, r4, #16
		pxQueue->pcWriteTo = pxQueue->pcHead;
9000d758:	6061      	str	r1, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000d75a:	e9d4 230f 	ldrd	r2, r3, [r4, #60]	@ 0x3c
9000d75e:	fb03 f202 	mul.w	r2, r3, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000d762:	1ad3      	subs	r3, r2, r3
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000d764:	440a      	add	r2, r1
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000d766:	4419      	add	r1, r3
		pxQueue->cRxLock = queueUNLOCKED;
9000d768:	23ff      	movs	r3, #255	@ 0xff
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000d76a:	e9c4 2102 	strd	r2, r1, [r4, #8]
		pxQueue->cRxLock = queueUNLOCKED;
9000d76e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
9000d772:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000d776:	f7ff fa47 	bl	9000cc08 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
9000d77a:	f104 0024 	add.w	r0, r4, #36	@ 0x24
9000d77e:	f7ff fa43 	bl	9000cc08 <vListInitialise>
	taskEXIT_CRITICAL();
9000d782:	f7ff fb19 	bl	9000cdb8 <vPortExitCritical>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
9000d786:	4633      	mov	r3, r6
9000d788:	4632      	mov	r2, r6
9000d78a:	4631      	mov	r1, r6
9000d78c:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
9000d78e:	f884 504c 	strb.w	r5, [r4, #76]	@ 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
9000d792:	60a6      	str	r6, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
9000d794:	6026      	str	r6, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
9000d796:	60e6      	str	r6, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
9000d798:	f7ff fdd8 	bl	9000d34c <xQueueGenericSend>
	}
9000d79c:	4620      	mov	r0, r4
9000d79e:	bd70      	pop	{r4, r5, r6, pc}

9000d7a0 <xQueueGenericSendFromISR>:
	configASSERT( pxQueue );
9000d7a0:	2800      	cmp	r0, #0
9000d7a2:	d04b      	beq.n	9000d83c <xQueueGenericSendFromISR+0x9c>
{
9000d7a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000d7a8:	460e      	mov	r6, r1
9000d7aa:	4604      	mov	r4, r0
9000d7ac:	4617      	mov	r7, r2
9000d7ae:	461d      	mov	r5, r3
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
9000d7b0:	b339      	cbz	r1, 9000d802 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
9000d7b2:	2d02      	cmp	r5, #2
9000d7b4:	d10b      	bne.n	9000d7ce <xQueueGenericSendFromISR+0x2e>
9000d7b6:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
9000d7b8:	2b01      	cmp	r3, #1
9000d7ba:	d008      	beq.n	9000d7ce <xQueueGenericSendFromISR+0x2e>
9000d7bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
9000d7c0:	f383 8811 	msr	BASEPRI, r3
9000d7c4:	f3bf 8f6f 	isb	sy
9000d7c8:	f3bf 8f4f 	dsb	sy
9000d7cc:	e7fe      	b.n	9000d7cc <xQueueGenericSendFromISR+0x2c>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
9000d7ce:	f7ff fc03 	bl	9000cfd8 <vPortValidateInterruptPriority>
	__asm volatile
9000d7d2:	f3ef 8811 	mrs	r8, BASEPRI
9000d7d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
9000d7da:	f383 8811 	msr	BASEPRI, r3
9000d7de:	f3bf 8f6f 	isb	sy
9000d7e2:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
9000d7e6:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
9000d7e8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
9000d7ea:	429a      	cmp	r2, r3
9000d7ec:	d315      	bcc.n	9000d81a <xQueueGenericSendFromISR+0x7a>
9000d7ee:	f1a5 0002 	sub.w	r0, r5, #2
9000d7f2:	fab0 f080 	clz	r0, r0
9000d7f6:	0940      	lsrs	r0, r0, #5
9000d7f8:	b978      	cbnz	r0, 9000d81a <xQueueGenericSendFromISR+0x7a>
	__asm volatile
9000d7fa:	f388 8811 	msr	BASEPRI, r8
}
9000d7fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
9000d802:	6c03      	ldr	r3, [r0, #64]	@ 0x40
9000d804:	2b00      	cmp	r3, #0
9000d806:	d0d4      	beq.n	9000d7b2 <xQueueGenericSendFromISR+0x12>
	__asm volatile
9000d808:	f04f 0350 	mov.w	r3, #80	@ 0x50
9000d80c:	f383 8811 	msr	BASEPRI, r3
9000d810:	f3bf 8f6f 	isb	sy
9000d814:	f3bf 8f4f 	dsb	sy
9000d818:	e7fe      	b.n	9000d818 <xQueueGenericSendFromISR+0x78>
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
9000d81a:	462a      	mov	r2, r5
			const int8_t cTxLock = pxQueue->cTxLock;
9000d81c:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
9000d820:	4631      	mov	r1, r6
9000d822:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
9000d824:	b26d      	sxtb	r5, r5
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
9000d826:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
9000d828:	f7ff fc04 	bl	9000d034 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
9000d82c:	1c6b      	adds	r3, r5, #1
9000d82e:	d00e      	beq.n	9000d84e <xQueueGenericSendFromISR+0xae>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
9000d830:	1c6b      	adds	r3, r5, #1
9000d832:	b25b      	sxtb	r3, r3
9000d834:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
			xReturn = pdPASS;
9000d838:	2001      	movs	r0, #1
9000d83a:	e7de      	b.n	9000d7fa <xQueueGenericSendFromISR+0x5a>
9000d83c:	f04f 0350 	mov.w	r3, #80	@ 0x50
9000d840:	f383 8811 	msr	BASEPRI, r3
9000d844:	f3bf 8f6f 	isb	sy
9000d848:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
9000d84c:	e7fe      	b.n	9000d84c <xQueueGenericSendFromISR+0xac>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000d84e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
9000d850:	2b00      	cmp	r3, #0
9000d852:	d0f1      	beq.n	9000d838 <xQueueGenericSendFromISR+0x98>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000d854:	f104 0024 	add.w	r0, r4, #36	@ 0x24
9000d858:	f001 fa34 	bl	9000ecc4 <xTaskRemoveFromEventList>
							if( pxHigherPriorityTaskWoken != NULL )
9000d85c:	2800      	cmp	r0, #0
9000d85e:	d0eb      	beq.n	9000d838 <xQueueGenericSendFromISR+0x98>
9000d860:	2f00      	cmp	r7, #0
9000d862:	d0e9      	beq.n	9000d838 <xQueueGenericSendFromISR+0x98>
								*pxHigherPriorityTaskWoken = pdTRUE;
9000d864:	2301      	movs	r3, #1
9000d866:	603b      	str	r3, [r7, #0]
9000d868:	e7e6      	b.n	9000d838 <xQueueGenericSendFromISR+0x98>
9000d86a:	bf00      	nop

9000d86c <xQueueGiveFromISR>:
	configASSERT( pxQueue );
9000d86c:	b360      	cbz	r0, 9000d8c8 <xQueueGiveFromISR+0x5c>
	configASSERT( pxQueue->uxItemSize == 0 );
9000d86e:	6c03      	ldr	r3, [r0, #64]	@ 0x40
{
9000d870:	b570      	push	{r4, r5, r6, lr}
9000d872:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
9000d874:	b143      	cbz	r3, 9000d888 <xQueueGiveFromISR+0x1c>
9000d876:	f04f 0350 	mov.w	r3, #80	@ 0x50
9000d87a:	f383 8811 	msr	BASEPRI, r3
9000d87e:	f3bf 8f6f 	isb	sy
9000d882:	f3bf 8f4f 	dsb	sy
9000d886:	e7fe      	b.n	9000d886 <xQueueGiveFromISR+0x1a>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
9000d888:	6803      	ldr	r3, [r0, #0]
9000d88a:	460d      	mov	r5, r1
9000d88c:	b32b      	cbz	r3, 9000d8da <xQueueGiveFromISR+0x6e>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
9000d88e:	f7ff fba3 	bl	9000cfd8 <vPortValidateInterruptPriority>
	__asm volatile
9000d892:	f3ef 8611 	mrs	r6, BASEPRI
9000d896:	f04f 0350 	mov.w	r3, #80	@ 0x50
9000d89a:	f383 8811 	msr	BASEPRI, r3
9000d89e:	f3bf 8f6f 	isb	sy
9000d8a2:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
9000d8a6:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
9000d8a8:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
9000d8aa:	429a      	cmp	r2, r3
9000d8ac:	d921      	bls.n	9000d8f2 <xQueueGiveFromISR+0x86>
			const int8_t cTxLock = pxQueue->cTxLock;
9000d8ae:	f894 2045 	ldrb.w	r2, [r4, #69]	@ 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
9000d8b2:	3301      	adds	r3, #1
			if( cTxLock == queueUNLOCKED )
9000d8b4:	2aff      	cmp	r2, #255	@ 0xff
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
9000d8b6:	63a3      	str	r3, [r4, #56]	@ 0x38
			const int8_t cTxLock = pxQueue->cTxLock;
9000d8b8:	b253      	sxtb	r3, r2
			if( cTxLock == queueUNLOCKED )
9000d8ba:	d01e      	beq.n	9000d8fa <xQueueGiveFromISR+0x8e>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
9000d8bc:	3301      	adds	r3, #1
9000d8be:	b25b      	sxtb	r3, r3
9000d8c0:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
			xReturn = pdPASS;
9000d8c4:	2001      	movs	r0, #1
9000d8c6:	e015      	b.n	9000d8f4 <xQueueGiveFromISR+0x88>
	__asm volatile
9000d8c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
9000d8cc:	f383 8811 	msr	BASEPRI, r3
9000d8d0:	f3bf 8f6f 	isb	sy
9000d8d4:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
9000d8d8:	e7fe      	b.n	9000d8d8 <xQueueGiveFromISR+0x6c>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
9000d8da:	6883      	ldr	r3, [r0, #8]
9000d8dc:	2b00      	cmp	r3, #0
9000d8de:	d0d6      	beq.n	9000d88e <xQueueGiveFromISR+0x22>
9000d8e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
9000d8e4:	f383 8811 	msr	BASEPRI, r3
9000d8e8:	f3bf 8f6f 	isb	sy
9000d8ec:	f3bf 8f4f 	dsb	sy
9000d8f0:	e7fe      	b.n	9000d8f0 <xQueueGiveFromISR+0x84>
			xReturn = errQUEUE_FULL;
9000d8f2:	2000      	movs	r0, #0
	__asm volatile
9000d8f4:	f386 8811 	msr	BASEPRI, r6
}
9000d8f8:	bd70      	pop	{r4, r5, r6, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000d8fa:	6a63      	ldr	r3, [r4, #36]	@ 0x24
9000d8fc:	2b00      	cmp	r3, #0
9000d8fe:	d0e1      	beq.n	9000d8c4 <xQueueGiveFromISR+0x58>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000d900:	f104 0024 	add.w	r0, r4, #36	@ 0x24
9000d904:	f001 f9de 	bl	9000ecc4 <xTaskRemoveFromEventList>
							if( pxHigherPriorityTaskWoken != NULL )
9000d908:	2d00      	cmp	r5, #0
9000d90a:	d0db      	beq.n	9000d8c4 <xQueueGiveFromISR+0x58>
9000d90c:	2800      	cmp	r0, #0
9000d90e:	d0d9      	beq.n	9000d8c4 <xQueueGiveFromISR+0x58>
								*pxHigherPriorityTaskWoken = pdTRUE;
9000d910:	2301      	movs	r3, #1
9000d912:	602b      	str	r3, [r5, #0]
9000d914:	e7d6      	b.n	9000d8c4 <xQueueGiveFromISR+0x58>
9000d916:	bf00      	nop

9000d918 <xQueueReceive>:
{
9000d918:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
9000d91c:	b085      	sub	sp, #20
9000d91e:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
9000d920:	2800      	cmp	r0, #0
9000d922:	f000 8164 	beq.w	9000dbee <xQueueReceive+0x2d6>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
9000d926:	460f      	mov	r7, r1
9000d928:	4604      	mov	r4, r0
9000d92a:	2900      	cmp	r1, #0
9000d92c:	f000 8097 	beq.w	9000da5e <xQueueReceive+0x146>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
9000d930:	f001 fa68 	bl	9000ee04 <xTaskGetSchedulerState>
9000d934:	2800      	cmp	r0, #0
9000d936:	f000 809f 	beq.w	9000da78 <xQueueReceive+0x160>
		taskENTER_CRITICAL();
9000d93a:	f7ff fa1b 	bl	9000cd74 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
9000d93e:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
9000d940:	2d00      	cmp	r5, #0
9000d942:	d175      	bne.n	9000da30 <xQueueReceive+0x118>
				if( xTicksToWait == ( TickType_t ) 0 )
9000d944:	9b01      	ldr	r3, [sp, #4]
9000d946:	2b00      	cmp	r3, #0
9000d948:	f000 80f4 	beq.w	9000db34 <xQueueReceive+0x21c>
		prvLockQueue( pxQueue );
9000d94c:	46a8      	mov	r8, r5
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000d94e:	f104 0624 	add.w	r6, r4, #36	@ 0x24
					vTaskInternalSetTimeOutState( &xTimeOut );
9000d952:	a802      	add	r0, sp, #8
9000d954:	f001 f9fc 	bl	9000ed50 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
9000d958:	f7ff fa2e 	bl	9000cdb8 <vPortExitCritical>
		vTaskSuspendAll();
9000d95c:	f001 f886 	bl	9000ea6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
9000d960:	f7ff fa08 	bl	9000cd74 <vPortEnterCritical>
9000d964:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
9000d968:	2bff      	cmp	r3, #255	@ 0xff
9000d96a:	d101      	bne.n	9000d970 <xQueueReceive+0x58>
9000d96c:	f884 8044 	strb.w	r8, [r4, #68]	@ 0x44
9000d970:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
9000d974:	2bff      	cmp	r3, #255	@ 0xff
9000d976:	d101      	bne.n	9000d97c <xQueueReceive+0x64>
9000d978:	f884 8045 	strb.w	r8, [r4, #69]	@ 0x45
9000d97c:	f7ff fa1c 	bl	9000cdb8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
9000d980:	a901      	add	r1, sp, #4
9000d982:	a802      	add	r0, sp, #8
9000d984:	f001 f9f0 	bl	9000ed68 <xTaskCheckForTimeOut>
9000d988:	2800      	cmp	r0, #0
9000d98a:	f040 8082 	bne.w	9000da92 <xQueueReceive+0x17a>
	taskENTER_CRITICAL();
9000d98e:	f7ff f9f1 	bl	9000cd74 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
9000d992:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
9000d994:	2b00      	cmp	r3, #0
9000d996:	f000 80d3 	beq.w	9000db40 <xQueueReceive+0x228>
	taskEXIT_CRITICAL();
9000d99a:	f7ff fa0d 	bl	9000cdb8 <vPortExitCritical>
	taskENTER_CRITICAL();
9000d99e:	f7ff f9e9 	bl	9000cd74 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
9000d9a2:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
9000d9a6:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000d9a8:	2d00      	cmp	r5, #0
9000d9aa:	dd14      	ble.n	9000d9d6 <xQueueReceive+0xbe>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000d9ac:	f104 0924 	add.w	r9, r4, #36	@ 0x24
9000d9b0:	e003      	b.n	9000d9ba <xQueueReceive+0xa2>
			--cTxLock;
9000d9b2:	1e6b      	subs	r3, r5, #1
9000d9b4:	b2da      	uxtb	r2, r3
9000d9b6:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000d9b8:	b16a      	cbz	r2, 9000d9d6 <xQueueReceive+0xbe>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000d9ba:	6a63      	ldr	r3, [r4, #36]	@ 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000d9bc:	4648      	mov	r0, r9
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000d9be:	b153      	cbz	r3, 9000d9d6 <xQueueReceive+0xbe>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000d9c0:	f001 f980 	bl	9000ecc4 <xTaskRemoveFromEventList>
9000d9c4:	2800      	cmp	r0, #0
9000d9c6:	d0f4      	beq.n	9000d9b2 <xQueueReceive+0x9a>
						vTaskMissedYield();
9000d9c8:	f001 fa10 	bl	9000edec <vTaskMissedYield>
			--cTxLock;
9000d9cc:	1e6b      	subs	r3, r5, #1
9000d9ce:	b2da      	uxtb	r2, r3
9000d9d0:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000d9d2:	2a00      	cmp	r2, #0
9000d9d4:	d1f1      	bne.n	9000d9ba <xQueueReceive+0xa2>
		pxQueue->cTxLock = queueUNLOCKED;
9000d9d6:	23ff      	movs	r3, #255	@ 0xff
9000d9d8:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
9000d9dc:	f7ff f9ec 	bl	9000cdb8 <vPortExitCritical>
	taskENTER_CRITICAL();
9000d9e0:	f7ff f9c8 	bl	9000cd74 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
9000d9e4:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
9000d9e8:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000d9ea:	2d00      	cmp	r5, #0
9000d9ec:	dd14      	ble.n	9000da18 <xQueueReceive+0x100>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000d9ee:	f104 0910 	add.w	r9, r4, #16
9000d9f2:	e003      	b.n	9000d9fc <xQueueReceive+0xe4>
				--cRxLock;
9000d9f4:	1e6b      	subs	r3, r5, #1
9000d9f6:	b2da      	uxtb	r2, r3
9000d9f8:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000d9fa:	b16a      	cbz	r2, 9000da18 <xQueueReceive+0x100>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000d9fc:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000d9fe:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000da00:	b153      	cbz	r3, 9000da18 <xQueueReceive+0x100>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000da02:	f001 f95f 	bl	9000ecc4 <xTaskRemoveFromEventList>
9000da06:	2800      	cmp	r0, #0
9000da08:	d0f4      	beq.n	9000d9f4 <xQueueReceive+0xdc>
					vTaskMissedYield();
9000da0a:	f001 f9ef 	bl	9000edec <vTaskMissedYield>
				--cRxLock;
9000da0e:	1e6b      	subs	r3, r5, #1
9000da10:	b2da      	uxtb	r2, r3
9000da12:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000da14:	2a00      	cmp	r2, #0
9000da16:	d1f1      	bne.n	9000d9fc <xQueueReceive+0xe4>
		pxQueue->cRxLock = queueUNLOCKED;
9000da18:	23ff      	movs	r3, #255	@ 0xff
9000da1a:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
	taskEXIT_CRITICAL();
9000da1e:	f7ff f9cb 	bl	9000cdb8 <vPortExitCritical>
				( void ) xTaskResumeAll();
9000da22:	f001 f82b 	bl	9000ea7c <xTaskResumeAll>
		taskENTER_CRITICAL();
9000da26:	f7ff f9a5 	bl	9000cd74 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
9000da2a:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
9000da2c:	2d00      	cmp	r5, #0
9000da2e:	d07d      	beq.n	9000db2c <xQueueReceive+0x214>
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
9000da30:	6c22      	ldr	r2, [r4, #64]	@ 0x40
9000da32:	b152      	cbz	r2, 9000da4a <xQueueReceive+0x132>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
9000da34:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
9000da36:	68a3      	ldr	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
9000da38:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
9000da3a:	4299      	cmp	r1, r3
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
9000da3c:	60e1      	str	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
9000da3e:	d301      	bcc.n	9000da44 <xQueueReceive+0x12c>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
9000da40:	6821      	ldr	r1, [r4, #0]
9000da42:	60e1      	str	r1, [r4, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
9000da44:	4638      	mov	r0, r7
9000da46:	f015 fc62 	bl	9002330e <memcpy>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
9000da4a:	3d01      	subs	r5, #1
9000da4c:	63a5      	str	r5, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000da4e:	6923      	ldr	r3, [r4, #16]
9000da50:	2b00      	cmp	r3, #0
9000da52:	f040 80d5 	bne.w	9000dc00 <xQueueReceive+0x2e8>
				taskEXIT_CRITICAL();
9000da56:	f7ff f9af 	bl	9000cdb8 <vPortExitCritical>
				return pdPASS;
9000da5a:	2001      	movs	r0, #1
9000da5c:	e06d      	b.n	9000db3a <xQueueReceive+0x222>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
9000da5e:	6c03      	ldr	r3, [r0, #64]	@ 0x40
9000da60:	2b00      	cmp	r3, #0
9000da62:	f43f af65 	beq.w	9000d930 <xQueueReceive+0x18>
	__asm volatile
9000da66:	f04f 0350 	mov.w	r3, #80	@ 0x50
9000da6a:	f383 8811 	msr	BASEPRI, r3
9000da6e:	f3bf 8f6f 	isb	sy
9000da72:	f3bf 8f4f 	dsb	sy
9000da76:	e7fe      	b.n	9000da76 <xQueueReceive+0x15e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
9000da78:	9b01      	ldr	r3, [sp, #4]
9000da7a:	2b00      	cmp	r3, #0
9000da7c:	f43f af5d 	beq.w	9000d93a <xQueueReceive+0x22>
9000da80:	f04f 0350 	mov.w	r3, #80	@ 0x50
9000da84:	f383 8811 	msr	BASEPRI, r3
9000da88:	f3bf 8f6f 	isb	sy
9000da8c:	f3bf 8f4f 	dsb	sy
9000da90:	e7fe      	b.n	9000da90 <xQueueReceive+0x178>
	taskENTER_CRITICAL();
9000da92:	f7ff f96f 	bl	9000cd74 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
9000da96:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
9000da9a:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000da9c:	2d00      	cmp	r5, #0
9000da9e:	dc04      	bgt.n	9000daaa <xQueueReceive+0x192>
9000daa0:	e011      	b.n	9000dac6 <xQueueReceive+0x1ae>
			--cTxLock;
9000daa2:	1e6b      	subs	r3, r5, #1
9000daa4:	b2da      	uxtb	r2, r3
9000daa6:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000daa8:	b16a      	cbz	r2, 9000dac6 <xQueueReceive+0x1ae>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000daaa:	6a63      	ldr	r3, [r4, #36]	@ 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000daac:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000daae:	b153      	cbz	r3, 9000dac6 <xQueueReceive+0x1ae>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000dab0:	f001 f908 	bl	9000ecc4 <xTaskRemoveFromEventList>
9000dab4:	2800      	cmp	r0, #0
9000dab6:	d0f4      	beq.n	9000daa2 <xQueueReceive+0x18a>
						vTaskMissedYield();
9000dab8:	f001 f998 	bl	9000edec <vTaskMissedYield>
			--cTxLock;
9000dabc:	1e6b      	subs	r3, r5, #1
9000dabe:	b2da      	uxtb	r2, r3
9000dac0:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000dac2:	2a00      	cmp	r2, #0
9000dac4:	d1f1      	bne.n	9000daaa <xQueueReceive+0x192>
		pxQueue->cTxLock = queueUNLOCKED;
9000dac6:	23ff      	movs	r3, #255	@ 0xff
9000dac8:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
9000dacc:	f7ff f974 	bl	9000cdb8 <vPortExitCritical>
	taskENTER_CRITICAL();
9000dad0:	f7ff f950 	bl	9000cd74 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
9000dad4:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
9000dad8:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000dada:	2d00      	cmp	r5, #0
9000dadc:	dd14      	ble.n	9000db08 <xQueueReceive+0x1f0>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000dade:	f104 0910 	add.w	r9, r4, #16
9000dae2:	e003      	b.n	9000daec <xQueueReceive+0x1d4>
				--cRxLock;
9000dae4:	1e6b      	subs	r3, r5, #1
9000dae6:	b2da      	uxtb	r2, r3
9000dae8:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000daea:	b16a      	cbz	r2, 9000db08 <xQueueReceive+0x1f0>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000daec:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000daee:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000daf0:	b153      	cbz	r3, 9000db08 <xQueueReceive+0x1f0>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000daf2:	f001 f8e7 	bl	9000ecc4 <xTaskRemoveFromEventList>
9000daf6:	2800      	cmp	r0, #0
9000daf8:	d0f4      	beq.n	9000dae4 <xQueueReceive+0x1cc>
					vTaskMissedYield();
9000dafa:	f001 f977 	bl	9000edec <vTaskMissedYield>
				--cRxLock;
9000dafe:	1e6b      	subs	r3, r5, #1
9000db00:	b2da      	uxtb	r2, r3
9000db02:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000db04:	2a00      	cmp	r2, #0
9000db06:	d1f1      	bne.n	9000daec <xQueueReceive+0x1d4>
		pxQueue->cRxLock = queueUNLOCKED;
9000db08:	23ff      	movs	r3, #255	@ 0xff
9000db0a:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
	taskEXIT_CRITICAL();
9000db0e:	f7ff f953 	bl	9000cdb8 <vPortExitCritical>
			( void ) xTaskResumeAll();
9000db12:	f000 ffb3 	bl	9000ea7c <xTaskResumeAll>
	taskENTER_CRITICAL();
9000db16:	f7ff f92d 	bl	9000cd74 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
9000db1a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
9000db1c:	b153      	cbz	r3, 9000db34 <xQueueReceive+0x21c>
	taskEXIT_CRITICAL();
9000db1e:	f7ff f94b 	bl	9000cdb8 <vPortExitCritical>
		taskENTER_CRITICAL();
9000db22:	f7ff f927 	bl	9000cd74 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
9000db26:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
9000db28:	2d00      	cmp	r5, #0
9000db2a:	d181      	bne.n	9000da30 <xQueueReceive+0x118>
				if( xTicksToWait == ( TickType_t ) 0 )
9000db2c:	9b01      	ldr	r3, [sp, #4]
9000db2e:	2b00      	cmp	r3, #0
9000db30:	f47f af12 	bne.w	9000d958 <xQueueReceive+0x40>
					taskEXIT_CRITICAL();
9000db34:	f7ff f940 	bl	9000cdb8 <vPortExitCritical>
					return errQUEUE_EMPTY;
9000db38:	2000      	movs	r0, #0
}
9000db3a:	b005      	add	sp, #20
9000db3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
9000db40:	f104 0924 	add.w	r9, r4, #36	@ 0x24
	taskEXIT_CRITICAL();
9000db44:	f7ff f938 	bl	9000cdb8 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
9000db48:	9901      	ldr	r1, [sp, #4]
9000db4a:	4648      	mov	r0, r9
9000db4c:	f001 f82c 	bl	9000eba8 <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
9000db50:	f7ff f910 	bl	9000cd74 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
9000db54:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
9000db58:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000db5a:	2d00      	cmp	r5, #0
9000db5c:	dc04      	bgt.n	9000db68 <xQueueReceive+0x250>
9000db5e:	e011      	b.n	9000db84 <xQueueReceive+0x26c>
			--cTxLock;
9000db60:	1e6b      	subs	r3, r5, #1
9000db62:	b2da      	uxtb	r2, r3
9000db64:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000db66:	b16a      	cbz	r2, 9000db84 <xQueueReceive+0x26c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000db68:	6a63      	ldr	r3, [r4, #36]	@ 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000db6a:	4648      	mov	r0, r9
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000db6c:	b153      	cbz	r3, 9000db84 <xQueueReceive+0x26c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000db6e:	f001 f8a9 	bl	9000ecc4 <xTaskRemoveFromEventList>
9000db72:	2800      	cmp	r0, #0
9000db74:	d0f4      	beq.n	9000db60 <xQueueReceive+0x248>
						vTaskMissedYield();
9000db76:	f001 f939 	bl	9000edec <vTaskMissedYield>
			--cTxLock;
9000db7a:	1e6b      	subs	r3, r5, #1
9000db7c:	b2da      	uxtb	r2, r3
9000db7e:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000db80:	2a00      	cmp	r2, #0
9000db82:	d1f1      	bne.n	9000db68 <xQueueReceive+0x250>
		pxQueue->cTxLock = queueUNLOCKED;
9000db84:	23ff      	movs	r3, #255	@ 0xff
9000db86:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
9000db8a:	f7ff f915 	bl	9000cdb8 <vPortExitCritical>
	taskENTER_CRITICAL();
9000db8e:	f7ff f8f1 	bl	9000cd74 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
9000db92:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
9000db96:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000db98:	2d00      	cmp	r5, #0
9000db9a:	dd14      	ble.n	9000dbc6 <xQueueReceive+0x2ae>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000db9c:	f104 0910 	add.w	r9, r4, #16
9000dba0:	e003      	b.n	9000dbaa <xQueueReceive+0x292>
				--cRxLock;
9000dba2:	1e6b      	subs	r3, r5, #1
9000dba4:	b2da      	uxtb	r2, r3
9000dba6:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000dba8:	b16a      	cbz	r2, 9000dbc6 <xQueueReceive+0x2ae>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000dbaa:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000dbac:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000dbae:	b153      	cbz	r3, 9000dbc6 <xQueueReceive+0x2ae>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000dbb0:	f001 f888 	bl	9000ecc4 <xTaskRemoveFromEventList>
9000dbb4:	2800      	cmp	r0, #0
9000dbb6:	d0f4      	beq.n	9000dba2 <xQueueReceive+0x28a>
					vTaskMissedYield();
9000dbb8:	f001 f918 	bl	9000edec <vTaskMissedYield>
				--cRxLock;
9000dbbc:	1e6b      	subs	r3, r5, #1
9000dbbe:	b2da      	uxtb	r2, r3
9000dbc0:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000dbc2:	2a00      	cmp	r2, #0
9000dbc4:	d1f1      	bne.n	9000dbaa <xQueueReceive+0x292>
		pxQueue->cRxLock = queueUNLOCKED;
9000dbc6:	23ff      	movs	r3, #255	@ 0xff
9000dbc8:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
	taskEXIT_CRITICAL();
9000dbcc:	f7ff f8f4 	bl	9000cdb8 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
9000dbd0:	f000 ff54 	bl	9000ea7c <xTaskResumeAll>
9000dbd4:	2800      	cmp	r0, #0
9000dbd6:	d1a4      	bne.n	9000db22 <xQueueReceive+0x20a>
					portYIELD_WITHIN_API();
9000dbd8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
9000dbdc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
9000dbe0:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
9000dbe4:	f3bf 8f4f 	dsb	sy
9000dbe8:	f3bf 8f6f 	isb	sy
		taskENTER_CRITICAL();
9000dbec:	e799      	b.n	9000db22 <xQueueReceive+0x20a>
9000dbee:	f04f 0350 	mov.w	r3, #80	@ 0x50
9000dbf2:	f383 8811 	msr	BASEPRI, r3
9000dbf6:	f3bf 8f6f 	isb	sy
9000dbfa:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
9000dbfe:	e7fe      	b.n	9000dbfe <xQueueReceive+0x2e6>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000dc00:	f104 0010 	add.w	r0, r4, #16
9000dc04:	f001 f85e 	bl	9000ecc4 <xTaskRemoveFromEventList>
9000dc08:	2800      	cmp	r0, #0
9000dc0a:	f43f af24 	beq.w	9000da56 <xQueueReceive+0x13e>
						queueYIELD_IF_USING_PREEMPTION();
9000dc0e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
9000dc12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
9000dc16:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
9000dc1a:	f3bf 8f4f 	dsb	sy
9000dc1e:	f3bf 8f6f 	isb	sy
9000dc22:	e718      	b.n	9000da56 <xQueueReceive+0x13e>

9000dc24 <xQueueSemaphoreTake>:
{
9000dc24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000dc28:	b084      	sub	sp, #16
9000dc2a:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
9000dc2c:	2800      	cmp	r0, #0
9000dc2e:	d05e      	beq.n	9000dcee <xQueueSemaphoreTake+0xca>
	configASSERT( pxQueue->uxItemSize == 0 );
9000dc30:	6c07      	ldr	r7, [r0, #64]	@ 0x40
9000dc32:	4604      	mov	r4, r0
9000dc34:	b147      	cbz	r7, 9000dc48 <xQueueSemaphoreTake+0x24>
9000dc36:	f04f 0350 	mov.w	r3, #80	@ 0x50
9000dc3a:	f383 8811 	msr	BASEPRI, r3
9000dc3e:	f3bf 8f6f 	isb	sy
9000dc42:	f3bf 8f4f 	dsb	sy
9000dc46:	e7fe      	b.n	9000dc46 <xQueueSemaphoreTake+0x22>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
9000dc48:	f001 f8dc 	bl	9000ee04 <xTaskGetSchedulerState>
9000dc4c:	4605      	mov	r5, r0
9000dc4e:	2800      	cmp	r0, #0
9000dc50:	d056      	beq.n	9000dd00 <xQueueSemaphoreTake+0xdc>
9000dc52:	463d      	mov	r5, r7
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000dc54:	f104 0624 	add.w	r6, r4, #36	@ 0x24
		taskENTER_CRITICAL();
9000dc58:	f7ff f88c 	bl	9000cd74 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
9000dc5c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
9000dc5e:	2b00      	cmp	r3, #0
9000dc60:	f040 814d 	bne.w	9000defe <xQueueSemaphoreTake+0x2da>
				if( xTicksToWait == ( TickType_t ) 0 )
9000dc64:	9b01      	ldr	r3, [sp, #4]
9000dc66:	2b00      	cmp	r3, #0
9000dc68:	f000 813e 	beq.w	9000dee8 <xQueueSemaphoreTake+0x2c4>
				else if( xEntryTimeSet == pdFALSE )
9000dc6c:	2d00      	cmp	r5, #0
9000dc6e:	f000 80a3 	beq.w	9000ddb8 <xQueueSemaphoreTake+0x194>
		taskEXIT_CRITICAL();
9000dc72:	f7ff f8a1 	bl	9000cdb8 <vPortExitCritical>
		vTaskSuspendAll();
9000dc76:	f000 fef9 	bl	9000ea6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
9000dc7a:	f7ff f87b 	bl	9000cd74 <vPortEnterCritical>
9000dc7e:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
9000dc82:	2bff      	cmp	r3, #255	@ 0xff
9000dc84:	d102      	bne.n	9000dc8c <xQueueSemaphoreTake+0x68>
9000dc86:	2300      	movs	r3, #0
9000dc88:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
9000dc8c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
9000dc90:	2bff      	cmp	r3, #255	@ 0xff
9000dc92:	d102      	bne.n	9000dc9a <xQueueSemaphoreTake+0x76>
9000dc94:	2300      	movs	r3, #0
9000dc96:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
9000dc9a:	f7ff f88d 	bl	9000cdb8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
9000dc9e:	a901      	add	r1, sp, #4
9000dca0:	a802      	add	r0, sp, #8
9000dca2:	f001 f861 	bl	9000ed68 <xTaskCheckForTimeOut>
9000dca6:	2800      	cmp	r0, #0
9000dca8:	d137      	bne.n	9000dd1a <xQueueSemaphoreTake+0xf6>
	taskENTER_CRITICAL();
9000dcaa:	f7ff f863 	bl	9000cd74 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
9000dcae:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
9000dcb0:	2b00      	cmp	r3, #0
9000dcb2:	f000 80ae 	beq.w	9000de12 <xQueueSemaphoreTake+0x1ee>
	taskEXIT_CRITICAL();
9000dcb6:	f7ff f87f 	bl	9000cdb8 <vPortExitCritical>
	taskENTER_CRITICAL();
9000dcba:	f7ff f85b 	bl	9000cd74 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
9000dcbe:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
9000dcc2:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000dcc4:	2d00      	cmp	r5, #0
9000dcc6:	dd7f      	ble.n	9000ddc8 <xQueueSemaphoreTake+0x1a4>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000dcc8:	f104 0824 	add.w	r8, r4, #36	@ 0x24
9000dccc:	e004      	b.n	9000dcd8 <xQueueSemaphoreTake+0xb4>
			--cTxLock;
9000dcce:	1e6b      	subs	r3, r5, #1
9000dcd0:	b2da      	uxtb	r2, r3
9000dcd2:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000dcd4:	2a00      	cmp	r2, #0
9000dcd6:	d077      	beq.n	9000ddc8 <xQueueSemaphoreTake+0x1a4>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000dcd8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000dcda:	4640      	mov	r0, r8
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000dcdc:	2b00      	cmp	r3, #0
9000dcde:	d073      	beq.n	9000ddc8 <xQueueSemaphoreTake+0x1a4>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000dce0:	f000 fff0 	bl	9000ecc4 <xTaskRemoveFromEventList>
9000dce4:	2800      	cmp	r0, #0
9000dce6:	d0f2      	beq.n	9000dcce <xQueueSemaphoreTake+0xaa>
						vTaskMissedYield();
9000dce8:	f001 f880 	bl	9000edec <vTaskMissedYield>
9000dcec:	e7ef      	b.n	9000dcce <xQueueSemaphoreTake+0xaa>
9000dcee:	f04f 0350 	mov.w	r3, #80	@ 0x50
9000dcf2:	f383 8811 	msr	BASEPRI, r3
9000dcf6:	f3bf 8f6f 	isb	sy
9000dcfa:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
9000dcfe:	e7fe      	b.n	9000dcfe <xQueueSemaphoreTake+0xda>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
9000dd00:	9b01      	ldr	r3, [sp, #4]
9000dd02:	2b00      	cmp	r3, #0
9000dd04:	f000 80d7 	beq.w	9000deb6 <xQueueSemaphoreTake+0x292>
9000dd08:	f04f 0350 	mov.w	r3, #80	@ 0x50
9000dd0c:	f383 8811 	msr	BASEPRI, r3
9000dd10:	f3bf 8f6f 	isb	sy
9000dd14:	f3bf 8f4f 	dsb	sy
9000dd18:	e7fe      	b.n	9000dd18 <xQueueSemaphoreTake+0xf4>
	taskENTER_CRITICAL();
9000dd1a:	f7ff f82b 	bl	9000cd74 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
9000dd1e:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
9000dd22:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000dd24:	2d00      	cmp	r5, #0
9000dd26:	dc04      	bgt.n	9000dd32 <xQueueSemaphoreTake+0x10e>
9000dd28:	e011      	b.n	9000dd4e <xQueueSemaphoreTake+0x12a>
			--cTxLock;
9000dd2a:	1e6b      	subs	r3, r5, #1
9000dd2c:	b2da      	uxtb	r2, r3
9000dd2e:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000dd30:	b16a      	cbz	r2, 9000dd4e <xQueueSemaphoreTake+0x12a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000dd32:	6a63      	ldr	r3, [r4, #36]	@ 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000dd34:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000dd36:	b153      	cbz	r3, 9000dd4e <xQueueSemaphoreTake+0x12a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000dd38:	f000 ffc4 	bl	9000ecc4 <xTaskRemoveFromEventList>
9000dd3c:	2800      	cmp	r0, #0
9000dd3e:	d0f4      	beq.n	9000dd2a <xQueueSemaphoreTake+0x106>
						vTaskMissedYield();
9000dd40:	f001 f854 	bl	9000edec <vTaskMissedYield>
			--cTxLock;
9000dd44:	1e6b      	subs	r3, r5, #1
9000dd46:	b2da      	uxtb	r2, r3
9000dd48:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000dd4a:	2a00      	cmp	r2, #0
9000dd4c:	d1f1      	bne.n	9000dd32 <xQueueSemaphoreTake+0x10e>
		pxQueue->cTxLock = queueUNLOCKED;
9000dd4e:	23ff      	movs	r3, #255	@ 0xff
9000dd50:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
9000dd54:	f7ff f830 	bl	9000cdb8 <vPortExitCritical>
	taskENTER_CRITICAL();
9000dd58:	f7ff f80c 	bl	9000cd74 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
9000dd5c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
9000dd60:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000dd62:	2d00      	cmp	r5, #0
9000dd64:	dd14      	ble.n	9000dd90 <xQueueSemaphoreTake+0x16c>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000dd66:	f104 0810 	add.w	r8, r4, #16
9000dd6a:	e003      	b.n	9000dd74 <xQueueSemaphoreTake+0x150>
				--cRxLock;
9000dd6c:	1e6b      	subs	r3, r5, #1
9000dd6e:	b2da      	uxtb	r2, r3
9000dd70:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000dd72:	b16a      	cbz	r2, 9000dd90 <xQueueSemaphoreTake+0x16c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000dd74:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000dd76:	4640      	mov	r0, r8
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000dd78:	b153      	cbz	r3, 9000dd90 <xQueueSemaphoreTake+0x16c>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000dd7a:	f000 ffa3 	bl	9000ecc4 <xTaskRemoveFromEventList>
9000dd7e:	2800      	cmp	r0, #0
9000dd80:	d0f4      	beq.n	9000dd6c <xQueueSemaphoreTake+0x148>
					vTaskMissedYield();
9000dd82:	f001 f833 	bl	9000edec <vTaskMissedYield>
				--cRxLock;
9000dd86:	1e6b      	subs	r3, r5, #1
9000dd88:	b2da      	uxtb	r2, r3
9000dd8a:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000dd8c:	2a00      	cmp	r2, #0
9000dd8e:	d1f1      	bne.n	9000dd74 <xQueueSemaphoreTake+0x150>
		pxQueue->cRxLock = queueUNLOCKED;
9000dd90:	23ff      	movs	r3, #255	@ 0xff
9000dd92:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
	taskEXIT_CRITICAL();
9000dd96:	f7ff f80f 	bl	9000cdb8 <vPortExitCritical>
			( void ) xTaskResumeAll();
9000dd9a:	f000 fe6f 	bl	9000ea7c <xTaskResumeAll>
	taskENTER_CRITICAL();
9000dd9e:	f7fe ffe9 	bl	9000cd74 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
9000dda2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
9000dda4:	b963      	cbnz	r3, 9000ddc0 <xQueueSemaphoreTake+0x19c>
	taskEXIT_CRITICAL();
9000dda6:	f7ff f807 	bl	9000cdb8 <vPortExitCritical>
					if( xInheritanceOccurred != pdFALSE )
9000ddaa:	2f00      	cmp	r7, #0
9000ddac:	f040 8085 	bne.w	9000deba <xQueueSemaphoreTake+0x296>
					return errQUEUE_EMPTY;
9000ddb0:	2000      	movs	r0, #0
}
9000ddb2:	b004      	add	sp, #16
9000ddb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					vTaskInternalSetTimeOutState( &xTimeOut );
9000ddb8:	a802      	add	r0, sp, #8
9000ddba:	f000 ffc9 	bl	9000ed50 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
9000ddbe:	e758      	b.n	9000dc72 <xQueueSemaphoreTake+0x4e>
	taskEXIT_CRITICAL();
9000ddc0:	f7fe fffa 	bl	9000cdb8 <vPortExitCritical>
	return xReturn;
9000ddc4:	2501      	movs	r5, #1
9000ddc6:	e747      	b.n	9000dc58 <xQueueSemaphoreTake+0x34>
		pxQueue->cTxLock = queueUNLOCKED;
9000ddc8:	23ff      	movs	r3, #255	@ 0xff
9000ddca:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
9000ddce:	f7fe fff3 	bl	9000cdb8 <vPortExitCritical>
	taskENTER_CRITICAL();
9000ddd2:	f7fe ffcf 	bl	9000cd74 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
9000ddd6:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
9000ddda:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000dddc:	2d00      	cmp	r5, #0
9000ddde:	dd10      	ble.n	9000de02 <xQueueSemaphoreTake+0x1de>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000dde0:	f104 0810 	add.w	r8, r4, #16
9000dde4:	e003      	b.n	9000ddee <xQueueSemaphoreTake+0x1ca>
				--cRxLock;
9000dde6:	1e6b      	subs	r3, r5, #1
9000dde8:	b2da      	uxtb	r2, r3
9000ddea:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000ddec:	b14a      	cbz	r2, 9000de02 <xQueueSemaphoreTake+0x1de>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000ddee:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000ddf0:	4640      	mov	r0, r8
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000ddf2:	b133      	cbz	r3, 9000de02 <xQueueSemaphoreTake+0x1de>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000ddf4:	f000 ff66 	bl	9000ecc4 <xTaskRemoveFromEventList>
9000ddf8:	2800      	cmp	r0, #0
9000ddfa:	d0f4      	beq.n	9000dde6 <xQueueSemaphoreTake+0x1c2>
					vTaskMissedYield();
9000ddfc:	f000 fff6 	bl	9000edec <vTaskMissedYield>
9000de00:	e7f1      	b.n	9000dde6 <xQueueSemaphoreTake+0x1c2>
		pxQueue->cRxLock = queueUNLOCKED;
9000de02:	23ff      	movs	r3, #255	@ 0xff
9000de04:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
	taskEXIT_CRITICAL();
9000de08:	f7fe ffd6 	bl	9000cdb8 <vPortExitCritical>
				( void ) xTaskResumeAll();
9000de0c:	f000 fe36 	bl	9000ea7c <xTaskResumeAll>
9000de10:	e7d8      	b.n	9000ddc4 <xQueueSemaphoreTake+0x1a0>
	taskEXIT_CRITICAL();
9000de12:	f7fe ffd1 	bl	9000cdb8 <vPortExitCritical>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
9000de16:	6823      	ldr	r3, [r4, #0]
9000de18:	2b00      	cmp	r3, #0
9000de1a:	d05c      	beq.n	9000ded6 <xQueueSemaphoreTake+0x2b2>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
9000de1c:	f104 0824 	add.w	r8, r4, #36	@ 0x24
9000de20:	9901      	ldr	r1, [sp, #4]
9000de22:	4640      	mov	r0, r8
9000de24:	f000 fec0 	bl	9000eba8 <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
9000de28:	f7fe ffa4 	bl	9000cd74 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
9000de2c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
9000de30:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000de32:	2d00      	cmp	r5, #0
9000de34:	dc04      	bgt.n	9000de40 <xQueueSemaphoreTake+0x21c>
9000de36:	e00d      	b.n	9000de54 <xQueueSemaphoreTake+0x230>
			--cTxLock;
9000de38:	1e6b      	subs	r3, r5, #1
9000de3a:	b2da      	uxtb	r2, r3
9000de3c:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000de3e:	b14a      	cbz	r2, 9000de54 <xQueueSemaphoreTake+0x230>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000de40:	6a63      	ldr	r3, [r4, #36]	@ 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000de42:	4640      	mov	r0, r8
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000de44:	b133      	cbz	r3, 9000de54 <xQueueSemaphoreTake+0x230>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000de46:	f000 ff3d 	bl	9000ecc4 <xTaskRemoveFromEventList>
9000de4a:	2800      	cmp	r0, #0
9000de4c:	d0f4      	beq.n	9000de38 <xQueueSemaphoreTake+0x214>
						vTaskMissedYield();
9000de4e:	f000 ffcd 	bl	9000edec <vTaskMissedYield>
9000de52:	e7f1      	b.n	9000de38 <xQueueSemaphoreTake+0x214>
		pxQueue->cTxLock = queueUNLOCKED;
9000de54:	23ff      	movs	r3, #255	@ 0xff
9000de56:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
9000de5a:	f7fe ffad 	bl	9000cdb8 <vPortExitCritical>
	taskENTER_CRITICAL();
9000de5e:	f7fe ff89 	bl	9000cd74 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
9000de62:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
9000de66:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000de68:	2d00      	cmp	r5, #0
9000de6a:	dd10      	ble.n	9000de8e <xQueueSemaphoreTake+0x26a>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000de6c:	f104 0810 	add.w	r8, r4, #16
9000de70:	e003      	b.n	9000de7a <xQueueSemaphoreTake+0x256>
				--cRxLock;
9000de72:	1e6b      	subs	r3, r5, #1
9000de74:	b2da      	uxtb	r2, r3
9000de76:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000de78:	b14a      	cbz	r2, 9000de8e <xQueueSemaphoreTake+0x26a>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000de7a:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000de7c:	4640      	mov	r0, r8
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000de7e:	b133      	cbz	r3, 9000de8e <xQueueSemaphoreTake+0x26a>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000de80:	f000 ff20 	bl	9000ecc4 <xTaskRemoveFromEventList>
9000de84:	2800      	cmp	r0, #0
9000de86:	d0f4      	beq.n	9000de72 <xQueueSemaphoreTake+0x24e>
					vTaskMissedYield();
9000de88:	f000 ffb0 	bl	9000edec <vTaskMissedYield>
9000de8c:	e7f1      	b.n	9000de72 <xQueueSemaphoreTake+0x24e>
		pxQueue->cRxLock = queueUNLOCKED;
9000de8e:	23ff      	movs	r3, #255	@ 0xff
9000de90:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
	taskEXIT_CRITICAL();
9000de94:	f7fe ff90 	bl	9000cdb8 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
9000de98:	f000 fdf0 	bl	9000ea7c <xTaskResumeAll>
9000de9c:	2800      	cmp	r0, #0
9000de9e:	d191      	bne.n	9000ddc4 <xQueueSemaphoreTake+0x1a0>
					portYIELD_WITHIN_API();
9000dea0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
9000dea4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
9000dea8:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
9000deac:	f3bf 8f4f 	dsb	sy
9000deb0:	f3bf 8f6f 	isb	sy
9000deb4:	e786      	b.n	9000ddc4 <xQueueSemaphoreTake+0x1a0>
9000deb6:	462f      	mov	r7, r5
9000deb8:	e6cc      	b.n	9000dc54 <xQueueSemaphoreTake+0x30>
						taskENTER_CRITICAL();
9000deba:	f7fe ff5b 	bl	9000cd74 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
9000debe:	6a61      	ldr	r1, [r4, #36]	@ 0x24
9000dec0:	b119      	cbz	r1, 9000deca <xQueueSemaphoreTake+0x2a6>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
9000dec2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
9000dec4:	6819      	ldr	r1, [r3, #0]
9000dec6:	f1c1 0138 	rsb	r1, r1, #56	@ 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
9000deca:	68a0      	ldr	r0, [r4, #8]
9000decc:	f001 f82e 	bl	9000ef2c <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
9000ded0:	f7fe ff72 	bl	9000cdb8 <vPortExitCritical>
9000ded4:	e76c      	b.n	9000ddb0 <xQueueSemaphoreTake+0x18c>
						taskENTER_CRITICAL();
9000ded6:	f7fe ff4d 	bl	9000cd74 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
9000deda:	68a0      	ldr	r0, [r4, #8]
9000dedc:	f000 ffa2 	bl	9000ee24 <xTaskPriorityInherit>
9000dee0:	4607      	mov	r7, r0
						taskEXIT_CRITICAL();
9000dee2:	f7fe ff69 	bl	9000cdb8 <vPortExitCritical>
9000dee6:	e799      	b.n	9000de1c <xQueueSemaphoreTake+0x1f8>
						configASSERT( xInheritanceOccurred == pdFALSE );
9000dee8:	2f00      	cmp	r7, #0
9000deea:	d0f1      	beq.n	9000ded0 <xQueueSemaphoreTake+0x2ac>
9000deec:	f04f 0350 	mov.w	r3, #80	@ 0x50
9000def0:	f383 8811 	msr	BASEPRI, r3
9000def4:	f3bf 8f6f 	isb	sy
9000def8:	f3bf 8f4f 	dsb	sy
9000defc:	e7fe      	b.n	9000defc <xQueueSemaphoreTake+0x2d8>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
9000defe:	3b01      	subs	r3, #1
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
9000df00:	6822      	ldr	r2, [r4, #0]
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
9000df02:	63a3      	str	r3, [r4, #56]	@ 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
9000df04:	b12a      	cbz	r2, 9000df12 <xQueueSemaphoreTake+0x2ee>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000df06:	6923      	ldr	r3, [r4, #16]
9000df08:	b93b      	cbnz	r3, 9000df1a <xQueueSemaphoreTake+0x2f6>
				taskEXIT_CRITICAL();
9000df0a:	f7fe ff55 	bl	9000cdb8 <vPortExitCritical>
				return pdPASS;
9000df0e:	2001      	movs	r0, #1
9000df10:	e74f      	b.n	9000ddb2 <xQueueSemaphoreTake+0x18e>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
9000df12:	f001 f85b 	bl	9000efcc <pvTaskIncrementMutexHeldCount>
9000df16:	60a0      	str	r0, [r4, #8]
9000df18:	e7f5      	b.n	9000df06 <xQueueSemaphoreTake+0x2e2>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000df1a:	f104 0010 	add.w	r0, r4, #16
9000df1e:	f000 fed1 	bl	9000ecc4 <xTaskRemoveFromEventList>
9000df22:	2800      	cmp	r0, #0
9000df24:	d0f1      	beq.n	9000df0a <xQueueSemaphoreTake+0x2e6>
						queueYIELD_IF_USING_PREEMPTION();
9000df26:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
9000df2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
9000df2e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
9000df32:	f3bf 8f4f 	dsb	sy
9000df36:	f3bf 8f6f 	isb	sy
9000df3a:	e7e6      	b.n	9000df0a <xQueueSemaphoreTake+0x2e6>

9000df3c <xQueueTakeMutexRecursive>:
		configASSERT( pxMutex );
9000df3c:	b1a8      	cbz	r0, 9000df6a <xQueueTakeMutexRecursive+0x2e>
	{
9000df3e:	b570      	push	{r4, r5, r6, lr}
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
9000df40:	6886      	ldr	r6, [r0, #8]
9000df42:	4604      	mov	r4, r0
9000df44:	460d      	mov	r5, r1
9000df46:	f000 ff57 	bl	9000edf8 <xTaskGetCurrentTaskHandle>
9000df4a:	4286      	cmp	r6, r0
9000df4c:	d008      	beq.n	9000df60 <xQueueTakeMutexRecursive+0x24>
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
9000df4e:	4629      	mov	r1, r5
9000df50:	4620      	mov	r0, r4
9000df52:	f7ff fe67 	bl	9000dc24 <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
9000df56:	b110      	cbz	r0, 9000df5e <xQueueTakeMutexRecursive+0x22>
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
9000df58:	68e3      	ldr	r3, [r4, #12]
9000df5a:	3301      	adds	r3, #1
9000df5c:	60e3      	str	r3, [r4, #12]
	}
9000df5e:	bd70      	pop	{r4, r5, r6, pc}
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
9000df60:	68e3      	ldr	r3, [r4, #12]
			xReturn = pdPASS;
9000df62:	2001      	movs	r0, #1
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
9000df64:	4403      	add	r3, r0
9000df66:	60e3      	str	r3, [r4, #12]
	}
9000df68:	bd70      	pop	{r4, r5, r6, pc}
9000df6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
9000df6e:	f383 8811 	msr	BASEPRI, r3
9000df72:	f3bf 8f6f 	isb	sy
9000df76:	f3bf 8f4f 	dsb	sy
		configASSERT( pxMutex );
9000df7a:	e7fe      	b.n	9000df7a <xQueueTakeMutexRecursive+0x3e>

9000df7c <xQueueReceiveFromISR>:
{
9000df7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
9000df80:	b310      	cbz	r0, 9000dfc8 <xQueueReceiveFromISR+0x4c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
9000df82:	460f      	mov	r7, r1
9000df84:	4604      	mov	r4, r0
9000df86:	4616      	mov	r6, r2
9000df88:	b191      	cbz	r1, 9000dfb0 <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
9000df8a:	f7ff f825 	bl	9000cfd8 <vPortValidateInterruptPriority>
	__asm volatile
9000df8e:	f3ef 8911 	mrs	r9, BASEPRI
9000df92:	f04f 0350 	mov.w	r3, #80	@ 0x50
9000df96:	f383 8811 	msr	BASEPRI, r3
9000df9a:	f3bf 8f6f 	isb	sy
9000df9e:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
9000dfa2:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
9000dfa4:	b9cd      	cbnz	r5, 9000dfda <xQueueReceiveFromISR+0x5e>
			xReturn = pdFAIL;
9000dfa6:	4628      	mov	r0, r5
	__asm volatile
9000dfa8:	f389 8811 	msr	BASEPRI, r9
}
9000dfac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
9000dfb0:	6c03      	ldr	r3, [r0, #64]	@ 0x40
9000dfb2:	2b00      	cmp	r3, #0
9000dfb4:	d0e9      	beq.n	9000df8a <xQueueReceiveFromISR+0xe>
	__asm volatile
9000dfb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
9000dfba:	f383 8811 	msr	BASEPRI, r3
9000dfbe:	f3bf 8f6f 	isb	sy
9000dfc2:	f3bf 8f4f 	dsb	sy
9000dfc6:	e7fe      	b.n	9000dfc6 <xQueueReceiveFromISR+0x4a>
9000dfc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
9000dfcc:	f383 8811 	msr	BASEPRI, r3
9000dfd0:	f3bf 8f6f 	isb	sy
9000dfd4:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
9000dfd8:	e7fe      	b.n	9000dfd8 <xQueueReceiveFromISR+0x5c>
			const int8_t cRxLock = pxQueue->cRxLock;
9000dfda:	f894 8044 	ldrb.w	r8, [r4, #68]	@ 0x44
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
9000dfde:	6c22      	ldr	r2, [r4, #64]	@ 0x40
			const int8_t cRxLock = pxQueue->cRxLock;
9000dfe0:	fa4f f888 	sxtb.w	r8, r8
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
9000dfe4:	b142      	cbz	r2, 9000dff8 <xQueueReceiveFromISR+0x7c>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
9000dfe6:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
9000dfe8:	68a3      	ldr	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
9000dfea:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
9000dfec:	4299      	cmp	r1, r3
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
9000dfee:	60e1      	str	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
9000dff0:	d21c      	bcs.n	9000e02c <xQueueReceiveFromISR+0xb0>
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
9000dff2:	4638      	mov	r0, r7
9000dff4:	f015 f98b 	bl	9002330e <memcpy>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
9000dff8:	3d01      	subs	r5, #1
			if( cRxLock == queueUNLOCKED )
9000dffa:	f1b8 3fff 	cmp.w	r8, #4294967295
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
9000dffe:	63a5      	str	r5, [r4, #56]	@ 0x38
			if( cRxLock == queueUNLOCKED )
9000e000:	d006      	beq.n	9000e010 <xQueueReceiveFromISR+0x94>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
9000e002:	f108 0301 	add.w	r3, r8, #1
9000e006:	b25b      	sxtb	r3, r3
9000e008:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
			xReturn = pdPASS;
9000e00c:	2001      	movs	r0, #1
9000e00e:	e7cb      	b.n	9000dfa8 <xQueueReceiveFromISR+0x2c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000e010:	6923      	ldr	r3, [r4, #16]
9000e012:	2b00      	cmp	r3, #0
9000e014:	d0fa      	beq.n	9000e00c <xQueueReceiveFromISR+0x90>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000e016:	f104 0010 	add.w	r0, r4, #16
9000e01a:	f000 fe53 	bl	9000ecc4 <xTaskRemoveFromEventList>
						if( pxHigherPriorityTaskWoken != NULL )
9000e01e:	2e00      	cmp	r6, #0
9000e020:	d0f4      	beq.n	9000e00c <xQueueReceiveFromISR+0x90>
9000e022:	2800      	cmp	r0, #0
9000e024:	d0f2      	beq.n	9000e00c <xQueueReceiveFromISR+0x90>
							*pxHigherPriorityTaskWoken = pdTRUE;
9000e026:	2301      	movs	r3, #1
9000e028:	6033      	str	r3, [r6, #0]
9000e02a:	e7ef      	b.n	9000e00c <xQueueReceiveFromISR+0x90>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
9000e02c:	6821      	ldr	r1, [r4, #0]
9000e02e:	60e1      	str	r1, [r4, #12]
9000e030:	e7df      	b.n	9000dff2 <xQueueReceiveFromISR+0x76>
9000e032:	bf00      	nop
9000e034:	0000      	movs	r0, r0
	...

9000e038 <vQueueDelete>:
	configASSERT( pxQueue );
9000e038:	b1e0      	cbz	r0, 9000e074 <vQueueDelete+0x3c>

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
9000e03a:	4b21      	ldr	r3, [pc, #132]	@ (9000e0c0 <vQueueDelete+0x88>)
9000e03c:	685a      	ldr	r2, [r3, #4]
9000e03e:	4290      	cmp	r0, r2
9000e040:	d02b      	beq.n	9000e09a <vQueueDelete+0x62>
9000e042:	68da      	ldr	r2, [r3, #12]
9000e044:	4290      	cmp	r0, r2
9000e046:	d02a      	beq.n	9000e09e <vQueueDelete+0x66>
9000e048:	695a      	ldr	r2, [r3, #20]
9000e04a:	4290      	cmp	r0, r2
9000e04c:	d029      	beq.n	9000e0a2 <vQueueDelete+0x6a>
9000e04e:	69da      	ldr	r2, [r3, #28]
9000e050:	4290      	cmp	r0, r2
9000e052:	d028      	beq.n	9000e0a6 <vQueueDelete+0x6e>
9000e054:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
9000e056:	4290      	cmp	r0, r2
9000e058:	d027      	beq.n	9000e0aa <vQueueDelete+0x72>
9000e05a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
9000e05c:	4290      	cmp	r0, r2
9000e05e:	d014      	beq.n	9000e08a <vQueueDelete+0x52>
9000e060:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
9000e062:	4290      	cmp	r0, r2
9000e064:	d023      	beq.n	9000e0ae <vQueueDelete+0x76>
9000e066:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
9000e068:	4290      	cmp	r0, r2
9000e06a:	d022      	beq.n	9000e0b2 <vQueueDelete+0x7a>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
9000e06c:	f890 3046 	ldrb.w	r3, [r0, #70]	@ 0x46
9000e070:	b14b      	cbz	r3, 9000e086 <vQueueDelete+0x4e>
}
9000e072:	4770      	bx	lr
9000e074:	f04f 0350 	mov.w	r3, #80	@ 0x50
9000e078:	f383 8811 	msr	BASEPRI, r3
9000e07c:	f3bf 8f6f 	isb	sy
9000e080:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
9000e084:	e7fe      	b.n	9000e084 <vQueueDelete+0x4c>
			vPortFree( pxQueue );
9000e086:	f7fe bd59 	b.w	9000cb3c <vPortFree>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
9000e08a:	2205      	movs	r2, #5
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
9000e08c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
9000e090:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 9000e0b8 <vQueueDelete+0x80>
9000e094:	ed83 7b00 	vstr	d7, [r3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
				break;
9000e098:	e7e8      	b.n	9000e06c <vQueueDelete+0x34>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
9000e09a:	2200      	movs	r2, #0
9000e09c:	e7f6      	b.n	9000e08c <vQueueDelete+0x54>
9000e09e:	2201      	movs	r2, #1
9000e0a0:	e7f4      	b.n	9000e08c <vQueueDelete+0x54>
9000e0a2:	2202      	movs	r2, #2
9000e0a4:	e7f2      	b.n	9000e08c <vQueueDelete+0x54>
9000e0a6:	2203      	movs	r2, #3
9000e0a8:	e7f0      	b.n	9000e08c <vQueueDelete+0x54>
9000e0aa:	2204      	movs	r2, #4
9000e0ac:	e7ee      	b.n	9000e08c <vQueueDelete+0x54>
9000e0ae:	2206      	movs	r2, #6
9000e0b0:	e7ec      	b.n	9000e08c <vQueueDelete+0x54>
9000e0b2:	2207      	movs	r2, #7
9000e0b4:	e7ea      	b.n	9000e08c <vQueueDelete+0x54>
9000e0b6:	bf00      	nop
	...
9000e0c0:	24024c58 	.word	0x24024c58

9000e0c4 <vQueueAddToRegistry>:
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
9000e0c4:	4b12      	ldr	r3, [pc, #72]	@ (9000e110 <vQueueAddToRegistry+0x4c>)
9000e0c6:	681a      	ldr	r2, [r3, #0]
9000e0c8:	b17a      	cbz	r2, 9000e0ea <vQueueAddToRegistry+0x26>
9000e0ca:	689a      	ldr	r2, [r3, #8]
9000e0cc:	b162      	cbz	r2, 9000e0e8 <vQueueAddToRegistry+0x24>
9000e0ce:	691a      	ldr	r2, [r3, #16]
9000e0d0:	b192      	cbz	r2, 9000e0f8 <vQueueAddToRegistry+0x34>
9000e0d2:	699a      	ldr	r2, [r3, #24]
9000e0d4:	b192      	cbz	r2, 9000e0fc <vQueueAddToRegistry+0x38>
9000e0d6:	6a1a      	ldr	r2, [r3, #32]
9000e0d8:	b192      	cbz	r2, 9000e100 <vQueueAddToRegistry+0x3c>
9000e0da:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
9000e0dc:	b192      	cbz	r2, 9000e104 <vQueueAddToRegistry+0x40>
9000e0de:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
9000e0e0:	b192      	cbz	r2, 9000e108 <vQueueAddToRegistry+0x44>
9000e0e2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
9000e0e4:	b192      	cbz	r2, 9000e10c <vQueueAddToRegistry+0x48>
	}
9000e0e6:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
9000e0e8:	2201      	movs	r2, #1
				xQueueRegistry[ ux ].xHandle = xQueue;
9000e0ea:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
9000e0ee:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
9000e0f2:	f8cc 0004 	str.w	r0, [ip, #4]
	}
9000e0f6:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
9000e0f8:	2202      	movs	r2, #2
9000e0fa:	e7f6      	b.n	9000e0ea <vQueueAddToRegistry+0x26>
9000e0fc:	2203      	movs	r2, #3
9000e0fe:	e7f4      	b.n	9000e0ea <vQueueAddToRegistry+0x26>
9000e100:	2204      	movs	r2, #4
9000e102:	e7f2      	b.n	9000e0ea <vQueueAddToRegistry+0x26>
9000e104:	2205      	movs	r2, #5
9000e106:	e7f0      	b.n	9000e0ea <vQueueAddToRegistry+0x26>
9000e108:	2206      	movs	r2, #6
9000e10a:	e7ee      	b.n	9000e0ea <vQueueAddToRegistry+0x26>
9000e10c:	2207      	movs	r2, #7
9000e10e:	e7ec      	b.n	9000e0ea <vQueueAddToRegistry+0x26>
9000e110:	24024c58 	.word	0x24024c58

9000e114 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
9000e114:	b570      	push	{r4, r5, r6, lr}
9000e116:	4605      	mov	r5, r0
9000e118:	460e      	mov	r6, r1
9000e11a:	4614      	mov	r4, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
9000e11c:	f7fe fe2a 	bl	9000cd74 <vPortEnterCritical>
9000e120:	f895 3044 	ldrb.w	r3, [r5, #68]	@ 0x44
9000e124:	2bff      	cmp	r3, #255	@ 0xff
9000e126:	d102      	bne.n	9000e12e <vQueueWaitForMessageRestricted+0x1a>
9000e128:	2300      	movs	r3, #0
9000e12a:	f885 3044 	strb.w	r3, [r5, #68]	@ 0x44
9000e12e:	f895 3045 	ldrb.w	r3, [r5, #69]	@ 0x45
9000e132:	2bff      	cmp	r3, #255	@ 0xff
9000e134:	d102      	bne.n	9000e13c <vQueueWaitForMessageRestricted+0x28>
9000e136:	2300      	movs	r3, #0
9000e138:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
9000e13c:	f7fe fe3c 	bl	9000cdb8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
9000e140:	6bab      	ldr	r3, [r5, #56]	@ 0x38
9000e142:	2b00      	cmp	r3, #0
9000e144:	d043      	beq.n	9000e1ce <vQueueWaitForMessageRestricted+0xba>
	taskENTER_CRITICAL();
9000e146:	f7fe fe15 	bl	9000cd74 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
9000e14a:	f895 3045 	ldrb.w	r3, [r5, #69]	@ 0x45
9000e14e:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000e150:	2c00      	cmp	r4, #0
9000e152:	dd14      	ble.n	9000e17e <vQueueWaitForMessageRestricted+0x6a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000e154:	f105 0624 	add.w	r6, r5, #36	@ 0x24
9000e158:	e003      	b.n	9000e162 <vQueueWaitForMessageRestricted+0x4e>
			--cTxLock;
9000e15a:	1e63      	subs	r3, r4, #1
9000e15c:	b2da      	uxtb	r2, r3
9000e15e:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000e160:	b16a      	cbz	r2, 9000e17e <vQueueWaitForMessageRestricted+0x6a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000e162:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000e164:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000e166:	b153      	cbz	r3, 9000e17e <vQueueWaitForMessageRestricted+0x6a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000e168:	f000 fdac 	bl	9000ecc4 <xTaskRemoveFromEventList>
9000e16c:	2800      	cmp	r0, #0
9000e16e:	d0f4      	beq.n	9000e15a <vQueueWaitForMessageRestricted+0x46>
						vTaskMissedYield();
9000e170:	f000 fe3c 	bl	9000edec <vTaskMissedYield>
			--cTxLock;
9000e174:	1e63      	subs	r3, r4, #1
9000e176:	b2da      	uxtb	r2, r3
9000e178:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000e17a:	2a00      	cmp	r2, #0
9000e17c:	d1f1      	bne.n	9000e162 <vQueueWaitForMessageRestricted+0x4e>
		pxQueue->cTxLock = queueUNLOCKED;
9000e17e:	23ff      	movs	r3, #255	@ 0xff
9000e180:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
	taskEXIT_CRITICAL();
9000e184:	f7fe fe18 	bl	9000cdb8 <vPortExitCritical>
	taskENTER_CRITICAL();
9000e188:	f7fe fdf4 	bl	9000cd74 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
9000e18c:	f895 3044 	ldrb.w	r3, [r5, #68]	@ 0x44
9000e190:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000e192:	2c00      	cmp	r4, #0
9000e194:	dd14      	ble.n	9000e1c0 <vQueueWaitForMessageRestricted+0xac>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000e196:	f105 0610 	add.w	r6, r5, #16
9000e19a:	e003      	b.n	9000e1a4 <vQueueWaitForMessageRestricted+0x90>
				--cRxLock;
9000e19c:	1e63      	subs	r3, r4, #1
9000e19e:	b2da      	uxtb	r2, r3
9000e1a0:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000e1a2:	b16a      	cbz	r2, 9000e1c0 <vQueueWaitForMessageRestricted+0xac>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000e1a4:	692b      	ldr	r3, [r5, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000e1a6:	4630      	mov	r0, r6
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000e1a8:	b153      	cbz	r3, 9000e1c0 <vQueueWaitForMessageRestricted+0xac>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000e1aa:	f000 fd8b 	bl	9000ecc4 <xTaskRemoveFromEventList>
9000e1ae:	2800      	cmp	r0, #0
9000e1b0:	d0f4      	beq.n	9000e19c <vQueueWaitForMessageRestricted+0x88>
					vTaskMissedYield();
9000e1b2:	f000 fe1b 	bl	9000edec <vTaskMissedYield>
				--cRxLock;
9000e1b6:	1e63      	subs	r3, r4, #1
9000e1b8:	b2da      	uxtb	r2, r3
9000e1ba:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000e1bc:	2a00      	cmp	r2, #0
9000e1be:	d1f1      	bne.n	9000e1a4 <vQueueWaitForMessageRestricted+0x90>
		pxQueue->cRxLock = queueUNLOCKED;
9000e1c0:	23ff      	movs	r3, #255	@ 0xff
9000e1c2:	f885 3044 	strb.w	r3, [r5, #68]	@ 0x44
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
	}
9000e1c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
9000e1ca:	f7fe bdf5 	b.w	9000cdb8 <vPortExitCritical>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
9000e1ce:	4622      	mov	r2, r4
9000e1d0:	4631      	mov	r1, r6
9000e1d2:	f105 0024 	add.w	r0, r5, #36	@ 0x24
9000e1d6:	f000 fd2b 	bl	9000ec30 <vTaskPlaceOnEventListRestricted>
9000e1da:	e7b4      	b.n	9000e146 <vQueueWaitForMessageRestricted+0x32>

9000e1dc <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
9000e1dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
9000e1e0:	4605      	mov	r5, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
9000e1e2:	f7fe fdc7 	bl	9000cd74 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
9000e1e6:	4a34      	ldr	r2, [pc, #208]	@ (9000e2b8 <prvAddNewTaskToReadyList+0xdc>)
		if( pxCurrentTCB == NULL )
9000e1e8:	4e34      	ldr	r6, [pc, #208]	@ (9000e2bc <prvAddNewTaskToReadyList+0xe0>)
		uxCurrentNumberOfTasks++;
9000e1ea:	6813      	ldr	r3, [r2, #0]
9000e1ec:	3301      	adds	r3, #1
9000e1ee:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
9000e1f0:	6833      	ldr	r3, [r6, #0]
9000e1f2:	2b00      	cmp	r3, #0
9000e1f4:	d031      	beq.n	9000e25a <prvAddNewTaskToReadyList+0x7e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
9000e1f6:	4c32      	ldr	r4, [pc, #200]	@ (9000e2c0 <prvAddNewTaskToReadyList+0xe4>)
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
9000e1f8:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
			if( xSchedulerRunning == pdFALSE )
9000e1fa:	6823      	ldr	r3, [r4, #0]
9000e1fc:	b333      	cbz	r3, 9000e24c <prvAddNewTaskToReadyList+0x70>
9000e1fe:	4f31      	ldr	r7, [pc, #196]	@ (9000e2c4 <prvAddNewTaskToReadyList+0xe8>)
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
9000e200:	4a31      	ldr	r2, [pc, #196]	@ (9000e2c8 <prvAddNewTaskToReadyList+0xec>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
9000e202:	4932      	ldr	r1, [pc, #200]	@ (9000e2cc <prvAddNewTaskToReadyList+0xf0>)
		uxTaskNumber++;
9000e204:	6813      	ldr	r3, [r2, #0]
9000e206:	3301      	adds	r3, #1
9000e208:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
9000e20a:	646b      	str	r3, [r5, #68]	@ 0x44
		prvAddTaskToReadyList( pxNewTCB );
9000e20c:	680b      	ldr	r3, [r1, #0]
9000e20e:	4283      	cmp	r3, r0
9000e210:	d200      	bcs.n	9000e214 <prvAddNewTaskToReadyList+0x38>
9000e212:	6008      	str	r0, [r1, #0]
9000e214:	eb00 0080 	add.w	r0, r0, r0, lsl #2
9000e218:	1d29      	adds	r1, r5, #4
9000e21a:	eb07 0080 	add.w	r0, r7, r0, lsl #2
9000e21e:	f7fe fd03 	bl	9000cc28 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
9000e222:	f7fe fdc9 	bl	9000cdb8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
9000e226:	6823      	ldr	r3, [r4, #0]
9000e228:	b173      	cbz	r3, 9000e248 <prvAddNewTaskToReadyList+0x6c>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
9000e22a:	6832      	ldr	r2, [r6, #0]
9000e22c:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
9000e22e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
9000e230:	429a      	cmp	r2, r3
9000e232:	d209      	bcs.n	9000e248 <prvAddNewTaskToReadyList+0x6c>
		{
			taskYIELD_IF_USING_PREEMPTION();
9000e234:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
9000e238:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
9000e23c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
9000e240:	f3bf 8f4f 	dsb	sy
9000e244:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
9000e248:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
9000e24c:	6833      	ldr	r3, [r6, #0]
9000e24e:	4f1d      	ldr	r7, [pc, #116]	@ (9000e2c4 <prvAddNewTaskToReadyList+0xe8>)
9000e250:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000e252:	4283      	cmp	r3, r0
9000e254:	d8d4      	bhi.n	9000e200 <prvAddNewTaskToReadyList+0x24>
					pxCurrentTCB = pxNewTCB;
9000e256:	6035      	str	r5, [r6, #0]
9000e258:	e7d2      	b.n	9000e200 <prvAddNewTaskToReadyList+0x24>
			pxCurrentTCB = pxNewTCB;
9000e25a:	6035      	str	r5, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
9000e25c:	6813      	ldr	r3, [r2, #0]
9000e25e:	2b01      	cmp	r3, #1
9000e260:	d003      	beq.n	9000e26a <prvAddNewTaskToReadyList+0x8e>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
9000e262:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
9000e264:	4f17      	ldr	r7, [pc, #92]	@ (9000e2c4 <prvAddNewTaskToReadyList+0xe8>)
9000e266:	4c16      	ldr	r4, [pc, #88]	@ (9000e2c0 <prvAddNewTaskToReadyList+0xe4>)
9000e268:	e7ca      	b.n	9000e200 <prvAddNewTaskToReadyList+0x24>
9000e26a:	4f16      	ldr	r7, [pc, #88]	@ (9000e2c4 <prvAddNewTaskToReadyList+0xe8>)
9000e26c:	463c      	mov	r4, r7
9000e26e:	f507 688c 	add.w	r8, r7, #1120	@ 0x460
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
9000e272:	4620      	mov	r0, r4
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
9000e274:	3414      	adds	r4, #20
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
9000e276:	f7fe fcc7 	bl	9000cc08 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
9000e27a:	45a0      	cmp	r8, r4
9000e27c:	d1f9      	bne.n	9000e272 <prvAddNewTaskToReadyList+0x96>
	}

	vListInitialise( &xDelayedTaskList1 );
9000e27e:	f8df 9064 	ldr.w	r9, [pc, #100]	@ 9000e2e4 <prvAddNewTaskToReadyList+0x108>
	vListInitialise( &xDelayedTaskList2 );
9000e282:	f8df 8064 	ldr.w	r8, [pc, #100]	@ 9000e2e8 <prvAddNewTaskToReadyList+0x10c>
	vListInitialise( &xDelayedTaskList1 );
9000e286:	4648      	mov	r0, r9
9000e288:	4c0d      	ldr	r4, [pc, #52]	@ (9000e2c0 <prvAddNewTaskToReadyList+0xe4>)
9000e28a:	f7fe fcbd 	bl	9000cc08 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
9000e28e:	4640      	mov	r0, r8
9000e290:	f7fe fcba 	bl	9000cc08 <vListInitialise>
	vListInitialise( &xPendingReadyList );
9000e294:	480e      	ldr	r0, [pc, #56]	@ (9000e2d0 <prvAddNewTaskToReadyList+0xf4>)
9000e296:	f7fe fcb7 	bl	9000cc08 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
9000e29a:	480e      	ldr	r0, [pc, #56]	@ (9000e2d4 <prvAddNewTaskToReadyList+0xf8>)
9000e29c:	f7fe fcb4 	bl	9000cc08 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
9000e2a0:	480d      	ldr	r0, [pc, #52]	@ (9000e2d8 <prvAddNewTaskToReadyList+0xfc>)
9000e2a2:	f7fe fcb1 	bl	9000cc08 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
9000e2a6:	4b0d      	ldr	r3, [pc, #52]	@ (9000e2dc <prvAddNewTaskToReadyList+0x100>)
		prvAddTaskToReadyList( pxNewTCB );
9000e2a8:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
	pxDelayedTaskList = &xDelayedTaskList1;
9000e2aa:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
9000e2ae:	4b0c      	ldr	r3, [pc, #48]	@ (9000e2e0 <prvAddNewTaskToReadyList+0x104>)
9000e2b0:	f8c3 8000 	str.w	r8, [r3]
}
9000e2b4:	e7a4      	b.n	9000e200 <prvAddNewTaskToReadyList+0x24>
9000e2b6:	bf00      	nop
9000e2b8:	24024cbc 	.word	0x24024cbc
9000e2bc:	24025190 	.word	0x24025190
9000e2c0:	24024cb0 	.word	0x24024cb0
9000e2c4:	24024d30 	.word	0x24024d30
9000e2c8:	24024ca0 	.word	0x24024ca0
9000e2cc:	24024cb4 	.word	0x24024cb4
9000e2d0:	24024cec 	.word	0x24024cec
9000e2d4:	24024cd8 	.word	0x24024cd8
9000e2d8:	24024cc0 	.word	0x24024cc0
9000e2dc:	24024d04 	.word	0x24024d04
9000e2e0:	24024d00 	.word	0x24024d00
9000e2e4:	24024d1c 	.word	0x24024d1c
9000e2e8:	24024d08 	.word	0x24024d08

9000e2ec <prvIdleTask>:
{
9000e2ec:	b580      	push	{r7, lr}
9000e2ee:	4c22      	ldr	r4, [pc, #136]	@ (9000e378 <prvIdleTask+0x8c>)
9000e2f0:	4e22      	ldr	r6, [pc, #136]	@ (9000e37c <prvIdleTask+0x90>)
9000e2f2:	4d23      	ldr	r5, [pc, #140]	@ (9000e380 <prvIdleTask+0x94>)
9000e2f4:	4f23      	ldr	r7, [pc, #140]	@ (9000e384 <prvIdleTask+0x98>)
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
9000e2f6:	6823      	ldr	r3, [r4, #0]
9000e2f8:	b353      	cbz	r3, 9000e350 <prvIdleTask+0x64>
		{
			taskENTER_CRITICAL();
9000e2fa:	f7fe fd3b 	bl	9000cd74 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9000e2fe:	68f3      	ldr	r3, [r6, #12]
9000e300:	f8d3 800c 	ldr.w	r8, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
9000e304:	f108 0004 	add.w	r0, r8, #4
9000e308:	f7fe fcb4 	bl	9000cc74 <uxListRemove>
				--uxCurrentNumberOfTasks;
9000e30c:	682b      	ldr	r3, [r5, #0]
9000e30e:	3b01      	subs	r3, #1
9000e310:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
9000e312:	6823      	ldr	r3, [r4, #0]
9000e314:	3b01      	subs	r3, #1
9000e316:	6023      	str	r3, [r4, #0]
			}
			taskEXIT_CRITICAL();
9000e318:	f7fe fd4e 	bl	9000cdb8 <vPortExitCritical>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
9000e31c:	f898 305d 	ldrb.w	r3, [r8, #93]	@ 0x5d
9000e320:	b163      	cbz	r3, 9000e33c <prvIdleTask+0x50>
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
				vPortFree( pxTCB );
			}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
9000e322:	2b01      	cmp	r3, #1
9000e324:	d024      	beq.n	9000e370 <prvIdleTask+0x84>
			}
			else
			{
				/* Neither the stack nor the TCB were allocated dynamically, so
				nothing needs to be freed. */
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
9000e326:	2b02      	cmp	r3, #2
9000e328:	d0e5      	beq.n	9000e2f6 <prvIdleTask+0xa>
9000e32a:	f04f 0350 	mov.w	r3, #80	@ 0x50
9000e32e:	f383 8811 	msr	BASEPRI, r3
9000e332:	f3bf 8f6f 	isb	sy
9000e336:	f3bf 8f4f 	dsb	sy
9000e33a:	e7fe      	b.n	9000e33a <prvIdleTask+0x4e>
				vPortFree( pxTCB->pxStack );
9000e33c:	f8d8 0030 	ldr.w	r0, [r8, #48]	@ 0x30
9000e340:	f7fe fbfc 	bl	9000cb3c <vPortFree>
				vPortFree( pxTCB );
9000e344:	4640      	mov	r0, r8
9000e346:	f7fe fbf9 	bl	9000cb3c <vPortFree>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
9000e34a:	6823      	ldr	r3, [r4, #0]
9000e34c:	2b00      	cmp	r3, #0
9000e34e:	d1d4      	bne.n	9000e2fa <prvIdleTask+0xe>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
9000e350:	683b      	ldr	r3, [r7, #0]
9000e352:	2b01      	cmp	r3, #1
9000e354:	d909      	bls.n	9000e36a <prvIdleTask+0x7e>
				taskYIELD();
9000e356:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
9000e35a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
9000e35e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
9000e362:	f3bf 8f4f 	dsb	sy
9000e366:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
9000e36a:	f7f2 f919 	bl	900005a0 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
9000e36e:	e7c2      	b.n	9000e2f6 <prvIdleTask+0xa>
				vPortFree( pxTCB );
9000e370:	4640      	mov	r0, r8
9000e372:	f7fe fbe3 	bl	9000cb3c <vPortFree>
9000e376:	e7be      	b.n	9000e2f6 <prvIdleTask+0xa>
9000e378:	24024cd4 	.word	0x24024cd4
9000e37c:	24024cd8 	.word	0x24024cd8
9000e380:	24024cbc 	.word	0x24024cbc
9000e384:	24024d30 	.word	0x24024d30

9000e388 <xTaskIncrementTick.part.0>:
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
9000e388:	4b49      	ldr	r3, [pc, #292]	@ (9000e4b0 <xTaskIncrementTick.part.0+0x128>)
BaseType_t xTaskIncrementTick( void )
9000e38a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
9000e38e:	681e      	ldr	r6, [r3, #0]
BaseType_t xTaskIncrementTick( void )
9000e390:	b083      	sub	sp, #12
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
9000e392:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
9000e394:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
9000e396:	2e00      	cmp	r6, #0
9000e398:	d03e      	beq.n	9000e418 <xTaskIncrementTick.part.0+0x90>
9000e39a:	4b46      	ldr	r3, [pc, #280]	@ (9000e4b4 <xTaskIncrementTick.part.0+0x12c>)
9000e39c:	9301      	str	r3, [sp, #4]
		if( xConstTickCount >= xNextTaskUnblockTime )
9000e39e:	681b      	ldr	r3, [r3, #0]
9000e3a0:	429e      	cmp	r6, r3
9000e3a2:	d346      	bcc.n	9000e432 <xTaskIncrementTick.part.0+0xaa>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
9000e3a4:	4f44      	ldr	r7, [pc, #272]	@ (9000e4b8 <xTaskIncrementTick.part.0+0x130>)
9000e3a6:	683b      	ldr	r3, [r7, #0]
9000e3a8:	681d      	ldr	r5, [r3, #0]
9000e3aa:	2d00      	cmp	r5, #0
9000e3ac:	d077      	beq.n	9000e49e <xTaskIncrementTick.part.0+0x116>
BaseType_t xSwitchRequired = pdFALSE;
9000e3ae:	2500      	movs	r5, #0
9000e3b0:	f8df 9114 	ldr.w	r9, [pc, #276]	@ 9000e4c8 <xTaskIncrementTick.part.0+0x140>
9000e3b4:	f8df a114 	ldr.w	sl, [pc, #276]	@ 9000e4cc <xTaskIncrementTick.part.0+0x144>
					prvAddTaskToReadyList( pxTCB );
9000e3b8:	f8df 8114 	ldr.w	r8, [pc, #276]	@ 9000e4d0 <xTaskIncrementTick.part.0+0x148>
9000e3bc:	e020      	b.n	9000e400 <xTaskIncrementTick.part.0+0x78>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
9000e3be:	f7fe fc59 	bl	9000cc74 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
9000e3c2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
9000e3c4:	f104 0018 	add.w	r0, r4, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
9000e3c8:	b10b      	cbz	r3, 9000e3ce <xTaskIncrementTick.part.0+0x46>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
9000e3ca:	f7fe fc53 	bl	9000cc74 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
9000e3ce:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
9000e3d0:	4659      	mov	r1, fp
9000e3d2:	f8d8 2000 	ldr.w	r2, [r8]
9000e3d6:	eb03 0083 	add.w	r0, r3, r3, lsl #2
9000e3da:	4293      	cmp	r3, r2
9000e3dc:	eb09 0080 	add.w	r0, r9, r0, lsl #2
9000e3e0:	d901      	bls.n	9000e3e6 <xTaskIncrementTick.part.0+0x5e>
9000e3e2:	f8c8 3000 	str.w	r3, [r8]
9000e3e6:	f7fe fc1f 	bl	9000cc28 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
9000e3ea:	f8da 2000 	ldr.w	r2, [sl]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
9000e3ee:	683b      	ldr	r3, [r7, #0]
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
9000e3f0:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
9000e3f2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
9000e3f4:	681b      	ldr	r3, [r3, #0]
							xSwitchRequired = pdTRUE;
9000e3f6:	4291      	cmp	r1, r2
9000e3f8:	bf28      	it	cs
9000e3fa:	2501      	movcs	r5, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
9000e3fc:	2b00      	cmp	r3, #0
9000e3fe:	d052      	beq.n	9000e4a6 <xTaskIncrementTick.part.0+0x11e>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9000e400:	683b      	ldr	r3, [r7, #0]
9000e402:	68db      	ldr	r3, [r3, #12]
9000e404:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
9000e406:	6863      	ldr	r3, [r4, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
9000e408:	f104 0b04 	add.w	fp, r4, #4
					if( xConstTickCount < xItemValue )
9000e40c:	429e      	cmp	r6, r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
9000e40e:	4658      	mov	r0, fp
					if( xConstTickCount < xItemValue )
9000e410:	d2d5      	bcs.n	9000e3be <xTaskIncrementTick.part.0+0x36>
						xNextTaskUnblockTime = xItemValue;
9000e412:	9a01      	ldr	r2, [sp, #4]
9000e414:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
9000e416:	e011      	b.n	9000e43c <xTaskIncrementTick.part.0+0xb4>
			taskSWITCH_DELAYED_LISTS();
9000e418:	4b27      	ldr	r3, [pc, #156]	@ (9000e4b8 <xTaskIncrementTick.part.0+0x130>)
9000e41a:	681a      	ldr	r2, [r3, #0]
9000e41c:	6812      	ldr	r2, [r2, #0]
9000e41e:	b30a      	cbz	r2, 9000e464 <xTaskIncrementTick.part.0+0xdc>
9000e420:	f04f 0350 	mov.w	r3, #80	@ 0x50
9000e424:	f383 8811 	msr	BASEPRI, r3
9000e428:	f3bf 8f6f 	isb	sy
9000e42c:	f3bf 8f4f 	dsb	sy
9000e430:	e7fe      	b.n	9000e430 <xTaskIncrementTick.part.0+0xa8>
BaseType_t xSwitchRequired = pdFALSE;
9000e432:	2500      	movs	r5, #0
9000e434:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 9000e4c8 <xTaskIncrementTick.part.0+0x140>
9000e438:	f8df a090 	ldr.w	sl, [pc, #144]	@ 9000e4cc <xTaskIncrementTick.part.0+0x144>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
9000e43c:	f8da 3000 	ldr.w	r3, [sl]
			if( xYieldPending != pdFALSE )
9000e440:	491e      	ldr	r1, [pc, #120]	@ (9000e4bc <xTaskIncrementTick.part.0+0x134>)
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
9000e442:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000e444:	eb03 0383 	add.w	r3, r3, r3, lsl #2
9000e448:	009b      	lsls	r3, r3, #2
9000e44a:	f859 2003 	ldr.w	r2, [r9, r3]
			if( xYieldPending != pdFALSE )
9000e44e:	680b      	ldr	r3, [r1, #0]
				xSwitchRequired = pdTRUE;
9000e450:	2a02      	cmp	r2, #2
9000e452:	bf28      	it	cs
9000e454:	2501      	movcs	r5, #1
				xSwitchRequired = pdTRUE;
9000e456:	2b00      	cmp	r3, #0
}
9000e458:	bf0c      	ite	eq
9000e45a:	4628      	moveq	r0, r5
9000e45c:	2001      	movne	r0, #1
9000e45e:	b003      	add	sp, #12
9000e460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
9000e464:	4a16      	ldr	r2, [pc, #88]	@ (9000e4c0 <xTaskIncrementTick.part.0+0x138>)
9000e466:	6818      	ldr	r0, [r3, #0]
9000e468:	6811      	ldr	r1, [r2, #0]
9000e46a:	6019      	str	r1, [r3, #0]
9000e46c:	4915      	ldr	r1, [pc, #84]	@ (9000e4c4 <xTaskIncrementTick.part.0+0x13c>)
9000e46e:	6010      	str	r0, [r2, #0]
9000e470:	680a      	ldr	r2, [r1, #0]
9000e472:	3201      	adds	r2, #1
9000e474:	600a      	str	r2, [r1, #0]

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
9000e476:	681a      	ldr	r2, [r3, #0]
9000e478:	6812      	ldr	r2, [r2, #0]
9000e47a:	b93a      	cbnz	r2, 9000e48c <xTaskIncrementTick.part.0+0x104>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
9000e47c:	4b0d      	ldr	r3, [pc, #52]	@ (9000e4b4 <xTaskIncrementTick.part.0+0x12c>)
9000e47e:	461a      	mov	r2, r3
9000e480:	9301      	str	r3, [sp, #4]
9000e482:	f04f 33ff 	mov.w	r3, #4294967295
9000e486:	6013      	str	r3, [r2, #0]
9000e488:	4613      	mov	r3, r2
9000e48a:	e788      	b.n	9000e39e <xTaskIncrementTick.part.0+0x16>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9000e48c:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
9000e48e:	4a09      	ldr	r2, [pc, #36]	@ (9000e4b4 <xTaskIncrementTick.part.0+0x12c>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9000e490:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
9000e492:	9201      	str	r2, [sp, #4]
9000e494:	68db      	ldr	r3, [r3, #12]
9000e496:	685b      	ldr	r3, [r3, #4]
9000e498:	6013      	str	r3, [r2, #0]
9000e49a:	4613      	mov	r3, r2
	}
}
9000e49c:	e77f      	b.n	9000e39e <xTaskIncrementTick.part.0+0x16>
9000e49e:	f8df 9028 	ldr.w	r9, [pc, #40]	@ 9000e4c8 <xTaskIncrementTick.part.0+0x140>
9000e4a2:	f8df a028 	ldr.w	sl, [pc, #40]	@ 9000e4cc <xTaskIncrementTick.part.0+0x144>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
9000e4a6:	f04f 33ff 	mov.w	r3, #4294967295
9000e4aa:	9a01      	ldr	r2, [sp, #4]
9000e4ac:	6013      	str	r3, [r2, #0]
					break;
9000e4ae:	e7c5      	b.n	9000e43c <xTaskIncrementTick.part.0+0xb4>
9000e4b0:	24024cb8 	.word	0x24024cb8
9000e4b4:	24024c9c 	.word	0x24024c9c
9000e4b8:	24024d04 	.word	0x24024d04
9000e4bc:	24024ca8 	.word	0x24024ca8
9000e4c0:	24024d00 	.word	0x24024d00
9000e4c4:	24024ca4 	.word	0x24024ca4
9000e4c8:	24024d30 	.word	0x24024d30
9000e4cc:	24025190 	.word	0x24025190
9000e4d0:	24024cb4 	.word	0x24024cb4

9000e4d4 <xTaskResumeAll.part.0>:
BaseType_t xTaskResumeAll( void )
9000e4d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		--uxSchedulerSuspended;
9000e4d8:	4d43      	ldr	r5, [pc, #268]	@ (9000e5e8 <xTaskResumeAll.part.0+0x114>)
	taskENTER_CRITICAL();
9000e4da:	f7fe fc4b 	bl	9000cd74 <vPortEnterCritical>
		--uxSchedulerSuspended;
9000e4de:	682b      	ldr	r3, [r5, #0]
9000e4e0:	3b01      	subs	r3, #1
9000e4e2:	602b      	str	r3, [r5, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
9000e4e4:	682b      	ldr	r3, [r5, #0]
9000e4e6:	2b00      	cmp	r3, #0
9000e4e8:	d168      	bne.n	9000e5bc <xTaskResumeAll.part.0+0xe8>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
9000e4ea:	4b40      	ldr	r3, [pc, #256]	@ (9000e5ec <xTaskResumeAll.part.0+0x118>)
9000e4ec:	681b      	ldr	r3, [r3, #0]
9000e4ee:	2b00      	cmp	r3, #0
9000e4f0:	d064      	beq.n	9000e5bc <xTaskResumeAll.part.0+0xe8>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
9000e4f2:	4e3f      	ldr	r6, [pc, #252]	@ (9000e5f0 <xTaskResumeAll.part.0+0x11c>)
9000e4f4:	6833      	ldr	r3, [r6, #0]
9000e4f6:	2b00      	cmp	r3, #0
9000e4f8:	d073      	beq.n	9000e5e2 <xTaskResumeAll.part.0+0x10e>
9000e4fa:	4f3e      	ldr	r7, [pc, #248]	@ (9000e5f4 <xTaskResumeAll.part.0+0x120>)
9000e4fc:	f8df 9104 	ldr.w	r9, [pc, #260]	@ 9000e604 <xTaskResumeAll.part.0+0x130>
9000e500:	f8df 8104 	ldr.w	r8, [pc, #260]	@ 9000e608 <xTaskResumeAll.part.0+0x134>
9000e504:	f8df a104 	ldr.w	sl, [pc, #260]	@ 9000e60c <xTaskResumeAll.part.0+0x138>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9000e508:	68f3      	ldr	r3, [r6, #12]
9000e50a:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
9000e50e:	f10b 0404 	add.w	r4, fp, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
9000e512:	f10b 0018 	add.w	r0, fp, #24
9000e516:	f7fe fbad 	bl	9000cc74 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
9000e51a:	4620      	mov	r0, r4
9000e51c:	f7fe fbaa 	bl	9000cc74 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
9000e520:	f8db 202c 	ldr.w	r2, [fp, #44]	@ 0x2c
9000e524:	4621      	mov	r1, r4
9000e526:	683c      	ldr	r4, [r7, #0]
9000e528:	eb02 0082 	add.w	r0, r2, r2, lsl #2
9000e52c:	42a2      	cmp	r2, r4
9000e52e:	eb09 0080 	add.w	r0, r9, r0, lsl #2
9000e532:	d900      	bls.n	9000e536 <xTaskResumeAll.part.0+0x62>
9000e534:	603a      	str	r2, [r7, #0]
9000e536:	f7fe fb77 	bl	9000cc28 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
9000e53a:	f8d8 1000 	ldr.w	r1, [r8]
9000e53e:	f8db 202c 	ldr.w	r2, [fp, #44]	@ 0x2c
9000e542:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
9000e544:	429a      	cmp	r2, r3
9000e546:	d33f      	bcc.n	9000e5c8 <xTaskResumeAll.part.0+0xf4>
						xYieldPending = pdTRUE;
9000e548:	2301      	movs	r3, #1
9000e54a:	f8ca 3000 	str.w	r3, [sl]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
9000e54e:	6833      	ldr	r3, [r6, #0]
9000e550:	2b00      	cmp	r3, #0
9000e552:	d1d9      	bne.n	9000e508 <xTaskResumeAll.part.0+0x34>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
9000e554:	4b28      	ldr	r3, [pc, #160]	@ (9000e5f8 <xTaskResumeAll.part.0+0x124>)
9000e556:	681a      	ldr	r2, [r3, #0]
9000e558:	6812      	ldr	r2, [r2, #0]
9000e55a:	2a00      	cmp	r2, #0
9000e55c:	d03c      	beq.n	9000e5d8 <xTaskResumeAll.part.0+0x104>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9000e55e:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
9000e560:	4b26      	ldr	r3, [pc, #152]	@ (9000e5fc <xTaskResumeAll.part.0+0x128>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9000e562:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
9000e564:	68d2      	ldr	r2, [r2, #12]
9000e566:	6852      	ldr	r2, [r2, #4]
9000e568:	601a      	str	r2, [r3, #0]
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
9000e56a:	4e25      	ldr	r6, [pc, #148]	@ (9000e600 <xTaskResumeAll.part.0+0x12c>)
9000e56c:	6834      	ldr	r4, [r6, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
9000e56e:	b194      	cbz	r4, 9000e596 <xTaskResumeAll.part.0+0xc2>
								xYieldPending = pdTRUE;
9000e570:	2701      	movs	r7, #1
9000e572:	e006      	b.n	9000e582 <xTaskResumeAll.part.0+0xae>
9000e574:	f7ff ff08 	bl	9000e388 <xTaskIncrementTick.part.0>
							if( xTaskIncrementTick() != pdFALSE )
9000e578:	b108      	cbz	r0, 9000e57e <xTaskResumeAll.part.0+0xaa>
								xYieldPending = pdTRUE;
9000e57a:	f8ca 7000 	str.w	r7, [sl]
						} while( xPendedCounts > ( TickType_t ) 0U );
9000e57e:	3c01      	subs	r4, #1
9000e580:	d008      	beq.n	9000e594 <xTaskResumeAll.part.0+0xc0>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
9000e582:	682b      	ldr	r3, [r5, #0]
9000e584:	2b00      	cmp	r3, #0
9000e586:	d0f5      	beq.n	9000e574 <xTaskResumeAll.part.0+0xa0>
		++xPendedTicks;
9000e588:	6833      	ldr	r3, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
9000e58a:	3c01      	subs	r4, #1
		++xPendedTicks;
9000e58c:	f103 0301 	add.w	r3, r3, #1
9000e590:	6033      	str	r3, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
9000e592:	d1f6      	bne.n	9000e582 <xTaskResumeAll.part.0+0xae>
						xPendedTicks = 0;
9000e594:	6034      	str	r4, [r6, #0]
				if( xYieldPending != pdFALSE )
9000e596:	f8da 3000 	ldr.w	r3, [sl]
9000e59a:	b17b      	cbz	r3, 9000e5bc <xTaskResumeAll.part.0+0xe8>
					taskYIELD_IF_USING_PREEMPTION();
9000e59c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
9000e5a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
9000e5a4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
9000e5a8:	f3bf 8f4f 	dsb	sy
9000e5ac:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
9000e5b0:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
9000e5b2:	f7fe fc01 	bl	9000cdb8 <vPortExitCritical>
}
9000e5b6:	4620      	mov	r0, r4
9000e5b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
BaseType_t xAlreadyYielded = pdFALSE;
9000e5bc:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
9000e5be:	f7fe fbfb 	bl	9000cdb8 <vPortExitCritical>
}
9000e5c2:	4620      	mov	r0, r4
9000e5c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
9000e5c8:	6833      	ldr	r3, [r6, #0]
9000e5ca:	2b00      	cmp	r3, #0
9000e5cc:	d19c      	bne.n	9000e508 <xTaskResumeAll.part.0+0x34>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
9000e5ce:	4b0a      	ldr	r3, [pc, #40]	@ (9000e5f8 <xTaskResumeAll.part.0+0x124>)
9000e5d0:	681a      	ldr	r2, [r3, #0]
9000e5d2:	6812      	ldr	r2, [r2, #0]
9000e5d4:	2a00      	cmp	r2, #0
9000e5d6:	d1c2      	bne.n	9000e55e <xTaskResumeAll.part.0+0x8a>
		xNextTaskUnblockTime = portMAX_DELAY;
9000e5d8:	4b08      	ldr	r3, [pc, #32]	@ (9000e5fc <xTaskResumeAll.part.0+0x128>)
9000e5da:	f04f 32ff 	mov.w	r2, #4294967295
9000e5de:	601a      	str	r2, [r3, #0]
9000e5e0:	e7c3      	b.n	9000e56a <xTaskResumeAll.part.0+0x96>
9000e5e2:	f8df a028 	ldr.w	sl, [pc, #40]	@ 9000e60c <xTaskResumeAll.part.0+0x138>
9000e5e6:	e7c0      	b.n	9000e56a <xTaskResumeAll.part.0+0x96>
9000e5e8:	24024c98 	.word	0x24024c98
9000e5ec:	24024cbc 	.word	0x24024cbc
9000e5f0:	24024cec 	.word	0x24024cec
9000e5f4:	24024cb4 	.word	0x24024cb4
9000e5f8:	24024d04 	.word	0x24024d04
9000e5fc:	24024c9c 	.word	0x24024c9c
9000e600:	24024cac 	.word	0x24024cac
9000e604:	24024d30 	.word	0x24024d30
9000e608:	24025190 	.word	0x24025190
9000e60c:	24024ca8 	.word	0x24024ca8

9000e610 <xTaskCreateStatic>:
	{
9000e610:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
9000e614:	b083      	sub	sp, #12
9000e616:	4698      	mov	r8, r3
		configASSERT( puxStackBuffer != NULL );
9000e618:	e9dd 340b 	ldrd	r3, r4, [sp, #44]	@ 0x2c
9000e61c:	b1bb      	cbz	r3, 9000e64e <xTaskCreateStatic+0x3e>
		configASSERT( pxTaskBuffer != NULL );
9000e61e:	b16c      	cbz	r4, 9000e63c <xTaskCreateStatic+0x2c>
			volatile size_t xSize = sizeof( StaticTask_t );
9000e620:	2360      	movs	r3, #96	@ 0x60
9000e622:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( TCB_t ) );
9000e624:	9b01      	ldr	r3, [sp, #4]
9000e626:	2b60      	cmp	r3, #96	@ 0x60
9000e628:	d01a      	beq.n	9000e660 <xTaskCreateStatic+0x50>
9000e62a:	f04f 0350 	mov.w	r3, #80	@ 0x50
9000e62e:	f383 8811 	msr	BASEPRI, r3
9000e632:	f3bf 8f6f 	isb	sy
9000e636:	f3bf 8f4f 	dsb	sy
9000e63a:	e7fe      	b.n	9000e63a <xTaskCreateStatic+0x2a>
9000e63c:	f04f 0350 	mov.w	r3, #80	@ 0x50
9000e640:	f383 8811 	msr	BASEPRI, r3
9000e644:	f3bf 8f6f 	isb	sy
9000e648:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
9000e64c:	e7fe      	b.n	9000e64c <xTaskCreateStatic+0x3c>
9000e64e:	f04f 0350 	mov.w	r3, #80	@ 0x50
9000e652:	f383 8811 	msr	BASEPRI, r3
9000e656:	f3bf 8f6f 	isb	sy
9000e65a:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
9000e65e:	e7fe      	b.n	9000e65e <xTaskCreateStatic+0x4e>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
9000e660:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
9000e662:	0096      	lsls	r6, r2, #2
9000e664:	4607      	mov	r7, r0
9000e666:	460d      	mov	r5, r1
9000e668:	4618      	mov	r0, r3
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
9000e66a:	6323      	str	r3, [r4, #48]	@ 0x30
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
9000e66c:	9b01      	ldr	r3, [sp, #4]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
9000e66e:	2302      	movs	r3, #2
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
9000e670:	4632      	mov	r2, r6
9000e672:	21a5      	movs	r1, #165	@ 0xa5
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
9000e674:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
9000e678:	f014 fd68 	bl	9002314c <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
9000e67c:	1f32      	subs	r2, r6, #4
9000e67e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
9000e680:	4413      	add	r3, r2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
9000e682:	f023 0607 	bic.w	r6, r3, #7
	if( pcName != NULL )
9000e686:	2d00      	cmp	r5, #0
9000e688:	d068      	beq.n	9000e75c <xTaskCreateStatic+0x14c>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000e68a:	782b      	ldrb	r3, [r5, #0]
9000e68c:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
			if( pcName[ x ] == ( char ) 0x00 )
9000e690:	2b00      	cmp	r3, #0
9000e692:	d036      	beq.n	9000e702 <xTaskCreateStatic+0xf2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000e694:	786b      	ldrb	r3, [r5, #1]
9000e696:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
			if( pcName[ x ] == ( char ) 0x00 )
9000e69a:	b393      	cbz	r3, 9000e702 <xTaskCreateStatic+0xf2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000e69c:	78ab      	ldrb	r3, [r5, #2]
9000e69e:	f884 3036 	strb.w	r3, [r4, #54]	@ 0x36
			if( pcName[ x ] == ( char ) 0x00 )
9000e6a2:	b373      	cbz	r3, 9000e702 <xTaskCreateStatic+0xf2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000e6a4:	78eb      	ldrb	r3, [r5, #3]
9000e6a6:	f884 3037 	strb.w	r3, [r4, #55]	@ 0x37
			if( pcName[ x ] == ( char ) 0x00 )
9000e6aa:	b353      	cbz	r3, 9000e702 <xTaskCreateStatic+0xf2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000e6ac:	792b      	ldrb	r3, [r5, #4]
9000e6ae:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
			if( pcName[ x ] == ( char ) 0x00 )
9000e6b2:	b333      	cbz	r3, 9000e702 <xTaskCreateStatic+0xf2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000e6b4:	796b      	ldrb	r3, [r5, #5]
9000e6b6:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
			if( pcName[ x ] == ( char ) 0x00 )
9000e6ba:	b313      	cbz	r3, 9000e702 <xTaskCreateStatic+0xf2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000e6bc:	79ab      	ldrb	r3, [r5, #6]
9000e6be:	f884 303a 	strb.w	r3, [r4, #58]	@ 0x3a
			if( pcName[ x ] == ( char ) 0x00 )
9000e6c2:	b1f3      	cbz	r3, 9000e702 <xTaskCreateStatic+0xf2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000e6c4:	79eb      	ldrb	r3, [r5, #7]
9000e6c6:	f884 303b 	strb.w	r3, [r4, #59]	@ 0x3b
			if( pcName[ x ] == ( char ) 0x00 )
9000e6ca:	b1d3      	cbz	r3, 9000e702 <xTaskCreateStatic+0xf2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000e6cc:	7a2b      	ldrb	r3, [r5, #8]
9000e6ce:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
			if( pcName[ x ] == ( char ) 0x00 )
9000e6d2:	b1b3      	cbz	r3, 9000e702 <xTaskCreateStatic+0xf2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000e6d4:	7a6b      	ldrb	r3, [r5, #9]
9000e6d6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
			if( pcName[ x ] == ( char ) 0x00 )
9000e6da:	b193      	cbz	r3, 9000e702 <xTaskCreateStatic+0xf2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000e6dc:	7aab      	ldrb	r3, [r5, #10]
9000e6de:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
			if( pcName[ x ] == ( char ) 0x00 )
9000e6e2:	b173      	cbz	r3, 9000e702 <xTaskCreateStatic+0xf2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000e6e4:	7aeb      	ldrb	r3, [r5, #11]
9000e6e6:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
			if( pcName[ x ] == ( char ) 0x00 )
9000e6ea:	b153      	cbz	r3, 9000e702 <xTaskCreateStatic+0xf2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000e6ec:	7b2b      	ldrb	r3, [r5, #12]
9000e6ee:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
			if( pcName[ x ] == ( char ) 0x00 )
9000e6f2:	b133      	cbz	r3, 9000e702 <xTaskCreateStatic+0xf2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000e6f4:	7b6b      	ldrb	r3, [r5, #13]
9000e6f6:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
			if( pcName[ x ] == ( char ) 0x00 )
9000e6fa:	b113      	cbz	r3, 9000e702 <xTaskCreateStatic+0xf2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000e6fc:	7bab      	ldrb	r3, [r5, #14]
9000e6fe:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
9000e702:	2300      	movs	r3, #0
9000e704:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
9000e708:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
		pxNewTCB->uxMutexesHeld = 0;
9000e70a:	f04f 0900 	mov.w	r9, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
9000e70e:	1d20      	adds	r0, r4, #4
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
9000e710:	2d37      	cmp	r5, #55	@ 0x37
		pxNewTCB->uxMutexesHeld = 0;
9000e712:	f8c4 9050 	str.w	r9, [r4, #80]	@ 0x50
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
9000e716:	bf28      	it	cs
9000e718:	2537      	movcs	r5, #55	@ 0x37
	pxNewTCB->uxPriority = uxPriority;
9000e71a:	62e5      	str	r5, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
9000e71c:	64e5      	str	r5, [r4, #76]	@ 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
9000e71e:	f1c5 0538 	rsb	r5, r5, #56	@ 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
9000e722:	f7fe fa7d 	bl	9000cc20 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
9000e726:	f104 0018 	add.w	r0, r4, #24
9000e72a:	f7fe fa79 	bl	9000cc20 <vListInitialiseItem>
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
9000e72e:	4642      	mov	r2, r8
9000e730:	4639      	mov	r1, r7
		pxNewTCB->ulNotifiedValue = 0;
9000e732:	f8c4 9058 	str.w	r9, [r4, #88]	@ 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
9000e736:	4630      	mov	r0, r6
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
9000e738:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
9000e73a:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
9000e73c:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->pxTaskTag = NULL;
9000e73e:	f8c4 9054 	str.w	r9, [r4, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
9000e742:	f884 905c 	strb.w	r9, [r4, #92]	@ 0x5c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
9000e746:	f7fe fae7 	bl	9000cd18 <pxPortInitialiseStack>
9000e74a:	4603      	mov	r3, r0
			prvAddNewTaskToReadyList( pxNewTCB );
9000e74c:	4620      	mov	r0, r4
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
9000e74e:	6023      	str	r3, [r4, #0]
			prvAddNewTaskToReadyList( pxNewTCB );
9000e750:	f7ff fd44 	bl	9000e1dc <prvAddNewTaskToReadyList>
	}
9000e754:	4620      	mov	r0, r4
9000e756:	b003      	add	sp, #12
9000e758:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
9000e75c:	f884 5034 	strb.w	r5, [r4, #52]	@ 0x34
9000e760:	e7d2      	b.n	9000e708 <xTaskCreateStatic+0xf8>
9000e762:	bf00      	nop

9000e764 <xTaskCreate>:
	{
9000e764:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
9000e768:	0096      	lsls	r6, r2, #2
	{
9000e76a:	4680      	mov	r8, r0
9000e76c:	460d      	mov	r5, r1
9000e76e:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
9000e770:	4630      	mov	r0, r6
9000e772:	f7fe f927 	bl	9000c9c4 <pvPortMalloc>
			if( pxStack != NULL )
9000e776:	2800      	cmp	r0, #0
9000e778:	d07f      	beq.n	9000e87a <xTaskCreate+0x116>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
9000e77a:	4607      	mov	r7, r0
9000e77c:	2060      	movs	r0, #96	@ 0x60
9000e77e:	f7fe f921 	bl	9000c9c4 <pvPortMalloc>
				if( pxNewTCB != NULL )
9000e782:	4604      	mov	r4, r0
9000e784:	2800      	cmp	r0, #0
9000e786:	d075      	beq.n	9000e874 <xTaskCreate+0x110>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
9000e788:	2300      	movs	r3, #0
					pxNewTCB->pxStack = pxStack;
9000e78a:	6307      	str	r7, [r0, #48]	@ 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
9000e78c:	4632      	mov	r2, r6
9000e78e:	4638      	mov	r0, r7
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
9000e790:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
9000e794:	21a5      	movs	r1, #165	@ 0xa5
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
9000e796:	3e04      	subs	r6, #4
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
9000e798:	f014 fcd8 	bl	9002314c <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
9000e79c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
9000e79e:	441e      	add	r6, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
9000e7a0:	f026 0607 	bic.w	r6, r6, #7
	if( pcName != NULL )
9000e7a4:	2d00      	cmp	r5, #0
9000e7a6:	d06c      	beq.n	9000e882 <xTaskCreate+0x11e>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000e7a8:	782b      	ldrb	r3, [r5, #0]
9000e7aa:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
			if( pcName[ x ] == ( char ) 0x00 )
9000e7ae:	2b00      	cmp	r3, #0
9000e7b0:	d036      	beq.n	9000e820 <xTaskCreate+0xbc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000e7b2:	786b      	ldrb	r3, [r5, #1]
9000e7b4:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
			if( pcName[ x ] == ( char ) 0x00 )
9000e7b8:	b393      	cbz	r3, 9000e820 <xTaskCreate+0xbc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000e7ba:	78ab      	ldrb	r3, [r5, #2]
9000e7bc:	f884 3036 	strb.w	r3, [r4, #54]	@ 0x36
			if( pcName[ x ] == ( char ) 0x00 )
9000e7c0:	b373      	cbz	r3, 9000e820 <xTaskCreate+0xbc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000e7c2:	78eb      	ldrb	r3, [r5, #3]
9000e7c4:	f884 3037 	strb.w	r3, [r4, #55]	@ 0x37
			if( pcName[ x ] == ( char ) 0x00 )
9000e7c8:	b353      	cbz	r3, 9000e820 <xTaskCreate+0xbc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000e7ca:	792b      	ldrb	r3, [r5, #4]
9000e7cc:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
			if( pcName[ x ] == ( char ) 0x00 )
9000e7d0:	b333      	cbz	r3, 9000e820 <xTaskCreate+0xbc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000e7d2:	796b      	ldrb	r3, [r5, #5]
9000e7d4:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
			if( pcName[ x ] == ( char ) 0x00 )
9000e7d8:	b313      	cbz	r3, 9000e820 <xTaskCreate+0xbc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000e7da:	79ab      	ldrb	r3, [r5, #6]
9000e7dc:	f884 303a 	strb.w	r3, [r4, #58]	@ 0x3a
			if( pcName[ x ] == ( char ) 0x00 )
9000e7e0:	b1f3      	cbz	r3, 9000e820 <xTaskCreate+0xbc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000e7e2:	79eb      	ldrb	r3, [r5, #7]
9000e7e4:	f884 303b 	strb.w	r3, [r4, #59]	@ 0x3b
			if( pcName[ x ] == ( char ) 0x00 )
9000e7e8:	b1d3      	cbz	r3, 9000e820 <xTaskCreate+0xbc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000e7ea:	7a2b      	ldrb	r3, [r5, #8]
9000e7ec:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
			if( pcName[ x ] == ( char ) 0x00 )
9000e7f0:	b1b3      	cbz	r3, 9000e820 <xTaskCreate+0xbc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000e7f2:	7a6b      	ldrb	r3, [r5, #9]
9000e7f4:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
			if( pcName[ x ] == ( char ) 0x00 )
9000e7f8:	b193      	cbz	r3, 9000e820 <xTaskCreate+0xbc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000e7fa:	7aab      	ldrb	r3, [r5, #10]
9000e7fc:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
			if( pcName[ x ] == ( char ) 0x00 )
9000e800:	b173      	cbz	r3, 9000e820 <xTaskCreate+0xbc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000e802:	7aeb      	ldrb	r3, [r5, #11]
9000e804:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
			if( pcName[ x ] == ( char ) 0x00 )
9000e808:	b153      	cbz	r3, 9000e820 <xTaskCreate+0xbc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000e80a:	7b2b      	ldrb	r3, [r5, #12]
9000e80c:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
			if( pcName[ x ] == ( char ) 0x00 )
9000e810:	b133      	cbz	r3, 9000e820 <xTaskCreate+0xbc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000e812:	7b6b      	ldrb	r3, [r5, #13]
9000e814:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
			if( pcName[ x ] == ( char ) 0x00 )
9000e818:	b113      	cbz	r3, 9000e820 <xTaskCreate+0xbc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000e81a:	7bab      	ldrb	r3, [r5, #14]
9000e81c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
9000e820:	2300      	movs	r3, #0
9000e822:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
9000e826:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
9000e828:	2700      	movs	r7, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
9000e82a:	1d20      	adds	r0, r4, #4
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
9000e82c:	2d37      	cmp	r5, #55	@ 0x37
		pxNewTCB->uxMutexesHeld = 0;
9000e82e:	6527      	str	r7, [r4, #80]	@ 0x50
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
9000e830:	bf28      	it	cs
9000e832:	2537      	movcs	r5, #55	@ 0x37
	pxNewTCB->uxPriority = uxPriority;
9000e834:	62e5      	str	r5, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
9000e836:	64e5      	str	r5, [r4, #76]	@ 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
9000e838:	f1c5 0538 	rsb	r5, r5, #56	@ 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
9000e83c:	f7fe f9f0 	bl	9000cc20 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
9000e840:	f104 0018 	add.w	r0, r4, #24
9000e844:	f7fe f9ec 	bl	9000cc20 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
9000e848:	65a7      	str	r7, [r4, #88]	@ 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
9000e84a:	464a      	mov	r2, r9
9000e84c:	4641      	mov	r1, r8
9000e84e:	4630      	mov	r0, r6
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
9000e850:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
9000e852:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
9000e854:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->pxTaskTag = NULL;
9000e856:	6567      	str	r7, [r4, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
9000e858:	f884 705c 	strb.w	r7, [r4, #92]	@ 0x5c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
9000e85c:	f7fe fa5c 	bl	9000cd18 <pxPortInitialiseStack>
	if( pxCreatedTask != NULL )
9000e860:	9b09      	ldr	r3, [sp, #36]	@ 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
9000e862:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
9000e864:	b103      	cbz	r3, 9000e868 <xTaskCreate+0x104>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
9000e866:	601c      	str	r4, [r3, #0]
			prvAddNewTaskToReadyList( pxNewTCB );
9000e868:	4620      	mov	r0, r4
9000e86a:	f7ff fcb7 	bl	9000e1dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
9000e86e:	2001      	movs	r0, #1
	}
9000e870:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
9000e874:	4638      	mov	r0, r7
9000e876:	f7fe f961 	bl	9000cb3c <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
9000e87a:	f04f 30ff 	mov.w	r0, #4294967295
	}
9000e87e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
9000e882:	f884 5034 	strb.w	r5, [r4, #52]	@ 0x34
9000e886:	e7ce      	b.n	9000e826 <xTaskCreate+0xc2>

9000e888 <vTaskDelay>:
	{
9000e888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
9000e88a:	b950      	cbnz	r0, 9000e8a2 <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
9000e88c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
9000e890:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
9000e894:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
9000e898:	f3bf 8f4f 	dsb	sy
9000e89c:	f3bf 8f6f 	isb	sy
	}
9000e8a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			configASSERT( uxSchedulerSuspended == 0 );
9000e8a2:	4d1e      	ldr	r5, [pc, #120]	@ (9000e91c <vTaskDelay+0x94>)
9000e8a4:	682b      	ldr	r3, [r5, #0]
9000e8a6:	b143      	cbz	r3, 9000e8ba <vTaskDelay+0x32>
9000e8a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
9000e8ac:	f383 8811 	msr	BASEPRI, r3
9000e8b0:	f3bf 8f6f 	isb	sy
9000e8b4:	f3bf 8f4f 	dsb	sy
9000e8b8:	e7fe      	b.n	9000e8b8 <vTaskDelay+0x30>
	++uxSchedulerSuspended;
9000e8ba:	682b      	ldr	r3, [r5, #0]
9000e8bc:	4604      	mov	r4, r0
9000e8be:	3301      	adds	r3, #1
9000e8c0:	602b      	str	r3, [r5, #0]
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
9000e8c2:	4b17      	ldr	r3, [pc, #92]	@ (9000e920 <vTaskDelay+0x98>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
9000e8c4:	4e17      	ldr	r6, [pc, #92]	@ (9000e924 <vTaskDelay+0x9c>)
const TickType_t xConstTickCount = xTickCount;
9000e8c6:	681f      	ldr	r7, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
9000e8c8:	6830      	ldr	r0, [r6, #0]
9000e8ca:	3004      	adds	r0, #4
9000e8cc:	f7fe f9d2 	bl	9000cc74 <uxListRemove>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
9000e8d0:	19e4      	adds	r4, r4, r7

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
9000e8d2:	6833      	ldr	r3, [r6, #0]
9000e8d4:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
9000e8d6:	d315      	bcc.n	9000e904 <vTaskDelay+0x7c>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
9000e8d8:	4b13      	ldr	r3, [pc, #76]	@ (9000e928 <vTaskDelay+0xa0>)
9000e8da:	6818      	ldr	r0, [r3, #0]
9000e8dc:	6831      	ldr	r1, [r6, #0]
9000e8de:	3104      	adds	r1, #4
9000e8e0:	f7fe f9b0 	bl	9000cc44 <vListInsert>
	configASSERT( uxSchedulerSuspended );
9000e8e4:	682b      	ldr	r3, [r5, #0]
9000e8e6:	b943      	cbnz	r3, 9000e8fa <vTaskDelay+0x72>
9000e8e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
9000e8ec:	f383 8811 	msr	BASEPRI, r3
9000e8f0:	f3bf 8f6f 	isb	sy
9000e8f4:	f3bf 8f4f 	dsb	sy
9000e8f8:	e7fe      	b.n	9000e8f8 <vTaskDelay+0x70>
9000e8fa:	f7ff fdeb 	bl	9000e4d4 <xTaskResumeAll.part.0>
		if( xAlreadyYielded == pdFALSE )
9000e8fe:	2800      	cmp	r0, #0
9000e900:	d0c4      	beq.n	9000e88c <vTaskDelay+0x4>
	}
9000e902:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
9000e904:	4b09      	ldr	r3, [pc, #36]	@ (9000e92c <vTaskDelay+0xa4>)
9000e906:	6818      	ldr	r0, [r3, #0]
9000e908:	6831      	ldr	r1, [r6, #0]
9000e90a:	3104      	adds	r1, #4
9000e90c:	f7fe f99a 	bl	9000cc44 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
9000e910:	4b07      	ldr	r3, [pc, #28]	@ (9000e930 <vTaskDelay+0xa8>)
9000e912:	681a      	ldr	r2, [r3, #0]
9000e914:	4294      	cmp	r4, r2
9000e916:	d2e5      	bcs.n	9000e8e4 <vTaskDelay+0x5c>
				{
					xNextTaskUnblockTime = xTimeToWake;
9000e918:	601c      	str	r4, [r3, #0]
9000e91a:	e7e3      	b.n	9000e8e4 <vTaskDelay+0x5c>
9000e91c:	24024c98 	.word	0x24024c98
9000e920:	24024cb8 	.word	0x24024cb8
9000e924:	24025190 	.word	0x24025190
9000e928:	24024d00 	.word	0x24024d00
9000e92c:	24024d04 	.word	0x24024d04
9000e930:	24024c9c 	.word	0x24024c9c

9000e934 <vTaskStartScheduler>:
{
9000e934:	b570      	push	{r4, r5, r6, lr}
9000e936:	b084      	sub	sp, #16
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
9000e938:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
9000e93a:	4668      	mov	r0, sp
9000e93c:	aa02      	add	r2, sp, #8
9000e93e:	a901      	add	r1, sp, #4
		StackType_t *pxIdleTaskStackBuffer = NULL;
9000e940:	e9cd 4400 	strd	r4, r4, [sp]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
9000e944:	f7fe f820 	bl	9000c988 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
9000e948:	9d00      	ldr	r5, [sp, #0]
9000e94a:	e9dd 0601 	ldrd	r0, r6, [sp, #4]
		configASSERT( puxStackBuffer != NULL );
9000e94e:	b1b8      	cbz	r0, 9000e980 <vTaskStartScheduler+0x4c>
		configASSERT( pxTaskBuffer != NULL );
9000e950:	b16d      	cbz	r5, 9000e96e <vTaskStartScheduler+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
9000e952:	2260      	movs	r2, #96	@ 0x60
9000e954:	9203      	str	r2, [sp, #12]
			configASSERT( xSize == sizeof( TCB_t ) );
9000e956:	9a03      	ldr	r2, [sp, #12]
9000e958:	2a60      	cmp	r2, #96	@ 0x60
9000e95a:	d01a      	beq.n	9000e992 <vTaskStartScheduler+0x5e>
9000e95c:	f04f 0350 	mov.w	r3, #80	@ 0x50
9000e960:	f383 8811 	msr	BASEPRI, r3
9000e964:	f3bf 8f6f 	isb	sy
9000e968:	f3bf 8f4f 	dsb	sy
9000e96c:	e7fe      	b.n	9000e96c <vTaskStartScheduler+0x38>
9000e96e:	f04f 0350 	mov.w	r3, #80	@ 0x50
9000e972:	f383 8811 	msr	BASEPRI, r3
9000e976:	f3bf 8f6f 	isb	sy
9000e97a:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
9000e97e:	e7fe      	b.n	9000e97e <vTaskStartScheduler+0x4a>
9000e980:	f04f 0350 	mov.w	r3, #80	@ 0x50
9000e984:	f383 8811 	msr	BASEPRI, r3
9000e988:	f3bf 8f6f 	isb	sy
9000e98c:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
9000e990:	e7fe      	b.n	9000e990 <vTaskStartScheduler+0x5c>
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
9000e992:	00b6      	lsls	r6, r6, #2
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
9000e994:	2302      	movs	r3, #2
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
9000e996:	21a5      	movs	r1, #165	@ 0xa5
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
9000e998:	6328      	str	r0, [r5, #48]	@ 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
9000e99a:	4632      	mov	r2, r6
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
9000e99c:	f885 305d 	strb.w	r3, [r5, #93]	@ 0x5d
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
9000e9a0:	9b03      	ldr	r3, [sp, #12]
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
9000e9a2:	f014 fbd3 	bl	9002314c <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
9000e9a6:	1f33      	subs	r3, r6, #4
9000e9a8:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000e9aa:	492a      	ldr	r1, [pc, #168]	@ (9000ea54 <vTaskStartScheduler+0x120>)
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
9000e9ac:	1d28      	adds	r0, r5, #4
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
9000e9ae:	441a      	add	r2, r3
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000e9b0:	f885 4038 	strb.w	r4, [r5, #56]	@ 0x38
9000e9b4:	6369      	str	r1, [r5, #52]	@ 0x34
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
9000e9b6:	f885 4043 	strb.w	r4, [r5, #67]	@ 0x43
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
9000e9ba:	f022 0607 	bic.w	r6, r2, #7
	pxNewTCB->uxPriority = uxPriority;
9000e9be:	62ec      	str	r4, [r5, #44]	@ 0x2c
		pxNewTCB->uxMutexesHeld = 0;
9000e9c0:	e9c5 4413 	strd	r4, r4, [r5, #76]	@ 0x4c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
9000e9c4:	f7fe f92c 	bl	9000cc20 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
9000e9c8:	f105 0018 	add.w	r0, r5, #24
9000e9cc:	f7fe f928 	bl	9000cc20 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
9000e9d0:	2338      	movs	r3, #56	@ 0x38
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
9000e9d2:	4622      	mov	r2, r4
9000e9d4:	4920      	ldr	r1, [pc, #128]	@ (9000ea58 <vTaskStartScheduler+0x124>)
		pxNewTCB->ulNotifiedValue = 0;
9000e9d6:	65ac      	str	r4, [r5, #88]	@ 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
9000e9d8:	4630      	mov	r0, r6
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
9000e9da:	61ab      	str	r3, [r5, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
9000e9dc:	612d      	str	r5, [r5, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
9000e9de:	626d      	str	r5, [r5, #36]	@ 0x24
		pxNewTCB->pxTaskTag = NULL;
9000e9e0:	656c      	str	r4, [r5, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
9000e9e2:	f885 405c 	strb.w	r4, [r5, #92]	@ 0x5c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
9000e9e6:	f7fe f997 	bl	9000cd18 <pxPortInitialiseStack>
9000e9ea:	4603      	mov	r3, r0
			prvAddNewTaskToReadyList( pxNewTCB );
9000e9ec:	4628      	mov	r0, r5
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
9000e9ee:	602b      	str	r3, [r5, #0]
			prvAddNewTaskToReadyList( pxNewTCB );
9000e9f0:	f7ff fbf4 	bl	9000e1dc <prvAddNewTaskToReadyList>
			xReturn = xTimerCreateTimerTask();
9000e9f4:	f000 fc8c 	bl	9000f310 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
9000e9f8:	2801      	cmp	r0, #1
9000e9fa:	d00c      	beq.n	9000ea16 <vTaskStartScheduler+0xe2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
9000e9fc:	3001      	adds	r0, #1
9000e9fe:	d001      	beq.n	9000ea04 <vTaskStartScheduler+0xd0>
}
9000ea00:	b004      	add	sp, #16
9000ea02:	bd70      	pop	{r4, r5, r6, pc}
9000ea04:	f04f 0350 	mov.w	r3, #80	@ 0x50
9000ea08:	f383 8811 	msr	BASEPRI, r3
9000ea0c:	f3bf 8f6f 	isb	sy
9000ea10:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
9000ea14:	e7fe      	b.n	9000ea14 <vTaskStartScheduler+0xe0>
9000ea16:	f04f 0350 	mov.w	r3, #80	@ 0x50
9000ea1a:	f383 8811 	msr	BASEPRI, r3
9000ea1e:	f3bf 8f6f 	isb	sy
9000ea22:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
9000ea26:	4b0d      	ldr	r3, [pc, #52]	@ (9000ea5c <vTaskStartScheduler+0x128>)
9000ea28:	f04f 32ff 	mov.w	r2, #4294967295
		xSchedulerRunning = pdTRUE;
9000ea2c:	490c      	ldr	r1, [pc, #48]	@ (9000ea60 <vTaskStartScheduler+0x12c>)
		xNextTaskUnblockTime = portMAX_DELAY;
9000ea2e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
9000ea30:	4b0c      	ldr	r3, [pc, #48]	@ (9000ea64 <vTaskStartScheduler+0x130>)
		traceTASK_SWITCHED_IN();
9000ea32:	4a0d      	ldr	r2, [pc, #52]	@ (9000ea68 <vTaskStartScheduler+0x134>)
		xSchedulerRunning = pdTRUE;
9000ea34:	6008      	str	r0, [r1, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
9000ea36:	601c      	str	r4, [r3, #0]
		traceTASK_SWITCHED_IN();
9000ea38:	6813      	ldr	r3, [r2, #0]
		if( xTask == NULL )
9000ea3a:	b143      	cbz	r3, 9000ea4e <vTaskStartScheduler+0x11a>
		if( xTCB->pxTaskTag != NULL )
9000ea3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
9000ea3e:	b10b      	cbz	r3, 9000ea44 <vTaskStartScheduler+0x110>
			xReturn = xTCB->pxTaskTag( pvParameter );
9000ea40:	2000      	movs	r0, #0
9000ea42:	4798      	blx	r3
}
9000ea44:	b004      	add	sp, #16
9000ea46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		if( xPortStartScheduler() != pdFALSE )
9000ea4a:	f7fe ba25 	b.w	9000ce98 <xPortStartScheduler>
			xTCB = pxCurrentTCB;
9000ea4e:	6813      	ldr	r3, [r2, #0]
9000ea50:	e7f4      	b.n	9000ea3c <vTaskStartScheduler+0x108>
9000ea52:	bf00      	nop
9000ea54:	454c4449 	.word	0x454c4449
9000ea58:	9000e2ed 	.word	0x9000e2ed
9000ea5c:	24024c9c 	.word	0x24024c9c
9000ea60:	24024cb0 	.word	0x24024cb0
9000ea64:	24024cb8 	.word	0x24024cb8
9000ea68:	24025190 	.word	0x24025190

9000ea6c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
9000ea6c:	4a02      	ldr	r2, [pc, #8]	@ (9000ea78 <vTaskSuspendAll+0xc>)
9000ea6e:	6813      	ldr	r3, [r2, #0]
9000ea70:	3301      	adds	r3, #1
9000ea72:	6013      	str	r3, [r2, #0]
}
9000ea74:	4770      	bx	lr
9000ea76:	bf00      	nop
9000ea78:	24024c98 	.word	0x24024c98

9000ea7c <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
9000ea7c:	4b06      	ldr	r3, [pc, #24]	@ (9000ea98 <xTaskResumeAll+0x1c>)
9000ea7e:	681b      	ldr	r3, [r3, #0]
9000ea80:	b943      	cbnz	r3, 9000ea94 <xTaskResumeAll+0x18>
9000ea82:	f04f 0350 	mov.w	r3, #80	@ 0x50
9000ea86:	f383 8811 	msr	BASEPRI, r3
9000ea8a:	f3bf 8f6f 	isb	sy
9000ea8e:	f3bf 8f4f 	dsb	sy
9000ea92:	e7fe      	b.n	9000ea92 <xTaskResumeAll+0x16>
9000ea94:	f7ff bd1e 	b.w	9000e4d4 <xTaskResumeAll.part.0>
9000ea98:	24024c98 	.word	0x24024c98

9000ea9c <xTaskGetTickCount>:
		xTicks = xTickCount;
9000ea9c:	4b01      	ldr	r3, [pc, #4]	@ (9000eaa4 <xTaskGetTickCount+0x8>)
9000ea9e:	6818      	ldr	r0, [r3, #0]
}
9000eaa0:	4770      	bx	lr
9000eaa2:	bf00      	nop
9000eaa4:	24024cb8 	.word	0x24024cb8

9000eaa8 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
9000eaa8:	4b05      	ldr	r3, [pc, #20]	@ (9000eac0 <xTaskIncrementTick+0x18>)
9000eaaa:	681b      	ldr	r3, [r3, #0]
9000eaac:	b90b      	cbnz	r3, 9000eab2 <xTaskIncrementTick+0xa>
9000eaae:	f7ff bc6b 	b.w	9000e388 <xTaskIncrementTick.part.0>
		++xPendedTicks;
9000eab2:	4a04      	ldr	r2, [pc, #16]	@ (9000eac4 <xTaskIncrementTick+0x1c>)
}
9000eab4:	2000      	movs	r0, #0
		++xPendedTicks;
9000eab6:	6813      	ldr	r3, [r2, #0]
9000eab8:	3301      	adds	r3, #1
9000eaba:	6013      	str	r3, [r2, #0]
}
9000eabc:	4770      	bx	lr
9000eabe:	bf00      	nop
9000eac0:	24024c98 	.word	0x24024c98
9000eac4:	24024cac 	.word	0x24024cac

9000eac8 <vTaskSetApplicationTaskTag>:
	{
9000eac8:	b538      	push	{r3, r4, r5, lr}
9000eaca:	460d      	mov	r5, r1
		if( xTask == NULL )
9000eacc:	b138      	cbz	r0, 9000eade <vTaskSetApplicationTaskTag+0x16>
9000eace:	4604      	mov	r4, r0
		taskENTER_CRITICAL();
9000ead0:	f7fe f950 	bl	9000cd74 <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
9000ead4:	6565      	str	r5, [r4, #84]	@ 0x54
	}
9000ead6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		taskEXIT_CRITICAL();
9000eada:	f7fe b96d 	b.w	9000cdb8 <vPortExitCritical>
			xTCB = ( TCB_t * ) pxCurrentTCB;
9000eade:	4b04      	ldr	r3, [pc, #16]	@ (9000eaf0 <vTaskSetApplicationTaskTag+0x28>)
9000eae0:	681c      	ldr	r4, [r3, #0]
		taskENTER_CRITICAL();
9000eae2:	f7fe f947 	bl	9000cd74 <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
9000eae6:	6565      	str	r5, [r4, #84]	@ 0x54
	}
9000eae8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		taskEXIT_CRITICAL();
9000eaec:	f7fe b964 	b.w	9000cdb8 <vPortExitCritical>
9000eaf0:	24025190 	.word	0x24025190

9000eaf4 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
9000eaf4:	4b27      	ldr	r3, [pc, #156]	@ (9000eb94 <vTaskSwitchContext+0xa0>)
9000eaf6:	681b      	ldr	r3, [r3, #0]
9000eaf8:	b11b      	cbz	r3, 9000eb02 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
9000eafa:	4b27      	ldr	r3, [pc, #156]	@ (9000eb98 <vTaskSwitchContext+0xa4>)
9000eafc:	2201      	movs	r2, #1
9000eafe:	601a      	str	r2, [r3, #0]
9000eb00:	4770      	bx	lr
{
9000eb02:	b570      	push	{r4, r5, r6, lr}
		xYieldPending = pdFALSE;
9000eb04:	4a24      	ldr	r2, [pc, #144]	@ (9000eb98 <vTaskSwitchContext+0xa4>)
		traceTASK_SWITCHED_OUT();
9000eb06:	4c25      	ldr	r4, [pc, #148]	@ (9000eb9c <vTaskSwitchContext+0xa8>)
		xYieldPending = pdFALSE;
9000eb08:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_OUT();
9000eb0a:	6823      	ldr	r3, [r4, #0]
		if( xTask == NULL )
9000eb0c:	2b00      	cmp	r3, #0
9000eb0e:	d036      	beq.n	9000eb7e <vTaskSwitchContext+0x8a>
		if( xTCB->pxTaskTag != NULL )
9000eb10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
9000eb12:	b10b      	cbz	r3, 9000eb18 <vTaskSwitchContext+0x24>
			xReturn = xTCB->pxTaskTag( pvParameter );
9000eb14:	2001      	movs	r0, #1
9000eb16:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9000eb18:	4d21      	ldr	r5, [pc, #132]	@ (9000eba0 <vTaskSwitchContext+0xac>)
9000eb1a:	4922      	ldr	r1, [pc, #136]	@ (9000eba4 <vTaskSwitchContext+0xb0>)
9000eb1c:	682b      	ldr	r3, [r5, #0]
9000eb1e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
9000eb22:	0098      	lsls	r0, r3, #2
9000eb24:	0092      	lsls	r2, r2, #2
9000eb26:	588a      	ldr	r2, [r1, r2]
9000eb28:	b942      	cbnz	r2, 9000eb3c <vTaskSwitchContext+0x48>
9000eb2a:	b1fb      	cbz	r3, 9000eb6c <vTaskSwitchContext+0x78>
9000eb2c:	3b01      	subs	r3, #1
9000eb2e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
9000eb32:	0098      	lsls	r0, r3, #2
9000eb34:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
9000eb38:	2a00      	cmp	r2, #0
9000eb3a:	d0f6      	beq.n	9000eb2a <vTaskSwitchContext+0x36>
9000eb3c:	4418      	add	r0, r3
9000eb3e:	eb01 0c80 	add.w	ip, r1, r0, lsl #2
9000eb42:	f8dc 1004 	ldr.w	r1, [ip, #4]
9000eb46:	4662      	mov	r2, ip
9000eb48:	6849      	ldr	r1, [r1, #4]
9000eb4a:	3208      	adds	r2, #8
9000eb4c:	4291      	cmp	r1, r2
9000eb4e:	f8cc 1004 	str.w	r1, [ip, #4]
9000eb52:	d01b      	beq.n	9000eb8c <vTaskSwitchContext+0x98>
9000eb54:	68ca      	ldr	r2, [r1, #12]
9000eb56:	6022      	str	r2, [r4, #0]
9000eb58:	602b      	str	r3, [r5, #0]
		traceTASK_SWITCHED_IN();
9000eb5a:	6823      	ldr	r3, [r4, #0]
		if( xTask == NULL )
9000eb5c:	b1a3      	cbz	r3, 9000eb88 <vTaskSwitchContext+0x94>
		if( xTCB->pxTaskTag != NULL )
9000eb5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
9000eb60:	b11b      	cbz	r3, 9000eb6a <vTaskSwitchContext+0x76>
			xReturn = xTCB->pxTaskTag( pvParameter );
9000eb62:	2000      	movs	r0, #0
}
9000eb64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			xReturn = xTCB->pxTaskTag( pvParameter );
9000eb68:	4718      	bx	r3
}
9000eb6a:	bd70      	pop	{r4, r5, r6, pc}
9000eb6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
9000eb70:	f383 8811 	msr	BASEPRI, r3
9000eb74:	f3bf 8f6f 	isb	sy
9000eb78:	f3bf 8f4f 	dsb	sy
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9000eb7c:	e7fe      	b.n	9000eb7c <vTaskSwitchContext+0x88>
			xTCB = pxCurrentTCB;
9000eb7e:	6823      	ldr	r3, [r4, #0]
		if( xTCB->pxTaskTag != NULL )
9000eb80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
9000eb82:	2b00      	cmp	r3, #0
9000eb84:	d1c6      	bne.n	9000eb14 <vTaskSwitchContext+0x20>
9000eb86:	e7c7      	b.n	9000eb18 <vTaskSwitchContext+0x24>
			xTCB = pxCurrentTCB;
9000eb88:	6823      	ldr	r3, [r4, #0]
9000eb8a:	e7e8      	b.n	9000eb5e <vTaskSwitchContext+0x6a>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9000eb8c:	6849      	ldr	r1, [r1, #4]
9000eb8e:	f8cc 1004 	str.w	r1, [ip, #4]
9000eb92:	e7df      	b.n	9000eb54 <vTaskSwitchContext+0x60>
9000eb94:	24024c98 	.word	0x24024c98
9000eb98:	24024ca8 	.word	0x24024ca8
9000eb9c:	24025190 	.word	0x24025190
9000eba0:	24024cb4 	.word	0x24024cb4
9000eba4:	24024d30 	.word	0x24024d30

9000eba8 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
9000eba8:	b1f0      	cbz	r0, 9000ebe8 <vTaskPlaceOnEventList+0x40>
{
9000ebaa:	b570      	push	{r4, r5, r6, lr}
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
9000ebac:	4d1a      	ldr	r5, [pc, #104]	@ (9000ec18 <vTaskPlaceOnEventList+0x70>)
9000ebae:	460c      	mov	r4, r1
9000ebb0:	6829      	ldr	r1, [r5, #0]
9000ebb2:	3118      	adds	r1, #24
9000ebb4:	f7fe f846 	bl	9000cc44 <vListInsert>
const TickType_t xConstTickCount = xTickCount;
9000ebb8:	4b18      	ldr	r3, [pc, #96]	@ (9000ec1c <vTaskPlaceOnEventList+0x74>)
9000ebba:	681e      	ldr	r6, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
9000ebbc:	6828      	ldr	r0, [r5, #0]
9000ebbe:	3004      	adds	r0, #4
9000ebc0:	f7fe f858 	bl	9000cc74 <uxListRemove>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
9000ebc4:	1c63      	adds	r3, r4, #1
9000ebc6:	d020      	beq.n	9000ec0a <vTaskPlaceOnEventList+0x62>
			xTimeToWake = xConstTickCount + xTicksToWait;
9000ebc8:	19a4      	adds	r4, r4, r6
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
9000ebca:	682b      	ldr	r3, [r5, #0]
9000ebcc:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
9000ebce:	d214      	bcs.n	9000ebfa <vTaskPlaceOnEventList+0x52>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
9000ebd0:	4b13      	ldr	r3, [pc, #76]	@ (9000ec20 <vTaskPlaceOnEventList+0x78>)
9000ebd2:	6818      	ldr	r0, [r3, #0]
9000ebd4:	6829      	ldr	r1, [r5, #0]
9000ebd6:	3104      	adds	r1, #4
9000ebd8:	f7fe f834 	bl	9000cc44 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
9000ebdc:	4b11      	ldr	r3, [pc, #68]	@ (9000ec24 <vTaskPlaceOnEventList+0x7c>)
9000ebde:	681a      	ldr	r2, [r3, #0]
9000ebe0:	4294      	cmp	r4, r2
9000ebe2:	d200      	bcs.n	9000ebe6 <vTaskPlaceOnEventList+0x3e>
					xNextTaskUnblockTime = xTimeToWake;
9000ebe4:	601c      	str	r4, [r3, #0]
}
9000ebe6:	bd70      	pop	{r4, r5, r6, pc}
9000ebe8:	f04f 0350 	mov.w	r3, #80	@ 0x50
9000ebec:	f383 8811 	msr	BASEPRI, r3
9000ebf0:	f3bf 8f6f 	isb	sy
9000ebf4:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
9000ebf8:	e7fe      	b.n	9000ebf8 <vTaskPlaceOnEventList+0x50>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
9000ebfa:	4b0b      	ldr	r3, [pc, #44]	@ (9000ec28 <vTaskPlaceOnEventList+0x80>)
9000ebfc:	6818      	ldr	r0, [r3, #0]
9000ebfe:	6829      	ldr	r1, [r5, #0]
}
9000ec00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
9000ec04:	3104      	adds	r1, #4
9000ec06:	f7fe b81d 	b.w	9000cc44 <vListInsert>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
9000ec0a:	6829      	ldr	r1, [r5, #0]
9000ec0c:	4807      	ldr	r0, [pc, #28]	@ (9000ec2c <vTaskPlaceOnEventList+0x84>)
9000ec0e:	3104      	adds	r1, #4
}
9000ec10:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
9000ec14:	f7fe b808 	b.w	9000cc28 <vListInsertEnd>
9000ec18:	24025190 	.word	0x24025190
9000ec1c:	24024cb8 	.word	0x24024cb8
9000ec20:	24024d04 	.word	0x24024d04
9000ec24:	24024c9c 	.word	0x24024c9c
9000ec28:	24024d00 	.word	0x24024d00
9000ec2c:	24024cc0 	.word	0x24024cc0

9000ec30 <vTaskPlaceOnEventListRestricted>:
		configASSERT( pxEventList );
9000ec30:	b358      	cbz	r0, 9000ec8a <vTaskPlaceOnEventListRestricted+0x5a>
	{
9000ec32:	b570      	push	{r4, r5, r6, lr}
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
9000ec34:	4e1d      	ldr	r6, [pc, #116]	@ (9000ecac <vTaskPlaceOnEventListRestricted+0x7c>)
9000ec36:	460c      	mov	r4, r1
9000ec38:	4615      	mov	r5, r2
9000ec3a:	6831      	ldr	r1, [r6, #0]
9000ec3c:	3118      	adds	r1, #24
9000ec3e:	f7fd fff3 	bl	9000cc28 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
9000ec42:	b165      	cbz	r5, 9000ec5e <vTaskPlaceOnEventListRestricted+0x2e>
const TickType_t xConstTickCount = xTickCount;
9000ec44:	4b1a      	ldr	r3, [pc, #104]	@ (9000ecb0 <vTaskPlaceOnEventListRestricted+0x80>)
9000ec46:	681b      	ldr	r3, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
9000ec48:	6830      	ldr	r0, [r6, #0]
9000ec4a:	3004      	adds	r0, #4
9000ec4c:	f7fe f812 	bl	9000cc74 <uxListRemove>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
9000ec50:	6831      	ldr	r1, [r6, #0]
9000ec52:	4818      	ldr	r0, [pc, #96]	@ (9000ecb4 <vTaskPlaceOnEventListRestricted+0x84>)
9000ec54:	3104      	adds	r1, #4
	}
9000ec56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
9000ec5a:	f7fd bfe5 	b.w	9000cc28 <vListInsertEnd>
const TickType_t xConstTickCount = xTickCount;
9000ec5e:	4b14      	ldr	r3, [pc, #80]	@ (9000ecb0 <vTaskPlaceOnEventListRestricted+0x80>)
9000ec60:	681d      	ldr	r5, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
9000ec62:	6830      	ldr	r0, [r6, #0]
9000ec64:	3004      	adds	r0, #4
9000ec66:	f7fe f805 	bl	9000cc74 <uxListRemove>
			xTimeToWake = xConstTickCount + xTicksToWait;
9000ec6a:	1964      	adds	r4, r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
9000ec6c:	6833      	ldr	r3, [r6, #0]
9000ec6e:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
9000ec70:	d214      	bcs.n	9000ec9c <vTaskPlaceOnEventListRestricted+0x6c>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
9000ec72:	4b11      	ldr	r3, [pc, #68]	@ (9000ecb8 <vTaskPlaceOnEventListRestricted+0x88>)
9000ec74:	6818      	ldr	r0, [r3, #0]
9000ec76:	6831      	ldr	r1, [r6, #0]
9000ec78:	3104      	adds	r1, #4
9000ec7a:	f7fd ffe3 	bl	9000cc44 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
9000ec7e:	4b0f      	ldr	r3, [pc, #60]	@ (9000ecbc <vTaskPlaceOnEventListRestricted+0x8c>)
9000ec80:	681a      	ldr	r2, [r3, #0]
9000ec82:	4294      	cmp	r4, r2
9000ec84:	d200      	bcs.n	9000ec88 <vTaskPlaceOnEventListRestricted+0x58>
					xNextTaskUnblockTime = xTimeToWake;
9000ec86:	601c      	str	r4, [r3, #0]
	}
9000ec88:	bd70      	pop	{r4, r5, r6, pc}
9000ec8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
9000ec8e:	f383 8811 	msr	BASEPRI, r3
9000ec92:	f3bf 8f6f 	isb	sy
9000ec96:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
9000ec9a:	e7fe      	b.n	9000ec9a <vTaskPlaceOnEventListRestricted+0x6a>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
9000ec9c:	4b08      	ldr	r3, [pc, #32]	@ (9000ecc0 <vTaskPlaceOnEventListRestricted+0x90>)
9000ec9e:	6818      	ldr	r0, [r3, #0]
9000eca0:	6831      	ldr	r1, [r6, #0]
	}
9000eca2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
9000eca6:	3104      	adds	r1, #4
9000eca8:	f7fd bfcc 	b.w	9000cc44 <vListInsert>
9000ecac:	24025190 	.word	0x24025190
9000ecb0:	24024cb8 	.word	0x24024cb8
9000ecb4:	24024cc0 	.word	0x24024cc0
9000ecb8:	24024d04 	.word	0x24024d04
9000ecbc:	24024c9c 	.word	0x24024c9c
9000ecc0:	24024d00 	.word	0x24024d00

9000ecc4 <xTaskRemoveFromEventList>:
{
9000ecc4:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9000ecc6:	68c3      	ldr	r3, [r0, #12]
9000ecc8:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
9000ecca:	b34c      	cbz	r4, 9000ed20 <xTaskRemoveFromEventList+0x5c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
9000eccc:	f104 0518 	add.w	r5, r4, #24
9000ecd0:	4628      	mov	r0, r5
9000ecd2:	f7fd ffcf 	bl	9000cc74 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
9000ecd6:	4b18      	ldr	r3, [pc, #96]	@ (9000ed38 <xTaskRemoveFromEventList+0x74>)
9000ecd8:	681b      	ldr	r3, [r3, #0]
9000ecda:	b173      	cbz	r3, 9000ecfa <xTaskRemoveFromEventList+0x36>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
9000ecdc:	4629      	mov	r1, r5
9000ecde:	4817      	ldr	r0, [pc, #92]	@ (9000ed3c <xTaskRemoveFromEventList+0x78>)
9000ece0:	f7fd ffa2 	bl	9000cc28 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
9000ece4:	4b16      	ldr	r3, [pc, #88]	@ (9000ed40 <xTaskRemoveFromEventList+0x7c>)
9000ece6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
9000ece8:	681b      	ldr	r3, [r3, #0]
9000ecea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000ecec:	429a      	cmp	r2, r3
9000ecee:	d920      	bls.n	9000ed32 <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
9000ecf0:	2301      	movs	r3, #1
9000ecf2:	4a14      	ldr	r2, [pc, #80]	@ (9000ed44 <xTaskRemoveFromEventList+0x80>)
		xReturn = pdTRUE;
9000ecf4:	4618      	mov	r0, r3
		xYieldPending = pdTRUE;
9000ecf6:	6013      	str	r3, [r2, #0]
}
9000ecf8:	bd38      	pop	{r3, r4, r5, pc}
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
9000ecfa:	1d25      	adds	r5, r4, #4
9000ecfc:	4628      	mov	r0, r5
9000ecfe:	f7fd ffb9 	bl	9000cc74 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
9000ed02:	4b11      	ldr	r3, [pc, #68]	@ (9000ed48 <xTaskRemoveFromEventList+0x84>)
9000ed04:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
9000ed06:	681a      	ldr	r2, [r3, #0]
9000ed08:	4290      	cmp	r0, r2
9000ed0a:	d900      	bls.n	9000ed0e <xTaskRemoveFromEventList+0x4a>
9000ed0c:	6018      	str	r0, [r3, #0]
9000ed0e:	4b0f      	ldr	r3, [pc, #60]	@ (9000ed4c <xTaskRemoveFromEventList+0x88>)
9000ed10:	eb00 0080 	add.w	r0, r0, r0, lsl #2
9000ed14:	4629      	mov	r1, r5
9000ed16:	eb03 0080 	add.w	r0, r3, r0, lsl #2
9000ed1a:	f7fd ff85 	bl	9000cc28 <vListInsertEnd>
9000ed1e:	e7e1      	b.n	9000ece4 <xTaskRemoveFromEventList+0x20>
9000ed20:	f04f 0350 	mov.w	r3, #80	@ 0x50
9000ed24:	f383 8811 	msr	BASEPRI, r3
9000ed28:	f3bf 8f6f 	isb	sy
9000ed2c:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
9000ed30:	e7fe      	b.n	9000ed30 <xTaskRemoveFromEventList+0x6c>
		xReturn = pdFALSE;
9000ed32:	2000      	movs	r0, #0
}
9000ed34:	bd38      	pop	{r3, r4, r5, pc}
9000ed36:	bf00      	nop
9000ed38:	24024c98 	.word	0x24024c98
9000ed3c:	24024cec 	.word	0x24024cec
9000ed40:	24025190 	.word	0x24025190
9000ed44:	24024ca8 	.word	0x24024ca8
9000ed48:	24024cb4 	.word	0x24024cb4
9000ed4c:	24024d30 	.word	0x24024d30

9000ed50 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
9000ed50:	4a03      	ldr	r2, [pc, #12]	@ (9000ed60 <vTaskInternalSetTimeOutState+0x10>)
	pxTimeOut->xTimeOnEntering = xTickCount;
9000ed52:	4b04      	ldr	r3, [pc, #16]	@ (9000ed64 <vTaskInternalSetTimeOutState+0x14>)
	pxTimeOut->xOverflowCount = xNumOfOverflows;
9000ed54:	6812      	ldr	r2, [r2, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
9000ed56:	681b      	ldr	r3, [r3, #0]
9000ed58:	e9c0 2300 	strd	r2, r3, [r0]
}
9000ed5c:	4770      	bx	lr
9000ed5e:	bf00      	nop
9000ed60:	24024ca4 	.word	0x24024ca4
9000ed64:	24024cb8 	.word	0x24024cb8

9000ed68 <xTaskCheckForTimeOut>:
{
9000ed68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
9000ed6a:	b308      	cbz	r0, 9000edb0 <xTaskCheckForTimeOut+0x48>
	configASSERT( pxTicksToWait );
9000ed6c:	460d      	mov	r5, r1
9000ed6e:	b1b1      	cbz	r1, 9000ed9e <xTaskCheckForTimeOut+0x36>
9000ed70:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
9000ed72:	f7fd ffff 	bl	9000cd74 <vPortEnterCritical>
			if( *pxTicksToWait == portMAX_DELAY )
9000ed76:	682b      	ldr	r3, [r5, #0]
		const TickType_t xConstTickCount = xTickCount;
9000ed78:	4a1a      	ldr	r2, [pc, #104]	@ (9000ede4 <xTaskCheckForTimeOut+0x7c>)
			if( *pxTicksToWait == portMAX_DELAY )
9000ed7a:	1c58      	adds	r0, r3, #1
		const TickType_t xConstTickCount = xTickCount;
9000ed7c:	6811      	ldr	r1, [r2, #0]
			if( *pxTicksToWait == portMAX_DELAY )
9000ed7e:	d02c      	beq.n	9000edda <xTaskCheckForTimeOut+0x72>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
9000ed80:	f8df c064 	ldr.w	ip, [pc, #100]	@ 9000ede8 <xTaskCheckForTimeOut+0x80>
9000ed84:	6826      	ldr	r6, [r4, #0]
9000ed86:	f8dc 7000 	ldr.w	r7, [ip]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
9000ed8a:	6860      	ldr	r0, [r4, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
9000ed8c:	42be      	cmp	r6, r7
9000ed8e:	d018      	beq.n	9000edc2 <xTaskCheckForTimeOut+0x5a>
9000ed90:	4288      	cmp	r0, r1
9000ed92:	d816      	bhi.n	9000edc2 <xTaskCheckForTimeOut+0x5a>
			xReturn = pdTRUE;
9000ed94:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
9000ed96:	f7fe f80f 	bl	9000cdb8 <vPortExitCritical>
}
9000ed9a:	4620      	mov	r0, r4
9000ed9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
9000ed9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
9000eda2:	f383 8811 	msr	BASEPRI, r3
9000eda6:	f3bf 8f6f 	isb	sy
9000edaa:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
9000edae:	e7fe      	b.n	9000edae <xTaskCheckForTimeOut+0x46>
9000edb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
9000edb4:	f383 8811 	msr	BASEPRI, r3
9000edb8:	f3bf 8f6f 	isb	sy
9000edbc:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
9000edc0:	e7fe      	b.n	9000edc0 <xTaskCheckForTimeOut+0x58>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
9000edc2:	eba1 0e00 	sub.w	lr, r1, r0
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
9000edc6:	4573      	cmp	r3, lr
9000edc8:	d909      	bls.n	9000edde <xTaskCheckForTimeOut+0x76>
			*pxTicksToWait -= xElapsedTime;
9000edca:	1a5b      	subs	r3, r3, r1
	pxTimeOut->xOverflowCount = xNumOfOverflows;
9000edcc:	f8dc 1000 	ldr.w	r1, [ip]
	pxTimeOut->xTimeOnEntering = xTickCount;
9000edd0:	6812      	ldr	r2, [r2, #0]
			*pxTicksToWait -= xElapsedTime;
9000edd2:	4403      	add	r3, r0
9000edd4:	602b      	str	r3, [r5, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
9000edd6:	e9c4 1200 	strd	r1, r2, [r4]
				xReturn = pdFALSE;
9000edda:	2400      	movs	r4, #0
9000eddc:	e7db      	b.n	9000ed96 <xTaskCheckForTimeOut+0x2e>
			*pxTicksToWait = 0;
9000edde:	2300      	movs	r3, #0
9000ede0:	602b      	str	r3, [r5, #0]
			xReturn = pdTRUE;
9000ede2:	e7d7      	b.n	9000ed94 <xTaskCheckForTimeOut+0x2c>
9000ede4:	24024cb8 	.word	0x24024cb8
9000ede8:	24024ca4 	.word	0x24024ca4

9000edec <vTaskMissedYield>:
	xYieldPending = pdTRUE;
9000edec:	4b01      	ldr	r3, [pc, #4]	@ (9000edf4 <vTaskMissedYield+0x8>)
9000edee:	2201      	movs	r2, #1
9000edf0:	601a      	str	r2, [r3, #0]
}
9000edf2:	4770      	bx	lr
9000edf4:	24024ca8 	.word	0x24024ca8

9000edf8 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
9000edf8:	4b01      	ldr	r3, [pc, #4]	@ (9000ee00 <xTaskGetCurrentTaskHandle+0x8>)
9000edfa:	6818      	ldr	r0, [r3, #0]
	}
9000edfc:	4770      	bx	lr
9000edfe:	bf00      	nop
9000ee00:	24025190 	.word	0x24025190

9000ee04 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
9000ee04:	4b05      	ldr	r3, [pc, #20]	@ (9000ee1c <xTaskGetSchedulerState+0x18>)
9000ee06:	681b      	ldr	r3, [r3, #0]
9000ee08:	b133      	cbz	r3, 9000ee18 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
9000ee0a:	4b05      	ldr	r3, [pc, #20]	@ (9000ee20 <xTaskGetSchedulerState+0x1c>)
9000ee0c:	6818      	ldr	r0, [r3, #0]
9000ee0e:	fab0 f080 	clz	r0, r0
9000ee12:	0940      	lsrs	r0, r0, #5
9000ee14:	0040      	lsls	r0, r0, #1
9000ee16:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
9000ee18:	2001      	movs	r0, #1
	}
9000ee1a:	4770      	bx	lr
9000ee1c:	24024cb0 	.word	0x24024cb0
9000ee20:	24024c98 	.word	0x24024c98

9000ee24 <xTaskPriorityInherit>:
	{
9000ee24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
9000ee26:	4604      	mov	r4, r0
9000ee28:	b1c8      	cbz	r0, 9000ee5e <xTaskPriorityInherit+0x3a>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
9000ee2a:	4d1b      	ldr	r5, [pc, #108]	@ (9000ee98 <xTaskPriorityInherit+0x74>)
9000ee2c:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
9000ee2e:	682a      	ldr	r2, [r5, #0]
9000ee30:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
9000ee32:	4293      	cmp	r3, r2
9000ee34:	d214      	bcs.n	9000ee60 <xTaskPriorityInherit+0x3c>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
9000ee36:	6982      	ldr	r2, [r0, #24]
9000ee38:	2a00      	cmp	r2, #0
9000ee3a:	db04      	blt.n	9000ee46 <xTaskPriorityInherit+0x22>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
9000ee3c:	682a      	ldr	r2, [r5, #0]
9000ee3e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
9000ee40:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
9000ee44:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
9000ee46:	eb03 0383 	add.w	r3, r3, r3, lsl #2
9000ee4a:	4e14      	ldr	r6, [pc, #80]	@ (9000ee9c <xTaskPriorityInherit+0x78>)
9000ee4c:	6962      	ldr	r2, [r4, #20]
9000ee4e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
9000ee52:	429a      	cmp	r2, r3
9000ee54:	d00c      	beq.n	9000ee70 <xTaskPriorityInherit+0x4c>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
9000ee56:	682b      	ldr	r3, [r5, #0]
9000ee58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000ee5a:	62e3      	str	r3, [r4, #44]	@ 0x2c
				xReturn = pdTRUE;
9000ee5c:	2001      	movs	r0, #1
	}
9000ee5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
9000ee60:	682b      	ldr	r3, [r5, #0]
9000ee62:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
9000ee64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000ee66:	4298      	cmp	r0, r3
9000ee68:	bf2c      	ite	cs
9000ee6a:	2000      	movcs	r0, #0
9000ee6c:	2001      	movcc	r0, #1
	}
9000ee6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
9000ee70:	1d27      	adds	r7, r4, #4
9000ee72:	4638      	mov	r0, r7
9000ee74:	f7fd fefe 	bl	9000cc74 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
9000ee78:	682a      	ldr	r2, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
9000ee7a:	4b09      	ldr	r3, [pc, #36]	@ (9000eea0 <xTaskPriorityInherit+0x7c>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
9000ee7c:	6ad0      	ldr	r0, [r2, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
9000ee7e:	681a      	ldr	r2, [r3, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
9000ee80:	62e0      	str	r0, [r4, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
9000ee82:	4290      	cmp	r0, r2
9000ee84:	d900      	bls.n	9000ee88 <xTaskPriorityInherit+0x64>
9000ee86:	6018      	str	r0, [r3, #0]
9000ee88:	eb00 0080 	add.w	r0, r0, r0, lsl #2
9000ee8c:	4639      	mov	r1, r7
9000ee8e:	eb06 0080 	add.w	r0, r6, r0, lsl #2
9000ee92:	f7fd fec9 	bl	9000cc28 <vListInsertEnd>
9000ee96:	e7e1      	b.n	9000ee5c <xTaskPriorityInherit+0x38>
9000ee98:	24025190 	.word	0x24025190
9000ee9c:	24024d30 	.word	0x24024d30
9000eea0:	24024cb4 	.word	0x24024cb4

9000eea4 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
9000eea4:	b308      	cbz	r0, 9000eeea <xTaskPriorityDisinherit+0x46>
	{
9000eea6:	b538      	push	{r3, r4, r5, lr}
			configASSERT( pxTCB == pxCurrentTCB );
9000eea8:	4b1d      	ldr	r3, [pc, #116]	@ (9000ef20 <xTaskPriorityDisinherit+0x7c>)
9000eeaa:	681c      	ldr	r4, [r3, #0]
9000eeac:	4284      	cmp	r4, r0
9000eeae:	d008      	beq.n	9000eec2 <xTaskPriorityDisinherit+0x1e>
9000eeb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
9000eeb4:	f383 8811 	msr	BASEPRI, r3
9000eeb8:	f3bf 8f6f 	isb	sy
9000eebc:	f3bf 8f4f 	dsb	sy
9000eec0:	e7fe      	b.n	9000eec0 <xTaskPriorityDisinherit+0x1c>
			configASSERT( pxTCB->uxMutexesHeld );
9000eec2:	6d23      	ldr	r3, [r4, #80]	@ 0x50
9000eec4:	b143      	cbz	r3, 9000eed8 <xTaskPriorityDisinherit+0x34>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
9000eec6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
			( pxTCB->uxMutexesHeld )--;
9000eec8:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
9000eeca:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
			( pxTCB->uxMutexesHeld )--;
9000eecc:	6523      	str	r3, [r4, #80]	@ 0x50
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
9000eece:	4291      	cmp	r1, r2
9000eed0:	d000      	beq.n	9000eed4 <xTaskPriorityDisinherit+0x30>
9000eed2:	b163      	cbz	r3, 9000eeee <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
9000eed4:	2000      	movs	r0, #0
	}
9000eed6:	bd38      	pop	{r3, r4, r5, pc}
9000eed8:	f04f 0350 	mov.w	r3, #80	@ 0x50
9000eedc:	f383 8811 	msr	BASEPRI, r3
9000eee0:	f3bf 8f6f 	isb	sy
9000eee4:	f3bf 8f4f 	dsb	sy
			configASSERT( pxTCB->uxMutexesHeld );
9000eee8:	e7fe      	b.n	9000eee8 <xTaskPriorityDisinherit+0x44>
	BaseType_t xReturn = pdFALSE;
9000eeea:	2000      	movs	r0, #0
	}
9000eeec:	4770      	bx	lr
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
9000eeee:	1d25      	adds	r5, r4, #4
9000eef0:	4628      	mov	r0, r5
9000eef2:	f7fd febf 	bl	9000cc74 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
9000eef6:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
					prvAddTaskToReadyList( pxTCB );
9000eef8:	4b0a      	ldr	r3, [pc, #40]	@ (9000ef24 <xTaskPriorityDisinherit+0x80>)
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
9000eefa:	f1c0 0238 	rsb	r2, r0, #56	@ 0x38
					pxTCB->uxPriority = pxTCB->uxBasePriority;
9000eefe:	62e0      	str	r0, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
9000ef00:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
9000ef02:	681a      	ldr	r2, [r3, #0]
9000ef04:	4290      	cmp	r0, r2
9000ef06:	d900      	bls.n	9000ef0a <xTaskPriorityDisinherit+0x66>
9000ef08:	6018      	str	r0, [r3, #0]
9000ef0a:	4b07      	ldr	r3, [pc, #28]	@ (9000ef28 <xTaskPriorityDisinherit+0x84>)
9000ef0c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
9000ef10:	4629      	mov	r1, r5
9000ef12:	eb03 0080 	add.w	r0, r3, r0, lsl #2
9000ef16:	f7fd fe87 	bl	9000cc28 <vListInsertEnd>
					xReturn = pdTRUE;
9000ef1a:	2001      	movs	r0, #1
	}
9000ef1c:	bd38      	pop	{r3, r4, r5, pc}
9000ef1e:	bf00      	nop
9000ef20:	24025190 	.word	0x24025190
9000ef24:	24024cb4 	.word	0x24024cb4
9000ef28:	24024d30 	.word	0x24024d30

9000ef2c <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
9000ef2c:	2800      	cmp	r0, #0
9000ef2e:	d03c      	beq.n	9000efaa <vTaskPriorityDisinheritAfterTimeout+0x7e>
			configASSERT( pxTCB->uxMutexesHeld );
9000ef30:	6d03      	ldr	r3, [r0, #80]	@ 0x50
	{
9000ef32:	b570      	push	{r4, r5, r6, lr}
9000ef34:	4604      	mov	r4, r0
			configASSERT( pxTCB->uxMutexesHeld );
9000ef36:	b14b      	cbz	r3, 9000ef4c <vTaskPriorityDisinheritAfterTimeout+0x20>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
9000ef38:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
			if( pxTCB->uxPriority != uxPriorityToUse )
9000ef3a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
9000ef3c:	4281      	cmp	r1, r0
9000ef3e:	bf38      	it	cc
9000ef40:	4601      	movcc	r1, r0
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
9000ef42:	2b01      	cmp	r3, #1
9000ef44:	d101      	bne.n	9000ef4a <vTaskPriorityDisinheritAfterTimeout+0x1e>
9000ef46:	428a      	cmp	r2, r1
9000ef48:	d109      	bne.n	9000ef5e <vTaskPriorityDisinheritAfterTimeout+0x32>
	}
9000ef4a:	bd70      	pop	{r4, r5, r6, pc}
9000ef4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
9000ef50:	f383 8811 	msr	BASEPRI, r3
9000ef54:	f3bf 8f6f 	isb	sy
9000ef58:	f3bf 8f4f 	dsb	sy
			configASSERT( pxTCB->uxMutexesHeld );
9000ef5c:	e7fe      	b.n	9000ef5c <vTaskPriorityDisinheritAfterTimeout+0x30>
					configASSERT( pxTCB != pxCurrentTCB );
9000ef5e:	4b18      	ldr	r3, [pc, #96]	@ (9000efc0 <vTaskPriorityDisinheritAfterTimeout+0x94>)
9000ef60:	681b      	ldr	r3, [r3, #0]
9000ef62:	42a3      	cmp	r3, r4
9000ef64:	d022      	beq.n	9000efac <vTaskPriorityDisinheritAfterTimeout+0x80>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
9000ef66:	69a3      	ldr	r3, [r4, #24]
					pxTCB->uxPriority = uxPriorityToUse;
9000ef68:	62e1      	str	r1, [r4, #44]	@ 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
9000ef6a:	2b00      	cmp	r3, #0
9000ef6c:	db02      	blt.n	9000ef74 <vTaskPriorityDisinheritAfterTimeout+0x48>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
9000ef6e:	f1c1 0138 	rsb	r1, r1, #56	@ 0x38
9000ef72:	61a1      	str	r1, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
9000ef74:	eb02 0282 	add.w	r2, r2, r2, lsl #2
9000ef78:	4d12      	ldr	r5, [pc, #72]	@ (9000efc4 <vTaskPriorityDisinheritAfterTimeout+0x98>)
9000ef7a:	6961      	ldr	r1, [r4, #20]
9000ef7c:	eb05 0382 	add.w	r3, r5, r2, lsl #2
9000ef80:	4299      	cmp	r1, r3
9000ef82:	d1e2      	bne.n	9000ef4a <vTaskPriorityDisinheritAfterTimeout+0x1e>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
9000ef84:	1d26      	adds	r6, r4, #4
9000ef86:	4630      	mov	r0, r6
9000ef88:	f7fd fe74 	bl	9000cc74 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
9000ef8c:	4b0e      	ldr	r3, [pc, #56]	@ (9000efc8 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
9000ef8e:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
9000ef90:	681a      	ldr	r2, [r3, #0]
9000ef92:	4290      	cmp	r0, r2
9000ef94:	d900      	bls.n	9000ef98 <vTaskPriorityDisinheritAfterTimeout+0x6c>
9000ef96:	6018      	str	r0, [r3, #0]
9000ef98:	eb00 0080 	add.w	r0, r0, r0, lsl #2
9000ef9c:	4631      	mov	r1, r6
9000ef9e:	eb05 0080 	add.w	r0, r5, r0, lsl #2
	}
9000efa2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
						prvAddTaskToReadyList( pxTCB );
9000efa6:	f7fd be3f 	b.w	9000cc28 <vListInsertEnd>
9000efaa:	4770      	bx	lr
9000efac:	f04f 0350 	mov.w	r3, #80	@ 0x50
9000efb0:	f383 8811 	msr	BASEPRI, r3
9000efb4:	f3bf 8f6f 	isb	sy
9000efb8:	f3bf 8f4f 	dsb	sy
					configASSERT( pxTCB != pxCurrentTCB );
9000efbc:	e7fe      	b.n	9000efbc <vTaskPriorityDisinheritAfterTimeout+0x90>
9000efbe:	bf00      	nop
9000efc0:	24025190 	.word	0x24025190
9000efc4:	24024d30 	.word	0x24024d30
9000efc8:	24024cb4 	.word	0x24024cb4

9000efcc <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
9000efcc:	4b04      	ldr	r3, [pc, #16]	@ (9000efe0 <pvTaskIncrementMutexHeldCount+0x14>)
9000efce:	681a      	ldr	r2, [r3, #0]
9000efd0:	b11a      	cbz	r2, 9000efda <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
9000efd2:	6819      	ldr	r1, [r3, #0]
9000efd4:	6d0a      	ldr	r2, [r1, #80]	@ 0x50
9000efd6:	3201      	adds	r2, #1
9000efd8:	650a      	str	r2, [r1, #80]	@ 0x50
		return pxCurrentTCB;
9000efda:	6818      	ldr	r0, [r3, #0]
	}
9000efdc:	4770      	bx	lr
9000efde:	bf00      	nop
9000efe0:	24025190 	.word	0x24025190

9000efe4 <prvSwitchTimerLists>:
	}
}
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
9000efe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000efe8:	4e21      	ldr	r6, [pc, #132]	@ (9000f070 <prvSwitchTimerLists+0x8c>)
9000efea:	b084      	sub	sp, #16

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
9000efec:	e00d      	b.n	9000f00a <prvSwitchTimerLists+0x26>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
9000efee:	68db      	ldr	r3, [r3, #12]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9000eff0:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
9000eff2:	681f      	ldr	r7, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
9000eff4:	1d25      	adds	r5, r4, #4
9000eff6:	4628      	mov	r0, r5
9000eff8:	f7fd fe3c 	bl	9000cc74 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
9000effc:	6a23      	ldr	r3, [r4, #32]
9000effe:	4620      	mov	r0, r4
9000f000:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
9000f002:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
9000f006:	075b      	lsls	r3, r3, #29
9000f008:	d40a      	bmi.n	9000f020 <prvSwitchTimerLists+0x3c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
9000f00a:	6833      	ldr	r3, [r6, #0]
9000f00c:	681a      	ldr	r2, [r3, #0]
9000f00e:	2a00      	cmp	r2, #0
9000f010:	d1ed      	bne.n	9000efee <prvSwitchTimerLists+0xa>
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
9000f012:	4a18      	ldr	r2, [pc, #96]	@ (9000f074 <prvSwitchTimerLists+0x90>)
9000f014:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
9000f016:	6013      	str	r3, [r2, #0]
	pxCurrentTimerList = pxOverflowTimerList;
9000f018:	6031      	str	r1, [r6, #0]
}
9000f01a:	b004      	add	sp, #16
9000f01c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
9000f020:	69a3      	ldr	r3, [r4, #24]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
9000f022:	4629      	mov	r1, r5
	if( xTimerQueue != NULL )
9000f024:	f8df 8050 	ldr.w	r8, [pc, #80]	@ 9000f078 <prvSwitchTimerLists+0x94>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
9000f028:	443b      	add	r3, r7
			if( xReloadTime > xNextExpireTime )
9000f02a:	429f      	cmp	r7, r3
9000f02c:	d205      	bcs.n	9000f03a <prvSwitchTimerLists+0x56>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
9000f02e:	6830      	ldr	r0, [r6, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
9000f030:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
9000f032:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
9000f034:	f7fd fe06 	bl	9000cc44 <vListInsert>
9000f038:	e7e7      	b.n	9000f00a <prvSwitchTimerLists+0x26>
	if( xTimerQueue != NULL )
9000f03a:	f8d8 3000 	ldr.w	r3, [r8]
		xMessage.xMessageID = xCommandID;
9000f03e:	2500      	movs	r5, #0
	if( xTimerQueue != NULL )
9000f040:	b16b      	cbz	r3, 9000f05e <prvSwitchTimerLists+0x7a>
		xMessage.u.xTimerParameters.pxTimer = xTimer;
9000f042:	9402      	str	r4, [sp, #8]
		xMessage.xMessageID = xCommandID;
9000f044:	e9cd 5700 	strd	r5, r7, [sp]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
9000f048:	f7ff fedc 	bl	9000ee04 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
9000f04c:	462b      	mov	r3, r5
9000f04e:	462a      	mov	r2, r5
9000f050:	4669      	mov	r1, sp
9000f052:	f8d8 0000 	ldr.w	r0, [r8]
9000f056:	f7fe f979 	bl	9000d34c <xQueueGenericSend>
				configASSERT( xResult );
9000f05a:	2800      	cmp	r0, #0
9000f05c:	d1d5      	bne.n	9000f00a <prvSwitchTimerLists+0x26>
9000f05e:	f04f 0350 	mov.w	r3, #80	@ 0x50
9000f062:	f383 8811 	msr	BASEPRI, r3
9000f066:	f3bf 8f6f 	isb	sy
9000f06a:	f3bf 8f4f 	dsb	sy
9000f06e:	e7fe      	b.n	9000f06e <prvSwitchTimerLists+0x8a>
9000f070:	24025294 	.word	0x24025294
9000f074:	24025290 	.word	0x24025290
9000f078:	2402528c 	.word	0x2402528c

9000f07c <prvTimerTask>:
{
9000f07c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9000f080:	4e9f      	ldr	r6, [pc, #636]	@ (9000f300 <prvTimerTask+0x284>)
9000f082:	b089      	sub	sp, #36	@ 0x24
9000f084:	4d9f      	ldr	r5, [pc, #636]	@ (9000f304 <prvTimerTask+0x288>)
					portYIELD_WITHIN_API();
9000f086:	f04f 29e0 	mov.w	r9, #3758153728	@ 0xe000e000
9000f08a:	4c9f      	ldr	r4, [pc, #636]	@ (9000f308 <prvTimerTask+0x28c>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
9000f08c:	6833      	ldr	r3, [r6, #0]
9000f08e:	681f      	ldr	r7, [r3, #0]
9000f090:	2f00      	cmp	r7, #0
9000f092:	f000 80b2 	beq.w	9000f1fa <prvTimerTask+0x17e>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
9000f096:	68db      	ldr	r3, [r3, #12]
9000f098:	681f      	ldr	r7, [r3, #0]
	vTaskSuspendAll();
9000f09a:	f7ff fce7 	bl	9000ea6c <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
9000f09e:	f7ff fcfd 	bl	9000ea9c <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
9000f0a2:	682b      	ldr	r3, [r5, #0]
	xTimeNow = xTaskGetTickCount();
9000f0a4:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
9000f0a6:	4298      	cmp	r0, r3
9000f0a8:	f0c0 80af 	bcc.w	9000f20a <prvTimerTask+0x18e>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
9000f0ac:	4287      	cmp	r7, r0
	xLastTime = xTimeNow;
9000f0ae:	6028      	str	r0, [r5, #0]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
9000f0b0:	f200 80d0 	bhi.w	9000f254 <prvTimerTask+0x1d8>
				( void ) xTaskResumeAll();
9000f0b4:	f7ff fce2 	bl	9000ea7c <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9000f0b8:	6833      	ldr	r3, [r6, #0]
9000f0ba:	68db      	ldr	r3, [r3, #12]
9000f0bc:	f8d3 b00c 	ldr.w	fp, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
9000f0c0:	f10b 0804 	add.w	r8, fp, #4
9000f0c4:	4640      	mov	r0, r8
9000f0c6:	f7fd fdd5 	bl	9000cc74 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
9000f0ca:	f89b 3028 	ldrb.w	r3, [fp, #40]	@ 0x28
9000f0ce:	0758      	lsls	r0, r3, #29
9000f0d0:	f100 80d0 	bmi.w	9000f274 <prvTimerTask+0x1f8>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
9000f0d4:	f023 0301 	bic.w	r3, r3, #1
9000f0d8:	f88b 3028 	strb.w	r3, [fp, #40]	@ 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
9000f0dc:	f8db 3020 	ldr.w	r3, [fp, #32]
9000f0e0:	4658      	mov	r0, fp
9000f0e2:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
9000f0e4:	2200      	movs	r2, #0
9000f0e6:	4669      	mov	r1, sp
9000f0e8:	6820      	ldr	r0, [r4, #0]
9000f0ea:	f7fe fc15 	bl	9000d918 <xQueueReceive>
9000f0ee:	2800      	cmp	r0, #0
9000f0f0:	d0cc      	beq.n	9000f08c <prvTimerTask+0x10>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
9000f0f2:	9b00      	ldr	r3, [sp, #0]
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
9000f0f4:	9802      	ldr	r0, [sp, #8]
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
9000f0f6:	2b00      	cmp	r3, #0
9000f0f8:	db77      	blt.n	9000f1ea <prvTimerTask+0x16e>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
9000f0fa:	9f02      	ldr	r7, [sp, #8]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
9000f0fc:	697b      	ldr	r3, [r7, #20]
9000f0fe:	b113      	cbz	r3, 9000f106 <prvTimerTask+0x8a>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
9000f100:	1d38      	adds	r0, r7, #4
9000f102:	f7fd fdb7 	bl	9000cc74 <uxListRemove>
	xTimeNow = xTaskGetTickCount();
9000f106:	f7ff fcc9 	bl	9000ea9c <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
9000f10a:	682b      	ldr	r3, [r5, #0]
	xTimeNow = xTaskGetTickCount();
9000f10c:	4683      	mov	fp, r0
	if( xTimeNow < xLastTime )
9000f10e:	4298      	cmp	r0, r3
9000f110:	f0c0 8082 	bcc.w	9000f218 <prvTimerTask+0x19c>
			switch( xMessage.xMessageID )
9000f114:	9b00      	ldr	r3, [sp, #0]
	xLastTime = xTimeNow;
9000f116:	f8c5 b000 	str.w	fp, [r5]
			switch( xMessage.xMessageID )
9000f11a:	2b09      	cmp	r3, #9
9000f11c:	d8e2      	bhi.n	9000f0e4 <prvTimerTask+0x68>
9000f11e:	e8df f003 	tbb	[pc, r3]
9000f122:	0505      	.short	0x0505
9000f124:	5b3e5405 	.word	0x5b3e5405
9000f128:	3e540505 	.word	0x3e540505
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
9000f12c:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
9000f130:	9b01      	ldr	r3, [sp, #4]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
9000f132:	f042 0201 	orr.w	r2, r2, #1
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
9000f136:	613f      	str	r7, [r7, #16]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
9000f138:	f887 2028 	strb.w	r2, [r7, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
9000f13c:	69ba      	ldr	r2, [r7, #24]
9000f13e:	1899      	adds	r1, r3, r2
9000f140:	bf2c      	ite	cs
9000f142:	2001      	movcs	r0, #1
9000f144:	2000      	movcc	r0, #0
	if( xNextExpiryTime <= xTimeNow )
9000f146:	4559      	cmp	r1, fp
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
9000f148:	6079      	str	r1, [r7, #4]
	if( xNextExpiryTime <= xTimeNow )
9000f14a:	f200 8085 	bhi.w	9000f258 <prvTimerTask+0x1dc>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
9000f14e:	ebab 0303 	sub.w	r3, fp, r3
9000f152:	429a      	cmp	r2, r3
9000f154:	f200 80be 	bhi.w	9000f2d4 <prvTimerTask+0x258>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
9000f158:	6a3b      	ldr	r3, [r7, #32]
9000f15a:	4638      	mov	r0, r7
9000f15c:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
9000f15e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
9000f162:	0759      	lsls	r1, r3, #29
9000f164:	d5be      	bpl.n	9000f0e4 <prvTimerTask+0x68>
	if( xTimerQueue != NULL )
9000f166:	6821      	ldr	r1, [r4, #0]
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
9000f168:	9b01      	ldr	r3, [sp, #4]
9000f16a:	69ba      	ldr	r2, [r7, #24]
	if( xTimerQueue != NULL )
9000f16c:	b171      	cbz	r1, 9000f18c <prvTimerTask+0x110>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
9000f16e:	4413      	add	r3, r2
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
9000f170:	e9cd 3705 	strd	r3, r7, [sp, #20]
		xMessage.xMessageID = xCommandID;
9000f174:	2700      	movs	r7, #0
9000f176:	9704      	str	r7, [sp, #16]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
9000f178:	f7ff fe44 	bl	9000ee04 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
9000f17c:	463b      	mov	r3, r7
9000f17e:	463a      	mov	r2, r7
9000f180:	a904      	add	r1, sp, #16
9000f182:	6820      	ldr	r0, [r4, #0]
9000f184:	f7fe f8e2 	bl	9000d34c <xQueueGenericSend>
							configASSERT( xResult );
9000f188:	2800      	cmp	r0, #0
9000f18a:	d1ab      	bne.n	9000f0e4 <prvTimerTask+0x68>
9000f18c:	f04f 0350 	mov.w	r3, #80	@ 0x50
9000f190:	f383 8811 	msr	BASEPRI, r3
9000f194:	f3bf 8f6f 	isb	sy
9000f198:	f3bf 8f4f 	dsb	sy
9000f19c:	e7fe      	b.n	9000f19c <prvTimerTask+0x120>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
9000f19e:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
9000f1a2:	9b01      	ldr	r3, [sp, #4]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
9000f1a4:	f042 0201 	orr.w	r2, r2, #1
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
9000f1a8:	61bb      	str	r3, [r7, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
9000f1aa:	f887 2028 	strb.w	r2, [r7, #40]	@ 0x28
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
9000f1ae:	2b00      	cmp	r3, #0
9000f1b0:	f000 809c 	beq.w	9000f2ec <prvTimerTask+0x270>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
9000f1b4:	445b      	add	r3, fp
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
9000f1b6:	1d39      	adds	r1, r7, #4
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
9000f1b8:	613f      	str	r7, [r7, #16]
	if( xNextExpiryTime <= xTimeNow )
9000f1ba:	455b      	cmp	r3, fp
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
9000f1bc:	607b      	str	r3, [r7, #4]
	if( xNextExpiryTime <= xTimeNow )
9000f1be:	d855      	bhi.n	9000f26c <prvTimerTask+0x1f0>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
9000f1c0:	4b52      	ldr	r3, [pc, #328]	@ (9000f30c <prvTimerTask+0x290>)
9000f1c2:	6818      	ldr	r0, [r3, #0]
9000f1c4:	f7fd fd3e 	bl	9000cc44 <vListInsert>
9000f1c8:	e78c      	b.n	9000f0e4 <prvTimerTask+0x68>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
9000f1ca:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
9000f1ce:	f023 0301 	bic.w	r3, r3, #1
9000f1d2:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
					break;
9000f1d6:	e785      	b.n	9000f0e4 <prvTimerTask+0x68>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
9000f1d8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
9000f1dc:	079a      	lsls	r2, r3, #30
9000f1de:	d570      	bpl.n	9000f2c2 <prvTimerTask+0x246>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
9000f1e0:	f023 0301 	bic.w	r3, r3, #1
9000f1e4:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
9000f1e8:	e77c      	b.n	9000f0e4 <prvTimerTask+0x68>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
9000f1ea:	9b01      	ldr	r3, [sp, #4]
9000f1ec:	9903      	ldr	r1, [sp, #12]
9000f1ee:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
9000f1f0:	9b00      	ldr	r3, [sp, #0]
9000f1f2:	2b00      	cmp	r3, #0
9000f1f4:	f6ff af76 	blt.w	9000f0e4 <prvTimerTask+0x68>
9000f1f8:	e77f      	b.n	9000f0fa <prvTimerTask+0x7e>
	vTaskSuspendAll();
9000f1fa:	f7ff fc37 	bl	9000ea6c <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
9000f1fe:	f7ff fc4d 	bl	9000ea9c <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
9000f202:	682b      	ldr	r3, [r5, #0]
	xTimeNow = xTaskGetTickCount();
9000f204:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
9000f206:	4298      	cmp	r0, r3
9000f208:	d209      	bcs.n	9000f21e <prvTimerTask+0x1a2>
		prvSwitchTimerLists();
9000f20a:	f7ff feeb 	bl	9000efe4 <prvSwitchTimerLists>
	xLastTime = xTimeNow;
9000f20e:	f8c5 a000 	str.w	sl, [r5]
			( void ) xTaskResumeAll();
9000f212:	f7ff fc33 	bl	9000ea7c <xTaskResumeAll>
9000f216:	e765      	b.n	9000f0e4 <prvTimerTask+0x68>
		prvSwitchTimerLists();
9000f218:	f7ff fee4 	bl	9000efe4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
9000f21c:	e77a      	b.n	9000f114 <prvTimerTask+0x98>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
9000f21e:	4b3b      	ldr	r3, [pc, #236]	@ (9000f30c <prvTimerTask+0x290>)
	xLastTime = xTimeNow;
9000f220:	f8c5 a000 	str.w	sl, [r5]
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
9000f224:	681b      	ldr	r3, [r3, #0]
9000f226:	681a      	ldr	r2, [r3, #0]
9000f228:	fab2 f282 	clz	r2, r2
9000f22c:	0952      	lsrs	r2, r2, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
9000f22e:	eba7 010a 	sub.w	r1, r7, sl
9000f232:	6820      	ldr	r0, [r4, #0]
9000f234:	f7fe ff6e 	bl	9000e114 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
9000f238:	f7ff fc20 	bl	9000ea7c <xTaskResumeAll>
9000f23c:	2800      	cmp	r0, #0
9000f23e:	f47f af51 	bne.w	9000f0e4 <prvTimerTask+0x68>
					portYIELD_WITHIN_API();
9000f242:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
9000f246:	f8c9 3d04 	str.w	r3, [r9, #3332]	@ 0xd04
9000f24a:	f3bf 8f4f 	dsb	sy
9000f24e:	f3bf 8f6f 	isb	sy
9000f252:	e747      	b.n	9000f0e4 <prvTimerTask+0x68>
9000f254:	2200      	movs	r2, #0
9000f256:	e7ea      	b.n	9000f22e <prvTimerTask+0x1b2>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
9000f258:	455b      	cmp	r3, fp
9000f25a:	d902      	bls.n	9000f262 <prvTimerTask+0x1e6>
9000f25c:	2800      	cmp	r0, #0
9000f25e:	f43f af7b 	beq.w	9000f158 <prvTimerTask+0xdc>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
9000f262:	1d39      	adds	r1, r7, #4
9000f264:	6830      	ldr	r0, [r6, #0]
9000f266:	f7fd fced 	bl	9000cc44 <vListInsert>
	return xProcessTimerNow;
9000f26a:	e73b      	b.n	9000f0e4 <prvTimerTask+0x68>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
9000f26c:	6830      	ldr	r0, [r6, #0]
9000f26e:	f7fd fce9 	bl	9000cc44 <vListInsert>
9000f272:	e737      	b.n	9000f0e4 <prvTimerTask+0x68>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
9000f274:	f8db 0018 	ldr.w	r0, [fp, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
9000f278:	f8cb b010 	str.w	fp, [fp, #16]
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
9000f27c:	183b      	adds	r3, r7, r0
	if( xNextExpiryTime <= xTimeNow )
9000f27e:	459a      	cmp	sl, r3
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
9000f280:	f8cb 3004 	str.w	r3, [fp, #4]
	if( xNextExpiryTime <= xTimeNow )
9000f284:	d321      	bcc.n	9000f2ca <prvTimerTask+0x24e>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
9000f286:	ebaa 0a07 	sub.w	sl, sl, r7
9000f28a:	4550      	cmp	r0, sl
9000f28c:	d828      	bhi.n	9000f2e0 <prvTimerTask+0x264>
	if( xTimerQueue != NULL )
9000f28e:	6823      	ldr	r3, [r4, #0]
9000f290:	b173      	cbz	r3, 9000f2b0 <prvTimerTask+0x234>
		xMessage.u.xTimerParameters.pxTimer = xTimer;
9000f292:	e9cd 7b05 	strd	r7, fp, [sp, #20]
		xMessage.xMessageID = xCommandID;
9000f296:	2700      	movs	r7, #0
9000f298:	9704      	str	r7, [sp, #16]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
9000f29a:	f7ff fdb3 	bl	9000ee04 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
9000f29e:	463b      	mov	r3, r7
9000f2a0:	463a      	mov	r2, r7
9000f2a2:	a904      	add	r1, sp, #16
9000f2a4:	6820      	ldr	r0, [r4, #0]
9000f2a6:	f7fe f851 	bl	9000d34c <xQueueGenericSend>
			configASSERT( xResult );
9000f2aa:	2800      	cmp	r0, #0
9000f2ac:	f47f af16 	bne.w	9000f0dc <prvTimerTask+0x60>
9000f2b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
9000f2b4:	f383 8811 	msr	BASEPRI, r3
9000f2b8:	f3bf 8f6f 	isb	sy
9000f2bc:	f3bf 8f4f 	dsb	sy
9000f2c0:	e7fe      	b.n	9000f2c0 <prvTimerTask+0x244>
							vPortFree( pxTimer );
9000f2c2:	4638      	mov	r0, r7
9000f2c4:	f7fd fc3a 	bl	9000cb3c <vPortFree>
9000f2c8:	e70c      	b.n	9000f0e4 <prvTimerTask+0x68>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
9000f2ca:	4641      	mov	r1, r8
9000f2cc:	6830      	ldr	r0, [r6, #0]
9000f2ce:	f7fd fcb9 	bl	9000cc44 <vListInsert>
	return xProcessTimerNow;
9000f2d2:	e703      	b.n	9000f0dc <prvTimerTask+0x60>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
9000f2d4:	4b0d      	ldr	r3, [pc, #52]	@ (9000f30c <prvTimerTask+0x290>)
9000f2d6:	1d39      	adds	r1, r7, #4
9000f2d8:	6818      	ldr	r0, [r3, #0]
9000f2da:	f7fd fcb3 	bl	9000cc44 <vListInsert>
	return xProcessTimerNow;
9000f2de:	e701      	b.n	9000f0e4 <prvTimerTask+0x68>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
9000f2e0:	4b0a      	ldr	r3, [pc, #40]	@ (9000f30c <prvTimerTask+0x290>)
9000f2e2:	4641      	mov	r1, r8
9000f2e4:	6818      	ldr	r0, [r3, #0]
9000f2e6:	f7fd fcad 	bl	9000cc44 <vListInsert>
	return xProcessTimerNow;
9000f2ea:	e6f7      	b.n	9000f0dc <prvTimerTask+0x60>
9000f2ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
9000f2f0:	f383 8811 	msr	BASEPRI, r3
9000f2f4:	f3bf 8f6f 	isb	sy
9000f2f8:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
9000f2fc:	e7fe      	b.n	9000f2fc <prvTimerTask+0x280>
9000f2fe:	bf00      	nop
9000f300:	24025294 	.word	0x24025294
9000f304:	24025284 	.word	0x24025284
9000f308:	2402528c 	.word	0x2402528c
9000f30c:	24025290 	.word	0x24025290

9000f310 <xTimerCreateTimerTask>:
{
9000f310:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
9000f312:	4c23      	ldr	r4, [pc, #140]	@ (9000f3a0 <xTimerCreateTimerTask+0x90>)
{
9000f314:	b089      	sub	sp, #36	@ 0x24
	taskENTER_CRITICAL();
9000f316:	f7fd fd2d 	bl	9000cd74 <vPortEnterCritical>
		if( xTimerQueue == NULL )
9000f31a:	6825      	ldr	r5, [r4, #0]
9000f31c:	b335      	cbz	r5, 9000f36c <xTimerCreateTimerTask+0x5c>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
9000f31e:	f7fd fd4b 	bl	9000cdb8 <vPortExitCritical>
	if( xTimerQueue != NULL )
9000f322:	6823      	ldr	r3, [r4, #0]
9000f324:	b1cb      	cbz	r3, 9000f35a <xTimerCreateTimerTask+0x4a>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
9000f326:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
9000f328:	aa07      	add	r2, sp, #28
9000f32a:	a906      	add	r1, sp, #24
9000f32c:	a805      	add	r0, sp, #20
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
9000f32e:	2502      	movs	r5, #2
			StackType_t *pxTimerTaskStackBuffer = NULL;
9000f330:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
9000f334:	f7fd fb36 	bl	9000c9a4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
9000f338:	4623      	mov	r3, r4
9000f33a:	9a07      	ldr	r2, [sp, #28]
9000f33c:	9500      	str	r5, [sp, #0]
9000f33e:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
9000f342:	e9cd 1001 	strd	r1, r0, [sp, #4]
9000f346:	4917      	ldr	r1, [pc, #92]	@ (9000f3a4 <xTimerCreateTimerTask+0x94>)
9000f348:	4817      	ldr	r0, [pc, #92]	@ (9000f3a8 <xTimerCreateTimerTask+0x98>)
9000f34a:	f7ff f961 	bl	9000e610 <xTaskCreateStatic>
9000f34e:	4b17      	ldr	r3, [pc, #92]	@ (9000f3ac <xTimerCreateTimerTask+0x9c>)
9000f350:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
9000f352:	b110      	cbz	r0, 9000f35a <xTimerCreateTimerTask+0x4a>
}
9000f354:	2001      	movs	r0, #1
9000f356:	b009      	add	sp, #36	@ 0x24
9000f358:	bdf0      	pop	{r4, r5, r6, r7, pc}
9000f35a:	f04f 0350 	mov.w	r3, #80	@ 0x50
9000f35e:	f383 8811 	msr	BASEPRI, r3
9000f362:	f3bf 8f6f 	isb	sy
9000f366:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
9000f36a:	e7fe      	b.n	9000f36a <xTimerCreateTimerTask+0x5a>
			vListInitialise( &xActiveTimerList1 );
9000f36c:	4f10      	ldr	r7, [pc, #64]	@ (9000f3b0 <xTimerCreateTimerTask+0xa0>)
			vListInitialise( &xActiveTimerList2 );
9000f36e:	4e11      	ldr	r6, [pc, #68]	@ (9000f3b4 <xTimerCreateTimerTask+0xa4>)
			vListInitialise( &xActiveTimerList1 );
9000f370:	4638      	mov	r0, r7
9000f372:	f7fd fc49 	bl	9000cc08 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
9000f376:	4630      	mov	r0, r6
9000f378:	f7fd fc46 	bl	9000cc08 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
9000f37c:	4a0e      	ldr	r2, [pc, #56]	@ (9000f3b8 <xTimerCreateTimerTask+0xa8>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
9000f37e:	9500      	str	r5, [sp, #0]
9000f380:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
9000f382:	6017      	str	r7, [r2, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
9000f384:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
9000f386:	4a0d      	ldr	r2, [pc, #52]	@ (9000f3bc <xTimerCreateTimerTask+0xac>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
9000f388:	4b0d      	ldr	r3, [pc, #52]	@ (9000f3c0 <xTimerCreateTimerTask+0xb0>)
			pxOverflowTimerList = &xActiveTimerList2;
9000f38a:	6016      	str	r6, [r2, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
9000f38c:	4a0d      	ldr	r2, [pc, #52]	@ (9000f3c4 <xTimerCreateTimerTask+0xb4>)
9000f38e:	f7fd fe89 	bl	9000d0a4 <xQueueGenericCreateStatic>
9000f392:	6020      	str	r0, [r4, #0]
				if( xTimerQueue != NULL )
9000f394:	2800      	cmp	r0, #0
9000f396:	d0c2      	beq.n	9000f31e <xTimerCreateTimerTask+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
9000f398:	490b      	ldr	r1, [pc, #44]	@ (9000f3c8 <xTimerCreateTimerTask+0xb8>)
9000f39a:	f7fe fe93 	bl	9000e0c4 <vQueueAddToRegistry>
9000f39e:	e7be      	b.n	9000f31e <xTimerCreateTimerTask+0xe>
9000f3a0:	2402528c 	.word	0x2402528c
9000f3a4:	9002650c 	.word	0x9002650c
9000f3a8:	9000f07d 	.word	0x9000f07d
9000f3ac:	24025288 	.word	0x24025288
9000f3b0:	240252ac 	.word	0x240252ac
9000f3b4:	24025298 	.word	0x24025298
9000f3b8:	24025294 	.word	0x24025294
9000f3bc:	24025290 	.word	0x24025290
9000f3c0:	24025194 	.word	0x24025194
9000f3c4:	240251e4 	.word	0x240251e4
9000f3c8:	90026504 	.word	0x90026504

9000f3cc <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr420_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer, 
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
9000f3cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr, *pOutAddr2;
  uint8_t *pChrom, *pLum;
  
  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
9000f3d0:	4d81      	ldr	r5, [pc, #516]	@ (9000f5d8 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x20c>)
{  
9000f3d2:	4614      	mov	r4, r2
9000f3d4:	468b      	mov	fp, r1
9000f3d6:	b093      	sub	sp, #76	@ 0x4c
  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
9000f3d8:	fba5 5203 	umull	r5, r2, r5, r3
  currentMCU = BlockIndex;
  

  while(currentMCU < (numberMCU + BlockIndex))
9000f3dc:	eb04 2112 	add.w	r1, r4, r2, lsr #8
  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
9000f3e0:	0a13      	lsrs	r3, r2, #8
  while(currentMCU < (numberMCU + BlockIndex))
9000f3e2:	42a1      	cmp	r1, r4
9000f3e4:	f240 80f3 	bls.w	9000f5ce <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x202>
  {
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
9000f3e8:	4a7c      	ldr	r2, [pc, #496]	@ (9000f5dc <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x210>)
9000f3ea:	f8cd b034 	str.w	fp, [sp, #52]	@ 0x34
9000f3ee:	4683      	mov	fp, r0
      if(i == 8)
      {
        pLum = pInBuffer + 128;
      }
      
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
9000f3f0:	f8d2 a010 	ldr.w	sl, [r2, #16]
9000f3f4:	4f7a      	ldr	r7, [pc, #488]	@ (9000f5e0 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x214>)
9000f3f6:	f8df 91f4 	ldr.w	r9, [pc, #500]	@ 9000f5ec <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x220>
9000f3fa:	f8df 81f4 	ldr.w	r8, [pc, #500]	@ 9000f5f0 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x224>
9000f3fe:	f8cd a030 	str.w	sl, [sp, #48]	@ 0x30
9000f402:	940b      	str	r4, [sp, #44]	@ 0x2c
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
9000f404:	e9d2 6e09 	ldrd	r6, lr, [r2, #36]	@ 0x24
9000f408:	e9cd 1310 	strd	r1, r3, [sp, #64]	@ 0x40
          pLum += 64;                      
        }

        pLum = pLum - 128 + 16;
        
        refline += 2*JPEG_ConvertorParams.ScaledWidth;          
9000f40c:	ea4f 024e 	mov.w	r2, lr, lsl #1
9000f410:	960f      	str	r6, [sp, #60]	@ 0x3c
9000f412:	f8cd e028 	str.w	lr, [sp, #40]	@ 0x28
9000f416:	920e      	str	r2, [sp, #56]	@ 0x38
9000f418:	e006      	b.n	9000f428 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x5c>
  while(currentMCU < (numberMCU + BlockIndex))
9000f41a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
      }
    }   
    
    pInBuffer +=  YCBCR_420_BLOCK_SIZE;
9000f41c:	f501 7bc0 	add.w	fp, r1, #384	@ 0x180
  while(currentMCU < (numberMCU + BlockIndex))
9000f420:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
9000f422:	4293      	cmp	r3, r2
9000f424:	f000 80d2 	beq.w	9000f5cc <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x200>
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
9000f428:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
    pChrom = pInBuffer + 256; /* pChroma = pInBuffer + 4*64 */
9000f42a:	f50b 7580 	add.w	r5, fp, #256	@ 0x100
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
9000f42e:	980f      	ldr	r0, [sp, #60]	@ 0x3c
9000f430:	011a      	lsls	r2, r3, #4
9000f432:	3301      	adds	r3, #1
9000f434:	fbb2 f1f0 	udiv	r1, r2, r0
9000f438:	930b      	str	r3, [sp, #44]	@ 0x2c
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
9000f43a:	fb00 2211 	mls	r2, r0, r1, r2
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
9000f43e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
9000f440:	0052      	lsls	r2, r2, #1
9000f442:	fb03 f101 	mul.w	r1, r3, r1
9000f446:	eb02 1401 	add.w	r4, r2, r1, lsl #4
    for(i= 0; i <  16; i+=2)
9000f44a:	2200      	movs	r2, #0
9000f44c:	4659      	mov	r1, fp
9000f44e:	e9cd 5b05 	strd	r5, fp, [sp, #20]
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
9000f452:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
9000f454:	42a3      	cmp	r3, r4
9000f456:	d9e0      	bls.n	9000f41a <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x4e>
        pOutAddr = pOutBuffer + refline;
9000f458:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
        pOutAddr2 = pOutAddr + JPEG_ConvertorParams.ScaledWidth;
9000f45a:	980a      	ldr	r0, [sp, #40]	@ 0x28
        pOutAddr = pOutBuffer + refline;
9000f45c:	191e      	adds	r6, r3, r4
        pOutAddr2 = pOutAddr + JPEG_ConvertorParams.ScaledWidth;
9000f45e:	9109      	str	r1, [sp, #36]	@ 0x24
9000f460:	e9dd 3a05 	ldrd	r3, sl, [sp, #20]
9000f464:	e9cd 4207 	strd	r4, r2, [sp, #28]
9000f468:	461a      	mov	r2, r3
9000f46a:	f106 0530 	add.w	r5, r6, #48	@ 0x30
9000f46e:	4653      	mov	r3, sl
9000f470:	1830      	adds	r0, r6, r0
        for(k= 0; k<2; k++)
9000f472:	f106 0e10 	add.w	lr, r6, #16
9000f476:	4692      	mov	sl, r2
9000f478:	9504      	str	r5, [sp, #16]
9000f47a:	f1ae 0510 	sub.w	r5, lr, #16
          for(j=0; j < 8; j+=2)
9000f47e:	f10a 3cff 	add.w	ip, sl, #4294967295
9000f482:	461c      	mov	r4, r3
    for(i= 0; i <  16; i+=2)
9000f484:	4606      	mov	r6, r0
9000f486:	f8cd a00c 	str.w	sl, [sp, #12]
9000f48a:	e9cd 3001 	strd	r3, r0, [sp, #4]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
9000f48e:	f81c 2f01 	ldrb.w	r2, [ip, #1]!
            pOutAddr += JPEG_BYTES_PER_PIXEL * 2;
9000f492:	3504      	adds	r5, #4
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
9000f494:	4853      	ldr	r0, [pc, #332]	@ (9000f5e4 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x218>)
          for(j=0; j < 8; j+=2)
9000f496:	3402      	adds	r4, #2
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
9000f498:	f89c 1040 	ldrb.w	r1, [ip, #64]	@ 0x40
            pOutAddr2 += JPEG_BYTES_PER_PIXEL * 2;
9000f49c:	3604      	adds	r6, #4
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000f49e:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
          for(j=0; j < 8; j+=2)
9000f4a2:	4575      	cmp	r5, lr
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
9000f4a4:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000f4a8:	f857 2021 	ldr.w	r2, [r7, r1, lsl #2]
            ycomp = (int32_t)(*(pLum +j));
9000f4ac:	f814 ac02 	ldrb.w	sl, [r4, #-2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
9000f4b0:	4440      	add	r0, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000f4b2:	4413      	add	r3, r2
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
9000f4b4:	4a4c      	ldr	r2, [pc, #304]	@ (9000f5e8 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x21c>)
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000f4b6:	eb08 4323 	add.w	r3, r8, r3, asr #16
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
9000f4ba:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
9000f4be:	eb00 020a 	add.w	r2, r0, sl
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f4c2:	4441      	add	r1, r8
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000f4c4:	eb03 0b0a 	add.w	fp, r3, sl
9000f4c8:	f892 2100 	ldrb.w	r2, [r2, #256]	@ 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f4cc:	448a      	add	sl, r1
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000f4ce:	f89b b100 	ldrb.w	fp, [fp, #256]	@ 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f4d2:	f89a a100 	ldrb.w	sl, [sl, #256]	@ 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000f4d6:	ea4f 0b9b 	mov.w	fp, fp, lsr #2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f4da:	ea4f 0ada 	mov.w	sl, sl, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000f4de:	ea4f 1b4b 	mov.w	fp, fp, lsl #5
9000f4e2:	ea4b 2bca 	orr.w	fp, fp, sl, lsl #11
9000f4e6:	ea4b 0bd2 	orr.w	fp, fp, r2, lsr #3
            *(__IO uint16_t *)pOutAddr = 
9000f4ea:	f825 bc04 	strh.w	fp, [r5, #-4]
            ycomp = (int32_t)(*(pLum +j +1));
9000f4ee:	f814 ac01 	ldrb.w	sl, [r4, #-1]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000f4f2:	eb03 020a 	add.w	r2, r3, sl
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f4f6:	eb01 0b0a 	add.w	fp, r1, sl
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
9000f4fa:	4482      	add	sl, r0
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000f4fc:	f892 2100 	ldrb.w	r2, [r2, #256]	@ 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f500:	f89b b100 	ldrb.w	fp, [fp, #256]	@ 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000f504:	ea4f 0292 	mov.w	r2, r2, lsr #2
9000f508:	f89a a100 	ldrb.w	sl, [sl, #256]	@ 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f50c:	ea4f 0bdb 	mov.w	fp, fp, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000f510:	ea4f 1242 	mov.w	r2, r2, lsl #5
9000f514:	ea42 22cb 	orr.w	r2, r2, fp, lsl #11
9000f518:	ea42 02da 	orr.w	r2, r2, sl, lsr #3
            *((__IO uint16_t *)(pOutAddr + 2)) = 
9000f51c:	f825 2c02 	strh.w	r2, [r5, #-2]
            ycomp = (int32_t)(*(pLum +j +8));
9000f520:	f894 a006 	ldrb.w	sl, [r4, #6]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000f524:	eb03 020a 	add.w	r2, r3, sl
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f528:	eb01 0b0a 	add.w	fp, r1, sl
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
9000f52c:	4482      	add	sl, r0
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000f52e:	f892 2100 	ldrb.w	r2, [r2, #256]	@ 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f532:	f89b b100 	ldrb.w	fp, [fp, #256]	@ 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000f536:	ea4f 0292 	mov.w	r2, r2, lsr #2
9000f53a:	f89a a100 	ldrb.w	sl, [sl, #256]	@ 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f53e:	ea4f 0bdb 	mov.w	fp, fp, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000f542:	ea4f 1242 	mov.w	r2, r2, lsl #5
9000f546:	ea42 22cb 	orr.w	r2, r2, fp, lsl #11
9000f54a:	ea42 02da 	orr.w	r2, r2, sl, lsr #3
            *(__IO uint16_t *)pOutAddr2 = 
9000f54e:	f826 2c04 	strh.w	r2, [r6, #-4]
            ycomp = (int32_t)(*(pLum +j +8 +1));
9000f552:	79e2      	ldrb	r2, [r4, #7]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000f554:	4413      	add	r3, r2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f556:	4411      	add	r1, r2
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);         
9000f558:	4402      	add	r2, r0
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000f55a:	f893 3100 	ldrb.w	r3, [r3, #256]	@ 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f55e:	f891 1100 	ldrb.w	r1, [r1, #256]	@ 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000f562:	ea4f 0393 	mov.w	r3, r3, lsr #2
9000f566:	f892 2100 	ldrb.w	r2, [r2, #256]	@ 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f56a:	ea4f 01d1 	mov.w	r1, r1, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000f56e:	ea4f 1343 	mov.w	r3, r3, lsl #5
9000f572:	ea43 23c1 	orr.w	r3, r3, r1, lsl #11
9000f576:	ea43 03d2 	orr.w	r3, r3, r2, lsr #3
            *((__IO uint16_t *)(pOutAddr2 +2)) = 
9000f57a:	f826 3c02 	strh.w	r3, [r6, #-2]
          for(j=0; j < 8; j+=2)
9000f57e:	d186      	bne.n	9000f48e <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xc2>
        for(k= 0; k<2; k++)
9000f580:	f105 0e10 	add.w	lr, r5, #16
9000f584:	9a04      	ldr	r2, [sp, #16]
9000f586:	f8dd a00c 	ldr.w	sl, [sp, #12]
9000f58a:	4596      	cmp	lr, r2
            pChrom++;
9000f58c:	f10a 0a04 	add.w	sl, sl, #4
        for(k= 0; k<2; k++)
9000f590:	e9dd 3001 	ldrd	r3, r0, [sp, #4]
            pOutAddr2 += JPEG_BYTES_PER_PIXEL * 2;
9000f594:	f100 0010 	add.w	r0, r0, #16
          pLum += 64;                      
9000f598:	f103 0340 	add.w	r3, r3, #64	@ 0x40
        for(k= 0; k<2; k++)
9000f59c:	f47f af6d 	bne.w	9000f47a <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xae>
    for(i= 0; i <  16; i+=2)
9000f5a0:	9909      	ldr	r1, [sp, #36]	@ 0x24
9000f5a2:	e9dd 4207 	ldrd	r4, r2, [sp, #28]
9000f5a6:	3202      	adds	r2, #2
9000f5a8:	2a10      	cmp	r2, #16
9000f5aa:	f43f af36 	beq.w	9000f41a <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x4e>
      if(i == 8)
9000f5ae:	2a08      	cmp	r2, #8
9000f5b0:	d008      	beq.n	9000f5c4 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1f8>
        pLum = pLum - 128 + 16;
9000f5b2:	9b06      	ldr	r3, [sp, #24]
9000f5b4:	3310      	adds	r3, #16
9000f5b6:	9306      	str	r3, [sp, #24]
            pChrom++;
9000f5b8:	9b05      	ldr	r3, [sp, #20]
9000f5ba:	3308      	adds	r3, #8
9000f5bc:	9305      	str	r3, [sp, #20]
        refline += 2*JPEG_ConvertorParams.ScaledWidth;          
9000f5be:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
9000f5c0:	441c      	add	r4, r3
9000f5c2:	e746      	b.n	9000f452 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x86>
        pLum = pInBuffer + 128;
9000f5c4:	f101 0380 	add.w	r3, r1, #128	@ 0x80
9000f5c8:	9306      	str	r3, [sp, #24]
9000f5ca:	e7f5      	b.n	9000f5b8 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1ec>
9000f5cc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
  }
  return numberMCU;
}
9000f5ce:	4618      	mov	r0, r3
9000f5d0:	b013      	add	sp, #76	@ 0x4c
9000f5d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9000f5d6:	bf00      	nop
9000f5d8:	aaaaaaab 	.word	0xaaaaaaab
9000f5dc:	240262c0 	.word	0x240262c0
9000f5e0:	240256c0 	.word	0x240256c0
9000f5e4:	24025ac0 	.word	0x24025ac0
9000f5e8:	24025ec0 	.word	0x24025ec0
9000f5ec:	240252c0 	.word	0x240252c0
9000f5f0:	90026514 	.word	0x90026514

9000f5f4 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr422_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
9000f5f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  
  numberMCU = DataCount / YCBCR_422_BLOCK_SIZE;
  currentMCU = BlockIndex;
  

  while(currentMCU < (numberMCU + BlockIndex))
9000f5f8:	eb02 2613 	add.w	r6, r2, r3, lsr #8
{  
9000f5fc:	b08f      	sub	sp, #60	@ 0x3c
  numberMCU = DataCount / YCBCR_422_BLOCK_SIZE;
9000f5fe:	0a1c      	lsrs	r4, r3, #8
  while(currentMCU < (numberMCU + BlockIndex))
9000f600:	42b2      	cmp	r2, r6
9000f602:	f080 8156 	bcs.w	9000f8b2 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2be>
  {
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
9000f606:	4bad      	ldr	r3, [pc, #692]	@ (9000f8bc <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2c8>)
9000f608:	468e      	mov	lr, r1
9000f60a:	4dad      	ldr	r5, [pc, #692]	@ (9000f8c0 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2cc>)
    
    pLum = pInBuffer;
    
    for(i= 0; i <  8; i++)
    {
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
9000f60c:	f8d3 c010 	ldr.w	ip, [r3, #16]
9000f610:	f8df a2b0 	ldr.w	sl, [pc, #688]	@ 9000f8c4 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2d0>
9000f614:	f8df 92b0 	ldr.w	r9, [pc, #688]	@ 9000f8c8 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2d4>
9000f618:	f8df b2b0 	ldr.w	fp, [pc, #688]	@ 9000f8cc <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2d8>
9000f61c:	f8df 82b0 	ldr.w	r8, [pc, #688]	@ 9000f8d0 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2dc>
9000f620:	f8cd c01c 	str.w	ip, [sp, #28]
9000f624:	f8cd e020 	str.w	lr, [sp, #32]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
9000f628:	e9d3 7109 	ldrd	r7, r1, [r3, #36]	@ 0x24
9000f62c:	e9cd 640c 	strd	r6, r4, [sp, #48]	@ 0x30
9000f630:	9106      	str	r1, [sp, #24]
9000f632:	970b      	str	r7, [sp, #44]	@ 0x2c
9000f634:	e007      	b.n	9000f646 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x52>
        
        refline += JPEG_ConvertorParams.ScaledWidth;          
      }
    }   
    
    pInBuffer +=  YCBCR_422_BLOCK_SIZE;
9000f636:	e9dd 0209 	ldrd	r0, r2, [sp, #36]	@ 0x24
  while(currentMCU < (numberMCU + BlockIndex))
9000f63a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
    pInBuffer +=  YCBCR_422_BLOCK_SIZE;
9000f63c:	f500 7080 	add.w	r0, r0, #256	@ 0x100
  while(currentMCU < (numberMCU + BlockIndex))
9000f640:	429a      	cmp	r2, r3
9000f642:	f000 8135 	beq.w	9000f8b0 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2bc>
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
9000f646:	0113      	lsls	r3, r2, #4
9000f648:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
    pChrom = pInBuffer + 128; /* pChroma = pInBuffer + 2*64 */
9000f64a:	f04f 0e08 	mov.w	lr, #8
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
9000f64e:	3201      	adds	r2, #1
    pChrom = pInBuffer + 128; /* pChroma = pInBuffer + 2*64 */
9000f650:	f100 0680 	add.w	r6, r0, #128	@ 0x80
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
9000f654:	fbb3 f1f4 	udiv	r1, r3, r4
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
9000f658:	fb04 3311 	mls	r3, r4, r1, r3
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
9000f65c:	9c06      	ldr	r4, [sp, #24]
9000f65e:	005b      	lsls	r3, r3, #1
9000f660:	fb04 f101 	mul.w	r1, r4, r1
9000f664:	eb03 0cc1 	add.w	ip, r3, r1, lsl #3
    pChrom = pInBuffer + 128; /* pChroma = pInBuffer + 2*64 */
9000f668:	4673      	mov	r3, lr
9000f66a:	4686      	mov	lr, r0
9000f66c:	461f      	mov	r7, r3
9000f66e:	e9cd 0209 	strd	r0, r2, [sp, #36]	@ 0x24
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
9000f672:	9b07      	ldr	r3, [sp, #28]
9000f674:	4563      	cmp	r3, ip
9000f676:	d9de      	bls.n	9000f636 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x42>
        pOutAddr = pOutBuffer + refline;
9000f678:	9b08      	ldr	r3, [sp, #32]
9000f67a:	f10e 0140 	add.w	r1, lr, #64	@ 0x40
9000f67e:	1d32      	adds	r2, r6, #4
9000f680:	9705      	str	r7, [sp, #20]
9000f682:	4463      	add	r3, ip
        for(k= 0; k<2; k++)
9000f684:	f103 0020 	add.w	r0, r3, #32
9000f688:	e9cd ec03 	strd	lr, ip, [sp, #12]
9000f68c:	e9cd 0601 	strd	r0, r6, [sp, #4]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
9000f690:	f892 703c 	ldrb.w	r7, [r2, #60]	@ 0x3c
            pOutAddr += JPEG_BYTES_PER_PIXEL * 2;
9000f694:	3310      	adds	r3, #16
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
9000f696:	f812 0c04 	ldrb.w	r0, [r2, #-4]
        for(k= 0; k<2; k++)
9000f69a:	3140      	adds	r1, #64	@ 0x40
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
9000f69c:	f85a 6027 	ldr.w	r6, [sl, r7, lsl #2]
        for(k= 0; k<2; k++)
9000f6a0:	3204      	adds	r2, #4
            ycomp = (int32_t)(*(pLum +j));
9000f6a2:	f811 cc80 	ldrb.w	ip, [r1, #-128]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
9000f6a6:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f6aa:	4446      	add	r6, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000f6ac:	f85b 0020 	ldr.w	r0, [fp, r0, lsl #2]
9000f6b0:	f859 7027 	ldr.w	r7, [r9, r7, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
9000f6b4:	4444      	add	r4, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000f6b6:	4407      	add	r7, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f6b8:	eb06 000c 	add.w	r0, r6, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000f6bc:	eb08 4727 	add.w	r7, r8, r7, asr #16
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f6c0:	f890 e100 	ldrb.w	lr, [r0, #256]	@ 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
9000f6c4:	eb04 000c 	add.w	r0, r4, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000f6c8:	44bc      	add	ip, r7
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f6ca:	ea4f 0ede 	mov.w	lr, lr, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000f6ce:	f890 0100 	ldrb.w	r0, [r0, #256]	@ 0x100
9000f6d2:	f89c c100 	ldrb.w	ip, [ip, #256]	@ 0x100
9000f6d6:	08c0      	lsrs	r0, r0, #3
9000f6d8:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
9000f6dc:	ea40 20ce 	orr.w	r0, r0, lr, lsl #11
9000f6e0:	ea40 104c 	orr.w	r0, r0, ip, lsl #5
            *(__IO uint16_t *)pOutAddr = 
9000f6e4:	f823 0c10 	strh.w	r0, [r3, #-16]
            ycomp = (int32_t)(*(pLum +j +1));
9000f6e8:	f811 0c7f 	ldrb.w	r0, [r1, #-127]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f6ec:	4406      	add	r6, r0
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);         
9000f6ee:	4404      	add	r4, r0
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000f6f0:	4438      	add	r0, r7
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f6f2:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000f6f6:	f894 4100 	ldrb.w	r4, [r4, #256]	@ 0x100
9000f6fa:	f890 0100 	ldrb.w	r0, [r0, #256]	@ 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f6fe:	08f6      	lsrs	r6, r6, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000f700:	08e4      	lsrs	r4, r4, #3
9000f702:	0880      	lsrs	r0, r0, #2
9000f704:	ea44 24c6 	orr.w	r4, r4, r6, lsl #11
9000f708:	ea44 1440 	orr.w	r4, r4, r0, lsl #5
            *((__IO uint16_t *)(pOutAddr + 2)) = 
9000f70c:	f823 4c0e 	strh.w	r4, [r3, #-14]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
9000f710:	f892 7039 	ldrb.w	r7, [r2, #57]	@ 0x39
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
9000f714:	f812 0c07 	ldrb.w	r0, [r2, #-7]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
9000f718:	f85a 6027 	ldr.w	r6, [sl, r7, lsl #2]
            ycomp = (int32_t)(*(pLum +j));
9000f71c:	f811 cc7e 	ldrb.w	ip, [r1, #-126]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
9000f720:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f724:	4446      	add	r6, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000f726:	f85b 0020 	ldr.w	r0, [fp, r0, lsl #2]
9000f72a:	f859 7027 	ldr.w	r7, [r9, r7, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
9000f72e:	4444      	add	r4, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000f730:	4407      	add	r7, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f732:	eb06 000c 	add.w	r0, r6, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000f736:	eb08 4727 	add.w	r7, r8, r7, asr #16
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f73a:	f890 e100 	ldrb.w	lr, [r0, #256]	@ 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
9000f73e:	eb04 000c 	add.w	r0, r4, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000f742:	44bc      	add	ip, r7
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f744:	ea4f 0ede 	mov.w	lr, lr, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000f748:	f890 0100 	ldrb.w	r0, [r0, #256]	@ 0x100
9000f74c:	f89c c100 	ldrb.w	ip, [ip, #256]	@ 0x100
9000f750:	08c0      	lsrs	r0, r0, #3
9000f752:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
9000f756:	ea40 20ce 	orr.w	r0, r0, lr, lsl #11
9000f75a:	ea40 104c 	orr.w	r0, r0, ip, lsl #5
            *(__IO uint16_t *)pOutAddr = 
9000f75e:	f823 0c0c 	strh.w	r0, [r3, #-12]
            ycomp = (int32_t)(*(pLum +j +1));
9000f762:	f811 0c7d 	ldrb.w	r0, [r1, #-125]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f766:	4406      	add	r6, r0
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);         
9000f768:	4404      	add	r4, r0
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000f76a:	4438      	add	r0, r7
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f76c:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000f770:	f894 4100 	ldrb.w	r4, [r4, #256]	@ 0x100
9000f774:	f890 0100 	ldrb.w	r0, [r0, #256]	@ 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f778:	08f6      	lsrs	r6, r6, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000f77a:	08e4      	lsrs	r4, r4, #3
9000f77c:	0880      	lsrs	r0, r0, #2
9000f77e:	ea44 24c6 	orr.w	r4, r4, r6, lsl #11
9000f782:	ea44 1440 	orr.w	r4, r4, r0, lsl #5
            *((__IO uint16_t *)(pOutAddr + 2)) = 
9000f786:	f823 4c0a 	strh.w	r4, [r3, #-10]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
9000f78a:	f812 0c06 	ldrb.w	r0, [r2, #-6]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
9000f78e:	f892 703a 	ldrb.w	r7, [r2, #58]	@ 0x3a
            ycomp = (int32_t)(*(pLum +j));
9000f792:	f811 cc7c 	ldrb.w	ip, [r1, #-124]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
9000f796:	f85a 6027 	ldr.w	r6, [sl, r7, lsl #2]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
9000f79a:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000f79e:	f859 7027 	ldr.w	r7, [r9, r7, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f7a2:	4446      	add	r6, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000f7a4:	f85b 0020 	ldr.w	r0, [fp, r0, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
9000f7a8:	4444      	add	r4, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000f7aa:	4407      	add	r7, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f7ac:	eb06 000c 	add.w	r0, r6, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000f7b0:	eb08 4727 	add.w	r7, r8, r7, asr #16
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f7b4:	f890 e100 	ldrb.w	lr, [r0, #256]	@ 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
9000f7b8:	eb04 000c 	add.w	r0, r4, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000f7bc:	44bc      	add	ip, r7
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f7be:	ea4f 0ede 	mov.w	lr, lr, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000f7c2:	f890 0100 	ldrb.w	r0, [r0, #256]	@ 0x100
9000f7c6:	f89c c100 	ldrb.w	ip, [ip, #256]	@ 0x100
9000f7ca:	08c0      	lsrs	r0, r0, #3
9000f7cc:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
9000f7d0:	ea40 20ce 	orr.w	r0, r0, lr, lsl #11
9000f7d4:	ea40 104c 	orr.w	r0, r0, ip, lsl #5
            *(__IO uint16_t *)pOutAddr = 
9000f7d8:	f823 0c08 	strh.w	r0, [r3, #-8]
            ycomp = (int32_t)(*(pLum +j +1));
9000f7dc:	f811 0c7b 	ldrb.w	r0, [r1, #-123]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f7e0:	4406      	add	r6, r0
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);         
9000f7e2:	4404      	add	r4, r0
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000f7e4:	4438      	add	r0, r7
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f7e6:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000f7ea:	f894 4100 	ldrb.w	r4, [r4, #256]	@ 0x100
9000f7ee:	f890 0100 	ldrb.w	r0, [r0, #256]	@ 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f7f2:	08f6      	lsrs	r6, r6, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000f7f4:	08e4      	lsrs	r4, r4, #3
9000f7f6:	0880      	lsrs	r0, r0, #2
9000f7f8:	ea44 24c6 	orr.w	r4, r4, r6, lsl #11
9000f7fc:	ea44 1440 	orr.w	r4, r4, r0, lsl #5
            *((__IO uint16_t *)(pOutAddr + 2)) = 
9000f800:	f823 4c06 	strh.w	r4, [r3, #-6]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
9000f804:	f892 703b 	ldrb.w	r7, [r2, #59]	@ 0x3b
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
9000f808:	f812 0c05 	ldrb.w	r0, [r2, #-5]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
9000f80c:	f85a 6027 	ldr.w	r6, [sl, r7, lsl #2]
            ycomp = (int32_t)(*(pLum +j));
9000f810:	f811 cc7a 	ldrb.w	ip, [r1, #-122]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
9000f814:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f818:	4446      	add	r6, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000f81a:	f85b 0020 	ldr.w	r0, [fp, r0, lsl #2]
9000f81e:	f859 7027 	ldr.w	r7, [r9, r7, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
9000f822:	4444      	add	r4, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000f824:	4407      	add	r7, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f826:	eb06 000c 	add.w	r0, r6, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000f82a:	eb08 4727 	add.w	r7, r8, r7, asr #16
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f82e:	f890 e100 	ldrb.w	lr, [r0, #256]	@ 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
9000f832:	eb04 000c 	add.w	r0, r4, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000f836:	44bc      	add	ip, r7
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f838:	ea4f 0ede 	mov.w	lr, lr, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000f83c:	f890 0100 	ldrb.w	r0, [r0, #256]	@ 0x100
9000f840:	f89c c100 	ldrb.w	ip, [ip, #256]	@ 0x100
9000f844:	08c0      	lsrs	r0, r0, #3
9000f846:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
9000f84a:	ea40 20ce 	orr.w	r0, r0, lr, lsl #11
9000f84e:	ea40 104c 	orr.w	r0, r0, ip, lsl #5
            *(__IO uint16_t *)pOutAddr = 
9000f852:	f823 0c04 	strh.w	r0, [r3, #-4]
            ycomp = (int32_t)(*(pLum +j +1));
9000f856:	f811 0c79 	ldrb.w	r0, [r1, #-121]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f85a:	4406      	add	r6, r0
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);         
9000f85c:	4404      	add	r4, r0
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000f85e:	4438      	add	r0, r7
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f860:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000f864:	f894 4100 	ldrb.w	r4, [r4, #256]	@ 0x100
9000f868:	f890 0100 	ldrb.w	r0, [r0, #256]	@ 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f86c:	08f6      	lsrs	r6, r6, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000f86e:	08e4      	lsrs	r4, r4, #3
9000f870:	0880      	lsrs	r0, r0, #2
9000f872:	ea44 24c6 	orr.w	r4, r4, r6, lsl #11
9000f876:	ea44 1440 	orr.w	r4, r4, r0, lsl #5
            *((__IO uint16_t *)(pOutAddr + 2)) = 
9000f87a:	f823 4c02 	strh.w	r4, [r3, #-2]
        for(k= 0; k<2; k++)
9000f87e:	9801      	ldr	r0, [sp, #4]
9000f880:	4283      	cmp	r3, r0
9000f882:	f47f af05 	bne.w	9000f690 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x9c>
        refline += JPEG_ConvertorParams.ScaledWidth;          
9000f886:	9b06      	ldr	r3, [sp, #24]
            pChrom++;
9000f888:	e9dd c704 	ldrd	ip, r7, [sp, #16]
9000f88c:	e9dd 6e02 	ldrd	r6, lr, [sp, #8]
    for(i= 0; i <  8; i++)
9000f890:	3f01      	subs	r7, #1
        refline += JPEG_ConvertorParams.ScaledWidth;          
9000f892:	449c      	add	ip, r3
            pChrom++;
9000f894:	f106 0608 	add.w	r6, r6, #8
        pLum = pLum - 128 + 8;
9000f898:	f10e 0e08 	add.w	lr, lr, #8
    for(i= 0; i <  8; i++)
9000f89c:	f47f aee9 	bne.w	9000f672 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x7e>
  while(currentMCU < (numberMCU + BlockIndex))
9000f8a0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
    pInBuffer +=  YCBCR_422_BLOCK_SIZE;
9000f8a2:	e9dd 0209 	ldrd	r0, r2, [sp, #36]	@ 0x24
  while(currentMCU < (numberMCU + BlockIndex))
9000f8a6:	429a      	cmp	r2, r3
    pInBuffer +=  YCBCR_422_BLOCK_SIZE;
9000f8a8:	f500 7080 	add.w	r0, r0, #256	@ 0x100
  while(currentMCU < (numberMCU + BlockIndex))
9000f8ac:	f47f aecb 	bne.w	9000f646 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x52>
9000f8b0:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
  }
  return numberMCU;
}
9000f8b2:	4620      	mov	r0, r4
9000f8b4:	b00f      	add	sp, #60	@ 0x3c
9000f8b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9000f8ba:	bf00      	nop
9000f8bc:	240262c0 	.word	0x240262c0
9000f8c0:	24025ac0 	.word	0x24025ac0
9000f8c4:	24025ec0 	.word	0x24025ec0
9000f8c8:	240256c0 	.word	0x240256c0
9000f8cc:	240252c0 	.word	0x240252c0
9000f8d0:	90026514 	.word	0x90026514

9000f8d4 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr444_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
9000f8d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;
  
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
9000f8d8:	4cb1      	ldr	r4, [pc, #708]	@ (9000fba0 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2cc>)
{  
9000f8da:	4691      	mov	r9, r2
9000f8dc:	b08b      	sub	sp, #44	@ 0x2c
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
9000f8de:	fba4 4203 	umull	r4, r2, r4, r3
{  
9000f8e2:	9102      	str	r1, [sp, #8]
  currentMCU = BlockIndex;
  

  while(currentMCU < (numberMCU + BlockIndex))
9000f8e4:	eb09 1bd2 	add.w	fp, r9, r2, lsr #7
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
9000f8e8:	09d3      	lsrs	r3, r2, #7
  while(currentMCU < (numberMCU + BlockIndex))
9000f8ea:	45d9      	cmp	r9, fp
9000f8ec:	f080 8153 	bcs.w	9000fb96 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2c2>
  {

    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
9000f8f0:	4aac      	ldr	r2, [pc, #688]	@ (9000fba4 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2d0>)
9000f8f2:	4682      	mov	sl, r0
#elif (JPEG_RGB_FORMAT == JPEG_RGB565)  
            
            ycomp = (int32_t)(*(pLum +j));
          
            *(__IO uint16_t *)pOutAddr = 
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f8f4:	4cac      	ldr	r4, [pc, #688]	@ (9000fba8 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2d4>)
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
9000f8f6:	f8df e2b8 	ldr.w	lr, [pc, #696]	@ 9000fbb0 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2dc>
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
9000f8fa:	f8df c2b8 	ldr.w	ip, [pc, #696]	@ 9000fbb4 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2e0>
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000f8fe:	48ab      	ldr	r0, [pc, #684]	@ (9000fbac <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2d8>)
9000f900:	f8df 82b4 	ldr.w	r8, [pc, #692]	@ 9000fbb8 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2e4>
9000f904:	9309      	str	r3, [sp, #36]	@ 0x24
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
9000f906:	e9d2 6109 	ldrd	r6, r1, [r2, #36]	@ 0x24
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
9000f90a:	6912      	ldr	r2, [r2, #16]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
9000f90c:	9103      	str	r1, [sp, #12]
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
9000f90e:	9206      	str	r2, [sp, #24]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000f910:	e9cd 6b07 	strd	r6, fp, [sp, #28]
9000f914:	e9cd a904 	strd	sl, r9, [sp, #16]
9000f918:	e007      	b.n	9000f92a <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x56>

        refline += JPEG_ConvertorParams.ScaledWidth;          
      }
    }   
    
    pInBuffer +=  YCBCR_444_BLOCK_SIZE;
9000f91a:	9b04      	ldr	r3, [sp, #16]
  while(currentMCU < (numberMCU + BlockIndex))
9000f91c:	9a08      	ldr	r2, [sp, #32]
    pInBuffer +=  YCBCR_444_BLOCK_SIZE;
9000f91e:	33c0      	adds	r3, #192	@ 0xc0
9000f920:	9304      	str	r3, [sp, #16]
  while(currentMCU < (numberMCU + BlockIndex))
9000f922:	9b05      	ldr	r3, [sp, #20]
9000f924:	4293      	cmp	r3, r2
9000f926:	f000 8135 	beq.w	9000fb94 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2c0>
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
9000f92a:	9e05      	ldr	r6, [sp, #20]
9000f92c:	9f07      	ldr	r7, [sp, #28]
9000f92e:	00f1      	lsls	r1, r6, #3
9000f930:	3601      	adds	r6, #1
    pChrom = pInBuffer + 64; /* pChroma = pInBuffer + 4*64 */
9000f932:	9a04      	ldr	r2, [sp, #16]
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
9000f934:	9605      	str	r6, [sp, #20]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
9000f936:	9e03      	ldr	r6, [sp, #12]
    pChrom = pInBuffer + 64; /* pChroma = pInBuffer + 4*64 */
9000f938:	f102 0340 	add.w	r3, r2, #64	@ 0x40
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
9000f93c:	fbb1 f5f7 	udiv	r5, r1, r7
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
9000f940:	fb07 1115 	mls	r1, r7, r5, r1
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
9000f944:	fb06 f505 	mul.w	r5, r6, r5
9000f948:	0049      	lsls	r1, r1, #1
9000f94a:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
    pChrom = pInBuffer + 64; /* pChroma = pInBuffer + 4*64 */
9000f94e:	2508      	movs	r5, #8
9000f950:	468a      	mov	sl, r1
9000f952:	9501      	str	r5, [sp, #4]
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
9000f954:	9906      	ldr	r1, [sp, #24]
9000f956:	4551      	cmp	r1, sl
9000f958:	d9df      	bls.n	9000f91a <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x46>
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
9000f95a:	f893 7040 	ldrb.w	r7, [r3, #64]	@ 0x40
          pLum += 8;
9000f95e:	3208      	adds	r2, #8
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
9000f960:	7819      	ldrb	r1, [r3, #0]
            pChrom++;
9000f962:	3308      	adds	r3, #8
            ycomp = (int32_t)(*(pLum +j));
9000f964:	f812 5c08 	ldrb.w	r5, [r2, #-8]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000f968:	f850 9027 	ldr.w	r9, [r0, r7, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f96c:	f85e 6027 	ldr.w	r6, [lr, r7, lsl #2]
9000f970:	4425      	add	r5, r4
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
9000f972:	f85c 7021 	ldr.w	r7, [ip, r1, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000f976:	f858 1021 	ldr.w	r1, [r8, r1, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f97a:	442e      	add	r6, r5
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
9000f97c:	442f      	add	r7, r5
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000f97e:	4449      	add	r1, r9
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f980:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000f984:	eb05 4121 	add.w	r1, r5, r1, asr #16
9000f988:	f897 5100 	ldrb.w	r5, [r7, #256]	@ 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f98c:	08f6      	lsrs	r6, r6, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000f98e:	f891 1100 	ldrb.w	r1, [r1, #256]	@ 0x100
9000f992:	08ed      	lsrs	r5, r5, #3
9000f994:	0889      	lsrs	r1, r1, #2
9000f996:	ea45 25c6 	orr.w	r5, r5, r6, lsl #11
9000f99a:	ea45 1541 	orr.w	r5, r5, r1, lsl #5
            *(__IO uint16_t *)pOutAddr = 
9000f99e:	9902      	ldr	r1, [sp, #8]
9000f9a0:	f821 500a 	strh.w	r5, [r1, sl]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
9000f9a4:	f893 7039 	ldrb.w	r7, [r3, #57]	@ 0x39
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
9000f9a8:	f813 1c07 	ldrb.w	r1, [r3, #-7]
            ycomp = (int32_t)(*(pLum +j));
9000f9ac:	f812 5c07 	ldrb.w	r5, [r2, #-7]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000f9b0:	f850 9027 	ldr.w	r9, [r0, r7, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f9b4:	4425      	add	r5, r4
9000f9b6:	f85e 6027 	ldr.w	r6, [lr, r7, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
9000f9ba:	f85c 7021 	ldr.w	r7, [ip, r1, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000f9be:	f858 1021 	ldr.w	r1, [r8, r1, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f9c2:	442e      	add	r6, r5
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
9000f9c4:	442f      	add	r7, r5
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000f9c6:	4449      	add	r1, r9
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f9c8:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000f9cc:	eb05 4121 	add.w	r1, r5, r1, asr #16
9000f9d0:	f897 5100 	ldrb.w	r5, [r7, #256]	@ 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f9d4:	08f6      	lsrs	r6, r6, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000f9d6:	f891 1100 	ldrb.w	r1, [r1, #256]	@ 0x100
9000f9da:	08ed      	lsrs	r5, r5, #3
9000f9dc:	0889      	lsrs	r1, r1, #2
9000f9de:	ea45 25c6 	orr.w	r5, r5, r6, lsl #11
9000f9e2:	ea45 1541 	orr.w	r5, r5, r1, lsl #5
        pOutAddr = pOutBuffer+ refline;
9000f9e6:	9902      	ldr	r1, [sp, #8]
9000f9e8:	4451      	add	r1, sl
            *(__IO uint16_t *)pOutAddr = 
9000f9ea:	804d      	strh	r5, [r1, #2]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
9000f9ec:	f893 903a 	ldrb.w	r9, [r3, #58]	@ 0x3a
            ycomp = (int32_t)(*(pLum +j));
9000f9f0:	f812 6c06 	ldrb.w	r6, [r2, #-6]
        refline += JPEG_ConvertorParams.ScaledWidth;          
9000f9f4:	9d03      	ldr	r5, [sp, #12]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f9f6:	4426      	add	r6, r4
9000f9f8:	f85e 7029 	ldr.w	r7, [lr, r9, lsl #2]
        refline += JPEG_ConvertorParams.ScaledWidth;          
9000f9fc:	44aa      	add	sl, r5
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
9000f9fe:	f813 5c06 	ldrb.w	r5, [r3, #-6]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000fa02:	4437      	add	r7, r6
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000fa04:	f850 b029 	ldr.w	fp, [r0, r9, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
9000fa08:	f85c 9025 	ldr.w	r9, [ip, r5, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000fa0c:	f897 7100 	ldrb.w	r7, [r7, #256]	@ 0x100
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000fa10:	f858 5025 	ldr.w	r5, [r8, r5, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
9000fa14:	44b1      	add	r9, r6
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000fa16:	08ff      	lsrs	r7, r7, #3
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000fa18:	445d      	add	r5, fp
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000fa1a:	eb06 4525 	add.w	r5, r6, r5, asr #16
9000fa1e:	f899 6100 	ldrb.w	r6, [r9, #256]	@ 0x100
9000fa22:	f895 5100 	ldrb.w	r5, [r5, #256]	@ 0x100
9000fa26:	08f6      	lsrs	r6, r6, #3
9000fa28:	08ad      	lsrs	r5, r5, #2
9000fa2a:	ea46 26c7 	orr.w	r6, r6, r7, lsl #11
9000fa2e:	ea46 1645 	orr.w	r6, r6, r5, lsl #5
            *(__IO uint16_t *)pOutAddr = 
9000fa32:	808e      	strh	r6, [r1, #4]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
9000fa34:	f893 903b 	ldrb.w	r9, [r3, #59]	@ 0x3b
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
9000fa38:	f813 5c05 	ldrb.w	r5, [r3, #-5]
            ycomp = (int32_t)(*(pLum +j));
9000fa3c:	f812 6c05 	ldrb.w	r6, [r2, #-5]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000fa40:	f850 b029 	ldr.w	fp, [r0, r9, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000fa44:	f85e 7029 	ldr.w	r7, [lr, r9, lsl #2]
9000fa48:	4426      	add	r6, r4
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
9000fa4a:	f85c 9025 	ldr.w	r9, [ip, r5, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000fa4e:	f858 5025 	ldr.w	r5, [r8, r5, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000fa52:	4437      	add	r7, r6
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
9000fa54:	44b1      	add	r9, r6
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000fa56:	445d      	add	r5, fp
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000fa58:	f897 7100 	ldrb.w	r7, [r7, #256]	@ 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000fa5c:	eb06 4525 	add.w	r5, r6, r5, asr #16
9000fa60:	f899 6100 	ldrb.w	r6, [r9, #256]	@ 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000fa64:	08ff      	lsrs	r7, r7, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000fa66:	f895 5100 	ldrb.w	r5, [r5, #256]	@ 0x100
9000fa6a:	08f6      	lsrs	r6, r6, #3
9000fa6c:	08ad      	lsrs	r5, r5, #2
9000fa6e:	ea46 26c7 	orr.w	r6, r6, r7, lsl #11
9000fa72:	ea46 1645 	orr.w	r6, r6, r5, lsl #5
            *(__IO uint16_t *)pOutAddr = 
9000fa76:	80ce      	strh	r6, [r1, #6]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
9000fa78:	f893 903c 	ldrb.w	r9, [r3, #60]	@ 0x3c
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
9000fa7c:	f813 5c04 	ldrb.w	r5, [r3, #-4]
            ycomp = (int32_t)(*(pLum +j));
9000fa80:	f812 6c04 	ldrb.w	r6, [r2, #-4]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000fa84:	f850 b029 	ldr.w	fp, [r0, r9, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000fa88:	4426      	add	r6, r4
9000fa8a:	f85e 7029 	ldr.w	r7, [lr, r9, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
9000fa8e:	f85c 9025 	ldr.w	r9, [ip, r5, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000fa92:	f858 5025 	ldr.w	r5, [r8, r5, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000fa96:	4437      	add	r7, r6
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
9000fa98:	44b1      	add	r9, r6
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000fa9a:	445d      	add	r5, fp
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000fa9c:	f897 7100 	ldrb.w	r7, [r7, #256]	@ 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000faa0:	eb06 4525 	add.w	r5, r6, r5, asr #16
9000faa4:	f899 6100 	ldrb.w	r6, [r9, #256]	@ 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000faa8:	08ff      	lsrs	r7, r7, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000faaa:	f895 5100 	ldrb.w	r5, [r5, #256]	@ 0x100
9000faae:	08f6      	lsrs	r6, r6, #3
9000fab0:	08ad      	lsrs	r5, r5, #2
9000fab2:	ea46 26c7 	orr.w	r6, r6, r7, lsl #11
9000fab6:	ea46 1645 	orr.w	r6, r6, r5, lsl #5
            *(__IO uint16_t *)pOutAddr = 
9000faba:	810e      	strh	r6, [r1, #8]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
9000fabc:	f893 903d 	ldrb.w	r9, [r3, #61]	@ 0x3d
            ycomp = (int32_t)(*(pLum +j));
9000fac0:	f812 6c03 	ldrb.w	r6, [r2, #-3]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000fac4:	f85e 7029 	ldr.w	r7, [lr, r9, lsl #2]
9000fac8:	4426      	add	r6, r4
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
9000faca:	f813 5c03 	ldrb.w	r5, [r3, #-3]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000face:	f850 b029 	ldr.w	fp, [r0, r9, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000fad2:	4437      	add	r7, r6
9000fad4:	f897 7100 	ldrb.w	r7, [r7, #256]	@ 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
9000fad8:	f85c 9025 	ldr.w	r9, [ip, r5, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000fadc:	f858 5025 	ldr.w	r5, [r8, r5, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000fae0:	08ff      	lsrs	r7, r7, #3
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
9000fae2:	44b1      	add	r9, r6
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000fae4:	445d      	add	r5, fp
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000fae6:	eb06 4525 	add.w	r5, r6, r5, asr #16
9000faea:	f899 6100 	ldrb.w	r6, [r9, #256]	@ 0x100
9000faee:	f895 5100 	ldrb.w	r5, [r5, #256]	@ 0x100
9000faf2:	08f6      	lsrs	r6, r6, #3
9000faf4:	08ad      	lsrs	r5, r5, #2
9000faf6:	ea46 26c7 	orr.w	r6, r6, r7, lsl #11
9000fafa:	ea46 1645 	orr.w	r6, r6, r5, lsl #5
            *(__IO uint16_t *)pOutAddr = 
9000fafe:	814e      	strh	r6, [r1, #10]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
9000fb00:	f893 903e 	ldrb.w	r9, [r3, #62]	@ 0x3e
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
9000fb04:	f813 5c02 	ldrb.w	r5, [r3, #-2]
            ycomp = (int32_t)(*(pLum +j));
9000fb08:	f812 6c02 	ldrb.w	r6, [r2, #-2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000fb0c:	f850 b029 	ldr.w	fp, [r0, r9, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000fb10:	4426      	add	r6, r4
9000fb12:	f85e 7029 	ldr.w	r7, [lr, r9, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
9000fb16:	f85c 9025 	ldr.w	r9, [ip, r5, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000fb1a:	f858 5025 	ldr.w	r5, [r8, r5, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000fb1e:	4437      	add	r7, r6
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
9000fb20:	44b1      	add	r9, r6
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000fb22:	445d      	add	r5, fp
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000fb24:	f897 7100 	ldrb.w	r7, [r7, #256]	@ 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000fb28:	eb06 4525 	add.w	r5, r6, r5, asr #16
9000fb2c:	f899 6100 	ldrb.w	r6, [r9, #256]	@ 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000fb30:	08ff      	lsrs	r7, r7, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000fb32:	f895 5100 	ldrb.w	r5, [r5, #256]	@ 0x100
9000fb36:	08f6      	lsrs	r6, r6, #3
9000fb38:	08ad      	lsrs	r5, r5, #2
9000fb3a:	ea46 26c7 	orr.w	r6, r6, r7, lsl #11
9000fb3e:	ea46 1645 	orr.w	r6, r6, r5, lsl #5
            *(__IO uint16_t *)pOutAddr = 
9000fb42:	818e      	strh	r6, [r1, #12]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
9000fb44:	f893 903f 	ldrb.w	r9, [r3, #63]	@ 0x3f
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
9000fb48:	f813 5c01 	ldrb.w	r5, [r3, #-1]
            ycomp = (int32_t)(*(pLum +j));
9000fb4c:	f812 6c01 	ldrb.w	r6, [r2, #-1]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000fb50:	f85e 7029 	ldr.w	r7, [lr, r9, lsl #2]
9000fb54:	4426      	add	r6, r4
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000fb56:	f850 b029 	ldr.w	fp, [r0, r9, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
9000fb5a:	f85c 9025 	ldr.w	r9, [ip, r5, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000fb5e:	f858 5025 	ldr.w	r5, [r8, r5, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000fb62:	4437      	add	r7, r6
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
9000fb64:	44b1      	add	r9, r6
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000fb66:	445d      	add	r5, fp
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000fb68:	f897 7100 	ldrb.w	r7, [r7, #256]	@ 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000fb6c:	eb06 4525 	add.w	r5, r6, r5, asr #16
9000fb70:	f899 6100 	ldrb.w	r6, [r9, #256]	@ 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000fb74:	08ff      	lsrs	r7, r7, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000fb76:	f895 5100 	ldrb.w	r5, [r5, #256]	@ 0x100
9000fb7a:	08f6      	lsrs	r6, r6, #3
9000fb7c:	08ad      	lsrs	r5, r5, #2
9000fb7e:	ea46 26c7 	orr.w	r6, r6, r7, lsl #11
9000fb82:	ea46 1645 	orr.w	r6, r6, r5, lsl #5
            *(__IO uint16_t *)pOutAddr = 
9000fb86:	81ce      	strh	r6, [r1, #14]
    for(i= 0; i <  8; i++)
9000fb88:	9901      	ldr	r1, [sp, #4]
9000fb8a:	3901      	subs	r1, #1
9000fb8c:	9101      	str	r1, [sp, #4]
9000fb8e:	f43f aec4 	beq.w	9000f91a <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x46>
9000fb92:	e6df      	b.n	9000f954 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x80>
9000fb94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
  }
  return numberMCU;
}
9000fb96:	4618      	mov	r0, r3
9000fb98:	b00b      	add	sp, #44	@ 0x2c
9000fb9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9000fb9e:	bf00      	nop
9000fba0:	aaaaaaab 	.word	0xaaaaaaab
9000fba4:	240262c0 	.word	0x240262c0
9000fba8:	90026514 	.word	0x90026514
9000fbac:	240256c0 	.word	0x240256c0
9000fbb0:	24025ec0 	.word	0x24025ec0
9000fbb4:	24025ac0 	.word	0x24025ac0
9000fbb8:	240252c0 	.word	0x240252c0

9000fbbc <JPEG_MCU_Gray_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_Gray_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
9000fbbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  
  numberMCU = DataCount / GRAY_444_BLOCK_SIZE;
  currentMCU = BlockIndex;
  
  while(currentMCU < (numberMCU + BlockIndex))
9000fbc0:	eb02 1993 	add.w	r9, r2, r3, lsr #6
{
9000fbc4:	4606      	mov	r6, r0
9000fbc6:	b083      	sub	sp, #12
  numberMCU = DataCount / GRAY_444_BLOCK_SIZE;
9000fbc8:	0998      	lsrs	r0, r3, #6
  while(currentMCU < (numberMCU + BlockIndex))
9000fbca:	4591      	cmp	r9, r2
9000fbcc:	f240 809d 	bls.w	9000fd0a <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x14e>
  {
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
9000fbd0:	4b4f      	ldr	r3, [pc, #316]	@ (9000fd10 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x154>)
9000fbd2:	460c      	mov	r4, r1
9000fbd4:	4615      	mov	r5, r2
    pLum = pInBuffer;
    
    for(i= 0; i <  8; i++)
    { 
      pOutAddr = pOutBuffer + refline;
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
9000fbd6:	4686      	mov	lr, r0
9000fbd8:	f8d3 8010 	ldr.w	r8, [r3, #16]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
9000fbdc:	e9d3 1709 	ldrd	r1, r7, [r3, #36]	@ 0x24
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
9000fbe0:	f8cd 8004 	str.w	r8, [sp, #4]
9000fbe4:	e004      	b.n	9000fbf0 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x34>
  while(currentMCU < (numberMCU + BlockIndex))
9000fbe6:	45a9      	cmp	r9, r5

        refline += JPEG_ConvertorParams.ScaledWidth;        
      }
    }
    
    pInBuffer +=  GRAY_444_BLOCK_SIZE;    
9000fbe8:	f106 0640 	add.w	r6, r6, #64	@ 0x40
  while(currentMCU < (numberMCU + BlockIndex))
9000fbec:	f000 808c 	beq.w	9000fd08 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x14c>
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
9000fbf0:	00ea      	lsls	r2, r5, #3
    currentMCU++;
9000fbf2:	4633      	mov	r3, r6
9000fbf4:	f04f 0a08 	mov.w	sl, #8
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
9000fbf8:	3501      	adds	r5, #1
9000fbfa:	fbb2 f0f1 	udiv	r0, r2, r1
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
9000fbfe:	fb01 2210 	mls	r2, r1, r0, r2
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
9000fc02:	fb07 f000 	mul.w	r0, r7, r0
9000fc06:	0052      	lsls	r2, r2, #1
9000fc08:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
9000fc0c:	9801      	ldr	r0, [sp, #4]
9000fc0e:	4290      	cmp	r0, r2
9000fc10:	d9e9      	bls.n	9000fbe6 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x2a>
          ySample =   (uint32_t)(*pLum);
9000fc12:	f893 8000 	ldrb.w	r8, [r3]
      pOutAddr = pOutBuffer + refline;
9000fc16:	18a0      	adds	r0, r4, r2
          pLum++;
9000fc18:	3308      	adds	r3, #8
    for(i= 0; i <  8; i++)
9000fc1a:	f1ba 0a01 	subs.w	sl, sl, #1
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);     
9000fc1e:	ea4f 0cd8 	mov.w	ip, r8, lsr #3
9000fc22:	ea4f 0898 	mov.w	r8, r8, lsr #2
9000fc26:	ea4f 2bcc 	mov.w	fp, ip, lsl #11
9000fc2a:	ea4b 1848 	orr.w	r8, fp, r8, lsl #5
9000fc2e:	ea4c 0c08 	orr.w	ip, ip, r8
9000fc32:	f824 c002 	strh.w	ip, [r4, r2]
        refline += JPEG_ConvertorParams.ScaledWidth;        
9000fc36:	443a      	add	r2, r7
          ySample =   (uint32_t)(*pLum);
9000fc38:	f813 8c07 	ldrb.w	r8, [r3, #-7]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);     
9000fc3c:	ea4f 0cd8 	mov.w	ip, r8, lsr #3
9000fc40:	ea4f 0898 	mov.w	r8, r8, lsr #2
9000fc44:	ea4f 2bcc 	mov.w	fp, ip, lsl #11
9000fc48:	ea4b 1848 	orr.w	r8, fp, r8, lsl #5
9000fc4c:	ea4c 0c08 	orr.w	ip, ip, r8
9000fc50:	f8a0 c002 	strh.w	ip, [r0, #2]
          ySample =   (uint32_t)(*pLum);
9000fc54:	f813 8c06 	ldrb.w	r8, [r3, #-6]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);     
9000fc58:	ea4f 0cd8 	mov.w	ip, r8, lsr #3
9000fc5c:	ea4f 0898 	mov.w	r8, r8, lsr #2
9000fc60:	ea4f 2bcc 	mov.w	fp, ip, lsl #11
9000fc64:	ea4b 1848 	orr.w	r8, fp, r8, lsl #5
9000fc68:	ea4c 0c08 	orr.w	ip, ip, r8
9000fc6c:	f8a0 c004 	strh.w	ip, [r0, #4]
          ySample =   (uint32_t)(*pLum);
9000fc70:	f813 8c05 	ldrb.w	r8, [r3, #-5]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);     
9000fc74:	ea4f 0cd8 	mov.w	ip, r8, lsr #3
9000fc78:	ea4f 0898 	mov.w	r8, r8, lsr #2
9000fc7c:	ea4f 2bcc 	mov.w	fp, ip, lsl #11
9000fc80:	ea4b 1848 	orr.w	r8, fp, r8, lsl #5
9000fc84:	ea4c 0c08 	orr.w	ip, ip, r8
9000fc88:	f8a0 c006 	strh.w	ip, [r0, #6]
          ySample =   (uint32_t)(*pLum);
9000fc8c:	f813 8c04 	ldrb.w	r8, [r3, #-4]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);     
9000fc90:	ea4f 0cd8 	mov.w	ip, r8, lsr #3
9000fc94:	ea4f 0898 	mov.w	r8, r8, lsr #2
9000fc98:	ea4f 2bcc 	mov.w	fp, ip, lsl #11
9000fc9c:	ea4b 1848 	orr.w	r8, fp, r8, lsl #5
9000fca0:	ea4c 0c08 	orr.w	ip, ip, r8
9000fca4:	f8a0 c008 	strh.w	ip, [r0, #8]
          ySample =   (uint32_t)(*pLum);
9000fca8:	f813 8c03 	ldrb.w	r8, [r3, #-3]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);     
9000fcac:	ea4f 0cd8 	mov.w	ip, r8, lsr #3
9000fcb0:	ea4f 0898 	mov.w	r8, r8, lsr #2
9000fcb4:	ea4f 2bcc 	mov.w	fp, ip, lsl #11
9000fcb8:	ea4b 1848 	orr.w	r8, fp, r8, lsl #5
9000fcbc:	ea4c 0c08 	orr.w	ip, ip, r8
9000fcc0:	f8a0 c00a 	strh.w	ip, [r0, #10]
          ySample =   (uint32_t)(*pLum);
9000fcc4:	f813 8c02 	ldrb.w	r8, [r3, #-2]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);     
9000fcc8:	ea4f 0cd8 	mov.w	ip, r8, lsr #3
9000fccc:	ea4f 0898 	mov.w	r8, r8, lsr #2
9000fcd0:	ea4f 2bcc 	mov.w	fp, ip, lsl #11
9000fcd4:	ea4b 1848 	orr.w	r8, fp, r8, lsl #5
9000fcd8:	ea4c 0c08 	orr.w	ip, ip, r8
9000fcdc:	f8a0 c00c 	strh.w	ip, [r0, #12]
          ySample =   (uint32_t)(*pLum);
9000fce0:	f813 8c01 	ldrb.w	r8, [r3, #-1]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);     
9000fce4:	ea4f 0cd8 	mov.w	ip, r8, lsr #3
9000fce8:	ea4f 0898 	mov.w	r8, r8, lsr #2
9000fcec:	ea4f 2bcc 	mov.w	fp, ip, lsl #11
9000fcf0:	ea4b 1848 	orr.w	r8, fp, r8, lsl #5
9000fcf4:	ea4c 0c08 	orr.w	ip, ip, r8
9000fcf8:	f8a0 c00e 	strh.w	ip, [r0, #14]
    for(i= 0; i <  8; i++)
9000fcfc:	d186      	bne.n	9000fc0c <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x50>
  while(currentMCU < (numberMCU + BlockIndex))
9000fcfe:	45a9      	cmp	r9, r5
    pInBuffer +=  GRAY_444_BLOCK_SIZE;    
9000fd00:	f106 0640 	add.w	r6, r6, #64	@ 0x40
  while(currentMCU < (numberMCU + BlockIndex))
9000fd04:	f47f af74 	bne.w	9000fbf0 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x34>
9000fd08:	4670      	mov	r0, lr
  }
  return numberMCU;
}
9000fd0a:	b003      	add	sp, #12
9000fd0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9000fd10:	240262c0 	.word	0x240262c0

9000fd14 <JPEG_MCU_YCCK_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCCK_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer, 
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
9000fd14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  
  numberMCU = DataCount / CMYK_444_BLOCK_SIZE;
  currentMCU = BlockIndex;
  

  while(currentMCU < (numberMCU + BlockIndex))
9000fd18:	eb02 2a13 	add.w	sl, r2, r3, lsr #8
{  
9000fd1c:	b085      	sub	sp, #20
  numberMCU = DataCount / CMYK_444_BLOCK_SIZE;
9000fd1e:	ea4f 2913 	mov.w	r9, r3, lsr #8
  while(currentMCU < (numberMCU + BlockIndex))
9000fd22:	4592      	cmp	sl, r2
9000fd24:	f240 813e 	bls.w	9000ffa4 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x290>
  {

    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
9000fd28:	4ba0      	ldr	r3, [pc, #640]	@ (9000ffac <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x298>)
9000fd2a:	4615      	mov	r5, r2
9000fd2c:	4606      	mov	r6, r0
9000fd2e:	460c      	mov	r4, r1
        pOutAddr = pOutBuffer+ refline;        

          for(j=0; j < 8; j++)
          {           
            color_k = (int32_t)(*(pChrom + 192));
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9000fd30:	4a9f      	ldr	r2, [pc, #636]	@ (9000ffb0 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x29c>)
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
9000fd32:	f8d3 8010 	ldr.w	r8, [r3, #16]
9000fd36:	9501      	str	r5, [sp, #4]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
9000fd38:	e9d3 b709 	ldrd	fp, r7, [r3, #36]	@ 0x24
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
9000fd3c:	e9cd ba02 	strd	fp, sl, [sp, #8]
9000fd40:	e006      	b.n	9000fd50 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x3c>
  while(currentMCU < (numberMCU + BlockIndex))
9000fd42:	9b03      	ldr	r3, [sp, #12]

        refline += JPEG_ConvertorParams.ScaledWidth;          
      }
    }   
    
    pInBuffer +=  CMYK_444_BLOCK_SIZE;
9000fd44:	f506 7680 	add.w	r6, r6, #256	@ 0x100
  while(currentMCU < (numberMCU + BlockIndex))
9000fd48:	9901      	ldr	r1, [sp, #4]
9000fd4a:	428b      	cmp	r3, r1
9000fd4c:	f000 812a 	beq.w	9000ffa4 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x290>
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
9000fd50:	9801      	ldr	r0, [sp, #4]
    currentMCU++;
9000fd52:	f04f 0e08 	mov.w	lr, #8
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
9000fd56:	9d02      	ldr	r5, [sp, #8]
9000fd58:	00c3      	lsls	r3, r0, #3
9000fd5a:	3001      	adds	r0, #1
9000fd5c:	fbb3 f1f5 	udiv	r1, r3, r5
9000fd60:	9001      	str	r0, [sp, #4]
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
9000fd62:	fb05 3011 	mls	r0, r5, r1, r3
    currentMCU++;
9000fd66:	4633      	mov	r3, r6
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
9000fd68:	fb07 f101 	mul.w	r1, r7, r1
    currentMCU++;
9000fd6c:	4675      	mov	r5, lr
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
9000fd6e:	0040      	lsls	r0, r0, #1
9000fd70:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
9000fd74:	4580      	cmp	r8, r0
9000fd76:	d9e4      	bls.n	9000fd42 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x2e>
            color_k = (int32_t)(*(pChrom + 192));
9000fd78:	f893 b0c0 	ldrb.w	fp, [r3, #192]	@ 0xc0
        pOutAddr = pOutBuffer+ refline;        
9000fd7c:	eb04 0c00 	add.w	ip, r4, r0
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
9000fd80:	f893 1040 	ldrb.w	r1, [r3, #64]	@ 0x40
    for(i= 0; i <  8; i++)
9000fd84:	3d01      	subs	r5, #1
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9000fd86:	f893 a000 	ldrb.w	sl, [r3]
            pChrom++;
9000fd8a:	f103 0308 	add.w	r3, r3, #8
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
9000fd8e:	fb11 f10b 	smulbb	r1, r1, fp
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9000fd92:	fb1a fa0b 	smulbb	sl, sl, fp
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
9000fd96:	fba2 1e01 	umull	r1, lr, r2, r1
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9000fd9a:	fba2 a10a 	umull	sl, r1, r2, sl
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
9000fd9e:	ea4f 2e5e 	mov.w	lr, lr, lsr #9
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
9000fda2:	ea4f 2191 	mov.w	r1, r1, lsr #10
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
9000fda6:	ea4f 1e4e 	mov.w	lr, lr, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
9000fdaa:	ea4e 21c1 	orr.w	r1, lr, r1, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
9000fdae:	f893 e078 	ldrb.w	lr, [r3, #120]	@ 0x78
9000fdb2:	fb1e fe0b 	smulbb	lr, lr, fp
9000fdb6:	fba2 ea0e 	umull	lr, sl, r2, lr
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
9000fdba:	ea41 219a 	orr.w	r1, r1, sl, lsr #10
9000fdbe:	b289      	uxth	r1, r1
          *(__IO uint16_t *)pOutAddr = 
9000fdc0:	5221      	strh	r1, [r4, r0]
        refline += JPEG_ConvertorParams.ScaledWidth;          
9000fdc2:	4438      	add	r0, r7
            color_k = (int32_t)(*(pChrom + 192));
9000fdc4:	f893 b0b9 	ldrb.w	fp, [r3, #185]	@ 0xb9
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
9000fdc8:	f893 1039 	ldrb.w	r1, [r3, #57]	@ 0x39
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9000fdcc:	f813 ac07 	ldrb.w	sl, [r3, #-7]
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
9000fdd0:	fb11 f10b 	smulbb	r1, r1, fp
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9000fdd4:	fb1a fa0b 	smulbb	sl, sl, fp
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
9000fdd8:	fba2 1e01 	umull	r1, lr, r2, r1
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9000fddc:	fba2 a10a 	umull	sl, r1, r2, sl
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
9000fde0:	ea4f 2e5e 	mov.w	lr, lr, lsr #9
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
9000fde4:	ea4f 2191 	mov.w	r1, r1, lsr #10
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
9000fde8:	ea4f 1e4e 	mov.w	lr, lr, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
9000fdec:	ea4e 21c1 	orr.w	r1, lr, r1, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
9000fdf0:	f893 e079 	ldrb.w	lr, [r3, #121]	@ 0x79
9000fdf4:	fb1e fe0b 	smulbb	lr, lr, fp
9000fdf8:	fba2 ea0e 	umull	lr, sl, r2, lr
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
9000fdfc:	ea41 219a 	orr.w	r1, r1, sl, lsr #10
9000fe00:	b289      	uxth	r1, r1
          *(__IO uint16_t *)pOutAddr = 
9000fe02:	f8ac 1002 	strh.w	r1, [ip, #2]
            color_k = (int32_t)(*(pChrom + 192));
9000fe06:	f893 b0ba 	ldrb.w	fp, [r3, #186]	@ 0xba
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
9000fe0a:	f893 103a 	ldrb.w	r1, [r3, #58]	@ 0x3a
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9000fe0e:	f813 ac06 	ldrb.w	sl, [r3, #-6]
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
9000fe12:	fb11 f10b 	smulbb	r1, r1, fp
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9000fe16:	fb1a fa0b 	smulbb	sl, sl, fp
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
9000fe1a:	fba2 1e01 	umull	r1, lr, r2, r1
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9000fe1e:	fba2 a10a 	umull	sl, r1, r2, sl
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
9000fe22:	ea4f 2e5e 	mov.w	lr, lr, lsr #9
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
9000fe26:	ea4f 2191 	mov.w	r1, r1, lsr #10
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
9000fe2a:	ea4f 1e4e 	mov.w	lr, lr, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
9000fe2e:	ea4e 21c1 	orr.w	r1, lr, r1, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
9000fe32:	f893 e07a 	ldrb.w	lr, [r3, #122]	@ 0x7a
9000fe36:	fb1e fe0b 	smulbb	lr, lr, fp
9000fe3a:	fba2 ea0e 	umull	lr, sl, r2, lr
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
9000fe3e:	ea41 219a 	orr.w	r1, r1, sl, lsr #10
9000fe42:	b289      	uxth	r1, r1
          *(__IO uint16_t *)pOutAddr = 
9000fe44:	f8ac 1004 	strh.w	r1, [ip, #4]
            color_k = (int32_t)(*(pChrom + 192));
9000fe48:	f893 b0bb 	ldrb.w	fp, [r3, #187]	@ 0xbb
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
9000fe4c:	f893 103b 	ldrb.w	r1, [r3, #59]	@ 0x3b
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9000fe50:	f813 ac05 	ldrb.w	sl, [r3, #-5]
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
9000fe54:	fb11 f10b 	smulbb	r1, r1, fp
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9000fe58:	fb1a fa0b 	smulbb	sl, sl, fp
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
9000fe5c:	fba2 1e01 	umull	r1, lr, r2, r1
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9000fe60:	fba2 a10a 	umull	sl, r1, r2, sl
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
9000fe64:	ea4f 2e5e 	mov.w	lr, lr, lsr #9
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
9000fe68:	ea4f 2191 	mov.w	r1, r1, lsr #10
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
9000fe6c:	ea4f 1e4e 	mov.w	lr, lr, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
9000fe70:	ea4e 21c1 	orr.w	r1, lr, r1, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
9000fe74:	f893 e07b 	ldrb.w	lr, [r3, #123]	@ 0x7b
9000fe78:	fb1e fe0b 	smulbb	lr, lr, fp
9000fe7c:	fba2 ea0e 	umull	lr, sl, r2, lr
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
9000fe80:	ea41 219a 	orr.w	r1, r1, sl, lsr #10
9000fe84:	b289      	uxth	r1, r1
          *(__IO uint16_t *)pOutAddr = 
9000fe86:	f8ac 1006 	strh.w	r1, [ip, #6]
            color_k = (int32_t)(*(pChrom + 192));
9000fe8a:	f893 b0bc 	ldrb.w	fp, [r3, #188]	@ 0xbc
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
9000fe8e:	f893 103c 	ldrb.w	r1, [r3, #60]	@ 0x3c
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9000fe92:	f813 ac04 	ldrb.w	sl, [r3, #-4]
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
9000fe96:	fb11 f10b 	smulbb	r1, r1, fp
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9000fe9a:	fb1a fa0b 	smulbb	sl, sl, fp
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
9000fe9e:	fba2 1e01 	umull	r1, lr, r2, r1
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9000fea2:	fba2 a10a 	umull	sl, r1, r2, sl
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
9000fea6:	ea4f 2e5e 	mov.w	lr, lr, lsr #9
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
9000feaa:	ea4f 2191 	mov.w	r1, r1, lsr #10
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
9000feae:	ea4f 1e4e 	mov.w	lr, lr, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
9000feb2:	ea4e 21c1 	orr.w	r1, lr, r1, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
9000feb6:	f893 e07c 	ldrb.w	lr, [r3, #124]	@ 0x7c
9000feba:	fb1e fe0b 	smulbb	lr, lr, fp
9000febe:	fba2 ea0e 	umull	lr, sl, r2, lr
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
9000fec2:	ea41 219a 	orr.w	r1, r1, sl, lsr #10
9000fec6:	b289      	uxth	r1, r1
          *(__IO uint16_t *)pOutAddr = 
9000fec8:	f8ac 1008 	strh.w	r1, [ip, #8]
            color_k = (int32_t)(*(pChrom + 192));
9000fecc:	f893 b0bd 	ldrb.w	fp, [r3, #189]	@ 0xbd
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
9000fed0:	f893 103d 	ldrb.w	r1, [r3, #61]	@ 0x3d
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9000fed4:	f813 ac03 	ldrb.w	sl, [r3, #-3]
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
9000fed8:	fb11 f10b 	smulbb	r1, r1, fp
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9000fedc:	fb1a fa0b 	smulbb	sl, sl, fp
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
9000fee0:	fba2 1e01 	umull	r1, lr, r2, r1
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9000fee4:	fba2 a10a 	umull	sl, r1, r2, sl
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
9000fee8:	ea4f 2e5e 	mov.w	lr, lr, lsr #9
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
9000feec:	ea4f 2191 	mov.w	r1, r1, lsr #10
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
9000fef0:	ea4f 1e4e 	mov.w	lr, lr, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
9000fef4:	ea4e 21c1 	orr.w	r1, lr, r1, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
9000fef8:	f893 e07d 	ldrb.w	lr, [r3, #125]	@ 0x7d
9000fefc:	fb1e fe0b 	smulbb	lr, lr, fp
9000ff00:	fba2 ea0e 	umull	lr, sl, r2, lr
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
9000ff04:	ea41 219a 	orr.w	r1, r1, sl, lsr #10
9000ff08:	b289      	uxth	r1, r1
          *(__IO uint16_t *)pOutAddr = 
9000ff0a:	f8ac 100a 	strh.w	r1, [ip, #10]
            color_k = (int32_t)(*(pChrom + 192));
9000ff0e:	f893 a0be 	ldrb.w	sl, [r3, #190]	@ 0xbe
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9000ff12:	f813 1c02 	ldrb.w	r1, [r3, #-2]
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
9000ff16:	f893 e03e 	ldrb.w	lr, [r3, #62]	@ 0x3e
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9000ff1a:	fb11 f10a 	smulbb	r1, r1, sl
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
9000ff1e:	fb1e fe0a 	smulbb	lr, lr, sl
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9000ff22:	fba2 1b01 	umull	r1, fp, r2, r1
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
9000ff26:	fba2 e10e 	umull	lr, r1, r2, lr
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
9000ff2a:	f893 e07e 	ldrb.w	lr, [r3, #126]	@ 0x7e
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
9000ff2e:	ea4f 2b9b 	mov.w	fp, fp, lsr #10
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
9000ff32:	fb1e fe0a 	smulbb	lr, lr, sl
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
9000ff36:	ea4f 2151 	mov.w	r1, r1, lsr #9
9000ff3a:	ea4f 1141 	mov.w	r1, r1, lsl #5
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
9000ff3e:	fba2 ea0e 	umull	lr, sl, r2, lr
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
9000ff42:	ea41 21cb 	orr.w	r1, r1, fp, lsl #11
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
9000ff46:	ea41 219a 	orr.w	r1, r1, sl, lsr #10
9000ff4a:	b289      	uxth	r1, r1
          *(__IO uint16_t *)pOutAddr = 
9000ff4c:	f8ac 100c 	strh.w	r1, [ip, #12]
            color_k = (int32_t)(*(pChrom + 192));
9000ff50:	f893 b0bf 	ldrb.w	fp, [r3, #191]	@ 0xbf
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
9000ff54:	f893 103f 	ldrb.w	r1, [r3, #63]	@ 0x3f
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9000ff58:	f813 ac01 	ldrb.w	sl, [r3, #-1]
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
9000ff5c:	fb11 f10b 	smulbb	r1, r1, fp
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9000ff60:	fb1a fa0b 	smulbb	sl, sl, fp
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
9000ff64:	fba2 1e01 	umull	r1, lr, r2, r1
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9000ff68:	fba2 a10a 	umull	sl, r1, r2, sl
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
9000ff6c:	ea4f 2e5e 	mov.w	lr, lr, lsr #9
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
9000ff70:	ea4f 2191 	mov.w	r1, r1, lsr #10
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
9000ff74:	ea4f 1e4e 	mov.w	lr, lr, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
9000ff78:	ea4e 21c1 	orr.w	r1, lr, r1, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
9000ff7c:	f893 e07f 	ldrb.w	lr, [r3, #127]	@ 0x7f
9000ff80:	fb1e fe0b 	smulbb	lr, lr, fp
9000ff84:	fba2 ea0e 	umull	lr, sl, r2, lr
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
9000ff88:	ea41 219a 	orr.w	r1, r1, sl, lsr #10
9000ff8c:	b289      	uxth	r1, r1
          *(__IO uint16_t *)pOutAddr = 
9000ff8e:	f8ac 100e 	strh.w	r1, [ip, #14]
    for(i= 0; i <  8; i++)
9000ff92:	f47f aeef 	bne.w	9000fd74 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x60>
  while(currentMCU < (numberMCU + BlockIndex))
9000ff96:	9b03      	ldr	r3, [sp, #12]
    pInBuffer +=  CMYK_444_BLOCK_SIZE;
9000ff98:	f506 7680 	add.w	r6, r6, #256	@ 0x100
  while(currentMCU < (numberMCU + BlockIndex))
9000ff9c:	9901      	ldr	r1, [sp, #4]
9000ff9e:	428b      	cmp	r3, r1
9000ffa0:	f47f aed6 	bne.w	9000fd50 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x3c>
  }
  return numberMCU;
}
9000ffa4:	4648      	mov	r0, r9
9000ffa6:	b005      	add	sp, #20
9000ffa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9000ffac:	240262c0 	.word	0x240262c0
9000ffb0:	80808081 	.word	0x80808081

9000ffb4 <JPEG_GetDecodeColorConvertFunc>:
  *                      depending of the jpeg image color space and chroma sampling info. 
  * @param ImageNbMCUs : pointer to uint32_t, used to retrive the total number of MCU blocks in the jpeg image.  
  * @retval HAL status : HAL_OK or HAL_ERROR.
  */
HAL_StatusTypeDef JPEG_GetDecodeColorConvertFunc(JPEG_ConfTypeDef *pJpegInfo, JPEG_YCbCrToRGB_Convert_Function *pFunction, uint32_t *ImageNbMCUs)
{
9000ffb4:	b5f0      	push	{r4, r5, r6, r7, lr}
  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
  JPEG_ConvertorParams.ImageWidth = pJpegInfo->ImageWidth;
  JPEG_ConvertorParams.ImageHeight = pJpegInfo->ImageHeight;
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
  
  JPEG_ConvertorParams.ChromaSubsampling = pJpegInfo->ChromaSubsampling;  
9000ffb6:	e9d0 7501 	ldrd	r7, r5, [r0, #4]
  JPEG_ConvertorParams.ImageWidth = pJpegInfo->ImageWidth;
9000ffba:	68c4      	ldr	r4, [r0, #12]
  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
9000ffbc:	6806      	ldr	r6, [r0, #0]
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
9000ffbe:	fb05 f004 	mul.w	r0, r5, r4
  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
9000ffc2:	4b3b      	ldr	r3, [pc, #236]	@ (900100b0 <JPEG_GetDecodeColorConvertFunc+0xfc>)
  if(JPEG_ConvertorParams.ColorSpace == JPEG_YCBCR_COLORSPACE)
9000ffc4:	2e10      	cmp	r6, #16
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
9000ffc6:	ea4f 0040 	mov.w	r0, r0, lsl #1
  JPEG_ConvertorParams.ImageWidth = pJpegInfo->ImageWidth;
9000ffca:	609c      	str	r4, [r3, #8]
  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
9000ffcc:	601e      	str	r6, [r3, #0]
  JPEG_ConvertorParams.ImageHeight = pJpegInfo->ImageHeight;
9000ffce:	60dd      	str	r5, [r3, #12]
  JPEG_ConvertorParams.ChromaSubsampling = pJpegInfo->ChromaSubsampling;  
9000ffd0:	605f      	str	r7, [r3, #4]
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
9000ffd2:	6118      	str	r0, [r3, #16]
  if(JPEG_ConvertorParams.ColorSpace == JPEG_YCBCR_COLORSPACE)
9000ffd4:	d030      	beq.n	90010038 <JPEG_GetDecodeColorConvertFunc+0x84>
      }
      JPEG_ConvertorParams.H_factor = 8;
      JPEG_ConvertorParams.V_factor  = 8;
    }   
  }
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_GRAYSCALE_COLORSPACE)
9000ffd6:	b9c6      	cbnz	r6, 9001000a <JPEG_GetDecodeColorConvertFunc+0x56>
  {
    *pFunction =  JPEG_MCU_Gray_ARGB_ConvertBlocks;
9000ffd8:	4836      	ldr	r0, [pc, #216]	@ (900100b4 <JPEG_GetDecodeColorConvertFunc+0x100>)

    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
      
    if(JPEG_ConvertorParams.LineOffset != 0)
9000ffda:	f014 0707 	ands.w	r7, r4, #7
    *pFunction =  JPEG_MCU_Gray_ARGB_ConvertBlocks;
9000ffde:	6008      	str	r0, [r1, #0]
    if(JPEG_ConvertorParams.LineOffset != 0)
9000ffe0:	d11a      	bne.n	90010018 <JPEG_GetDecodeColorConvertFunc+0x64>
  {  
    return HAL_ERROR; /* Color space Not supported*/
  }
 
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
9000ffe2:	0061      	lsls	r1, r4, #1
      JPEG_ConvertorParams.H_factor = 16;
9000ffe4:	2008      	movs	r0, #8
    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
9000ffe6:	615f      	str	r7, [r3, #20]
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
9000ffe8:	6299      	str	r1, [r3, #40]	@ 0x28
  
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
9000ffea:	08e1      	lsrs	r1, r4, #3
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
9000ffec:	625c      	str	r4, [r3, #36]	@ 0x24
      JPEG_ConvertorParams.V_factor  = 8;
9000ffee:	e9c3 0007 	strd	r0, r0, [r3, #28]
  if((JPEG_ConvertorParams.ImageWidth % JPEG_ConvertorParams.H_factor) != 0)
  {
    hMCU++; /*+1 for horizenatl incomplete MCU */                
  }

  vMCU = (JPEG_ConvertorParams.ImageHeight / JPEG_ConvertorParams.V_factor);
9000fff2:	fbb5 f4f0 	udiv	r4, r5, r0
  if((JPEG_ConvertorParams.ImageHeight % JPEG_ConvertorParams.V_factor) != 0)
9000fff6:	fb00 5514 	mls	r5, r0, r4, r5
9000fffa:	b105      	cbz	r5, 9000fffe <JPEG_GetDecodeColorConvertFunc+0x4a>
  {
    vMCU++; /*+1 for vertical incomplete MCU */                
9000fffc:	3401      	adds	r4, #1
  }
  JPEG_ConvertorParams.MCU_Total_Nb = (hMCU * vMCU);
9000fffe:	fb04 f101 	mul.w	r1, r4, r1
  *ImageNbMCUs = JPEG_ConvertorParams.MCU_Total_Nb;

  return HAL_OK;
90010002:	2000      	movs	r0, #0
  JPEG_ConvertorParams.MCU_Total_Nb = (hMCU * vMCU);
90010004:	62d9      	str	r1, [r3, #44]	@ 0x2c
  *ImageNbMCUs = JPEG_ConvertorParams.MCU_Total_Nb;
90010006:	6011      	str	r1, [r2, #0]
}
90010008:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_CMYK_COLORSPACE)
9001000a:	2e30      	cmp	r6, #48	@ 0x30
9001000c:	d11e      	bne.n	9001004c <JPEG_GetDecodeColorConvertFunc+0x98>
    *pFunction =  JPEG_MCU_YCCK_ARGB_ConvertBlocks;
9001000e:	482a      	ldr	r0, [pc, #168]	@ (900100b8 <JPEG_GetDecodeColorConvertFunc+0x104>)
    if(JPEG_ConvertorParams.LineOffset != 0)
90010010:	f014 0707 	ands.w	r7, r4, #7
    *pFunction =  JPEG_MCU_YCCK_ARGB_ConvertBlocks;
90010014:	6008      	str	r0, [r1, #0]
    if(JPEG_ConvertorParams.LineOffset != 0)
90010016:	d0e4      	beq.n	9000ffe2 <JPEG_GetDecodeColorConvertFunc+0x2e>
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
90010018:	2608      	movs	r6, #8
      JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;  
9001001a:	f1c7 0708 	rsb	r7, r7, #8
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
9001001e:	ea4f 0e44 	mov.w	lr, r4, lsl #1
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
90010022:	08e1      	lsrs	r1, r4, #3
90010024:	46b4      	mov	ip, r6
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
90010026:	443c      	add	r4, r7
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
90010028:	4630      	mov	r0, r6
    hMCU++; /*+1 for horizenatl incomplete MCU */                
9001002a:	3101      	adds	r1, #1
      JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;  
9001002c:	615f      	str	r7, [r3, #20]
      JPEG_ConvertorParams.V_factor  = 8;
9001002e:	e9c3 6c07 	strd	r6, ip, [r3, #28]
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
90010032:	e9c3 4e09 	strd	r4, lr, [r3, #36]	@ 0x24
    hMCU++; /*+1 for horizenatl incomplete MCU */                
90010036:	e7dc      	b.n	9000fff2 <JPEG_GetDecodeColorConvertFunc+0x3e>
    if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_420_SUBSAMPLING)
90010038:	2f01      	cmp	r7, #1
9001003a:	d018      	beq.n	9001006e <JPEG_GetDecodeColorConvertFunc+0xba>
    else if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_422_SUBSAMPLING)
9001003c:	2f02      	cmp	r7, #2
9001003e:	d007      	beq.n	90010050 <JPEG_GetDecodeColorConvertFunc+0x9c>
      *pFunction =  JPEG_MCU_YCbCr444_ARGB_ConvertBlocks;
90010040:	481e      	ldr	r0, [pc, #120]	@ (900100bc <JPEG_GetDecodeColorConvertFunc+0x108>)
      if(JPEG_ConvertorParams.LineOffset != 0)
90010042:	f014 0707 	ands.w	r7, r4, #7
      *pFunction =  JPEG_MCU_YCbCr444_ARGB_ConvertBlocks;
90010046:	6008      	str	r0, [r1, #0]
      if(JPEG_ConvertorParams.LineOffset != 0)
90010048:	d1e6      	bne.n	90010018 <JPEG_GetDecodeColorConvertFunc+0x64>
9001004a:	e7ca      	b.n	9000ffe2 <JPEG_GetDecodeColorConvertFunc+0x2e>
    return HAL_ERROR; /* Color space Not supported*/
9001004c:	2001      	movs	r0, #1
}
9001004e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      *pFunction =  JPEG_MCU_YCbCr422_ARGB_ConvertBlocks;
90010050:	481b      	ldr	r0, [pc, #108]	@ (900100c0 <JPEG_GetDecodeColorConvertFunc+0x10c>)
      if(JPEG_ConvertorParams.LineOffset != 0)
90010052:	f014 070f 	ands.w	r7, r4, #15
      *pFunction =  JPEG_MCU_YCbCr422_ARGB_ConvertBlocks;
90010056:	6008      	str	r0, [r1, #0]
      if(JPEG_ConvertorParams.LineOffset != 0)
90010058:	d020      	beq.n	9001009c <JPEG_GetDecodeColorConvertFunc+0xe8>
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;  
9001005a:	f1c7 0710 	rsb	r7, r7, #16
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
9001005e:	f04f 0c08 	mov.w	ip, #8
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
90010062:	ea4f 0e44 	mov.w	lr, r4, lsl #1
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
90010066:	0921      	lsrs	r1, r4, #4
90010068:	4660      	mov	r0, ip
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
9001006a:	443c      	add	r4, r7
  if((JPEG_ConvertorParams.ImageWidth % JPEG_ConvertorParams.H_factor) != 0)
9001006c:	e7dd      	b.n	9001002a <JPEG_GetDecodeColorConvertFunc+0x76>
      *pFunction = JPEG_MCU_YCbCr420_ARGB_ConvertBlocks;
9001006e:	4815      	ldr	r0, [pc, #84]	@ (900100c4 <JPEG_GetDecodeColorConvertFunc+0x110>)
      if(JPEG_ConvertorParams.LineOffset != 0)
90010070:	f014 070f 	ands.w	r7, r4, #15
      *pFunction = JPEG_MCU_YCbCr420_ARGB_ConvertBlocks;
90010074:	6008      	str	r0, [r1, #0]
      if(JPEG_ConvertorParams.LineOffset != 0)
90010076:	d108      	bne.n	9001008a <JPEG_GetDecodeColorConvertFunc+0xd6>
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
90010078:	0061      	lsls	r1, r4, #1
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
9001007a:	4630      	mov	r0, r6
      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;
9001007c:	615f      	str	r7, [r3, #20]
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
9001007e:	6299      	str	r1, [r3, #40]	@ 0x28
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
90010080:	0921      	lsrs	r1, r4, #4
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
90010082:	625c      	str	r4, [r3, #36]	@ 0x24
      JPEG_ConvertorParams.V_factor  = 8;
90010084:	e9c3 6607 	strd	r6, r6, [r3, #28]
  if((JPEG_ConvertorParams.ImageWidth % JPEG_ConvertorParams.H_factor) != 0)
90010088:	e7b3      	b.n	9000fff2 <JPEG_GetDecodeColorConvertFunc+0x3e>
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;  
9001008a:	f1c7 0710 	rsb	r7, r7, #16
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
9001008e:	ea4f 0e44 	mov.w	lr, r4, lsl #1
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
90010092:	0921      	lsrs	r1, r4, #4
90010094:	46b4      	mov	ip, r6
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
90010096:	443c      	add	r4, r7
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
90010098:	4630      	mov	r0, r6
9001009a:	e7c6      	b.n	9001002a <JPEG_GetDecodeColorConvertFunc+0x76>
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
9001009c:	0061      	lsls	r1, r4, #1
      JPEG_ConvertorParams.V_factor  = 8;
9001009e:	2008      	movs	r0, #8
      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;
900100a0:	615f      	str	r7, [r3, #20]
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
900100a2:	6299      	str	r1, [r3, #40]	@ 0x28
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
900100a4:	0921      	lsrs	r1, r4, #4
      JPEG_ConvertorParams.H_factor = 16;
900100a6:	61de      	str	r6, [r3, #28]
      JPEG_ConvertorParams.V_factor  = 8;
900100a8:	e9c3 0408 	strd	r0, r4, [r3, #32]
  if((JPEG_ConvertorParams.ImageWidth % JPEG_ConvertorParams.H_factor) != 0)
900100ac:	e7a1      	b.n	9000fff2 <JPEG_GetDecodeColorConvertFunc+0x3e>
900100ae:	bf00      	nop
900100b0:	240262c0 	.word	0x240262c0
900100b4:	9000fbbd 	.word	0x9000fbbd
900100b8:	9000fd15 	.word	0x9000fd15
900100bc:	9000f8d5 	.word	0x9000f8d5
900100c0:	9000f5f5 	.word	0x9000f5f5
900100c4:	9000f3cd 	.word	0x9000f3cd

900100c8 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
900100c8:	8880      	ldrh	r0, [r0, #4]
900100ca:	4770      	bx	lr

900100cc <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
900100cc:	b570      	push	{r4, r5, r6, lr}
900100ce:	6803      	ldr	r3, [r0, #0]
900100d0:	460c      	mov	r4, r1
900100d2:	2100      	movs	r1, #0
900100d4:	4605      	mov	r5, r0
900100d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
900100d8:	4798      	blx	r3
900100da:	4606      	mov	r6, r0
900100dc:	682b      	ldr	r3, [r5, #0]
900100de:	4628      	mov	r0, r5
900100e0:	1ba4      	subs	r4, r4, r6
900100e2:	6a1b      	ldr	r3, [r3, #32]
900100e4:	b2a4      	uxth	r4, r4
900100e6:	4798      	blx	r3
900100e8:	fbb4 f0f0 	udiv	r0, r4, r0
900100ec:	bd70      	pop	{r4, r5, r6, pc}

900100ee <_ZN8touchgfx17AbstractPartition5clearEv>:
900100ee:	2300      	movs	r3, #0
900100f0:	8083      	strh	r3, [r0, #4]
900100f2:	4770      	bx	lr

900100f4 <_ZN8touchgfx17AbstractPartition8allocateEt>:
900100f4:	b510      	push	{r4, lr}
900100f6:	6803      	ldr	r3, [r0, #0]
900100f8:	4604      	mov	r4, r0
900100fa:	8881      	ldrh	r1, [r0, #4]
900100fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
900100fe:	4798      	blx	r3
90010100:	88a3      	ldrh	r3, [r4, #4]
90010102:	3301      	adds	r3, #1
90010104:	80a3      	strh	r3, [r4, #4]
90010106:	bd10      	pop	{r4, pc}

90010108 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
90010108:	6803      	ldr	r3, [r0, #0]
9001010a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9001010c:	4718      	bx	r3

9001010e <_ZN8touchgfx17AbstractPartitionD1Ev>:
9001010e:	4770      	bx	lr

90010110 <_ZN8touchgfx17AbstractPartitionC1Ev>:
90010110:	4a02      	ldr	r2, [pc, #8]	@ (9001011c <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
90010112:	6002      	str	r2, [r0, #0]
90010114:	2200      	movs	r2, #0
90010116:	8082      	strh	r2, [r0, #4]
90010118:	4770      	bx	lr
9001011a:	bf00      	nop
9001011c:	9002681c 	.word	0x9002681c

90010120 <_ZN8touchgfx9Container13getFirstChildEv>:
90010120:	6a80      	ldr	r0, [r0, #40]	@ 0x28
90010122:	4770      	bx	lr

90010124 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
90010124:	6a83      	ldr	r3, [r0, #40]	@ 0x28
90010126:	2000      	movs	r0, #0
90010128:	b12b      	cbz	r3, 90010136 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
9001012a:	b920      	cbnz	r0, 90010136 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
9001012c:	1a5a      	subs	r2, r3, r1
9001012e:	699b      	ldr	r3, [r3, #24]
90010130:	4250      	negs	r0, r2
90010132:	4150      	adcs	r0, r2
90010134:	e7f8      	b.n	90010128 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
90010136:	4770      	bx	lr

90010138 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
90010138:	2300      	movs	r3, #0
9001013a:	6148      	str	r0, [r1, #20]
9001013c:	618b      	str	r3, [r1, #24]
9001013e:	6a83      	ldr	r3, [r0, #40]	@ 0x28
90010140:	b913      	cbnz	r3, 90010148 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
90010142:	6281      	str	r1, [r0, #40]	@ 0x28
90010144:	4770      	bx	lr
90010146:	4613      	mov	r3, r2
90010148:	699a      	ldr	r2, [r3, #24]
9001014a:	2a00      	cmp	r2, #0
9001014c:	d1fb      	bne.n	90010146 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
9001014e:	6199      	str	r1, [r3, #24]
90010150:	4770      	bx	lr

90010152 <_ZN8touchgfx9Container9removeAllEv>:
90010152:	2200      	movs	r2, #0
90010154:	6a83      	ldr	r3, [r0, #40]	@ 0x28
90010156:	b123      	cbz	r3, 90010162 <_ZN8touchgfx9Container9removeAllEv+0x10>
90010158:	6999      	ldr	r1, [r3, #24]
9001015a:	6281      	str	r1, [r0, #40]	@ 0x28
9001015c:	e9c3 2205 	strd	r2, r2, [r3, #20]
90010160:	e7f8      	b.n	90010154 <_ZN8touchgfx9Container9removeAllEv+0x2>
90010162:	4770      	bx	lr

90010164 <_ZN8touchgfx9Container6unlinkEv>:
90010164:	2300      	movs	r3, #0
90010166:	6283      	str	r3, [r0, #40]	@ 0x28
90010168:	4770      	bx	lr

9001016a <_ZNK8touchgfx9Container12getSolidRectEv>:
9001016a:	2200      	movs	r2, #0
9001016c:	8002      	strh	r2, [r0, #0]
9001016e:	8042      	strh	r2, [r0, #2]
90010170:	8082      	strh	r2, [r0, #4]
90010172:	80c2      	strh	r2, [r0, #6]
90010174:	4770      	bx	lr

90010176 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
90010176:	b570      	push	{r4, r5, r6, lr}
90010178:	460d      	mov	r5, r1
9001017a:	4616      	mov	r6, r2
9001017c:	6a84      	ldr	r4, [r0, #40]	@ 0x28
9001017e:	b13c      	cbz	r4, 90010190 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
90010180:	6823      	ldr	r3, [r4, #0]
90010182:	4620      	mov	r0, r4
90010184:	4632      	mov	r2, r6
90010186:	4629      	mov	r1, r5
90010188:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
9001018a:	4798      	blx	r3
9001018c:	69a4      	ldr	r4, [r4, #24]
9001018e:	e7f6      	b.n	9001017e <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
90010190:	bd70      	pop	{r4, r5, r6, pc}

90010192 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
90010192:	b538      	push	{r3, r4, r5, lr}
90010194:	460d      	mov	r5, r1
90010196:	6a84      	ldr	r4, [r0, #40]	@ 0x28
90010198:	b134      	cbz	r4, 900101a8 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
9001019a:	682b      	ldr	r3, [r5, #0]
9001019c:	4621      	mov	r1, r4
9001019e:	4628      	mov	r0, r5
900101a0:	689b      	ldr	r3, [r3, #8]
900101a2:	4798      	blx	r3
900101a4:	69a4      	ldr	r4, [r4, #24]
900101a6:	e7f7      	b.n	90010198 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
900101a8:	bd38      	pop	{r3, r4, r5, pc}

900101aa <_ZN8touchgfx9ContainerD1Ev>:
900101aa:	4770      	bx	lr

900101ac <_ZN8touchgfx9ContainerD0Ev>:
900101ac:	b510      	push	{r4, lr}
900101ae:	4604      	mov	r4, r0
900101b0:	212c      	movs	r1, #44	@ 0x2c
900101b2:	f012 fd00 	bl	90022bb6 <_ZdlPvj>
900101b6:	4620      	mov	r0, r4
900101b8:	bd10      	pop	{r4, pc}

900101ba <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
900101ba:	6a83      	ldr	r3, [r0, #40]	@ 0x28
900101bc:	b19b      	cbz	r3, 900101e6 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
900101be:	428b      	cmp	r3, r1
900101c0:	d109      	bne.n	900101d6 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
900101c2:	699a      	ldr	r2, [r3, #24]
900101c4:	2100      	movs	r1, #0
900101c6:	6159      	str	r1, [r3, #20]
900101c8:	6282      	str	r2, [r0, #40]	@ 0x28
900101ca:	b902      	cbnz	r2, 900101ce <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
900101cc:	4770      	bx	lr
900101ce:	6199      	str	r1, [r3, #24]
900101d0:	4770      	bx	lr
900101d2:	4613      	mov	r3, r2
900101d4:	b13a      	cbz	r2, 900101e6 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
900101d6:	699a      	ldr	r2, [r3, #24]
900101d8:	428a      	cmp	r2, r1
900101da:	d1fa      	bne.n	900101d2 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
900101dc:	698a      	ldr	r2, [r1, #24]
900101de:	619a      	str	r2, [r3, #24]
900101e0:	2300      	movs	r3, #0
900101e2:	e9c1 3305 	strd	r3, r3, [r1, #20]
900101e6:	4770      	bx	lr

900101e8 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
900101e8:	b410      	push	{r4}
900101ea:	6a83      	ldr	r3, [r0, #40]	@ 0x28
900101ec:	4604      	mov	r4, r0
900101ee:	b92b      	cbnz	r3, 900101fc <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
900101f0:	6803      	ldr	r3, [r0, #0]
900101f2:	4611      	mov	r1, r2
900101f4:	f85d 4b04 	ldr.w	r4, [sp], #4
900101f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
900101fa:	4718      	bx	r3
900101fc:	b941      	cbnz	r1, 90010210 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
900101fe:	6193      	str	r3, [r2, #24]
90010200:	6282      	str	r2, [r0, #40]	@ 0x28
90010202:	6154      	str	r4, [r2, #20]
90010204:	f85d 4b04 	ldr.w	r4, [sp], #4
90010208:	4770      	bx	lr
9001020a:	4603      	mov	r3, r0
9001020c:	2800      	cmp	r0, #0
9001020e:	d0f9      	beq.n	90010204 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
90010210:	4299      	cmp	r1, r3
90010212:	6998      	ldr	r0, [r3, #24]
90010214:	d1f9      	bne.n	9001020a <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
90010216:	6190      	str	r0, [r2, #24]
90010218:	618a      	str	r2, [r1, #24]
9001021a:	e7f2      	b.n	90010202 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

9001021c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
9001021c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90010220:	461f      	mov	r7, r3
90010222:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
90010226:	460d      	mov	r5, r1
90010228:	4616      	mov	r6, r2
9001022a:	b103      	cbz	r3, 9001022e <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
9001022c:	6038      	str	r0, [r7, #0]
9001022e:	6a84      	ldr	r4, [r0, #40]	@ 0x28
90010230:	b314      	cbz	r4, 90010278 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
90010232:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
90010236:	b1eb      	cbz	r3, 90010274 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
90010238:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
9001023c:	428d      	cmp	r5, r1
9001023e:	db19      	blt.n	90010274 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
90010240:	b289      	uxth	r1, r1
90010242:	8923      	ldrh	r3, [r4, #8]
90010244:	440b      	add	r3, r1
90010246:	b21b      	sxth	r3, r3
90010248:	429d      	cmp	r5, r3
9001024a:	da13      	bge.n	90010274 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
9001024c:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
90010250:	4296      	cmp	r6, r2
90010252:	db0f      	blt.n	90010274 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
90010254:	b292      	uxth	r2, r2
90010256:	8963      	ldrh	r3, [r4, #10]
90010258:	4413      	add	r3, r2
9001025a:	b21b      	sxth	r3, r3
9001025c:	429e      	cmp	r6, r3
9001025e:	da09      	bge.n	90010274 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
90010260:	6823      	ldr	r3, [r4, #0]
90010262:	1ab2      	subs	r2, r6, r2
90010264:	1a69      	subs	r1, r5, r1
90010266:	4620      	mov	r0, r4
90010268:	f8d3 8024 	ldr.w	r8, [r3, #36]	@ 0x24
9001026c:	b212      	sxth	r2, r2
9001026e:	463b      	mov	r3, r7
90010270:	b209      	sxth	r1, r1
90010272:	47c0      	blx	r8
90010274:	69a4      	ldr	r4, [r4, #24]
90010276:	e7db      	b.n	90010230 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
90010278:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

9001027c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
9001027c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90010280:	4c6d      	ldr	r4, [pc, #436]	@ (90010438 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
90010282:	b0a1      	sub	sp, #132	@ 0x84
90010284:	4606      	mov	r6, r0
90010286:	6824      	ldr	r4, [r4, #0]
90010288:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
9001028a:	f894 9049 	ldrb.w	r9, [r4, #73]	@ 0x49
9001028e:	2400      	movs	r4, #0
90010290:	9303      	str	r3, [sp, #12]
90010292:	802c      	strh	r4, [r5, #0]
90010294:	9d2b      	ldr	r5, [sp, #172]	@ 0xac
90010296:	802c      	strh	r4, [r5, #0]
90010298:	601c      	str	r4, [r3, #0]
9001029a:	e9cd 1201 	strd	r1, r2, [sp, #4]
9001029e:	f7ff ffbd 	bl	9001021c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
900102a2:	f1b9 0f03 	cmp.w	r9, #3
900102a6:	f340 80c1 	ble.w	9001042c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
900102aa:	4631      	mov	r1, r6
900102ac:	a80c      	add	r0, sp, #48	@ 0x30
900102ae:	f004 fd75 	bl	90014d9c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
900102b2:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
900102b6:	9306      	str	r3, [sp, #24]
900102b8:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
900102bc:	9307      	str	r3, [sp, #28]
900102be:	9b03      	ldr	r3, [sp, #12]
900102c0:	f8d3 a000 	ldr.w	sl, [r3]
900102c4:	f1ba 0f00 	cmp.w	sl, #0
900102c8:	f000 80b3 	beq.w	90010432 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
900102cc:	4651      	mov	r1, sl
900102ce:	a810      	add	r0, sp, #64	@ 0x40
900102d0:	f004 fd64 	bl	90014d9c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
900102d4:	2002      	movs	r0, #2
900102d6:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	@ 0x44
900102da:	9b01      	ldr	r3, [sp, #4]
900102dc:	9a06      	ldr	r2, [sp, #24]
900102de:	fb91 f1f0 	sdiv	r1, r1, r0
900102e2:	189d      	adds	r5, r3, r2
900102e4:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	@ 0x40
900102e8:	9a07      	ldr	r2, [sp, #28]
900102ea:	4419      	add	r1, r3
900102ec:	9b02      	ldr	r3, [sp, #8]
900102ee:	4413      	add	r3, r2
900102f0:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	@ 0x46
900102f4:	1a6d      	subs	r5, r5, r1
900102f6:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	@ 0x42
900102fa:	fb92 f2f0 	sdiv	r2, r2, r0
900102fe:	440a      	add	r2, r1
90010300:	1a9b      	subs	r3, r3, r2
90010302:	435b      	muls	r3, r3
90010304:	fb05 3505 	mla	r5, r5, r5, r3
90010308:	4f4c      	ldr	r7, [pc, #304]	@ (9001043c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
9001030a:	ac10      	add	r4, sp, #64	@ 0x40
9001030c:	f1b9 0f0c 	cmp.w	r9, #12
90010310:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
90010312:	c40f      	stmia	r4!, {r0, r1, r2, r3}
90010314:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
90010316:	c40f      	stmia	r4!, {r0, r1, r2, r3}
90010318:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
9001031a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
9001031c:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
90010320:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
90010324:	f04f 0303 	mov.w	r3, #3
90010328:	bfd8      	it	le
9001032a:	f109 32ff 	addle.w	r2, r9, #4294967295
9001032e:	f04f 0400 	mov.w	r4, #0
90010332:	f8cd 9000 	str.w	r9, [sp]
90010336:	bfcc      	ite	gt
90010338:	4698      	movgt	r8, r3
9001033a:	fb92 f8f3 	sdivle	r8, r2, r3
9001033e:	1c63      	adds	r3, r4, #1
90010340:	aa10      	add	r2, sp, #64	@ 0x40
90010342:	f004 0401 	and.w	r4, r4, #1
90010346:	f04f 0b00 	mov.w	fp, #0
9001034a:	9308      	str	r3, [sp, #32]
9001034c:	9b00      	ldr	r3, [sp, #0]
9001034e:	eb02 1444 	add.w	r4, r2, r4, lsl #5
90010352:	fb93 f3f8 	sdiv	r3, r3, r8
90010356:	3404      	adds	r4, #4
90010358:	b29b      	uxth	r3, r3
9001035a:	9304      	str	r3, [sp, #16]
9001035c:	9a04      	ldr	r2, [sp, #16]
9001035e:	f854 3c04 	ldr.w	r3, [r4, #-4]
90010362:	fb13 f302 	smulbb	r3, r3, r2
90010366:	9a01      	ldr	r2, [sp, #4]
90010368:	b29b      	uxth	r3, r3
9001036a:	1899      	adds	r1, r3, r2
9001036c:	9305      	str	r3, [sp, #20]
9001036e:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
90010372:	b209      	sxth	r1, r1
90010374:	4299      	cmp	r1, r3
90010376:	db4d      	blt.n	90010414 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
90010378:	8932      	ldrh	r2, [r6, #8]
9001037a:	4413      	add	r3, r2
9001037c:	b21b      	sxth	r3, r3
9001037e:	4299      	cmp	r1, r3
90010380:	da48      	bge.n	90010414 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
90010382:	9b04      	ldr	r3, [sp, #16]
90010384:	6827      	ldr	r7, [r4, #0]
90010386:	fb17 f703 	smulbb	r7, r7, r3
9001038a:	9b02      	ldr	r3, [sp, #8]
9001038c:	b2bf      	uxth	r7, r7
9001038e:	18fa      	adds	r2, r7, r3
90010390:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
90010394:	b212      	sxth	r2, r2
90010396:	429a      	cmp	r2, r3
90010398:	db3c      	blt.n	90010414 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
9001039a:	8970      	ldrh	r0, [r6, #10]
9001039c:	4403      	add	r3, r0
9001039e:	b21b      	sxth	r3, r3
900103a0:	429a      	cmp	r2, r3
900103a2:	da37      	bge.n	90010414 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
900103a4:	2300      	movs	r3, #0
900103a6:	4630      	mov	r0, r6
900103a8:	930b      	str	r3, [sp, #44]	@ 0x2c
900103aa:	ab0b      	add	r3, sp, #44	@ 0x2c
900103ac:	f7ff ff36 	bl	9001021c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
900103b0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
900103b2:	b37a      	cbz	r2, 90010414 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
900103b4:	4552      	cmp	r2, sl
900103b6:	d02d      	beq.n	90010414 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
900103b8:	4611      	mov	r1, r2
900103ba:	a80e      	add	r0, sp, #56	@ 0x38
900103bc:	9209      	str	r2, [sp, #36]	@ 0x24
900103be:	f004 fced 	bl	90014d9c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
900103c2:	f04f 0e02 	mov.w	lr, #2
900103c6:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	@ 0x3c
900103ca:	9a06      	ldr	r2, [sp, #24]
900103cc:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	@ 0x38
900103d0:	9b01      	ldr	r3, [sp, #4]
900103d2:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	@ 0x3e
900103d6:	4413      	add	r3, r2
900103d8:	9a07      	ldr	r2, [sp, #28]
900103da:	fb91 f1fe 	sdiv	r1, r1, lr
900103de:	fb9c fcfe 	sdiv	ip, ip, lr
900103e2:	4401      	add	r1, r0
900103e4:	1a58      	subs	r0, r3, r1
900103e6:	9b02      	ldr	r3, [sp, #8]
900103e8:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	@ 0x3a
900103ec:	4413      	add	r3, r2
900103ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
900103f0:	448c      	add	ip, r1
900103f2:	eba3 030c 	sub.w	r3, r3, ip
900103f6:	435b      	muls	r3, r3
900103f8:	fb00 3300 	mla	r3, r0, r0, r3
900103fc:	42ab      	cmp	r3, r5
900103fe:	d208      	bcs.n	90010412 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
90010400:	990b      	ldr	r1, [sp, #44]	@ 0x2c
90010402:	461d      	mov	r5, r3
90010404:	9803      	ldr	r0, [sp, #12]
90010406:	6001      	str	r1, [r0, #0]
90010408:	992a      	ldr	r1, [sp, #168]	@ 0xa8
9001040a:	9805      	ldr	r0, [sp, #20]
9001040c:	8008      	strh	r0, [r1, #0]
9001040e:	992b      	ldr	r1, [sp, #172]	@ 0xac
90010410:	800f      	strh	r7, [r1, #0]
90010412:	4692      	mov	sl, r2
90010414:	f10b 0b01 	add.w	fp, fp, #1
90010418:	3408      	adds	r4, #8
9001041a:	f1bb 0f04 	cmp.w	fp, #4
9001041e:	d19d      	bne.n	9001035c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
90010420:	9b00      	ldr	r3, [sp, #0]
90010422:	9c08      	ldr	r4, [sp, #32]
90010424:	444b      	add	r3, r9
90010426:	4544      	cmp	r4, r8
90010428:	9300      	str	r3, [sp, #0]
9001042a:	d188      	bne.n	9001033e <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
9001042c:	b021      	add	sp, #132	@ 0x84
9001042e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90010432:	f04f 35ff 	mov.w	r5, #4294967295
90010436:	e767      	b.n	90010308 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
90010438:	2402630c 	.word	0x2402630c
9001043c:	90023c90 	.word	0x90023c90

90010440 <_ZN8touchgfx4RectaNERKS0_>:
90010440:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
90010444:	f9b1 7000 	ldrsh.w	r7, [r1]
90010448:	888c      	ldrh	r4, [r1, #4]
9001044a:	f9b0 9000 	ldrsh.w	r9, [r0]
9001044e:	443c      	add	r4, r7
90010450:	b2a4      	uxth	r4, r4
90010452:	fa0f f884 	sxth.w	r8, r4
90010456:	45c1      	cmp	r9, r8
90010458:	da2f      	bge.n	900104ba <_ZN8touchgfx4RectaNERKS0_+0x7a>
9001045a:	8882      	ldrh	r2, [r0, #4]
9001045c:	444a      	add	r2, r9
9001045e:	b292      	uxth	r2, r2
90010460:	fa0f fe82 	sxth.w	lr, r2
90010464:	4577      	cmp	r7, lr
90010466:	da28      	bge.n	900104ba <_ZN8touchgfx4RectaNERKS0_+0x7a>
90010468:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
9001046c:	88cb      	ldrh	r3, [r1, #6]
9001046e:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
90010472:	442b      	add	r3, r5
90010474:	b21b      	sxth	r3, r3
90010476:	429e      	cmp	r6, r3
90010478:	da1f      	bge.n	900104ba <_ZN8touchgfx4RectaNERKS0_+0x7a>
9001047a:	88c3      	ldrh	r3, [r0, #6]
9001047c:	4433      	add	r3, r6
9001047e:	b29b      	uxth	r3, r3
90010480:	fa0f fc83 	sxth.w	ip, r3
90010484:	4565      	cmp	r5, ip
90010486:	da18      	bge.n	900104ba <_ZN8touchgfx4RectaNERKS0_+0x7a>
90010488:	454f      	cmp	r7, r9
9001048a:	bfb8      	it	lt
9001048c:	464f      	movlt	r7, r9
9001048e:	42b5      	cmp	r5, r6
90010490:	bfb8      	it	lt
90010492:	4635      	movlt	r5, r6
90010494:	45f0      	cmp	r8, lr
90010496:	bfd8      	it	le
90010498:	4622      	movle	r2, r4
9001049a:	1bd2      	subs	r2, r2, r7
9001049c:	8082      	strh	r2, [r0, #4]
9001049e:	884a      	ldrh	r2, [r1, #2]
900104a0:	88c9      	ldrh	r1, [r1, #6]
900104a2:	8007      	strh	r7, [r0, #0]
900104a4:	440a      	add	r2, r1
900104a6:	8045      	strh	r5, [r0, #2]
900104a8:	b292      	uxth	r2, r2
900104aa:	b211      	sxth	r1, r2
900104ac:	458c      	cmp	ip, r1
900104ae:	bfa8      	it	ge
900104b0:	4613      	movge	r3, r2
900104b2:	1b5b      	subs	r3, r3, r5
900104b4:	80c3      	strh	r3, [r0, #6]
900104b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
900104ba:	2300      	movs	r3, #0
900104bc:	8003      	strh	r3, [r0, #0]
900104be:	8043      	strh	r3, [r0, #2]
900104c0:	8083      	strh	r3, [r0, #4]
900104c2:	80c3      	strh	r3, [r0, #6]
900104c4:	e7f7      	b.n	900104b6 <_ZN8touchgfx4RectaNERKS0_+0x76>

900104c6 <_ZNK8touchgfx4Rect7isEmptyEv>:
900104c6:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
900104ca:	2b00      	cmp	r3, #0
900104cc:	dd06      	ble.n	900104dc <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
900104ce:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
900104d2:	2800      	cmp	r0, #0
900104d4:	bfcc      	ite	gt
900104d6:	2000      	movgt	r0, #0
900104d8:	2001      	movle	r0, #1
900104da:	4770      	bx	lr
900104dc:	2001      	movs	r0, #1
900104de:	4770      	bx	lr

900104e0 <_ZNK8touchgfx9Container16getContainedAreaEv>:
900104e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
900104e4:	2300      	movs	r3, #0
900104e6:	4604      	mov	r4, r0
900104e8:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
900104ea:	8003      	strh	r3, [r0, #0]
900104ec:	8043      	strh	r3, [r0, #2]
900104ee:	8083      	strh	r3, [r0, #4]
900104f0:	80c3      	strh	r3, [r0, #6]
900104f2:	2d00      	cmp	r5, #0
900104f4:	d040      	beq.n	90010578 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
900104f6:	1d28      	adds	r0, r5, #4
900104f8:	f7ff ffe5 	bl	900104c6 <_ZNK8touchgfx4Rect7isEmptyEv>
900104fc:	b988      	cbnz	r0, 90010522 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
900104fe:	4620      	mov	r0, r4
90010500:	f7ff ffe1 	bl	900104c6 <_ZNK8touchgfx4Rect7isEmptyEv>
90010504:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
90010508:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
9001050c:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
90010510:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
90010514:	b138      	cbz	r0, 90010526 <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
90010516:	8022      	strh	r2, [r4, #0]
90010518:	8063      	strh	r3, [r4, #2]
9001051a:	f8a4 e004 	strh.w	lr, [r4, #4]
9001051e:	f8a4 c006 	strh.w	ip, [r4, #6]
90010522:	69ad      	ldr	r5, [r5, #24]
90010524:	e7e5      	b.n	900104f2 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
90010526:	f9b4 0000 	ldrsh.w	r0, [r4]
9001052a:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
9001052e:	4290      	cmp	r0, r2
90010530:	4607      	mov	r7, r0
90010532:	f8b4 8004 	ldrh.w	r8, [r4, #4]
90010536:	460e      	mov	r6, r1
90010538:	bfa8      	it	ge
9001053a:	4617      	movge	r7, r2
9001053c:	4299      	cmp	r1, r3
9001053e:	4472      	add	r2, lr
90010540:	f8b4 e006 	ldrh.w	lr, [r4, #6]
90010544:	bfa8      	it	ge
90010546:	461e      	movge	r6, r3
90010548:	4440      	add	r0, r8
9001054a:	4471      	add	r1, lr
9001054c:	4463      	add	r3, ip
9001054e:	b200      	sxth	r0, r0
90010550:	8027      	strh	r7, [r4, #0]
90010552:	b212      	sxth	r2, r2
90010554:	8066      	strh	r6, [r4, #2]
90010556:	b209      	sxth	r1, r1
90010558:	b21b      	sxth	r3, r3
9001055a:	4290      	cmp	r0, r2
9001055c:	bfac      	ite	ge
9001055e:	ebc7 0200 	rsbge	r2, r7, r0
90010562:	ebc7 0202 	rsblt	r2, r7, r2
90010566:	4299      	cmp	r1, r3
90010568:	bfac      	ite	ge
9001056a:	ebc6 0301 	rsbge	r3, r6, r1
9001056e:	ebc6 0303 	rsblt	r3, r6, r3
90010572:	80a2      	strh	r2, [r4, #4]
90010574:	80e3      	strh	r3, [r4, #6]
90010576:	e7d4      	b.n	90010522 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
90010578:	4620      	mov	r0, r4
9001057a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

9001057e <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
9001057e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
90010582:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
90010586:	b383      	cbz	r3, 900105ea <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
90010588:	6a84      	ldr	r4, [r0, #40]	@ 0x28
9001058a:	b374      	cbz	r4, 900105ea <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
9001058c:	f9b1 5000 	ldrsh.w	r5, [r1]
90010590:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
90010594:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
90010598:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
9001059c:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
900105a0:	b303      	cbz	r3, 900105e4 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
900105a2:	4668      	mov	r0, sp
900105a4:	1d21      	adds	r1, r4, #4
900105a6:	f8ad 5000 	strh.w	r5, [sp]
900105aa:	f8ad 6002 	strh.w	r6, [sp, #2]
900105ae:	f8ad 7004 	strh.w	r7, [sp, #4]
900105b2:	f8ad 8006 	strh.w	r8, [sp, #6]
900105b6:	f7ff ff43 	bl	90010440 <_ZN8touchgfx4RectaNERKS0_>
900105ba:	4668      	mov	r0, sp
900105bc:	f7ff ff83 	bl	900104c6 <_ZNK8touchgfx4Rect7isEmptyEv>
900105c0:	b980      	cbnz	r0, 900105e4 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
900105c2:	f8bd 3000 	ldrh.w	r3, [sp]
900105c6:	4669      	mov	r1, sp
900105c8:	88a2      	ldrh	r2, [r4, #4]
900105ca:	4620      	mov	r0, r4
900105cc:	1a9b      	subs	r3, r3, r2
900105ce:	88e2      	ldrh	r2, [r4, #6]
900105d0:	f8ad 3000 	strh.w	r3, [sp]
900105d4:	f8bd 3002 	ldrh.w	r3, [sp, #2]
900105d8:	1a9b      	subs	r3, r3, r2
900105da:	f8ad 3002 	strh.w	r3, [sp, #2]
900105de:	6823      	ldr	r3, [r4, #0]
900105e0:	689b      	ldr	r3, [r3, #8]
900105e2:	4798      	blx	r3
900105e4:	69a4      	ldr	r4, [r4, #24]
900105e6:	2c00      	cmp	r4, #0
900105e8:	d1d8      	bne.n	9001059c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
900105ea:	b002      	add	sp, #8
900105ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

900105f0 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
900105f0:	b573      	push	{r0, r1, r4, r5, r6, lr}
900105f2:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
900105f6:	460d      	mov	r5, r1
900105f8:	4616      	mov	r6, r2
900105fa:	b323      	cbz	r3, 90010646 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
900105fc:	6a84      	ldr	r4, [r0, #40]	@ 0x28
900105fe:	b314      	cbz	r4, 90010646 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
90010600:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
90010604:	b1eb      	cbz	r3, 90010642 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
90010606:	6828      	ldr	r0, [r5, #0]
90010608:	466b      	mov	r3, sp
9001060a:	6869      	ldr	r1, [r5, #4]
9001060c:	c303      	stmia	r3!, {r0, r1}
9001060e:	4668      	mov	r0, sp
90010610:	1d21      	adds	r1, r4, #4
90010612:	f7ff ff15 	bl	90010440 <_ZN8touchgfx4RectaNERKS0_>
90010616:	4668      	mov	r0, sp
90010618:	f7ff ff55 	bl	900104c6 <_ZNK8touchgfx4Rect7isEmptyEv>
9001061c:	b988      	cbnz	r0, 90010642 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
9001061e:	f8bd 3000 	ldrh.w	r3, [sp]
90010622:	4669      	mov	r1, sp
90010624:	88a2      	ldrh	r2, [r4, #4]
90010626:	4620      	mov	r0, r4
90010628:	1a9b      	subs	r3, r3, r2
9001062a:	88e2      	ldrh	r2, [r4, #6]
9001062c:	f8ad 3000 	strh.w	r3, [sp]
90010630:	f8bd 3002 	ldrh.w	r3, [sp, #2]
90010634:	1a9b      	subs	r3, r3, r2
90010636:	4632      	mov	r2, r6
90010638:	f8ad 3002 	strh.w	r3, [sp, #2]
9001063c:	6823      	ldr	r3, [r4, #0]
9001063e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
90010640:	4798      	blx	r3
90010642:	69a4      	ldr	r4, [r4, #24]
90010644:	e7db      	b.n	900105fe <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
90010646:	b002      	add	sp, #8
90010648:	bd70      	pop	{r4, r5, r6, pc}

9001064a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
9001064a:	6803      	ldr	r3, [r0, #0]
9001064c:	b513      	push	{r0, r1, r4, lr}
9001064e:	f8d3 40a8 	ldr.w	r4, [r3, #168]	@ 0xa8
90010652:	2300      	movs	r3, #0
90010654:	e9cd 3300 	strd	r3, r3, [sp]
90010658:	466b      	mov	r3, sp
9001065a:	47a0      	blx	r4
9001065c:	b002      	add	sp, #8
9001065e:	bd10      	pop	{r4, pc}

90010660 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
90010660:	2301      	movs	r3, #1
90010662:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
90010666:	f880 3069 	strb.w	r3, [r0, #105]	@ 0x69
9001066a:	4770      	bx	lr

9001066c <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
9001066c:	2301      	movs	r3, #1
9001066e:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
90010672:	f880 3069 	strb.w	r3, [r0, #105]	@ 0x69
90010676:	4770      	bx	lr

90010678 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
90010678:	6843      	ldr	r3, [r0, #4]
9001067a:	2201      	movs	r2, #1
9001067c:	725a      	strb	r2, [r3, #9]
9001067e:	6840      	ldr	r0, [r0, #4]
90010680:	6803      	ldr	r3, [r0, #0]
90010682:	691b      	ldr	r3, [r3, #16]
90010684:	4718      	bx	r3

90010686 <_ZN8touchgfx3HAL8flushDMAEv>:
90010686:	6840      	ldr	r0, [r0, #4]
90010688:	6803      	ldr	r3, [r0, #0]
9001068a:	689b      	ldr	r3, [r3, #8]
9001068c:	4718      	bx	r3

9001068e <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
9001068e:	b530      	push	{r4, r5, lr}
90010690:	b08b      	sub	sp, #44	@ 0x2c
90010692:	6804      	ldr	r4, [r0, #0]
90010694:	f89d 5058 	ldrb.w	r5, [sp, #88]	@ 0x58
90010698:	9509      	str	r5, [sp, #36]	@ 0x24
9001069a:	f89d 5054 	ldrb.w	r5, [sp, #84]	@ 0x54
9001069e:	9508      	str	r5, [sp, #32]
900106a0:	f89d 5050 	ldrb.w	r5, [sp, #80]	@ 0x50
900106a4:	9507      	str	r5, [sp, #28]
900106a6:	f8bd 504c 	ldrh.w	r5, [sp, #76]	@ 0x4c
900106aa:	9506      	str	r5, [sp, #24]
900106ac:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
900106b0:	9505      	str	r5, [sp, #20]
900106b2:	f89d 5044 	ldrb.w	r5, [sp, #68]	@ 0x44
900106b6:	9504      	str	r5, [sp, #16]
900106b8:	f8bd 5040 	ldrh.w	r5, [sp, #64]	@ 0x40
900106bc:	9503      	str	r5, [sp, #12]
900106be:	f8bd 503c 	ldrh.w	r5, [sp, #60]	@ 0x3c
900106c2:	9502      	str	r5, [sp, #8]
900106c4:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
900106c8:	e9cd 3500 	strd	r3, r5, [sp]
900106cc:	4613      	mov	r3, r2
900106ce:	6be4      	ldr	r4, [r4, #60]	@ 0x3c
900106d0:	2200      	movs	r2, #0
900106d2:	47a0      	blx	r4
900106d4:	b00b      	add	sp, #44	@ 0x2c
900106d6:	bd30      	pop	{r4, r5, pc}

900106d8 <_ZN8touchgfx3HAL10beginFrameEv>:
900106d8:	4b04      	ldr	r3, [pc, #16]	@ (900106ec <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
900106da:	781b      	ldrb	r3, [r3, #0]
900106dc:	b123      	cbz	r3, 900106e8 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
900106de:	f890 006a 	ldrb.w	r0, [r0, #106]	@ 0x6a
900106e2:	f080 0001 	eor.w	r0, r0, #1
900106e6:	4770      	bx	lr
900106e8:	2001      	movs	r0, #1
900106ea:	4770      	bx	lr
900106ec:	2402630a 	.word	0x2402630a

900106f0 <_ZN8touchgfx3HAL8endFrameEv>:
900106f0:	b510      	push	{r4, lr}
900106f2:	4604      	mov	r4, r0
900106f4:	6840      	ldr	r0, [r0, #4]
900106f6:	6803      	ldr	r3, [r0, #0]
900106f8:	689b      	ldr	r3, [r3, #8]
900106fa:	4798      	blx	r3
900106fc:	f894 3069 	ldrb.w	r3, [r4, #105]	@ 0x69
90010700:	b113      	cbz	r3, 90010708 <_ZN8touchgfx3HAL8endFrameEv+0x18>
90010702:	2301      	movs	r3, #1
90010704:	f884 306a 	strb.w	r3, [r4, #106]	@ 0x6a
90010708:	bd10      	pop	{r4, pc}

9001070a <_ZN8touchgfx3HAL10initializeEv>:
9001070a:	b510      	push	{r4, lr}
9001070c:	4604      	mov	r4, r0
9001070e:	f7f2 f821 	bl	90002754 <_ZN8touchgfx10OSWrappers10initializeEv>
90010712:	f7f0 fdf1 	bl	900012f8 <_ZN8touchgfx4GPIO4initEv>
90010716:	6860      	ldr	r0, [r4, #4]
90010718:	6803      	ldr	r3, [r0, #0]
9001071a:	68db      	ldr	r3, [r3, #12]
9001071c:	4798      	blx	r3
9001071e:	68e0      	ldr	r0, [r4, #12]
90010720:	6803      	ldr	r3, [r0, #0]
90010722:	689b      	ldr	r3, [r3, #8]
90010724:	4798      	blx	r3
90010726:	6823      	ldr	r3, [r4, #0]
90010728:	4620      	mov	r0, r4
9001072a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
9001072c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
90010730:	4718      	bx	r3
	...

90010734 <_ZN8touchgfx3HAL4tickEv>:
90010734:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
90010736:	6803      	ldr	r3, [r0, #0]
90010738:	4604      	mov	r4, r0
9001073a:	4d5b      	ldr	r5, [pc, #364]	@ (900108a8 <_ZN8touchgfx3HAL4tickEv+0x174>)
9001073c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
90010740:	4798      	blx	r3
90010742:	2800      	cmp	r0, #0
90010744:	f000 8095 	beq.w	90010872 <_ZN8touchgfx3HAL4tickEv+0x13e>
90010748:	2001      	movs	r0, #1
9001074a:	2600      	movs	r6, #0
9001074c:	f7f0 fe0e 	bl	9000136c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
90010750:	f894 3066 	ldrb.w	r3, [r4, #102]	@ 0x66
90010754:	f884 604b 	strb.w	r6, [r4, #75]	@ 0x4b
90010758:	f884 3067 	strb.w	r3, [r4, #103]	@ 0x67
9001075c:	f894 3075 	ldrb.w	r3, [r4, #117]	@ 0x75
90010760:	f884 6066 	strb.w	r6, [r4, #102]	@ 0x66
90010764:	b133      	cbz	r3, 90010774 <_ZN8touchgfx3HAL4tickEv+0x40>
90010766:	6823      	ldr	r3, [r4, #0]
90010768:	4620      	mov	r0, r4
9001076a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
9001076e:	4798      	blx	r3
90010770:	f884 6075 	strb.w	r6, [r4, #117]	@ 0x75
90010774:	f894 304a 	ldrb.w	r3, [r4, #74]	@ 0x4a
90010778:	2601      	movs	r6, #1
9001077a:	6862      	ldr	r2, [r4, #4]
9001077c:	f083 0301 	eor.w	r3, r3, #1
90010780:	702e      	strb	r6, [r5, #0]
90010782:	7253      	strb	r3, [r2, #9]
90010784:	f003 fa2a 	bl	90013bdc <_ZN8touchgfx11Application11getInstanceEv>
90010788:	6803      	ldr	r3, [r0, #0]
9001078a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
9001078c:	4798      	blx	r3
9001078e:	f894 3067 	ldrb.w	r3, [r4, #103]	@ 0x67
90010792:	b90b      	cbnz	r3, 90010798 <_ZN8touchgfx3HAL4tickEv+0x64>
90010794:	f884 6067 	strb.w	r6, [r4, #103]	@ 0x67
90010798:	f003 fa20 	bl	90013bdc <_ZN8touchgfx11Application11getInstanceEv>
9001079c:	6803      	ldr	r3, [r0, #0]
9001079e:	695b      	ldr	r3, [r3, #20]
900107a0:	4798      	blx	r3
900107a2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
900107a4:	6803      	ldr	r3, [r0, #0]
900107a6:	691b      	ldr	r3, [r3, #16]
900107a8:	4798      	blx	r3
900107aa:	f894 3067 	ldrb.w	r3, [r4, #103]	@ 0x67
900107ae:	f894 2068 	ldrb.w	r2, [r4, #104]	@ 0x68
900107b2:	3b01      	subs	r3, #1
900107b4:	b2db      	uxtb	r3, r3
900107b6:	f884 3067 	strb.w	r3, [r4, #103]	@ 0x67
900107ba:	b10a      	cbz	r2, 900107c0 <_ZN8touchgfx3HAL4tickEv+0x8c>
900107bc:	2b00      	cmp	r3, #0
900107be:	d1eb      	bne.n	90010798 <_ZN8touchgfx3HAL4tickEv+0x64>
900107c0:	4a3a      	ldr	r2, [pc, #232]	@ (900108ac <_ZN8touchgfx3HAL4tickEv+0x178>)
900107c2:	f994 1064 	ldrsb.w	r1, [r4, #100]	@ 0x64
900107c6:	7813      	ldrb	r3, [r2, #0]
900107c8:	3301      	adds	r3, #1
900107ca:	b25b      	sxtb	r3, r3
900107cc:	4299      	cmp	r1, r3
900107ce:	7013      	strb	r3, [r2, #0]
900107d0:	dc10      	bgt.n	900107f4 <_ZN8touchgfx3HAL4tickEv+0xc0>
900107d2:	2300      	movs	r3, #0
900107d4:	68e0      	ldr	r0, [r4, #12]
900107d6:	a902      	add	r1, sp, #8
900107d8:	7013      	strb	r3, [r2, #0]
900107da:	aa03      	add	r2, sp, #12
900107dc:	6803      	ldr	r3, [r0, #0]
900107de:	68db      	ldr	r3, [r3, #12]
900107e0:	4798      	blx	r3
900107e2:	6823      	ldr	r3, [r4, #0]
900107e4:	2800      	cmp	r0, #0
900107e6:	d050      	beq.n	9001088a <_ZN8touchgfx3HAL4tickEv+0x156>
900107e8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
900107ec:	4620      	mov	r0, r4
900107ee:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
900107f2:	4798      	blx	r3
900107f4:	2300      	movs	r3, #0
900107f6:	6960      	ldr	r0, [r4, #20]
900107f8:	f88d 3007 	strb.w	r3, [sp, #7]
900107fc:	b158      	cbz	r0, 90010816 <_ZN8touchgfx3HAL4tickEv+0xe2>
900107fe:	6803      	ldr	r3, [r0, #0]
90010800:	f10d 0107 	add.w	r1, sp, #7
90010804:	68db      	ldr	r3, [r3, #12]
90010806:	4798      	blx	r3
90010808:	b128      	cbz	r0, 90010816 <_ZN8touchgfx3HAL4tickEv+0xe2>
9001080a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
9001080c:	f89d 1007 	ldrb.w	r1, [sp, #7]
90010810:	6803      	ldr	r3, [r0, #0]
90010812:	68db      	ldr	r3, [r3, #12]
90010814:	4798      	blx	r3
90010816:	f104 001c 	add.w	r0, r4, #28
9001081a:	f012 f917 	bl	90022a4c <_ZN8touchgfx8Gestures4tickEv>
9001081e:	f894 306c 	ldrb.w	r3, [r4, #108]	@ 0x6c
90010822:	b30b      	cbz	r3, 90010868 <_ZN8touchgfx3HAL4tickEv+0x134>
90010824:	6920      	ldr	r0, [r4, #16]
90010826:	6803      	ldr	r3, [r0, #0]
90010828:	691b      	ldr	r3, [r3, #16]
9001082a:	4798      	blx	r3
9001082c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
9001082e:	4606      	mov	r6, r0
90010830:	b903      	cbnz	r3, 90010834 <_ZN8touchgfx3HAL4tickEv+0x100>
90010832:	6720      	str	r0, [r4, #112]	@ 0x70
90010834:	6f23      	ldr	r3, [r4, #112]	@ 0x70
90010836:	4a1e      	ldr	r2, [pc, #120]	@ (900108b0 <_ZN8touchgfx3HAL4tickEv+0x17c>)
90010838:	1af3      	subs	r3, r6, r3
9001083a:	4293      	cmp	r3, r2
9001083c:	d914      	bls.n	90010868 <_ZN8touchgfx3HAL4tickEv+0x134>
9001083e:	6920      	ldr	r0, [r4, #16]
90010840:	6803      	ldr	r3, [r0, #0]
90010842:	699b      	ldr	r3, [r3, #24]
90010844:	4798      	blx	r3
90010846:	6f23      	ldr	r3, [r4, #112]	@ 0x70
90010848:	2264      	movs	r2, #100	@ 0x64
9001084a:	1af3      	subs	r3, r6, r3
9001084c:	fbb3 f3f2 	udiv	r3, r3, r2
90010850:	fbb0 f0f3 	udiv	r0, r0, r3
90010854:	2800      	cmp	r0, #0
90010856:	dc1d      	bgt.n	90010894 <_ZN8touchgfx3HAL4tickEv+0x160>
90010858:	f884 2065 	strb.w	r2, [r4, #101]	@ 0x65
9001085c:	6920      	ldr	r0, [r4, #16]
9001085e:	2100      	movs	r1, #0
90010860:	6803      	ldr	r3, [r0, #0]
90010862:	69db      	ldr	r3, [r3, #28]
90010864:	4798      	blx	r3
90010866:	6726      	str	r6, [r4, #112]	@ 0x70
90010868:	f003 f9b8 	bl	90013bdc <_ZN8touchgfx11Application11getInstanceEv>
9001086c:	6803      	ldr	r3, [r0, #0]
9001086e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
90010870:	4798      	blx	r3
90010872:	6823      	ldr	r3, [r4, #0]
90010874:	4620      	mov	r0, r4
90010876:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
9001087a:	4798      	blx	r3
9001087c:	2001      	movs	r0, #1
9001087e:	f7f0 fda9 	bl	900013d4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
90010882:	2300      	movs	r3, #0
90010884:	702b      	strb	r3, [r5, #0]
90010886:	b004      	add	sp, #16
90010888:	bd70      	pop	{r4, r5, r6, pc}
9001088a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
9001088e:	4620      	mov	r0, r4
90010890:	4798      	blx	r3
90010892:	e7af      	b.n	900107f4 <_ZN8touchgfx3HAL4tickEv+0xc0>
90010894:	2863      	cmp	r0, #99	@ 0x63
90010896:	bfcb      	itete	gt
90010898:	2300      	movgt	r3, #0
9001089a:	f1c0 0064 	rsble	r0, r0, #100	@ 0x64
9001089e:	f884 3065 	strbgt.w	r3, [r4, #101]	@ 0x65
900108a2:	f884 0065 	strble.w	r0, [r4, #101]	@ 0x65
900108a6:	e7d9      	b.n	9001085c <_ZN8touchgfx3HAL4tickEv+0x128>
900108a8:	24026310 	.word	0x24026310
900108ac:	24026311 	.word	0x24026311
900108b0:	05f5e100 	.word	0x05f5e100

900108b4 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
900108b4:	f7f1 bf80 	b.w	900027b8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

900108b8 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
900108b8:	6581      	str	r1, [r0, #88]	@ 0x58
900108ba:	301c      	adds	r0, #28
900108bc:	f012 b8c4 	b.w	90022a48 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

900108c0 <_ZN8touchgfx3HAL5touchEll>:
900108c0:	b530      	push	{r4, r5, lr}
900108c2:	b087      	sub	sp, #28
900108c4:	4604      	mov	r4, r0
900108c6:	a804      	add	r0, sp, #16
900108c8:	e9cd 1204 	strd	r1, r2, [sp, #16]
900108cc:	f002 ff68 	bl	900137a0 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
900108d0:	9b04      	ldr	r3, [sp, #16]
900108d2:	a906      	add	r1, sp, #24
900108d4:	a803      	add	r0, sp, #12
900108d6:	f8ad 300c 	strh.w	r3, [sp, #12]
900108da:	9b05      	ldr	r3, [sp, #20]
900108dc:	f821 3d0a 	strh.w	r3, [r1, #-10]!
900108e0:	f002 ffb0 	bl	90013844 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
900108e4:	f894 106b 	ldrb.w	r1, [r4, #107]	@ 0x6b
900108e8:	f104 001c 	add.w	r0, r4, #28
900108ec:	f8bd 200c 	ldrh.w	r2, [sp, #12]
900108f0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
900108f4:	b189      	cbz	r1, 9001091a <_ZN8touchgfx3HAL5touchEll+0x5a>
900108f6:	f8b4 5060 	ldrh.w	r5, [r4, #96]	@ 0x60
900108fa:	9300      	str	r3, [sp, #0]
900108fc:	4613      	mov	r3, r2
900108fe:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
90010902:	462a      	mov	r2, r5
90010904:	f012 f8b0 	bl	90022a68 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
90010908:	b128      	cbz	r0, 90010916 <_ZN8touchgfx3HAL5touchEll+0x56>
9001090a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
9001090e:	65e3      	str	r3, [r4, #92]	@ 0x5c
90010910:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
90010914:	6623      	str	r3, [r4, #96]	@ 0x60
90010916:	b007      	add	sp, #28
90010918:	bd30      	pop	{r4, r5, pc}
9001091a:	f012 f8e5 	bl	90022ae8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
9001091e:	2301      	movs	r3, #1
90010920:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
90010924:	e7f1      	b.n	9001090a <_ZN8touchgfx3HAL5touchEll+0x4a>

90010926 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
90010926:	b510      	push	{r4, lr}
90010928:	2b00      	cmp	r3, #0
9001092a:	d046      	beq.n	900109ba <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
9001092c:	ea81 0002 	eor.w	r0, r1, r2
90010930:	07c4      	lsls	r4, r0, #31
90010932:	d508      	bpl.n	90010946 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
90010934:	440b      	add	r3, r1
90010936:	3a01      	subs	r2, #1
90010938:	428b      	cmp	r3, r1
9001093a:	d93e      	bls.n	900109ba <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
9001093c:	f812 0f01 	ldrb.w	r0, [r2, #1]!
90010940:	f801 0b01 	strb.w	r0, [r1], #1
90010944:	e7f8      	b.n	90010938 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
90010946:	07d0      	lsls	r0, r2, #31
90010948:	bf42      	ittt	mi
9001094a:	f812 0b01 	ldrbmi.w	r0, [r2], #1
9001094e:	f103 33ff 	addmi.w	r3, r3, #4294967295
90010952:	f801 0b01 	strbmi.w	r0, [r1], #1
90010956:	2b01      	cmp	r3, #1
90010958:	d911      	bls.n	9001097e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
9001095a:	ea81 0402 	eor.w	r4, r1, r2
9001095e:	4610      	mov	r0, r2
90010960:	07a4      	lsls	r4, r4, #30
90010962:	d022      	beq.n	900109aa <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
90010964:	f023 0401 	bic.w	r4, r3, #1
90010968:	440c      	add	r4, r1
9001096a:	428c      	cmp	r4, r1
9001096c:	4602      	mov	r2, r0
9001096e:	d904      	bls.n	9001097a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
90010970:	8812      	ldrh	r2, [r2, #0]
90010972:	3002      	adds	r0, #2
90010974:	f821 2b02 	strh.w	r2, [r1], #2
90010978:	e7f7      	b.n	9001096a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
9001097a:	f003 0301 	and.w	r3, r3, #1
9001097e:	f023 0003 	bic.w	r0, r3, #3
90010982:	4408      	add	r0, r1
90010984:	4288      	cmp	r0, r1
90010986:	4614      	mov	r4, r2
90010988:	d904      	bls.n	90010994 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
9001098a:	6824      	ldr	r4, [r4, #0]
9001098c:	3204      	adds	r2, #4
9001098e:	f841 4b04 	str.w	r4, [r1], #4
90010992:	e7f7      	b.n	90010984 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
90010994:	f003 0303 	and.w	r3, r3, #3
90010998:	3a01      	subs	r2, #1
9001099a:	440b      	add	r3, r1
9001099c:	428b      	cmp	r3, r1
9001099e:	d90c      	bls.n	900109ba <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
900109a0:	f812 0f01 	ldrb.w	r0, [r2, #1]!
900109a4:	f801 0b01 	strb.w	r0, [r1], #1
900109a8:	e7f8      	b.n	9001099c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
900109aa:	0790      	lsls	r0, r2, #30
900109ac:	d0e7      	beq.n	9001097e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
900109ae:	f832 0b02 	ldrh.w	r0, [r2], #2
900109b2:	3b02      	subs	r3, #2
900109b4:	f821 0b02 	strh.w	r0, [r1], #2
900109b8:	e7e1      	b.n	9001097e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
900109ba:	2001      	movs	r0, #1
900109bc:	bd10      	pop	{r4, pc}

900109be <_ZN8touchgfx3HAL7noTouchEv>:
900109be:	b510      	push	{r4, lr}
900109c0:	f890 306b 	ldrb.w	r3, [r0, #107]	@ 0x6b
900109c4:	4604      	mov	r4, r0
900109c6:	b153      	cbz	r3, 900109de <_ZN8touchgfx3HAL7noTouchEv+0x20>
900109c8:	f8b0 3060 	ldrh.w	r3, [r0, #96]	@ 0x60
900109cc:	2101      	movs	r1, #1
900109ce:	f8b0 205c 	ldrh.w	r2, [r0, #92]	@ 0x5c
900109d2:	301c      	adds	r0, #28
900109d4:	f012 f888 	bl	90022ae8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
900109d8:	2300      	movs	r3, #0
900109da:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
900109de:	bd10      	pop	{r4, pc}

900109e0 <_ZN8touchgfx8Drawable5setXYEss>:
900109e0:	b570      	push	{r4, r5, r6, lr}
900109e2:	6803      	ldr	r3, [r0, #0]
900109e4:	4604      	mov	r4, r0
900109e6:	4615      	mov	r5, r2
900109e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
900109ea:	4798      	blx	r3
900109ec:	6823      	ldr	r3, [r4, #0]
900109ee:	4629      	mov	r1, r5
900109f0:	4620      	mov	r0, r4
900109f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
900109f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
900109f8:	4718      	bx	r3
	...

900109fc <_ZN8touchgfx3HAL3lcdEv>:
900109fc:	4b04      	ldr	r3, [pc, #16]	@ (90010a10 <_ZN8touchgfx3HAL3lcdEv+0x14>)
900109fe:	681b      	ldr	r3, [r3, #0]
90010a00:	f893 2076 	ldrb.w	r2, [r3, #118]	@ 0x76
90010a04:	b10a      	cbz	r2, 90010a0a <_ZN8touchgfx3HAL3lcdEv+0xe>
90010a06:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
90010a08:	b900      	cbnz	r0, 90010a0c <_ZN8touchgfx3HAL3lcdEv+0x10>
90010a0a:	6898      	ldr	r0, [r3, #8]
90010a0c:	4770      	bx	lr
90010a0e:	bf00      	nop
90010a10:	2402630c 	.word	0x2402630c

90010a14 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
90010a14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
90010a18:	b085      	sub	sp, #20
90010a1a:	4604      	mov	r4, r0
90010a1c:	2000      	movs	r0, #0
90010a1e:	4699      	mov	r9, r3
90010a20:	ad04      	add	r5, sp, #16
90010a22:	460f      	mov	r7, r1
90010a24:	4690      	mov	r8, r2
90010a26:	f845 0d04 	str.w	r0, [r5, #-4]!
90010a2a:	69a0      	ldr	r0, [r4, #24]
90010a2c:	6806      	ldr	r6, [r0, #0]
90010a2e:	9501      	str	r5, [sp, #4]
90010a30:	f8bd 5030 	ldrh.w	r5, [sp, #48]	@ 0x30
90010a34:	9500      	str	r5, [sp, #0]
90010a36:	6835      	ldr	r5, [r6, #0]
90010a38:	47a8      	blx	r5
90010a3a:	4d10      	ldr	r5, [pc, #64]	@ (90010a7c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
90010a3c:	4606      	mov	r6, r0
90010a3e:	f8a5 9000 	strh.w	r9, [r5]
90010a42:	f7ff ffdb 	bl	900109fc <_ZN8touchgfx3HAL3lcdEv>
90010a46:	6803      	ldr	r3, [r0, #0]
90010a48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90010a4a:	4798      	blx	r3
90010a4c:	b128      	cbz	r0, 90010a5a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
90010a4e:	2801      	cmp	r0, #1
90010a50:	d00b      	beq.n	90010a6a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
90010a52:	4630      	mov	r0, r6
90010a54:	b005      	add	sp, #20
90010a56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
90010a5a:	882b      	ldrh	r3, [r5, #0]
90010a5c:	fb08 7203 	mla	r2, r8, r3, r7
90010a60:	9b03      	ldr	r3, [sp, #12]
90010a62:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
90010a66:	63e3      	str	r3, [r4, #60]	@ 0x3c
90010a68:	e7f3      	b.n	90010a52 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
90010a6a:	882a      	ldrh	r2, [r5, #0]
90010a6c:	9b03      	ldr	r3, [sp, #12]
90010a6e:	fb08 7202 	mla	r2, r8, r2, r7
90010a72:	eb02 0242 	add.w	r2, r2, r2, lsl #1
90010a76:	1a9a      	subs	r2, r3, r2
90010a78:	63e2      	str	r2, [r4, #60]	@ 0x3c
90010a7a:	e7ea      	b.n	90010a52 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
90010a7c:	24026306 	.word	0x24026306

90010a80 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
90010a80:	b5f0      	push	{r4, r5, r6, r7, lr}
90010a82:	b08b      	sub	sp, #44	@ 0x2c
90010a84:	4617      	mov	r7, r2
90010a86:	4604      	mov	r4, r0
90010a88:	460e      	mov	r6, r1
90010a8a:	461d      	mov	r5, r3
90010a8c:	f7ff ffb6 	bl	900109fc <_ZN8touchgfx3HAL3lcdEv>
90010a90:	6803      	ldr	r3, [r0, #0]
90010a92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90010a94:	4798      	blx	r3
90010a96:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
90010a9a:	9007      	str	r0, [sp, #28]
90010a9c:	4631      	mov	r1, r6
90010a9e:	6822      	ldr	r2, [r4, #0]
90010aa0:	e9cd 0308 	strd	r0, r3, [sp, #32]
90010aa4:	4b0c      	ldr	r3, [pc, #48]	@ (90010ad8 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
90010aa6:	4620      	mov	r0, r4
90010aa8:	881b      	ldrh	r3, [r3, #0]
90010aaa:	9306      	str	r3, [sp, #24]
90010aac:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
90010ab0:	9305      	str	r3, [sp, #20]
90010ab2:	f89d 304c 	ldrb.w	r3, [sp, #76]	@ 0x4c
90010ab6:	9304      	str	r3, [sp, #16]
90010ab8:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
90010abc:	9303      	str	r3, [sp, #12]
90010abe:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
90010ac2:	9302      	str	r3, [sp, #8]
90010ac4:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
90010ac8:	e9cd 5300 	strd	r5, r3, [sp]
90010acc:	463b      	mov	r3, r7
90010ace:	6bd5      	ldr	r5, [r2, #60]	@ 0x3c
90010ad0:	2200      	movs	r2, #0
90010ad2:	47a8      	blx	r5
90010ad4:	b00b      	add	sp, #44	@ 0x2c
90010ad6:	bdf0      	pop	{r4, r5, r6, r7, pc}
90010ad8:	24026306 	.word	0x24026306

90010adc <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
90010adc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
90010ae0:	4698      	mov	r8, r3
90010ae2:	6803      	ldr	r3, [r0, #0]
90010ae4:	b08b      	sub	sp, #44	@ 0x2c
90010ae6:	4617      	mov	r7, r2
90010ae8:	6bdd      	ldr	r5, [r3, #60]	@ 0x3c
90010aea:	460e      	mov	r6, r1
90010aec:	4b13      	ldr	r3, [pc, #76]	@ (90010b3c <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
90010aee:	4604      	mov	r4, r0
90010af0:	f8b3 9000 	ldrh.w	r9, [r3]
90010af4:	f7ff ff82 	bl	900109fc <_ZN8touchgfx3HAL3lcdEv>
90010af8:	6803      	ldr	r3, [r0, #0]
90010afa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90010afc:	4798      	blx	r3
90010afe:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
90010b02:	2200      	movs	r2, #0
90010b04:	4631      	mov	r1, r6
90010b06:	e9cd 0308 	strd	r0, r3, [sp, #32]
90010b0a:	2302      	movs	r3, #2
90010b0c:	4620      	mov	r0, r4
90010b0e:	e9cd 9306 	strd	r9, r3, [sp, #24]
90010b12:	2301      	movs	r3, #1
90010b14:	9305      	str	r3, [sp, #20]
90010b16:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
90010b1a:	9304      	str	r3, [sp, #16]
90010b1c:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
90010b20:	9303      	str	r3, [sp, #12]
90010b22:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
90010b26:	9302      	str	r3, [sp, #8]
90010b28:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
90010b2c:	e9cd 8300 	strd	r8, r3, [sp]
90010b30:	463b      	mov	r3, r7
90010b32:	47a8      	blx	r5
90010b34:	b00b      	add	sp, #44	@ 0x2c
90010b36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
90010b3a:	bf00      	nop
90010b3c:	24026306 	.word	0x24026306

90010b40 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
90010b40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
90010b44:	4698      	mov	r8, r3
90010b46:	6803      	ldr	r3, [r0, #0]
90010b48:	b087      	sub	sp, #28
90010b4a:	460e      	mov	r6, r1
90010b4c:	6d9d      	ldr	r5, [r3, #88]	@ 0x58
90010b4e:	4617      	mov	r7, r2
90010b50:	4b0f      	ldr	r3, [pc, #60]	@ (90010b90 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
90010b52:	4604      	mov	r4, r0
90010b54:	f8b3 9000 	ldrh.w	r9, [r3]
90010b58:	f7ff ff50 	bl	900109fc <_ZN8touchgfx3HAL3lcdEv>
90010b5c:	6803      	ldr	r3, [r0, #0]
90010b5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90010b60:	4798      	blx	r3
90010b62:	f89d 3044 	ldrb.w	r3, [sp, #68]	@ 0x44
90010b66:	463a      	mov	r2, r7
90010b68:	4631      	mov	r1, r6
90010b6a:	f8cd 900c 	str.w	r9, [sp, #12]
90010b6e:	e9cd 0304 	strd	r0, r3, [sp, #16]
90010b72:	f89d 3040 	ldrb.w	r3, [sp, #64]	@ 0x40
90010b76:	4620      	mov	r0, r4
90010b78:	9302      	str	r3, [sp, #8]
90010b7a:	f8bd 303c 	ldrh.w	r3, [sp, #60]	@ 0x3c
90010b7e:	9301      	str	r3, [sp, #4]
90010b80:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
90010b84:	9300      	str	r3, [sp, #0]
90010b86:	4643      	mov	r3, r8
90010b88:	47a8      	blx	r5
90010b8a:	b007      	add	sp, #28
90010b8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
90010b90:	24026306 	.word	0x24026306

90010b94 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
90010b94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90010b98:	4604      	mov	r4, r0
90010b9a:	b08f      	sub	sp, #60	@ 0x3c
90010b9c:	4610      	mov	r0, r2
90010b9e:	460d      	mov	r5, r1
90010ba0:	4691      	mov	r9, r2
90010ba2:	461e      	mov	r6, r3
90010ba4:	f006 f992 	bl	90016ecc <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
90010ba8:	2800      	cmp	r0, #0
90010baa:	f000 809d 	beq.w	90010ce8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
90010bae:	6823      	ldr	r3, [r4, #0]
90010bb0:	4620      	mov	r0, r4
90010bb2:	f8df b198 	ldr.w	fp, [pc, #408]	@ 90010d4c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
90010bb6:	f10d 0838 	add.w	r8, sp, #56	@ 0x38
90010bba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90010bbc:	4798      	blx	r3
90010bbe:	6823      	ldr	r3, [r4, #0]
90010bc0:	4620      	mov	r0, r4
90010bc2:	f8df a18c 	ldr.w	sl, [pc, #396]	@ 90010d50 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
90010bc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90010bc8:	4798      	blx	r3
90010bca:	f8bb 3000 	ldrh.w	r3, [fp]
90010bce:	4f5c      	ldr	r7, [pc, #368]	@ (90010d40 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
90010bd0:	9301      	str	r3, [sp, #4]
90010bd2:	f8ba 3000 	ldrh.w	r3, [sl]
90010bd6:	f828 9d1c 	strh.w	r9, [r8, #-28]!
90010bda:	4640      	mov	r0, r8
90010bdc:	9302      	str	r3, [sp, #8]
90010bde:	883b      	ldrh	r3, [r7, #0]
90010be0:	9303      	str	r3, [sp, #12]
90010be2:	4b58      	ldr	r3, [pc, #352]	@ (90010d44 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
90010be4:	881a      	ldrh	r2, [r3, #0]
90010be6:	9305      	str	r3, [sp, #20]
90010be8:	9204      	str	r2, [sp, #16]
90010bea:	f006 fa03 	bl	90016ff4 <_ZNK8touchgfx6Bitmap8getWidthEv>
90010bee:	8038      	strh	r0, [r7, #0]
90010bf0:	4640      	mov	r0, r8
90010bf2:	f006 fa33 	bl	9001705c <_ZNK8touchgfx6Bitmap9getHeightEv>
90010bf6:	9b05      	ldr	r3, [sp, #20]
90010bf8:	b280      	uxth	r0, r0
90010bfa:	8018      	strh	r0, [r3, #0]
90010bfc:	4b52      	ldr	r3, [pc, #328]	@ (90010d48 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
90010bfe:	781b      	ldrb	r3, [r3, #0]
90010c00:	2b00      	cmp	r3, #0
90010c02:	d174      	bne.n	90010cee <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
90010c04:	883b      	ldrh	r3, [r7, #0]
90010c06:	f8aa 0000 	strh.w	r0, [sl]
90010c0a:	f8ab 3000 	strh.w	r3, [fp]
90010c0e:	4648      	mov	r0, r9
90010c10:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	@ 0x3c
90010c14:	f006 f95a 	bl	90016ecc <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
90010c18:	2200      	movs	r2, #0
90010c1a:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
90010c1e:	4611      	mov	r1, r2
90010c20:	4628      	mov	r0, r5
90010c22:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
90010c26:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
90010c2a:	f7ff fed9 	bl	900109e0 <_ZN8touchgfx8Drawable5setXYEss>
90010c2e:	2301      	movs	r3, #1
90010c30:	f895 b025 	ldrb.w	fp, [r5, #37]	@ 0x25
90010c34:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
90010c38:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
90010c3c:	2b00      	cmp	r3, #0
90010c3e:	dd5c      	ble.n	90010cfa <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
90010c40:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
90010c44:	2b00      	cmp	r3, #0
90010c46:	dd58      	ble.n	90010cfa <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
90010c48:	462a      	mov	r2, r5
90010c4a:	ab0a      	add	r3, sp, #40	@ 0x28
90010c4c:	f852 0f04 	ldr.w	r0, [r2, #4]!
90010c50:	6851      	ldr	r1, [r2, #4]
90010c52:	c303      	stmia	r3!, {r0, r1}
90010c54:	4631      	mov	r1, r6
90010c56:	a80a      	add	r0, sp, #40	@ 0x28
90010c58:	f7ff fbf2 	bl	90010440 <_ZN8touchgfx4RectaNERKS0_>
90010c5c:	4b38      	ldr	r3, [pc, #224]	@ (90010d40 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
90010c5e:	2100      	movs	r1, #0
90010c60:	f9b3 2000 	ldrsh.w	r2, [r3]
90010c64:	4b37      	ldr	r3, [pc, #220]	@ (90010d44 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
90010c66:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
90010c6a:	aa0a      	add	r2, sp, #40	@ 0x28
90010c6c:	f9b3 3000 	ldrsh.w	r3, [r3]
90010c70:	910c      	str	r1, [sp, #48]	@ 0x30
90010c72:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
90010c76:	ab08      	add	r3, sp, #32
90010c78:	e892 0003 	ldmia.w	r2, {r0, r1}
90010c7c:	e883 0003 	stmia.w	r3, {r0, r1}
90010c80:	4618      	mov	r0, r3
90010c82:	a90c      	add	r1, sp, #48	@ 0x30
90010c84:	f7ff fbdc 	bl	90010440 <_ZN8touchgfx4RectaNERKS0_>
90010c88:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
90010c8a:	2b00      	cmp	r3, #0
90010c8c:	d13c      	bne.n	90010d08 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
90010c8e:	2000      	movs	r0, #0
90010c90:	f884 0076 	strb.w	r0, [r4, #118]	@ 0x76
90010c94:	2600      	movs	r6, #0
90010c96:	696b      	ldr	r3, [r5, #20]
90010c98:	a908      	add	r1, sp, #32
90010c9a:	682a      	ldr	r2, [r5, #0]
90010c9c:	4628      	mov	r0, r5
90010c9e:	9305      	str	r3, [sp, #20]
90010ca0:	616e      	str	r6, [r5, #20]
90010ca2:	6892      	ldr	r2, [r2, #8]
90010ca4:	4790      	blx	r2
90010ca6:	9b05      	ldr	r3, [sp, #20]
90010ca8:	4652      	mov	r2, sl
90010caa:	4649      	mov	r1, r9
90010cac:	616b      	str	r3, [r5, #20]
90010cae:	4628      	mov	r0, r5
90010cb0:	f884 6076 	strb.w	r6, [r4, #118]	@ 0x76
90010cb4:	f885 b025 	strb.w	fp, [r5, #37]	@ 0x25
90010cb8:	f7ff fe92 	bl	900109e0 <_ZN8touchgfx8Drawable5setXYEss>
90010cbc:	9a01      	ldr	r2, [sp, #4]
90010cbe:	4b23      	ldr	r3, [pc, #140]	@ (90010d4c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
90010cc0:	4620      	mov	r0, r4
90010cc2:	801a      	strh	r2, [r3, #0]
90010cc4:	9a02      	ldr	r2, [sp, #8]
90010cc6:	4b22      	ldr	r3, [pc, #136]	@ (90010d50 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
90010cc8:	801a      	strh	r2, [r3, #0]
90010cca:	9a03      	ldr	r2, [sp, #12]
90010ccc:	4b1c      	ldr	r3, [pc, #112]	@ (90010d40 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
90010cce:	801a      	strh	r2, [r3, #0]
90010cd0:	4b1c      	ldr	r3, [pc, #112]	@ (90010d44 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
90010cd2:	9a04      	ldr	r2, [sp, #16]
90010cd4:	801a      	strh	r2, [r3, #0]
90010cd6:	6823      	ldr	r3, [r4, #0]
90010cd8:	e9c4 870f 	strd	r8, r7, [r4, #60]	@ 0x3c
90010cdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90010cde:	4798      	blx	r3
90010ce0:	6823      	ldr	r3, [r4, #0]
90010ce2:	4620      	mov	r0, r4
90010ce4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90010ce6:	4798      	blx	r3
90010ce8:	b00f      	add	sp, #60	@ 0x3c
90010cea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90010cee:	883b      	ldrh	r3, [r7, #0]
90010cf0:	f8ab 0000 	strh.w	r0, [fp]
90010cf4:	f8aa 3000 	strh.w	r3, [sl]
90010cf8:	e789      	b.n	90010c0e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
90010cfa:	462a      	mov	r2, r5
90010cfc:	ab0a      	add	r3, sp, #40	@ 0x28
90010cfe:	f852 0f04 	ldr.w	r0, [r2, #4]!
90010d02:	6851      	ldr	r1, [r2, #4]
90010d04:	c303      	stmia	r3!, {r0, r1}
90010d06:	e7a9      	b.n	90010c5c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
90010d08:	a807      	add	r0, sp, #28
90010d0a:	f006 fae3 	bl	900172d4 <_ZNK8touchgfx6Bitmap9getFormatEv>
90010d0e:	4606      	mov	r6, r0
90010d10:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
90010d12:	6803      	ldr	r3, [r0, #0]
90010d14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90010d16:	4798      	blx	r3
90010d18:	4286      	cmp	r6, r0
90010d1a:	d1b8      	bne.n	90010c8e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
90010d1c:	f7ff fe6e 	bl	900109fc <_ZN8touchgfx3HAL3lcdEv>
90010d20:	6803      	ldr	r3, [r0, #0]
90010d22:	4606      	mov	r6, r0
90010d24:	a807      	add	r0, sp, #28
90010d26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
90010d28:	9305      	str	r3, [sp, #20]
90010d2a:	f006 fad3 	bl	900172d4 <_ZNK8touchgfx6Bitmap9getFormatEv>
90010d2e:	9b05      	ldr	r3, [sp, #20]
90010d30:	4601      	mov	r1, r0
90010d32:	4630      	mov	r0, r6
90010d34:	4798      	blx	r3
90010d36:	f080 0001 	eor.w	r0, r0, #1
90010d3a:	b2c0      	uxtb	r0, r0
90010d3c:	e7a8      	b.n	90010c90 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
90010d3e:	bf00      	nop
90010d40:	24026300 	.word	0x24026300
90010d44:	24026302 	.word	0x24026302
90010d48:	24026304 	.word	0x24026304
90010d4c:	24026306 	.word	0x24026306
90010d50:	24026308 	.word	0x24026308

90010d54 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
90010d54:	4b07      	ldr	r3, [pc, #28]	@ (90010d74 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
90010d56:	b510      	push	{r4, lr}
90010d58:	781b      	ldrb	r3, [r3, #0]
90010d5a:	4604      	mov	r4, r0
90010d5c:	b13b      	cbz	r3, 90010d6e <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
90010d5e:	6803      	ldr	r3, [r0, #0]
90010d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
90010d62:	4798      	blx	r3
90010d64:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
90010d66:	4283      	cmp	r3, r0
90010d68:	d101      	bne.n	90010d6e <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
90010d6a:	6c20      	ldr	r0, [r4, #64]	@ 0x40
90010d6c:	bd10      	pop	{r4, pc}
90010d6e:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
90010d70:	e7fc      	b.n	90010d6c <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
90010d72:	bf00      	nop
90010d74:	2402630a 	.word	0x2402630a

90010d78 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
90010d78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90010d7c:	461d      	mov	r5, r3
90010d7e:	b08a      	sub	sp, #40	@ 0x28
90010d80:	f44f 6380 	mov.w	r3, #1024	@ 0x400
90010d84:	4690      	mov	r8, r2
90010d86:	f8bd 604c 	ldrh.w	r6, [sp, #76]	@ 0x4c
90010d8a:	2400      	movs	r4, #0
90010d8c:	4607      	mov	r7, r0
90010d8e:	fb06 8505 	mla	r5, r6, r5, r8
90010d92:	9404      	str	r4, [sp, #16]
90010d94:	f88d 4020 	strb.w	r4, [sp, #32]
90010d98:	e9cd 3101 	strd	r3, r1, [sp, #4]
90010d9c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
90010da0:	f8ad 3018 	strh.w	r3, [sp, #24]
90010da4:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
90010da8:	f8ad 301a 	strh.w	r3, [sp, #26]
90010dac:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
90010db0:	f8ad 301c 	strh.w	r3, [sp, #28]
90010db4:	f7ff ffce 	bl	90010d54 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
90010db8:	eb00 0545 	add.w	r5, r0, r5, lsl #1
90010dbc:	6878      	ldr	r0, [r7, #4]
90010dbe:	f8ad 601e 	strh.w	r6, [sp, #30]
90010dc2:	a901      	add	r1, sp, #4
90010dc4:	9505      	str	r5, [sp, #20]
90010dc6:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
90010dca:	f88d 4021 	strb.w	r4, [sp, #33]	@ 0x21
90010dce:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
90010dd2:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
90010dd6:	6803      	ldr	r3, [r0, #0]
90010dd8:	685b      	ldr	r3, [r3, #4]
90010dda:	4798      	blx	r3
90010ddc:	b00a      	add	sp, #40	@ 0x28
90010dde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

90010de2 <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
90010de2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
90010de6:	b08b      	sub	sp, #44	@ 0x2c
90010de8:	2400      	movs	r4, #0
90010dea:	4691      	mov	r9, r2
90010dec:	461d      	mov	r5, r3
90010dee:	f8bd 6050 	ldrh.w	r6, [sp, #80]	@ 0x50
90010df2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
90010df6:	4688      	mov	r8, r1
90010df8:	4607      	mov	r7, r0
90010dfa:	9404      	str	r4, [sp, #16]
90010dfc:	fb06 9505 	mla	r5, r6, r5, r9
90010e00:	e9cd 3401 	strd	r3, r4, [sp, #4]
90010e04:	f7ff ffa6 	bl	90010d54 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
90010e08:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
90010e0c:	eb00 0545 	add.w	r5, r0, r5, lsl #1
90010e10:	6878      	ldr	r0, [r7, #4]
90010e12:	f8ad 3018 	strh.w	r3, [sp, #24]
90010e16:	a901      	add	r1, sp, #4
90010e18:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
90010e1c:	9505      	str	r5, [sp, #20]
90010e1e:	f8ad 301a 	strh.w	r3, [sp, #26]
90010e22:	f8ad 401c 	strh.w	r4, [sp, #28]
90010e26:	f8ad 601e 	strh.w	r6, [sp, #30]
90010e2a:	f8cd 8010 	str.w	r8, [sp, #16]
90010e2e:	f8ad 4020 	strh.w	r4, [sp, #32]
90010e32:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
90010e36:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
90010e3a:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
90010e3e:	6803      	ldr	r3, [r0, #0]
90010e40:	685b      	ldr	r3, [r3, #4]
90010e42:	4798      	blx	r3
90010e44:	b00b      	add	sp, #44	@ 0x2c
90010e46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

90010e4c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
90010e4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90010e50:	b08a      	sub	sp, #40	@ 0x28
90010e52:	4698      	mov	r8, r3
90010e54:	2300      	movs	r3, #0
90010e56:	4606      	mov	r6, r0
90010e58:	f89d 505c 	ldrb.w	r5, [sp, #92]	@ 0x5c
90010e5c:	f89d 0050 	ldrb.w	r0, [sp, #80]	@ 0x50
90010e60:	2d0b      	cmp	r5, #11
90010e62:	f89d c054 	ldrb.w	ip, [sp, #84]	@ 0x54
90010e66:	f8bd 7058 	ldrh.w	r7, [sp, #88]	@ 0x58
90010e6a:	f89d 4060 	ldrb.w	r4, [sp, #96]	@ 0x60
90010e6e:	9304      	str	r3, [sp, #16]
90010e70:	d137      	bne.n	90010ee2 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
90010e72:	2380      	movs	r3, #128	@ 0x80
90010e74:	f88d 0020 	strb.w	r0, [sp, #32]
90010e78:	4630      	mov	r0, r6
90010e7a:	9203      	str	r2, [sp, #12]
90010e7c:	e9cd 3101 	strd	r3, r1, [sp, #4]
90010e80:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
90010e84:	f8ad 3018 	strh.w	r3, [sp, #24]
90010e88:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
90010e8c:	f8ad 301a 	strh.w	r3, [sp, #26]
90010e90:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
90010e94:	f8ad 301c 	strh.w	r3, [sp, #28]
90010e98:	f7ff ff5c 	bl	90010d54 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
90010e9c:	2c0b      	cmp	r4, #11
90010e9e:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
90010ea2:	f8ad 701e 	strh.w	r7, [sp, #30]
90010ea6:	bf94      	ite	ls
90010ea8:	4b19      	ldrls	r3, [pc, #100]	@ (90010f10 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
90010eaa:	2100      	movhi	r1, #0
90010eac:	f88d 5021 	strb.w	r5, [sp, #33]	@ 0x21
90010eb0:	bf98      	it	ls
90010eb2:	5d19      	ldrbls	r1, [r3, r4]
90010eb4:	fb02 8307 	mla	r3, r2, r7, r8
90010eb8:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
90010ebc:	10c9      	asrs	r1, r1, #3
90010ebe:	fb01 0003 	mla	r0, r1, r3, r0
90010ec2:	f89d 3064 	ldrb.w	r3, [sp, #100]	@ 0x64
90010ec6:	a901      	add	r1, sp, #4
90010ec8:	9005      	str	r0, [sp, #20]
90010eca:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
90010ece:	2300      	movs	r3, #0
90010ed0:	6870      	ldr	r0, [r6, #4]
90010ed2:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
90010ed6:	6803      	ldr	r3, [r0, #0]
90010ed8:	685b      	ldr	r3, [r3, #4]
90010eda:	4798      	blx	r3
90010edc:	b00a      	add	sp, #40	@ 0x28
90010ede:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90010ee2:	2d02      	cmp	r5, #2
90010ee4:	d109      	bne.n	90010efa <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
90010ee6:	28ff      	cmp	r0, #255	@ 0xff
90010ee8:	d105      	bne.n	90010ef6 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
90010eea:	f1bc 0f00 	cmp.w	ip, #0
90010eee:	bf14      	ite	ne
90010ef0:	2340      	movne	r3, #64	@ 0x40
90010ef2:	2320      	moveq	r3, #32
90010ef4:	e7be      	b.n	90010e74 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
90010ef6:	2340      	movs	r3, #64	@ 0x40
90010ef8:	e7bc      	b.n	90010e74 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
90010efa:	28ff      	cmp	r0, #255	@ 0xff
90010efc:	d105      	bne.n	90010f0a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
90010efe:	f1bc 0f00 	cmp.w	ip, #0
90010f02:	bf14      	ite	ne
90010f04:	2304      	movne	r3, #4
90010f06:	2301      	moveq	r3, #1
90010f08:	e7b4      	b.n	90010e74 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
90010f0a:	2304      	movs	r3, #4
90010f0c:	e7b2      	b.n	90010e74 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
90010f0e:	bf00      	nop
90010f10:	900268d8 	.word	0x900268d8

90010f14 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
90010f14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90010f18:	b08b      	sub	sp, #44	@ 0x2c
90010f1a:	461d      	mov	r5, r3
90010f1c:	2400      	movs	r4, #0
90010f1e:	4688      	mov	r8, r1
90010f20:	f89d 9058 	ldrb.w	r9, [sp, #88]	@ 0x58
90010f24:	4693      	mov	fp, r2
90010f26:	f89d 6060 	ldrb.w	r6, [sp, #96]	@ 0x60
90010f2a:	4607      	mov	r7, r0
90010f2c:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
90010f30:	f8bd a05c 	ldrh.w	sl, [sp, #92]	@ 0x5c
90010f34:	9404      	str	r4, [sp, #16]
90010f36:	bf14      	ite	ne
90010f38:	2308      	movne	r3, #8
90010f3a:	2302      	moveq	r3, #2
90010f3c:	fb05 b50a 	mla	r5, r5, sl, fp
90010f40:	e9cd 3401 	strd	r3, r4, [sp, #4]
90010f44:	f7ff ff06 	bl	90010d54 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
90010f48:	2e0b      	cmp	r6, #11
90010f4a:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
90010f4e:	a901      	add	r1, sp, #4
90010f50:	bf98      	it	ls
90010f52:	4b13      	ldrls	r3, [pc, #76]	@ (90010fa0 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
90010f54:	f8ad a01e 	strh.w	sl, [sp, #30]
90010f58:	bf98      	it	ls
90010f5a:	5d9c      	ldrbls	r4, [r3, r6]
90010f5c:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
90010f60:	10e4      	asrs	r4, r4, #3
90010f62:	f8cd 8010 	str.w	r8, [sp, #16]
90010f66:	f8ad 3018 	strh.w	r3, [sp, #24]
90010f6a:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
90010f6e:	fb04 0405 	mla	r4, r4, r5, r0
90010f72:	6878      	ldr	r0, [r7, #4]
90010f74:	f8ad 301a 	strh.w	r3, [sp, #26]
90010f78:	2300      	movs	r3, #0
90010f7a:	9405      	str	r4, [sp, #20]
90010f7c:	f8ad 301c 	strh.w	r3, [sp, #28]
90010f80:	f88d 9020 	strb.w	r9, [sp, #32]
90010f84:	f88d 2023 	strb.w	r2, [sp, #35]	@ 0x23
90010f88:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
90010f8c:	f88d 6021 	strb.w	r6, [sp, #33]	@ 0x21
90010f90:	f88d 6022 	strb.w	r6, [sp, #34]	@ 0x22
90010f94:	6803      	ldr	r3, [r0, #0]
90010f96:	685b      	ldr	r3, [r3, #4]
90010f98:	4798      	blx	r3
90010f9a:	b00b      	add	sp, #44	@ 0x2c
90010f9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90010fa0:	900268d8 	.word	0x900268d8

90010fa4 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
90010fa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90010fa8:	461e      	mov	r6, r3
90010faa:	4b0a      	ldr	r3, [pc, #40]	@ (90010fd4 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
90010fac:	460f      	mov	r7, r1
90010fae:	4690      	mov	r8, r2
90010fb0:	881d      	ldrh	r5, [r3, #0]
90010fb2:	f7ff fd23 	bl	900109fc <_ZN8touchgfx3HAL3lcdEv>
90010fb6:	6803      	ldr	r3, [r0, #0]
90010fb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90010fba:	4798      	blx	r3
90010fbc:	280b      	cmp	r0, #11
90010fbe:	bf96      	itet	ls
90010fc0:	4b05      	ldrls	r3, [pc, #20]	@ (90010fd8 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
90010fc2:	2400      	movhi	r4, #0
90010fc4:	5c1c      	ldrbls	r4, [r3, r0]
90010fc6:	fb08 7005 	mla	r0, r8, r5, r7
90010fca:	10e4      	asrs	r4, r4, #3
90010fcc:	fb04 6000 	mla	r0, r4, r0, r6
90010fd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90010fd4:	24026306 	.word	0x24026306
90010fd8:	900268d8 	.word	0x900268d8

90010fdc <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
90010fdc:	b5f0      	push	{r4, r5, r6, r7, lr}
90010fde:	b08b      	sub	sp, #44	@ 0x2c
90010fe0:	461f      	mov	r7, r3
90010fe2:	4604      	mov	r4, r0
90010fe4:	4616      	mov	r6, r2
90010fe6:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
90010fea:	2500      	movs	r5, #0
90010fec:	e9cd 3101 	strd	r3, r1, [sp, #4]
90010ff0:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
90010ff4:	9504      	str	r5, [sp, #16]
90010ff6:	f8ad 3018 	strh.w	r3, [sp, #24]
90010ffa:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
90010ffe:	f8ad 301a 	strh.w	r3, [sp, #26]
90011002:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
90011006:	f8ad 301c 	strh.w	r3, [sp, #28]
9001100a:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
9001100e:	f88d 3020 	strb.w	r3, [sp, #32]
90011012:	f7ff fe9f 	bl	90010d54 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
90011016:	463a      	mov	r2, r7
90011018:	4631      	mov	r1, r6
9001101a:	4603      	mov	r3, r0
9001101c:	4620      	mov	r0, r4
9001101e:	f7ff ffc1 	bl	90010fa4 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
90011022:	4b0e      	ldr	r3, [pc, #56]	@ (9001105c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
90011024:	9005      	str	r0, [sp, #20]
90011026:	881b      	ldrh	r3, [r3, #0]
90011028:	f8ad 301e 	strh.w	r3, [sp, #30]
9001102c:	f7ff fce6 	bl	900109fc <_ZN8touchgfx3HAL3lcdEv>
90011030:	6803      	ldr	r3, [r0, #0]
90011032:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90011034:	4798      	blx	r3
90011036:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
90011038:	f88d 0022 	strb.w	r0, [sp, #34]	@ 0x22
9001103c:	a901      	add	r1, sp, #4
9001103e:	f88d 0021 	strb.w	r0, [sp, #33]	@ 0x21
90011042:	9304      	str	r3, [sp, #16]
90011044:	6860      	ldr	r0, [r4, #4]
90011046:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
9001104a:	f88d 5024 	strb.w	r5, [sp, #36]	@ 0x24
9001104e:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
90011052:	6803      	ldr	r3, [r0, #0]
90011054:	685b      	ldr	r3, [r3, #4]
90011056:	4798      	blx	r3
90011058:	b00b      	add	sp, #44	@ 0x2c
9001105a:	bdf0      	pop	{r4, r5, r6, r7, pc}
9001105c:	24026306 	.word	0x24026306

90011060 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
90011060:	b5f0      	push	{r4, r5, r6, r7, lr}
90011062:	b08d      	sub	sp, #52	@ 0x34
90011064:	2501      	movs	r5, #1
90011066:	4604      	mov	r4, r0
90011068:	466b      	mov	r3, sp
9001106a:	9503      	str	r5, [sp, #12]
9001106c:	e883 0006 	stmia.w	r3, {r1, r2}
90011070:	2300      	movs	r3, #0
90011072:	f8bd 6000 	ldrh.w	r6, [sp]
90011076:	f8bd 7002 	ldrh.w	r7, [sp, #2]
9001107a:	9306      	str	r3, [sp, #24]
9001107c:	6803      	ldr	r3, [r0, #0]
9001107e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
90011080:	4798      	blx	r3
90011082:	463a      	mov	r2, r7
90011084:	4631      	mov	r1, r6
90011086:	4603      	mov	r3, r0
90011088:	4620      	mov	r0, r4
9001108a:	f7ff ff8b 	bl	90010fa4 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
9001108e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
90011090:	9004      	str	r0, [sp, #16]
90011092:	9307      	str	r3, [sp, #28]
90011094:	f8bd 3004 	ldrh.w	r3, [sp, #4]
90011098:	f8ad 3020 	strh.w	r3, [sp, #32]
9001109c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
900110a0:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
900110a4:	4b0e      	ldr	r3, [pc, #56]	@ (900110e0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
900110a6:	881b      	ldrh	r3, [r3, #0]
900110a8:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
900110ac:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
900110b0:	f7ff fca4 	bl	900109fc <_ZN8touchgfx3HAL3lcdEv>
900110b4:	6803      	ldr	r3, [r0, #0]
900110b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900110b8:	4798      	blx	r3
900110ba:	23ff      	movs	r3, #255	@ 0xff
900110bc:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
900110c0:	a903      	add	r1, sp, #12
900110c2:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
900110c6:	6860      	ldr	r0, [r4, #4]
900110c8:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
900110cc:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
900110d0:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
900110d4:	6803      	ldr	r3, [r0, #0]
900110d6:	685b      	ldr	r3, [r3, #4]
900110d8:	4798      	blx	r3
900110da:	6c60      	ldr	r0, [r4, #68]	@ 0x44
900110dc:	b00d      	add	sp, #52	@ 0x34
900110de:	bdf0      	pop	{r4, r5, r6, r7, pc}
900110e0:	24026306 	.word	0x24026306

900110e4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
900110e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
900110e8:	b08c      	sub	sp, #48	@ 0x30
900110ea:	461e      	mov	r6, r3
900110ec:	2300      	movs	r3, #0
900110ee:	4604      	mov	r4, r0
900110f0:	466d      	mov	r5, sp
900110f2:	9306      	str	r3, [sp, #24]
900110f4:	6803      	ldr	r3, [r0, #0]
900110f6:	e885 0006 	stmia.w	r5, {r1, r2}
900110fa:	2501      	movs	r5, #1
900110fc:	f8bd 7000 	ldrh.w	r7, [sp]
90011100:	f8bd 8002 	ldrh.w	r8, [sp, #2]
90011104:	9503      	str	r5, [sp, #12]
90011106:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
90011108:	4798      	blx	r3
9001110a:	4642      	mov	r2, r8
9001110c:	4639      	mov	r1, r7
9001110e:	4603      	mov	r3, r0
90011110:	4620      	mov	r0, r4
90011112:	f7ff ff47 	bl	90010fa4 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
90011116:	f8bd 3004 	ldrh.w	r3, [sp, #4]
9001111a:	9004      	str	r0, [sp, #16]
9001111c:	f8ad 3020 	strh.w	r3, [sp, #32]
90011120:	f8bd 3006 	ldrh.w	r3, [sp, #6]
90011124:	9607      	str	r6, [sp, #28]
90011126:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
9001112a:	4b10      	ldr	r3, [pc, #64]	@ (9001116c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
9001112c:	881b      	ldrh	r3, [r3, #0]
9001112e:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
90011132:	9b12      	ldr	r3, [sp, #72]	@ 0x48
90011134:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
90011138:	f7ff fc60 	bl	900109fc <_ZN8touchgfx3HAL3lcdEv>
9001113c:	6803      	ldr	r3, [r0, #0]
9001113e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90011140:	4798      	blx	r3
90011142:	23ff      	movs	r3, #255	@ 0xff
90011144:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
90011148:	a903      	add	r1, sp, #12
9001114a:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
9001114e:	6860      	ldr	r0, [r4, #4]
90011150:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
90011154:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
90011158:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
9001115c:	6803      	ldr	r3, [r0, #0]
9001115e:	685b      	ldr	r3, [r3, #4]
90011160:	4798      	blx	r3
90011162:	4630      	mov	r0, r6
90011164:	b00c      	add	sp, #48	@ 0x30
90011166:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
9001116a:	bf00      	nop
9001116c:	24026306 	.word	0x24026306

90011170 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
90011170:	b5f0      	push	{r4, r5, r6, r7, lr}
90011172:	b085      	sub	sp, #20
90011174:	4605      	mov	r5, r0
90011176:	ac02      	add	r4, sp, #8
90011178:	e884 0006 	stmia.w	r4, {r1, r2}
9001117c:	f8bd 6008 	ldrh.w	r6, [sp, #8]
90011180:	f8bd 700a 	ldrh.w	r7, [sp, #10]
90011184:	f7ff fde6 	bl	90010d54 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
90011188:	4631      	mov	r1, r6
9001118a:	4603      	mov	r3, r0
9001118c:	463a      	mov	r2, r7
9001118e:	4628      	mov	r0, r5
90011190:	f7ff ff08 	bl	90010fa4 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
90011194:	4a05      	ldr	r2, [pc, #20]	@ (900111ac <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
90011196:	682b      	ldr	r3, [r5, #0]
90011198:	8812      	ldrh	r2, [r2, #0]
9001119a:	9200      	str	r2, [sp, #0]
9001119c:	6ede      	ldr	r6, [r3, #108]	@ 0x6c
9001119e:	4603      	mov	r3, r0
900111a0:	4628      	mov	r0, r5
900111a2:	e894 0006 	ldmia.w	r4, {r1, r2}
900111a6:	47b0      	blx	r6
900111a8:	b005      	add	sp, #20
900111aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
900111ac:	24026306 	.word	0x24026306

900111b0 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
900111b0:	b570      	push	{r4, r5, r6, lr}
900111b2:	f890 306a 	ldrb.w	r3, [r0, #106]	@ 0x6a
900111b6:	4604      	mov	r4, r0
900111b8:	b19b      	cbz	r3, 900111e2 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
900111ba:	2002      	movs	r0, #2
900111bc:	f7f0 f93e 	bl	9000143c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
900111c0:	2300      	movs	r3, #0
900111c2:	4620      	mov	r0, r4
900111c4:	f884 306a 	strb.w	r3, [r4, #106]	@ 0x6a
900111c8:	f884 3069 	strb.w	r3, [r4, #105]	@ 0x69
900111cc:	6823      	ldr	r3, [r4, #0]
900111ce:	f8d3 50b8 	ldr.w	r5, [r3, #184]	@ 0xb8
900111d2:	f7ff fdbf 	bl	90010d54 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
900111d6:	4601      	mov	r1, r0
900111d8:	4620      	mov	r0, r4
900111da:	462b      	mov	r3, r5
900111dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
900111e0:	4718      	bx	r3
900111e2:	bd70      	pop	{r4, r5, r6, pc}

900111e4 <_ZN8touchgfx3HAL12setMCUActiveEb>:
900111e4:	b570      	push	{r4, r5, r6, lr}
900111e6:	4605      	mov	r5, r0
900111e8:	460c      	mov	r4, r1
900111ea:	2003      	movs	r0, #3
900111ec:	b149      	cbz	r1, 90011202 <_ZN8touchgfx3HAL12setMCUActiveEb+0x1e>
900111ee:	f7f0 f8bd 	bl	9000136c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
900111f2:	6928      	ldr	r0, [r5, #16]
900111f4:	b168      	cbz	r0, 90011212 <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
900111f6:	6803      	ldr	r3, [r0, #0]
900111f8:	2101      	movs	r1, #1
900111fa:	695b      	ldr	r3, [r3, #20]
900111fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90011200:	4718      	bx	r3
90011202:	f7f0 f8e7 	bl	900013d4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
90011206:	6928      	ldr	r0, [r5, #16]
90011208:	b118      	cbz	r0, 90011212 <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
9001120a:	6803      	ldr	r3, [r0, #0]
9001120c:	4621      	mov	r1, r4
9001120e:	695b      	ldr	r3, [r3, #20]
90011210:	e7f4      	b.n	900111fc <_ZN8touchgfx3HAL12setMCUActiveEb+0x18>
90011212:	bd70      	pop	{r4, r5, r6, pc}

90011214 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
90011214:	b538      	push	{r3, r4, r5, lr}
90011216:	f890 3078 	ldrb.w	r3, [r0, #120]	@ 0x78
9001121a:	4604      	mov	r4, r0
9001121c:	460d      	mov	r5, r1
9001121e:	428b      	cmp	r3, r1
90011220:	d006      	beq.n	90011230 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
90011222:	6803      	ldr	r3, [r0, #0]
90011224:	b929      	cbnz	r1, 90011232 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
90011226:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
9001122a:	4798      	blx	r3
9001122c:	f884 5078 	strb.w	r5, [r4, #120]	@ 0x78
90011230:	bd38      	pop	{r3, r4, r5, pc}
90011232:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
90011236:	e7f8      	b.n	9001122a <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

90011238 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
90011238:	4b0d      	ldr	r3, [pc, #52]	@ (90011270 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
9001123a:	b510      	push	{r4, lr}
9001123c:	781b      	ldrb	r3, [r3, #0]
9001123e:	4604      	mov	r4, r0
90011240:	b95b      	cbnz	r3, 9001125a <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
90011242:	f890 3048 	ldrb.w	r3, [r0, #72]	@ 0x48
90011246:	2b02      	cmp	r3, #2
90011248:	d007      	beq.n	9001125a <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
9001124a:	6840      	ldr	r0, [r0, #4]
9001124c:	f000 f900 	bl	90011450 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
90011250:	b118      	cbz	r0, 9001125a <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
90011252:	6862      	ldr	r2, [r4, #4]
90011254:	7a53      	ldrb	r3, [r2, #9]
90011256:	2b00      	cmp	r3, #0
90011258:	d0fc      	beq.n	90011254 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
9001125a:	f7f1 faa5 	bl	900027a8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
9001125e:	4620      	mov	r0, r4
90011260:	2100      	movs	r1, #0
90011262:	f7ff ffd7 	bl	90011214 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
90011266:	4620      	mov	r0, r4
90011268:	f7ff fd74 	bl	90010d54 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
9001126c:	bd10      	pop	{r4, pc}
9001126e:	bf00      	nop
90011270:	2402630a 	.word	0x2402630a

90011274 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
90011274:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
90011278:	1a13      	subs	r3, r2, r0
9001127a:	4258      	negs	r0, r3
9001127c:	4158      	adcs	r0, r3
9001127e:	4770      	bx	lr

90011280 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
90011280:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
90011284:	1a9b      	subs	r3, r3, r2
90011286:	2b00      	cmp	r3, #0
90011288:	bfdc      	itt	le
9001128a:	6882      	ldrle	r2, [r0, #8]
9001128c:	189b      	addle	r3, r3, r2
9001128e:	2b01      	cmp	r3, #1
90011290:	bfcc      	ite	gt
90011292:	2000      	movgt	r0, #0
90011294:	2001      	movle	r0, #1
90011296:	4770      	bx	lr

90011298 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
90011298:	6902      	ldr	r2, [r0, #16]
9001129a:	6843      	ldr	r3, [r0, #4]
9001129c:	2024      	movs	r0, #36	@ 0x24
9001129e:	fb00 3002 	mla	r0, r0, r2, r3
900112a2:	4770      	bx	lr

900112a4 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
900112a4:	6803      	ldr	r3, [r0, #0]
900112a6:	691b      	ldr	r3, [r3, #16]
900112a8:	4718      	bx	r3

900112aa <_ZN8touchgfx13DMA_Interface7executeEv>:
900112aa:	2301      	movs	r3, #1
900112ac:	b570      	push	{r4, r5, r6, lr}
900112ae:	7203      	strb	r3, [r0, #8]
900112b0:	4604      	mov	r4, r0
900112b2:	6840      	ldr	r0, [r0, #4]
900112b4:	6803      	ldr	r3, [r0, #0]
900112b6:	699b      	ldr	r3, [r3, #24]
900112b8:	4798      	blx	r3
900112ba:	6803      	ldr	r3, [r0, #0]
900112bc:	4605      	mov	r5, r0
900112be:	2b40      	cmp	r3, #64	@ 0x40
900112c0:	d00c      	beq.n	900112dc <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
900112c2:	d810      	bhi.n	900112e6 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
900112c4:	2b04      	cmp	r3, #4
900112c6:	d01d      	beq.n	90011304 <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
900112c8:	d804      	bhi.n	900112d4 <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
900112ca:	2b01      	cmp	r3, #1
900112cc:	d006      	beq.n	900112dc <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
900112ce:	2b02      	cmp	r3, #2
900112d0:	d02c      	beq.n	9001132c <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
900112d2:	bd70      	pop	{r4, r5, r6, pc}
900112d4:	2b08      	cmp	r3, #8
900112d6:	d01d      	beq.n	90011314 <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
900112d8:	2b20      	cmp	r3, #32
900112da:	d1fa      	bne.n	900112d2 <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
900112dc:	6823      	ldr	r3, [r4, #0]
900112de:	4620      	mov	r0, r4
900112e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
900112e2:	4798      	blx	r3
900112e4:	e013      	b.n	9001130e <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
900112e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
900112ea:	d0f7      	beq.n	900112dc <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
900112ec:	d804      	bhi.n	900112f8 <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
900112ee:	2b80      	cmp	r3, #128	@ 0x80
900112f0:	d0f4      	beq.n	900112dc <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
900112f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
900112f6:	e7f0      	b.n	900112da <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
900112f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
900112fc:	d0ee      	beq.n	900112dc <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
900112fe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
90011302:	e7e5      	b.n	900112d0 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
90011304:	6823      	ldr	r3, [r4, #0]
90011306:	7f01      	ldrb	r1, [r0, #28]
90011308:	4620      	mov	r0, r4
9001130a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
9001130c:	4798      	blx	r3
9001130e:	6823      	ldr	r3, [r4, #0]
90011310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
90011312:	e006      	b.n	90011322 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
90011314:	6823      	ldr	r3, [r4, #0]
90011316:	7f01      	ldrb	r1, [r0, #28]
90011318:	4620      	mov	r0, r4
9001131a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
9001131c:	4798      	blx	r3
9001131e:	6823      	ldr	r3, [r4, #0]
90011320:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
90011322:	4629      	mov	r1, r5
90011324:	4620      	mov	r0, r4
90011326:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
9001132a:	4718      	bx	r3
9001132c:	6823      	ldr	r3, [r4, #0]
9001132e:	4620      	mov	r0, r4
90011330:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
90011332:	4798      	blx	r3
90011334:	e7f3      	b.n	9001131e <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

90011336 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
90011336:	4770      	bx	lr

90011338 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
90011338:	4770      	bx	lr

9001133a <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
9001133a:	4770      	bx	lr

9001133c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
9001133c:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
90011340:	b510      	push	{r4, lr}
90011342:	1ad2      	subs	r2, r2, r3
90011344:	2a00      	cmp	r2, #0
90011346:	bfdc      	itt	le
90011348:	6884      	ldrle	r4, [r0, #8]
9001134a:	1912      	addle	r2, r2, r4
9001134c:	2a01      	cmp	r2, #1
9001134e:	dd16      	ble.n	9001137e <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
90011350:	6842      	ldr	r2, [r0, #4]
90011352:	2424      	movs	r4, #36	@ 0x24
90011354:	fb04 2303 	mla	r3, r4, r3, r2
90011358:	f101 0220 	add.w	r2, r1, #32
9001135c:	f851 4b04 	ldr.w	r4, [r1], #4
90011360:	4291      	cmp	r1, r2
90011362:	f843 4b04 	str.w	r4, [r3], #4
90011366:	d1f9      	bne.n	9001135c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
90011368:	780a      	ldrb	r2, [r1, #0]
9001136a:	701a      	strb	r2, [r3, #0]
9001136c:	68c3      	ldr	r3, [r0, #12]
9001136e:	6882      	ldr	r2, [r0, #8]
90011370:	f3bf 8f5b 	dmb	ish
90011374:	3301      	adds	r3, #1
90011376:	429a      	cmp	r2, r3
90011378:	bfd8      	it	le
9001137a:	1a9b      	suble	r3, r3, r2
9001137c:	60c3      	str	r3, [r0, #12]
9001137e:	bd10      	pop	{r4, pc}

90011380 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
90011380:	6903      	ldr	r3, [r0, #16]
90011382:	6882      	ldr	r2, [r0, #8]
90011384:	f3bf 8f5b 	dmb	ish
90011388:	3301      	adds	r3, #1
9001138a:	429a      	cmp	r2, r3
9001138c:	bfd8      	it	le
9001138e:	1a9b      	suble	r3, r3, r2
90011390:	6103      	str	r3, [r0, #16]
90011392:	4770      	bx	lr

90011394 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
90011394:	b570      	push	{r4, r5, r6, lr}
90011396:	4604      	mov	r4, r0
90011398:	460e      	mov	r6, r1
9001139a:	6860      	ldr	r0, [r4, #4]
9001139c:	6803      	ldr	r3, [r0, #0]
9001139e:	685b      	ldr	r3, [r3, #4]
900113a0:	4798      	blx	r3
900113a2:	2800      	cmp	r0, #0
900113a4:	d1f9      	bne.n	9001139a <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
900113a6:	4d0d      	ldr	r5, [pc, #52]	@ (900113dc <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
900113a8:	6828      	ldr	r0, [r5, #0]
900113aa:	6803      	ldr	r3, [r0, #0]
900113ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
900113ae:	4798      	blx	r3
900113b0:	f7f1 fa08 	bl	900027c4 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
900113b4:	6828      	ldr	r0, [r5, #0]
900113b6:	2101      	movs	r1, #1
900113b8:	f7ff ff2c 	bl	90011214 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
900113bc:	6860      	ldr	r0, [r4, #4]
900113be:	4631      	mov	r1, r6
900113c0:	6803      	ldr	r3, [r0, #0]
900113c2:	689b      	ldr	r3, [r3, #8]
900113c4:	4798      	blx	r3
900113c6:	6823      	ldr	r3, [r4, #0]
900113c8:	4620      	mov	r0, r4
900113ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900113cc:	4798      	blx	r3
900113ce:	6828      	ldr	r0, [r5, #0]
900113d0:	6803      	ldr	r3, [r0, #0]
900113d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
900113d6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
900113d8:	4718      	bx	r3
900113da:	bf00      	nop
900113dc:	2402630c 	.word	0x2402630c

900113e0 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
900113e0:	b508      	push	{r3, lr}
900113e2:	f7f1 f9e1 	bl	900027a8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
900113e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
900113ea:	f7f1 b9e5 	b.w	900027b8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

900113ee <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
900113ee:	b510      	push	{r4, lr}
900113f0:	4604      	mov	r4, r0
900113f2:	2114      	movs	r1, #20
900113f4:	f011 fbdf 	bl	90022bb6 <_ZdlPvj>
900113f8:	4620      	mov	r0, r4
900113fa:	bd10      	pop	{r4, pc}

900113fc <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
900113fc:	b570      	push	{r4, r5, r6, lr}
900113fe:	4604      	mov	r4, r0
90011400:	6840      	ldr	r0, [r0, #4]
90011402:	6803      	ldr	r3, [r0, #0]
90011404:	681b      	ldr	r3, [r3, #0]
90011406:	4798      	blx	r3
90011408:	4605      	mov	r5, r0
9001140a:	b930      	cbnz	r0, 9001141a <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
9001140c:	7a23      	ldrb	r3, [r4, #8]
9001140e:	b123      	cbz	r3, 9001141a <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
90011410:	6860      	ldr	r0, [r4, #4]
90011412:	6803      	ldr	r3, [r0, #0]
90011414:	695b      	ldr	r3, [r3, #20]
90011416:	4798      	blx	r3
90011418:	7225      	strb	r5, [r4, #8]
9001141a:	6860      	ldr	r0, [r4, #4]
9001141c:	6803      	ldr	r3, [r0, #0]
9001141e:	681b      	ldr	r3, [r3, #0]
90011420:	4798      	blx	r3
90011422:	b928      	cbnz	r0, 90011430 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
90011424:	6823      	ldr	r3, [r4, #0]
90011426:	4620      	mov	r0, r4
90011428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9001142a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
9001142e:	4718      	bx	r3
90011430:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90011434:	f7f1 b9ce 	b.w	900027d4 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

90011438 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
90011438:	b510      	push	{r4, lr}
9001143a:	6082      	str	r2, [r0, #8]
9001143c:	2200      	movs	r2, #0
9001143e:	4c03      	ldr	r4, [pc, #12]	@ (9001144c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
90011440:	e9c0 2203 	strd	r2, r2, [r0, #12]
90011444:	e9c0 4100 	strd	r4, r1, [r0]
90011448:	bd10      	pop	{r4, pc}
9001144a:	bf00      	nop
9001144c:	900268ec 	.word	0x900268ec

90011450 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
90011450:	6840      	ldr	r0, [r0, #4]
90011452:	6803      	ldr	r3, [r0, #0]
90011454:	681b      	ldr	r3, [r3, #0]
90011456:	4718      	bx	r3

90011458 <_ZNK8touchgfx5Image17invalidateContentEv>:
90011458:	b508      	push	{r3, lr}
9001145a:	f890 3028 	ldrb.w	r3, [r0, #40]	@ 0x28
9001145e:	b10b      	cbz	r3, 90011464 <_ZNK8touchgfx5Image17invalidateContentEv+0xc>
90011460:	f7f1 fe1a 	bl	90003098 <_ZNK8touchgfx8Drawable17invalidateContentEv>
90011464:	bd08      	pop	{r3, pc}

90011466 <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>:
90011466:	f880 1029 	strb.w	r1, [r0, #41]	@ 0x29
9001146a:	4770      	bx	lr

9001146c <_ZN8touchgfx13ScalableImage19getScalingAlgorithmEv>:
9001146c:	f890 0029 	ldrb.w	r0, [r0, #41]	@ 0x29
90011470:	4770      	bx	lr

90011472 <_ZN8touchgfx13ScalableImageD1Ev>:
90011472:	4770      	bx	lr

90011474 <_ZN8touchgfx13ScalableImageD0Ev>:
90011474:	b510      	push	{r4, lr}
90011476:	4604      	mov	r4, r0
90011478:	212c      	movs	r1, #44	@ 0x2c
9001147a:	f011 fb9c 	bl	90022bb6 <_ZdlPvj>
9001147e:	4620      	mov	r0, r4
90011480:	bd10      	pop	{r4, pc}

90011482 <_ZNK8touchgfx13ScalableImage12getSolidRectEv>:
90011482:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
90011484:	f891 3028 	ldrb.w	r3, [r1, #40]	@ 0x28
90011488:	4605      	mov	r5, r0
9001148a:	2bff      	cmp	r3, #255	@ 0xff
9001148c:	d11e      	bne.n	900114cc <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0x4a>
9001148e:	f101 0426 	add.w	r4, r1, #38	@ 0x26
90011492:	4668      	mov	r0, sp
90011494:	4621      	mov	r1, r4
90011496:	f005 fe15 	bl	900170c4 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
9001149a:	f9bd 6004 	ldrsh.w	r6, [sp, #4]
9001149e:	4620      	mov	r0, r4
900114a0:	f005 fda8 	bl	90016ff4 <_ZNK8touchgfx6Bitmap8getWidthEv>
900114a4:	4286      	cmp	r6, r0
900114a6:	d111      	bne.n	900114cc <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0x4a>
900114a8:	4621      	mov	r1, r4
900114aa:	a802      	add	r0, sp, #8
900114ac:	f005 fe0a 	bl	900170c4 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
900114b0:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
900114b4:	4620      	mov	r0, r4
900114b6:	f005 fdd1 	bl	9001705c <_ZNK8touchgfx6Bitmap9getHeightEv>
900114ba:	4286      	cmp	r6, r0
900114bc:	d106      	bne.n	900114cc <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0x4a>
900114be:	4621      	mov	r1, r4
900114c0:	4628      	mov	r0, r5
900114c2:	f005 fdff 	bl	900170c4 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
900114c6:	4628      	mov	r0, r5
900114c8:	b004      	add	sp, #16
900114ca:	bd70      	pop	{r4, r5, r6, pc}
900114cc:	2300      	movs	r3, #0
900114ce:	802b      	strh	r3, [r5, #0]
900114d0:	806b      	strh	r3, [r5, #2]
900114d2:	80ab      	strh	r3, [r5, #4]
900114d4:	80eb      	strh	r3, [r5, #6]
900114d6:	e7f6      	b.n	900114c6 <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0x44>

900114d8 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE>:
900114d8:	b538      	push	{r3, r4, r5, lr}
900114da:	2300      	movs	r3, #0
900114dc:	2501      	movs	r5, #1
900114de:	4604      	mov	r4, r0
900114e0:	8083      	strh	r3, [r0, #4]
900114e2:	80c3      	strh	r3, [r0, #6]
900114e4:	8103      	strh	r3, [r0, #8]
900114e6:	8143      	strh	r3, [r0, #10]
900114e8:	8183      	strh	r3, [r0, #12]
900114ea:	81c3      	strh	r3, [r0, #14]
900114ec:	8203      	strh	r3, [r0, #16]
900114ee:	8243      	strh	r3, [r0, #18]
900114f0:	61c3      	str	r3, [r0, #28]
900114f2:	8403      	strh	r3, [r0, #32]
900114f4:	8443      	strh	r3, [r0, #34]	@ 0x22
900114f6:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
900114fa:	f880 5025 	strb.w	r5, [r0, #37]	@ 0x25
900114fe:	e9c0 3305 	strd	r3, r3, [r0, #20]
90011502:	4b07      	ldr	r3, [pc, #28]	@ (90011520 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE+0x48>)
90011504:	6003      	str	r3, [r0, #0]
90011506:	880b      	ldrh	r3, [r1, #0]
90011508:	84c3      	strh	r3, [r0, #38]	@ 0x26
9001150a:	23ff      	movs	r3, #255	@ 0xff
9001150c:	f880 3028 	strb.w	r3, [r0, #40]	@ 0x28
90011510:	f000 fe25 	bl	9001215e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
90011514:	4b03      	ldr	r3, [pc, #12]	@ (90011524 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE+0x4c>)
90011516:	f884 5029 	strb.w	r5, [r4, #41]	@ 0x29
9001151a:	4620      	mov	r0, r4
9001151c:	6023      	str	r3, [r4, #0]
9001151e:	bd38      	pop	{r3, r4, r5, pc}
90011520:	90026a7c 	.word	0x90026a7c
90011524:	90026910 	.word	0x90026910

90011528 <_ZNK8touchgfx13ScalableImage19lookupRenderVariantEv>:
90011528:	4603      	mov	r3, r0
9001152a:	3026      	adds	r0, #38	@ 0x26
9001152c:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
90011530:	b90b      	cbnz	r3, 90011536 <_ZNK8touchgfx13ScalableImage19lookupRenderVariantEv+0xe>
90011532:	f003 bcd7 	b.w	90014ee4 <_ZN8touchgfx34lookupNearestNeighborRenderVariantERKNS_6BitmapE>
90011536:	f003 bce5 	b.w	90014f04 <_ZN8touchgfx27lookupBilinearRenderVariantERKNS_6BitmapE>
	...

9001153c <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_>:
9001153c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90011540:	4604      	mov	r4, r0
90011542:	469b      	mov	fp, r3
90011544:	f9b0 c008 	ldrsh.w	ip, [r0, #8]
90011548:	b0b3      	sub	sp, #204	@ 0xcc
9001154a:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
9001154e:	f9b1 6000 	ldrsh.w	r6, [r1]
90011552:	8888      	ldrh	r0, [r1, #4]
90011554:	9206      	str	r2, [sp, #24]
90011556:	2200      	movs	r2, #0
90011558:	4430      	add	r0, r6
9001155a:	9211      	str	r2, [sp, #68]	@ 0x44
9001155c:	b280      	uxth	r0, r0
9001155e:	fa0f fe80 	sxth.w	lr, r0
90011562:	4596      	cmp	lr, r2
90011564:	e9dd a93c 	ldrd	sl, r9, [sp, #240]	@ 0xf0
90011568:	e9dd 873e 	ldrd	r8, r7, [sp, #248]	@ 0xf8
9001156c:	f340 811a 	ble.w	900117a4 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x268>
90011570:	45b4      	cmp	ip, r6
90011572:	f340 8117 	ble.w	900117a4 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x268>
90011576:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
9001157a:	88ca      	ldrh	r2, [r1, #6]
9001157c:	442a      	add	r2, r5
9001157e:	b292      	uxth	r2, r2
90011580:	b211      	sxth	r1, r2
90011582:	2900      	cmp	r1, #0
90011584:	f340 810e 	ble.w	900117a4 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x268>
90011588:	42ab      	cmp	r3, r5
9001158a:	f340 810b 	ble.w	900117a4 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x268>
9001158e:	45f4      	cmp	ip, lr
90011590:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
90011594:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
90011598:	bfb8      	it	lt
9001159a:	fa1f f08c 	uxthlt.w	r0, ip
9001159e:	428b      	cmp	r3, r1
900115a0:	f8ad 6044 	strh.w	r6, [sp, #68]	@ 0x44
900115a4:	bfb8      	it	lt
900115a6:	b29a      	uxthlt	r2, r3
900115a8:	1b80      	subs	r0, r0, r6
900115aa:	f8ad 5046 	strh.w	r5, [sp, #70]	@ 0x46
900115ae:	1b52      	subs	r2, r2, r5
900115b0:	f8ad 0048 	strh.w	r0, [sp, #72]	@ 0x48
900115b4:	f8ad 204a 	strh.w	r2, [sp, #74]	@ 0x4a
900115b8:	ab11      	add	r3, sp, #68	@ 0x44
900115ba:	ad13      	add	r5, sp, #76	@ 0x4c
900115bc:	6822      	ldr	r2, [r4, #0]
900115be:	1d26      	adds	r6, r4, #4
900115c0:	9307      	str	r3, [sp, #28]
900115c2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
900115c4:	e893 0003 	ldmia.w	r3, {r0, r1}
900115c8:	e885 0003 	stmia.w	r5, {r0, r1}
900115cc:	4629      	mov	r1, r5
900115ce:	4620      	mov	r0, r4
900115d0:	4790      	blx	r2
900115d2:	4621      	mov	r1, r4
900115d4:	a815      	add	r0, sp, #84	@ 0x54
900115d6:	f003 fbe1 	bl	90014d9c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
900115da:	a815      	add	r0, sp, #84	@ 0x54
900115dc:	f002 f960 	bl	900138a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
900115e0:	9b07      	ldr	r3, [sp, #28]
900115e2:	4631      	mov	r1, r6
900115e4:	4618      	mov	r0, r3
900115e6:	f002 f99f 	bl	90013928 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
900115ea:	4628      	mov	r0, r5
900115ec:	f104 0526 	add.w	r5, r4, #38	@ 0x26
900115f0:	f002 f956 	bl	900138a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
900115f4:	4628      	mov	r0, r5
900115f6:	f005 fde9 	bl	900171cc <_ZNK8touchgfx6Bitmap7getDataEv>
900115fa:	9007      	str	r0, [sp, #28]
900115fc:	2800      	cmp	r0, #0
900115fe:	f000 80ce 	beq.w	9001179e <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x262>
90011602:	f8db 2000 	ldr.w	r2, [fp]
90011606:	a90d      	add	r1, sp, #52	@ 0x34
90011608:	a809      	add	r0, sp, #36	@ 0x24
9001160a:	9209      	str	r2, [sp, #36]	@ 0x24
9001160c:	f8db 2004 	ldr.w	r2, [fp, #4]
90011610:	920a      	str	r2, [sp, #40]	@ 0x28
90011612:	f8db 2008 	ldr.w	r2, [fp, #8]
90011616:	920b      	str	r2, [sp, #44]	@ 0x2c
90011618:	f8db 200c 	ldr.w	r2, [fp, #12]
9001161c:	920c      	str	r2, [sp, #48]	@ 0x30
9001161e:	f8da 2000 	ldr.w	r2, [sl]
90011622:	920d      	str	r2, [sp, #52]	@ 0x34
90011624:	f8da 2004 	ldr.w	r2, [sl, #4]
90011628:	920e      	str	r2, [sp, #56]	@ 0x38
9001162a:	f8da 2008 	ldr.w	r2, [sl, #8]
9001162e:	920f      	str	r2, [sp, #60]	@ 0x3c
90011630:	f8da 200c 	ldr.w	r2, [sl, #12]
90011634:	9210      	str	r2, [sp, #64]	@ 0x40
90011636:	4632      	mov	r2, r6
90011638:	f002 f95a 	bl	900138f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
9001163c:	4632      	mov	r2, r6
9001163e:	a90e      	add	r1, sp, #56	@ 0x38
90011640:	a80a      	add	r0, sp, #40	@ 0x28
90011642:	f002 f955 	bl	900138f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
90011646:	4632      	mov	r2, r6
90011648:	a90f      	add	r1, sp, #60	@ 0x3c
9001164a:	a80b      	add	r0, sp, #44	@ 0x2c
9001164c:	f002 f950 	bl	900138f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
90011650:	4632      	mov	r2, r6
90011652:	a910      	add	r1, sp, #64	@ 0x40
90011654:	a80c      	add	r0, sp, #48	@ 0x30
90011656:	f002 f94b 	bl	900138f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
9001165a:	eddd 7a0d 	vldr	s15, [sp, #52]	@ 0x34
9001165e:	edd7 3a00 	vldr	s7, [r7]
90011662:	eef0 6a67 	vmov.f32	s13, s15
90011666:	eddd 7a0a 	vldr	s15, [sp, #40]	@ 0x28
9001166a:	ed97 5a01 	vldr	s10, [r7, #4]
9001166e:	eeb0 7a67 	vmov.f32	s14, s15
90011672:	eddd 7a0e 	vldr	s15, [sp, #56]	@ 0x38
90011676:	eefe 6ace 	vcvt.s32.f32	s13, s13, #4
9001167a:	edd9 2a00 	vldr	s5, [r9]
9001167e:	eeb0 6a67 	vmov.f32	s12, s15
90011682:	eddd 7a0b 	vldr	s15, [sp, #44]	@ 0x2c
90011686:	eebe 7ace 	vcvt.s32.f32	s14, s14, #4
9001168a:	ed98 3a00 	vldr	s6, [r8]
9001168e:	ed99 4a01 	vldr	s8, [r9, #4]
90011692:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
90011696:	edd8 4a01 	vldr	s9, [r8, #4]
9001169a:	edd9 5a02 	vldr	s11, [r9, #8]
9001169e:	f8d9 e00c 	ldr.w	lr, [r9, #12]
900116a2:	ee16 6a10 	vmov	r6, s12
900116a6:	eeb0 6a67 	vmov.f32	s12, s15
900116aa:	eddd 7a0f 	vldr	s15, [sp, #60]	@ 0x3c
900116ae:	f8d8 c00c 	ldr.w	ip, [r8, #12]
900116b2:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
900116b6:	edcd 6a1f 	vstr	s13, [sp, #124]	@ 0x7c
900116ba:	edcd 2a20 	vstr	s5, [sp, #128]	@ 0x80
900116be:	ed8d 3a21 	vstr	s6, [sp, #132]	@ 0x84
900116c2:	ee16 0a10 	vmov	r0, s12
900116c6:	eeb0 6a67 	vmov.f32	s12, s15
900116ca:	eddd 7a0c 	vldr	s15, [sp, #48]	@ 0x30
900116ce:	edcd 3a22 	vstr	s7, [sp, #136]	@ 0x88
900116d2:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
900116d6:	ed8d 7a23 	vstr	s14, [sp, #140]	@ 0x8c
900116da:	ed8d 4a25 	vstr	s8, [sp, #148]	@ 0x94
900116de:	edcd 4a26 	vstr	s9, [sp, #152]	@ 0x98
900116e2:	ee16 1a10 	vmov	r1, s12
900116e6:	eeb0 6a67 	vmov.f32	s12, s15
900116ea:	eddd 7a10 	vldr	s15, [sp, #64]	@ 0x40
900116ee:	ed8d 5a27 	vstr	s10, [sp, #156]	@ 0x9c
900116f2:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
900116f6:	f8d7 a008 	ldr.w	sl, [r7, #8]
900116fa:	f8d8 b008 	ldr.w	fp, [r8, #8]
900116fe:	eefe 7ace 	vcvt.s32.f32	s15, s15, #4
90011702:	68ff      	ldr	r7, [r7, #12]
90011704:	ee16 2a10 	vmov	r2, s12
90011708:	ed9d 6a09 	vldr	s12, [sp, #36]	@ 0x24
9001170c:	9624      	str	r6, [sp, #144]	@ 0x90
9001170e:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
90011712:	e9cd 0128 	strd	r0, r1, [sp, #160]	@ 0xa0
90011716:	ed8d 6a1e 	vstr	s12, [sp, #120]	@ 0x78
9001171a:	4628      	mov	r0, r5
9001171c:	edcd 5a2a 	vstr	s11, [sp, #168]	@ 0xa8
90011720:	9b06      	ldr	r3, [sp, #24]
90011722:	922d      	str	r2, [sp, #180]	@ 0xb4
90011724:	4a21      	ldr	r2, [pc, #132]	@ (900117ac <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x270>)
90011726:	9317      	str	r3, [sp, #92]	@ 0x5c
90011728:	8812      	ldrh	r2, [r2, #0]
9001172a:	9b07      	ldr	r3, [sp, #28]
9001172c:	9218      	str	r2, [sp, #96]	@ 0x60
9001172e:	9319      	str	r3, [sp, #100]	@ 0x64
90011730:	edcd 7a2e 	vstr	s15, [sp, #184]	@ 0xb8
90011734:	f8cd e0bc 	str.w	lr, [sp, #188]	@ 0xbc
90011738:	f8cd c0c0 	str.w	ip, [sp, #192]	@ 0xc0
9001173c:	f8cd b0ac 	str.w	fp, [sp, #172]	@ 0xac
90011740:	f8cd a0b0 	str.w	sl, [sp, #176]	@ 0xb0
90011744:	9731      	str	r7, [sp, #196]	@ 0xc4
90011746:	f005 fd71 	bl	9001722c <_ZNK8touchgfx6Bitmap12getExtraDataEv>
9001174a:	901a      	str	r0, [sp, #104]	@ 0x68
9001174c:	4628      	mov	r0, r5
9001174e:	f005 fc51 	bl	90016ff4 <_ZNK8touchgfx6Bitmap8getWidthEv>
90011752:	901b      	str	r0, [sp, #108]	@ 0x6c
90011754:	4628      	mov	r0, r5
90011756:	f005 fc81 	bl	9001705c <_ZNK8touchgfx6Bitmap9getHeightEv>
9001175a:	901c      	str	r0, [sp, #112]	@ 0x70
9001175c:	4628      	mov	r0, r5
9001175e:	f005 fc49 	bl	90016ff4 <_ZNK8touchgfx6Bitmap8getWidthEv>
90011762:	4b13      	ldr	r3, [pc, #76]	@ (900117b0 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x274>)
90011764:	901d      	str	r0, [sp, #116]	@ 0x74
90011766:	681b      	ldr	r3, [r3, #0]
90011768:	f893 2076 	ldrb.w	r2, [r3, #118]	@ 0x76
9001176c:	b10a      	cbz	r2, 90011772 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x236>
9001176e:	6cdd      	ldr	r5, [r3, #76]	@ 0x4c
90011770:	b905      	cbnz	r5, 90011774 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x238>
90011772:	689d      	ldr	r5, [r3, #8]
90011774:	682b      	ldr	r3, [r5, #0]
90011776:	4620      	mov	r0, r4
90011778:	6c1e      	ldr	r6, [r3, #64]	@ 0x40
9001177a:	f7ff fed5 	bl	90011528 <_ZNK8touchgfx13ScalableImage19lookupRenderVariantEv>
9001177e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
90011782:	aa1e      	add	r2, sp, #120	@ 0x78
90011784:	a917      	add	r1, sp, #92	@ 0x5c
90011786:	9304      	str	r3, [sp, #16]
90011788:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
9001178c:	e9cd 0302 	strd	r0, r3, [sp, #8]
90011790:	ab13      	add	r3, sp, #76	@ 0x4c
90011792:	4628      	mov	r0, r5
90011794:	9301      	str	r3, [sp, #4]
90011796:	ab15      	add	r3, sp, #84	@ 0x54
90011798:	9300      	str	r3, [sp, #0]
9001179a:	ab19      	add	r3, sp, #100	@ 0x64
9001179c:	47b0      	blx	r6
9001179e:	b033      	add	sp, #204	@ 0xcc
900117a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
900117a4:	2300      	movs	r3, #0
900117a6:	9312      	str	r3, [sp, #72]	@ 0x48
900117a8:	e706      	b.n	900115b8 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x7c>
900117aa:	bf00      	nop
900117ac:	24026306 	.word	0x24026306
900117b0:	2402630c 	.word	0x2402630c

900117b4 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE>:
900117b4:	b570      	push	{r4, r5, r6, lr}
900117b6:	ed2d 8b04 	vpush	{d8-d9}
900117ba:	f890 3028 	ldrb.w	r3, [r0, #40]	@ 0x28
900117be:	b098      	sub	sp, #96	@ 0x60
900117c0:	4604      	mov	r4, r0
900117c2:	460e      	mov	r6, r1
900117c4:	2b00      	cmp	r3, #0
900117c6:	d065      	beq.n	90011894 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0xe0>
900117c8:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
900117cc:	f100 0526 	add.w	r5, r0, #38	@ 0x26
900117d0:	ed9f 8a37 	vldr	s16, [pc, #220]	@ 900118b0 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0xfc>
900117d4:	ee09 3a10 	vmov	s18, r3
900117d8:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
900117dc:	4628      	mov	r0, r5
900117de:	ee08 3a90 	vmov	s17, r3
900117e2:	4b34      	ldr	r3, [pc, #208]	@ (900118b4 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x100>)
900117e4:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
900117e8:	930c      	str	r3, [sp, #48]	@ 0x30
900117ea:	eef8 8ae8 	vcvt.f32.s32	s17, s17
900117ee:	930d      	str	r3, [sp, #52]	@ 0x34
900117f0:	930e      	str	r3, [sp, #56]	@ 0x38
900117f2:	ee39 9a08 	vadd.f32	s18, s18, s16
900117f6:	930f      	str	r3, [sp, #60]	@ 0x3c
900117f8:	f005 fbfc 	bl	90016ff4 <_ZNK8touchgfx6Bitmap8getWidthEv>
900117fc:	ee07 0a90 	vmov	s15, r0
90011800:	4628      	mov	r0, r5
90011802:	ee78 8a88 	vadd.f32	s17, s17, s16
90011806:	eef8 9ae7 	vcvt.f32.s32	s19, s15
9001180a:	f005 fc27 	bl	9001705c <_ZNK8touchgfx6Bitmap9getHeightEv>
9001180e:	4b2a      	ldr	r3, [pc, #168]	@ (900118b8 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x104>)
90011810:	ee07 0a90 	vmov	s15, r0
90011814:	781b      	ldrb	r3, [r3, #0]
90011816:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
9001181a:	eef0 7a48 	vmov.f32	s15, s16
9001181e:	2b01      	cmp	r3, #1
90011820:	d13c      	bne.n	9001189c <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0xe8>
90011822:	eef0 6a69 	vmov.f32	s13, s19
90011826:	ee19 3a90 	vmov	r3, s19
9001182a:	eeb0 6a47 	vmov.f32	s12, s14
9001182e:	eef0 5a47 	vmov.f32	s11, s14
90011832:	eef0 9a48 	vmov.f32	s19, s16
90011836:	eeb0 7a48 	vmov.f32	s14, s16
9001183a:	9314      	str	r3, [sp, #80]	@ 0x50
9001183c:	ab14      	add	r3, sp, #80	@ 0x50
9001183e:	2200      	movs	r2, #0
90011840:	4631      	mov	r1, r6
90011842:	9303      	str	r3, [sp, #12]
90011844:	ab10      	add	r3, sp, #64	@ 0x40
90011846:	4620      	mov	r0, r4
90011848:	edcd 7a04 	vstr	s15, [sp, #16]
9001184c:	9302      	str	r3, [sp, #8]
9001184e:	ab0c      	add	r3, sp, #48	@ 0x30
90011850:	ed8d 9a05 	vstr	s18, [sp, #20]
90011854:	9301      	str	r3, [sp, #4]
90011856:	ab08      	add	r3, sp, #32
90011858:	ed8d 9a06 	vstr	s18, [sp, #24]
9001185c:	9300      	str	r3, [sp, #0]
9001185e:	ab04      	add	r3, sp, #16
90011860:	edcd 7a07 	vstr	s15, [sp, #28]
90011864:	edcd 7a08 	vstr	s15, [sp, #32]
90011868:	edcd 7a09 	vstr	s15, [sp, #36]	@ 0x24
9001186c:	edcd 8a0a 	vstr	s17, [sp, #40]	@ 0x28
90011870:	edcd 8a0b 	vstr	s17, [sp, #44]	@ 0x2c
90011874:	edcd 7a10 	vstr	s15, [sp, #64]	@ 0x40
90011878:	edcd 9a11 	vstr	s19, [sp, #68]	@ 0x44
9001187c:	edcd 5a12 	vstr	s11, [sp, #72]	@ 0x48
90011880:	ed8d 6a13 	vstr	s12, [sp, #76]	@ 0x4c
90011884:	edcd 7a15 	vstr	s15, [sp, #84]	@ 0x54
90011888:	ed8d 7a16 	vstr	s14, [sp, #88]	@ 0x58
9001188c:	edcd 6a17 	vstr	s13, [sp, #92]	@ 0x5c
90011890:	f7ff fe54 	bl	9001153c <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_>
90011894:	b018      	add	sp, #96	@ 0x60
90011896:	ecbd 8b04 	vpop	{d8-d9}
9001189a:	bd70      	pop	{r4, r5, r6, pc}
9001189c:	eef0 6a47 	vmov.f32	s13, s14
900118a0:	ee18 3a10 	vmov	r3, s16
900118a4:	eef0 5a69 	vmov.f32	s11, s19
900118a8:	eeb0 6a48 	vmov.f32	s12, s16
900118ac:	e7c5      	b.n	9001183a <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x86>
900118ae:	bf00      	nop
900118b0:	00000000 	.word	0x00000000
900118b4:	42c80000 	.word	0x42c80000
900118b8:	24026304 	.word	0x24026304

900118bc <_ZNK8touchgfx8TextArea12getWildcard1Ev>:
900118bc:	2000      	movs	r0, #0
900118be:	4770      	bx	lr

900118c0 <_ZNK8touchgfx8TextArea12getAlignmentEv>:
900118c0:	4b07      	ldr	r3, [pc, #28]	@ (900118e0 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x20>)
900118c2:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
900118c4:	881b      	ldrh	r3, [r3, #0]
900118c6:	4293      	cmp	r3, r2
900118c8:	bf81      	itttt	hi
900118ca:	4b06      	ldrhi	r3, [pc, #24]	@ (900118e4 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x24>)
900118cc:	681b      	ldrhi	r3, [r3, #0]
900118ce:	eb03 0342 	addhi.w	r3, r3, r2, lsl #1
900118d2:	7858      	ldrbhi	r0, [r3, #1]
900118d4:	bf8c      	ite	hi
900118d6:	f000 0003 	andhi.w	r0, r0, #3
900118da:	2000      	movls	r0, #0
900118dc:	4770      	bx	lr
900118de:	bf00      	nop
900118e0:	24026360 	.word	0x24026360
900118e4:	2402635c 	.word	0x2402635c

900118e8 <_ZN8touchgfx8TextAreaD1Ev>:
900118e8:	4770      	bx	lr
	...

900118ec <_ZNK8touchgfx8TextArea13getTextHeightEv>:
900118ec:	4b11      	ldr	r3, [pc, #68]	@ (90011934 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x48>)
900118ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
900118f2:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
900118f4:	4604      	mov	r4, r0
900118f6:	881b      	ldrh	r3, [r3, #0]
900118f8:	428b      	cmp	r3, r1
900118fa:	d918      	bls.n	9001192e <_ZNK8touchgfx8TextArea13getTextHeightEv+0x42>
900118fc:	6803      	ldr	r3, [r0, #0]
900118fe:	6f9d      	ldr	r5, [r3, #120]	@ 0x78
90011900:	4b0d      	ldr	r3, [pc, #52]	@ (90011938 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x4c>)
90011902:	6818      	ldr	r0, [r3, #0]
90011904:	f7f4 f9e6 	bl	90005cd4 <_ZNK8touchgfx5Texts7getTextEt>
90011908:	6823      	ldr	r3, [r4, #0]
9001190a:	4606      	mov	r6, r0
9001190c:	4620      	mov	r0, r4
9001190e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
90011910:	4798      	blx	r3
90011912:	6823      	ldr	r3, [r4, #0]
90011914:	4607      	mov	r7, r0
90011916:	4620      	mov	r0, r4
90011918:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
9001191c:	4798      	blx	r3
9001191e:	463a      	mov	r2, r7
90011920:	4603      	mov	r3, r0
90011922:	4631      	mov	r1, r6
90011924:	4620      	mov	r0, r4
90011926:	46ac      	mov	ip, r5
90011928:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
9001192c:	4760      	bx	ip
9001192e:	2000      	movs	r0, #0
90011930:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90011934:	24026360 	.word	0x24026360
90011938:	24026368 	.word	0x24026368

9001193c <_ZNK8touchgfx8TextArea12getTextWidthEv>:
9001193c:	4b18      	ldr	r3, [pc, #96]	@ (900119a0 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
9001193e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
90011942:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
90011944:	4604      	mov	r4, r0
90011946:	881b      	ldrh	r3, [r3, #0]
90011948:	428b      	cmp	r3, r1
9001194a:	d926      	bls.n	9001199a <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5e>
9001194c:	4b15      	ldr	r3, [pc, #84]	@ (900119a4 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
9001194e:	681b      	ldr	r3, [r3, #0]
90011950:	eb03 0241 	add.w	r2, r3, r1, lsl #1
90011954:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
90011958:	4b13      	ldr	r3, [pc, #76]	@ (900119a8 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
9001195a:	7855      	ldrb	r5, [r2, #1]
9001195c:	681b      	ldr	r3, [r3, #0]
9001195e:	f3c5 0581 	ubfx	r5, r5, #2, #2
90011962:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
90011966:	6833      	ldr	r3, [r6, #0]
90011968:	69df      	ldr	r7, [r3, #28]
9001196a:	4b10      	ldr	r3, [pc, #64]	@ (900119ac <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
9001196c:	6818      	ldr	r0, [r3, #0]
9001196e:	f7f4 f9b1 	bl	90005cd4 <_ZNK8touchgfx5Texts7getTextEt>
90011972:	6823      	ldr	r3, [r4, #0]
90011974:	4680      	mov	r8, r0
90011976:	4620      	mov	r0, r4
90011978:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
9001197a:	4798      	blx	r3
9001197c:	6823      	ldr	r3, [r4, #0]
9001197e:	4681      	mov	r9, r0
90011980:	4620      	mov	r0, r4
90011982:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
90011986:	4798      	blx	r3
90011988:	464b      	mov	r3, r9
9001198a:	9000      	str	r0, [sp, #0]
9001198c:	4642      	mov	r2, r8
9001198e:	4629      	mov	r1, r5
90011990:	4630      	mov	r0, r6
90011992:	47b8      	blx	r7
90011994:	b003      	add	sp, #12
90011996:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
9001199a:	2000      	movs	r0, #0
9001199c:	e7fa      	b.n	90011994 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x58>
9001199e:	bf00      	nop
900119a0:	24026360 	.word	0x24026360
900119a4:	2402635c 	.word	0x2402635c
900119a8:	24026364 	.word	0x24026364
900119ac:	24026368 	.word	0x24026368

900119b0 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
900119b0:	b40e      	push	{r1, r2, r3}
900119b2:	4b30      	ldr	r3, [pc, #192]	@ (90011a74 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc4>)
900119b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
900119b8:	881a      	ldrh	r2, [r3, #0]
900119ba:	b09d      	sub	sp, #116	@ 0x74
900119bc:	8d83      	ldrh	r3, [r0, #44]	@ 0x2c
900119be:	4604      	mov	r4, r0
900119c0:	429a      	cmp	r2, r3
900119c2:	d954      	bls.n	90011a6e <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xbe>
900119c4:	aa26      	add	r2, sp, #152	@ 0x98
900119c6:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 90011a78 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
900119ca:	f8df 80b0 	ldr.w	r8, [pc, #176]	@ 90011a7c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xcc>
900119ce:	9202      	str	r2, [sp, #8]
900119d0:	f8d9 2000 	ldr.w	r2, [r9]
900119d4:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
900119d8:	f8d8 3000 	ldr.w	r3, [r8]
900119dc:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
900119e0:	682b      	ldr	r3, [r5, #0]
900119e2:	4628      	mov	r0, r5
900119e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
900119e6:	4798      	blx	r3
900119e8:	4606      	mov	r6, r0
900119ea:	b207      	sxth	r7, r0
900119ec:	a803      	add	r0, sp, #12
900119ee:	f003 fdb7 	bl	90015560 <_ZN8touchgfx12TextProviderC1Ev>
900119f2:	682b      	ldr	r3, [r5, #0]
900119f4:	4628      	mov	r0, r5
900119f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
900119f8:	4798      	blx	r3
900119fa:	682b      	ldr	r3, [r5, #0]
900119fc:	4682      	mov	sl, r0
900119fe:	4628      	mov	r0, r5
90011a00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
90011a02:	4798      	blx	r3
90011a04:	4653      	mov	r3, sl
90011a06:	9000      	str	r0, [sp, #0]
90011a08:	a803      	add	r0, sp, #12
90011a0a:	9a02      	ldr	r2, [sp, #8]
90011a0c:	9925      	ldr	r1, [sp, #148]	@ 0x94
90011a0e:	f003 fe02 	bl	90015616 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
90011a12:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
90011a14:	f8d9 3000 	ldr.w	r3, [r9]
90011a18:	f894 c037 	ldrb.w	ip, [r4, #55]	@ 0x37
90011a1c:	8925      	ldrh	r5, [r4, #8]
90011a1e:	eb03 0142 	add.w	r1, r3, r2, lsl #1
90011a22:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
90011a26:	eba5 050c 	sub.w	r5, r5, ip
90011a2a:	784a      	ldrb	r2, [r1, #1]
90011a2c:	f8d8 3000 	ldr.w	r3, [r8]
90011a30:	b22d      	sxth	r5, r5
90011a32:	f894 1039 	ldrb.w	r1, [r4, #57]	@ 0x39
90011a36:	f3c2 0281 	ubfx	r2, r2, #2, #2
90011a3a:	9500      	str	r5, [sp, #0]
90011a3c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
90011a40:	a803      	add	r0, sp, #12
90011a42:	f001 fc3b 	bl	900132bc <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
90011a46:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	@ 0x34
90011a4a:	b203      	sxth	r3, r0
90011a4c:	18b9      	adds	r1, r7, r2
90011a4e:	2900      	cmp	r1, #0
90011a50:	dd0b      	ble.n	90011a6a <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xba>
90011a52:	3b01      	subs	r3, #1
90011a54:	fb13 f302 	smulbb	r3, r3, r2
90011a58:	fb16 3300 	smlabb	r3, r6, r0, r3
90011a5c:	b21f      	sxth	r7, r3
90011a5e:	4638      	mov	r0, r7
90011a60:	b01d      	add	sp, #116	@ 0x74
90011a62:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
90011a66:	b003      	add	sp, #12
90011a68:	4770      	bx	lr
90011a6a:	2b00      	cmp	r3, #0
90011a6c:	dcf7      	bgt.n	90011a5e <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
90011a6e:	2700      	movs	r7, #0
90011a70:	e7f5      	b.n	90011a5e <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
90011a72:	bf00      	nop
90011a74:	24026360 	.word	0x24026360
90011a78:	2402635c 	.word	0x2402635c
90011a7c:	24026364 	.word	0x24026364

90011a80 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>:
90011a80:	4bbd      	ldr	r3, [pc, #756]	@ (90011d78 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2f8>)
90011a82:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90011a86:	460c      	mov	r4, r1
90011a88:	881b      	ldrh	r3, [r3, #0]
90011a8a:	8d89      	ldrh	r1, [r1, #44]	@ 0x2c
90011a8c:	b0a9      	sub	sp, #164	@ 0xa4
90011a8e:	4680      	mov	r8, r0
90011a90:	428b      	cmp	r3, r1
90011a92:	d809      	bhi.n	90011aa8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28>
90011a94:	2300      	movs	r3, #0
90011a96:	f04f 32ff 	mov.w	r2, #4294967295
90011a9a:	6083      	str	r3, [r0, #8]
90011a9c:	e9c0 3200 	strd	r3, r2, [r0]
90011aa0:	4640      	mov	r0, r8
90011aa2:	b029      	add	sp, #164	@ 0xa4
90011aa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90011aa8:	4eb4      	ldr	r6, [pc, #720]	@ (90011d7c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>)
90011aaa:	6833      	ldr	r3, [r6, #0]
90011aac:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
90011ab0:	4bb3      	ldr	r3, [pc, #716]	@ (90011d80 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x300>)
90011ab2:	681b      	ldr	r3, [r3, #0]
90011ab4:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
90011ab8:	4bb2      	ldr	r3, [pc, #712]	@ (90011d84 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
90011aba:	6818      	ldr	r0, [r3, #0]
90011abc:	f7f4 f90a 	bl	90005cd4 <_ZNK8touchgfx5Texts7getTextEt>
90011ac0:	682b      	ldr	r3, [r5, #0]
90011ac2:	4681      	mov	r9, r0
90011ac4:	4628      	mov	r0, r5
90011ac6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
90011ac8:	4798      	blx	r3
90011aca:	8ea7      	ldrh	r7, [r4, #52]	@ 0x34
90011acc:	b203      	sxth	r3, r0
90011ace:	4682      	mov	sl, r0
90011ad0:	4407      	add	r7, r0
90011ad2:	a80f      	add	r0, sp, #60	@ 0x3c
90011ad4:	9304      	str	r3, [sp, #16]
90011ad6:	b2bb      	uxth	r3, r7
90011ad8:	9303      	str	r3, [sp, #12]
90011ada:	f894 3039 	ldrb.w	r3, [r4, #57]	@ 0x39
90011ade:	2b00      	cmp	r3, #0
90011ae0:	f040 80a5 	bne.w	90011c2e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x1ae>
90011ae4:	f003 fd3c 	bl	90015560 <_ZN8touchgfx12TextProviderC1Ev>
90011ae8:	682b      	ldr	r3, [r5, #0]
90011aea:	4628      	mov	r0, r5
90011aec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
90011aee:	4798      	blx	r3
90011af0:	682b      	ldr	r3, [r5, #0]
90011af2:	4606      	mov	r6, r0
90011af4:	4628      	mov	r0, r5
90011af6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
90011af8:	4798      	blx	r3
90011afa:	6823      	ldr	r3, [r4, #0]
90011afc:	4607      	mov	r7, r0
90011afe:	4620      	mov	r0, r4
90011b00:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
90011b02:	4798      	blx	r3
90011b04:	6823      	ldr	r3, [r4, #0]
90011b06:	4683      	mov	fp, r0
90011b08:	4620      	mov	r0, r4
90011b0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
90011b0e:	4798      	blx	r3
90011b10:	463b      	mov	r3, r7
90011b12:	4649      	mov	r1, r9
90011b14:	4632      	mov	r2, r6
90011b16:	2600      	movs	r6, #0
90011b18:	e9cd b000 	strd	fp, r0, [sp]
90011b1c:	a80f      	add	r0, sp, #60	@ 0x3c
90011b1e:	4637      	mov	r7, r6
90011b20:	f003 fd8e 	bl	90015640 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
90011b24:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
90011b28:	f8df b250 	ldr.w	fp, [pc, #592]	@ 90011d7c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>
90011b2c:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
90011b30:	bf0c      	ite	eq
90011b32:	f9b4 900a 	ldrsheq.w	r9, [r4, #10]
90011b36:	f9b4 9008 	ldrshne.w	r9, [r4, #8]
90011b3a:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
90011b3c:	4629      	mov	r1, r5
90011b3e:	f8db 3000 	ldr.w	r3, [fp]
90011b42:	a80f      	add	r0, sp, #60	@ 0x3c
90011b44:	3701      	adds	r7, #1
90011b46:	eb03 0342 	add.w	r3, r3, r2, lsl #1
90011b4a:	f647 72ff 	movw	r2, #32767	@ 0x7fff
90011b4e:	b2bf      	uxth	r7, r7
90011b50:	785b      	ldrb	r3, [r3, #1]
90011b52:	f3c3 0381 	ubfx	r3, r3, #2, #2
90011b56:	f001 f8cc 	bl	90012cf2 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
90011b5a:	9b03      	ldr	r3, [sp, #12]
90011b5c:	4286      	cmp	r6, r0
90011b5e:	eba9 0903 	sub.w	r9, r9, r3
90011b62:	bfb8      	it	lt
90011b64:	4606      	movlt	r6, r0
90011b66:	a80f      	add	r0, sp, #60	@ 0x3c
90011b68:	fa0f f989 	sxth.w	r9, r9
90011b6c:	b236      	sxth	r6, r6
90011b6e:	f003 fd1e 	bl	900155ae <_ZN8touchgfx12TextProvider11endOfStringEv>
90011b72:	b918      	cbnz	r0, 90011b7c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
90011b74:	7a2b      	ldrb	r3, [r5, #8]
90011b76:	444b      	add	r3, r9
90011b78:	2b00      	cmp	r3, #0
90011b7a:	dcde      	bgt.n	90011b3a <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xba>
90011b7c:	9b03      	ldr	r3, [sp, #12]
90011b7e:	4620      	mov	r0, r4
90011b80:	9a04      	ldr	r2, [sp, #16]
90011b82:	fb13 f707 	smulbb	r7, r3, r7
90011b86:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
90011b88:	f895 9009 	ldrb.w	r9, [r5, #9]
90011b8c:	1aff      	subs	r7, r7, r3
90011b8e:	b2bf      	uxth	r7, r7
90011b90:	b23b      	sxth	r3, r7
90011b92:	429a      	cmp	r2, r3
90011b94:	bfa8      	it	ge
90011b96:	4657      	movge	r7, sl
90011b98:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
90011b9c:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
90011ba0:	6823      	ldr	r3, [r4, #0]
90011ba2:	444f      	add	r7, r9
90011ba4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
90011ba6:	bf08      	it	eq
90011ba8:	f9b4 a008 	ldrsheq.w	sl, [r4, #8]
90011bac:	fa1f f987 	uxth.w	r9, r7
90011bb0:	bf18      	it	ne
90011bb2:	f9b4 a00a 	ldrshne.w	sl, [r4, #10]
90011bb6:	4798      	blx	r3
90011bb8:	2801      	cmp	r0, #1
90011bba:	fa0f f789 	sxth.w	r7, r9
90011bbe:	b2b3      	uxth	r3, r6
90011bc0:	f000 80e2 	beq.w	90011d88 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x308>
90011bc4:	2802      	cmp	r0, #2
90011bc6:	f894 6037 	ldrb.w	r6, [r4, #55]	@ 0x37
90011bca:	f000 80e3 	beq.w	90011d94 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x314>
90011bce:	7aea      	ldrb	r2, [r5, #11]
90011bd0:	b236      	sxth	r6, r6
90011bd2:	7b2d      	ldrb	r5, [r5, #12]
90011bd4:	1ab6      	subs	r6, r6, r2
90011bd6:	442a      	add	r2, r5
90011bd8:	fa1f fa86 	uxth.w	sl, r6
90011bdc:	4413      	add	r3, r2
90011bde:	f894 2038 	ldrb.w	r2, [r4, #56]	@ 0x38
90011be2:	fa0f fb8a 	sxth.w	fp, sl
90011be6:	b29b      	uxth	r3, r3
90011be8:	2a02      	cmp	r2, #2
90011bea:	b21e      	sxth	r6, r3
90011bec:	f000 80d6 	beq.w	90011d9c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x31c>
90011bf0:	2a03      	cmp	r2, #3
90011bf2:	f000 80de 	beq.w	90011db2 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x332>
90011bf6:	2a01      	cmp	r2, #1
90011bf8:	f040 80e6 	bne.w	90011dc8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x348>
90011bfc:	8925      	ldrh	r5, [r4, #8]
90011bfe:	4633      	mov	r3, r6
90011c00:	463e      	mov	r6, r7
90011c02:	eba5 0909 	sub.w	r9, r5, r9
90011c06:	461f      	mov	r7, r3
90011c08:	465d      	mov	r5, fp
90011c0a:	fa0f fb89 	sxth.w	fp, r9
90011c0e:	4b5d      	ldr	r3, [pc, #372]	@ (90011d84 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
90011c10:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
90011c12:	6818      	ldr	r0, [r3, #0]
90011c14:	f7f4 f85e 	bl	90005cd4 <_ZNK8touchgfx5Texts7getTextEt>
90011c18:	f8a8 b000 	strh.w	fp, [r8]
90011c1c:	f8a8 5002 	strh.w	r5, [r8, #2]
90011c20:	f8a8 6004 	strh.w	r6, [r8, #4]
90011c24:	f8a8 7006 	strh.w	r7, [r8, #6]
90011c28:	f8c8 0008 	str.w	r0, [r8, #8]
90011c2c:	e738      	b.n	90011aa0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x20>
90011c2e:	f003 fc97 	bl	90015560 <_ZN8touchgfx12TextProviderC1Ev>
90011c32:	682b      	ldr	r3, [r5, #0]
90011c34:	4628      	mov	r0, r5
90011c36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
90011c38:	4798      	blx	r3
90011c3a:	682b      	ldr	r3, [r5, #0]
90011c3c:	4607      	mov	r7, r0
90011c3e:	4628      	mov	r0, r5
90011c40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
90011c42:	4798      	blx	r3
90011c44:	6823      	ldr	r3, [r4, #0]
90011c46:	4683      	mov	fp, r0
90011c48:	4620      	mov	r0, r4
90011c4a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
90011c4c:	4798      	blx	r3
90011c4e:	6822      	ldr	r2, [r4, #0]
90011c50:	9005      	str	r0, [sp, #20]
90011c52:	4620      	mov	r0, r4
90011c54:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
90011c58:	4790      	blx	r2
90011c5a:	9b05      	ldr	r3, [sp, #20]
90011c5c:	463a      	mov	r2, r7
90011c5e:	4649      	mov	r1, r9
90011c60:	9001      	str	r0, [sp, #4]
90011c62:	a80f      	add	r0, sp, #60	@ 0x3c
90011c64:	9300      	str	r3, [sp, #0]
90011c66:	465b      	mov	r3, fp
90011c68:	f003 fcea 	bl	90015640 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
90011c6c:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
90011c70:	f9b4 9008 	ldrsh.w	r9, [r4, #8]
90011c74:	af0f      	add	r7, sp, #60	@ 0x3c
90011c76:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
90011c7a:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
90011c7e:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
90011c80:	bf0a      	itet	eq
90011c82:	464a      	moveq	r2, r9
90011c84:	461a      	movne	r2, r3
90011c86:	4699      	moveq	r9, r3
90011c88:	f894 3037 	ldrb.w	r3, [r4, #55]	@ 0x37
90011c8c:	f894 0039 	ldrb.w	r0, [r4, #57]	@ 0x39
90011c90:	1ad2      	subs	r2, r2, r3
90011c92:	6833      	ldr	r3, [r6, #0]
90011c94:	f9b4 6034 	ldrsh.w	r6, [r4, #52]	@ 0x34
90011c98:	eb03 0341 	add.w	r3, r3, r1, lsl #1
90011c9c:	7859      	ldrb	r1, [r3, #1]
90011c9e:	2300      	movs	r3, #0
90011ca0:	9707      	str	r7, [sp, #28]
90011ca2:	f3c1 0181 	ubfx	r1, r1, #2, #2
90011ca6:	f8ad 3018 	strh.w	r3, [sp, #24]
90011caa:	f88d 0021 	strb.w	r0, [sp, #33]	@ 0x21
90011cae:	f88d 1020 	strb.w	r1, [sp, #32]
90011cb2:	9509      	str	r5, [sp, #36]	@ 0x24
90011cb4:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
90011cb8:	f8ad 902a 	strh.w	r9, [sp, #42]	@ 0x2a
90011cbc:	f8ad 602c 	strh.w	r6, [sp, #44]	@ 0x2c
90011cc0:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
90011cc4:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
90011cc8:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
90011ccc:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
90011cd0:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
90011cd4:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
90011cd8:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
90011cdc:	b350      	cbz	r0, 90011d34 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
90011cde:	682b      	ldr	r3, [r5, #0]
90011ce0:	4628      	mov	r0, r5
90011ce2:	695b      	ldr	r3, [r3, #20]
90011ce4:	4798      	blx	r3
90011ce6:	4607      	mov	r7, r0
90011ce8:	b320      	cbz	r0, 90011d34 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
90011cea:	9809      	ldr	r0, [sp, #36]	@ 0x24
90011cec:	4639      	mov	r1, r7
90011cee:	6803      	ldr	r3, [r0, #0]
90011cf0:	68db      	ldr	r3, [r3, #12]
90011cf2:	4798      	blx	r3
90011cf4:	4606      	mov	r6, r0
90011cf6:	b1e8      	cbz	r0, 90011d34 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
90011cf8:	7b43      	ldrb	r3, [r0, #13]
90011cfa:	7a82      	ldrb	r2, [r0, #10]
90011cfc:	005b      	lsls	r3, r3, #1
90011cfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
90011d02:	4313      	orrs	r3, r2
90011d04:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
90011d08:	f89d 3021 	ldrb.w	r3, [sp, #33]	@ 0x21
90011d0c:	2b06      	cmp	r3, #6
90011d0e:	d111      	bne.n	90011d34 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
90011d10:	9809      	ldr	r0, [sp, #36]	@ 0x24
90011d12:	4632      	mov	r2, r6
90011d14:	4639      	mov	r1, r7
90011d16:	6803      	ldr	r3, [r0, #0]
90011d18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
90011d1a:	4798      	blx	r3
90011d1c:	7b73      	ldrb	r3, [r6, #13]
90011d1e:	005b      	lsls	r3, r3, #1
90011d20:	f403 7280 	and.w	r2, r3, #256	@ 0x100
90011d24:	7ab3      	ldrb	r3, [r6, #10]
90011d26:	4313      	orrs	r3, r2
90011d28:	4418      	add	r0, r3
90011d2a:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
90011d2e:	4418      	add	r0, r3
90011d30:	f8ad 0038 	strh.w	r0, [sp, #56]	@ 0x38
90011d34:	2600      	movs	r6, #0
90011d36:	4637      	mov	r7, r6
90011d38:	a806      	add	r0, sp, #24
90011d3a:	3701      	adds	r7, #1
90011d3c:	f001 f9bb 	bl	900130b6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
90011d40:	f8bd 0036 	ldrh.w	r0, [sp, #54]	@ 0x36
90011d44:	9b03      	ldr	r3, [sp, #12]
90011d46:	b2bf      	uxth	r7, r7
90011d48:	4286      	cmp	r6, r0
90011d4a:	eba9 0903 	sub.w	r9, r9, r3
90011d4e:	f8bd 3018 	ldrh.w	r3, [sp, #24]
90011d52:	bfb8      	it	lt
90011d54:	4606      	movlt	r6, r0
90011d56:	fa0f f989 	sxth.w	r9, r9
90011d5a:	b236      	sxth	r6, r6
90011d5c:	2b00      	cmp	r3, #0
90011d5e:	f43f af0d 	beq.w	90011b7c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
90011d62:	f89d 303a 	ldrb.w	r3, [sp, #58]	@ 0x3a
90011d66:	2b00      	cmp	r3, #0
90011d68:	f47f af08 	bne.w	90011b7c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
90011d6c:	7a2b      	ldrb	r3, [r5, #8]
90011d6e:	444b      	add	r3, r9
90011d70:	2b00      	cmp	r3, #0
90011d72:	dce1      	bgt.n	90011d38 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b8>
90011d74:	e702      	b.n	90011b7c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
90011d76:	bf00      	nop
90011d78:	24026360 	.word	0x24026360
90011d7c:	2402635c 	.word	0x2402635c
90011d80:	24026364 	.word	0x24026364
90011d84:	24026368 	.word	0x24026368
90011d88:	ebaa 0606 	sub.w	r6, sl, r6
90011d8c:	2002      	movs	r0, #2
90011d8e:	fb96 f6f0 	sdiv	r6, r6, r0
90011d92:	e71c      	b.n	90011bce <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x14e>
90011d94:	441e      	add	r6, r3
90011d96:	ebaa 0606 	sub.w	r6, sl, r6
90011d9a:	e718      	b.n	90011bce <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x14e>
90011d9c:	8925      	ldrh	r5, [r4, #8]
90011d9e:	1aed      	subs	r5, r5, r3
90011da0:	eba5 050a 	sub.w	r5, r5, sl
90011da4:	fa0f fb85 	sxth.w	fp, r5
90011da8:	8965      	ldrh	r5, [r4, #10]
90011daa:	eba5 0509 	sub.w	r5, r5, r9
90011dae:	b22d      	sxth	r5, r5
90011db0:	e72d      	b.n	90011c0e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>
90011db2:	8965      	ldrh	r5, [r4, #10]
90011db4:	f04f 0b00 	mov.w	fp, #0
90011db8:	1aed      	subs	r5, r5, r3
90011dba:	4633      	mov	r3, r6
90011dbc:	463e      	mov	r6, r7
90011dbe:	eba5 050a 	sub.w	r5, r5, sl
90011dc2:	461f      	mov	r7, r3
90011dc4:	b22d      	sxth	r5, r5
90011dc6:	e722      	b.n	90011c0e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>
90011dc8:	2500      	movs	r5, #0
90011dca:	e720      	b.n	90011c0e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>

90011dcc <_ZN8touchgfx8TextAreaD0Ev>:
90011dcc:	b510      	push	{r4, lr}
90011dce:	4604      	mov	r4, r0
90011dd0:	2148      	movs	r1, #72	@ 0x48
90011dd2:	f010 fef0 	bl	90022bb6 <_ZdlPvj>
90011dd6:	4620      	mov	r0, r4
90011dd8:	bd10      	pop	{r4, pc}
	...

90011ddc <_ZNK8touchgfx8TextArea17invalidateContentEv>:
90011ddc:	b513      	push	{r0, r1, r4, lr}
90011dde:	f890 3036 	ldrb.w	r3, [r0, #54]	@ 0x36
90011de2:	4604      	mov	r4, r0
90011de4:	b1fb      	cbz	r3, 90011e26 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
90011de6:	4b16      	ldr	r3, [pc, #88]	@ (90011e40 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x64>)
90011de8:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
90011dea:	881b      	ldrh	r3, [r3, #0]
90011dec:	428b      	cmp	r3, r1
90011dee:	d91a      	bls.n	90011e26 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
90011df0:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
90011df4:	2b00      	cmp	r3, #0
90011df6:	dd16      	ble.n	90011e26 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
90011df8:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
90011dfc:	2b00      	cmp	r3, #0
90011dfe:	dd12      	ble.n	90011e26 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
90011e00:	4b10      	ldr	r3, [pc, #64]	@ (90011e44 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x68>)
90011e02:	6818      	ldr	r0, [r3, #0]
90011e04:	f7f3 ff66 	bl	90005cd4 <_ZNK8touchgfx5Texts7getTextEt>
90011e08:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	@ 0x42
90011e0c:	6822      	ldr	r2, [r4, #0]
90011e0e:	2b00      	cmp	r3, #0
90011e10:	db06      	blt.n	90011e20 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
90011e12:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	@ 0x40
90011e16:	2b00      	cmp	r3, #0
90011e18:	db02      	blt.n	90011e20 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
90011e1a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
90011e1c:	4298      	cmp	r0, r3
90011e1e:	d004      	beq.n	90011e2a <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4e>
90011e20:	6953      	ldr	r3, [r2, #20]
90011e22:	4620      	mov	r0, r4
90011e24:	4798      	blx	r3
90011e26:	b002      	add	sp, #8
90011e28:	bd10      	pop	{r4, pc}
90011e2a:	f104 013c 	add.w	r1, r4, #60	@ 0x3c
90011e2e:	466b      	mov	r3, sp
90011e30:	6912      	ldr	r2, [r2, #16]
90011e32:	c903      	ldmia	r1, {r0, r1}
90011e34:	e883 0003 	stmia.w	r3, {r0, r1}
90011e38:	4619      	mov	r1, r3
90011e3a:	4620      	mov	r0, r4
90011e3c:	4790      	blx	r2
90011e3e:	e7f2      	b.n	90011e26 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
90011e40:	24026360 	.word	0x24026360
90011e44:	24026368 	.word	0x24026368

90011e48 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
90011e48:	4b45      	ldr	r3, [pc, #276]	@ (90011f60 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x118>)
90011e4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90011e4e:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
90011e50:	b08e      	sub	sp, #56	@ 0x38
90011e52:	881b      	ldrh	r3, [r3, #0]
90011e54:	4604      	mov	r4, r0
90011e56:	4293      	cmp	r3, r2
90011e58:	d97e      	bls.n	90011f58 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
90011e5a:	6808      	ldr	r0, [r1, #0]
90011e5c:	ab05      	add	r3, sp, #20
90011e5e:	6849      	ldr	r1, [r1, #4]
90011e60:	4d40      	ldr	r5, [pc, #256]	@ (90011f64 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x11c>)
90011e62:	c303      	stmia	r3!, {r0, r1}
90011e64:	4611      	mov	r1, r2
90011e66:	6828      	ldr	r0, [r5, #0]
90011e68:	f7f3 ff34 	bl	90005cd4 <_ZNK8touchgfx5Texts7getTextEt>
90011e6c:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	@ 0x42
90011e70:	2b00      	cmp	r3, #0
90011e72:	db11      	blt.n	90011e98 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
90011e74:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	@ 0x40
90011e78:	2b00      	cmp	r3, #0
90011e7a:	db0d      	blt.n	90011e98 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
90011e7c:	6c63      	ldr	r3, [r4, #68]	@ 0x44
90011e7e:	4298      	cmp	r0, r3
90011e80:	d10a      	bne.n	90011e98 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
90011e82:	f104 023c 	add.w	r2, r4, #60	@ 0x3c
90011e86:	ab09      	add	r3, sp, #36	@ 0x24
90011e88:	e892 0003 	ldmia.w	r2, {r0, r1}
90011e8c:	e883 0003 	stmia.w	r3, {r0, r1}
90011e90:	4619      	mov	r1, r3
90011e92:	a805      	add	r0, sp, #20
90011e94:	f7fe fad4 	bl	90010440 <_ZN8touchgfx4RectaNERKS0_>
90011e98:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
90011e9c:	2b00      	cmp	r3, #0
90011e9e:	dd5b      	ble.n	90011f58 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
90011ea0:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
90011ea4:	2b00      	cmp	r3, #0
90011ea6:	dd57      	ble.n	90011f58 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
90011ea8:	4f2f      	ldr	r7, [pc, #188]	@ (90011f68 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x120>)
90011eaa:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
90011eac:	683b      	ldr	r3, [r7, #0]
90011eae:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
90011eb2:	4b2e      	ldr	r3, [pc, #184]	@ (90011f6c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x124>)
90011eb4:	681b      	ldr	r3, [r3, #0]
90011eb6:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
90011eba:	2e00      	cmp	r6, #0
90011ebc:	d04c      	beq.n	90011f58 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
90011ebe:	6823      	ldr	r3, [r4, #0]
90011ec0:	4620      	mov	r0, r4
90011ec2:	f894 8036 	ldrb.w	r8, [r4, #54]	@ 0x36
90011ec6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
90011ec8:	4798      	blx	r3
90011eca:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
90011ecc:	683b      	ldr	r3, [r7, #0]
90011ece:	f9b4 c034 	ldrsh.w	ip, [r4, #52]	@ 0x34
90011ed2:	eb03 0342 	add.w	r3, r3, r2, lsl #1
90011ed6:	f894 e038 	ldrb.w	lr, [r4, #56]	@ 0x38
90011eda:	f894 2039 	ldrb.w	r2, [r4, #57]	@ 0x39
90011ede:	785b      	ldrb	r3, [r3, #1]
90011ee0:	f894 7037 	ldrb.w	r7, [r4, #55]	@ 0x37
90011ee4:	f3c3 0381 	ubfx	r3, r3, #2, #2
90011ee8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
90011eea:	9609      	str	r6, [sp, #36]	@ 0x24
90011eec:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
90011ef0:	4b1f      	ldr	r3, [pc, #124]	@ (90011f70 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x128>)
90011ef2:	f88d 0028 	strb.w	r0, [sp, #40]	@ 0x28
90011ef6:	681b      	ldr	r3, [r3, #0]
90011ef8:	f88d e02a 	strb.w	lr, [sp, #42]	@ 0x2a
90011efc:	910b      	str	r1, [sp, #44]	@ 0x2c
90011efe:	f8ad c030 	strh.w	ip, [sp, #48]	@ 0x30
90011f02:	f88d 8032 	strb.w	r8, [sp, #50]	@ 0x32
90011f06:	f88d 7033 	strb.w	r7, [sp, #51]	@ 0x33
90011f0a:	f88d 2034 	strb.w	r2, [sp, #52]	@ 0x34
90011f0e:	f893 2076 	ldrb.w	r2, [r3, #118]	@ 0x76
90011f12:	b10a      	cbz	r2, 90011f18 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd0>
90011f14:	6cde      	ldr	r6, [r3, #76]	@ 0x4c
90011f16:	b906      	cbnz	r6, 90011f1a <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd2>
90011f18:	689e      	ldr	r6, [r3, #8]
90011f1a:	af07      	add	r7, sp, #28
90011f1c:	4621      	mov	r1, r4
90011f1e:	4638      	mov	r0, r7
90011f20:	f002 ff3c 	bl	90014d9c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
90011f24:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
90011f26:	6828      	ldr	r0, [r5, #0]
90011f28:	f7f3 fed4 	bl	90005cd4 <_ZNK8touchgfx5Texts7getTextEt>
90011f2c:	6823      	ldr	r3, [r4, #0]
90011f2e:	4605      	mov	r5, r0
90011f30:	4620      	mov	r0, r4
90011f32:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
90011f34:	4798      	blx	r3
90011f36:	6823      	ldr	r3, [r4, #0]
90011f38:	4680      	mov	r8, r0
90011f3a:	4620      	mov	r0, r4
90011f3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
90011f40:	4798      	blx	r3
90011f42:	ab09      	add	r3, sp, #36	@ 0x24
90011f44:	9501      	str	r5, [sp, #4]
90011f46:	9300      	str	r3, [sp, #0]
90011f48:	ab05      	add	r3, sp, #20
90011f4a:	e9cd 8002 	strd	r8, r0, [sp, #8]
90011f4e:	4630      	mov	r0, r6
90011f50:	e897 0006 	ldmia.w	r7, {r1, r2}
90011f54:	f7f3 fe6e 	bl	90005c34 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
90011f58:	b00e      	add	sp, #56	@ 0x38
90011f5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90011f5e:	bf00      	nop
90011f60:	24026360 	.word	0x24026360
90011f64:	24026368 	.word	0x24026368
90011f68:	2402635c 	.word	0x2402635c
90011f6c:	24026364 	.word	0x24026364
90011f70:	2402630c 	.word	0x2402630c

90011f74 <_ZN8touchgfx8Drawable14setWidthHeightEss>:
90011f74:	b570      	push	{r4, r5, r6, lr}
90011f76:	6803      	ldr	r3, [r0, #0]
90011f78:	4604      	mov	r4, r0
90011f7a:	4615      	mov	r5, r2
90011f7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
90011f7e:	4798      	blx	r3
90011f80:	6823      	ldr	r3, [r4, #0]
90011f82:	4629      	mov	r1, r5
90011f84:	4620      	mov	r0, r4
90011f86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
90011f88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90011f8c:	4718      	bx	r3
	...

90011f90 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
90011f90:	b538      	push	{r3, r4, r5, lr}
90011f92:	4b0e      	ldr	r3, [pc, #56]	@ (90011fcc <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>)
90011f94:	4604      	mov	r4, r0
90011f96:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
90011f98:	881b      	ldrh	r3, [r3, #0]
90011f9a:	429a      	cmp	r2, r3
90011f9c:	d214      	bcs.n	90011fc8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
90011f9e:	6803      	ldr	r3, [r0, #0]
90011fa0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
90011fa2:	4798      	blx	r3
90011fa4:	6823      	ldr	r3, [r4, #0]
90011fa6:	4605      	mov	r5, r0
90011fa8:	4620      	mov	r0, r4
90011faa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
90011fac:	4798      	blx	r3
90011fae:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
90011fb2:	b22d      	sxth	r5, r5
90011fb4:	4601      	mov	r1, r0
90011fb6:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
90011fba:	bf06      	itte	eq
90011fbc:	4602      	moveq	r2, r0
90011fbe:	4629      	moveq	r1, r5
90011fc0:	462a      	movne	r2, r5
90011fc2:	4620      	mov	r0, r4
90011fc4:	f7ff ffd6 	bl	90011f74 <_ZN8touchgfx8Drawable14setWidthHeightEss>
90011fc8:	bd38      	pop	{r3, r4, r5, pc}
90011fca:	bf00      	nop
90011fcc:	24026360 	.word	0x24026360

90011fd0 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
90011fd0:	b530      	push	{r4, r5, lr}
90011fd2:	888b      	ldrh	r3, [r1, #4]
90011fd4:	b085      	sub	sp, #20
90011fd6:	4604      	mov	r4, r0
90011fd8:	8583      	strh	r3, [r0, #44]	@ 0x2c
90011fda:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
90011fde:	b923      	cbnz	r3, 90011fea <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
90011fe0:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
90011fe4:	b90b      	cbnz	r3, 90011fea <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
90011fe6:	f7ff ffd3 	bl	90011f90 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
90011fea:	6823      	ldr	r3, [r4, #0]
90011fec:	466d      	mov	r5, sp
90011fee:	4621      	mov	r1, r4
90011ff0:	343c      	adds	r4, #60	@ 0x3c
90011ff2:	4628      	mov	r0, r5
90011ff4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
90011ff8:	4798      	blx	r3
90011ffa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
90011ffe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
90012002:	b005      	add	sp, #20
90012004:	bd30      	pop	{r4, r5, pc}

90012006 <_ZNK8touchgfx3Box12getSolidRectEv>:
90012006:	2300      	movs	r3, #0
90012008:	8083      	strh	r3, [r0, #4]
9001200a:	80c3      	strh	r3, [r0, #6]
9001200c:	8003      	strh	r3, [r0, #0]
9001200e:	8043      	strh	r3, [r0, #2]
90012010:	f891 3026 	ldrb.w	r3, [r1, #38]	@ 0x26
90012014:	2bff      	cmp	r3, #255	@ 0xff
90012016:	bf01      	itttt	eq
90012018:	890b      	ldrheq	r3, [r1, #8]
9001201a:	8083      	strheq	r3, [r0, #4]
9001201c:	894b      	ldrheq	r3, [r1, #10]
9001201e:	80c3      	strheq	r3, [r0, #6]
90012020:	4770      	bx	lr
	...

90012024 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
90012024:	b537      	push	{r0, r1, r2, r4, r5, lr}
90012026:	4604      	mov	r4, r0
90012028:	466b      	mov	r3, sp
9001202a:	6808      	ldr	r0, [r1, #0]
9001202c:	6849      	ldr	r1, [r1, #4]
9001202e:	c303      	stmia	r3!, {r0, r1}
90012030:	6823      	ldr	r3, [r4, #0]
90012032:	4669      	mov	r1, sp
90012034:	4620      	mov	r0, r4
90012036:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90012038:	4798      	blx	r3
9001203a:	4b08      	ldr	r3, [pc, #32]	@ (9001205c <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
9001203c:	681b      	ldr	r3, [r3, #0]
9001203e:	f893 2076 	ldrb.w	r2, [r3, #118]	@ 0x76
90012042:	b10a      	cbz	r2, 90012048 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
90012044:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
90012046:	b900      	cbnz	r0, 9001204a <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
90012048:	6898      	ldr	r0, [r3, #8]
9001204a:	6803      	ldr	r3, [r0, #0]
9001204c:	4669      	mov	r1, sp
9001204e:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
90012050:	6a1d      	ldr	r5, [r3, #32]
90012052:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
90012056:	47a8      	blx	r5
90012058:	b003      	add	sp, #12
9001205a:	bd30      	pop	{r4, r5, pc}
9001205c:	2402630c 	.word	0x2402630c

90012060 <_ZN8touchgfx3BoxD1Ev>:
90012060:	4770      	bx	lr

90012062 <_ZN8touchgfx3BoxD0Ev>:
90012062:	b510      	push	{r4, lr}
90012064:	4604      	mov	r4, r0
90012066:	212c      	movs	r1, #44	@ 0x2c
90012068:	f010 fda5 	bl	90022bb6 <_ZdlPvj>
9001206c:	4620      	mov	r0, r4
9001206e:	bd10      	pop	{r4, pc}

90012070 <_ZNK8touchgfx3Box17invalidateContentEv>:
90012070:	f890 2026 	ldrb.w	r2, [r0, #38]	@ 0x26
90012074:	b12a      	cbz	r2, 90012082 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
90012076:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
9001207a:	b112      	cbz	r2, 90012082 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
9001207c:	6803      	ldr	r3, [r0, #0]
9001207e:	695b      	ldr	r3, [r3, #20]
90012080:	4718      	bx	r3
90012082:	4770      	bx	lr

90012084 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE>:
90012084:	4b30      	ldr	r3, [pc, #192]	@ (90012148 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc4>)
90012086:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
9001208a:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
9001208c:	b08d      	sub	sp, #52	@ 0x34
9001208e:	881b      	ldrh	r3, [r3, #0]
90012090:	4604      	mov	r4, r0
90012092:	460f      	mov	r7, r1
90012094:	4293      	cmp	r3, r2
90012096:	d954      	bls.n	90012142 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
90012098:	4b2c      	ldr	r3, [pc, #176]	@ (9001214c <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc8>)
9001209a:	6819      	ldr	r1, [r3, #0]
9001209c:	eb01 0342 	add.w	r3, r1, r2, lsl #1
900120a0:	f811 1012 	ldrb.w	r1, [r1, r2, lsl #1]
900120a4:	4a2a      	ldr	r2, [pc, #168]	@ (90012150 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xcc>)
900120a6:	6812      	ldr	r2, [r2, #0]
900120a8:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
900120ac:	2900      	cmp	r1, #0
900120ae:	d048      	beq.n	90012142 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
900120b0:	785a      	ldrb	r2, [r3, #1]
900120b2:	f894 3039 	ldrb.w	r3, [r4, #57]	@ 0x39
900120b6:	f3c2 0801 	ubfx	r8, r2, #0, #2
900120ba:	f3c2 0281 	ubfx	r2, r2, #2, #2
900120be:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
900120c2:	4b24      	ldr	r3, [pc, #144]	@ (90012154 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd0>)
900120c4:	f88d 2021 	strb.w	r2, [sp, #33]	@ 0x21
900120c8:	681a      	ldr	r2, [r3, #0]
900120ca:	f890 5036 	ldrb.w	r5, [r0, #54]	@ 0x36
900120ce:	f9b0 c034 	ldrsh.w	ip, [r0, #52]	@ 0x34
900120d2:	f890 e038 	ldrb.w	lr, [r0, #56]	@ 0x38
900120d6:	6b26      	ldr	r6, [r4, #48]	@ 0x30
900120d8:	f890 0037 	ldrb.w	r0, [r0, #55]	@ 0x37
900120dc:	f892 3076 	ldrb.w	r3, [r2, #118]	@ 0x76
900120e0:	9107      	str	r1, [sp, #28]
900120e2:	f88d 8020 	strb.w	r8, [sp, #32]
900120e6:	f88d e022 	strb.w	lr, [sp, #34]	@ 0x22
900120ea:	9609      	str	r6, [sp, #36]	@ 0x24
900120ec:	f8ad c028 	strh.w	ip, [sp, #40]	@ 0x28
900120f0:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
900120f4:	f88d 002b 	strb.w	r0, [sp, #43]	@ 0x2b
900120f8:	b10b      	cbz	r3, 900120fe <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7a>
900120fa:	6cd5      	ldr	r5, [r2, #76]	@ 0x4c
900120fc:	b905      	cbnz	r5, 90012100 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7c>
900120fe:	6895      	ldr	r5, [r2, #8]
90012100:	ae05      	add	r6, sp, #20
90012102:	4621      	mov	r1, r4
90012104:	4630      	mov	r0, r6
90012106:	f002 fe49 	bl	90014d9c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
9001210a:	4b13      	ldr	r3, [pc, #76]	@ (90012158 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd4>)
9001210c:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
9001210e:	6818      	ldr	r0, [r3, #0]
90012110:	f7f3 fde0 	bl	90005cd4 <_ZNK8touchgfx5Texts7getTextEt>
90012114:	6823      	ldr	r3, [r4, #0]
90012116:	4680      	mov	r8, r0
90012118:	4620      	mov	r0, r4
9001211a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
9001211c:	4798      	blx	r3
9001211e:	6823      	ldr	r3, [r4, #0]
90012120:	4681      	mov	r9, r0
90012122:	4620      	mov	r0, r4
90012124:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
90012128:	4798      	blx	r3
9001212a:	ab07      	add	r3, sp, #28
9001212c:	f8cd 8004 	str.w	r8, [sp, #4]
90012130:	9300      	str	r3, [sp, #0]
90012132:	463b      	mov	r3, r7
90012134:	e9cd 9002 	strd	r9, r0, [sp, #8]
90012138:	4628      	mov	r0, r5
9001213a:	e896 0006 	ldmia.w	r6, {r1, r2}
9001213e:	f7f3 fd79 	bl	90005c34 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
90012142:	b00d      	add	sp, #52	@ 0x34
90012144:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
90012148:	24026360 	.word	0x24026360
9001214c:	2402635c 	.word	0x2402635c
90012150:	24026364 	.word	0x24026364
90012154:	2402630c 	.word	0x2402630c
90012158:	24026368 	.word	0x24026368

9001215c <_ZN8touchgfx5ImageD1Ev>:
9001215c:	4770      	bx	lr

9001215e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
9001215e:	b570      	push	{r4, r5, r6, lr}
90012160:	880b      	ldrh	r3, [r1, #0]
90012162:	460d      	mov	r5, r1
90012164:	4604      	mov	r4, r0
90012166:	84c3      	strh	r3, [r0, #38]	@ 0x26
90012168:	4608      	mov	r0, r1
9001216a:	f004 ff43 	bl	90016ff4 <_ZNK8touchgfx6Bitmap8getWidthEv>
9001216e:	4606      	mov	r6, r0
90012170:	4628      	mov	r0, r5
90012172:	f004 ff73 	bl	9001705c <_ZNK8touchgfx6Bitmap9getHeightEv>
90012176:	6823      	ldr	r3, [r4, #0]
90012178:	4605      	mov	r5, r0
9001217a:	4631      	mov	r1, r6
9001217c:	4620      	mov	r0, r4
9001217e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
90012180:	4798      	blx	r3
90012182:	6823      	ldr	r3, [r4, #0]
90012184:	4629      	mov	r1, r5
90012186:	4620      	mov	r0, r4
90012188:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
9001218a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
9001218e:	4718      	bx	r3

90012190 <_ZN8touchgfx5ImageD0Ev>:
90012190:	b510      	push	{r4, lr}
90012192:	4604      	mov	r4, r0
90012194:	212c      	movs	r1, #44	@ 0x2c
90012196:	f010 fd0e 	bl	90022bb6 <_ZdlPvj>
9001219a:	4620      	mov	r0, r4
9001219c:	bd10      	pop	{r4, pc}

9001219e <_ZNK8touchgfx5Image12getSolidRectEv>:
9001219e:	b510      	push	{r4, lr}
900121a0:	f891 3028 	ldrb.w	r3, [r1, #40]	@ 0x28
900121a4:	4604      	mov	r4, r0
900121a6:	2bff      	cmp	r3, #255	@ 0xff
900121a8:	d006      	beq.n	900121b8 <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
900121aa:	2300      	movs	r3, #0
900121ac:	8003      	strh	r3, [r0, #0]
900121ae:	8043      	strh	r3, [r0, #2]
900121b0:	8083      	strh	r3, [r0, #4]
900121b2:	80c3      	strh	r3, [r0, #6]
900121b4:	4620      	mov	r0, r4
900121b6:	bd10      	pop	{r4, pc}
900121b8:	3126      	adds	r1, #38	@ 0x26
900121ba:	f004 ff83 	bl	900170c4 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
900121be:	e7f9      	b.n	900121b4 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

900121c0 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
900121c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
900121c4:	4604      	mov	r4, r0
900121c6:	b088      	sub	sp, #32
900121c8:	2500      	movs	r5, #0
900121ca:	460f      	mov	r7, r1
900121cc:	f854 3b26 	ldr.w	r3, [r4], #38
900121d0:	a904      	add	r1, sp, #16
900121d2:	4606      	mov	r6, r0
900121d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900121d6:	e9cd 5504 	strd	r5, r5, [sp, #16]
900121da:	4798      	blx	r3
900121dc:	4620      	mov	r0, r4
900121de:	f004 ff09 	bl	90016ff4 <_ZNK8touchgfx6Bitmap8getWidthEv>
900121e2:	4680      	mov	r8, r0
900121e4:	4620      	mov	r0, r4
900121e6:	f004 ff39 	bl	9001705c <_ZNK8touchgfx6Bitmap9getHeightEv>
900121ea:	9506      	str	r5, [sp, #24]
900121ec:	ad06      	add	r5, sp, #24
900121ee:	f8ad 001e 	strh.w	r0, [sp, #30]
900121f2:	4639      	mov	r1, r7
900121f4:	f8ad 801c 	strh.w	r8, [sp, #28]
900121f8:	4628      	mov	r0, r5
900121fa:	f7fe f921 	bl	90010440 <_ZN8touchgfx4RectaNERKS0_>
900121fe:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
90012202:	2b00      	cmp	r3, #0
90012204:	dd19      	ble.n	9001223a <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
90012206:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
9001220a:	2b00      	cmp	r3, #0
9001220c:	dd15      	ble.n	9001223a <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
9001220e:	4b0c      	ldr	r3, [pc, #48]	@ (90012240 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
90012210:	681b      	ldr	r3, [r3, #0]
90012212:	f893 2076 	ldrb.w	r2, [r3, #118]	@ 0x76
90012216:	b10a      	cbz	r2, 9001221c <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
90012218:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
9001221a:	b900      	cbnz	r0, 9001221e <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
9001221c:	6898      	ldr	r0, [r3, #8]
9001221e:	2701      	movs	r7, #1
90012220:	6801      	ldr	r1, [r0, #0]
90012222:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
90012226:	9702      	str	r7, [sp, #8]
90012228:	f896 6028 	ldrb.w	r6, [r6, #40]	@ 0x28
9001222c:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
90012230:	e9cd 5600 	strd	r5, r6, [sp]
90012234:	688d      	ldr	r5, [r1, #8]
90012236:	4621      	mov	r1, r4
90012238:	47a8      	blx	r5
9001223a:	b008      	add	sp, #32
9001223c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90012240:	2402630c 	.word	0x2402630c

90012244 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
90012244:	b510      	push	{r4, lr}
90012246:	6803      	ldr	r3, [r0, #0]
90012248:	460c      	mov	r4, r1
9001224a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9001224c:	4798      	blx	r3
9001224e:	1b03      	subs	r3, r0, r4
90012250:	4258      	negs	r0, r3
90012252:	4158      	adcs	r0, r3
90012254:	bd10      	pop	{r4, pc}
	...

90012258 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
90012258:	4b01      	ldr	r3, [pc, #4]	@ (90012260 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
9001225a:	6019      	str	r1, [r3, #0]
9001225c:	4770      	bx	lr
9001225e:	bf00      	nop
90012260:	24026314 	.word	0x24026314

90012264 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
90012264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90012268:	4696      	mov	lr, r2
9001226a:	b097      	sub	sp, #92	@ 0x5c
9001226c:	4605      	mov	r5, r0
9001226e:	4614      	mov	r4, r2
90012270:	460e      	mov	r6, r1
90012272:	461f      	mov	r7, r3
90012274:	f10d 0c1c 	add.w	ip, sp, #28
90012278:	f8bd 8088 	ldrh.w	r8, [sp, #136]	@ 0x88
9001227c:	f89d 908c 	ldrb.w	r9, [sp, #140]	@ 0x8c
90012280:	f8bd a090 	ldrh.w	sl, [sp, #144]	@ 0x90
90012284:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
90012288:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
9001228c:	f8de 3000 	ldr.w	r3, [lr]
90012290:	f104 0e14 	add.w	lr, r4, #20
90012294:	f8cc 3000 	str.w	r3, [ip]
90012298:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
9001229c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
900122a0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
900122a4:	f8de 3000 	ldr.w	r3, [lr]
900122a8:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
900122ac:	f8cc 3000 	str.w	r3, [ip]
900122b0:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
900122b4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
900122b8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
900122bc:	f8de 3000 	ldr.w	r3, [lr]
900122c0:	4631      	mov	r1, r6
900122c2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
900122c4:	4628      	mov	r0, r5
900122c6:	f8cc 3000 	str.w	r3, [ip]
900122ca:	682b      	ldr	r3, [r5, #0]
900122cc:	9201      	str	r2, [sp, #4]
900122ce:	9a20      	ldr	r2, [sp, #128]	@ 0x80
900122d0:	f8cd 8008 	str.w	r8, [sp, #8]
900122d4:	9200      	str	r2, [sp, #0]
900122d6:	aa07      	add	r2, sp, #28
900122d8:	e9cd 9a03 	strd	r9, sl, [sp, #12]
900122dc:	f8d3 b03c 	ldr.w	fp, [r3, #60]	@ 0x3c
900122e0:	463b      	mov	r3, r7
900122e2:	47d8      	blx	fp
900122e4:	46a6      	mov	lr, r4
900122e6:	f10d 0c1c 	add.w	ip, sp, #28
900122ea:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
900122ee:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
900122f2:	f8de 3000 	ldr.w	r3, [lr]
900122f6:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
900122fa:	343c      	adds	r4, #60	@ 0x3c
900122fc:	f8cc 3000 	str.w	r3, [ip]
90012300:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
90012304:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
90012308:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
9001230c:	f8de 3000 	ldr.w	r3, [lr]
90012310:	f8cc 3000 	str.w	r3, [ip]
90012314:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
90012318:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
9001231a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
9001231e:	6823      	ldr	r3, [r4, #0]
90012320:	4631      	mov	r1, r6
90012322:	4628      	mov	r0, r5
90012324:	f8cc 3000 	str.w	r3, [ip]
90012328:	682b      	ldr	r3, [r5, #0]
9001232a:	e9cd 9a03 	strd	r9, sl, [sp, #12]
9001232e:	9a21      	ldr	r2, [sp, #132]	@ 0x84
90012330:	f8cd 8008 	str.w	r8, [sp, #8]
90012334:	9201      	str	r2, [sp, #4]
90012336:	9a20      	ldr	r2, [sp, #128]	@ 0x80
90012338:	9200      	str	r2, [sp, #0]
9001233a:	aa07      	add	r2, sp, #28
9001233c:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
9001233e:	463b      	mov	r3, r7
90012340:	47a0      	blx	r4
90012342:	b017      	add	sp, #92	@ 0x5c
90012344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

90012348 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
90012348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001234c:	b08d      	sub	sp, #52	@ 0x34
9001234e:	4688      	mov	r8, r1
90012350:	f8d3 c000 	ldr.w	ip, [r3]
90012354:	9916      	ldr	r1, [sp, #88]	@ 0x58
90012356:	f8bd 4070 	ldrh.w	r4, [sp, #112]	@ 0x70
9001235a:	680f      	ldr	r7, [r1, #0]
9001235c:	ed92 4a09 	vldr	s8, [r2, #36]	@ 0x24
90012360:	eba7 070c 	sub.w	r7, r7, ip
90012364:	edd2 4a0b 	vldr	s9, [r2, #44]	@ 0x2c
90012368:	edd3 6a07 	vldr	s13, [r3, #28]
9001236c:	42bc      	cmp	r4, r7
9001236e:	9918      	ldr	r1, [sp, #96]	@ 0x60
90012370:	f8dd a064 	ldr.w	sl, [sp, #100]	@ 0x64
90012374:	bfa8      	it	ge
90012376:	463c      	movge	r4, r7
90012378:	f9b1 9000 	ldrsh.w	r9, [r1]
9001237c:	f9ba 1000 	ldrsh.w	r1, [sl]
90012380:	ee07 4a90 	vmov	s15, r4
90012384:	eb09 0e0c 	add.w	lr, r9, ip
90012388:	edd3 1a0a 	vldr	s3, [r3, #40]	@ 0x28
9001238c:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
90012390:	edd2 7a0d 	vldr	s15, [r2, #52]	@ 0x34
90012394:	ed93 2a0d 	vldr	s4, [r3, #52]	@ 0x34
90012398:	4571      	cmp	r1, lr
9001239a:	ee25 4a04 	vmul.f32	s8, s10, s8
9001239e:	ee65 4a24 	vmul.f32	s9, s10, s9
900123a2:	ee25 5a27 	vmul.f32	s10, s10, s15
900123a6:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
900123aa:	ee71 0aa4 	vadd.f32	s1, s3, s9
900123ae:	ee32 1a05 	vadd.f32	s2, s4, s10
900123b2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
900123b6:	ee36 0a84 	vadd.f32	s0, s13, s8
900123ba:	ee61 1a87 	vmul.f32	s3, s3, s14
900123be:	ee22 2a07 	vmul.f32	s4, s4, s14
900123c2:	f340 808c 	ble.w	900124de <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
900123c6:	eba1 060e 	sub.w	r6, r1, lr
900123ca:	fb96 f5f4 	sdiv	r5, r6, r4
900123ce:	ee07 5a10 	vmov	s14, r5
900123d2:	2d00      	cmp	r5, #0
900123d4:	fb04 6615 	mls	r6, r4, r5, r6
900123d8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
900123dc:	eea7 0a04 	vfma.f32	s0, s14, s8
900123e0:	eee7 0a24 	vfma.f32	s1, s14, s9
900123e4:	eea7 1a05 	vfma.f32	s2, s14, s10
900123e8:	dd12      	ble.n	90012410 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
900123ea:	ee70 6a44 	vsub.f32	s13, s0, s8
900123ee:	ee70 1ae4 	vsub.f32	s3, s1, s9
900123f2:	ee31 2a45 	vsub.f32	s4, s2, s10
900123f6:	eef5 6a40 	vcmp.f32	s13, #0.0
900123fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
900123fe:	bf14      	ite	ne
90012400:	ee87 7aa6 	vdivne.f32	s14, s15, s13
90012404:	eeb0 7a67 	vmoveq.f32	s14, s15
90012408:	ee61 1a87 	vmul.f32	s3, s3, s14
9001240c:	ee22 2a07 	vmul.f32	s4, s4, s14
90012410:	fb05 f204 	mul.w	r2, r5, r4
90012414:	1abf      	subs	r7, r7, r2
90012416:	4494      	add	ip, r2
90012418:	f8ba 2004 	ldrh.w	r2, [sl, #4]
9001241c:	4411      	add	r1, r2
9001241e:	eb09 020c 	add.w	r2, r9, ip
90012422:	b209      	sxth	r1, r1
90012424:	443a      	add	r2, r7
90012426:	428a      	cmp	r2, r1
90012428:	bfc4      	itt	gt
9001242a:	eba1 0209 	subgt.w	r2, r1, r9
9001242e:	eba2 070c 	subgt.w	r7, r2, ip
90012432:	2f00      	cmp	r7, #0
90012434:	dd50      	ble.n	900124d8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
90012436:	fb97 f1f4 	sdiv	r1, r7, r4
9001243a:	fb04 7211 	mls	r2, r4, r1, r7
9001243e:	b90a      	cbnz	r2, 90012444 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
90012440:	3901      	subs	r1, #1
90012442:	4622      	mov	r2, r4
90012444:	eec7 3a80 	vdiv.f32	s7, s15, s0
90012448:	6840      	ldr	r0, [r0, #4]
9001244a:	f89d b06c 	ldrb.w	fp, [sp, #108]	@ 0x6c
9001244e:	44b6      	add	lr, r6
90012450:	f8d0 a000 	ldr.w	sl, [r0]
90012454:	2900      	cmp	r1, #0
90012456:	bfcc      	ite	gt
90012458:	46a1      	movgt	r9, r4
9001245a:	4691      	movle	r9, r2
9001245c:	900b      	str	r0, [sp, #44]	@ 0x2c
9001245e:	9817      	ldr	r0, [sp, #92]	@ 0x5c
90012460:	fb04 e505 	mla	r5, r4, r5, lr
90012464:	eef0 6a42 	vmov.f32	s13, s4
90012468:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
9001246c:	9008      	str	r0, [sp, #32]
9001246e:	eeb0 7a61 	vmov.f32	s14, s3
90012472:	9818      	ldr	r0, [sp, #96]	@ 0x60
90012474:	695b      	ldr	r3, [r3, #20]
90012476:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001247a:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
9001247e:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
90012482:	980b      	ldr	r0, [sp, #44]	@ 0x2c
90012484:	445b      	add	r3, fp
90012486:	9307      	str	r3, [sp, #28]
90012488:	ee16 3a90 	vmov	r3, s13
9001248c:	e9cd 8505 	strd	r8, r5, [sp, #20]
90012490:	ee60 2aa3 	vmul.f32	s5, s1, s7
90012494:	ee21 3a23 	vmul.f32	s6, s2, s7
90012498:	ee72 7ae1 	vsub.f32	s15, s5, s3
9001249c:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
900124a0:	ee17 7a90 	vmov	r7, s15
900124a4:	ee73 7a42 	vsub.f32	s15, s6, s4
900124a8:	fb97 f7f4 	sdiv	r7, r7, r4
900124ac:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
900124b0:	ee17 ca90 	vmov	ip, s15
900124b4:	fb9c fcf4 	sdiv	ip, ip, r4
900124b8:	fb0c 3306 	mla	r3, ip, r6, r3
900124bc:	9302      	str	r3, [sp, #8]
900124be:	ee17 3a10 	vmov	r3, s14
900124c2:	e9cd 7c03 	strd	r7, ip, [sp, #12]
900124c6:	fb07 3706 	mla	r7, r7, r6, r3
900124ca:	eba9 0306 	sub.w	r3, r9, r6
900124ce:	e9cd 4700 	strd	r4, r7, [sp]
900124d2:	f8da 4008 	ldr.w	r4, [sl, #8]
900124d6:	47a0      	blx	r4
900124d8:	b00d      	add	sp, #52	@ 0x34
900124da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
900124de:	2500      	movs	r5, #0
900124e0:	462e      	mov	r6, r5
900124e2:	e799      	b.n	90012418 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

900124e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
900124e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900124e8:	b0db      	sub	sp, #364	@ 0x16c
900124ea:	461d      	mov	r5, r3
900124ec:	4614      	mov	r4, r2
900124ee:	f8bd 3198 	ldrh.w	r3, [sp, #408]	@ 0x198
900124f2:	910f      	str	r1, [sp, #60]	@ 0x3c
900124f4:	4629      	mov	r1, r5
900124f6:	930a      	str	r3, [sp, #40]	@ 0x28
900124f8:	f89d 319c 	ldrb.w	r3, [sp, #412]	@ 0x19c
900124fc:	9009      	str	r0, [sp, #36]	@ 0x24
900124fe:	930b      	str	r3, [sp, #44]	@ 0x2c
90012500:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	@ 0x1a0
90012504:	f8dd b194 	ldr.w	fp, [sp, #404]	@ 0x194
90012508:	9310      	str	r3, [sp, #64]	@ 0x40
9001250a:	6803      	ldr	r3, [r0, #0]
9001250c:	6c5f      	ldr	r7, [r3, #68]	@ 0x44
9001250e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
90012512:	47b8      	blx	r7
90012514:	9b09      	ldr	r3, [sp, #36]	@ 0x24
90012516:	6058      	str	r0, [r3, #4]
90012518:	2800      	cmp	r0, #0
9001251a:	f000 83a1 	beq.w	90012c60 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
9001251e:	682b      	ldr	r3, [r5, #0]
90012520:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
90012524:	ed94 7a02 	vldr	s14, [r4, #8]
90012528:	9314      	str	r3, [sp, #80]	@ 0x50
9001252a:	686b      	ldr	r3, [r5, #4]
9001252c:	eeb4 7ae7 	vcmpe.f32	s14, s15
90012530:	9315      	str	r3, [sp, #84]	@ 0x54
90012532:	4bc1      	ldr	r3, [pc, #772]	@ (90012838 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
90012534:	7819      	ldrb	r1, [r3, #0]
90012536:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
9001253a:	2900      	cmp	r1, #0
9001253c:	bf16      	itet	ne
9001253e:	4619      	movne	r1, r3
90012540:	4611      	moveq	r1, r2
90012542:	4613      	movne	r3, r2
90012544:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90012548:	9116      	str	r1, [sp, #88]	@ 0x58
9001254a:	e9cd 3217 	strd	r3, r2, [sp, #92]	@ 0x5c
9001254e:	f240 8387 	bls.w	90012c60 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
90012552:	ed94 7a07 	vldr	s14, [r4, #28]
90012556:	eeb4 7ae7 	vcmpe.f32	s14, s15
9001255a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
9001255e:	f240 837f 	bls.w	90012c60 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
90012562:	ed94 7a0c 	vldr	s14, [r4, #48]	@ 0x30
90012566:	eeb4 7ae7 	vcmpe.f32	s14, s15
9001256a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
9001256e:	f240 8377 	bls.w	90012c60 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
90012572:	6822      	ldr	r2, [r4, #0]
90012574:	4bb1      	ldr	r3, [pc, #708]	@ (9001283c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
90012576:	429a      	cmp	r2, r3
90012578:	f2c0 8372 	blt.w	90012c60 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
9001257c:	49b0      	ldr	r1, [pc, #704]	@ (90012840 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
9001257e:	6963      	ldr	r3, [r4, #20]
90012580:	428a      	cmp	r2, r1
90012582:	f300 836d 	bgt.w	90012c60 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
90012586:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
9001258a:	48ae      	ldr	r0, [pc, #696]	@ (90012844 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
9001258c:	33ff      	adds	r3, #255	@ 0xff
9001258e:	4283      	cmp	r3, r0
90012590:	f200 8366 	bhi.w	90012c60 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
90012594:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
90012596:	4dac      	ldr	r5, [pc, #688]	@ (90012848 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
90012598:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
9001259c:	33ff      	adds	r3, #255	@ 0xff
9001259e:	42ab      	cmp	r3, r5
900125a0:	f200 835e 	bhi.w	90012c60 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
900125a4:	6862      	ldr	r2, [r4, #4]
900125a6:	f502 331c 	add.w	r3, r2, #159744	@ 0x27000
900125aa:	33ff      	adds	r3, #255	@ 0xff
900125ac:	4283      	cmp	r3, r0
900125ae:	f200 8357 	bhi.w	90012c60 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
900125b2:	69a1      	ldr	r1, [r4, #24]
900125b4:	f501 331c 	add.w	r3, r1, #159744	@ 0x27000
900125b8:	33ff      	adds	r3, #255	@ 0xff
900125ba:	4283      	cmp	r3, r0
900125bc:	f200 8350 	bhi.w	90012c60 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
900125c0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
900125c2:	f503 301c 	add.w	r0, r3, #159744	@ 0x27000
900125c6:	30ff      	adds	r0, #255	@ 0xff
900125c8:	42a8      	cmp	r0, r5
900125ca:	f200 8349 	bhi.w	90012c60 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
900125ce:	428a      	cmp	r2, r1
900125d0:	f280 8110 	bge.w	900127f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
900125d4:	429a      	cmp	r2, r3
900125d6:	f300 8119 	bgt.w	9001280c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
900125da:	4299      	cmp	r1, r3
900125dc:	f280 811d 	bge.w	9001281a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
900125e0:	2502      	movs	r5, #2
900125e2:	2701      	movs	r7, #1
900125e4:	46a9      	mov	r9, r5
900125e6:	46b8      	mov	r8, r7
900125e8:	f04f 0a00 	mov.w	sl, #0
900125ec:	4621      	mov	r1, r4
900125ee:	a849      	add	r0, sp, #292	@ 0x124
900125f0:	f003 fd00 	bl	90015ff4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
900125f4:	4622      	mov	r2, r4
900125f6:	4653      	mov	r3, sl
900125f8:	a949      	add	r1, sp, #292	@ 0x124
900125fa:	f8cd 9000 	str.w	r9, [sp]
900125fe:	a819      	add	r0, sp, #100	@ 0x64
90012600:	f003 fe28 	bl	90016254 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
90012604:	4622      	mov	r2, r4
90012606:	4653      	mov	r3, sl
90012608:	a949      	add	r1, sp, #292	@ 0x124
9001260a:	f8cd 8000 	str.w	r8, [sp]
9001260e:	a829      	add	r0, sp, #164	@ 0xa4
90012610:	f003 fe20 	bl	90016254 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
90012614:	4643      	mov	r3, r8
90012616:	4622      	mov	r2, r4
90012618:	a949      	add	r1, sp, #292	@ 0x124
9001261a:	f8cd 9000 	str.w	r9, [sp]
9001261e:	a839      	add	r0, sp, #228	@ 0xe4
90012620:	f003 fe18 	bl	90016254 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
90012624:	42af      	cmp	r7, r5
90012626:	af12      	add	r7, sp, #72	@ 0x48
90012628:	bfb7      	itett	lt
9001262a:	2300      	movlt	r3, #0
9001262c:	2301      	movge	r3, #1
9001262e:	ad29      	addlt	r5, sp, #164	@ 0xa4
90012630:	ac19      	addlt	r4, sp, #100	@ 0x64
90012632:	bfb1      	iteee	lt
90012634:	930e      	strlt	r3, [sp, #56]	@ 0x38
90012636:	ad19      	addge	r5, sp, #100	@ 0x64
90012638:	930e      	strge	r3, [sp, #56]	@ 0x38
9001263a:	ac29      	addge	r4, sp, #164	@ 0xa4
9001263c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
9001263e:	e893 0003 	ldmia.w	r3, {r0, r1}
90012642:	e887 0003 	stmia.w	r7, {r0, r1}
90012646:	b928      	cbnz	r0, 90012654 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
90012648:	4b80      	ldr	r3, [pc, #512]	@ (9001284c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
9001264a:	6818      	ldr	r0, [r3, #0]
9001264c:	6803      	ldr	r3, [r0, #0]
9001264e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90012650:	4798      	blx	r3
90012652:	6038      	str	r0, [r7, #0]
90012654:	9b64      	ldr	r3, [sp, #400]	@ 0x190
90012656:	f8bb 0006 	ldrh.w	r0, [fp, #6]
9001265a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
9001265e:	9a2f      	ldr	r2, [sp, #188]	@ 0xbc
90012660:	930c      	str	r3, [sp, #48]	@ 0x30
90012662:	990c      	ldr	r1, [sp, #48]	@ 0x30
90012664:	6963      	ldr	r3, [r4, #20]
90012666:	440b      	add	r3, r1
90012668:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
9001266c:	4408      	add	r0, r1
9001266e:	b200      	sxth	r0, r0
90012670:	4283      	cmp	r3, r0
90012672:	900d      	str	r0, [sp, #52]	@ 0x34
90012674:	f280 80dd 	bge.w	90012832 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
90012678:	428b      	cmp	r3, r1
9001267a:	da08      	bge.n	9001268e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
9001267c:	2a00      	cmp	r2, #0
9001267e:	dd06      	ble.n	9001268e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
90012680:	1acb      	subs	r3, r1, r3
90012682:	429a      	cmp	r2, r3
90012684:	f2c0 80e4 	blt.w	90012850 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
90012688:	2b00      	cmp	r3, #0
9001268a:	f300 80e2 	bgt.w	90012852 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
9001268e:	6967      	ldr	r7, [r4, #20]
90012690:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
90012694:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
90012696:	443b      	add	r3, r7
90012698:	461f      	mov	r7, r3
9001269a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
9001269c:	1bdf      	subs	r7, r3, r7
9001269e:	4297      	cmp	r7, r2
900126a0:	bfa8      	it	ge
900126a2:	4617      	movge	r7, r2
900126a4:	2f00      	cmp	r7, #0
900126a6:	f340 8166 	ble.w	90012976 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
900126aa:	9b64      	ldr	r3, [sp, #400]	@ 0x190
900126ac:	6829      	ldr	r1, [r5, #0]
900126ae:	f9b3 2000 	ldrsh.w	r2, [r3]
900126b2:	f9bb 3000 	ldrsh.w	r3, [fp]
900126b6:	4411      	add	r1, r2
900126b8:	6820      	ldr	r0, [r4, #0]
900126ba:	4299      	cmp	r1, r3
900126bc:	dd1a      	ble.n	900126f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
900126be:	f8bb 1004 	ldrh.w	r1, [fp, #4]
900126c2:	4402      	add	r2, r0
900126c4:	440b      	add	r3, r1
900126c6:	b21b      	sxth	r3, r3
900126c8:	429a      	cmp	r2, r3
900126ca:	dc13      	bgt.n	900126f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
900126cc:	9a10      	ldr	r2, [sp, #64]	@ 0x40
900126ce:	a912      	add	r1, sp, #72	@ 0x48
900126d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
900126d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
900126d4:	681b      	ldr	r3, [r3, #0]
900126d6:	9206      	str	r2, [sp, #24]
900126d8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
900126da:	9500      	str	r5, [sp, #0]
900126dc:	9205      	str	r2, [sp, #20]
900126de:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
900126e0:	e9cd b203 	strd	fp, r2, [sp, #12]
900126e4:	9a64      	ldr	r2, [sp, #400]	@ 0x190
900126e6:	e9cd 8201 	strd	r8, r2, [sp, #4]
900126ea:	aa49      	add	r2, sp, #292	@ 0x124
900126ec:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
900126f0:	4623      	mov	r3, r4
900126f2:	47c8      	blx	r9
900126f4:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
900126f8:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
900126fc:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
90012700:	ee37 7a27 	vadd.f32	s14, s14, s15
90012704:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
90012708:	68a1      	ldr	r1, [r4, #8]
9001270a:	ee77 7aa6 	vadd.f32	s15, s15, s13
9001270e:	ed94 6a08 	vldr	s12, [r4, #32]
90012712:	edd4 6a07 	vldr	s13, [r4, #28]
90012716:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
9001271a:	ee76 6a86 	vadd.f32	s13, s13, s12
9001271e:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
90012722:	e9d4 2300 	ldrd	r2, r3, [r4]
90012726:	edc4 6a07 	vstr	s13, [r4, #28]
9001272a:	441a      	add	r2, r3
9001272c:	6963      	ldr	r3, [r4, #20]
9001272e:	3301      	adds	r3, #1
90012730:	6022      	str	r2, [r4, #0]
90012732:	6163      	str	r3, [r4, #20]
90012734:	69a3      	ldr	r3, [r4, #24]
90012736:	3b01      	subs	r3, #1
90012738:	61a3      	str	r3, [r4, #24]
9001273a:	6923      	ldr	r3, [r4, #16]
9001273c:	440b      	add	r3, r1
9001273e:	68e1      	ldr	r1, [r4, #12]
90012740:	428b      	cmp	r3, r1
90012742:	6123      	str	r3, [r4, #16]
90012744:	db15      	blt.n	90012772 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
90012746:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
9001274a:	3201      	adds	r2, #1
9001274c:	1a5b      	subs	r3, r3, r1
9001274e:	ee76 6a26 	vadd.f32	s13, s12, s13
90012752:	6022      	str	r2, [r4, #0]
90012754:	6123      	str	r3, [r4, #16]
90012756:	edc4 6a07 	vstr	s13, [r4, #28]
9001275a:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
9001275e:	ee36 7a87 	vadd.f32	s14, s13, s14
90012762:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
90012766:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
9001276a:	ee77 7a27 	vadd.f32	s15, s14, s15
9001276e:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
90012772:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
90012776:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
9001277a:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
9001277e:	ee37 7a27 	vadd.f32	s14, s14, s15
90012782:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
90012786:	68a9      	ldr	r1, [r5, #8]
90012788:	ee77 7aa6 	vadd.f32	s15, s15, s13
9001278c:	ed95 6a08 	vldr	s12, [r5, #32]
90012790:	edd5 6a07 	vldr	s13, [r5, #28]
90012794:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
90012798:	ee76 6a86 	vadd.f32	s13, s13, s12
9001279c:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
900127a0:	e9d5 2300 	ldrd	r2, r3, [r5]
900127a4:	edc5 6a07 	vstr	s13, [r5, #28]
900127a8:	441a      	add	r2, r3
900127aa:	696b      	ldr	r3, [r5, #20]
900127ac:	3301      	adds	r3, #1
900127ae:	602a      	str	r2, [r5, #0]
900127b0:	616b      	str	r3, [r5, #20]
900127b2:	69ab      	ldr	r3, [r5, #24]
900127b4:	3b01      	subs	r3, #1
900127b6:	61ab      	str	r3, [r5, #24]
900127b8:	692b      	ldr	r3, [r5, #16]
900127ba:	440b      	add	r3, r1
900127bc:	68e9      	ldr	r1, [r5, #12]
900127be:	428b      	cmp	r3, r1
900127c0:	612b      	str	r3, [r5, #16]
900127c2:	db15      	blt.n	900127f0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
900127c4:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
900127c8:	3201      	adds	r2, #1
900127ca:	1a5b      	subs	r3, r3, r1
900127cc:	ee76 6a26 	vadd.f32	s13, s12, s13
900127d0:	602a      	str	r2, [r5, #0]
900127d2:	612b      	str	r3, [r5, #16]
900127d4:	edc5 6a07 	vstr	s13, [r5, #28]
900127d8:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
900127dc:	ee36 7a87 	vadd.f32	s14, s13, s14
900127e0:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
900127e4:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
900127e8:	ee77 7a27 	vadd.f32	s15, s14, s15
900127ec:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
900127f0:	3f01      	subs	r7, #1
900127f2:	e757      	b.n	900126a4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
900127f4:	4299      	cmp	r1, r3
900127f6:	dc13      	bgt.n	90012820 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
900127f8:	429a      	cmp	r2, r3
900127fa:	da14      	bge.n	90012826 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
900127fc:	2502      	movs	r5, #2
900127fe:	2703      	movs	r7, #3
90012800:	f04f 0800 	mov.w	r8, #0
90012804:	46a9      	mov	r9, r5
90012806:	f04f 0a01 	mov.w	sl, #1
9001280a:	e6ef      	b.n	900125ec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
9001280c:	2501      	movs	r5, #1
9001280e:	2700      	movs	r7, #0
90012810:	46a9      	mov	r9, r5
90012812:	46b8      	mov	r8, r7
90012814:	f04f 0a02 	mov.w	sl, #2
90012818:	e6e8      	b.n	900125ec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
9001281a:	2501      	movs	r5, #1
9001281c:	2702      	movs	r7, #2
9001281e:	e6e1      	b.n	900125e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
90012820:	2500      	movs	r5, #0
90012822:	2701      	movs	r7, #1
90012824:	e7f4      	b.n	90012810 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
90012826:	2702      	movs	r7, #2
90012828:	2503      	movs	r5, #3
9001282a:	f04f 0900 	mov.w	r9, #0
9001282e:	46b8      	mov	r8, r7
90012830:	e7e9      	b.n	90012806 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
90012832:	4613      	mov	r3, r2
90012834:	e728      	b.n	90012688 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
90012836:	bf00      	nop
90012838:	24026304 	.word	0x24026304
9001283c:	fffd8f01 	.word	0xfffd8f01
90012840:	00027100 	.word	0x00027100
90012844:	0004e1ff 	.word	0x0004e1ff
90012848:	0004e1fe 	.word	0x0004e1fe
9001284c:	2402630c 	.word	0x2402630c
90012850:	4613      	mov	r3, r2
90012852:	992b      	ldr	r1, [sp, #172]	@ 0xac
90012854:	469e      	mov	lr, r3
90012856:	9f2e      	ldr	r7, [sp, #184]	@ 0xb8
90012858:	469c      	mov	ip, r3
9001285a:	9111      	str	r1, [sp, #68]	@ 0x44
9001285c:	f04f 0900 	mov.w	r9, #0
90012860:	eddd 4a34 	vldr	s9, [sp, #208]	@ 0xd0
90012864:	ed9d 7a33 	vldr	s14, [sp, #204]	@ 0xcc
90012868:	ed9d 4a37 	vldr	s8, [sp, #220]	@ 0xdc
9001286c:	eddd 7a36 	vldr	s15, [sp, #216]	@ 0xd8
90012870:	eddd 3a31 	vldr	s7, [sp, #196]	@ 0xc4
90012874:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
90012878:	ed9d 5a32 	vldr	s10, [sp, #200]	@ 0xc8
9001287c:	eddd 5a35 	vldr	s11, [sp, #212]	@ 0xd4
90012880:	ed9d 6a38 	vldr	s12, [sp, #224]	@ 0xe0
90012884:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	@ 0xa4
90012888:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	@ 0xb0
9001288c:	f1bc 0f00 	cmp.w	ip, #0
90012890:	d147      	bne.n	90012922 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
90012892:	eb03 0c07 	add.w	ip, r3, r7
90012896:	1ad7      	subs	r7, r2, r3
90012898:	f1b9 0f00 	cmp.w	r9, #0
9001289c:	d009      	beq.n	900128b2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
9001289e:	9029      	str	r0, [sp, #164]	@ 0xa4
900128a0:	ed8d 7a33 	vstr	s14, [sp, #204]	@ 0xcc
900128a4:	edcd 7a36 	vstr	s15, [sp, #216]	@ 0xd8
900128a8:	edcd 6a30 	vstr	s13, [sp, #192]	@ 0xc0
900128ac:	912d      	str	r1, [sp, #180]	@ 0xb4
900128ae:	e9cd c72e 	strd	ip, r7, [sp, #184]	@ 0xb8
900128b2:	991b      	ldr	r1, [sp, #108]	@ 0x6c
900128b4:	f04f 0800 	mov.w	r8, #0
900128b8:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
900128bc:	9111      	str	r1, [sp, #68]	@ 0x44
900128be:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
900128c2:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
900128c6:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
900128ca:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
900128ce:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
900128d2:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
900128d6:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
900128da:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
900128de:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
900128e2:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
900128e6:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
900128ea:	f1be 0f00 	cmp.w	lr, #0
900128ee:	d031      	beq.n	90012954 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
900128f0:	9e11      	ldr	r6, [sp, #68]	@ 0x44
900128f2:	4450      	add	r0, sl
900128f4:	ee76 6aa4 	vadd.f32	s13, s13, s9
900128f8:	4431      	add	r1, r6
900128fa:	ee37 7a04 	vadd.f32	s14, s14, s8
900128fe:	ee77 7aa3 	vadd.f32	s15, s15, s7
90012902:	4549      	cmp	r1, r9
90012904:	db08      	blt.n	90012918 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
90012906:	ee77 7a85 	vadd.f32	s15, s15, s10
9001290a:	3001      	adds	r0, #1
9001290c:	ee76 6aa5 	vadd.f32	s13, s13, s11
90012910:	eba1 0109 	sub.w	r1, r1, r9
90012914:	ee37 7a06 	vadd.f32	s14, s14, s12
90012918:	f10e 3eff 	add.w	lr, lr, #4294967295
9001291c:	f04f 0801 	mov.w	r8, #1
90012920:	e7e3      	b.n	900128ea <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
90012922:	9e11      	ldr	r6, [sp, #68]	@ 0x44
90012924:	4450      	add	r0, sl
90012926:	ee37 7a24 	vadd.f32	s14, s14, s9
9001292a:	4431      	add	r1, r6
9001292c:	ee77 7a84 	vadd.f32	s15, s15, s8
90012930:	ee76 6aa3 	vadd.f32	s13, s13, s7
90012934:	4541      	cmp	r1, r8
90012936:	db08      	blt.n	9001294a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
90012938:	ee76 6a85 	vadd.f32	s13, s13, s10
9001293c:	3001      	adds	r0, #1
9001293e:	ee37 7a25 	vadd.f32	s14, s14, s11
90012942:	eba1 0108 	sub.w	r1, r1, r8
90012946:	ee77 7a86 	vadd.f32	s15, s15, s12
9001294a:	f10c 3cff 	add.w	ip, ip, #4294967295
9001294e:	f04f 0901 	mov.w	r9, #1
90012952:	e79b      	b.n	9001288c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
90012954:	449c      	add	ip, r3
90012956:	1aff      	subs	r7, r7, r3
90012958:	f1b8 0f00 	cmp.w	r8, #0
9001295c:	d009      	beq.n	90012972 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
9001295e:	9019      	str	r0, [sp, #100]	@ 0x64
90012960:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
90012964:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
90012968:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
9001296c:	911d      	str	r1, [sp, #116]	@ 0x74
9001296e:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
90012972:	1ad2      	subs	r2, r2, r3
90012974:	e68b      	b.n	9001268e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
90012976:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
90012978:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
9001297a:	2b00      	cmp	r3, #0
9001297c:	f000 80d1 	beq.w	90012b22 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
90012980:	ad19      	add	r5, sp, #100	@ 0x64
90012982:	ac39      	add	r4, sp, #228	@ 0xe4
90012984:	9b64      	ldr	r3, [sp, #400]	@ 0x190
90012986:	f8bb 0006 	ldrh.w	r0, [fp, #6]
9001298a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
9001298e:	930c      	str	r3, [sp, #48]	@ 0x30
90012990:	990c      	ldr	r1, [sp, #48]	@ 0x30
90012992:	6963      	ldr	r3, [r4, #20]
90012994:	440b      	add	r3, r1
90012996:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
9001299a:	4408      	add	r0, r1
9001299c:	b200      	sxth	r0, r0
9001299e:	4283      	cmp	r3, r0
900129a0:	900d      	str	r0, [sp, #52]	@ 0x34
900129a2:	f280 80c1 	bge.w	90012b28 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
900129a6:	428b      	cmp	r3, r1
900129a8:	da08      	bge.n	900129bc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
900129aa:	2a00      	cmp	r2, #0
900129ac:	dd06      	ble.n	900129bc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
900129ae:	1acb      	subs	r3, r1, r3
900129b0:	429a      	cmp	r2, r3
900129b2:	f2c0 80bb 	blt.w	90012b2c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
900129b6:	2b00      	cmp	r3, #0
900129b8:	f300 80b9 	bgt.w	90012b2e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
900129bc:	6967      	ldr	r7, [r4, #20]
900129be:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
900129c2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
900129c4:	443b      	add	r3, r7
900129c6:	461f      	mov	r7, r3
900129c8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
900129ca:	1bdf      	subs	r7, r3, r7
900129cc:	4297      	cmp	r7, r2
900129ce:	bfa8      	it	ge
900129d0:	4617      	movge	r7, r2
900129d2:	2f00      	cmp	r7, #0
900129d4:	f340 813c 	ble.w	90012c50 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
900129d8:	9b64      	ldr	r3, [sp, #400]	@ 0x190
900129da:	6829      	ldr	r1, [r5, #0]
900129dc:	f9b3 2000 	ldrsh.w	r2, [r3]
900129e0:	f9bb 3000 	ldrsh.w	r3, [fp]
900129e4:	4411      	add	r1, r2
900129e6:	6820      	ldr	r0, [r4, #0]
900129e8:	4299      	cmp	r1, r3
900129ea:	dd1a      	ble.n	90012a22 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
900129ec:	f8bb 1004 	ldrh.w	r1, [fp, #4]
900129f0:	4402      	add	r2, r0
900129f2:	440b      	add	r3, r1
900129f4:	b21b      	sxth	r3, r3
900129f6:	429a      	cmp	r2, r3
900129f8:	dc13      	bgt.n	90012a22 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
900129fa:	9a10      	ldr	r2, [sp, #64]	@ 0x40
900129fc:	a912      	add	r1, sp, #72	@ 0x48
900129fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
90012a00:	9809      	ldr	r0, [sp, #36]	@ 0x24
90012a02:	681b      	ldr	r3, [r3, #0]
90012a04:	9206      	str	r2, [sp, #24]
90012a06:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
90012a08:	9500      	str	r5, [sp, #0]
90012a0a:	9205      	str	r2, [sp, #20]
90012a0c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
90012a0e:	e9cd b203 	strd	fp, r2, [sp, #12]
90012a12:	9a64      	ldr	r2, [sp, #400]	@ 0x190
90012a14:	e9cd 8201 	strd	r8, r2, [sp, #4]
90012a18:	aa49      	add	r2, sp, #292	@ 0x124
90012a1a:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
90012a1e:	4623      	mov	r3, r4
90012a20:	47c8      	blx	r9
90012a22:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
90012a26:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
90012a2a:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
90012a2e:	ee37 7a27 	vadd.f32	s14, s14, s15
90012a32:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
90012a36:	68a1      	ldr	r1, [r4, #8]
90012a38:	ee77 7aa6 	vadd.f32	s15, s15, s13
90012a3c:	ed94 6a08 	vldr	s12, [r4, #32]
90012a40:	edd4 6a07 	vldr	s13, [r4, #28]
90012a44:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
90012a48:	ee76 6a86 	vadd.f32	s13, s13, s12
90012a4c:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
90012a50:	e9d4 2300 	ldrd	r2, r3, [r4]
90012a54:	edc4 6a07 	vstr	s13, [r4, #28]
90012a58:	441a      	add	r2, r3
90012a5a:	6963      	ldr	r3, [r4, #20]
90012a5c:	3301      	adds	r3, #1
90012a5e:	6022      	str	r2, [r4, #0]
90012a60:	6163      	str	r3, [r4, #20]
90012a62:	69a3      	ldr	r3, [r4, #24]
90012a64:	3b01      	subs	r3, #1
90012a66:	61a3      	str	r3, [r4, #24]
90012a68:	6923      	ldr	r3, [r4, #16]
90012a6a:	440b      	add	r3, r1
90012a6c:	68e1      	ldr	r1, [r4, #12]
90012a6e:	428b      	cmp	r3, r1
90012a70:	6123      	str	r3, [r4, #16]
90012a72:	db15      	blt.n	90012aa0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
90012a74:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
90012a78:	3201      	adds	r2, #1
90012a7a:	1a5b      	subs	r3, r3, r1
90012a7c:	ee76 6a26 	vadd.f32	s13, s12, s13
90012a80:	6022      	str	r2, [r4, #0]
90012a82:	6123      	str	r3, [r4, #16]
90012a84:	edc4 6a07 	vstr	s13, [r4, #28]
90012a88:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
90012a8c:	ee36 7a87 	vadd.f32	s14, s13, s14
90012a90:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
90012a94:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
90012a98:	ee77 7a27 	vadd.f32	s15, s14, s15
90012a9c:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
90012aa0:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
90012aa4:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
90012aa8:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
90012aac:	ee37 7a27 	vadd.f32	s14, s14, s15
90012ab0:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
90012ab4:	68a9      	ldr	r1, [r5, #8]
90012ab6:	ee77 7aa6 	vadd.f32	s15, s15, s13
90012aba:	ed95 6a08 	vldr	s12, [r5, #32]
90012abe:	edd5 6a07 	vldr	s13, [r5, #28]
90012ac2:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
90012ac6:	ee76 6a86 	vadd.f32	s13, s13, s12
90012aca:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
90012ace:	e9d5 2300 	ldrd	r2, r3, [r5]
90012ad2:	edc5 6a07 	vstr	s13, [r5, #28]
90012ad6:	441a      	add	r2, r3
90012ad8:	696b      	ldr	r3, [r5, #20]
90012ada:	3301      	adds	r3, #1
90012adc:	602a      	str	r2, [r5, #0]
90012ade:	616b      	str	r3, [r5, #20]
90012ae0:	69ab      	ldr	r3, [r5, #24]
90012ae2:	3b01      	subs	r3, #1
90012ae4:	61ab      	str	r3, [r5, #24]
90012ae6:	692b      	ldr	r3, [r5, #16]
90012ae8:	440b      	add	r3, r1
90012aea:	68e9      	ldr	r1, [r5, #12]
90012aec:	428b      	cmp	r3, r1
90012aee:	612b      	str	r3, [r5, #16]
90012af0:	db15      	blt.n	90012b1e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
90012af2:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
90012af6:	3201      	adds	r2, #1
90012af8:	1a5b      	subs	r3, r3, r1
90012afa:	ee76 6a26 	vadd.f32	s13, s12, s13
90012afe:	602a      	str	r2, [r5, #0]
90012b00:	612b      	str	r3, [r5, #16]
90012b02:	edc5 6a07 	vstr	s13, [r5, #28]
90012b06:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
90012b0a:	ee36 7a87 	vadd.f32	s14, s13, s14
90012b0e:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
90012b12:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
90012b16:	ee77 7a27 	vadd.f32	s15, s14, s15
90012b1a:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
90012b1e:	3f01      	subs	r7, #1
90012b20:	e757      	b.n	900129d2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
90012b22:	ad39      	add	r5, sp, #228	@ 0xe4
90012b24:	ac19      	add	r4, sp, #100	@ 0x64
90012b26:	e72d      	b.n	90012984 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
90012b28:	4613      	mov	r3, r2
90012b2a:	e744      	b.n	900129b6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
90012b2c:	4613      	mov	r3, r2
90012b2e:	9e3b      	ldr	r6, [sp, #236]	@ 0xec
90012b30:	469e      	mov	lr, r3
90012b32:	f8dd c0f8 	ldr.w	ip, [sp, #248]	@ 0xf8
90012b36:	461f      	mov	r7, r3
90012b38:	ed9d 7a43 	vldr	s14, [sp, #268]	@ 0x10c
90012b3c:	f04f 0900 	mov.w	r9, #0
90012b40:	eddd 4a44 	vldr	s9, [sp, #272]	@ 0x110
90012b44:	eddd 7a46 	vldr	s15, [sp, #280]	@ 0x118
90012b48:	ed9d 4a47 	vldr	s8, [sp, #284]	@ 0x11c
90012b4c:	eddd 6a40 	vldr	s13, [sp, #256]	@ 0x100
90012b50:	eddd 3a41 	vldr	s7, [sp, #260]	@ 0x104
90012b54:	993d      	ldr	r1, [sp, #244]	@ 0xf4
90012b56:	f8dd 80f0 	ldr.w	r8, [sp, #240]	@ 0xf0
90012b5a:	ed9d 5a42 	vldr	s10, [sp, #264]	@ 0x108
90012b5e:	eddd 5a45 	vldr	s11, [sp, #276]	@ 0x114
90012b62:	ed9d 6a48 	vldr	s12, [sp, #288]	@ 0x120
90012b66:	960e      	str	r6, [sp, #56]	@ 0x38
90012b68:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	@ 0xe4
90012b6c:	2f00      	cmp	r7, #0
90012b6e:	d146      	bne.n	90012bfe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
90012b70:	449c      	add	ip, r3
90012b72:	1ad7      	subs	r7, r2, r3
90012b74:	f1b9 0f00 	cmp.w	r9, #0
90012b78:	d009      	beq.n	90012b8e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
90012b7a:	9039      	str	r0, [sp, #228]	@ 0xe4
90012b7c:	913d      	str	r1, [sp, #244]	@ 0xf4
90012b7e:	edcd 6a40 	vstr	s13, [sp, #256]	@ 0x100
90012b82:	ed8d 7a43 	vstr	s14, [sp, #268]	@ 0x10c
90012b86:	edcd 7a46 	vstr	s15, [sp, #280]	@ 0x118
90012b8a:	e9cd c73e 	strd	ip, r7, [sp, #248]	@ 0xf8
90012b8e:	991b      	ldr	r1, [sp, #108]	@ 0x6c
90012b90:	f04f 0800 	mov.w	r8, #0
90012b94:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
90012b98:	910e      	str	r1, [sp, #56]	@ 0x38
90012b9a:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
90012b9e:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
90012ba2:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
90012ba6:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
90012baa:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
90012bae:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
90012bb2:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
90012bb6:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
90012bba:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
90012bbe:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
90012bc2:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
90012bc6:	f1be 0f00 	cmp.w	lr, #0
90012bca:	d030      	beq.n	90012c2e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
90012bcc:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
90012bce:	4450      	add	r0, sl
90012bd0:	ee76 6aa4 	vadd.f32	s13, s13, s9
90012bd4:	4431      	add	r1, r6
90012bd6:	ee37 7a04 	vadd.f32	s14, s14, s8
90012bda:	ee77 7aa3 	vadd.f32	s15, s15, s7
90012bde:	4549      	cmp	r1, r9
90012be0:	db08      	blt.n	90012bf4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
90012be2:	ee77 7a85 	vadd.f32	s15, s15, s10
90012be6:	3001      	adds	r0, #1
90012be8:	ee76 6aa5 	vadd.f32	s13, s13, s11
90012bec:	eba1 0109 	sub.w	r1, r1, r9
90012bf0:	ee37 7a06 	vadd.f32	s14, s14, s12
90012bf4:	f10e 3eff 	add.w	lr, lr, #4294967295
90012bf8:	f04f 0801 	mov.w	r8, #1
90012bfc:	e7e3      	b.n	90012bc6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
90012bfe:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
90012c00:	4450      	add	r0, sl
90012c02:	ee37 7a24 	vadd.f32	s14, s14, s9
90012c06:	4431      	add	r1, r6
90012c08:	ee77 7a84 	vadd.f32	s15, s15, s8
90012c0c:	ee76 6aa3 	vadd.f32	s13, s13, s7
90012c10:	4541      	cmp	r1, r8
90012c12:	db08      	blt.n	90012c26 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
90012c14:	ee76 6a85 	vadd.f32	s13, s13, s10
90012c18:	3001      	adds	r0, #1
90012c1a:	ee37 7a25 	vadd.f32	s14, s14, s11
90012c1e:	eba1 0108 	sub.w	r1, r1, r8
90012c22:	ee77 7a86 	vadd.f32	s15, s15, s12
90012c26:	3f01      	subs	r7, #1
90012c28:	f04f 0901 	mov.w	r9, #1
90012c2c:	e79e      	b.n	90012b6c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
90012c2e:	449c      	add	ip, r3
90012c30:	1aff      	subs	r7, r7, r3
90012c32:	f1b8 0f00 	cmp.w	r8, #0
90012c36:	d009      	beq.n	90012c4c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
90012c38:	9019      	str	r0, [sp, #100]	@ 0x64
90012c3a:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
90012c3e:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
90012c42:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
90012c46:	911d      	str	r1, [sp, #116]	@ 0x74
90012c48:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
90012c4c:	1ad2      	subs	r2, r2, r3
90012c4e:	e6b5      	b.n	900129bc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
90012c50:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
90012c52:	681b      	ldr	r3, [r3, #0]
90012c54:	b923      	cbnz	r3, 90012c60 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
90012c56:	4b04      	ldr	r3, [pc, #16]	@ (90012c68 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
90012c58:	6818      	ldr	r0, [r3, #0]
90012c5a:	6803      	ldr	r3, [r0, #0]
90012c5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90012c5e:	4798      	blx	r3
90012c60:	b05b      	add	sp, #364	@ 0x16c
90012c62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90012c66:	bf00      	nop
90012c68:	2402630c 	.word	0x2402630c

90012c6c <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>:
90012c6c:	b570      	push	{r4, r5, r6, lr}
90012c6e:	4604      	mov	r4, r0
90012c70:	2500      	movs	r5, #0
90012c72:	9805      	ldr	r0, [sp, #20]
90012c74:	f89d 601c 	ldrb.w	r6, [sp, #28]
90012c78:	6061      	str	r1, [r4, #4]
90012c7a:	8263      	strh	r3, [r4, #18]
90012c7c:	f89d 1010 	ldrb.w	r1, [sp, #16]
90012c80:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
90012c84:	8025      	strh	r5, [r4, #0]
90012c86:	7221      	strb	r1, [r4, #8]
90012c88:	7266      	strb	r6, [r4, #9]
90012c8a:	60e0      	str	r0, [r4, #12]
90012c8c:	8222      	strh	r2, [r4, #16]
90012c8e:	82a3      	strh	r3, [r4, #20]
90012c90:	82e5      	strh	r5, [r4, #22]
90012c92:	8325      	strh	r5, [r4, #24]
90012c94:	8365      	strh	r5, [r4, #26]
90012c96:	83a5      	strh	r5, [r4, #28]
90012c98:	83e5      	strh	r5, [r4, #30]
90012c9a:	8425      	strh	r5, [r4, #32]
90012c9c:	f884 5022 	strb.w	r5, [r4, #34]	@ 0x22
90012ca0:	b32e      	cbz	r6, 90012cee <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
90012ca2:	6803      	ldr	r3, [r0, #0]
90012ca4:	695b      	ldr	r3, [r3, #20]
90012ca6:	4798      	blx	r3
90012ca8:	4606      	mov	r6, r0
90012caa:	b300      	cbz	r0, 90012cee <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
90012cac:	68e0      	ldr	r0, [r4, #12]
90012cae:	4631      	mov	r1, r6
90012cb0:	6803      	ldr	r3, [r0, #0]
90012cb2:	68db      	ldr	r3, [r3, #12]
90012cb4:	4798      	blx	r3
90012cb6:	4605      	mov	r5, r0
90012cb8:	b1c8      	cbz	r0, 90012cee <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
90012cba:	7b43      	ldrb	r3, [r0, #13]
90012cbc:	7a82      	ldrb	r2, [r0, #10]
90012cbe:	005b      	lsls	r3, r3, #1
90012cc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
90012cc4:	4313      	orrs	r3, r2
90012cc6:	8423      	strh	r3, [r4, #32]
90012cc8:	7a63      	ldrb	r3, [r4, #9]
90012cca:	2b06      	cmp	r3, #6
90012ccc:	d10f      	bne.n	90012cee <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
90012cce:	68e0      	ldr	r0, [r4, #12]
90012cd0:	462a      	mov	r2, r5
90012cd2:	4631      	mov	r1, r6
90012cd4:	6803      	ldr	r3, [r0, #0]
90012cd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
90012cd8:	4798      	blx	r3
90012cda:	7b6b      	ldrb	r3, [r5, #13]
90012cdc:	005b      	lsls	r3, r3, #1
90012cde:	f403 7280 	and.w	r2, r3, #256	@ 0x100
90012ce2:	7aab      	ldrb	r3, [r5, #10]
90012ce4:	4313      	orrs	r3, r2
90012ce6:	4418      	add	r0, r3
90012ce8:	8c23      	ldrh	r3, [r4, #32]
90012cea:	4418      	add	r0, r3
90012cec:	8420      	strh	r0, [r4, #32]
90012cee:	4620      	mov	r0, r4
90012cf0:	bd70      	pop	{r4, r5, r6, pc}

90012cf2 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
90012cf2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90012cf6:	2400      	movs	r4, #0
90012cf8:	b085      	sub	sp, #20
90012cfa:	4681      	mov	r9, r0
90012cfc:	4688      	mov	r8, r1
90012cfe:	4692      	mov	sl, r2
90012d00:	469b      	mov	fp, r3
90012d02:	4627      	mov	r7, r4
90012d04:	4625      	mov	r5, r4
90012d06:	4626      	mov	r6, r4
90012d08:	4554      	cmp	r4, sl
90012d0a:	da2a      	bge.n	90012d62 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
90012d0c:	2300      	movs	r3, #0
90012d0e:	9303      	str	r3, [sp, #12]
90012d10:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
90012d14:	429d      	cmp	r5, r3
90012d16:	d004      	beq.n	90012d22 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
90012d18:	f242 030b 	movw	r3, #8203	@ 0x200b
90012d1c:	429d      	cmp	r5, r3
90012d1e:	bf18      	it	ne
90012d20:	462f      	movne	r7, r5
90012d22:	ab03      	add	r3, sp, #12
90012d24:	4642      	mov	r2, r8
90012d26:	4659      	mov	r1, fp
90012d28:	4648      	mov	r0, r9
90012d2a:	f002 ff79 	bl	90015c20 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
90012d2e:	4605      	mov	r5, r0
90012d30:	b1b8      	cbz	r0, 90012d62 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
90012d32:	280a      	cmp	r0, #10
90012d34:	d015      	beq.n	90012d62 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
90012d36:	9a03      	ldr	r2, [sp, #12]
90012d38:	b18a      	cbz	r2, 90012d5e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
90012d3a:	7b50      	ldrb	r0, [r2, #13]
90012d3c:	4639      	mov	r1, r7
90012d3e:	7a93      	ldrb	r3, [r2, #10]
90012d40:	0040      	lsls	r0, r0, #1
90012d42:	8895      	ldrh	r5, [r2, #4]
90012d44:	f400 7080 	and.w	r0, r0, #256	@ 0x100
90012d48:	4303      	orrs	r3, r0
90012d4a:	4640      	mov	r0, r8
90012d4c:	9301      	str	r3, [sp, #4]
90012d4e:	f8d8 3000 	ldr.w	r3, [r8]
90012d52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
90012d54:	4798      	blx	r3
90012d56:	9b01      	ldr	r3, [sp, #4]
90012d58:	4418      	add	r0, r3
90012d5a:	4406      	add	r6, r0
90012d5c:	b2b6      	uxth	r6, r6
90012d5e:	3401      	adds	r4, #1
90012d60:	e7d2      	b.n	90012d08 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
90012d62:	4630      	mov	r0, r6
90012d64:	b005      	add	sp, #20
90012d66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

90012d6a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
90012d6a:	2a02      	cmp	r2, #2
90012d6c:	b530      	push	{r4, r5, lr}
90012d6e:	d011      	beq.n	90012d94 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
90012d70:	2a03      	cmp	r2, #3
90012d72:	d01c      	beq.n	90012dae <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
90012d74:	2a01      	cmp	r2, #1
90012d76:	d10c      	bne.n	90012d92 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
90012d78:	888b      	ldrh	r3, [r1, #4]
90012d7a:	8801      	ldrh	r1, [r0, #0]
90012d7c:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
90012d80:	1a5b      	subs	r3, r3, r1
90012d82:	8844      	ldrh	r4, [r0, #2]
90012d84:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
90012d88:	1a9b      	subs	r3, r3, r2
90012d8a:	8004      	strh	r4, [r0, #0]
90012d8c:	8081      	strh	r1, [r0, #4]
90012d8e:	8043      	strh	r3, [r0, #2]
90012d90:	80c2      	strh	r2, [r0, #6]
90012d92:	bd30      	pop	{r4, r5, pc}
90012d94:	88cb      	ldrh	r3, [r1, #6]
90012d96:	8842      	ldrh	r2, [r0, #2]
90012d98:	1a9b      	subs	r3, r3, r2
90012d9a:	88c2      	ldrh	r2, [r0, #6]
90012d9c:	1a9b      	subs	r3, r3, r2
90012d9e:	888a      	ldrh	r2, [r1, #4]
90012da0:	8801      	ldrh	r1, [r0, #0]
90012da2:	8043      	strh	r3, [r0, #2]
90012da4:	1a52      	subs	r2, r2, r1
90012da6:	8881      	ldrh	r1, [r0, #4]
90012da8:	1a52      	subs	r2, r2, r1
90012daa:	8002      	strh	r2, [r0, #0]
90012dac:	e7f1      	b.n	90012d92 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
90012dae:	88cb      	ldrh	r3, [r1, #6]
90012db0:	8841      	ldrh	r1, [r0, #2]
90012db2:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
90012db6:	1a5b      	subs	r3, r3, r1
90012db8:	f9b0 5000 	ldrsh.w	r5, [r0]
90012dbc:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
90012dc0:	1a9b      	subs	r3, r3, r2
90012dc2:	8045      	strh	r5, [r0, #2]
90012dc4:	8082      	strh	r2, [r0, #4]
90012dc6:	8003      	strh	r3, [r0, #0]
90012dc8:	80c4      	strh	r4, [r0, #6]
90012dca:	e7e2      	b.n	90012d92 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

90012dcc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
90012dcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90012dd0:	b09f      	sub	sp, #124	@ 0x7c
90012dd2:	9116      	str	r1, [sp, #88]	@ 0x58
90012dd4:	9317      	str	r3, [sp, #92]	@ 0x5c
90012dd6:	9929      	ldr	r1, [sp, #164]	@ 0xa4
90012dd8:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
90012dda:	8809      	ldrh	r1, [r1, #0]
90012ddc:	889b      	ldrh	r3, [r3, #4]
90012dde:	f8dd 80a8 	ldr.w	r8, [sp, #168]	@ 0xa8
90012de2:	440b      	add	r3, r1
90012de4:	9212      	str	r2, [sp, #72]	@ 0x48
90012de6:	f89d 20b8 	ldrb.w	r2, [sp, #184]	@ 0xb8
90012dea:	b21b      	sxth	r3, r3
90012dec:	9011      	str	r0, [sp, #68]	@ 0x44
90012dee:	f89d b0ac 	ldrb.w	fp, [sp, #172]	@ 0xac
90012df2:	9310      	str	r3, [sp, #64]	@ 0x40
90012df4:	f8d8 3000 	ldr.w	r3, [r8]
90012df8:	f9bd 60a0 	ldrsh.w	r6, [sp, #160]	@ 0xa0
90012dfc:	7b19      	ldrb	r1, [r3, #12]
90012dfe:	7adb      	ldrb	r3, [r3, #11]
90012e00:	9114      	str	r1, [sp, #80]	@ 0x50
90012e02:	9315      	str	r3, [sp, #84]	@ 0x54
90012e04:	2a00      	cmp	r2, #0
90012e06:	d06a      	beq.n	90012ede <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
90012e08:	f898 3010 	ldrb.w	r3, [r8, #16]
90012e0c:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
90012e0e:	2b06      	cmp	r3, #6
90012e10:	bf14      	ite	ne
90012e12:	2301      	movne	r3, #1
90012e14:	2302      	moveq	r3, #2
90012e16:	4413      	add	r3, r2
90012e18:	f04f 0900 	mov.w	r9, #0
90012e1c:	930f      	str	r3, [sp, #60]	@ 0x3c
90012e1e:	464c      	mov	r4, r9
90012e20:	f8cd 9038 	str.w	r9, [sp, #56]	@ 0x38
90012e24:	f8cd 9034 	str.w	r9, [sp, #52]	@ 0x34
90012e28:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	@ 0x38
90012e2c:	4293      	cmp	r3, r2
90012e2e:	f280 808f 	bge.w	90012f50 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
90012e32:	2300      	movs	r3, #0
90012e34:	e9cd 331c 	strd	r3, r3, [sp, #112]	@ 0x70
90012e38:	f88d 306f 	strb.w	r3, [sp, #111]	@ 0x6f
90012e3c:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
90012e40:	429c      	cmp	r4, r3
90012e42:	d006      	beq.n	90012e52 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x86>
90012e44:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
90012e46:	f242 020b 	movw	r2, #8203	@ 0x200b
90012e4a:	4294      	cmp	r4, r2
90012e4c:	bf18      	it	ne
90012e4e:	4623      	movne	r3, r4
90012e50:	930d      	str	r3, [sp, #52]	@ 0x34
90012e52:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
90012e54:	992d      	ldr	r1, [sp, #180]	@ 0xb4
90012e56:	f8d8 2000 	ldr.w	r2, [r8]
90012e5a:	428b      	cmp	r3, r1
90012e5c:	db41      	blt.n	90012ee2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x116>
90012e5e:	6813      	ldr	r3, [r2, #0]
90012e60:	4610      	mov	r0, r2
90012e62:	695b      	ldr	r3, [r3, #20]
90012e64:	4798      	blx	r3
90012e66:	4604      	mov	r4, r0
90012e68:	f8d8 0000 	ldr.w	r0, [r8]
90012e6c:	aa1d      	add	r2, sp, #116	@ 0x74
90012e6e:	4621      	mov	r1, r4
90012e70:	6803      	ldr	r3, [r0, #0]
90012e72:	689d      	ldr	r5, [r3, #8]
90012e74:	f10d 036f 	add.w	r3, sp, #111	@ 0x6f
90012e78:	47a8      	blx	r5
90012e7a:	901c      	str	r0, [sp, #112]	@ 0x70
90012e7c:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
90012e80:	429c      	cmp	r4, r3
90012e82:	f000 80ec 	beq.w	9001305e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
90012e86:	f242 030b 	movw	r3, #8203	@ 0x200b
90012e8a:	429c      	cmp	r4, r3
90012e8c:	f000 80e7 	beq.w	9001305e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
90012e90:	2c00      	cmp	r4, #0
90012e92:	f000 80f9 	beq.w	90013088 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
90012e96:	2c0a      	cmp	r4, #10
90012e98:	d060      	beq.n	90012f5c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
90012e9a:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
90012e9c:	b36a      	cbz	r2, 90012efa <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12e>
90012e9e:	8894      	ldrh	r4, [r2, #4]
90012ea0:	f1bb 0f00 	cmp.w	fp, #0
90012ea4:	d03b      	beq.n	90012f1e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x152>
90012ea6:	f892 900d 	ldrb.w	r9, [r2, #13]
90012eaa:	f1bb 0f01 	cmp.w	fp, #1
90012eae:	ea4f 0949 	mov.w	r9, r9, lsl #1
90012eb2:	f409 7380 	and.w	r3, r9, #256	@ 0x100
90012eb6:	f892 900a 	ldrb.w	r9, [r2, #10]
90012eba:	ea49 0903 	orr.w	r9, r9, r3
90012ebe:	d134      	bne.n	90012f2a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15e>
90012ec0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
90012ec2:	eba6 0609 	sub.w	r6, r6, r9
90012ec6:	2b00      	cmp	r3, #0
90012ec8:	d14f      	bne.n	90012f6a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
90012eca:	9a14      	ldr	r2, [sp, #80]	@ 0x50
90012ecc:	eb09 0306 	add.w	r3, r9, r6
90012ed0:	4413      	add	r3, r2
90012ed2:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
90012ed4:	f9b2 2000 	ldrsh.w	r2, [r2]
90012ed8:	4293      	cmp	r3, r2
90012eda:	da51      	bge.n	90012f80 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
90012edc:	e038      	b.n	90012f50 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
90012ede:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
90012ee0:	e79a      	b.n	90012e18 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4c>
90012ee2:	f10d 036f 	add.w	r3, sp, #111	@ 0x6f
90012ee6:	4659      	mov	r1, fp
90012ee8:	982c      	ldr	r0, [sp, #176]	@ 0xb0
90012eea:	9301      	str	r3, [sp, #4]
90012eec:	ab1d      	add	r3, sp, #116	@ 0x74
90012eee:	9300      	str	r3, [sp, #0]
90012ef0:	ab1c      	add	r3, sp, #112	@ 0x70
90012ef2:	f002 fede 	bl	90015cb2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
90012ef6:	4604      	mov	r4, r0
90012ef8:	e7c0      	b.n	90012e7c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xb0>
90012efa:	f8d8 0000 	ldr.w	r0, [r8]
90012efe:	6803      	ldr	r3, [r0, #0]
90012f00:	691b      	ldr	r3, [r3, #16]
90012f02:	4798      	blx	r3
90012f04:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
90012f08:	4298      	cmp	r0, r3
90012f0a:	f000 80a8 	beq.w	9001305e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
90012f0e:	f242 030b 	movw	r3, #8203	@ 0x200b
90012f12:	4298      	cmp	r0, r3
90012f14:	f000 80a3 	beq.w	9001305e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
90012f18:	f1bb 0f00 	cmp.w	fp, #0
90012f1c:	d100      	bne.n	90012f20 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
90012f1e:	444e      	add	r6, r9
90012f20:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
90012f22:	2a00      	cmp	r2, #0
90012f24:	d1bf      	bne.n	90012ea6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
90012f26:	4691      	mov	r9, r2
90012f28:	e099      	b.n	9001305e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
90012f2a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
90012f2c:	2b00      	cmp	r3, #0
90012f2e:	f000 80ad 	beq.w	9001308c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c0>
90012f32:	f1bb 0f00 	cmp.w	fp, #0
90012f36:	d118      	bne.n	90012f6a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
90012f38:	f8d8 0000 	ldr.w	r0, [r8]
90012f3c:	990d      	ldr	r1, [sp, #52]	@ 0x34
90012f3e:	6803      	ldr	r3, [r0, #0]
90012f40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
90012f42:	4798      	blx	r3
90012f44:	4406      	add	r6, r0
90012f46:	9b15      	ldr	r3, [sp, #84]	@ 0x54
90012f48:	9a10      	ldr	r2, [sp, #64]	@ 0x40
90012f4a:	1af3      	subs	r3, r6, r3
90012f4c:	4293      	cmp	r3, r2
90012f4e:	dd17      	ble.n	90012f80 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
90012f50:	2c00      	cmp	r4, #0
90012f52:	f000 8099 	beq.w	90013088 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
90012f56:	2c0a      	cmp	r4, #10
90012f58:	f040 8087 	bne.w	9001306a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29e>
90012f5c:	240a      	movs	r4, #10
90012f5e:	fab4 f084 	clz	r0, r4
90012f62:	0940      	lsrs	r0, r0, #5
90012f64:	b01f      	add	sp, #124	@ 0x7c
90012f66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90012f6a:	f8d8 0000 	ldr.w	r0, [r8]
90012f6e:	990d      	ldr	r1, [sp, #52]	@ 0x34
90012f70:	6803      	ldr	r3, [r0, #0]
90012f72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
90012f74:	4798      	blx	r3
90012f76:	f1bb 0f01 	cmp.w	fp, #1
90012f7a:	eba6 0600 	sub.w	r6, r6, r0
90012f7e:	d0a4      	beq.n	90012eca <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfe>
90012f80:	981c      	ldr	r0, [sp, #112]	@ 0x70
90012f82:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
90012f84:	f990 1009 	ldrsb.w	r1, [r0, #9]
90012f88:	f9b3 7000 	ldrsh.w	r7, [r3]
90012f8c:	7b43      	ldrb	r3, [r0, #13]
90012f8e:	4431      	add	r1, r6
90012f90:	015b      	lsls	r3, r3, #5
90012f92:	f403 7280 	and.w	r2, r3, #256	@ 0x100
90012f96:	7983      	ldrb	r3, [r0, #6]
90012f98:	4313      	orrs	r3, r2
90012f9a:	440b      	add	r3, r1
90012f9c:	42bb      	cmp	r3, r7
90012f9e:	db5e      	blt.n	9001305e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
90012fa0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
90012fa2:	4299      	cmp	r1, r3
90012fa4:	da5b      	bge.n	9001305e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
90012fa6:	f8d8 0000 	ldr.w	r0, [r8]
90012faa:	42b7      	cmp	r7, r6
90012fac:	6803      	ldr	r3, [r0, #0]
90012fae:	bfcc      	ite	gt
90012fb0:	1bbf      	subgt	r7, r7, r6
90012fb2:	2700      	movle	r7, #0
90012fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
90012fb6:	bfc8      	it	gt
90012fb8:	b2bf      	uxthgt	r7, r7
90012fba:	4798      	blx	r3
90012fbc:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
90012fbe:	7b5a      	ldrb	r2, [r3, #13]
90012fc0:	00d1      	lsls	r1, r2, #3
90012fc2:	f401 7580 	and.w	r5, r1, #256	@ 0x100
90012fc6:	7a19      	ldrb	r1, [r3, #8]
90012fc8:	4329      	orrs	r1, r5
90012fca:	0655      	lsls	r5, r2, #25
90012fcc:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
90012fce:	bf48      	it	mi
90012fd0:	f5a1 7100 	submi.w	r1, r1, #512	@ 0x200
90012fd4:	4405      	add	r5, r0
90012fd6:	bf48      	it	mi
90012fd8:	b209      	sxthmi	r1, r1
90012fda:	1a6d      	subs	r5, r5, r1
90012fdc:	9929      	ldr	r1, [sp, #164]	@ 0xa4
90012fde:	b2ad      	uxth	r5, r5
90012fe0:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
90012fe4:	fa0f fa85 	sxth.w	sl, r5
90012fe8:	4551      	cmp	r1, sl
90012fea:	dd3c      	ble.n	90013066 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29a>
90012fec:	0112      	lsls	r2, r2, #4
90012fee:	79d8      	ldrb	r0, [r3, #7]
90012ff0:	f402 7280 	and.w	r2, r2, #256	@ 0x100
90012ff4:	4302      	orrs	r2, r0
90012ff6:	4492      	add	sl, r2
90012ff8:	4551      	cmp	r1, sl
90012ffa:	dc30      	bgt.n	9001305e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
90012ffc:	1b4d      	subs	r5, r1, r5
90012ffe:	468a      	mov	sl, r1
90013000:	b22d      	sxth	r5, r5
90013002:	9319      	str	r3, [sp, #100]	@ 0x64
90013004:	b2ad      	uxth	r5, r5
90013006:	9b11      	ldr	r3, [sp, #68]	@ 0x44
90013008:	f8d8 0000 	ldr.w	r0, [r8]
9001300c:	681a      	ldr	r2, [r3, #0]
9001300e:	6801      	ldr	r1, [r0, #0]
90013010:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
90013012:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
90013014:	9313      	str	r3, [sp, #76]	@ 0x4c
90013016:	9218      	str	r2, [sp, #96]	@ 0x60
90013018:	6c09      	ldr	r1, [r1, #64]	@ 0x40
9001301a:	4788      	blx	r1
9001301c:	f898 1006 	ldrb.w	r1, [r8, #6]
90013020:	9b19      	ldr	r3, [sp, #100]	@ 0x64
90013022:	910b      	str	r1, [sp, #44]	@ 0x2c
90013024:	f898 100e 	ldrb.w	r1, [r8, #14]
90013028:	9a18      	ldr	r2, [sp, #96]	@ 0x60
9001302a:	910a      	str	r1, [sp, #40]	@ 0x28
9001302c:	f89d 106f 	ldrb.w	r1, [sp, #111]	@ 0x6f
90013030:	9109      	str	r1, [sp, #36]	@ 0x24
90013032:	f8d8 1008 	ldr.w	r1, [r8, #8]
90013036:	9305      	str	r3, [sp, #20]
90013038:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
9001303a:	9206      	str	r2, [sp, #24]
9001303c:	9304      	str	r3, [sp, #16]
9001303e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
90013040:	f8cd a004 	str.w	sl, [sp, #4]
90013044:	e9cd 7502 	strd	r7, r5, [sp, #8]
90013048:	4437      	add	r7, r6
9001304a:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
9001304c:	b23f      	sxth	r7, r7
9001304e:	e9cd 0107 	strd	r0, r1, [sp, #28]
90013052:	9700      	str	r7, [sp, #0]
90013054:	9916      	ldr	r1, [sp, #88]	@ 0x58
90013056:	681a      	ldr	r2, [r3, #0]
90013058:	9811      	ldr	r0, [sp, #68]	@ 0x44
9001305a:	685b      	ldr	r3, [r3, #4]
9001305c:	47a8      	blx	r5
9001305e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
90013060:	3301      	adds	r3, #1
90013062:	930e      	str	r3, [sp, #56]	@ 0x38
90013064:	e6e0      	b.n	90012e28 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5c>
90013066:	2500      	movs	r5, #0
90013068:	e7cb      	b.n	90013002 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x236>
9001306a:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
9001306c:	3501      	adds	r5, #1
9001306e:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
90013070:	429d      	cmp	r5, r3
90013072:	f6bf af74 	bge.w	90012f5e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
90013076:	4659      	mov	r1, fp
90013078:	982c      	ldr	r0, [sp, #176]	@ 0xb0
9001307a:	f7f2 fd89 	bl	90005b90 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
9001307e:	4604      	mov	r4, r0
90013080:	b110      	cbz	r0, 90013088 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
90013082:	280a      	cmp	r0, #10
90013084:	d1f2      	bne.n	9001306c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2a0>
90013086:	e769      	b.n	90012f5c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
90013088:	2400      	movs	r4, #0
9001308a:	e768      	b.n	90012f5e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
9001308c:	f1bb 0f00 	cmp.w	fp, #0
90013090:	f43f af59 	beq.w	90012f46 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x17a>
90013094:	e774      	b.n	90012f80 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>

90013096 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
90013096:	b530      	push	{r4, r5, lr}
90013098:	8ac4      	ldrh	r4, [r0, #22]
9001309a:	8b45      	ldrh	r5, [r0, #26]
9001309c:	8343      	strh	r3, [r0, #26]
9001309e:	442c      	add	r4, r5
900130a0:	1ae4      	subs	r4, r4, r3
900130a2:	8b83      	ldrh	r3, [r0, #28]
900130a4:	82c4      	strh	r4, [r0, #22]
900130a6:	8b04      	ldrh	r4, [r0, #24]
900130a8:	4422      	add	r2, r4
900130aa:	440c      	add	r4, r1
900130ac:	1a59      	subs	r1, r3, r1
900130ae:	83c2      	strh	r2, [r0, #30]
900130b0:	8304      	strh	r4, [r0, #24]
900130b2:	8381      	strh	r1, [r0, #28]
900130b4:	bd30      	pop	{r4, r5, pc}

900130b6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>:
900130b6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900130ba:	4604      	mov	r4, r0
900130bc:	8a47      	ldrh	r7, [r0, #18]
900130be:	68c0      	ldr	r0, [r0, #12]
900130c0:	b085      	sub	sp, #20
900130c2:	6803      	ldr	r3, [r0, #0]
900130c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
900130c6:	4798      	blx	r3
900130c8:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
900130cc:	7a63      	ldrb	r3, [r4, #9]
900130ce:	eb06 0640 	add.w	r6, r6, r0, lsl #1
900130d2:	3b01      	subs	r3, #1
900130d4:	42b7      	cmp	r7, r6
900130d6:	bfac      	ite	ge
900130d8:	f04f 0900 	movge.w	r9, #0
900130dc:	f04f 0901 	movlt.w	r9, #1
900130e0:	2b05      	cmp	r3, #5
900130e2:	d804      	bhi.n	900130ee <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x38>
900130e4:	e8df f003 	tbb	[pc, r3]
900130e8:	470f0854 	.word	0x470f0854
900130ec:	4c4c      	.short	0x4c4c
900130ee:	2500      	movs	r5, #0
900130f0:	46a9      	mov	r9, r5
900130f2:	462e      	mov	r6, r5
900130f4:	462f      	mov	r7, r5
900130f6:	e00e      	b.n	90013116 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
900130f8:	42b7      	cmp	r7, r6
900130fa:	f04f 0500 	mov.w	r5, #0
900130fe:	bfb4      	ite	lt
90013100:	2600      	movlt	r6, #0
90013102:	2601      	movge	r6, #1
90013104:	e7f6      	b.n	900130f4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
90013106:	42b7      	cmp	r7, r6
90013108:	464d      	mov	r5, r9
9001310a:	f04f 0900 	mov.w	r9, #0
9001310e:	bfb4      	ite	lt
90013110:	2600      	movlt	r6, #0
90013112:	2601      	movge	r6, #1
90013114:	464f      	mov	r7, r9
90013116:	f04f 0800 	mov.w	r8, #0
9001311a:	f8a4 8016 	strh.w	r8, [r4, #22]
9001311e:	f8a4 8018 	strh.w	r8, [r4, #24]
90013122:	f8cd 8004 	str.w	r8, [sp, #4]
90013126:	2300      	movs	r3, #0
90013128:	9303      	str	r3, [sp, #12]
9001312a:	8823      	ldrh	r3, [r4, #0]
9001312c:	2b20      	cmp	r3, #32
9001312e:	d033      	beq.n	90013198 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xe2>
90013130:	f242 010b 	movw	r1, #8203	@ 0x200b
90013134:	1a5a      	subs	r2, r3, r1
90013136:	f1d2 0a00 	rsbs	sl, r2, #0
9001313a:	eb4a 0a02 	adc.w	sl, sl, r2
9001313e:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
90013142:	4293      	cmp	r3, r2
90013144:	d008      	beq.n	90013158 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
90013146:	428b      	cmp	r3, r1
90013148:	9a01      	ldr	r2, [sp, #4]
9001314a:	bf0e      	itee	eq
9001314c:	f04f 0a01 	moveq.w	sl, #1
90013150:	461a      	movne	r2, r3
90013152:	f04f 0a00 	movne.w	sl, #0
90013156:	9201      	str	r2, [sp, #4]
90013158:	ab03      	add	r3, sp, #12
9001315a:	68e2      	ldr	r2, [r4, #12]
9001315c:	7a21      	ldrb	r1, [r4, #8]
9001315e:	6860      	ldr	r0, [r4, #4]
90013160:	f002 fd5e 	bl	90015c20 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
90013164:	8020      	strh	r0, [r4, #0]
90013166:	b9d8      	cbnz	r0, 900131a0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xea>
90013168:	8ba2      	ldrh	r2, [r4, #28]
9001316a:	2300      	movs	r3, #0
9001316c:	4611      	mov	r1, r2
9001316e:	4620      	mov	r0, r4
90013170:	f7ff ff91 	bl	90013096 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
90013174:	e06e      	b.n	90013254 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
90013176:	2500      	movs	r5, #0
90013178:	2701      	movs	r7, #1
9001317a:	46a9      	mov	r9, r5
9001317c:	462e      	mov	r6, r5
9001317e:	e7ca      	b.n	90013116 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
90013180:	42b7      	cmp	r7, r6
90013182:	f04f 0500 	mov.w	r5, #0
90013186:	bfb4      	ite	lt
90013188:	2700      	movlt	r7, #0
9001318a:	2701      	movge	r7, #1
9001318c:	462e      	mov	r6, r5
9001318e:	e7c2      	b.n	90013116 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
90013190:	2500      	movs	r5, #0
90013192:	2601      	movs	r6, #1
90013194:	46a9      	mov	r9, r5
90013196:	e7ad      	b.n	900130f4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
90013198:	9301      	str	r3, [sp, #4]
9001319a:	f04f 0a01 	mov.w	sl, #1
9001319e:	e7db      	b.n	90013158 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
900131a0:	8b63      	ldrh	r3, [r4, #26]
900131a2:	280a      	cmp	r0, #10
900131a4:	f103 0301 	add.w	r3, r3, #1
900131a8:	8363      	strh	r3, [r4, #26]
900131aa:	d0dd      	beq.n	90013168 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb2>
900131ac:	9a03      	ldr	r2, [sp, #12]
900131ae:	bb62      	cbnz	r2, 9001320a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x154>
900131b0:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
900131b4:	4298      	cmp	r0, r3
900131b6:	d003      	beq.n	900131c0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
900131b8:	f242 030b 	movw	r3, #8203	@ 0x200b
900131bc:	4298      	cmp	r0, r3
900131be:	d1b2      	bne.n	90013126 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
900131c0:	8823      	ldrh	r3, [r4, #0]
900131c2:	8ba1      	ldrh	r1, [r4, #28]
900131c4:	2b20      	cmp	r3, #32
900131c6:	d003      	beq.n	900131d0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x11a>
900131c8:	f242 000b 	movw	r0, #8203	@ 0x200b
900131cc:	4283      	cmp	r3, r0
900131ce:	d131      	bne.n	90013234 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x17e>
900131d0:	f1ba 0f00 	cmp.w	sl, #0
900131d4:	bf0a      	itet	eq
900131d6:	4688      	moveq	r8, r1
900131d8:	4650      	movne	r0, sl
900131da:	2001      	moveq	r0, #1
900131dc:	440a      	add	r2, r1
900131de:	8b23      	ldrh	r3, [r4, #24]
900131e0:	f8b4 c010 	ldrh.w	ip, [r4, #16]
900131e4:	b292      	uxth	r2, r2
900131e6:	83a2      	strh	r2, [r4, #28]
900131e8:	4413      	add	r3, r2
900131ea:	f1b9 0f00 	cmp.w	r9, #0
900131ee:	d102      	bne.n	900131f6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x140>
900131f0:	2d00      	cmp	r5, #0
900131f2:	d042      	beq.n	9001327a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1c4>
900131f4:	b300      	cbz	r0, 90013238 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x182>
900131f6:	8c21      	ldrh	r1, [r4, #32]
900131f8:	4419      	add	r1, r3
900131fa:	458c      	cmp	ip, r1
900131fc:	da37      	bge.n	9001326e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
900131fe:	8ae1      	ldrh	r1, [r4, #22]
90013200:	2900      	cmp	r1, #0
90013202:	d034      	beq.n	9001326e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
90013204:	4563      	cmp	r3, ip
90013206:	dd8e      	ble.n	90013126 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
90013208:	e01d      	b.n	90013246 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x190>
9001320a:	8893      	ldrh	r3, [r2, #4]
9001320c:	9901      	ldr	r1, [sp, #4]
9001320e:	8023      	strh	r3, [r4, #0]
90013210:	f892 b00d 	ldrb.w	fp, [r2, #13]
90013214:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
90013218:	f40b 7080 	and.w	r0, fp, #256	@ 0x100
9001321c:	f892 b00a 	ldrb.w	fp, [r2, #10]
90013220:	ea4b 0b00 	orr.w	fp, fp, r0
90013224:	68e0      	ldr	r0, [r4, #12]
90013226:	6803      	ldr	r3, [r0, #0]
90013228:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
9001322a:	4798      	blx	r3
9001322c:	eb0b 0200 	add.w	r2, fp, r0
90013230:	b292      	uxth	r2, r2
90013232:	e7c5      	b.n	900131c0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
90013234:	2000      	movs	r0, #0
90013236:	e7d1      	b.n	900131dc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x126>
90013238:	4563      	cmp	r3, ip
9001323a:	f77f af74 	ble.w	90013126 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
9001323e:	8ae3      	ldrh	r3, [r4, #22]
90013240:	2b00      	cmp	r3, #0
90013242:	f43f af70 	beq.w	90013126 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
90013246:	2301      	movs	r3, #1
90013248:	8c22      	ldrh	r2, [r4, #32]
9001324a:	f884 3022 	strb.w	r3, [r4, #34]	@ 0x22
9001324e:	8be3      	ldrh	r3, [r4, #30]
90013250:	4413      	add	r3, r2
90013252:	83e3      	strh	r3, [r4, #30]
90013254:	68e0      	ldr	r0, [r4, #12]
90013256:	6803      	ldr	r3, [r0, #0]
90013258:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
9001325a:	4798      	blx	r3
9001325c:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
90013260:	4418      	add	r0, r3
90013262:	8a63      	ldrh	r3, [r4, #18]
90013264:	1a18      	subs	r0, r3, r0
90013266:	8260      	strh	r0, [r4, #18]
90013268:	b005      	add	sp, #20
9001326a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001326e:	2300      	movs	r3, #0
90013270:	4611      	mov	r1, r2
90013272:	4620      	mov	r0, r4
90013274:	f7ff ff0f 	bl	90013096 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
90013278:	e755      	b.n	90013126 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
9001327a:	4563      	cmp	r3, ip
9001327c:	dd14      	ble.n	900132a8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1f2>
9001327e:	b117      	cbz	r7, 90013286 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1d0>
90013280:	2301      	movs	r3, #1
90013282:	460a      	mov	r2, r1
90013284:	e772      	b.n	9001316c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb6>
90013286:	2e00      	cmp	r6, #0
90013288:	f43f af4d 	beq.w	90013126 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
9001328c:	2800      	cmp	r0, #0
9001328e:	f47f af4a 	bne.w	90013126 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
90013292:	f1ba 0f00 	cmp.w	sl, #0
90013296:	d002      	beq.n	9001329e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1e8>
90013298:	2301      	movs	r3, #1
9001329a:	4642      	mov	r2, r8
9001329c:	e767      	b.n	9001316e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb8>
9001329e:	8ae3      	ldrh	r3, [r4, #22]
900132a0:	2b00      	cmp	r3, #0
900132a2:	f43f af40 	beq.w	90013126 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
900132a6:	e7d5      	b.n	90013254 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
900132a8:	2800      	cmp	r0, #0
900132aa:	f47f af3c 	bne.w	90013126 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
900132ae:	f1ba 0f00 	cmp.w	sl, #0
900132b2:	f43f af38 	beq.w	90013126 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
900132b6:	2301      	movs	r3, #1
900132b8:	4642      	mov	r2, r8
900132ba:	e7da      	b.n	90013272 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1bc>

900132bc <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
900132bc:	b5f0      	push	{r4, r5, r6, r7, lr}
900132be:	4605      	mov	r5, r0
900132c0:	b08f      	sub	sp, #60	@ 0x3c
900132c2:	4617      	mov	r7, r2
900132c4:	461c      	mov	r4, r3
900132c6:	460e      	mov	r6, r1
900132c8:	b1d1      	cbz	r1, 90013300 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
900132ca:	681b      	ldr	r3, [r3, #0]
900132cc:	4620      	mov	r0, r4
900132ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
900132d0:	4798      	blx	r3
900132d2:	4240      	negs	r0, r0
900132d4:	9603      	str	r6, [sp, #12]
900132d6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
900132da:	b200      	sxth	r0, r0
900132dc:	9700      	str	r7, [sp, #0]
900132de:	f8bd 2050 	ldrh.w	r2, [sp, #80]	@ 0x50
900132e2:	4629      	mov	r1, r5
900132e4:	e9cd 4001 	strd	r4, r0, [sp, #4]
900132e8:	2401      	movs	r4, #1
900132ea:	a805      	add	r0, sp, #20
900132ec:	f7ff fcbe 	bl	90012c6c <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
900132f0:	a805      	add	r0, sp, #20
900132f2:	f7ff fee0 	bl	900130b6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
900132f6:	f8bd 3014 	ldrh.w	r3, [sp, #20]
900132fa:	b163      	cbz	r3, 90013316 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x5a>
900132fc:	3401      	adds	r4, #1
900132fe:	e7f7      	b.n	900132f0 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
90013300:	2401      	movs	r4, #1
90013302:	f002 fd59 	bl	90015db8 <_ZN8touchgfx12TextProvider11getNextCharEv>
90013306:	280a      	cmp	r0, #10
90013308:	4628      	mov	r0, r5
9001330a:	bf08      	it	eq
9001330c:	3401      	addeq	r4, #1
9001330e:	f002 fd53 	bl	90015db8 <_ZN8touchgfx12TextProvider11getNextCharEv>
90013312:	2800      	cmp	r0, #0
90013314:	d1f7      	bne.n	90013306 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x4a>
90013316:	b2a0      	uxth	r0, r4
90013318:	b00f      	add	sp, #60	@ 0x3c
9001331a:	bdf0      	pop	{r4, r5, r6, r7, pc}

9001331c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
9001331c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90013320:	b0e3      	sub	sp, #396	@ 0x18c
90013322:	461c      	mov	r4, r3
90013324:	4683      	mov	fp, r0
90013326:	4688      	mov	r8, r1
90013328:	9b6c      	ldr	r3, [sp, #432]	@ 0x1b0
9001332a:	2b00      	cmp	r3, #0
9001332c:	f000 810f 	beq.w	9001354e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
90013330:	6823      	ldr	r3, [r4, #0]
90013332:	2b00      	cmp	r3, #0
90013334:	f000 810b 	beq.w	9001354e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
90013338:	7ba3      	ldrb	r3, [r4, #14]
9001333a:	2b00      	cmp	r3, #0
9001333c:	f000 8107 	beq.w	9001354e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
90013340:	ad0a      	add	r5, sp, #40	@ 0x28
90013342:	6810      	ldr	r0, [r2, #0]
90013344:	6851      	ldr	r1, [r2, #4]
90013346:	462b      	mov	r3, r5
90013348:	f9b8 2004 	ldrsh.w	r2, [r8, #4]
9001334c:	c303      	stmia	r3!, {r0, r1}
9001334e:	2100      	movs	r1, #0
90013350:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
90013354:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
90013358:	4628      	mov	r0, r5
9001335a:	910c      	str	r1, [sp, #48]	@ 0x30
9001335c:	a90c      	add	r1, sp, #48	@ 0x30
9001335e:	79a2      	ldrb	r2, [r4, #6]
90013360:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
90013364:	f7ff fd01 	bl	90012d6a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
90013368:	a90c      	add	r1, sp, #48	@ 0x30
9001336a:	79a2      	ldrb	r2, [r4, #6]
9001336c:	4608      	mov	r0, r1
9001336e:	f7ff fcfc 	bl	90012d6a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
90013372:	a817      	add	r0, sp, #92	@ 0x5c
90013374:	f002 f8f4 	bl	90015560 <_ZN8touchgfx12TextProviderC1Ev>
90013378:	6820      	ldr	r0, [r4, #0]
9001337a:	6803      	ldr	r3, [r0, #0]
9001337c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
9001337e:	4798      	blx	r3
90013380:	4606      	mov	r6, r0
90013382:	6820      	ldr	r0, [r4, #0]
90013384:	6803      	ldr	r3, [r0, #0]
90013386:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
90013388:	4798      	blx	r3
9001338a:	4633      	mov	r3, r6
9001338c:	9a6d      	ldr	r2, [sp, #436]	@ 0x1b4
9001338e:	996c      	ldr	r1, [sp, #432]	@ 0x1b0
90013390:	9000      	str	r0, [sp, #0]
90013392:	a817      	add	r0, sp, #92	@ 0x5c
90013394:	f002 f93f 	bl	90015616 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
90013398:	6820      	ldr	r0, [r4, #0]
9001339a:	f894 a004 	ldrb.w	sl, [r4, #4]
9001339e:	6803      	ldr	r3, [r0, #0]
900133a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
900133a2:	4798      	blx	r3
900133a4:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
900133a8:	6823      	ldr	r3, [r4, #0]
900133aa:	4607      	mov	r7, r0
900133ac:	4406      	add	r6, r0
900133ae:	a830      	add	r0, sp, #192	@ 0xc0
900133b0:	f893 9009 	ldrb.w	r9, [r3, #9]
900133b4:	f002 f8d4 	bl	90015560 <_ZN8touchgfx12TextProviderC1Ev>
900133b8:	7c23      	ldrb	r3, [r4, #16]
900133ba:	b17b      	cbz	r3, 900133dc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xc0>
900133bc:	6820      	ldr	r0, [r4, #0]
900133be:	6803      	ldr	r3, [r0, #0]
900133c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
900133c2:	4798      	blx	r3
900133c4:	9009      	str	r0, [sp, #36]	@ 0x24
900133c6:	6820      	ldr	r0, [r4, #0]
900133c8:	6802      	ldr	r2, [r0, #0]
900133ca:	6d12      	ldr	r2, [r2, #80]	@ 0x50
900133cc:	4790      	blx	r2
900133ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
900133d0:	9000      	str	r0, [sp, #0]
900133d2:	a830      	add	r0, sp, #192	@ 0xc0
900133d4:	9a6d      	ldr	r2, [sp, #436]	@ 0x1b4
900133d6:	996c      	ldr	r1, [sp, #432]	@ 0x1b0
900133d8:	f002 f91d 	bl	90015616 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
900133dc:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
900133e0:	a80e      	add	r0, sp, #56	@ 0x38
900133e2:	7be2      	ldrb	r2, [r4, #15]
900133e4:	f8bd 3036 	ldrh.w	r3, [sp, #54]	@ 0x36
900133e8:	1a8a      	subs	r2, r1, r2
900133ea:	7c21      	ldrb	r1, [r4, #16]
900133ec:	9103      	str	r1, [sp, #12]
900133ee:	b292      	uxth	r2, r2
900133f0:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
900133f4:	9102      	str	r1, [sp, #8]
900133f6:	6821      	ldr	r1, [r4, #0]
900133f8:	9101      	str	r1, [sp, #4]
900133fa:	7961      	ldrb	r1, [r4, #5]
900133fc:	9100      	str	r1, [sp, #0]
900133fe:	a930      	add	r1, sp, #192	@ 0xc0
90013400:	f7ff fc34 	bl	90012c6c <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
90013404:	2e00      	cmp	r6, #0
90013406:	dc5b      	bgt.n	900134c0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a4>
90013408:	af17      	add	r7, sp, #92	@ 0x5c
9001340a:	f04f 0900 	mov.w	r9, #0
9001340e:	7c23      	ldrb	r3, [r4, #16]
90013410:	2b00      	cmp	r3, #0
90013412:	f000 80ae 	beq.w	90013572 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
90013416:	a80e      	add	r0, sp, #56	@ 0x38
90013418:	f7ff fe4d 	bl	900130b6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
9001341c:	f1ba 0f00 	cmp.w	sl, #0
90013420:	f000 80a2 	beq.w	90013568 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24c>
90013424:	7c23      	ldrb	r3, [r4, #16]
90013426:	2264      	movs	r2, #100	@ 0x64
90013428:	4639      	mov	r1, r7
9001342a:	a849      	add	r0, sp, #292	@ 0x124
9001342c:	9309      	str	r3, [sp, #36]	@ 0x24
9001342e:	f00f ff6e 	bl	9002330e <memcpy>
90013432:	9b09      	ldr	r3, [sp, #36]	@ 0x24
90013434:	2b00      	cmp	r3, #0
90013436:	f000 80a4 	beq.w	90013582 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x266>
9001343a:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	@ 0x56
9001343e:	7922      	ldrb	r2, [r4, #4]
90013440:	2a01      	cmp	r2, #1
90013442:	f040 8087 	bne.w	90013554 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
90013446:	f9bd 0034 	ldrsh.w	r0, [sp, #52]	@ 0x34
9001344a:	1ac0      	subs	r0, r0, r3
9001344c:	2302      	movs	r3, #2
9001344e:	fb90 f0f3 	sdiv	r0, r0, r3
90013452:	b200      	sxth	r0, r0
90013454:	7c23      	ldrb	r3, [r4, #16]
90013456:	2b00      	cmp	r3, #0
90013458:	f000 8088 	beq.w	9001356c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x250>
9001345c:	f8bd 204e 	ldrh.w	r2, [sp, #78]	@ 0x4e
90013460:	f89d 105a 	ldrb.w	r1, [sp, #90]	@ 0x5a
90013464:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
90013468:	e9cd 2105 	strd	r2, r1, [sp, #20]
9001346c:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
90013470:	2100      	movs	r1, #0
90013472:	4410      	add	r0, r2
90013474:	4642      	mov	r2, r8
90013476:	b200      	sxth	r0, r0
90013478:	e9cd 9703 	strd	r9, r7, [sp, #12]
9001347c:	9000      	str	r0, [sp, #0]
9001347e:	4658      	mov	r0, fp
90013480:	e9cd 5401 	strd	r5, r4, [sp, #4]
90013484:	f7ff fca2 	bl	90012dcc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
90013488:	2800      	cmp	r0, #0
9001348a:	d160      	bne.n	9001354e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
9001348c:	b2b2      	uxth	r2, r6
9001348e:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
90013492:	f8bd 1036 	ldrh.w	r1, [sp, #54]	@ 0x36
90013496:	4413      	add	r3, r2
90013498:	1a8a      	subs	r2, r1, r2
9001349a:	b21b      	sxth	r3, r3
9001349c:	f8ad 2036 	strh.w	r2, [sp, #54]	@ 0x36
900134a0:	f89d 205a 	ldrb.w	r2, [sp, #90]	@ 0x5a
900134a4:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
900134a8:	2a00      	cmp	r2, #0
900134aa:	d150      	bne.n	9001354e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
900134ac:	6822      	ldr	r2, [r4, #0]
900134ae:	8869      	ldrh	r1, [r5, #2]
900134b0:	7a12      	ldrb	r2, [r2, #8]
900134b2:	1a9b      	subs	r3, r3, r2
900134b4:	88ea      	ldrh	r2, [r5, #6]
900134b6:	440a      	add	r2, r1
900134b8:	b212      	sxth	r2, r2
900134ba:	4293      	cmp	r3, r2
900134bc:	dda7      	ble.n	9001340e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf2>
900134be:	e046      	b.n	9001354e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
900134c0:	7c23      	ldrb	r3, [r4, #16]
900134c2:	444f      	add	r7, r9
900134c4:	b1c3      	cbz	r3, 900134f8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1dc>
900134c6:	f64f 79ff 	movw	r9, #65535	@ 0xffff
900134ca:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
900134ce:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
900134d2:	443b      	add	r3, r7
900134d4:	4293      	cmp	r3, r2
900134d6:	da97      	bge.n	90013408 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
900134d8:	a80e      	add	r0, sp, #56	@ 0x38
900134da:	f7ff fdec 	bl	900130b6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
900134de:	f8bd 304e 	ldrh.w	r3, [sp, #78]	@ 0x4e
900134e2:	3b01      	subs	r3, #1
900134e4:	b29b      	uxth	r3, r3
900134e6:	454b      	cmp	r3, r9
900134e8:	9309      	str	r3, [sp, #36]	@ 0x24
900134ea:	d021      	beq.n	90013530 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x214>
900134ec:	7961      	ldrb	r1, [r4, #5]
900134ee:	a817      	add	r0, sp, #92	@ 0x5c
900134f0:	f7f2 fb4e 	bl	90005b90 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
900134f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
900134f6:	e7f4      	b.n	900134e2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c6>
900134f8:	fa1f f986 	uxth.w	r9, r6
900134fc:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
90013500:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
90013504:	443b      	add	r3, r7
90013506:	4293      	cmp	r3, r2
90013508:	f6bf af7e 	bge.w	90013408 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
9001350c:	a817      	add	r0, sp, #92	@ 0x5c
9001350e:	f002 fc53 	bl	90015db8 <_ZN8touchgfx12TextProvider11getNextCharEv>
90013512:	b1e0      	cbz	r0, 9001354e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
90013514:	280a      	cmp	r0, #10
90013516:	d1f1      	bne.n	900134fc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
90013518:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
9001351c:	444b      	add	r3, r9
9001351e:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
90013522:	f8bd 3036 	ldrh.w	r3, [sp, #54]	@ 0x36
90013526:	eba3 0309 	sub.w	r3, r3, r9
9001352a:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
9001352e:	e7e5      	b.n	900134fc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
90013530:	b2b3      	uxth	r3, r6
90013532:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
90013536:	441a      	add	r2, r3
90013538:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
9001353c:	f8bd 2036 	ldrh.w	r2, [sp, #54]	@ 0x36
90013540:	1ad3      	subs	r3, r2, r3
90013542:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
90013546:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
9001354a:	2b00      	cmp	r3, #0
9001354c:	d1bd      	bne.n	900134ca <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ae>
9001354e:	b063      	add	sp, #396	@ 0x18c
90013550:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90013554:	2a02      	cmp	r2, #2
90013556:	d105      	bne.n	90013564 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x248>
90013558:	7be2      	ldrb	r2, [r4, #15]
9001355a:	f8bd 0034 	ldrh.w	r0, [sp, #52]	@ 0x34
9001355e:	1a80      	subs	r0, r0, r2
90013560:	1ac0      	subs	r0, r0, r3
90013562:	e776      	b.n	90013452 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x136>
90013564:	2000      	movs	r0, #0
90013566:	e775      	b.n	90013454 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
90013568:	7be0      	ldrb	r0, [r4, #15]
9001356a:	e773      	b.n	90013454 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
9001356c:	f647 72ff 	movw	r2, #32767	@ 0x7fff
90013570:	e776      	b.n	90013460 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x144>
90013572:	f1ba 0f00 	cmp.w	sl, #0
90013576:	d0f7      	beq.n	90013568 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24c>
90013578:	2264      	movs	r2, #100	@ 0x64
9001357a:	4639      	mov	r1, r7
9001357c:	a849      	add	r0, sp, #292	@ 0x124
9001357e:	f00f fec6 	bl	9002330e <memcpy>
90013582:	2300      	movs	r3, #0
90013584:	f647 72ff 	movw	r2, #32767	@ 0x7fff
90013588:	6821      	ldr	r1, [r4, #0]
9001358a:	a849      	add	r0, sp, #292	@ 0x124
9001358c:	f7ff fbb1 	bl	90012cf2 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
90013590:	b203      	sxth	r3, r0
90013592:	e754      	b.n	9001343e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>

90013594 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
90013594:	2b03      	cmp	r3, #3
90013596:	d818      	bhi.n	900135ca <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
90013598:	e8df f003 	tbb	[pc, r3]
9001359c:	130d0602 	.word	0x130d0602
900135a0:	f9b0 2000 	ldrsh.w	r2, [r0]
900135a4:	1850      	adds	r0, r2, r1
900135a6:	4770      	bx	lr
900135a8:	8803      	ldrh	r3, [r0, #0]
900135aa:	8880      	ldrh	r0, [r0, #4]
900135ac:	4418      	add	r0, r3
900135ae:	b200      	sxth	r0, r0
900135b0:	1a80      	subs	r0, r0, r2
900135b2:	3801      	subs	r0, #1
900135b4:	4770      	bx	lr
900135b6:	8803      	ldrh	r3, [r0, #0]
900135b8:	8880      	ldrh	r0, [r0, #4]
900135ba:	4418      	add	r0, r3
900135bc:	b200      	sxth	r0, r0
900135be:	1a40      	subs	r0, r0, r1
900135c0:	e7f7      	b.n	900135b2 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
900135c2:	f9b0 0000 	ldrsh.w	r0, [r0]
900135c6:	4410      	add	r0, r2
900135c8:	4770      	bx	lr
900135ca:	2000      	movs	r0, #0
900135cc:	4770      	bx	lr

900135ce <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
900135ce:	2b03      	cmp	r3, #3
900135d0:	d817      	bhi.n	90013602 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
900135d2:	e8df f003 	tbb	[pc, r3]
900135d6:	0602      	.short	0x0602
900135d8:	1009      	.short	0x1009
900135da:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
900135de:	1850      	adds	r0, r2, r1
900135e0:	4770      	bx	lr
900135e2:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
900135e6:	e7fa      	b.n	900135de <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
900135e8:	8843      	ldrh	r3, [r0, #2]
900135ea:	88c0      	ldrh	r0, [r0, #6]
900135ec:	4418      	add	r0, r3
900135ee:	b200      	sxth	r0, r0
900135f0:	1a80      	subs	r0, r0, r2
900135f2:	3801      	subs	r0, #1
900135f4:	4770      	bx	lr
900135f6:	8843      	ldrh	r3, [r0, #2]
900135f8:	88c0      	ldrh	r0, [r0, #6]
900135fa:	4418      	add	r0, r3
900135fc:	b200      	sxth	r0, r0
900135fe:	1a40      	subs	r0, r0, r1
90013600:	e7f7      	b.n	900135f2 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
90013602:	2000      	movs	r0, #0
90013604:	4770      	bx	lr
	...

90013608 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
90013608:	4b01      	ldr	r3, [pc, #4]	@ (90013610 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
9001360a:	2200      	movs	r2, #0
9001360c:	601a      	str	r2, [r3, #0]
9001360e:	4770      	bx	lr
90013610:	24026314 	.word	0x24026314

90013614 <_ZN8touchgfx16TouchCalibration4clzuEm>:
90013614:	4603      	mov	r3, r0
90013616:	b1c8      	cbz	r0, 9001364c <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
90013618:	0c02      	lsrs	r2, r0, #16
9001361a:	0412      	lsls	r2, r2, #16
9001361c:	b9a2      	cbnz	r2, 90013648 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
9001361e:	0403      	lsls	r3, r0, #16
90013620:	2010      	movs	r0, #16
90013622:	f013 4f7f 	tst.w	r3, #4278190080	@ 0xff000000
90013626:	bf04      	itt	eq
90013628:	021b      	lsleq	r3, r3, #8
9001362a:	3008      	addeq	r0, #8
9001362c:	f013 4f70 	tst.w	r3, #4026531840	@ 0xf0000000
90013630:	bf04      	itt	eq
90013632:	011b      	lsleq	r3, r3, #4
90013634:	3004      	addeq	r0, #4
90013636:	f013 4f40 	tst.w	r3, #3221225472	@ 0xc0000000
9001363a:	bf04      	itt	eq
9001363c:	009b      	lsleq	r3, r3, #2
9001363e:	3002      	addeq	r0, #2
90013640:	2b00      	cmp	r3, #0
90013642:	db04      	blt.n	9001364e <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
90013644:	3001      	adds	r0, #1
90013646:	4770      	bx	lr
90013648:	2000      	movs	r0, #0
9001364a:	e7ea      	b.n	90013622 <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
9001364c:	2020      	movs	r0, #32
9001364e:	4770      	bx	lr

90013650 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
90013650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90013654:	b087      	sub	sp, #28
90013656:	4681      	mov	r9, r0
90013658:	4698      	mov	r8, r3
9001365a:	4610      	mov	r0, r2
9001365c:	460d      	mov	r5, r1
9001365e:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	@ 0x40
90013662:	b981      	cbnz	r1, 90013686 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
90013664:	b14b      	cbz	r3, 9001367a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
90013666:	460b      	mov	r3, r1
90013668:	464a      	mov	r2, r9
9001366a:	4641      	mov	r1, r8
9001366c:	e9cd 4700 	strd	r4, r7, [sp]
90013670:	f7ff ffee 	bl	90013650 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
90013674:	b007      	add	sp, #28
90013676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001367a:	f04f 33ff 	mov.w	r3, #4294967295
9001367e:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
90013682:	603b      	str	r3, [r7, #0]
90013684:	e7f6      	b.n	90013674 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
90013686:	fa32 fa01 	lsrs.w	sl, r2, r1
9001368a:	d107      	bne.n	9001369c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
9001368c:	fb09 f602 	mul.w	r6, r9, r2
90013690:	fbb6 f0f4 	udiv	r0, r6, r4
90013694:	fb04 6610 	mls	r6, r4, r0, r6
90013698:	603e      	str	r6, [r7, #0]
9001369a:	e7eb      	b.n	90013674 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
9001369c:	2601      	movs	r6, #1
9001369e:	fa09 fb01 	lsl.w	fp, r9, r1
900136a2:	408e      	lsls	r6, r1
900136a4:	fbbb f3f4 	udiv	r3, fp, r4
900136a8:	3e01      	subs	r6, #1
900136aa:	9302      	str	r3, [sp, #8]
900136ac:	fb0a f303 	mul.w	r3, sl, r3
900136b0:	4016      	ands	r6, r2
900136b2:	9303      	str	r3, [sp, #12]
900136b4:	4630      	mov	r0, r6
900136b6:	f7ff ffad 	bl	90013614 <_ZN8touchgfx16TouchCalibration4clzuEm>
900136ba:	464a      	mov	r2, r9
900136bc:	460b      	mov	r3, r1
900136be:	4601      	mov	r1, r0
900136c0:	4630      	mov	r0, r6
900136c2:	e9cd 4700 	strd	r4, r7, [sp]
900136c6:	f7ff ffc3 	bl	90013650 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
900136ca:	9b02      	ldr	r3, [sp, #8]
900136cc:	4606      	mov	r6, r0
900136ce:	eb05 0108 	add.w	r1, r5, r8
900136d2:	fb04 bb13 	mls	fp, r4, r3, fp
900136d6:	4658      	mov	r0, fp
900136d8:	f7ff ff9c 	bl	90013614 <_ZN8touchgfx16TouchCalibration4clzuEm>
900136dc:	ab05      	add	r3, sp, #20
900136de:	465a      	mov	r2, fp
900136e0:	e9cd 4300 	strd	r4, r3, [sp]
900136e4:	4603      	mov	r3, r0
900136e6:	4650      	mov	r0, sl
900136e8:	f7ff ffb2 	bl	90013650 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
900136ec:	6839      	ldr	r1, [r7, #0]
900136ee:	9a05      	ldr	r2, [sp, #20]
900136f0:	9b03      	ldr	r3, [sp, #12]
900136f2:	4411      	add	r1, r2
900136f4:	fbb1 f2f4 	udiv	r2, r1, r4
900136f8:	18d3      	adds	r3, r2, r3
900136fa:	fb04 1412 	mls	r4, r4, r2, r1
900136fe:	441e      	add	r6, r3
90013700:	603c      	str	r4, [r7, #0]
90013702:	4430      	add	r0, r6
90013704:	e7b6      	b.n	90013674 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

90013706 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
90013706:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
9001370a:	b085      	sub	sp, #20
9001370c:	f1b0 0900 	subs.w	r9, r0, #0
90013710:	461d      	mov	r5, r3
90013712:	4617      	mov	r7, r2
90013714:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
90013716:	bfbb      	ittet	lt
90013718:	f1c9 0900 	rsblt	r9, r9, #0
9001371c:	f04f 36ff 	movlt.w	r6, #4294967295
90013720:	2601      	movge	r6, #1
90013722:	6823      	ldrlt	r3, [r4, #0]
90013724:	bfbc      	itt	lt
90013726:	425b      	neglt	r3, r3
90013728:	6023      	strlt	r3, [r4, #0]
9001372a:	2a00      	cmp	r2, #0
9001372c:	da04      	bge.n	90013738 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
9001372e:	6823      	ldr	r3, [r4, #0]
90013730:	4257      	negs	r7, r2
90013732:	4276      	negs	r6, r6
90013734:	425b      	negs	r3, r3
90013736:	6023      	str	r3, [r4, #0]
90013738:	2d00      	cmp	r5, #0
9001373a:	4638      	mov	r0, r7
9001373c:	bfba      	itte	lt
9001373e:	426d      	neglt	r5, r5
90013740:	f04f 38ff 	movlt.w	r8, #4294967295
90013744:	f04f 0801 	movge.w	r8, #1
90013748:	f7ff ff64 	bl	90013614 <_ZN8touchgfx16TouchCalibration4clzuEm>
9001374c:	ab03      	add	r3, sp, #12
9001374e:	463a      	mov	r2, r7
90013750:	e9cd 5300 	strd	r5, r3, [sp]
90013754:	4603      	mov	r3, r0
90013756:	4648      	mov	r0, r9
90013758:	f7ff ff7a 	bl	90013650 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
9001375c:	6823      	ldr	r3, [r4, #0]
9001375e:	9a03      	ldr	r2, [sp, #12]
90013760:	4546      	cmp	r6, r8
90013762:	441a      	add	r2, r3
90013764:	fb92 f3f5 	sdiv	r3, r2, r5
90013768:	4418      	add	r0, r3
9001376a:	fb05 2313 	mls	r3, r5, r3, r2
9001376e:	bf18      	it	ne
90013770:	4240      	negne	r0, r0
90013772:	1c72      	adds	r2, r6, #1
90013774:	6023      	str	r3, [r4, #0]
90013776:	d105      	bne.n	90013784 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
90013778:	2b00      	cmp	r3, #0
9001377a:	f1c3 0200 	rsb	r2, r3, #0
9001377e:	db0b      	blt.n	90013798 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
90013780:	6022      	str	r2, [r4, #0]
90013782:	e006      	b.n	90013792 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
90013784:	2e01      	cmp	r6, #1
90013786:	d104      	bne.n	90013792 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
90013788:	2b00      	cmp	r3, #0
9001378a:	da02      	bge.n	90013792 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
9001378c:	442b      	add	r3, r5
9001378e:	3801      	subs	r0, #1
90013790:	6023      	str	r3, [r4, #0]
90013792:	b005      	add	sp, #20
90013794:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
90013798:	3801      	subs	r0, #1
9001379a:	1b52      	subs	r2, r2, r5
9001379c:	e7f0      	b.n	90013780 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

900137a0 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
900137a0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
900137a4:	4c1c      	ldr	r4, [pc, #112]	@ (90013818 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
900137a6:	4605      	mov	r5, r0
900137a8:	6807      	ldr	r7, [r0, #0]
900137aa:	69a3      	ldr	r3, [r4, #24]
900137ac:	b92b      	cbnz	r3, 900137ba <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
900137ae:	6840      	ldr	r0, [r0, #4]
900137b0:	e9c5 7000 	strd	r7, r0, [r5]
900137b4:	b004      	add	sp, #16
900137b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
900137ba:	f04f 0802 	mov.w	r8, #2
900137be:	68a2      	ldr	r2, [r4, #8]
900137c0:	ae04      	add	r6, sp, #16
900137c2:	6820      	ldr	r0, [r4, #0]
900137c4:	fb93 f1f8 	sdiv	r1, r3, r8
900137c8:	440a      	add	r2, r1
900137ca:	69e1      	ldr	r1, [r4, #28]
900137cc:	f846 2d04 	str.w	r2, [r6, #-4]!
900137d0:	463a      	mov	r2, r7
900137d2:	9600      	str	r6, [sp, #0]
900137d4:	f7ff ff97 	bl	90013706 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
900137d8:	69a3      	ldr	r3, [r4, #24]
900137da:	4607      	mov	r7, r0
900137dc:	686a      	ldr	r2, [r5, #4]
900137de:	6a21      	ldr	r1, [r4, #32]
900137e0:	9600      	str	r6, [sp, #0]
900137e2:	6860      	ldr	r0, [r4, #4]
900137e4:	f7ff ff8f 	bl	90013706 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
900137e8:	69a3      	ldr	r3, [r4, #24]
900137ea:	6962      	ldr	r2, [r4, #20]
900137ec:	4407      	add	r7, r0
900137ee:	6a61      	ldr	r1, [r4, #36]	@ 0x24
900137f0:	9600      	str	r6, [sp, #0]
900137f2:	68e0      	ldr	r0, [r4, #12]
900137f4:	fb93 f8f8 	sdiv	r8, r3, r8
900137f8:	4442      	add	r2, r8
900137fa:	9203      	str	r2, [sp, #12]
900137fc:	682a      	ldr	r2, [r5, #0]
900137fe:	f7ff ff82 	bl	90013706 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
90013802:	4680      	mov	r8, r0
90013804:	9600      	str	r6, [sp, #0]
90013806:	69a3      	ldr	r3, [r4, #24]
90013808:	686a      	ldr	r2, [r5, #4]
9001380a:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
9001380c:	6920      	ldr	r0, [r4, #16]
9001380e:	f7ff ff7a 	bl	90013706 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
90013812:	4440      	add	r0, r8
90013814:	e7cc      	b.n	900137b0 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
90013816:	bf00      	nop
90013818:	24026318 	.word	0x24026318

9001381c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
9001381c:	4b07      	ldr	r3, [pc, #28]	@ (9001383c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
9001381e:	781b      	ldrb	r3, [r3, #0]
90013820:	2b01      	cmp	r3, #1
90013822:	d109      	bne.n	90013838 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
90013824:	f9b1 3000 	ldrsh.w	r3, [r1]
90013828:	f9b0 2000 	ldrsh.w	r2, [r0]
9001382c:	8003      	strh	r3, [r0, #0]
9001382e:	4b04      	ldr	r3, [pc, #16]	@ (90013840 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
90013830:	881b      	ldrh	r3, [r3, #0]
90013832:	3b01      	subs	r3, #1
90013834:	1a9b      	subs	r3, r3, r2
90013836:	800b      	strh	r3, [r1, #0]
90013838:	4770      	bx	lr
9001383a:	bf00      	nop
9001383c:	24026304 	.word	0x24026304
90013840:	24026300 	.word	0x24026300

90013844 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
90013844:	4b07      	ldr	r3, [pc, #28]	@ (90013864 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
90013846:	b510      	push	{r4, lr}
90013848:	781b      	ldrb	r3, [r3, #0]
9001384a:	2b01      	cmp	r3, #1
9001384c:	d108      	bne.n	90013860 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
9001384e:	4b06      	ldr	r3, [pc, #24]	@ (90013868 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
90013850:	880c      	ldrh	r4, [r1, #0]
90013852:	881b      	ldrh	r3, [r3, #0]
90013854:	f9b0 2000 	ldrsh.w	r2, [r0]
90013858:	3b01      	subs	r3, #1
9001385a:	1b1b      	subs	r3, r3, r4
9001385c:	8003      	strh	r3, [r0, #0]
9001385e:	800a      	strh	r2, [r1, #0]
90013860:	bd10      	pop	{r4, pc}
90013862:	bf00      	nop
90013864:	24026304 	.word	0x24026304
90013868:	24026300 	.word	0x24026300

9001386c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
9001386c:	4b0a      	ldr	r3, [pc, #40]	@ (90013898 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
9001386e:	b510      	push	{r4, lr}
90013870:	781b      	ldrb	r3, [r3, #0]
90013872:	2b01      	cmp	r3, #1
90013874:	d10e      	bne.n	90013894 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
90013876:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
9001387a:	8843      	ldrh	r3, [r0, #2]
9001387c:	f9b0 4000 	ldrsh.w	r4, [r0]
90013880:	18ca      	adds	r2, r1, r3
90013882:	4b06      	ldr	r3, [pc, #24]	@ (9001389c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
90013884:	8044      	strh	r4, [r0, #2]
90013886:	881b      	ldrh	r3, [r3, #0]
90013888:	1a9b      	subs	r3, r3, r2
9001388a:	8003      	strh	r3, [r0, #0]
9001388c:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
90013890:	8081      	strh	r1, [r0, #4]
90013892:	80c3      	strh	r3, [r0, #6]
90013894:	bd10      	pop	{r4, pc}
90013896:	bf00      	nop
90013898:	24026304 	.word	0x24026304
9001389c:	24026300 	.word	0x24026300

900138a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
900138a0:	4b08      	ldr	r3, [pc, #32]	@ (900138c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
900138a2:	781b      	ldrb	r3, [r3, #0]
900138a4:	2b01      	cmp	r3, #1
900138a6:	d10c      	bne.n	900138c2 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
900138a8:	8803      	ldrh	r3, [r0, #0]
900138aa:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
900138ae:	8842      	ldrh	r2, [r0, #2]
900138b0:	8002      	strh	r2, [r0, #0]
900138b2:	185a      	adds	r2, r3, r1
900138b4:	4b04      	ldr	r3, [pc, #16]	@ (900138c8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
900138b6:	881b      	ldrh	r3, [r3, #0]
900138b8:	1a9b      	subs	r3, r3, r2
900138ba:	8043      	strh	r3, [r0, #2]
900138bc:	88c3      	ldrh	r3, [r0, #6]
900138be:	80c1      	strh	r1, [r0, #6]
900138c0:	8083      	strh	r3, [r0, #4]
900138c2:	4770      	bx	lr
900138c4:	24026304 	.word	0x24026304
900138c8:	24026300 	.word	0x24026300

900138cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
900138cc:	4b07      	ldr	r3, [pc, #28]	@ (900138ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
900138ce:	b510      	push	{r4, lr}
900138d0:	781b      	ldrb	r3, [r3, #0]
900138d2:	2b01      	cmp	r3, #1
900138d4:	d108      	bne.n	900138e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
900138d6:	f9b1 3000 	ldrsh.w	r3, [r1]
900138da:	f9b0 4000 	ldrsh.w	r4, [r0]
900138de:	8003      	strh	r3, [r0, #0]
900138e0:	8893      	ldrh	r3, [r2, #4]
900138e2:	3b01      	subs	r3, #1
900138e4:	1b1b      	subs	r3, r3, r4
900138e6:	800b      	strh	r3, [r1, #0]
900138e8:	bd10      	pop	{r4, pc}
900138ea:	bf00      	nop
900138ec:	24026304 	.word	0x24026304

900138f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>:
900138f0:	4b0b      	ldr	r3, [pc, #44]	@ (90013920 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x30>)
900138f2:	781b      	ldrb	r3, [r3, #0]
900138f4:	2b01      	cmp	r3, #1
900138f6:	d111      	bne.n	9001391c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x2c>
900138f8:	680b      	ldr	r3, [r1, #0]
900138fa:	ed90 7a00 	vldr	s14, [r0]
900138fe:	6003      	str	r3, [r0, #0]
90013900:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
90013904:	eddf 6a07 	vldr	s13, [pc, #28]	@ 90013924 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x34>
90013908:	ee07 3a90 	vmov	s15, r3
9001390c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
90013910:	ee77 7ae6 	vsub.f32	s15, s15, s13
90013914:	ee77 7ac7 	vsub.f32	s15, s15, s14
90013918:	edc1 7a00 	vstr	s15, [r1]
9001391c:	4770      	bx	lr
9001391e:	bf00      	nop
90013920:	24026304 	.word	0x24026304
90013924:	38d1b717 	.word	0x38d1b717

90013928 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
90013928:	4b0a      	ldr	r3, [pc, #40]	@ (90013954 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
9001392a:	460a      	mov	r2, r1
9001392c:	b510      	push	{r4, lr}
9001392e:	781b      	ldrb	r3, [r3, #0]
90013930:	2b01      	cmp	r3, #1
90013932:	d10d      	bne.n	90013950 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
90013934:	8881      	ldrh	r1, [r0, #4]
90013936:	8803      	ldrh	r3, [r0, #0]
90013938:	440b      	add	r3, r1
9001393a:	4601      	mov	r1, r0
9001393c:	3b01      	subs	r3, #1
9001393e:	f821 3b02 	strh.w	r3, [r1], #2
90013942:	f7ff ffc3 	bl	900138cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
90013946:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
9001394a:	88c2      	ldrh	r2, [r0, #6]
9001394c:	80c3      	strh	r3, [r0, #6]
9001394e:	8082      	strh	r2, [r0, #4]
90013950:	bd10      	pop	{r4, pc}
90013952:	bf00      	nop
90013954:	24026304 	.word	0x24026304

90013958 <_ZN8touchgfx11Application19changeToStartScreenEv>:
90013958:	4770      	bx	lr
	...

9001395c <_ZN8touchgfx11Application13requestRedrawEv>:
9001395c:	4b06      	ldr	r3, [pc, #24]	@ (90013978 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
9001395e:	2100      	movs	r1, #0
90013960:	f9b3 2000 	ldrsh.w	r2, [r3]
90013964:	4b05      	ldr	r3, [pc, #20]	@ (9001397c <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
90013966:	f8c0 1130 	str.w	r1, [r0, #304]	@ 0x130
9001396a:	f9b3 3000 	ldrsh.w	r3, [r3]
9001396e:	f8a0 2134 	strh.w	r2, [r0, #308]	@ 0x134
90013972:	f8a0 3136 	strh.w	r3, [r0, #310]	@ 0x136
90013976:	4770      	bx	lr
90013978:	24026300 	.word	0x24026300
9001397c:	24026302 	.word	0x24026302

90013980 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
90013980:	4b03      	ldr	r3, [pc, #12]	@ (90013990 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
90013982:	6818      	ldr	r0, [r3, #0]
90013984:	b110      	cbz	r0, 9001398c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
90013986:	6803      	ldr	r3, [r0, #0]
90013988:	699b      	ldr	r3, [r3, #24]
9001398a:	4718      	bx	r3
9001398c:	4770      	bx	lr
9001398e:	bf00      	nop
90013990:	24026348 	.word	0x24026348

90013994 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
90013994:	4770      	bx	lr
	...

90013998 <_ZN8touchgfx11Application4drawEv>:
90013998:	4b09      	ldr	r3, [pc, #36]	@ (900139c0 <_ZN8touchgfx11Application4drawEv+0x28>)
9001399a:	b507      	push	{r0, r1, r2, lr}
9001399c:	f9b3 2000 	ldrsh.w	r2, [r3]
900139a0:	2100      	movs	r1, #0
900139a2:	4b08      	ldr	r3, [pc, #32]	@ (900139c4 <_ZN8touchgfx11Application4drawEv+0x2c>)
900139a4:	9100      	str	r1, [sp, #0]
900139a6:	4669      	mov	r1, sp
900139a8:	f9b3 3000 	ldrsh.w	r3, [r3]
900139ac:	f8ad 2004 	strh.w	r2, [sp, #4]
900139b0:	f8ad 3006 	strh.w	r3, [sp, #6]
900139b4:	6803      	ldr	r3, [r0, #0]
900139b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
900139b8:	4798      	blx	r3
900139ba:	b003      	add	sp, #12
900139bc:	f85d fb04 	ldr.w	pc, [sp], #4
900139c0:	24026300 	.word	0x24026300
900139c4:	24026302 	.word	0x24026302

900139c8 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
900139c8:	4b03      	ldr	r3, [pc, #12]	@ (900139d8 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
900139ca:	6818      	ldr	r0, [r3, #0]
900139cc:	b110      	cbz	r0, 900139d4 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
900139ce:	6803      	ldr	r3, [r0, #0]
900139d0:	69db      	ldr	r3, [r3, #28]
900139d2:	4718      	bx	r3
900139d4:	4770      	bx	lr
900139d6:	bf00      	nop
900139d8:	24026348 	.word	0x24026348

900139dc <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
900139dc:	4b03      	ldr	r3, [pc, #12]	@ (900139ec <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
900139de:	6818      	ldr	r0, [r3, #0]
900139e0:	b110      	cbz	r0, 900139e8 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
900139e2:	6803      	ldr	r3, [r0, #0]
900139e4:	6a1b      	ldr	r3, [r3, #32]
900139e6:	4718      	bx	r3
900139e8:	4770      	bx	lr
900139ea:	bf00      	nop
900139ec:	24026348 	.word	0x24026348

900139f0 <_ZN8touchgfx11Application16clearCachedAreasEv>:
900139f0:	2300      	movs	r3, #0
900139f2:	f8a0 30ec 	strh.w	r3, [r0, #236]	@ 0xec
900139f6:	4770      	bx	lr

900139f8 <_ZN8touchgfx11Application14handleKeyEventEh>:
900139f8:	4b03      	ldr	r3, [pc, #12]	@ (90013a08 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
900139fa:	6818      	ldr	r0, [r3, #0]
900139fc:	b110      	cbz	r0, 90013a04 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
900139fe:	6803      	ldr	r3, [r0, #0]
90013a00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90013a02:	4718      	bx	r3
90013a04:	4770      	bx	lr
90013a06:	bf00      	nop
90013a08:	24026348 	.word	0x24026348

90013a0c <_ZN8touchgfx11ApplicationD1Ev>:
90013a0c:	4770      	bx	lr

90013a0e <_ZN8touchgfx11ApplicationD0Ev>:
90013a0e:	b510      	push	{r4, lr}
90013a10:	4604      	mov	r4, r0
90013a12:	f44f 719e 	mov.w	r1, #316	@ 0x13c
90013a16:	f00f f8ce 	bl	90022bb6 <_ZdlPvj>
90013a1a:	4620      	mov	r0, r4
90013a1c:	bd10      	pop	{r4, pc}

90013a1e <_ZNK8touchgfx4Rect9intersectERKS0_>:
90013a1e:	b510      	push	{r4, lr}
90013a20:	f9b1 4000 	ldrsh.w	r4, [r1]
90013a24:	888a      	ldrh	r2, [r1, #4]
90013a26:	f9b0 3000 	ldrsh.w	r3, [r0]
90013a2a:	4422      	add	r2, r4
90013a2c:	b212      	sxth	r2, r2
90013a2e:	4293      	cmp	r3, r2
90013a30:	da15      	bge.n	90013a5e <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
90013a32:	8882      	ldrh	r2, [r0, #4]
90013a34:	4413      	add	r3, r2
90013a36:	b21b      	sxth	r3, r3
90013a38:	429c      	cmp	r4, r3
90013a3a:	da10      	bge.n	90013a5e <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
90013a3c:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
90013a40:	88c9      	ldrh	r1, [r1, #6]
90013a42:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
90013a46:	4419      	add	r1, r3
90013a48:	b209      	sxth	r1, r1
90013a4a:	428a      	cmp	r2, r1
90013a4c:	da07      	bge.n	90013a5e <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
90013a4e:	88c0      	ldrh	r0, [r0, #6]
90013a50:	4410      	add	r0, r2
90013a52:	b200      	sxth	r0, r0
90013a54:	4283      	cmp	r3, r0
90013a56:	bfac      	ite	ge
90013a58:	2000      	movge	r0, #0
90013a5a:	2001      	movlt	r0, #1
90013a5c:	bd10      	pop	{r4, pc}
90013a5e:	2000      	movs	r0, #0
90013a60:	e7fc      	b.n	90013a5c <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

90013a62 <_ZN8touchgfx4Rect10restrictToEss>:
90013a62:	f9b0 3000 	ldrsh.w	r3, [r0]
90013a66:	2b00      	cmp	r3, #0
90013a68:	b510      	push	{r4, lr}
90013a6a:	da04      	bge.n	90013a76 <_ZN8touchgfx4Rect10restrictToEss+0x14>
90013a6c:	8884      	ldrh	r4, [r0, #4]
90013a6e:	4423      	add	r3, r4
90013a70:	8083      	strh	r3, [r0, #4]
90013a72:	2300      	movs	r3, #0
90013a74:	8003      	strh	r3, [r0, #0]
90013a76:	f9b0 4000 	ldrsh.w	r4, [r0]
90013a7a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
90013a7e:	1b09      	subs	r1, r1, r4
90013a80:	428b      	cmp	r3, r1
90013a82:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
90013a86:	bfc8      	it	gt
90013a88:	8081      	strhgt	r1, [r0, #4]
90013a8a:	2b00      	cmp	r3, #0
90013a8c:	da04      	bge.n	90013a98 <_ZN8touchgfx4Rect10restrictToEss+0x36>
90013a8e:	88c1      	ldrh	r1, [r0, #6]
90013a90:	440b      	add	r3, r1
90013a92:	80c3      	strh	r3, [r0, #6]
90013a94:	2300      	movs	r3, #0
90013a96:	8043      	strh	r3, [r0, #2]
90013a98:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
90013a9c:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
90013aa0:	1a52      	subs	r2, r2, r1
90013aa2:	4293      	cmp	r3, r2
90013aa4:	bfc8      	it	gt
90013aa6:	80c2      	strhgt	r2, [r0, #6]
90013aa8:	bd10      	pop	{r4, pc}
	...

90013aac <_ZN8touchgfx11Application4drawERNS_4RectE>:
90013aac:	4b10      	ldr	r3, [pc, #64]	@ (90013af0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
90013aae:	b510      	push	{r4, lr}
90013ab0:	460c      	mov	r4, r1
90013ab2:	f9b3 2000 	ldrsh.w	r2, [r3]
90013ab6:	4b0f      	ldr	r3, [pc, #60]	@ (90013af4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
90013ab8:	4620      	mov	r0, r4
90013aba:	f9b3 1000 	ldrsh.w	r1, [r3]
90013abe:	f7ff ffd0 	bl	90013a62 <_ZN8touchgfx4Rect10restrictToEss>
90013ac2:	4b0d      	ldr	r3, [pc, #52]	@ (90013af8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
90013ac4:	6818      	ldr	r0, [r3, #0]
90013ac6:	b190      	cbz	r0, 90013aee <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
90013ac8:	6803      	ldr	r3, [r0, #0]
90013aca:	4621      	mov	r1, r4
90013acc:	689b      	ldr	r3, [r3, #8]
90013ace:	4798      	blx	r3
90013ad0:	4b0a      	ldr	r3, [pc, #40]	@ (90013afc <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
90013ad2:	6818      	ldr	r0, [r3, #0]
90013ad4:	b118      	cbz	r0, 90013ade <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
90013ad6:	6803      	ldr	r3, [r0, #0]
90013ad8:	4621      	mov	r1, r4
90013ada:	689b      	ldr	r3, [r3, #8]
90013adc:	4798      	blx	r3
90013ade:	4b08      	ldr	r3, [pc, #32]	@ (90013b00 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
90013ae0:	4621      	mov	r1, r4
90013ae2:	6818      	ldr	r0, [r3, #0]
90013ae4:	6803      	ldr	r3, [r0, #0]
90013ae6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
90013aea:	69db      	ldr	r3, [r3, #28]
90013aec:	4718      	bx	r3
90013aee:	bd10      	pop	{r4, pc}
90013af0:	24026302 	.word	0x24026302
90013af4:	24026300 	.word	0x24026300
90013af8:	24026348 	.word	0x24026348
90013afc:	24026344 	.word	0x24026344
90013b00:	2402630c 	.word	0x2402630c

90013b04 <_ZNK8touchgfx4Rect8includesERKS0_>:
90013b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90013b06:	4606      	mov	r6, r0
90013b08:	4608      	mov	r0, r1
90013b0a:	460f      	mov	r7, r1
90013b0c:	f7fc fcdb 	bl	900104c6 <_ZNK8touchgfx4Rect7isEmptyEv>
90013b10:	b9e8      	cbnz	r0, 90013b4e <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
90013b12:	f9b7 5000 	ldrsh.w	r5, [r7]
90013b16:	f9b6 4000 	ldrsh.w	r4, [r6]
90013b1a:	42a5      	cmp	r5, r4
90013b1c:	db17      	blt.n	90013b4e <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
90013b1e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
90013b22:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
90013b26:	429a      	cmp	r2, r3
90013b28:	db11      	blt.n	90013b4e <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
90013b2a:	88b9      	ldrh	r1, [r7, #4]
90013b2c:	440d      	add	r5, r1
90013b2e:	88b1      	ldrh	r1, [r6, #4]
90013b30:	440c      	add	r4, r1
90013b32:	b22d      	sxth	r5, r5
90013b34:	b224      	sxth	r4, r4
90013b36:	42a5      	cmp	r5, r4
90013b38:	dc09      	bgt.n	90013b4e <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
90013b3a:	88f8      	ldrh	r0, [r7, #6]
90013b3c:	4410      	add	r0, r2
90013b3e:	88f2      	ldrh	r2, [r6, #6]
90013b40:	4413      	add	r3, r2
90013b42:	b200      	sxth	r0, r0
90013b44:	b21b      	sxth	r3, r3
90013b46:	4298      	cmp	r0, r3
90013b48:	bfcc      	ite	gt
90013b4a:	2000      	movgt	r0, #0
90013b4c:	2001      	movle	r0, #1
90013b4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

90013b50 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
90013b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90013b52:	4604      	mov	r4, r0
90013b54:	4608      	mov	r0, r1
90013b56:	460d      	mov	r5, r1
90013b58:	f7fc fcb5 	bl	900104c6 <_ZNK8touchgfx4Rect7isEmptyEv>
90013b5c:	b978      	cbnz	r0, 90013b7e <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
90013b5e:	4620      	mov	r0, r4
90013b60:	f7fc fcb1 	bl	900104c6 <_ZNK8touchgfx4Rect7isEmptyEv>
90013b64:	f9b5 6000 	ldrsh.w	r6, [r5]
90013b68:	b150      	cbz	r0, 90013b80 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
90013b6a:	8026      	strh	r6, [r4, #0]
90013b6c:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
90013b70:	8063      	strh	r3, [r4, #2]
90013b72:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
90013b76:	80a3      	strh	r3, [r4, #4]
90013b78:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
90013b7c:	80e3      	strh	r3, [r4, #6]
90013b7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
90013b80:	f9b4 1000 	ldrsh.w	r1, [r4]
90013b84:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
90013b88:	42b1      	cmp	r1, r6
90013b8a:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
90013b8e:	f8b5 c004 	ldrh.w	ip, [r5, #4]
90013b92:	460f      	mov	r7, r1
90013b94:	88ed      	ldrh	r5, [r5, #6]
90013b96:	bfa8      	it	ge
90013b98:	4637      	movge	r7, r6
90013b9a:	4293      	cmp	r3, r2
90013b9c:	4618      	mov	r0, r3
90013b9e:	4466      	add	r6, ip
90013ba0:	f8b4 c004 	ldrh.w	ip, [r4, #4]
90013ba4:	bfa8      	it	ge
90013ba6:	4610      	movge	r0, r2
90013ba8:	442a      	add	r2, r5
90013baa:	88e5      	ldrh	r5, [r4, #6]
90013bac:	4461      	add	r1, ip
90013bae:	b236      	sxth	r6, r6
90013bb0:	8027      	strh	r7, [r4, #0]
90013bb2:	442b      	add	r3, r5
90013bb4:	b209      	sxth	r1, r1
90013bb6:	b212      	sxth	r2, r2
90013bb8:	8060      	strh	r0, [r4, #2]
90013bba:	b21b      	sxth	r3, r3
90013bbc:	428e      	cmp	r6, r1
90013bbe:	bfac      	ite	ge
90013bc0:	ebc7 0106 	rsbge	r1, r7, r6
90013bc4:	ebc7 0101 	rsblt	r1, r7, r1
90013bc8:	429a      	cmp	r2, r3
90013bca:	bfac      	ite	ge
90013bcc:	ebc0 0202 	rsbge	r2, r0, r2
90013bd0:	ebc0 0203 	rsblt	r2, r0, r3
90013bd4:	80a1      	strh	r1, [r4, #4]
90013bd6:	80e2      	strh	r2, [r4, #6]
90013bd8:	e7d1      	b.n	90013b7e <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

90013bdc <_ZN8touchgfx11Application11getInstanceEv>:
90013bdc:	4b01      	ldr	r3, [pc, #4]	@ (90013be4 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
90013bde:	6818      	ldr	r0, [r3, #0]
90013be0:	4770      	bx	lr
90013be2:	bf00      	nop
90013be4:	24026358 	.word	0x24026358

90013be8 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
90013be8:	2300      	movs	r3, #0
90013bea:	b510      	push	{r4, lr}
90013bec:	f8a0 30a4 	strh.w	r3, [r0, #164]	@ 0xa4
90013bf0:	4604      	mov	r4, r0
90013bf2:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
90013bf6:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
90013bfa:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
90013bfe:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	@ 0xa6
90013c02:	429a      	cmp	r2, r3
90013c04:	d90e      	bls.n	90013c24 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
90013c06:	18e2      	adds	r2, r4, r3
90013c08:	f892 2084 	ldrb.w	r2, [r2, #132]	@ 0x84
90013c0c:	b122      	cbz	r2, 90013c18 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
90013c0e:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
90013c12:	6803      	ldr	r3, [r0, #0]
90013c14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
90013c16:	4798      	blx	r3
90013c18:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
90013c1c:	3301      	adds	r3, #1
90013c1e:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
90013c22:	e7ea      	b.n	90013bfa <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
90013c24:	bd10      	pop	{r4, pc}

90013c26 <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
90013c26:	2300      	movs	r3, #0
90013c28:	f100 0284 	add.w	r2, r0, #132	@ 0x84
90013c2c:	30a4      	adds	r0, #164	@ 0xa4
90013c2e:	f820 3c24 	strh.w	r3, [r0, #-36]
90013c32:	f802 3b01 	strb.w	r3, [r2], #1
90013c36:	4282      	cmp	r2, r0
90013c38:	d1fb      	bne.n	90013c32 <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
90013c3a:	4770      	bx	lr

90013c3c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
90013c3c:	b570      	push	{r4, r5, r6, lr}
90013c3e:	4c0b      	ldr	r4, [pc, #44]	@ (90013c6c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
90013c40:	4605      	mov	r5, r0
90013c42:	460e      	mov	r6, r1
90013c44:	6820      	ldr	r0, [r4, #0]
90013c46:	b110      	cbz	r0, 90013c4e <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
90013c48:	6803      	ldr	r3, [r0, #0]
90013c4a:	695b      	ldr	r3, [r3, #20]
90013c4c:	4798      	blx	r3
90013c4e:	1d28      	adds	r0, r5, #4
90013c50:	f7ff ffe9 	bl	90013c26 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
90013c54:	6026      	str	r6, [r4, #0]
90013c56:	6833      	ldr	r3, [r6, #0]
90013c58:	4630      	mov	r0, r6
90013c5a:	68db      	ldr	r3, [r3, #12]
90013c5c:	4798      	blx	r3
90013c5e:	682b      	ldr	r3, [r5, #0]
90013c60:	4628      	mov	r0, r5
90013c62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
90013c64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90013c68:	4718      	bx	r3
90013c6a:	bf00      	nop
90013c6c:	24026348 	.word	0x24026348

90013c70 <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
90013c70:	2300      	movs	r3, #0
90013c72:	f8b0 c080 	ldrh.w	ip, [r0, #128]	@ 0x80
90013c76:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	@ 0xa4
90013c7a:	461a      	mov	r2, r3
90013c7c:	b5f0      	push	{r4, r5, r6, r7, lr}
90013c7e:	461c      	mov	r4, r3
90013c80:	461d      	mov	r5, r3
90013c82:	459c      	cmp	ip, r3
90013c84:	dd1a      	ble.n	90013cbc <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
90013c86:	18c6      	adds	r6, r0, r3
90013c88:	f896 6084 	ldrb.w	r6, [r6, #132]	@ 0x84
90013c8c:	b16e      	cbz	r6, 90013caa <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
90013c8e:	429a      	cmp	r2, r3
90013c90:	d008      	beq.n	90013ca4 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
90013c92:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
90013c96:	fa1f fe82 	uxth.w	lr, r2
90013c9a:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
90013c9e:	1887      	adds	r7, r0, r2
90013ca0:	f887 6084 	strb.w	r6, [r7, #132]	@ 0x84
90013ca4:	3201      	adds	r2, #1
90013ca6:	3301      	adds	r3, #1
90013ca8:	e7eb      	b.n	90013c82 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
90013caa:	4299      	cmp	r1, r3
90013cac:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	@ 0xa6
90013cb0:	bfa8      	it	ge
90013cb2:	3501      	addge	r5, #1
90013cb4:	429e      	cmp	r6, r3
90013cb6:	bfc8      	it	gt
90013cb8:	3401      	addgt	r4, #1
90013cba:	e7f4      	b.n	90013ca6 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
90013cbc:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	@ 0xa6
90013cc0:	1b49      	subs	r1, r1, r5
90013cc2:	1b1b      	subs	r3, r3, r4
90013cc4:	f8a0 10a4 	strh.w	r1, [r0, #164]	@ 0xa4
90013cc8:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
90013ccc:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
90013cd0:	4293      	cmp	r3, r2
90013cd2:	dd03      	ble.n	90013cdc <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
90013cd4:	3b01      	subs	r3, #1
90013cd6:	f8a0 3080 	strh.w	r3, [r0, #128]	@ 0x80
90013cda:	e7f7      	b.n	90013ccc <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
90013cdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

90013ce0 <_ZN8touchgfx11Application15handleTickEventEv>:
90013ce0:	b570      	push	{r4, r5, r6, lr}
90013ce2:	4d16      	ldr	r5, [pc, #88]	@ (90013d3c <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
90013ce4:	4604      	mov	r4, r0
90013ce6:	6828      	ldr	r0, [r5, #0]
90013ce8:	b140      	cbz	r0, 90013cfc <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
90013cea:	7a03      	ldrb	r3, [r0, #8]
90013cec:	b933      	cbnz	r3, 90013cfc <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
90013cee:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
90013cf2:	6803      	ldr	r3, [r0, #0]
90013cf4:	689b      	ldr	r3, [r3, #8]
90013cf6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90013cfa:	4718      	bx	r3
90013cfc:	f894 3138 	ldrb.w	r3, [r4, #312]	@ 0x138
90013d00:	4e0f      	ldr	r6, [pc, #60]	@ (90013d40 <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
90013d02:	b973      	cbnz	r3, 90013d22 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
90013d04:	b168      	cbz	r0, 90013d22 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
90013d06:	7a03      	ldrb	r3, [r0, #8]
90013d08:	b15b      	cbz	r3, 90013d22 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
90013d0a:	6830      	ldr	r0, [r6, #0]
90013d0c:	b110      	cbz	r0, 90013d14 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
90013d0e:	6803      	ldr	r3, [r0, #0]
90013d10:	691b      	ldr	r3, [r3, #16]
90013d12:	4798      	blx	r3
90013d14:	6828      	ldr	r0, [r5, #0]
90013d16:	6803      	ldr	r3, [r0, #0]
90013d18:	68db      	ldr	r3, [r3, #12]
90013d1a:	4798      	blx	r3
90013d1c:	2301      	movs	r3, #1
90013d1e:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
90013d22:	3404      	adds	r4, #4
90013d24:	4620      	mov	r0, r4
90013d26:	f7ff ff5f 	bl	90013be8 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
90013d2a:	4620      	mov	r0, r4
90013d2c:	f7ff ffa0 	bl	90013c70 <_ZN8touchgfx11Application12TimerWidgets7compactEv>
90013d30:	6830      	ldr	r0, [r6, #0]
90013d32:	b110      	cbz	r0, 90013d3a <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
90013d34:	6803      	ldr	r3, [r0, #0]
90013d36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
90013d38:	e7dd      	b.n	90013cf6 <_ZN8touchgfx11Application15handleTickEventEv+0x16>
90013d3a:	bd70      	pop	{r4, r5, r6, pc}
90013d3c:	2402634c 	.word	0x2402634c
90013d40:	24026348 	.word	0x24026348

90013d44 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
90013d44:	4603      	mov	r3, r0
90013d46:	f100 0140 	add.w	r1, r0, #64	@ 0x40
90013d4a:	2200      	movs	r2, #0
90013d4c:	801a      	strh	r2, [r3, #0]
90013d4e:	3308      	adds	r3, #8
90013d50:	f823 2c06 	strh.w	r2, [r3, #-6]
90013d54:	f823 2c04 	strh.w	r2, [r3, #-4]
90013d58:	f823 2c02 	strh.w	r2, [r3, #-2]
90013d5c:	428b      	cmp	r3, r1
90013d5e:	d1f5      	bne.n	90013d4c <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
90013d60:	f8a0 2040 	strh.w	r2, [r0, #64]	@ 0x40
90013d64:	4770      	bx	lr
	...

90013d68 <_ZN8touchgfx11ApplicationC1Ev>:
90013d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90013d6a:	4b1d      	ldr	r3, [pc, #116]	@ (90013de0 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
90013d6c:	4606      	mov	r6, r0
90013d6e:	4604      	mov	r4, r0
90013d70:	2500      	movs	r5, #0
90013d72:	f846 3b04 	str.w	r3, [r6], #4
90013d76:	22a8      	movs	r2, #168	@ 0xa8
90013d78:	2100      	movs	r1, #0
90013d7a:	4630      	mov	r0, r6
90013d7c:	f00f f9e6 	bl	9002314c <memset>
90013d80:	f8a4 5084 	strh.w	r5, [r4, #132]	@ 0x84
90013d84:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
90013d88:	4f16      	ldr	r7, [pc, #88]	@ (90013de4 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
90013d8a:	f7ff ffdb 	bl	90013d44 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
90013d8e:	f104 00ee 	add.w	r0, r4, #238	@ 0xee
90013d92:	f7ff ffd7 	bl	90013d44 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
90013d96:	f8a4 5130 	strh.w	r5, [r4, #304]	@ 0x130
90013d9a:	f8a4 5132 	strh.w	r5, [r4, #306]	@ 0x132
90013d9e:	f8a4 5134 	strh.w	r5, [r4, #308]	@ 0x134
90013da2:	f8a4 5136 	strh.w	r5, [r4, #310]	@ 0x136
90013da6:	f884 5138 	strb.w	r5, [r4, #312]	@ 0x138
90013daa:	490f      	ldr	r1, [pc, #60]	@ (90013de8 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
90013dac:	480f      	ldr	r0, [pc, #60]	@ (90013dec <_ZN8touchgfx11ApplicationC1Ev+0x84>)
90013dae:	f00e fdf9 	bl	900229a4 <CRC_Lock>
90013db2:	4b0f      	ldr	r3, [pc, #60]	@ (90013df0 <_ZN8touchgfx11ApplicationC1Ev+0x88>)
90013db4:	b158      	cbz	r0, 90013dce <_ZN8touchgfx11ApplicationC1Ev+0x66>
90013db6:	801d      	strh	r5, [r3, #0]
90013db8:	2300      	movs	r3, #0
90013dba:	4a0e      	ldr	r2, [pc, #56]	@ (90013df4 <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
90013dbc:	4630      	mov	r0, r6
90013dbe:	6013      	str	r3, [r2, #0]
90013dc0:	4a0d      	ldr	r2, [pc, #52]	@ (90013df8 <_ZN8touchgfx11ApplicationC1Ev+0x90>)
90013dc2:	603b      	str	r3, [r7, #0]
90013dc4:	6013      	str	r3, [r2, #0]
90013dc6:	f7ff ff2e 	bl	90013c26 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
90013dca:	4620      	mov	r0, r4
90013dcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
90013dce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
90013dd2:	2002      	movs	r0, #2
90013dd4:	801a      	strh	r2, [r3, #0]
90013dd6:	6038      	str	r0, [r7, #0]
90013dd8:	f001 fa48 	bl	9001526c <_ZN8touchgfx6Screen4drawEv>
90013ddc:	e7ec      	b.n	90013db8 <_ZN8touchgfx11ApplicationC1Ev+0x50>
90013dde:	bf00      	nop
90013de0:	90026ae8 	.word	0x90026ae8
90013de4:	24026348 	.word	0x24026348
90013de8:	b5e8b5cd 	.word	0xb5e8b5cd
90013dec:	f407a5c2 	.word	0xf407a5c2
90013df0:	24000068 	.word	0x24000068
90013df4:	24026358 	.word	0x24026358
90013df8:	2402634c 	.word	0x2402634c

90013dfc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
90013dfc:	f8b0 3040 	ldrh.w	r3, [r0, #64]	@ 0x40
90013e00:	3b01      	subs	r3, #1
90013e02:	b29b      	uxth	r3, r3
90013e04:	428b      	cmp	r3, r1
90013e06:	f8a0 3040 	strh.w	r3, [r0, #64]	@ 0x40
90013e0a:	b510      	push	{r4, lr}
90013e0c:	d908      	bls.n	90013e20 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
90013e0e:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
90013e12:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
90013e16:	681a      	ldr	r2, [r3, #0]
90013e18:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
90013e1c:	685a      	ldr	r2, [r3, #4]
90013e1e:	6062      	str	r2, [r4, #4]
90013e20:	bd10      	pop	{r4, pc}
	...

90013e24 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
90013e24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90013e28:	b08f      	sub	sp, #60	@ 0x3c
90013e2a:	4b8f      	ldr	r3, [pc, #572]	@ (90014068 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x244>)
90013e2c:	4683      	mov	fp, r0
90013e2e:	ac0a      	add	r4, sp, #40	@ 0x28
90013e30:	e884 0006 	stmia.w	r4, {r1, r2}
90013e34:	f9b3 2000 	ldrsh.w	r2, [r3]
90013e38:	4620      	mov	r0, r4
90013e3a:	4b8c      	ldr	r3, [pc, #560]	@ (9001406c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x248>)
90013e3c:	f9b3 1000 	ldrsh.w	r1, [r3]
90013e40:	f7ff fe0f 	bl	90013a62 <_ZN8touchgfx4Rect10restrictToEss>
90013e44:	4620      	mov	r0, r4
90013e46:	f7fc fb3e 	bl	900104c6 <_ZNK8touchgfx4Rect7isEmptyEv>
90013e4a:	2800      	cmp	r0, #0
90013e4c:	d16a      	bne.n	90013f24 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
90013e4e:	9403      	str	r4, [sp, #12]
90013e50:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
90013e54:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
90013e58:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
90013e5c:	9301      	str	r3, [sp, #4]
90013e5e:	35a4      	adds	r5, #164	@ 0xa4
90013e60:	b15c      	cbz	r4, 90013e7a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
90013e62:	4629      	mov	r1, r5
90013e64:	9803      	ldr	r0, [sp, #12]
90013e66:	f7ff fe4d 	bl	90013b04 <_ZNK8touchgfx4Rect8includesERKS0_>
90013e6a:	3c01      	subs	r4, #1
90013e6c:	b118      	cbz	r0, 90013e76 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52>
90013e6e:	b2a1      	uxth	r1, r4
90013e70:	9801      	ldr	r0, [sp, #4]
90013e72:	f7ff ffc3 	bl	90013dfc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
90013e76:	3d08      	subs	r5, #8
90013e78:	e7f2      	b.n	90013e60 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c>
90013e7a:	f8bb 80ec 	ldrh.w	r8, [fp, #236]	@ 0xec
90013e7e:	f108 33ff 	add.w	r3, r8, #4294967295
90013e82:	f8cd 8010 	str.w	r8, [sp, #16]
90013e86:	9302      	str	r3, [sp, #8]
90013e88:	ea4f 03c8 	mov.w	r3, r8, lsl #3
90013e8c:	f103 04a4 	add.w	r4, r3, #164	@ 0xa4
90013e90:	9306      	str	r3, [sp, #24]
90013e92:	445c      	add	r4, fp
90013e94:	2500      	movs	r5, #0
90013e96:	4626      	mov	r6, r4
90013e98:	f8cd 8014 	str.w	r8, [sp, #20]
90013e9c:	462f      	mov	r7, r5
90013e9e:	9b05      	ldr	r3, [sp, #20]
90013ea0:	2b00      	cmp	r3, #0
90013ea2:	d073      	beq.n	90013f8c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
90013ea4:	9903      	ldr	r1, [sp, #12]
90013ea6:	4630      	mov	r0, r6
90013ea8:	f7ff fdb9 	bl	90013a1e <_ZNK8touchgfx4Rect9intersectERKS0_>
90013eac:	b350      	cbz	r0, 90013f04 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
90013eae:	f9bd e028 	ldrsh.w	lr, [sp, #40]	@ 0x28
90013eb2:	f9b6 c000 	ldrsh.w	ip, [r6]
90013eb6:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	@ 0x2a
90013eba:	45e6      	cmp	lr, ip
90013ebc:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
90013ec0:	db33      	blt.n	90013f2a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
90013ec2:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
90013ec6:	88b3      	ldrh	r3, [r6, #4]
90013ec8:	4472      	add	r2, lr
90013eca:	4463      	add	r3, ip
90013ecc:	b212      	sxth	r2, r2
90013ece:	b21b      	sxth	r3, r3
90013ed0:	429a      	cmp	r2, r3
90013ed2:	dc2a      	bgt.n	90013f2a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
90013ed4:	fa1f f289 	uxth.w	r2, r9
90013ed8:	88f3      	ldrh	r3, [r6, #6]
90013eda:	45ca      	cmp	sl, r9
90013edc:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
90013ee0:	4413      	add	r3, r2
90013ee2:	fa1f fc8a 	uxth.w	ip, sl
90013ee6:	b29b      	uxth	r3, r3
90013ee8:	fa0f fe83 	sxth.w	lr, r3
90013eec:	db0f      	blt.n	90013f0e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
90013eee:	eba3 030c 	sub.w	r3, r3, ip
90013ef2:	1ac9      	subs	r1, r1, r3
90013ef4:	b209      	sxth	r1, r1
90013ef6:	2900      	cmp	r1, #0
90013ef8:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
90013efc:	dd12      	ble.n	90013f24 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
90013efe:	f8ad e02a 	strh.w	lr, [sp, #42]	@ 0x2a
90013f02:	4605      	mov	r5, r0
90013f04:	9b05      	ldr	r3, [sp, #20]
90013f06:	3e08      	subs	r6, #8
90013f08:	3b01      	subs	r3, #1
90013f0a:	9305      	str	r3, [sp, #20]
90013f0c:	e7c7      	b.n	90013e9e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
90013f0e:	4461      	add	r1, ip
90013f10:	b209      	sxth	r1, r1
90013f12:	4571      	cmp	r1, lr
90013f14:	dc38      	bgt.n	90013f88 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
90013f16:	eba2 020c 	sub.w	r2, r2, ip
90013f1a:	b212      	sxth	r2, r2
90013f1c:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
90013f20:	2a00      	cmp	r2, #0
90013f22:	dcee      	bgt.n	90013f02 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
90013f24:	b00f      	add	sp, #60	@ 0x3c
90013f26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90013f2a:	45ca      	cmp	sl, r9
90013f2c:	db2c      	blt.n	90013f88 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
90013f2e:	f8bd 302e 	ldrh.w	r3, [sp, #46]	@ 0x2e
90013f32:	449a      	add	sl, r3
90013f34:	88f3      	ldrh	r3, [r6, #6]
90013f36:	4499      	add	r9, r3
90013f38:	fa0f fa8a 	sxth.w	sl, sl
90013f3c:	fa0f f989 	sxth.w	r9, r9
90013f40:	45ca      	cmp	sl, r9
90013f42:	dc21      	bgt.n	90013f88 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
90013f44:	fa1f f28c 	uxth.w	r2, ip
90013f48:	88b3      	ldrh	r3, [r6, #4]
90013f4a:	45e6      	cmp	lr, ip
90013f4c:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
90013f50:	4413      	add	r3, r2
90013f52:	fa1f f98e 	uxth.w	r9, lr
90013f56:	b29b      	uxth	r3, r3
90013f58:	fa0f fa83 	sxth.w	sl, r3
90013f5c:	db0a      	blt.n	90013f74 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x150>
90013f5e:	eba3 0309 	sub.w	r3, r3, r9
90013f62:	1ac9      	subs	r1, r1, r3
90013f64:	b209      	sxth	r1, r1
90013f66:	2900      	cmp	r1, #0
90013f68:	f8ad 102c 	strh.w	r1, [sp, #44]	@ 0x2c
90013f6c:	ddda      	ble.n	90013f24 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
90013f6e:	f8ad a028 	strh.w	sl, [sp, #40]	@ 0x28
90013f72:	e7c6      	b.n	90013f02 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
90013f74:	4449      	add	r1, r9
90013f76:	b209      	sxth	r1, r1
90013f78:	4551      	cmp	r1, sl
90013f7a:	dc05      	bgt.n	90013f88 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
90013f7c:	eba2 0209 	sub.w	r2, r2, r9
90013f80:	b212      	sxth	r2, r2
90013f82:	f8ad 202c 	strh.w	r2, [sp, #44]	@ 0x2c
90013f86:	e7cb      	b.n	90013f20 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
90013f88:	4607      	mov	r7, r0
90013f8a:	e7bb      	b.n	90013f04 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
90013f8c:	2d00      	cmp	r5, #0
90013f8e:	d181      	bne.n	90013e94 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x70>
90013f90:	2f00      	cmp	r7, #0
90013f92:	f000 81dd 	beq.w	90014350 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
90013f96:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	@ 0x28
90013f9a:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	@ 0x2a
90013f9e:	b2b3      	uxth	r3, r6
90013fa0:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
90013fa4:	b2b9      	uxth	r1, r7
90013fa6:	f8bd a02e 	ldrh.w	sl, [sp, #46]	@ 0x2e
90013faa:	441a      	add	r2, r3
90013fac:	448a      	add	sl, r1
90013fae:	9105      	str	r1, [sp, #20]
90013fb0:	b292      	uxth	r2, r2
90013fb2:	fa1f fa8a 	uxth.w	sl, sl
90013fb6:	fa0f f882 	sxth.w	r8, r2
90013fba:	fa0f f98a 	sxth.w	r9, sl
90013fbe:	e9cd 2307 	strd	r2, r3, [sp, #28]
90013fc2:	9b04      	ldr	r3, [sp, #16]
90013fc4:	2b00      	cmp	r3, #0
90013fc6:	d053      	beq.n	90014070 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
90013fc8:	9903      	ldr	r1, [sp, #12]
90013fca:	4620      	mov	r0, r4
90013fcc:	f7ff fd27 	bl	90013a1e <_ZNK8touchgfx4Rect9intersectERKS0_>
90013fd0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
90013fd4:	b1c0      	cbz	r0, 90014008 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
90013fd6:	f9b4 e000 	ldrsh.w	lr, [r4]
90013fda:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
90013fde:	4576      	cmp	r6, lr
90013fe0:	dc23      	bgt.n	9001402a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
90013fe2:	f8b4 c004 	ldrh.w	ip, [r4, #4]
90013fe6:	44f4      	add	ip, lr
90013fe8:	fa0f fc8c 	sxth.w	ip, ip
90013fec:	45e0      	cmp	r8, ip
90013fee:	db1c      	blt.n	9001402a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
90013ff0:	428f      	cmp	r7, r1
90013ff2:	fa1f fc81 	uxth.w	ip, r1
90013ff6:	88e1      	ldrh	r1, [r4, #6]
90013ff8:	dc0d      	bgt.n	90014016 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
90013ffa:	ebaa 0c0c 	sub.w	ip, sl, ip
90013ffe:	f8a4 9002 	strh.w	r9, [r4, #2]
90014002:	eba1 010c 	sub.w	r1, r1, ip
90014006:	80e1      	strh	r1, [r4, #6]
90014008:	4628      	mov	r0, r5
9001400a:	9904      	ldr	r1, [sp, #16]
9001400c:	3c08      	subs	r4, #8
9001400e:	4605      	mov	r5, r0
90014010:	3901      	subs	r1, #1
90014012:	9104      	str	r1, [sp, #16]
90014014:	e7d3      	b.n	90013fbe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x19a>
90014016:	4461      	add	r1, ip
90014018:	b209      	sxth	r1, r1
9001401a:	4549      	cmp	r1, r9
9001401c:	dcf5      	bgt.n	9001400a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
9001401e:	9905      	ldr	r1, [sp, #20]
90014020:	eba1 0c0c 	sub.w	ip, r1, ip
90014024:	f8a4 c006 	strh.w	ip, [r4, #6]
90014028:	e7ee      	b.n	90014008 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
9001402a:	428f      	cmp	r7, r1
9001402c:	dced      	bgt.n	9001400a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
9001402e:	f8b4 c006 	ldrh.w	ip, [r4, #6]
90014032:	4461      	add	r1, ip
90014034:	b209      	sxth	r1, r1
90014036:	4589      	cmp	r9, r1
90014038:	dbe7      	blt.n	9001400a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
9001403a:	4576      	cmp	r6, lr
9001403c:	fa1f fc8e 	uxth.w	ip, lr
90014040:	88a1      	ldrh	r1, [r4, #4]
90014042:	dc07      	bgt.n	90014054 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x230>
90014044:	eba2 0c0c 	sub.w	ip, r2, ip
90014048:	f8a4 8000 	strh.w	r8, [r4]
9001404c:	eba1 010c 	sub.w	r1, r1, ip
90014050:	80a1      	strh	r1, [r4, #4]
90014052:	e7d9      	b.n	90014008 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
90014054:	4461      	add	r1, ip
90014056:	b209      	sxth	r1, r1
90014058:	4588      	cmp	r8, r1
9001405a:	dbd6      	blt.n	9001400a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
9001405c:	eba3 0c0c 	sub.w	ip, r3, ip
90014060:	f8a4 c004 	strh.w	ip, [r4, #4]
90014064:	e7d0      	b.n	90014008 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
90014066:	bf00      	nop
90014068:	24026302 	.word	0x24026302
9001406c:	24026300 	.word	0x24026300
90014070:	2d00      	cmp	r5, #0
90014072:	f000 816d 	beq.w	90014350 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
90014076:	9b06      	ldr	r3, [sp, #24]
90014078:	445b      	add	r3, fp
9001407a:	461c      	mov	r4, r3
9001407c:	9b02      	ldr	r3, [sp, #8]
9001407e:	3301      	adds	r3, #1
90014080:	f000 8166 	beq.w	90014350 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
90014084:	f104 05a4 	add.w	r5, r4, #164	@ 0xa4
90014088:	9803      	ldr	r0, [sp, #12]
9001408a:	4629      	mov	r1, r5
9001408c:	f7ff fd3a 	bl	90013b04 <_ZNK8touchgfx4Rect8includesERKS0_>
90014090:	b120      	cbz	r0, 9001409c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x278>
90014092:	f8bd 1008 	ldrh.w	r1, [sp, #8]
90014096:	9801      	ldr	r0, [sp, #4]
90014098:	f7ff feb0 	bl	90013dfc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
9001409c:	9903      	ldr	r1, [sp, #12]
9001409e:	4628      	mov	r0, r5
900140a0:	f7ff fcbd 	bl	90013a1e <_ZNK8touchgfx4Rect9intersectERKS0_>
900140a4:	2800      	cmp	r0, #0
900140a6:	f000 809c 	beq.w	900141e2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
900140aa:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	@ 0xa4
900140ae:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
900140b2:	fa1f f189 	uxth.w	r1, r9
900140b6:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
900140ba:	9309      	str	r3, [sp, #36]	@ 0x24
900140bc:	eb01 0c03 	add.w	ip, r1, r3
900140c0:	b283      	uxth	r3, r0
900140c2:	4548      	cmp	r0, r9
900140c4:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	@ 0x2a
900140c8:	fa1f fa8c 	uxth.w	sl, ip
900140cc:	f8bd c02c 	ldrh.w	ip, [sp, #44]	@ 0x2c
900140d0:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	@ 0xa6
900140d4:	eb03 050c 	add.w	r5, r3, ip
900140d8:	b2ad      	uxth	r5, r5
900140da:	9505      	str	r5, [sp, #20]
900140dc:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
900140e0:	9504      	str	r5, [sp, #16]
900140e2:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	@ 0xec
900140e6:	f340 8099 	ble.w	9001421c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3f8>
900140ea:	1a5b      	subs	r3, r3, r1
900140ec:	4596      	cmp	lr, r2
900140ee:	fa0f f08a 	sxth.w	r0, sl
900140f2:	b29b      	uxth	r3, r3
900140f4:	b21e      	sxth	r6, r3
900140f6:	dd2e      	ble.n	90014156 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x332>
900140f8:	9f02      	ldr	r7, [sp, #8]
900140fa:	fa1f fe8e 	uxth.w	lr, lr
900140fe:	b292      	uxth	r2, r2
90014100:	f8bd 402e 	ldrh.w	r4, [sp, #46]	@ 0x2e
90014104:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
90014108:	9f04      	ldr	r7, [sp, #16]
9001410a:	ebae 0102 	sub.w	r1, lr, r2
9001410e:	44a6      	add	lr, r4
90014110:	1a3f      	subs	r7, r7, r0
90014112:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	@ 0xb2
90014116:	b289      	uxth	r1, r1
90014118:	4402      	add	r2, r0
9001411a:	fa0f fe8e 	sxth.w	lr, lr
9001411e:	b20d      	sxth	r5, r1
90014120:	b212      	sxth	r2, r2
90014122:	436f      	muls	r7, r5
90014124:	ebae 0202 	sub.w	r2, lr, r2
90014128:	4372      	muls	r2, r6
9001412a:	4297      	cmp	r7, r2
9001412c:	db09      	blt.n	90014142 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
9001412e:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	@ 0xac
90014132:	f8a8 50b2 	strh.w	r5, [r8, #178]	@ 0xb2
90014136:	449c      	add	ip, r3
90014138:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
9001413c:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
90014140:	e686      	b.n	90013e50 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
90014142:	4421      	add	r1, r4
90014144:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	@ 0xae
90014148:	f8a8 60b0 	strh.w	r6, [r8, #176]	@ 0xb0
9001414c:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
90014150:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
90014154:	e67c      	b.n	90013e50 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
90014156:	9f04      	ldr	r7, [sp, #16]
90014158:	42b8      	cmp	r0, r7
9001415a:	da27      	bge.n	900141ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
9001415c:	9902      	ldr	r1, [sp, #8]
9001415e:	1a3f      	subs	r7, r7, r0
90014160:	f8bd 502e 	ldrh.w	r5, [sp, #46]	@ 0x2e
90014164:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
90014168:	eb05 010e 	add.w	r1, r5, lr
9001416c:	fa1f f881 	uxth.w	r8, r1
90014170:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	@ 0xb2
90014174:	4411      	add	r1, r2
90014176:	fa0f f988 	sxth.w	r9, r8
9001417a:	eba2 020e 	sub.w	r2, r2, lr
9001417e:	eba1 0108 	sub.w	r1, r1, r8
90014182:	4372      	muls	r2, r6
90014184:	b289      	uxth	r1, r1
90014186:	fa0f f881 	sxth.w	r8, r1
9001418a:	fb08 f707 	mul.w	r7, r8, r7
9001418e:	42ba      	cmp	r2, r7
90014190:	dc06      	bgt.n	900141a0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37c>
90014192:	f8a4 90ae 	strh.w	r9, [r4, #174]	@ 0xae
90014196:	f8a4 80b2 	strh.w	r8, [r4, #178]	@ 0xb2
9001419a:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	@ 0xac
9001419e:	e7ca      	b.n	90014136 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x312>
900141a0:	4429      	add	r1, r5
900141a2:	f8a4 60b0 	strh.w	r6, [r4, #176]	@ 0xb0
900141a6:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
900141aa:	e651      	b.n	90013e50 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
900141ac:	9805      	ldr	r0, [sp, #20]
900141ae:	2d06      	cmp	r5, #6
900141b0:	ebaa 0000 	sub.w	r0, sl, r0
900141b4:	b280      	uxth	r0, r0
900141b6:	fa0f fe80 	sxth.w	lr, r0
900141ba:	d817      	bhi.n	900141ec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c8>
900141bc:	9b04      	ldr	r3, [sp, #16]
900141be:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	@ 0xaa
900141c2:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
900141c6:	1c6b      	adds	r3, r5, #1
900141c8:	f8a4 e0a8 	strh.w	lr, [r4, #168]	@ 0xa8
900141cc:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
900141d0:	9b01      	ldr	r3, [sp, #4]
900141d2:	9801      	ldr	r0, [sp, #4]
900141d4:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
900141d8:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
900141dc:	805a      	strh	r2, [r3, #2]
900141de:	809e      	strh	r6, [r3, #4]
900141e0:	80d9      	strh	r1, [r3, #6]
900141e2:	9b02      	ldr	r3, [sp, #8]
900141e4:	3c08      	subs	r4, #8
900141e6:	3b01      	subs	r3, #1
900141e8:	9302      	str	r3, [sp, #8]
900141ea:	e747      	b.n	9001407c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>
900141ec:	9a02      	ldr	r2, [sp, #8]
900141ee:	45b6      	cmp	lr, r6
900141f0:	ea4f 02c2 	mov.w	r2, r2, lsl #3
900141f4:	db0d      	blt.n	90014212 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
900141f6:	449c      	add	ip, r3
900141f8:	445a      	add	r2, fp
900141fa:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
900141fe:	fa1f fc8c 	uxth.w	ip, ip
90014202:	f8a2 e0b0 	strh.w	lr, [r2, #176]	@ 0xb0
90014206:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
9001420a:	448c      	add	ip, r1
9001420c:	f8a2 c0ac 	strh.w	ip, [r2, #172]	@ 0xac
90014210:	e61e      	b.n	90013e50 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
90014212:	445a      	add	r2, fp
90014214:	4484      	add	ip, r0
90014216:	f8a2 60b0 	strh.w	r6, [r2, #176]	@ 0xb0
9001421a:	e78f      	b.n	9001413c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
9001421c:	fa1f f18e 	uxth.w	r1, lr
90014220:	f8bd 602e 	ldrh.w	r6, [sp, #46]	@ 0x2e
90014224:	b293      	uxth	r3, r2
90014226:	4596      	cmp	lr, r2
90014228:	eb01 0806 	add.w	r8, r1, r6
9001422c:	9306      	str	r3, [sp, #24]
9001422e:	fa1f f888 	uxth.w	r8, r8
90014232:	9f06      	ldr	r7, [sp, #24]
90014234:	fa0f f388 	sxth.w	r3, r8
90014238:	9307      	str	r3, [sp, #28]
9001423a:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
9001423e:	443b      	add	r3, r7
90014240:	b29b      	uxth	r3, r3
90014242:	9308      	str	r3, [sp, #32]
90014244:	da24      	bge.n	90014290 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46c>
90014246:	9905      	ldr	r1, [sp, #20]
90014248:	eba3 0308 	sub.w	r3, r3, r8
9001424c:	eba2 020e 	sub.w	r2, r2, lr
90014250:	eba9 0000 	sub.w	r0, r9, r0
90014254:	ebaa 0401 	sub.w	r4, sl, r1
90014258:	b29b      	uxth	r3, r3
9001425a:	b2a4      	uxth	r4, r4
9001425c:	b219      	sxth	r1, r3
9001425e:	b225      	sxth	r5, r4
90014260:	4348      	muls	r0, r1
90014262:	436a      	muls	r2, r5
90014264:	4282      	cmp	r2, r0
90014266:	9a02      	ldr	r2, [sp, #8]
90014268:	ea4f 02c2 	mov.w	r2, r2, lsl #3
9001426c:	445a      	add	r2, fp
9001426e:	dc06      	bgt.n	9001427e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45a>
90014270:	9b07      	ldr	r3, [sp, #28]
90014272:	44a4      	add	ip, r4
90014274:	f8a2 10b2 	strh.w	r1, [r2, #178]	@ 0xb2
90014278:	f8a2 30ae 	strh.w	r3, [r2, #174]	@ 0xae
9001427c:	e75e      	b.n	9001413c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
9001427e:	9904      	ldr	r1, [sp, #16]
90014280:	f8a2 50b0 	strh.w	r5, [r2, #176]	@ 0xb0
90014284:	f8a2 10ac 	strh.w	r1, [r2, #172]	@ 0xac
90014288:	4433      	add	r3, r6
9001428a:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
9001428e:	e5df      	b.n	90013e50 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
90014290:	9f06      	ldr	r7, [sp, #24]
90014292:	9b04      	ldr	r3, [sp, #16]
90014294:	1bc9      	subs	r1, r1, r7
90014296:	fa0f f78a 	sxth.w	r7, sl
9001429a:	b289      	uxth	r1, r1
9001429c:	429f      	cmp	r7, r3
9001429e:	fa0f fe81 	sxth.w	lr, r1
900142a2:	dd23      	ble.n	900142ec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c8>
900142a4:	9a05      	ldr	r2, [sp, #20]
900142a6:	eba9 0000 	sub.w	r0, r9, r0
900142aa:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
900142ae:	ebaa 0202 	sub.w	r2, sl, r2
900142b2:	9d07      	ldr	r5, [sp, #28]
900142b4:	fb0e f000 	mul.w	r0, lr, r0
900142b8:	b292      	uxth	r2, r2
900142ba:	eba5 0a03 	sub.w	sl, r5, r3
900142be:	9b02      	ldr	r3, [sp, #8]
900142c0:	b214      	sxth	r4, r2
900142c2:	00db      	lsls	r3, r3, #3
900142c4:	fb04 fa0a 	mul.w	sl, r4, sl
900142c8:	445b      	add	r3, fp
900142ca:	4550      	cmp	r0, sl
900142cc:	db03      	blt.n	900142d6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4b2>
900142ce:	f8a3 e0b2 	strh.w	lr, [r3, #178]	@ 0xb2
900142d2:	4494      	add	ip, r2
900142d4:	e732      	b.n	9001413c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
900142d6:	9a04      	ldr	r2, [sp, #16]
900142d8:	4431      	add	r1, r6
900142da:	f8a3 40b0 	strh.w	r4, [r3, #176]	@ 0xb0
900142de:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
900142e2:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	@ 0xae
900142e6:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
900142ea:	e75c      	b.n	900141a6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x382>
900142ec:	9b08      	ldr	r3, [sp, #32]
900142ee:	2d06      	cmp	r5, #6
900142f0:	eba3 0308 	sub.w	r3, r3, r8
900142f4:	b29b      	uxth	r3, r3
900142f6:	b218      	sxth	r0, r3
900142f8:	d813      	bhi.n	90014322 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4fe>
900142fa:	9b07      	ldr	r3, [sp, #28]
900142fc:	f8a4 00aa 	strh.w	r0, [r4, #170]	@ 0xaa
90014300:	f8a4 30a6 	strh.w	r3, [r4, #166]	@ 0xa6
90014304:	1c6b      	adds	r3, r5, #1
90014306:	9901      	ldr	r1, [sp, #4]
90014308:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
9001430c:	9b01      	ldr	r3, [sp, #4]
9001430e:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
90014312:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
90014316:	805a      	strh	r2, [r3, #2]
90014318:	9a09      	ldr	r2, [sp, #36]	@ 0x24
9001431a:	f8a3 e006 	strh.w	lr, [r3, #6]
9001431e:	809a      	strh	r2, [r3, #4]
90014320:	e75f      	b.n	900141e2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
90014322:	9c02      	ldr	r4, [sp, #8]
90014324:	4570      	cmp	r0, lr
90014326:	ea4f 04c4 	mov.w	r4, r4, lsl #3
9001432a:	db0d      	blt.n	90014348 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x524>
9001432c:	4431      	add	r1, r6
9001432e:	9b06      	ldr	r3, [sp, #24]
90014330:	445c      	add	r4, fp
90014332:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
90014336:	b289      	uxth	r1, r1
90014338:	f8a4 00b2 	strh.w	r0, [r4, #178]	@ 0xb2
9001433c:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
90014340:	4419      	add	r1, r3
90014342:	f8a4 10ae 	strh.w	r1, [r4, #174]	@ 0xae
90014346:	e583      	b.n	90013e50 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
90014348:	445c      	add	r4, fp
9001434a:	f8a4 e0b2 	strh.w	lr, [r4, #178]	@ 0xb2
9001434e:	e79b      	b.n	90014288 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x464>
90014350:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	@ 0xec
90014354:	2e07      	cmp	r6, #7
90014356:	ea4f 04c6 	mov.w	r4, r6, lsl #3
9001435a:	d812      	bhi.n	90014382 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x55e>
9001435c:	1c75      	adds	r5, r6, #1
9001435e:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
90014362:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	@ 0x2a
90014366:	f8ab 50ec 	strh.w	r5, [fp, #236]	@ 0xec
9001436a:	9d01      	ldr	r5, [sp, #4]
9001436c:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
90014370:	442c      	add	r4, r5
90014372:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	@ 0x2e
90014376:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
9001437a:	8061      	strh	r1, [r4, #2]
9001437c:	80a2      	strh	r2, [r4, #4]
9001437e:	80e3      	strh	r3, [r4, #6]
90014380:	e5d0      	b.n	90013f24 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
90014382:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
90014386:	3e01      	subs	r6, #1
90014388:	445c      	add	r4, fp
9001438a:	f06f 4a00 	mvn.w	sl, #2147483648	@ 0x80000000
9001438e:	f04f 37ff 	mov.w	r7, #4294967295
90014392:	2500      	movs	r5, #0
90014394:	9305      	str	r3, [sp, #20]
90014396:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
9001439a:	1e72      	subs	r2, r6, #1
9001439c:	9302      	str	r3, [sp, #8]
9001439e:	4691      	mov	r9, r2
900143a0:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
900143a4:	9304      	str	r3, [sp, #16]
900143a6:	f104 03a4 	add.w	r3, r4, #164	@ 0xa4
900143aa:	f1b9 3fff 	cmp.w	r9, #4294967295
900143ae:	6818      	ldr	r0, [r3, #0]
900143b0:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
900143b4:	9207      	str	r2, [sp, #28]
900143b6:	bf16      	itet	ne
900143b8:	9905      	ldrne	r1, [sp, #20]
900143ba:	f8dd e00c 	ldreq.w	lr, [sp, #12]
900143be:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
900143c2:	9306      	str	r3, [sp, #24]
900143c4:	f8be 1006 	ldrh.w	r1, [lr, #6]
900143c8:	f8be 8004 	ldrh.w	r8, [lr, #4]
900143cc:	fb18 f801 	smulbb	r8, r8, r1
900143d0:	6859      	ldr	r1, [r3, #4]
900143d2:	e8ac 0003 	stmia.w	ip!, {r0, r1}
900143d6:	4671      	mov	r1, lr
900143d8:	a80c      	add	r0, sp, #48	@ 0x30
900143da:	f7ff fbb9 	bl	90013b50 <_ZN8touchgfx4Rect11expandToFitERKS0_>
900143de:	f8bd 1036 	ldrh.w	r1, [sp, #54]	@ 0x36
900143e2:	f8bd 0034 	ldrh.w	r0, [sp, #52]	@ 0x34
900143e6:	f04f 0c08 	mov.w	ip, #8
900143ea:	9b04      	ldr	r3, [sp, #16]
900143ec:	9a02      	ldr	r2, [sp, #8]
900143ee:	fb10 f001 	smulbb	r0, r0, r1
900143f2:	fb02 8803 	mla	r8, r2, r3, r8
900143f6:	eba0 0108 	sub.w	r1, r0, r8
900143fa:	fb90 f0fc 	sdiv	r0, r0, ip
900143fe:	4288      	cmp	r0, r1
90014400:	dc20      	bgt.n	90014444 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x620>
90014402:	4551      	cmp	r1, sl
90014404:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
90014408:	da03      	bge.n	90014412 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5ee>
9001440a:	b1d9      	cbz	r1, 90014444 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x620>
9001440c:	468a      	mov	sl, r1
9001440e:	464f      	mov	r7, r9
90014410:	4635      	mov	r5, r6
90014412:	f109 39ff 	add.w	r9, r9, #4294967295
90014416:	f119 0f02 	cmn.w	r9, #2
9001441a:	d1c6      	bne.n	900143aa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x586>
9001441c:	4616      	mov	r6, r2
9001441e:	3201      	adds	r2, #1
90014420:	f1a4 0408 	sub.w	r4, r4, #8
90014424:	d1b7      	bne.n	90014396 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x572>
90014426:	9b01      	ldr	r3, [sp, #4]
90014428:	b2ac      	uxth	r4, r5
9001442a:	00ed      	lsls	r5, r5, #3
9001442c:	1958      	adds	r0, r3, r5
9001442e:	1c7b      	adds	r3, r7, #1
90014430:	d10b      	bne.n	9001444a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x626>
90014432:	4601      	mov	r1, r0
90014434:	9803      	ldr	r0, [sp, #12]
90014436:	f7ff fb8b 	bl	90013b50 <_ZN8touchgfx4Rect11expandToFitERKS0_>
9001443a:	4621      	mov	r1, r4
9001443c:	9801      	ldr	r0, [sp, #4]
9001443e:	f7ff fcdd 	bl	90013dfc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
90014442:	e505      	b.n	90013e50 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
90014444:	464f      	mov	r7, r9
90014446:	4635      	mov	r5, r6
90014448:	e7ed      	b.n	90014426 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x602>
9001444a:	9b01      	ldr	r3, [sp, #4]
9001444c:	00ff      	lsls	r7, r7, #3
9001444e:	445d      	add	r5, fp
90014450:	19d9      	adds	r1, r3, r7
90014452:	445f      	add	r7, fp
90014454:	f7ff fb7c 	bl	90013b50 <_ZN8touchgfx4Rect11expandToFitERKS0_>
90014458:	9b03      	ldr	r3, [sp, #12]
9001445a:	cb03      	ldmia	r3!, {r0, r1}
9001445c:	9b03      	ldr	r3, [sp, #12]
9001445e:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
90014462:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
90014466:	f855 0fac 	ldr.w	r0, [r5, #172]!
9001446a:	6869      	ldr	r1, [r5, #4]
9001446c:	c303      	stmia	r3!, {r0, r1}
9001446e:	e7e4      	b.n	9001443a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x616>

90014470 <_ZN8touchgfx11Application10invalidateEv>:
90014470:	4b09      	ldr	r3, [pc, #36]	@ (90014498 <_ZN8touchgfx11Application10invalidateEv+0x28>)
90014472:	b082      	sub	sp, #8
90014474:	2100      	movs	r1, #0
90014476:	f9b3 2000 	ldrsh.w	r2, [r3]
9001447a:	4b08      	ldr	r3, [pc, #32]	@ (9001449c <_ZN8touchgfx11Application10invalidateEv+0x2c>)
9001447c:	9100      	str	r1, [sp, #0]
9001447e:	f9b3 3000 	ldrsh.w	r3, [r3]
90014482:	f8ad 2004 	strh.w	r2, [sp, #4]
90014486:	f8ad 3006 	strh.w	r3, [sp, #6]
9001448a:	ab02      	add	r3, sp, #8
9001448c:	e913 0006 	ldmdb	r3, {r1, r2}
90014490:	b002      	add	sp, #8
90014492:	f7ff bcc7 	b.w	90013e24 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
90014496:	bf00      	nop
90014498:	24026300 	.word	0x24026300
9001449c:	24026302 	.word	0x24026302

900144a0 <_ZN8touchgfx11Application15drawCachedAreasEv>:
900144a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900144a4:	f500 7698 	add.w	r6, r0, #304	@ 0x130
900144a8:	b09b      	sub	sp, #108	@ 0x6c
900144aa:	4604      	mov	r4, r0
900144ac:	4630      	mov	r0, r6
900144ae:	f7fc f80a 	bl	900104c6 <_ZNK8touchgfx4Rect7isEmptyEv>
900144b2:	4605      	mov	r5, r0
900144b4:	b940      	cbnz	r0, 900144c8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x28>
900144b6:	4620      	mov	r0, r4
900144b8:	e896 0006 	ldmia.w	r6, {r1, r2}
900144bc:	f7ff fcb2 	bl	90013e24 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
900144c0:	f8c4 5130 	str.w	r5, [r4, #304]	@ 0x130
900144c4:	f8c4 5134 	str.w	r5, [r4, #308]	@ 0x134
900144c8:	4bc8      	ldr	r3, [pc, #800]	@ (900147ec <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
900144ca:	681b      	ldr	r3, [r3, #0]
900144cc:	2b00      	cmp	r3, #0
900144ce:	d03e      	beq.n	9001454e <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
900144d0:	4dc7      	ldr	r5, [pc, #796]	@ (900147f0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
900144d2:	4628      	mov	r0, r5
900144d4:	f7fb fff7 	bl	900104c6 <_ZNK8touchgfx4Rect7isEmptyEv>
900144d8:	4606      	mov	r6, r0
900144da:	2800      	cmp	r0, #0
900144dc:	d137      	bne.n	9001454e <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
900144de:	4628      	mov	r0, r5
900144e0:	f7ff f9c4 	bl	9001386c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
900144e4:	6829      	ldr	r1, [r5, #0]
900144e6:	686a      	ldr	r2, [r5, #4]
900144e8:	4620      	mov	r0, r4
900144ea:	f7ff fc9b 	bl	90013e24 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
900144ee:	802e      	strh	r6, [r5, #0]
900144f0:	806e      	strh	r6, [r5, #2]
900144f2:	80ae      	strh	r6, [r5, #4]
900144f4:	80ee      	strh	r6, [r5, #6]
900144f6:	ae09      	add	r6, sp, #36	@ 0x24
900144f8:	4630      	mov	r0, r6
900144fa:	f7ff fc23 	bl	90013d44 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
900144fe:	4abd      	ldr	r2, [pc, #756]	@ (900147f4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
90014500:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	@ 0xec
90014504:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
90014508:	8815      	ldrh	r5, [r2, #0]
9001450a:	9202      	str	r2, [sp, #8]
9001450c:	462b      	mov	r3, r5
9001450e:	429f      	cmp	r7, r3
90014510:	d924      	bls.n	9001455c <_ZN8touchgfx11Application15drawCachedAreasEv+0xbc>
90014512:	f8bd 1064 	ldrh.w	r1, [sp, #100]	@ 0x64
90014516:	2907      	cmp	r1, #7
90014518:	d816      	bhi.n	90014548 <_ZN8touchgfx11Application15drawCachedAreasEv+0xa8>
9001451a:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
9001451e:	f930 8033 	ldrsh.w	r8, [r0, r3, lsl #3]
90014522:	f9b2 9002 	ldrsh.w	r9, [r2, #2]
90014526:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
9001452a:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
9001452e:	1c4a      	adds	r2, r1, #1
90014530:	f8ad 2064 	strh.w	r2, [sp, #100]	@ 0x64
90014534:	eb06 02c1 	add.w	r2, r6, r1, lsl #3
90014538:	f826 8031 	strh.w	r8, [r6, r1, lsl #3]
9001453c:	f8a2 9002 	strh.w	r9, [r2, #2]
90014540:	f8a2 e004 	strh.w	lr, [r2, #4]
90014544:	f8a2 c006 	strh.w	ip, [r2, #6]
90014548:	3301      	adds	r3, #1
9001454a:	b29b      	uxth	r3, r3
9001454c:	e7df      	b.n	9001450e <_ZN8touchgfx11Application15drawCachedAreasEv+0x6e>
9001454e:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
90014552:	2b00      	cmp	r3, #0
90014554:	d1cf      	bne.n	900144f6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x56>
90014556:	b01b      	add	sp, #108	@ 0x6c
90014558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001455c:	462f      	mov	r7, r5
9001455e:	f8b4 312e 	ldrh.w	r3, [r4, #302]	@ 0x12e
90014562:	42bb      	cmp	r3, r7
90014564:	d90b      	bls.n	9001457e <_ZN8touchgfx11Application15drawCachedAreasEv+0xde>
90014566:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
9001456a:	3701      	adds	r7, #1
9001456c:	4620      	mov	r0, r4
9001456e:	f8d3 10ee 	ldr.w	r1, [r3, #238]	@ 0xee
90014572:	b2bf      	uxth	r7, r7
90014574:	f8d3 20f2 	ldr.w	r2, [r3, #242]	@ 0xf2
90014578:	f7ff fc54 	bl	90013e24 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
9001457c:	e7ef      	b.n	9001455e <_ZN8touchgfx11Application15drawCachedAreasEv+0xbe>
9001457e:	4a9e      	ldr	r2, [pc, #632]	@ (900147f8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
90014580:	6813      	ldr	r3, [r2, #0]
90014582:	4690      	mov	r8, r2
90014584:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
90014588:	2b01      	cmp	r3, #1
9001458a:	f040 80e4 	bne.w	90014756 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b6>
9001458e:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
90014592:	4629      	mov	r1, r5
90014594:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	@ 0xec
90014598:	2500      	movs	r5, #0
9001459a:	33ae      	adds	r3, #174	@ 0xae
9001459c:	428f      	cmp	r7, r1
9001459e:	f103 0308 	add.w	r3, r3, #8
900145a2:	dd0a      	ble.n	900145ba <_ZN8touchgfx11Application15drawCachedAreasEv+0x11a>
900145a4:	f833 2c08 	ldrh.w	r2, [r3, #-8]
900145a8:	3101      	adds	r1, #1
900145aa:	f833 0c04 	ldrh.w	r0, [r3, #-4]
900145ae:	4402      	add	r2, r0
900145b0:	b212      	sxth	r2, r2
900145b2:	4295      	cmp	r5, r2
900145b4:	bfb8      	it	lt
900145b6:	4615      	movlt	r5, r2
900145b8:	e7f0      	b.n	9001459c <_ZN8touchgfx11Application15drawCachedAreasEv+0xfc>
900145ba:	4b90      	ldr	r3, [pc, #576]	@ (900147fc <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
900145bc:	f8df b238 	ldr.w	fp, [pc, #568]	@ 900147f8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>
900145c0:	881b      	ldrh	r3, [r3, #0]
900145c2:	46d8      	mov	r8, fp
900145c4:	2b0f      	cmp	r3, #15
900145c6:	bf8c      	ite	hi
900145c8:	ea4f 0ad3 	movhi.w	sl, r3, lsr #3
900145cc:	f04f 0a01 	movls.w	sl, #1
900145d0:	2300      	movs	r3, #0
900145d2:	e9cd 3305 	strd	r3, r3, [sp, #20]
900145d6:	f8bd 701a 	ldrh.w	r7, [sp, #26]
900145da:	f8bd 0016 	ldrh.w	r0, [sp, #22]
900145de:	4438      	add	r0, r7
900145e0:	b207      	sxth	r7, r0
900145e2:	f8db 0000 	ldr.w	r0, [fp]
900145e6:	42bd      	cmp	r5, r7
900145e8:	6803      	ldr	r3, [r0, #0]
900145ea:	f340 8084 	ble.w	900146f6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x256>
900145ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
900145f2:	4798      	blx	r3
900145f4:	eb07 030a 	add.w	r3, r7, sl
900145f8:	4298      	cmp	r0, r3
900145fa:	da07      	bge.n	9001460c <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
900145fc:	4285      	cmp	r5, r0
900145fe:	dd05      	ble.n	9001460c <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
90014600:	4287      	cmp	r7, r0
90014602:	dd6d      	ble.n	900146e0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
90014604:	2f00      	cmp	r7, #0
90014606:	dd6b      	ble.n	900146e0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
90014608:	4628      	mov	r0, r5
9001460a:	e004      	b.n	90014616 <_ZN8touchgfx11Application15drawCachedAreasEv+0x176>
9001460c:	4287      	cmp	r7, r0
9001460e:	dcfb      	bgt.n	90014608 <_ZN8touchgfx11Application15drawCachedAreasEv+0x168>
90014610:	42a8      	cmp	r0, r5
90014612:	bfa8      	it	ge
90014614:	4628      	movge	r0, r5
90014616:	4b7a      	ldr	r3, [pc, #488]	@ (90014800 <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>)
90014618:	1bc0      	subs	r0, r0, r7
9001461a:	2200      	movs	r2, #0
9001461c:	f8ad 7016 	strh.w	r7, [sp, #22]
90014620:	f9b3 3000 	ldrsh.w	r3, [r3]
90014624:	f8ad 2014 	strh.w	r2, [sp, #20]
90014628:	f8ad 3018 	strh.w	r3, [sp, #24]
9001462c:	9b02      	ldr	r3, [sp, #8]
9001462e:	f8ad 001a 	strh.w	r0, [sp, #26]
90014632:	881f      	ldrh	r7, [r3, #0]
90014634:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
90014638:	42bb      	cmp	r3, r7
9001463a:	d9cc      	bls.n	900145d6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
9001463c:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
90014640:	ab07      	add	r3, sp, #28
90014642:	f852 0fac 	ldr.w	r0, [r2, #172]!
90014646:	6851      	ldr	r1, [r2, #4]
90014648:	c303      	stmia	r3!, {r0, r1}
9001464a:	a905      	add	r1, sp, #20
9001464c:	a807      	add	r0, sp, #28
9001464e:	f7ff f9e6 	bl	90013a1e <_ZNK8touchgfx4Rect9intersectERKS0_>
90014652:	2800      	cmp	r0, #0
90014654:	d04c      	beq.n	900146f0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x250>
90014656:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
9001465a:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
9001465e:	f8bd 9020 	ldrh.w	r9, [sp, #32]
90014662:	4686      	mov	lr, r0
90014664:	4290      	cmp	r0, r2
90014666:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
9001466a:	4448      	add	r0, r9
9001466c:	f8bd 9018 	ldrh.w	r9, [sp, #24]
90014670:	bfb8      	it	lt
90014672:	4696      	movlt	lr, r2
90014674:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
90014678:	444a      	add	r2, r9
9001467a:	b280      	uxth	r0, r0
9001467c:	4299      	cmp	r1, r3
9001467e:	468c      	mov	ip, r1
90014680:	b292      	uxth	r2, r2
90014682:	9303      	str	r3, [sp, #12]
90014684:	bfb8      	it	lt
90014686:	469c      	movlt	ip, r3
90014688:	b203      	sxth	r3, r0
9001468a:	fa0f f982 	sxth.w	r9, r2
9001468e:	f8ad e01c 	strh.w	lr, [sp, #28]
90014692:	f8ad c01e 	strh.w	ip, [sp, #30]
90014696:	454b      	cmp	r3, r9
90014698:	bfb8      	it	lt
9001469a:	4602      	movlt	r2, r0
9001469c:	9b03      	ldr	r3, [sp, #12]
9001469e:	eba2 020e 	sub.w	r2, r2, lr
900146a2:	f8ad 2020 	strh.w	r2, [sp, #32]
900146a6:	f8bd 2022 	ldrh.w	r2, [sp, #34]	@ 0x22
900146aa:	4411      	add	r1, r2
900146ac:	f8bd 201a 	ldrh.w	r2, [sp, #26]
900146b0:	4413      	add	r3, r2
900146b2:	b289      	uxth	r1, r1
900146b4:	b29b      	uxth	r3, r3
900146b6:	b208      	sxth	r0, r1
900146b8:	b21a      	sxth	r2, r3
900146ba:	4290      	cmp	r0, r2
900146bc:	bfb8      	it	lt
900146be:	460b      	movlt	r3, r1
900146c0:	eba3 030c 	sub.w	r3, r3, ip
900146c4:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
900146c8:	a807      	add	r0, sp, #28
900146ca:	f7fb fefc 	bl	900104c6 <_ZNK8touchgfx4Rect7isEmptyEv>
900146ce:	b920      	cbnz	r0, 900146da <_ZN8touchgfx11Application15drawCachedAreasEv+0x23a>
900146d0:	6823      	ldr	r3, [r4, #0]
900146d2:	a907      	add	r1, sp, #28
900146d4:	4620      	mov	r0, r4
900146d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
900146d8:	4798      	blx	r3
900146da:	3701      	adds	r7, #1
900146dc:	b2bf      	uxth	r7, r7
900146de:	e7a9      	b.n	90014634 <_ZN8touchgfx11Application15drawCachedAreasEv+0x194>
900146e0:	f8d8 0000 	ldr.w	r0, [r8]
900146e4:	2101      	movs	r1, #1
900146e6:	6803      	ldr	r3, [r0, #0]
900146e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
900146ec:	4798      	blx	r3
900146ee:	e772      	b.n	900145d6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
900146f0:	e9cd 0007 	strd	r0, r0, [sp, #28]
900146f4:	e7e8      	b.n	900146c8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x228>
900146f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
900146f8:	4798      	blx	r3
900146fa:	4b42      	ldr	r3, [pc, #264]	@ (90014804 <_ZN8touchgfx11Application15drawCachedAreasEv+0x364>)
900146fc:	781b      	ldrb	r3, [r3, #0]
900146fe:	2b00      	cmp	r3, #0
90014700:	f43f af29 	beq.w	90014556 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
90014704:	2300      	movs	r3, #0
90014706:	f8bd 5064 	ldrh.w	r5, [sp, #100]	@ 0x64
9001470a:	f104 00ee 	add.w	r0, r4, #238	@ 0xee
9001470e:	f8a4 312e 	strh.w	r3, [r4, #302]	@ 0x12e
90014712:	9b02      	ldr	r3, [sp, #8]
90014714:	881b      	ldrh	r3, [r3, #0]
90014716:	429d      	cmp	r5, r3
90014718:	f67f af1d 	bls.w	90014556 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
9001471c:	f8b4 112e 	ldrh.w	r1, [r4, #302]	@ 0x12e
90014720:	2907      	cmp	r1, #7
90014722:	d815      	bhi.n	90014750 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b0>
90014724:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
90014728:	f936 8033 	ldrsh.w	r8, [r6, r3, lsl #3]
9001472c:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
90014730:	f9b2 c004 	ldrsh.w	ip, [r2, #4]
90014734:	f9b2 7006 	ldrsh.w	r7, [r2, #6]
90014738:	1c4a      	adds	r2, r1, #1
9001473a:	f8a4 212e 	strh.w	r2, [r4, #302]	@ 0x12e
9001473e:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
90014742:	f820 8031 	strh.w	r8, [r0, r1, lsl #3]
90014746:	f8a2 e002 	strh.w	lr, [r2, #2]
9001474a:	f8a2 c004 	strh.w	ip, [r2, #4]
9001474e:	80d7      	strh	r7, [r2, #6]
90014750:	3301      	adds	r3, #1
90014752:	b29b      	uxth	r3, r3
90014754:	e7df      	b.n	90014716 <_ZN8touchgfx11Application15drawCachedAreasEv+0x276>
90014756:	2b02      	cmp	r3, #2
90014758:	f040 8135 	bne.w	900149c6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x526>
9001475c:	4b2a      	ldr	r3, [pc, #168]	@ (90014808 <_ZN8touchgfx11Application15drawCachedAreasEv+0x368>)
9001475e:	f104 09ac 	add.w	r9, r4, #172	@ 0xac
90014762:	781b      	ldrb	r3, [r3, #0]
90014764:	2b01      	cmp	r3, #1
90014766:	f000 809c 	beq.w	900148a2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
9001476a:	9b02      	ldr	r3, [sp, #8]
9001476c:	f8b4 20ec 	ldrh.w	r2, [r4, #236]	@ 0xec
90014770:	f8b3 b000 	ldrh.w	fp, [r3]
90014774:	f10b 0b01 	add.w	fp, fp, #1
90014778:	fa1f fb8b 	uxth.w	fp, fp
9001477c:	2a00      	cmp	r2, #0
9001477e:	d0bc      	beq.n	900146fa <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
90014780:	f8b4 50ae 	ldrh.w	r5, [r4, #174]	@ 0xae
90014784:	4659      	mov	r1, fp
90014786:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	@ 0xb2
9001478a:	f04f 0800 	mov.w	r8, #0
9001478e:	441d      	add	r5, r3
90014790:	b22d      	sxth	r5, r5
90014792:	b28b      	uxth	r3, r1
90014794:	ea4f 07c8 	mov.w	r7, r8, lsl #3
90014798:	429a      	cmp	r2, r3
9001479a:	f240 80c0 	bls.w	9001491e <_ZN8touchgfx11Application15drawCachedAreasEv+0x47e>
9001479e:	4427      	add	r7, r4
900147a0:	eb04 0ec1 	add.w	lr, r4, r1, lsl #3
900147a4:	4608      	mov	r0, r1
900147a6:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
900147aa:	f9be c0ae 	ldrsh.w	ip, [lr, #174]	@ 0xae
900147ae:	4563      	cmp	r3, ip
900147b0:	f340 80a2 	ble.w	900148f8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x458>
900147b4:	f8be 50b2 	ldrh.w	r5, [lr, #178]	@ 0xb2
900147b8:	4465      	add	r5, ip
900147ba:	b22d      	sxth	r5, r5
900147bc:	429d      	cmp	r5, r3
900147be:	bfa8      	it	ge
900147c0:	461d      	movge	r5, r3
900147c2:	3101      	adds	r1, #1
900147c4:	4680      	mov	r8, r0
900147c6:	e7e4      	b.n	90014792 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f2>
900147c8:	d10b      	bne.n	900147e2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x342>
900147ca:	f9b5 c0b2 	ldrsh.w	ip, [r5, #178]	@ 0xb2
900147ce:	f9ba 10b2 	ldrsh.w	r1, [sl, #178]	@ 0xb2
900147d2:	458c      	cmp	ip, r1
900147d4:	bfb4      	ite	lt
900147d6:	469c      	movlt	ip, r3
900147d8:	46bc      	movge	ip, r7
900147da:	4572      	cmp	r2, lr
900147dc:	bfb8      	it	lt
900147de:	4672      	movlt	r2, lr
900147e0:	e087      	b.n	900148f2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x452>
900147e2:	428a      	cmp	r2, r1
900147e4:	46bc      	mov	ip, r7
900147e6:	bfb8      	it	lt
900147e8:	460a      	movlt	r2, r1
900147ea:	e082      	b.n	900148f2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x452>
900147ec:	24026344 	.word	0x24026344
900147f0:	24026350 	.word	0x24026350
900147f4:	24000068 	.word	0x24000068
900147f8:	2402630c 	.word	0x2402630c
900147fc:	24026302 	.word	0x24026302
90014800:	24026300 	.word	0x24026300
90014804:	2402630a 	.word	0x2402630a
90014808:	24026304 	.word	0x24026304
9001480c:	1961      	adds	r1, r4, r5
9001480e:	ab07      	add	r3, sp, #28
90014810:	f851 0fac 	ldr.w	r0, [r1, #172]!
90014814:	6849      	ldr	r1, [r1, #4]
90014816:	c303      	stmia	r3!, {r0, r1}
90014818:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
9001481c:	a807      	add	r0, sp, #28
9001481e:	f8bd 101c 	ldrh.w	r1, [sp, #28]
90014822:	2b13      	cmp	r3, #19
90014824:	440b      	add	r3, r1
90014826:	bfd8      	it	le
90014828:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
9001482c:	1a9b      	subs	r3, r3, r2
9001482e:	f8ad 201c 	strh.w	r2, [sp, #28]
90014832:	f8ad 3020 	strh.w	r3, [sp, #32]
90014836:	f7ff f833 	bl	900138a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001483a:	a807      	add	r0, sp, #28
9001483c:	f7fb fe43 	bl	900104c6 <_ZNK8touchgfx4Rect7isEmptyEv>
90014840:	bb78      	cbnz	r0, 900148a2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
90014842:	f9bd c022 	ldrsh.w	ip, [sp, #34]	@ 0x22
90014846:	4425      	add	r5, r4
90014848:	f8d8 0000 	ldr.w	r0, [r8]
9001484c:	f1bc 0f14 	cmp.w	ip, #20
90014850:	f8bd 3020 	ldrh.w	r3, [sp, #32]
90014854:	f8d0 e000 	ldr.w	lr, [r0]
90014858:	bfa8      	it	ge
9001485a:	f04f 0c14 	movge.w	ip, #20
9001485e:	f8bd 201e 	ldrh.w	r2, [sp, #30]
90014862:	f8bd 101c 	ldrh.w	r1, [sp, #28]
90014866:	fa1f fc8c 	uxth.w	ip, ip
9001486a:	f8cd c000 	str.w	ip, [sp]
9001486e:	f8de a090 	ldr.w	sl, [lr, #144]	@ 0x90
90014872:	47d0      	blx	sl
90014874:	4682      	mov	sl, r0
90014876:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
9001487a:	a807      	add	r0, sp, #28
9001487c:	f7fe fff6 	bl	9001386c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
90014880:	6823      	ldr	r3, [r4, #0]
90014882:	4620      	mov	r0, r4
90014884:	a907      	add	r1, sp, #28
90014886:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
90014888:	4798      	blx	r3
9001488a:	f8b5 00b0 	ldrh.w	r0, [r5, #176]	@ 0xb0
9001488e:	eba0 000a 	sub.w	r0, r0, sl
90014892:	b200      	sxth	r0, r0
90014894:	f8a5 00b0 	strh.w	r0, [r5, #176]	@ 0xb0
90014898:	b918      	cbnz	r0, 900148a2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
9001489a:	b2b9      	uxth	r1, r7
9001489c:	4648      	mov	r0, r9
9001489e:	f7ff faad 	bl	90013dfc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
900148a2:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	@ 0xec
900148a6:	f1bb 0f00 	cmp.w	fp, #0
900148aa:	f43f af26 	beq.w	900146fa <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
900148ae:	9b02      	ldr	r3, [sp, #8]
900148b0:	2700      	movs	r7, #0
900148b2:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	@ 0xac
900148b6:	881b      	ldrh	r3, [r3, #0]
900148b8:	3301      	adds	r3, #1
900148ba:	b29b      	uxth	r3, r3
900148bc:	b299      	uxth	r1, r3
900148be:	00fd      	lsls	r5, r7, #3
900148c0:	458b      	cmp	fp, r1
900148c2:	d9a3      	bls.n	9001480c <_ZN8touchgfx11Application15drawCachedAreasEv+0x36c>
900148c4:	4425      	add	r5, r4
900148c6:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
900148ca:	469c      	mov	ip, r3
900148cc:	f8b5 10b0 	ldrh.w	r1, [r5, #176]	@ 0xb0
900148d0:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	@ 0xac
900148d4:	f9ba e0ac 	ldrsh.w	lr, [sl, #172]	@ 0xac
900148d8:	4408      	add	r0, r1
900148da:	f8ba 10b0 	ldrh.w	r1, [sl, #176]	@ 0xb0
900148de:	4471      	add	r1, lr
900148e0:	b200      	sxth	r0, r0
900148e2:	b209      	sxth	r1, r1
900148e4:	4288      	cmp	r0, r1
900148e6:	f6bf af6f 	bge.w	900147c8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x328>
900148ea:	4586      	cmp	lr, r0
900148ec:	4672      	mov	r2, lr
900148ee:	bfb8      	it	lt
900148f0:	4602      	movlt	r2, r0
900148f2:	3301      	adds	r3, #1
900148f4:	4667      	mov	r7, ip
900148f6:	e7e1      	b.n	900148bc <_ZN8touchgfx11Application15drawCachedAreasEv+0x41c>
900148f8:	d10c      	bne.n	90014914 <_ZN8touchgfx11Application15drawCachedAreasEv+0x474>
900148fa:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	@ 0xb0
900148fe:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	@ 0xb0
90014902:	4287      	cmp	r7, r0
90014904:	bfb4      	ite	lt
90014906:	4608      	movlt	r0, r1
90014908:	4640      	movge	r0, r8
9001490a:	f8be 70b2 	ldrh.w	r7, [lr, #178]	@ 0xb2
9001490e:	443b      	add	r3, r7
90014910:	b21b      	sxth	r3, r3
90014912:	e753      	b.n	900147bc <_ZN8touchgfx11Application15drawCachedAreasEv+0x31c>
90014914:	4565      	cmp	r5, ip
90014916:	4640      	mov	r0, r8
90014918:	bfa8      	it	ge
9001491a:	4665      	movge	r5, ip
9001491c:	e751      	b.n	900147c2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x322>
9001491e:	eb09 0007 	add.w	r0, r9, r7
90014922:	4427      	add	r7, r4
90014924:	9203      	str	r2, [sp, #12]
90014926:	f9b7 a0b2 	ldrsh.w	sl, [r7, #178]	@ 0xb2
9001492a:	f1ba 0f13 	cmp.w	sl, #19
9001492e:	bfde      	ittt	le
90014930:	f8b7 50ae 	ldrhle.w	r5, [r7, #174]	@ 0xae
90014934:	4455      	addle	r5, sl
90014936:	b22d      	sxthle	r5, r5
90014938:	f7fb fdc5 	bl	900104c6 <_ZNK8touchgfx4Rect7isEmptyEv>
9001493c:	9a03      	ldr	r2, [sp, #12]
9001493e:	2800      	cmp	r0, #0
90014940:	f47f af1c 	bne.w	9001477c <_ZN8touchgfx11Application15drawCachedAreasEv+0x2dc>
90014944:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	@ 0xae
90014948:	fa1f fa8a 	uxth.w	sl, sl
9001494c:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
90014950:	1aad      	subs	r5, r5, r2
90014952:	4829      	ldr	r0, [pc, #164]	@ (900149f8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x558>)
90014954:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	@ 0xac
90014958:	2d14      	cmp	r5, #20
9001495a:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	@ 0xb0
9001495e:	6800      	ldr	r0, [r0, #0]
90014960:	bfa8      	it	ge
90014962:	2514      	movge	r5, #20
90014964:	f8ad 101c 	strh.w	r1, [sp, #28]
90014968:	f8ad 201e 	strh.w	r2, [sp, #30]
9001496c:	b289      	uxth	r1, r1
9001496e:	f8ad 3020 	strh.w	r3, [sp, #32]
90014972:	b2ad      	uxth	r5, r5
90014974:	f8d0 c000 	ldr.w	ip, [r0]
90014978:	b292      	uxth	r2, r2
9001497a:	4555      	cmp	r5, sl
9001497c:	bf94      	ite	ls
9001497e:	9500      	strls	r5, [sp, #0]
90014980:	f8cd a000 	strhi.w	sl, [sp]
90014984:	b29b      	uxth	r3, r3
90014986:	f8dc 5090 	ldr.w	r5, [ip, #144]	@ 0x90
9001498a:	47a8      	blx	r5
9001498c:	6823      	ldr	r3, [r4, #0]
9001498e:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
90014992:	a907      	add	r1, sp, #28
90014994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
90014996:	4620      	mov	r0, r4
90014998:	4798      	blx	r3
9001499a:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
9001499e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
900149a2:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	@ 0xae
900149a6:	1a5b      	subs	r3, r3, r1
900149a8:	440a      	add	r2, r1
900149aa:	b21b      	sxth	r3, r3
900149ac:	f8a7 20ae 	strh.w	r2, [r7, #174]	@ 0xae
900149b0:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
900149b4:	2b00      	cmp	r3, #0
900149b6:	f47f aed8 	bne.w	9001476a <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
900149ba:	fa1f f188 	uxth.w	r1, r8
900149be:	4648      	mov	r0, r9
900149c0:	f7ff fa1c 	bl	90013dfc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
900149c4:	e6d1      	b.n	9001476a <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
900149c6:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
900149ca:	42ab      	cmp	r3, r5
900149cc:	f67f ae95 	bls.w	900146fa <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
900149d0:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
900149d4:	ab07      	add	r3, sp, #28
900149d6:	f852 0fac 	ldr.w	r0, [r2, #172]!
900149da:	6851      	ldr	r1, [r2, #4]
900149dc:	c303      	stmia	r3!, {r0, r1}
900149de:	a807      	add	r0, sp, #28
900149e0:	f7fb fd71 	bl	900104c6 <_ZNK8touchgfx4Rect7isEmptyEv>
900149e4:	b920      	cbnz	r0, 900149f0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x550>
900149e6:	6823      	ldr	r3, [r4, #0]
900149e8:	a907      	add	r1, sp, #28
900149ea:	4620      	mov	r0, r4
900149ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
900149ee:	4798      	blx	r3
900149f0:	3501      	adds	r5, #1
900149f2:	b2ad      	uxth	r5, r5
900149f4:	e7e7      	b.n	900149c6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x526>
900149f6:	bf00      	nop
900149f8:	2402630c 	.word	0x2402630c

900149fc <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
900149fc:	4b03      	ldr	r3, [pc, #12]	@ (90014a0c <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
900149fe:	2200      	movs	r2, #0
90014a00:	801a      	strh	r2, [r3, #0]
90014a02:	805a      	strh	r2, [r3, #2]
90014a04:	809a      	strh	r2, [r3, #4]
90014a06:	80da      	strh	r2, [r3, #6]
90014a08:	4770      	bx	lr
90014a0a:	bf00      	nop
90014a0c:	24026350 	.word	0x24026350

90014a10 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
90014a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90014a14:	b09d      	sub	sp, #116	@ 0x74
90014a16:	4606      	mov	r6, r0
90014a18:	4614      	mov	r4, r2
90014a1a:	468a      	mov	sl, r1
90014a1c:	a803      	add	r0, sp, #12
90014a1e:	461d      	mov	r5, r3
90014a20:	f000 fd9e 	bl	90015560 <_ZN8touchgfx12TextProviderC1Ev>
90014a24:	6833      	ldr	r3, [r6, #0]
90014a26:	4630      	mov	r0, r6
90014a28:	f242 0b0b 	movw	fp, #8203	@ 0x200b
90014a2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
90014a2e:	4798      	blx	r3
90014a30:	6833      	ldr	r3, [r6, #0]
90014a32:	4607      	mov	r7, r0
90014a34:	4630      	mov	r0, r6
90014a36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
90014a38:	4798      	blx	r3
90014a3a:	462a      	mov	r2, r5
90014a3c:	2500      	movs	r5, #0
90014a3e:	4621      	mov	r1, r4
90014a40:	9000      	str	r0, [sp, #0]
90014a42:	463b      	mov	r3, r7
90014a44:	462c      	mov	r4, r5
90014a46:	46a9      	mov	r9, r5
90014a48:	46a8      	mov	r8, r5
90014a4a:	a803      	add	r0, sp, #12
90014a4c:	f000 fde3 	bl	90015616 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
90014a50:	2300      	movs	r3, #0
90014a52:	9302      	str	r3, [sp, #8]
90014a54:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
90014a58:	429c      	cmp	r4, r3
90014a5a:	d002      	beq.n	90014a62 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
90014a5c:	455c      	cmp	r4, fp
90014a5e:	bf18      	it	ne
90014a60:	4625      	movne	r5, r4
90014a62:	ab02      	add	r3, sp, #8
90014a64:	4632      	mov	r2, r6
90014a66:	4651      	mov	r1, sl
90014a68:	a803      	add	r0, sp, #12
90014a6a:	f001 f8d9 	bl	90015c20 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
90014a6e:	4604      	mov	r4, r0
90014a70:	b108      	cbz	r0, 90014a76 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
90014a72:	280a      	cmp	r0, #10
90014a74:	d10a      	bne.n	90014a8c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
90014a76:	45c1      	cmp	r9, r8
90014a78:	bf38      	it	cc
90014a7a:	46c1      	movcc	r9, r8
90014a7c:	f04f 0800 	mov.w	r8, #0
90014a80:	2c00      	cmp	r4, #0
90014a82:	d1e5      	bne.n	90014a50 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
90014a84:	4648      	mov	r0, r9
90014a86:	b01d      	add	sp, #116	@ 0x74
90014a88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90014a8c:	9a02      	ldr	r2, [sp, #8]
90014a8e:	2a00      	cmp	r2, #0
90014a90:	d0de      	beq.n	90014a50 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
90014a92:	7b57      	ldrb	r7, [r2, #13]
90014a94:	4629      	mov	r1, r5
90014a96:	6833      	ldr	r3, [r6, #0]
90014a98:	007f      	lsls	r7, r7, #1
90014a9a:	8894      	ldrh	r4, [r2, #4]
90014a9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
90014a9e:	f407 7080 	and.w	r0, r7, #256	@ 0x100
90014aa2:	7a97      	ldrb	r7, [r2, #10]
90014aa4:	4307      	orrs	r7, r0
90014aa6:	4630      	mov	r0, r6
90014aa8:	4798      	blx	r3
90014aaa:	4438      	add	r0, r7
90014aac:	4480      	add	r8, r0
90014aae:	fa1f f888 	uxth.w	r8, r8
90014ab2:	e7e5      	b.n	90014a80 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

90014ab4 <_ZNK8touchgfx4Font12getCharWidthEt>:
90014ab4:	b508      	push	{r3, lr}
90014ab6:	6803      	ldr	r3, [r0, #0]
90014ab8:	68db      	ldr	r3, [r3, #12]
90014aba:	4798      	blx	r3
90014abc:	b128      	cbz	r0, 90014aca <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
90014abe:	7b43      	ldrb	r3, [r0, #13]
90014ac0:	7a80      	ldrb	r0, [r0, #10]
90014ac2:	005b      	lsls	r3, r3, #1
90014ac4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
90014ac8:	4318      	orrs	r0, r3
90014aca:	bd08      	pop	{r3, pc}

90014acc <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
90014acc:	b40e      	push	{r1, r2, r3}
90014ace:	b5f0      	push	{r4, r5, r6, r7, lr}
90014ad0:	b09e      	sub	sp, #120	@ 0x78
90014ad2:	4605      	mov	r5, r0
90014ad4:	ab23      	add	r3, sp, #140	@ 0x8c
90014ad6:	a805      	add	r0, sp, #20
90014ad8:	f853 4b04 	ldr.w	r4, [r3], #4
90014adc:	9303      	str	r3, [sp, #12]
90014ade:	f000 fd3f 	bl	90015560 <_ZN8touchgfx12TextProviderC1Ev>
90014ae2:	682b      	ldr	r3, [r5, #0]
90014ae4:	4628      	mov	r0, r5
90014ae6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
90014ae8:	4798      	blx	r3
90014aea:	682b      	ldr	r3, [r5, #0]
90014aec:	4606      	mov	r6, r0
90014aee:	4628      	mov	r0, r5
90014af0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
90014af2:	4798      	blx	r3
90014af4:	4633      	mov	r3, r6
90014af6:	4621      	mov	r1, r4
90014af8:	ae1e      	add	r6, sp, #120	@ 0x78
90014afa:	2400      	movs	r4, #0
90014afc:	9000      	str	r0, [sp, #0]
90014afe:	9a03      	ldr	r2, [sp, #12]
90014b00:	a805      	add	r0, sp, #20
90014b02:	f000 fd88 	bl	90015616 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
90014b06:	f846 4d68 	str.w	r4, [r6, #-104]!
90014b0a:	462a      	mov	r2, r5
90014b0c:	4633      	mov	r3, r6
90014b0e:	4621      	mov	r1, r4
90014b10:	a805      	add	r0, sp, #20
90014b12:	f001 f885 	bl	90015c20 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
90014b16:	b300      	cbz	r0, 90014b5a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
90014b18:	280a      	cmp	r0, #10
90014b1a:	d01a      	beq.n	90014b52 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
90014b1c:	9f04      	ldr	r7, [sp, #16]
90014b1e:	b1c7      	cbz	r7, 90014b52 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
90014b20:	7b78      	ldrb	r0, [r7, #13]
90014b22:	7a3b      	ldrb	r3, [r7, #8]
90014b24:	00c1      	lsls	r1, r0, #3
90014b26:	88ea      	ldrh	r2, [r5, #6]
90014b28:	f401 7180 	and.w	r1, r1, #256	@ 0x100
90014b2c:	4319      	orrs	r1, r3
90014b2e:	0643      	lsls	r3, r0, #25
90014b30:	ea4f 1000 	mov.w	r0, r0, lsl #4
90014b34:	bf48      	it	mi
90014b36:	f5a1 7300 	submi.w	r3, r1, #512	@ 0x200
90014b3a:	f400 7080 	and.w	r0, r0, #256	@ 0x100
90014b3e:	bf48      	it	mi
90014b40:	b219      	sxthmi	r1, r3
90014b42:	79fb      	ldrb	r3, [r7, #7]
90014b44:	4303      	orrs	r3, r0
90014b46:	4413      	add	r3, r2
90014b48:	1a5b      	subs	r3, r3, r1
90014b4a:	b21b      	sxth	r3, r3
90014b4c:	429c      	cmp	r4, r3
90014b4e:	bfb8      	it	lt
90014b50:	461c      	movlt	r4, r3
90014b52:	4633      	mov	r3, r6
90014b54:	462a      	mov	r2, r5
90014b56:	2100      	movs	r1, #0
90014b58:	e7da      	b.n	90014b10 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
90014b5a:	b2a0      	uxth	r0, r4
90014b5c:	b01e      	add	sp, #120	@ 0x78
90014b5e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
90014b62:	b003      	add	sp, #12
90014b64:	4770      	bx	lr

90014b66 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
90014b66:	7a43      	ldrb	r3, [r0, #9]
90014b68:	8880      	ldrh	r0, [r0, #4]
90014b6a:	4418      	add	r0, r3
90014b6c:	b280      	uxth	r0, r0
90014b6e:	4770      	bx	lr

90014b70 <_ZNK8touchgfx4Font13getFontHeightEv>:
90014b70:	6803      	ldr	r3, [r0, #0]
90014b72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
90014b74:	4718      	bx	r3

90014b76 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
90014b76:	b40e      	push	{r1, r2, r3}
90014b78:	b570      	push	{r4, r5, r6, lr}
90014b7a:	b09d      	sub	sp, #116	@ 0x74
90014b7c:	4604      	mov	r4, r0
90014b7e:	ab21      	add	r3, sp, #132	@ 0x84
90014b80:	a803      	add	r0, sp, #12
90014b82:	f853 5b04 	ldr.w	r5, [r3], #4
90014b86:	9302      	str	r3, [sp, #8]
90014b88:	f000 fcea 	bl	90015560 <_ZN8touchgfx12TextProviderC1Ev>
90014b8c:	6823      	ldr	r3, [r4, #0]
90014b8e:	4620      	mov	r0, r4
90014b90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
90014b92:	4798      	blx	r3
90014b94:	6823      	ldr	r3, [r4, #0]
90014b96:	4606      	mov	r6, r0
90014b98:	4620      	mov	r0, r4
90014b9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
90014b9c:	2401      	movs	r4, #1
90014b9e:	4798      	blx	r3
90014ba0:	4633      	mov	r3, r6
90014ba2:	9000      	str	r0, [sp, #0]
90014ba4:	4629      	mov	r1, r5
90014ba6:	9a02      	ldr	r2, [sp, #8]
90014ba8:	a803      	add	r0, sp, #12
90014baa:	f000 fd34 	bl	90015616 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
90014bae:	a803      	add	r0, sp, #12
90014bb0:	f001 f902 	bl	90015db8 <_ZN8touchgfx12TextProvider11getNextCharEv>
90014bb4:	b2a3      	uxth	r3, r4
90014bb6:	b138      	cbz	r0, 90014bc8 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
90014bb8:	280a      	cmp	r0, #10
90014bba:	a803      	add	r0, sp, #12
90014bbc:	bf04      	itt	eq
90014bbe:	3301      	addeq	r3, #1
90014bc0:	b21c      	sxtheq	r4, r3
90014bc2:	f001 f8f9 	bl	90015db8 <_ZN8touchgfx12TextProvider11getNextCharEv>
90014bc6:	e7f5      	b.n	90014bb4 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
90014bc8:	4618      	mov	r0, r3
90014bca:	b01d      	add	sp, #116	@ 0x74
90014bcc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90014bd0:	b003      	add	sp, #12
90014bd2:	4770      	bx	lr

90014bd4 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
90014bd4:	b40e      	push	{r1, r2, r3}
90014bd6:	b5f0      	push	{r4, r5, r6, r7, lr}
90014bd8:	b09e      	sub	sp, #120	@ 0x78
90014bda:	4604      	mov	r4, r0
90014bdc:	ab23      	add	r3, sp, #140	@ 0x8c
90014bde:	a805      	add	r0, sp, #20
90014be0:	f853 5b04 	ldr.w	r5, [r3], #4
90014be4:	9303      	str	r3, [sp, #12]
90014be6:	f000 fcbb 	bl	90015560 <_ZN8touchgfx12TextProviderC1Ev>
90014bea:	6823      	ldr	r3, [r4, #0]
90014bec:	4620      	mov	r0, r4
90014bee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
90014bf0:	4798      	blx	r3
90014bf2:	6823      	ldr	r3, [r4, #0]
90014bf4:	4606      	mov	r6, r0
90014bf6:	4620      	mov	r0, r4
90014bf8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
90014bfa:	4798      	blx	r3
90014bfc:	4633      	mov	r3, r6
90014bfe:	4629      	mov	r1, r5
90014c00:	9000      	str	r0, [sp, #0]
90014c02:	9a03      	ldr	r2, [sp, #12]
90014c04:	a805      	add	r0, sp, #20
90014c06:	f000 fd06 	bl	90015616 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
90014c0a:	ad1e      	add	r5, sp, #120	@ 0x78
90014c0c:	2100      	movs	r1, #0
90014c0e:	f647 76ff 	movw	r6, #32767	@ 0x7fff
90014c12:	4622      	mov	r2, r4
90014c14:	a805      	add	r0, sp, #20
90014c16:	f845 1d68 	str.w	r1, [r5, #-104]!
90014c1a:	462b      	mov	r3, r5
90014c1c:	f001 f800 	bl	90015c20 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
90014c20:	b1d8      	cbz	r0, 90014c5a <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
90014c22:	280a      	cmp	r0, #10
90014c24:	d012      	beq.n	90014c4c <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
90014c26:	9804      	ldr	r0, [sp, #16]
90014c28:	b180      	cbz	r0, 90014c4c <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
90014c2a:	7b47      	ldrb	r7, [r0, #13]
90014c2c:	88e2      	ldrh	r2, [r4, #6]
90014c2e:	00fb      	lsls	r3, r7, #3
90014c30:	f403 7180 	and.w	r1, r3, #256	@ 0x100
90014c34:	7a03      	ldrb	r3, [r0, #8]
90014c36:	430b      	orrs	r3, r1
90014c38:	0679      	lsls	r1, r7, #25
90014c3a:	bf44      	itt	mi
90014c3c:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
90014c40:	b21b      	sxthmi	r3, r3
90014c42:	1ad3      	subs	r3, r2, r3
90014c44:	b21b      	sxth	r3, r3
90014c46:	429e      	cmp	r6, r3
90014c48:	bfa8      	it	ge
90014c4a:	461e      	movge	r6, r3
90014c4c:	462b      	mov	r3, r5
90014c4e:	4622      	mov	r2, r4
90014c50:	2100      	movs	r1, #0
90014c52:	a805      	add	r0, sp, #20
90014c54:	f000 ffe4 	bl	90015c20 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
90014c58:	e7e2      	b.n	90014c20 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
90014c5a:	4630      	mov	r0, r6
90014c5c:	b01e      	add	sp, #120	@ 0x78
90014c5e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
90014c62:	b003      	add	sp, #12
90014c64:	4770      	bx	lr

90014c66 <_ZNK8touchgfx8Drawable10invalidateEv>:
90014c66:	b513      	push	{r0, r1, r4, lr}
90014c68:	6803      	ldr	r3, [r0, #0]
90014c6a:	2400      	movs	r4, #0
90014c6c:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
90014c70:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
90014c74:	f8ad 1004 	strh.w	r1, [sp, #4]
90014c78:	4669      	mov	r1, sp
90014c7a:	691b      	ldr	r3, [r3, #16]
90014c7c:	9400      	str	r4, [sp, #0]
90014c7e:	f8ad 2006 	strh.w	r2, [sp, #6]
90014c82:	4798      	blx	r3
90014c84:	b002      	add	sp, #8
90014c86:	bd10      	pop	{r4, pc}

90014c88 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
90014c88:	b538      	push	{r3, r4, r5, lr}
90014c8a:	680b      	ldr	r3, [r1, #0]
90014c8c:	460c      	mov	r4, r1
90014c8e:	4605      	mov	r5, r0
90014c90:	68db      	ldr	r3, [r3, #12]
90014c92:	4798      	blx	r3
90014c94:	6823      	ldr	r3, [r4, #0]
90014c96:	4620      	mov	r0, r4
90014c98:	4629      	mov	r1, r5
90014c9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90014c9c:	4798      	blx	r3
90014c9e:	4628      	mov	r0, r5
90014ca0:	bd38      	pop	{r3, r4, r5, pc}

90014ca2 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
90014ca2:	b410      	push	{r4}
90014ca4:	880a      	ldrh	r2, [r1, #0]
90014ca6:	8884      	ldrh	r4, [r0, #4]
90014ca8:	4422      	add	r2, r4
90014caa:	800a      	strh	r2, [r1, #0]
90014cac:	884a      	ldrh	r2, [r1, #2]
90014cae:	88c4      	ldrh	r4, [r0, #6]
90014cb0:	4422      	add	r2, r4
90014cb2:	804a      	strh	r2, [r1, #2]
90014cb4:	6940      	ldr	r0, [r0, #20]
90014cb6:	b120      	cbz	r0, 90014cc2 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
90014cb8:	6803      	ldr	r3, [r0, #0]
90014cba:	f85d 4b04 	ldr.w	r4, [sp], #4
90014cbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90014cc0:	4718      	bx	r3
90014cc2:	f85d 4b04 	ldr.w	r4, [sp], #4
90014cc6:	4770      	bx	lr

90014cc8 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
90014cc8:	b570      	push	{r4, r5, r6, lr}
90014cca:	8882      	ldrh	r2, [r0, #4]
90014ccc:	460c      	mov	r4, r1
90014cce:	880b      	ldrh	r3, [r1, #0]
90014cd0:	4605      	mov	r5, r0
90014cd2:	4413      	add	r3, r2
90014cd4:	800b      	strh	r3, [r1, #0]
90014cd6:	884b      	ldrh	r3, [r1, #2]
90014cd8:	88c2      	ldrh	r2, [r0, #6]
90014cda:	4413      	add	r3, r2
90014cdc:	804b      	strh	r3, [r1, #2]
90014cde:	1d01      	adds	r1, r0, #4
90014ce0:	4620      	mov	r0, r4
90014ce2:	f7fb fbad 	bl	90010440 <_ZN8touchgfx4RectaNERKS0_>
90014ce6:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
90014cea:	2b00      	cmp	r3, #0
90014cec:	dd0b      	ble.n	90014d06 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
90014cee:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
90014cf2:	2b00      	cmp	r3, #0
90014cf4:	dd07      	ble.n	90014d06 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
90014cf6:	6968      	ldr	r0, [r5, #20]
90014cf8:	b128      	cbz	r0, 90014d06 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
90014cfa:	6803      	ldr	r3, [r0, #0]
90014cfc:	4621      	mov	r1, r4
90014cfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90014d00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90014d04:	4718      	bx	r3
90014d06:	bd70      	pop	{r4, r5, r6, pc}

90014d08 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
90014d08:	b570      	push	{r4, r5, r6, lr}
90014d0a:	8882      	ldrh	r2, [r0, #4]
90014d0c:	460c      	mov	r4, r1
90014d0e:	880b      	ldrh	r3, [r1, #0]
90014d10:	4605      	mov	r5, r0
90014d12:	4413      	add	r3, r2
90014d14:	800b      	strh	r3, [r1, #0]
90014d16:	884b      	ldrh	r3, [r1, #2]
90014d18:	88c2      	ldrh	r2, [r0, #6]
90014d1a:	4413      	add	r3, r2
90014d1c:	804b      	strh	r3, [r1, #2]
90014d1e:	1d01      	adds	r1, r0, #4
90014d20:	4620      	mov	r0, r4
90014d22:	f7fb fb8d 	bl	90010440 <_ZN8touchgfx4RectaNERKS0_>
90014d26:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
90014d2a:	2b00      	cmp	r3, #0
90014d2c:	dd18      	ble.n	90014d60 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
90014d2e:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
90014d32:	2b00      	cmp	r3, #0
90014d34:	dd14      	ble.n	90014d60 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
90014d36:	6968      	ldr	r0, [r5, #20]
90014d38:	b128      	cbz	r0, 90014d46 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
90014d3a:	6803      	ldr	r3, [r0, #0]
90014d3c:	4621      	mov	r1, r4
90014d3e:	691b      	ldr	r3, [r3, #16]
90014d40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90014d44:	4718      	bx	r3
90014d46:	4b07      	ldr	r3, [pc, #28]	@ (90014d64 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
90014d48:	681b      	ldr	r3, [r3, #0]
90014d4a:	3304      	adds	r3, #4
90014d4c:	429d      	cmp	r5, r3
90014d4e:	d107      	bne.n	90014d60 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
90014d50:	f7fe ff44 	bl	90013bdc <_ZN8touchgfx11Application11getInstanceEv>
90014d54:	6821      	ldr	r1, [r4, #0]
90014d56:	6862      	ldr	r2, [r4, #4]
90014d58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90014d5c:	f7ff b862 	b.w	90013e24 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
90014d60:	bd70      	pop	{r4, r5, r6, pc}
90014d62:	bf00      	nop
90014d64:	24026348 	.word	0x24026348

90014d68 <_ZN8touchgfx8Drawable12moveRelativeEss>:
90014d68:	b570      	push	{r4, r5, r6, lr}
90014d6a:	4604      	mov	r4, r0
90014d6c:	4616      	mov	r6, r2
90014d6e:	460d      	mov	r5, r1
90014d70:	b901      	cbnz	r1, 90014d74 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
90014d72:	b192      	cbz	r2, 90014d9a <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
90014d74:	6823      	ldr	r3, [r4, #0]
90014d76:	4620      	mov	r0, r4
90014d78:	699b      	ldr	r3, [r3, #24]
90014d7a:	4798      	blx	r3
90014d7c:	88e2      	ldrh	r2, [r4, #6]
90014d7e:	88a1      	ldrh	r1, [r4, #4]
90014d80:	4620      	mov	r0, r4
90014d82:	4432      	add	r2, r6
90014d84:	4429      	add	r1, r5
90014d86:	b212      	sxth	r2, r2
90014d88:	b209      	sxth	r1, r1
90014d8a:	f7fb fe29 	bl	900109e0 <_ZN8touchgfx8Drawable5setXYEss>
90014d8e:	6823      	ldr	r3, [r4, #0]
90014d90:	4620      	mov	r0, r4
90014d92:	699b      	ldr	r3, [r3, #24]
90014d94:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90014d98:	4718      	bx	r3
90014d9a:	bd70      	pop	{r4, r5, r6, pc}

90014d9c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
90014d9c:	b510      	push	{r4, lr}
90014d9e:	2300      	movs	r3, #0
90014da0:	4604      	mov	r4, r0
90014da2:	4608      	mov	r0, r1
90014da4:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
90014da8:	8023      	strh	r3, [r4, #0]
90014daa:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
90014dae:	8063      	strh	r3, [r4, #2]
90014db0:	6803      	ldr	r3, [r0, #0]
90014db2:	80a1      	strh	r1, [r4, #4]
90014db4:	4621      	mov	r1, r4
90014db6:	80e2      	strh	r2, [r4, #6]
90014db8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90014dba:	4798      	blx	r3
90014dbc:	4620      	mov	r0, r4
90014dbe:	bd10      	pop	{r4, pc}

90014dc0 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
90014dc0:	b530      	push	{r4, r5, lr}
90014dc2:	8083      	strh	r3, [r0, #4]
90014dc4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
90014dc8:	f89d 5018 	ldrb.w	r5, [sp, #24]
90014dcc:	80c3      	strh	r3, [r0, #6]
90014dce:	f89d 3010 	ldrb.w	r3, [sp, #16]
90014dd2:	6141      	str	r1, [r0, #20]
90014dd4:	7203      	strb	r3, [r0, #8]
90014dd6:	f89d 3014 	ldrb.w	r3, [sp, #20]
90014dda:	8302      	strh	r2, [r0, #24]
90014ddc:	7243      	strb	r3, [r0, #9]
90014dde:	7a83      	ldrb	r3, [r0, #10]
90014de0:	f365 0306 	bfi	r3, r5, #0, #7
90014de4:	f89d 501c 	ldrb.w	r5, [sp, #28]
90014de8:	f365 13c7 	bfi	r3, r5, #7, #1
90014dec:	7283      	strb	r3, [r0, #10]
90014dee:	f89d 3020 	ldrb.w	r3, [sp, #32]
90014df2:	72c3      	strb	r3, [r0, #11]
90014df4:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
90014df8:	7303      	strb	r3, [r0, #12]
90014dfa:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
90014dfe:	81c3      	strh	r3, [r0, #14]
90014e00:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
90014e04:	8203      	strh	r3, [r0, #16]
90014e06:	4b01      	ldr	r3, [pc, #4]	@ (90014e0c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
90014e08:	6003      	str	r3, [r0, #0]
90014e0a:	bd30      	pop	{r4, r5, pc}
90014e0c:	90026b34 	.word	0x90026b34

90014e10 <_ZNK8touchgfx9ConstFont4findEt>:
90014e10:	b5f0      	push	{r4, r5, r6, r7, lr}
90014e12:	6944      	ldr	r4, [r0, #20]
90014e14:	b3bc      	cbz	r4, 90014e86 <_ZNK8touchgfx9ConstFont4findEt+0x76>
90014e16:	88a3      	ldrh	r3, [r4, #4]
90014e18:	8b02      	ldrh	r2, [r0, #24]
90014e1a:	1acb      	subs	r3, r1, r3
90014e1c:	f102 32ff 	add.w	r2, r2, #4294967295
90014e20:	d431      	bmi.n	90014e86 <_ZNK8touchgfx9ConstFont4findEt+0x76>
90014e22:	4293      	cmp	r3, r2
90014e24:	dd0c      	ble.n	90014e40 <_ZNK8touchgfx9ConstFont4findEt+0x30>
90014e26:	230e      	movs	r3, #14
90014e28:	fb03 4302 	mla	r3, r3, r2, r4
90014e2c:	889b      	ldrh	r3, [r3, #4]
90014e2e:	1a5b      	subs	r3, r3, r1
90014e30:	1ad3      	subs	r3, r2, r3
90014e32:	429a      	cmp	r2, r3
90014e34:	db27      	blt.n	90014e86 <_ZNK8touchgfx9ConstFont4findEt+0x76>
90014e36:	2b00      	cmp	r3, #0
90014e38:	bfbc      	itt	lt
90014e3a:	2302      	movlt	r3, #2
90014e3c:	fb92 f3f3 	sdivlt	r3, r2, r3
90014e40:	2500      	movs	r5, #0
90014e42:	260e      	movs	r6, #14
90014e44:	4295      	cmp	r5, r2
90014e46:	dc1e      	bgt.n	90014e86 <_ZNK8touchgfx9ConstFont4findEt+0x76>
90014e48:	fb06 4003 	mla	r0, r6, r3, r4
90014e4c:	8887      	ldrh	r7, [r0, #4]
90014e4e:	42b9      	cmp	r1, r7
90014e50:	d01a      	beq.n	90014e88 <_ZNK8touchgfx9ConstFont4findEt+0x78>
90014e52:	d20d      	bcs.n	90014e70 <_ZNK8touchgfx9ConstFont4findEt+0x60>
90014e54:	1e5a      	subs	r2, r3, #1
90014e56:	4295      	cmp	r5, r2
90014e58:	dc15      	bgt.n	90014e86 <_ZNK8touchgfx9ConstFont4findEt+0x76>
90014e5a:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
90014e5e:	1a5b      	subs	r3, r3, r1
90014e60:	1ad3      	subs	r3, r2, r3
90014e62:	429a      	cmp	r2, r3
90014e64:	db0f      	blt.n	90014e86 <_ZNK8touchgfx9ConstFont4findEt+0x76>
90014e66:	429d      	cmp	r5, r3
90014e68:	ddec      	ble.n	90014e44 <_ZNK8touchgfx9ConstFont4findEt+0x34>
90014e6a:	1953      	adds	r3, r2, r5
90014e6c:	105b      	asrs	r3, r3, #1
90014e6e:	e7e9      	b.n	90014e44 <_ZNK8touchgfx9ConstFont4findEt+0x34>
90014e70:	1c5d      	adds	r5, r3, #1
90014e72:	42aa      	cmp	r2, r5
90014e74:	db07      	blt.n	90014e86 <_ZNK8touchgfx9ConstFont4findEt+0x76>
90014e76:	8a43      	ldrh	r3, [r0, #18]
90014e78:	1acb      	subs	r3, r1, r3
90014e7a:	442b      	add	r3, r5
90014e7c:	429d      	cmp	r5, r3
90014e7e:	dc02      	bgt.n	90014e86 <_ZNK8touchgfx9ConstFont4findEt+0x76>
90014e80:	429a      	cmp	r2, r3
90014e82:	dadf      	bge.n	90014e44 <_ZNK8touchgfx9ConstFont4findEt+0x34>
90014e84:	e7f1      	b.n	90014e6a <_ZNK8touchgfx9ConstFont4findEt+0x5a>
90014e86:	2000      	movs	r0, #0
90014e88:	bdf0      	pop	{r4, r5, r6, r7, pc}

90014e8a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
90014e8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90014e8c:	4604      	mov	r4, r0
90014e8e:	4617      	mov	r7, r2
90014e90:	461e      	mov	r6, r3
90014e92:	b911      	cbnz	r1, 90014e9a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
90014e94:	2500      	movs	r5, #0
90014e96:	4628      	mov	r0, r5
90014e98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
90014e9a:	290a      	cmp	r1, #10
90014e9c:	d0fa      	beq.n	90014e94 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
90014e9e:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
90014ea2:	4291      	cmp	r1, r2
90014ea4:	d0f6      	beq.n	90014e94 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
90014ea6:	f242 020b 	movw	r2, #8203	@ 0x200b
90014eaa:	4291      	cmp	r1, r2
90014eac:	d0f2      	beq.n	90014e94 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
90014eae:	f7ff ffaf 	bl	90014e10 <_ZNK8touchgfx9ConstFont4findEt>
90014eb2:	4605      	mov	r5, r0
90014eb4:	b950      	cbnz	r0, 90014ecc <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
90014eb6:	6823      	ldr	r3, [r4, #0]
90014eb8:	4620      	mov	r0, r4
90014eba:	691b      	ldr	r3, [r3, #16]
90014ebc:	4798      	blx	r3
90014ebe:	4601      	mov	r1, r0
90014ec0:	4620      	mov	r0, r4
90014ec2:	f7ff ffa5 	bl	90014e10 <_ZNK8touchgfx9ConstFont4findEt>
90014ec6:	4605      	mov	r5, r0
90014ec8:	2800      	cmp	r0, #0
90014eca:	d0e3      	beq.n	90014e94 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
90014ecc:	6823      	ldr	r3, [r4, #0]
90014ece:	4629      	mov	r1, r5
90014ed0:	4620      	mov	r0, r4
90014ed2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
90014ed4:	4798      	blx	r3
90014ed6:	6038      	str	r0, [r7, #0]
90014ed8:	6823      	ldr	r3, [r4, #0]
90014eda:	4620      	mov	r0, r4
90014edc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
90014ede:	4798      	blx	r3
90014ee0:	7030      	strb	r0, [r6, #0]
90014ee2:	e7d8      	b.n	90014e96 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

90014ee4 <_ZN8touchgfx34lookupNearestNeighborRenderVariantERKNS_6BitmapE>:
90014ee4:	b538      	push	{r3, r4, r5, lr}
90014ee6:	4605      	mov	r5, r0
90014ee8:	f002 f9f4 	bl	900172d4 <_ZNK8touchgfx6Bitmap9getFormatEv>
90014eec:	4604      	mov	r4, r0
90014eee:	4628      	mov	r0, r5
90014ef0:	f002 f934 	bl	9001715c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
90014ef4:	2800      	cmp	r0, #0
90014ef6:	bf14      	ite	ne
90014ef8:	2002      	movne	r0, #2
90014efa:	2000      	moveq	r0, #0
90014efc:	ea40 0084 	orr.w	r0, r0, r4, lsl #2
90014f00:	b280      	uxth	r0, r0
90014f02:	bd38      	pop	{r3, r4, r5, pc}

90014f04 <_ZN8touchgfx27lookupBilinearRenderVariantERKNS_6BitmapE>:
90014f04:	b538      	push	{r3, r4, r5, lr}
90014f06:	4605      	mov	r5, r0
90014f08:	f002 f9e4 	bl	900172d4 <_ZNK8touchgfx6Bitmap9getFormatEv>
90014f0c:	4604      	mov	r4, r0
90014f0e:	4628      	mov	r0, r5
90014f10:	f002 f924 	bl	9001715c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
90014f14:	2800      	cmp	r0, #0
90014f16:	bf14      	ite	ne
90014f18:	2002      	movne	r0, #2
90014f1a:	2000      	moveq	r0, #0
90014f1c:	ea40 0084 	orr.w	r0, r0, r4, lsl #2
90014f20:	f040 0001 	orr.w	r0, r0, #1
90014f24:	b280      	uxth	r0, r0
90014f26:	bd38      	pop	{r3, r4, r5, pc}

90014f28 <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
90014f28:	2000      	movs	r0, #0
90014f2a:	4770      	bx	lr

90014f2c <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
90014f2c:	2001      	movs	r0, #1
90014f2e:	4770      	bx	lr

90014f30 <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
90014f30:	2002      	movs	r0, #2
90014f32:	4770      	bx	lr

90014f34 <_ZN8touchgfx6ScreenD1Ev>:
90014f34:	4770      	bx	lr

90014f36 <_ZN8touchgfx6Screen11setupScreenEv>:
90014f36:	4770      	bx	lr

90014f38 <_ZN8touchgfx12GestureEventD1Ev>:
90014f38:	4770      	bx	lr

90014f3a <_ZN8touchgfx9DragEventD1Ev>:
90014f3a:	4770      	bx	lr

90014f3c <_ZN8touchgfx10ClickEventD1Ev>:
90014f3c:	4770      	bx	lr

90014f3e <_ZN8touchgfx10ClickEventD0Ev>:
90014f3e:	b510      	push	{r4, lr}
90014f40:	4604      	mov	r4, r0
90014f42:	210c      	movs	r1, #12
90014f44:	f00d fe37 	bl	90022bb6 <_ZdlPvj>
90014f48:	4620      	mov	r0, r4
90014f4a:	bd10      	pop	{r4, pc}

90014f4c <_ZN8touchgfx9DragEventD0Ev>:
90014f4c:	b510      	push	{r4, lr}
90014f4e:	4604      	mov	r4, r0
90014f50:	2110      	movs	r1, #16
90014f52:	f00d fe30 	bl	90022bb6 <_ZdlPvj>
90014f56:	4620      	mov	r0, r4
90014f58:	bd10      	pop	{r4, pc}

90014f5a <_ZN8touchgfx12GestureEventD0Ev>:
90014f5a:	b510      	push	{r4, lr}
90014f5c:	4604      	mov	r4, r0
90014f5e:	210c      	movs	r1, #12
90014f60:	f00d fe29 	bl	90022bb6 <_ZdlPvj>
90014f64:	4620      	mov	r0, r4
90014f66:	bd10      	pop	{r4, pc}

90014f68 <_ZN8touchgfx6ScreenD0Ev>:
90014f68:	b510      	push	{r4, lr}
90014f6a:	4604      	mov	r4, r0
90014f6c:	213c      	movs	r1, #60	@ 0x3c
90014f6e:	f00d fe22 	bl	90022bb6 <_ZdlPvj>
90014f72:	4620      	mov	r0, r4
90014f74:	bd10      	pop	{r4, pc}
	...

90014f78 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
90014f78:	b530      	push	{r4, r5, lr}
90014f7a:	460d      	mov	r5, r1
90014f7c:	6b01      	ldr	r1, [r0, #48]	@ 0x30
90014f7e:	b087      	sub	sp, #28
90014f80:	4604      	mov	r4, r0
90014f82:	b301      	cbz	r1, 90014fc6 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
90014f84:	a801      	add	r0, sp, #4
90014f86:	f7ff ff09 	bl	90014d9c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
90014f8a:	892a      	ldrh	r2, [r5, #8]
90014f8c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
90014f90:	7928      	ldrb	r0, [r5, #4]
90014f92:	1ad2      	subs	r2, r2, r3
90014f94:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
90014f96:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
90014f9a:	441a      	add	r2, r3
90014f9c:	896b      	ldrh	r3, [r5, #10]
90014f9e:	f8bd 5006 	ldrh.w	r5, [sp, #6]
90014fa2:	f88d 0010 	strb.w	r0, [sp, #16]
90014fa6:	1b5b      	subs	r3, r3, r5
90014fa8:	8ee5      	ldrh	r5, [r4, #54]	@ 0x36
90014faa:	6b20      	ldr	r0, [r4, #48]	@ 0x30
90014fac:	442b      	add	r3, r5
90014fae:	4d07      	ldr	r5, [pc, #28]	@ (90014fcc <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
90014fb0:	f8ad 1012 	strh.w	r1, [sp, #18]
90014fb4:	a903      	add	r1, sp, #12
90014fb6:	9503      	str	r5, [sp, #12]
90014fb8:	f8ad 2014 	strh.w	r2, [sp, #20]
90014fbc:	f8ad 3016 	strh.w	r3, [sp, #22]
90014fc0:	6803      	ldr	r3, [r0, #0]
90014fc2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
90014fc4:	4798      	blx	r3
90014fc6:	b007      	add	sp, #28
90014fc8:	bd30      	pop	{r4, r5, pc}
90014fca:	bf00      	nop
90014fcc:	90026bbc 	.word	0x90026bbc

90014fd0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
90014fd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90014fd4:	6b03      	ldr	r3, [r0, #48]	@ 0x30
90014fd6:	b08a      	sub	sp, #40	@ 0x28
90014fd8:	4604      	mov	r4, r0
90014fda:	460d      	mov	r5, r1
90014fdc:	b113      	cbz	r3, 90014fe4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
90014fde:	790b      	ldrb	r3, [r1, #4]
90014fe0:	2b00      	cmp	r3, #0
90014fe2:	d044      	beq.n	9001506e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
90014fe4:	f104 0804 	add.w	r8, r4, #4
90014fe8:	a803      	add	r0, sp, #12
90014fea:	4641      	mov	r1, r8
90014fec:	f7ff fed6 	bl	90014d9c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
90014ff0:	792b      	ldrb	r3, [r5, #4]
90014ff2:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
90014ff6:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
90014ffa:	b983      	cbnz	r3, 9001501e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
90014ffc:	f104 0336 	add.w	r3, r4, #54	@ 0x36
90015000:	892a      	ldrh	r2, [r5, #8]
90015002:	88e9      	ldrh	r1, [r5, #6]
90015004:	4640      	mov	r0, r8
90015006:	1b92      	subs	r2, r2, r6
90015008:	9301      	str	r3, [sp, #4]
9001500a:	1bc9      	subs	r1, r1, r7
9001500c:	f104 0334 	add.w	r3, r4, #52	@ 0x34
90015010:	b212      	sxth	r2, r2
90015012:	9300      	str	r3, [sp, #0]
90015014:	b209      	sxth	r1, r1
90015016:	f104 0330 	add.w	r3, r4, #48	@ 0x30
9001501a:	f7fb f92f 	bl	9001027c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
9001501e:	6b21      	ldr	r1, [r4, #48]	@ 0x30
90015020:	b329      	cbz	r1, 9001506e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
90015022:	a805      	add	r0, sp, #20
90015024:	f7ff feba 	bl	90014d9c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
90015028:	f8bd 2014 	ldrh.w	r2, [sp, #20]
9001502c:	792b      	ldrb	r3, [r5, #4]
9001502e:	a907      	add	r1, sp, #28
90015030:	1abf      	subs	r7, r7, r2
90015032:	88ea      	ldrh	r2, [r5, #6]
90015034:	6b20      	ldr	r0, [r4, #48]	@ 0x30
90015036:	4417      	add	r7, r2
90015038:	8ea2      	ldrh	r2, [r4, #52]	@ 0x34
9001503a:	f88d 3020 	strb.w	r3, [sp, #32]
9001503e:	4417      	add	r7, r2
90015040:	f8bd 2016 	ldrh.w	r2, [sp, #22]
90015044:	1ab6      	subs	r6, r6, r2
90015046:	892a      	ldrh	r2, [r5, #8]
90015048:	f8ad 7022 	strh.w	r7, [sp, #34]	@ 0x22
9001504c:	4416      	add	r6, r2
9001504e:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
90015050:	4416      	add	r6, r2
90015052:	4a08      	ldr	r2, [pc, #32]	@ (90015074 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
90015054:	f8ad 6024 	strh.w	r6, [sp, #36]	@ 0x24
90015058:	2600      	movs	r6, #0
9001505a:	9207      	str	r2, [sp, #28]
9001505c:	f8ad 6026 	strh.w	r6, [sp, #38]	@ 0x26
90015060:	6803      	ldr	r3, [r0, #0]
90015062:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
90015064:	4798      	blx	r3
90015066:	792b      	ldrb	r3, [r5, #4]
90015068:	b10b      	cbz	r3, 9001506e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
9001506a:	e9c4 660c 	strd	r6, r6, [r4, #48]	@ 0x30
9001506e:	b00a      	add	sp, #40	@ 0x28
90015070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90015074:	90026b94 	.word	0x90026b94

90015078 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
90015078:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9001507c:	460c      	mov	r4, r1
9001507e:	6b01      	ldr	r1, [r0, #48]	@ 0x30
90015080:	b088      	sub	sp, #32
90015082:	4605      	mov	r5, r0
90015084:	2900      	cmp	r1, #0
90015086:	d06d      	beq.n	90015164 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
90015088:	4668      	mov	r0, sp
9001508a:	f7ff fe87 	bl	90014d9c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
9001508e:	8ea9      	ldrh	r1, [r5, #52]	@ 0x34
90015090:	88e3      	ldrh	r3, [r4, #6]
90015092:	f9bd 8000 	ldrsh.w	r8, [sp]
90015096:	440b      	add	r3, r1
90015098:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
9001509c:	b21b      	sxth	r3, r3
9001509e:	4543      	cmp	r3, r8
900150a0:	db31      	blt.n	90015106 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
900150a2:	f8bd c004 	ldrh.w	ip, [sp, #4]
900150a6:	44c4      	add	ip, r8
900150a8:	fa0f fc8c 	sxth.w	ip, ip
900150ac:	4563      	cmp	r3, ip
900150ae:	da2a      	bge.n	90015106 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
900150b0:	8eea      	ldrh	r2, [r5, #54]	@ 0x36
900150b2:	8926      	ldrh	r6, [r4, #8]
900150b4:	4416      	add	r6, r2
900150b6:	b236      	sxth	r6, r6
900150b8:	42be      	cmp	r6, r7
900150ba:	db24      	blt.n	90015106 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
900150bc:	f8bd 0006 	ldrh.w	r0, [sp, #6]
900150c0:	4438      	add	r0, r7
900150c2:	b200      	sxth	r0, r0
900150c4:	4286      	cmp	r6, r0
900150c6:	da1e      	bge.n	90015106 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
900150c8:	8963      	ldrh	r3, [r4, #10]
900150ca:	4419      	add	r1, r3
900150cc:	b209      	sxth	r1, r1
900150ce:	4541      	cmp	r1, r8
900150d0:	db08      	blt.n	900150e4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
900150d2:	4561      	cmp	r1, ip
900150d4:	da06      	bge.n	900150e4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
900150d6:	89a3      	ldrh	r3, [r4, #12]
900150d8:	441a      	add	r2, r3
900150da:	b212      	sxth	r2, r2
900150dc:	42ba      	cmp	r2, r7
900150de:	db01      	blt.n	900150e4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
900150e0:	4282      	cmp	r2, r0
900150e2:	db10      	blt.n	90015106 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
900150e4:	4b21      	ldr	r3, [pc, #132]	@ (9001516c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
900150e6:	a904      	add	r1, sp, #16
900150e8:	6b28      	ldr	r0, [r5, #48]	@ 0x30
900150ea:	9304      	str	r3, [sp, #16]
900150ec:	2302      	movs	r3, #2
900150ee:	f88d 3014 	strb.w	r3, [sp, #20]
900150f2:	2300      	movs	r3, #0
900150f4:	f8ad 3016 	strh.w	r3, [sp, #22]
900150f8:	f8ad 3018 	strh.w	r3, [sp, #24]
900150fc:	f8ad 301a 	strh.w	r3, [sp, #26]
90015100:	6803      	ldr	r3, [r0, #0]
90015102:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
90015104:	4798      	blx	r3
90015106:	1d29      	adds	r1, r5, #4
90015108:	a802      	add	r0, sp, #8
9001510a:	f7ff fe47 	bl	90014d9c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
9001510e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
90015112:	88e0      	ldrh	r0, [r4, #6]
90015114:	eba3 0808 	sub.w	r8, r3, r8
90015118:	f8bd 300a 	ldrh.w	r3, [sp, #10]
9001511c:	7921      	ldrb	r1, [r4, #4]
9001511e:	fa1f f888 	uxth.w	r8, r8
90015122:	1bdf      	subs	r7, r3, r7
90015124:	f8b5 c034 	ldrh.w	ip, [r5, #52]	@ 0x34
90015128:	b2bb      	uxth	r3, r7
9001512a:	4440      	add	r0, r8
9001512c:	8922      	ldrh	r2, [r4, #8]
9001512e:	8967      	ldrh	r7, [r4, #10]
90015130:	4460      	add	r0, ip
90015132:	89a4      	ldrh	r4, [r4, #12]
90015134:	441a      	add	r2, r3
90015136:	8eee      	ldrh	r6, [r5, #54]	@ 0x36
90015138:	44b8      	add	r8, r7
9001513a:	4423      	add	r3, r4
9001513c:	f8ad 0016 	strh.w	r0, [sp, #22]
90015140:	4432      	add	r2, r6
90015142:	44e0      	add	r8, ip
90015144:	4433      	add	r3, r6
90015146:	4c0a      	ldr	r4, [pc, #40]	@ (90015170 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
90015148:	6b28      	ldr	r0, [r5, #48]	@ 0x30
9001514a:	f88d 1014 	strb.w	r1, [sp, #20]
9001514e:	a904      	add	r1, sp, #16
90015150:	9404      	str	r4, [sp, #16]
90015152:	f8ad 2018 	strh.w	r2, [sp, #24]
90015156:	f8ad 801a 	strh.w	r8, [sp, #26]
9001515a:	f8ad 301c 	strh.w	r3, [sp, #28]
9001515e:	6803      	ldr	r3, [r0, #0]
90015160:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
90015162:	4798      	blx	r3
90015164:	b008      	add	sp, #32
90015166:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
9001516a:	bf00      	nop
9001516c:	90026b94 	.word	0x90026b94
90015170:	90026ba8 	.word	0x90026ba8

90015174 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
90015174:	b537      	push	{r0, r1, r2, r4, r5, lr}
90015176:	4604      	mov	r4, r0
90015178:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
9001517c:	3201      	adds	r2, #1
9001517e:	d112      	bne.n	900151a6 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
90015180:	2500      	movs	r5, #0
90015182:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
90015186:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
9001518a:	6803      	ldr	r3, [r0, #0]
9001518c:	9500      	str	r5, [sp, #0]
9001518e:	466d      	mov	r5, sp
90015190:	f8ad 1004 	strh.w	r1, [sp, #4]
90015194:	f8ad 2006 	strh.w	r2, [sp, #6]
90015198:	4629      	mov	r1, r5
9001519a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9001519c:	4798      	blx	r3
9001519e:	e895 0003 	ldmia.w	r5, {r0, r1}
900151a2:	e884 0003 	stmia.w	r4, {r0, r1}
900151a6:	4620      	mov	r0, r4
900151a8:	b003      	add	sp, #12
900151aa:	bd30      	pop	{r4, r5, pc}

900151ac <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
900151ac:	b513      	push	{r0, r1, r4, lr}
900151ae:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
900151b2:	4604      	mov	r4, r0
900151b4:	3301      	adds	r3, #1
900151b6:	d109      	bne.n	900151cc <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
900151b8:	4601      	mov	r1, r0
900151ba:	4668      	mov	r0, sp
900151bc:	f7ff fdee 	bl	90014d9c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
900151c0:	f8bd 3000 	ldrh.w	r3, [sp]
900151c4:	8423      	strh	r3, [r4, #32]
900151c6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
900151ca:	8463      	strh	r3, [r4, #34]	@ 0x22
900151cc:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
900151d0:	b002      	add	sp, #8
900151d2:	bd10      	pop	{r4, pc}

900151d4 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
900151d4:	b513      	push	{r0, r1, r4, lr}
900151d6:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	@ 0x22
900151da:	4604      	mov	r4, r0
900151dc:	3301      	adds	r3, #1
900151de:	d109      	bne.n	900151f4 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
900151e0:	4601      	mov	r1, r0
900151e2:	4668      	mov	r0, sp
900151e4:	f7ff fdda 	bl	90014d9c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
900151e8:	f8bd 3000 	ldrh.w	r3, [sp]
900151ec:	8423      	strh	r3, [r4, #32]
900151ee:	f8bd 3002 	ldrh.w	r3, [sp, #2]
900151f2:	8463      	strh	r3, [r4, #34]	@ 0x22
900151f4:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	@ 0x22
900151f8:	b002      	add	sp, #8
900151fa:	bd10      	pop	{r4, pc}

900151fc <_ZN8touchgfx6ScreenC1Ev>:
900151fc:	b570      	push	{r4, r5, r6, lr}
900151fe:	4b17      	ldr	r3, [pc, #92]	@ (9001525c <_ZN8touchgfx6ScreenC1Ev+0x60>)
90015200:	4605      	mov	r5, r0
90015202:	4a17      	ldr	r2, [pc, #92]	@ (90015260 <_ZN8touchgfx6ScreenC1Ev+0x64>)
90015204:	2101      	movs	r1, #1
90015206:	f845 3b04 	str.w	r3, [r5], #4
9001520a:	2300      	movs	r3, #0
9001520c:	6042      	str	r2, [r0, #4]
9001520e:	4604      	mov	r4, r0
90015210:	8103      	strh	r3, [r0, #8]
90015212:	8143      	strh	r3, [r0, #10]
90015214:	8183      	strh	r3, [r0, #12]
90015216:	81c3      	strh	r3, [r0, #14]
90015218:	8203      	strh	r3, [r0, #16]
9001521a:	8243      	strh	r3, [r0, #18]
9001521c:	8283      	strh	r3, [r0, #20]
9001521e:	82c3      	strh	r3, [r0, #22]
90015220:	6203      	str	r3, [r0, #32]
90015222:	8483      	strh	r3, [r0, #36]	@ 0x24
90015224:	84c3      	strh	r3, [r0, #38]	@ 0x26
90015226:	f880 3028 	strb.w	r3, [r0, #40]	@ 0x28
9001522a:	6343      	str	r3, [r0, #52]	@ 0x34
9001522c:	f880 1029 	strb.w	r1, [r0, #41]	@ 0x29
90015230:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
90015234:	e9c0 3306 	strd	r3, r3, [r0, #24]
90015238:	e9c0 330b 	strd	r3, r3, [r0, #44]	@ 0x2c
9001523c:	4b09      	ldr	r3, [pc, #36]	@ (90015264 <_ZN8touchgfx6ScreenC1Ev+0x68>)
9001523e:	4628      	mov	r0, r5
90015240:	f9b3 6000 	ldrsh.w	r6, [r3]
90015244:	6b93      	ldr	r3, [r2, #56]	@ 0x38
90015246:	4a08      	ldr	r2, [pc, #32]	@ (90015268 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
90015248:	f9b2 1000 	ldrsh.w	r1, [r2]
9001524c:	4798      	blx	r3
9001524e:	6863      	ldr	r3, [r4, #4]
90015250:	4628      	mov	r0, r5
90015252:	4631      	mov	r1, r6
90015254:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
90015256:	4798      	blx	r3
90015258:	4620      	mov	r0, r4
9001525a:	bd70      	pop	{r4, r5, r6, pc}
9001525c:	90026bd0 	.word	0x90026bd0
90015260:	90026850 	.word	0x90026850
90015264:	24026302 	.word	0x24026302
90015268:	24026300 	.word	0x24026300

9001526c <_ZN8touchgfx6Screen4drawEv>:
9001526c:	4b09      	ldr	r3, [pc, #36]	@ (90015294 <_ZN8touchgfx6Screen4drawEv+0x28>)
9001526e:	b507      	push	{r0, r1, r2, lr}
90015270:	f9b3 2000 	ldrsh.w	r2, [r3]
90015274:	2100      	movs	r1, #0
90015276:	4b08      	ldr	r3, [pc, #32]	@ (90015298 <_ZN8touchgfx6Screen4drawEv+0x2c>)
90015278:	9100      	str	r1, [sp, #0]
9001527a:	4669      	mov	r1, sp
9001527c:	f9b3 3000 	ldrsh.w	r3, [r3]
90015280:	f8ad 2004 	strh.w	r2, [sp, #4]
90015284:	f8ad 3006 	strh.w	r3, [sp, #6]
90015288:	6803      	ldr	r3, [r0, #0]
9001528a:	689b      	ldr	r3, [r3, #8]
9001528c:	4798      	blx	r3
9001528e:	b003      	add	sp, #12
90015290:	f85d fb04 	ldr.w	pc, [sp], #4
90015294:	24026300 	.word	0x24026300
90015298:	24026302 	.word	0x24026302

9001529c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
9001529c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900152a0:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
900152a4:	b089      	sub	sp, #36	@ 0x24
900152a6:	4680      	mov	r8, r0
900152a8:	460c      	mov	r4, r1
900152aa:	2b00      	cmp	r3, #0
900152ac:	4615      	mov	r5, r2
900152ae:	dd0e      	ble.n	900152ce <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
900152b0:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
900152b4:	2b00      	cmp	r3, #0
900152b6:	dd0a      	ble.n	900152ce <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
900152b8:	4628      	mov	r0, r5
900152ba:	f7ff ff5b 	bl	90015174 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
900152be:	4621      	mov	r1, r4
900152c0:	f7fe fbad 	bl	90013a1e <_ZNK8touchgfx4Rect9intersectERKS0_>
900152c4:	69eb      	ldr	r3, [r5, #28]
900152c6:	b928      	cbnz	r0, 900152d4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
900152c8:	461d      	mov	r5, r3
900152ca:	2b00      	cmp	r3, #0
900152cc:	d1f4      	bne.n	900152b8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
900152ce:	b009      	add	sp, #36	@ 0x24
900152d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
900152d4:	ae04      	add	r6, sp, #16
900152d6:	2b00      	cmp	r3, #0
900152d8:	f000 80b5 	beq.w	90015446 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
900152dc:	682b      	ldr	r3, [r5, #0]
900152de:	4629      	mov	r1, r5
900152e0:	a802      	add	r0, sp, #8
900152e2:	68db      	ldr	r3, [r3, #12]
900152e4:	4798      	blx	r3
900152e6:	4628      	mov	r0, r5
900152e8:	f7ff ff60 	bl	900151ac <_ZN8touchgfx8Drawable13getCachedAbsXEv>
900152ec:	f8bd 7008 	ldrh.w	r7, [sp, #8]
900152f0:	4407      	add	r7, r0
900152f2:	4628      	mov	r0, r5
900152f4:	f7ff ff6e 	bl	900151d4 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
900152f8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
900152fc:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
90015300:	b23f      	sxth	r7, r7
90015302:	4418      	add	r0, r3
90015304:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
90015308:	4621      	mov	r1, r4
9001530a:	f8ad 2014 	strh.w	r2, [sp, #20]
9001530e:	f8ad 0012 	strh.w	r0, [sp, #18]
90015312:	4630      	mov	r0, r6
90015314:	f8ad 3016 	strh.w	r3, [sp, #22]
90015318:	f8ad 7010 	strh.w	r7, [sp, #16]
9001531c:	f7fb f890 	bl	90010440 <_ZN8touchgfx4RectaNERKS0_>
90015320:	4628      	mov	r0, r5
90015322:	f7ff ff27 	bl	90015174 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
90015326:	ab06      	add	r3, sp, #24
90015328:	4602      	mov	r2, r0
9001532a:	e896 0003 	ldmia.w	r6, {r0, r1}
9001532e:	e883 0003 	stmia.w	r3, {r0, r1}
90015332:	4611      	mov	r1, r2
90015334:	4618      	mov	r0, r3
90015336:	f7fb f883 	bl	90010440 <_ZN8touchgfx4RectaNERKS0_>
9001533a:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
9001533e:	f9b4 1000 	ldrsh.w	r1, [r4]
90015342:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
90015346:	4299      	cmp	r1, r3
90015348:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
9001534c:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
90015350:	d10b      	bne.n	9001536a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
90015352:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
90015356:	4552      	cmp	r2, sl
90015358:	d107      	bne.n	9001536a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
9001535a:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
9001535e:	455a      	cmp	r2, fp
90015360:	d103      	bne.n	9001536a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
90015362:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
90015366:	454a      	cmp	r2, r9
90015368:	d06d      	beq.n	90015446 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
9001536a:	f1bb 0f00 	cmp.w	fp, #0
9001536e:	dd65      	ble.n	9001543c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
90015370:	f1b9 0f00 	cmp.w	r9, #0
90015374:	dd62      	ble.n	9001543c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
90015376:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
9001537a:	fa1f f08a 	uxth.w	r0, sl
9001537e:	4552      	cmp	r2, sl
90015380:	9000      	str	r0, [sp, #0]
90015382:	da12      	bge.n	900153aa <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
90015384:	9301      	str	r3, [sp, #4]
90015386:	9b00      	ldr	r3, [sp, #0]
90015388:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
9001538c:	f8ad 2012 	strh.w	r2, [sp, #18]
90015390:	1a9a      	subs	r2, r3, r2
90015392:	f8ad 1010 	strh.w	r1, [sp, #16]
90015396:	4631      	mov	r1, r6
90015398:	f8ad 0014 	strh.w	r0, [sp, #20]
9001539c:	4640      	mov	r0, r8
9001539e:	f8ad 2016 	strh.w	r2, [sp, #22]
900153a2:	69ea      	ldr	r2, [r5, #28]
900153a4:	f7ff ff7a 	bl	9001529c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
900153a8:	9b01      	ldr	r3, [sp, #4]
900153aa:	f9b4 2000 	ldrsh.w	r2, [r4]
900153ae:	b29f      	uxth	r7, r3
900153b0:	429a      	cmp	r2, r3
900153b2:	da0d      	bge.n	900153d0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
900153b4:	f8ad 2010 	strh.w	r2, [sp, #16]
900153b8:	1aba      	subs	r2, r7, r2
900153ba:	f8ad a012 	strh.w	sl, [sp, #18]
900153be:	4631      	mov	r1, r6
900153c0:	f8ad 2014 	strh.w	r2, [sp, #20]
900153c4:	4640      	mov	r0, r8
900153c6:	f8ad 9016 	strh.w	r9, [sp, #22]
900153ca:	69ea      	ldr	r2, [r5, #28]
900153cc:	f7ff ff66 	bl	9001529c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
900153d0:	8822      	ldrh	r2, [r4, #0]
900153d2:	445f      	add	r7, fp
900153d4:	88a3      	ldrh	r3, [r4, #4]
900153d6:	b2bf      	uxth	r7, r7
900153d8:	4413      	add	r3, r2
900153da:	b23a      	sxth	r2, r7
900153dc:	b29b      	uxth	r3, r3
900153de:	b219      	sxth	r1, r3
900153e0:	4291      	cmp	r1, r2
900153e2:	dd0d      	ble.n	90015400 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
900153e4:	1bdb      	subs	r3, r3, r7
900153e6:	f8ad 2010 	strh.w	r2, [sp, #16]
900153ea:	f8ad a012 	strh.w	sl, [sp, #18]
900153ee:	4631      	mov	r1, r6
900153f0:	f8ad 3014 	strh.w	r3, [sp, #20]
900153f4:	4640      	mov	r0, r8
900153f6:	f8ad 9016 	strh.w	r9, [sp, #22]
900153fa:	69ea      	ldr	r2, [r5, #28]
900153fc:	f7ff ff4e 	bl	9001529c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
90015400:	88e2      	ldrh	r2, [r4, #6]
90015402:	8863      	ldrh	r3, [r4, #2]
90015404:	4413      	add	r3, r2
90015406:	9a00      	ldr	r2, [sp, #0]
90015408:	444a      	add	r2, r9
9001540a:	b29b      	uxth	r3, r3
9001540c:	fa1f f982 	uxth.w	r9, r2
90015410:	b219      	sxth	r1, r3
90015412:	fa0f f289 	sxth.w	r2, r9
90015416:	428a      	cmp	r2, r1
90015418:	da15      	bge.n	90015446 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
9001541a:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
9001541e:	eba3 0309 	sub.w	r3, r3, r9
90015422:	f9b4 0000 	ldrsh.w	r0, [r4]
90015426:	f8ad 1014 	strh.w	r1, [sp, #20]
9001542a:	4631      	mov	r1, r6
9001542c:	f8ad 0010 	strh.w	r0, [sp, #16]
90015430:	f8ad 2012 	strh.w	r2, [sp, #18]
90015434:	f8ad 3016 	strh.w	r3, [sp, #22]
90015438:	69ea      	ldr	r2, [r5, #28]
9001543a:	e001      	b.n	90015440 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
9001543c:	69ea      	ldr	r2, [r5, #28]
9001543e:	4621      	mov	r1, r4
90015440:	4640      	mov	r0, r8
90015442:	f7ff ff2b 	bl	9001529c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
90015446:	4628      	mov	r0, r5
90015448:	f7ff fe94 	bl	90015174 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
9001544c:	6861      	ldr	r1, [r4, #4]
9001544e:	4602      	mov	r2, r0
90015450:	4633      	mov	r3, r6
90015452:	6820      	ldr	r0, [r4, #0]
90015454:	c303      	stmia	r3!, {r0, r1}
90015456:	4611      	mov	r1, r2
90015458:	4630      	mov	r0, r6
9001545a:	f7fa fff1 	bl	90010440 <_ZN8touchgfx4RectaNERKS0_>
9001545e:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
90015462:	2b00      	cmp	r3, #0
90015464:	f77f af33 	ble.w	900152ce <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
90015468:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
9001546c:	2b00      	cmp	r3, #0
9001546e:	f77f af2e 	ble.w	900152ce <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
90015472:	4628      	mov	r0, r5
90015474:	f7ff fe9a 	bl	900151ac <_ZN8touchgfx8Drawable13getCachedAbsXEv>
90015478:	f8bd 3010 	ldrh.w	r3, [sp, #16]
9001547c:	1a18      	subs	r0, r3, r0
9001547e:	f8ad 0010 	strh.w	r0, [sp, #16]
90015482:	4628      	mov	r0, r5
90015484:	f7ff fea6 	bl	900151d4 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
90015488:	f8bd 3012 	ldrh.w	r3, [sp, #18]
9001548c:	4631      	mov	r1, r6
9001548e:	1a18      	subs	r0, r3, r0
90015490:	f8ad 0012 	strh.w	r0, [sp, #18]
90015494:	4628      	mov	r0, r5
90015496:	682b      	ldr	r3, [r5, #0]
90015498:	689b      	ldr	r3, [r3, #8]
9001549a:	4798      	blx	r3
9001549c:	e717      	b.n	900152ce <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

9001549e <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
9001549e:	b570      	push	{r4, r5, r6, lr}
900154a0:	1d06      	adds	r6, r0, #4
900154a2:	b086      	sub	sp, #24
900154a4:	460c      	mov	r4, r1
900154a6:	2300      	movs	r3, #0
900154a8:	4631      	mov	r1, r6
900154aa:	4605      	mov	r5, r0
900154ac:	a802      	add	r0, sp, #8
900154ae:	9301      	str	r3, [sp, #4]
900154b0:	f7ff fc74 	bl	90014d9c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
900154b4:	f8bd 3008 	ldrh.w	r3, [sp, #8]
900154b8:	8822      	ldrh	r2, [r4, #0]
900154ba:	f8bd 100a 	ldrh.w	r1, [sp, #10]
900154be:	1ad2      	subs	r2, r2, r3
900154c0:	8863      	ldrh	r3, [r4, #2]
900154c2:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
900154c6:	1a5b      	subs	r3, r3, r1
900154c8:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
900154cc:	f8ad 2010 	strh.w	r2, [sp, #16]
900154d0:	aa01      	add	r2, sp, #4
900154d2:	f8ad 0014 	strh.w	r0, [sp, #20]
900154d6:	4630      	mov	r0, r6
900154d8:	f8ad 1016 	strh.w	r1, [sp, #22]
900154dc:	a904      	add	r1, sp, #16
900154de:	f8ad 3012 	strh.w	r3, [sp, #18]
900154e2:	f7fb f885 	bl	900105f0 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
900154e6:	9a01      	ldr	r2, [sp, #4]
900154e8:	b11a      	cbz	r2, 900154f2 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
900154ea:	4621      	mov	r1, r4
900154ec:	4628      	mov	r0, r5
900154ee:	f7ff fed5 	bl	9001529c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
900154f2:	b006      	add	sp, #24
900154f4:	bd70      	pop	{r4, r5, r6, pc}

900154f6 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
900154f6:	4602      	mov	r2, r0
900154f8:	b530      	push	{r4, r5, lr}
900154fa:	4604      	mov	r4, r0
900154fc:	b085      	sub	sp, #20
900154fe:	f852 0f08 	ldr.w	r0, [r2, #8]!
90015502:	460d      	mov	r5, r1
90015504:	466b      	mov	r3, sp
90015506:	6851      	ldr	r1, [r2, #4]
90015508:	c303      	stmia	r3!, {r0, r1}
9001550a:	4629      	mov	r1, r5
9001550c:	4668      	mov	r0, sp
9001550e:	f7fa ff97 	bl	90010440 <_ZN8touchgfx4RectaNERKS0_>
90015512:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
90015516:	b12b      	cbz	r3, 90015524 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
90015518:	4669      	mov	r1, sp
9001551a:	4620      	mov	r0, r4
9001551c:	f7ff ffbf 	bl	9001549e <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
90015520:	b005      	add	sp, #20
90015522:	bd30      	pop	{r4, r5, pc}
90015524:	3404      	adds	r4, #4
90015526:	a802      	add	r0, sp, #8
90015528:	4621      	mov	r1, r4
9001552a:	f7ff fc37 	bl	90014d9c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
9001552e:	f8bd 3000 	ldrh.w	r3, [sp]
90015532:	f8bd 2008 	ldrh.w	r2, [sp, #8]
90015536:	4669      	mov	r1, sp
90015538:	4620      	mov	r0, r4
9001553a:	1a9b      	subs	r3, r3, r2
9001553c:	f8bd 200a 	ldrh.w	r2, [sp, #10]
90015540:	f8ad 3000 	strh.w	r3, [sp]
90015544:	f8bd 3002 	ldrh.w	r3, [sp, #2]
90015548:	1a9b      	subs	r3, r3, r2
9001554a:	f8ad 3002 	strh.w	r3, [sp, #2]
9001554e:	f7fb f816 	bl	9001057e <_ZNK8touchgfx9Container4drawERKNS_4RectE>
90015552:	e7e5      	b.n	90015520 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

90015554 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
90015554:	460b      	mov	r3, r1
90015556:	680a      	ldr	r2, [r1, #0]
90015558:	1d01      	adds	r1, r0, #4
9001555a:	6992      	ldr	r2, [r2, #24]
9001555c:	4618      	mov	r0, r3
9001555e:	4710      	bx	r2

90015560 <_ZN8touchgfx12TextProviderC1Ev>:
90015560:	b538      	push	{r3, r4, r5, lr}
90015562:	2500      	movs	r5, #0
90015564:	2302      	movs	r3, #2
90015566:	4604      	mov	r4, r0
90015568:	220e      	movs	r2, #14
9001556a:	7403      	strb	r3, [r0, #16]
9001556c:	4629      	mov	r1, r5
9001556e:	6145      	str	r5, [r0, #20]
90015570:	7605      	strb	r5, [r0, #24]
90015572:	83c5      	strh	r5, [r0, #30]
90015574:	8405      	strh	r5, [r0, #32]
90015576:	86c5      	strh	r5, [r0, #54]	@ 0x36
90015578:	8705      	strh	r5, [r0, #56]	@ 0x38
9001557a:	87c5      	strh	r5, [r0, #62]	@ 0x3e
9001557c:	f8a0 5040 	strh.w	r5, [r0, #64]	@ 0x40
90015580:	e9c0 5500 	strd	r5, r5, [r0]
90015584:	e9c0 5511 	strd	r5, r5, [r0, #68]	@ 0x44
90015588:	304c      	adds	r0, #76	@ 0x4c
9001558a:	f00d fddf 	bl	9002314c <memset>
9001558e:	2301      	movs	r3, #1
90015590:	4620      	mov	r0, r4
90015592:	f8a4 505a 	strh.w	r5, [r4, #90]	@ 0x5a
90015596:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
9001559a:	f8a4 505e 	strh.w	r5, [r4, #94]	@ 0x5e
9001559e:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
900155a2:	f884 5061 	strb.w	r5, [r4, #97]	@ 0x61
900155a6:	f7f0 fb43 	bl	90005c30 <_ZN8touchgfx12TextProvider18initializeInternalEv>
900155aa:	4620      	mov	r0, r4
900155ac:	bd38      	pop	{r3, r4, r5, pc}

900155ae <_ZN8touchgfx12TextProvider11endOfStringEv>:
900155ae:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
900155b0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
900155b4:	8c40      	ldrh	r0, [r0, #34]	@ 0x22
900155b6:	fab0 f080 	clz	r0, r0
900155ba:	0940      	lsrs	r0, r0, #5
900155bc:	4770      	bx	lr

900155be <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
900155be:	b530      	push	{r4, r5, lr}
900155c0:	2500      	movs	r5, #0
900155c2:	2401      	movs	r4, #1
900155c4:	6843      	ldr	r3, [r0, #4]
900155c6:	b913      	cbnz	r3, 900155ce <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
900155c8:	6803      	ldr	r3, [r0, #0]
900155ca:	b313      	cbz	r3, 90015612 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
900155cc:	6043      	str	r3, [r0, #4]
900155ce:	7e03      	ldrb	r3, [r0, #24]
900155d0:	b143      	cbz	r3, 900155e4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
900155d2:	6943      	ldr	r3, [r0, #20]
900155d4:	b12b      	cbz	r3, 900155e2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
900155d6:	881a      	ldrh	r2, [r3, #0]
900155d8:	b11a      	cbz	r2, 900155e2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
900155da:	1c9a      	adds	r2, r3, #2
900155dc:	6142      	str	r2, [r0, #20]
900155de:	8818      	ldrh	r0, [r3, #0]
900155e0:	bd30      	pop	{r4, r5, pc}
900155e2:	7605      	strb	r5, [r0, #24]
900155e4:	6843      	ldr	r3, [r0, #4]
900155e6:	8819      	ldrh	r1, [r3, #0]
900155e8:	b199      	cbz	r1, 90015612 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
900155ea:	1c9a      	adds	r2, r3, #2
900155ec:	2902      	cmp	r1, #2
900155ee:	6042      	str	r2, [r0, #4]
900155f0:	d1f5      	bne.n	900155de <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
900155f2:	7c03      	ldrb	r3, [r0, #16]
900155f4:	2b01      	cmp	r3, #1
900155f6:	d8e5      	bhi.n	900155c4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
900155f8:	1c5a      	adds	r2, r3, #1
900155fa:	3302      	adds	r3, #2
900155fc:	7402      	strb	r2, [r0, #16]
900155fe:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
90015602:	6143      	str	r3, [r0, #20]
90015604:	2b00      	cmp	r3, #0
90015606:	d0dd      	beq.n	900155c4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
90015608:	881b      	ldrh	r3, [r3, #0]
9001560a:	2b00      	cmp	r3, #0
9001560c:	d0da      	beq.n	900155c4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
9001560e:	7604      	strb	r4, [r0, #24]
90015610:	e7d8      	b.n	900155c4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
90015612:	2000      	movs	r0, #0
90015614:	e7e4      	b.n	900155e0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

90015616 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
90015616:	6001      	str	r1, [r0, #0]
90015618:	2100      	movs	r1, #0
9001561a:	b430      	push	{r4, r5}
9001561c:	6041      	str	r1, [r0, #4]
9001561e:	6815      	ldr	r5, [r2, #0]
90015620:	6085      	str	r5, [r0, #8]
90015622:	6852      	ldr	r2, [r2, #4]
90015624:	6443      	str	r3, [r0, #68]	@ 0x44
90015626:	9b02      	ldr	r3, [sp, #8]
90015628:	60c2      	str	r2, [r0, #12]
9001562a:	7401      	strb	r1, [r0, #16]
9001562c:	6141      	str	r1, [r0, #20]
9001562e:	7601      	strb	r1, [r0, #24]
90015630:	8701      	strh	r1, [r0, #56]	@ 0x38
90015632:	8401      	strh	r1, [r0, #32]
90015634:	f8a0 1040 	strh.w	r1, [r0, #64]	@ 0x40
90015638:	6483      	str	r3, [r0, #72]	@ 0x48
9001563a:	bc30      	pop	{r4, r5}
9001563c:	f7f0 baf8 	b.w	90005c30 <_ZN8touchgfx12TextProvider18initializeInternalEv>

90015640 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>:
90015640:	b408      	push	{r3}
90015642:	b510      	push	{r4, lr}
90015644:	b085      	sub	sp, #20
90015646:	ac07      	add	r4, sp, #28
90015648:	f854 3b04 	ldr.w	r3, [r4], #4
9001564c:	9300      	str	r3, [sp, #0]
9001564e:	4613      	mov	r3, r2
90015650:	4622      	mov	r2, r4
90015652:	9403      	str	r4, [sp, #12]
90015654:	f7ff ffdf 	bl	90015616 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
90015658:	b005      	add	sp, #20
9001565a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9001565e:	b001      	add	sp, #4
90015660:	4770      	bx	lr

90015662 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
90015662:	b5f0      	push	{r4, r5, r6, r7, lr}
90015664:	4605      	mov	r5, r0
90015666:	4608      	mov	r0, r1
90015668:	b1f1      	cbz	r1, 900156a8 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
9001566a:	f105 044c 	add.w	r4, r5, #76	@ 0x4c
9001566e:	460b      	mov	r3, r1
90015670:	f101 0708 	add.w	r7, r1, #8
90015674:	4622      	mov	r2, r4
90015676:	6818      	ldr	r0, [r3, #0]
90015678:	3308      	adds	r3, #8
9001567a:	f853 1c04 	ldr.w	r1, [r3, #-4]
9001567e:	4626      	mov	r6, r4
90015680:	42bb      	cmp	r3, r7
90015682:	c603      	stmia	r6!, {r0, r1}
90015684:	4634      	mov	r4, r6
90015686:	d1f6      	bne.n	90015676 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
90015688:	6818      	ldr	r0, [r3, #0]
9001568a:	6030      	str	r0, [r6, #0]
9001568c:	4610      	mov	r0, r2
9001568e:	889b      	ldrh	r3, [r3, #4]
90015690:	80b3      	strh	r3, [r6, #4]
90015692:	f895 3059 	ldrb.w	r3, [r5, #89]	@ 0x59
90015696:	015b      	lsls	r3, r3, #5
90015698:	f403 7180 	and.w	r1, r3, #256	@ 0x100
9001569c:	f895 3052 	ldrb.w	r3, [r5, #82]	@ 0x52
900156a0:	430b      	orrs	r3, r1
900156a2:	425b      	negs	r3, r3
900156a4:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
900156a8:	bdf0      	pop	{r4, r5, r6, r7, pc}

900156aa <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
900156aa:	b538      	push	{r3, r4, r5, lr}
900156ac:	460c      	mov	r4, r1
900156ae:	6811      	ldr	r1, [r2, #0]
900156b0:	4610      	mov	r0, r2
900156b2:	68cd      	ldr	r5, [r1, #12]
900156b4:	4619      	mov	r1, r3
900156b6:	47a8      	blx	r5
900156b8:	2800      	cmp	r0, #0
900156ba:	bf08      	it	eq
900156bc:	4620      	moveq	r0, r4
900156be:	bd38      	pop	{r3, r4, r5, pc}

900156c0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
900156c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
900156c2:	4604      	mov	r4, r0
900156c4:	4615      	mov	r5, r2
900156c6:	4608      	mov	r0, r1
900156c8:	b93a      	cbnz	r2, 900156da <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
900156ca:	f8a4 205a 	strh.w	r2, [r4, #90]	@ 0x5a
900156ce:	f8a4 205c 	strh.w	r2, [r4, #92]	@ 0x5c
900156d2:	f8a4 205e 	strh.w	r2, [r4, #94]	@ 0x5e
900156d6:	4628      	mov	r0, r5
900156d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
900156da:	f892 c00d 	ldrb.w	ip, [r2, #13]
900156de:	f46f 6763 	mvn.w	r7, #3632	@ 0xe30
900156e2:	8893      	ldrh	r3, [r2, #4]
900156e4:	ea4f 160c 	mov.w	r6, ip, lsl #4
900156e8:	f406 7280 	and.w	r2, r6, #256	@ 0x100
900156ec:	79ee      	ldrb	r6, [r5, #7]
900156ee:	4316      	orrs	r6, r2
900156f0:	19da      	adds	r2, r3, r7
900156f2:	b291      	uxth	r1, r2
900156f4:	b2b7      	uxth	r7, r6
900156f6:	291d      	cmp	r1, #29
900156f8:	d87b      	bhi.n	900157f2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
900156fa:	2201      	movs	r2, #1
900156fc:	10f6      	asrs	r6, r6, #3
900156fe:	408a      	lsls	r2, r1
90015700:	4974      	ldr	r1, [pc, #464]	@ (900158d4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x214>)
90015702:	420a      	tst	r2, r1
90015704:	d12e      	bne.n	90015764 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
90015706:	f412 7f60 	tst.w	r2, #896	@ 0x380
9001570a:	d072      	beq.n	900157f2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
9001570c:	f104 024c 	add.w	r2, r4, #76	@ 0x4c
90015710:	462b      	mov	r3, r5
90015712:	f105 0e08 	add.w	lr, r5, #8
90015716:	4615      	mov	r5, r2
90015718:	6818      	ldr	r0, [r3, #0]
9001571a:	3308      	adds	r3, #8
9001571c:	f853 1c04 	ldr.w	r1, [r3, #-4]
90015720:	4694      	mov	ip, r2
90015722:	4573      	cmp	r3, lr
90015724:	e8ac 0003 	stmia.w	ip!, {r0, r1}
90015728:	4662      	mov	r2, ip
9001572a:	d1f5      	bne.n	90015718 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
9001572c:	6818      	ldr	r0, [r3, #0]
9001572e:	f8cc 0000 	str.w	r0, [ip]
90015732:	889b      	ldrh	r3, [r3, #4]
90015734:	f8ac 3004 	strh.w	r3, [ip, #4]
90015738:	b2b3      	uxth	r3, r6
9001573a:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
9001573e:	f894 0059 	ldrb.w	r0, [r4, #89]	@ 0x59
90015742:	1aca      	subs	r2, r1, r3
90015744:	1bcf      	subs	r7, r1, r7
90015746:	f020 0060 	bic.w	r0, r0, #96	@ 0x60
9001574a:	b292      	uxth	r2, r2
9001574c:	1afb      	subs	r3, r7, r3
9001574e:	f884 2054 	strb.w	r2, [r4, #84]	@ 0x54
90015752:	10d2      	asrs	r2, r2, #3
90015754:	f002 0260 	and.w	r2, r2, #96	@ 0x60
90015758:	4302      	orrs	r2, r0
9001575a:	f884 2059 	strb.w	r2, [r4, #89]	@ 0x59
9001575e:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
90015762:	e7b8      	b.n	900156d6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
90015764:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
90015766:	eb04 0343 	add.w	r3, r4, r3, lsl #1
9001576a:	8c59      	ldrh	r1, [r3, #34]	@ 0x22
9001576c:	f640 6333 	movw	r3, #3635	@ 0xe33
90015770:	4299      	cmp	r1, r3
90015772:	d110      	bne.n	90015796 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd6>
90015774:	6803      	ldr	r3, [r0, #0]
90015776:	68db      	ldr	r3, [r3, #12]
90015778:	4798      	blx	r3
9001577a:	7b41      	ldrb	r1, [r0, #13]
9001577c:	00cb      	lsls	r3, r1, #3
9001577e:	f403 7280 	and.w	r2, r3, #256	@ 0x100
90015782:	7a03      	ldrb	r3, [r0, #8]
90015784:	0648      	lsls	r0, r1, #25
90015786:	ea43 0302 	orr.w	r3, r3, r2
9001578a:	bf44      	itt	mi
9001578c:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
90015790:	b21b      	sxthmi	r3, r3
90015792:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
90015796:	f8b4 305a 	ldrh.w	r3, [r4, #90]	@ 0x5a
9001579a:	462a      	mov	r2, r5
9001579c:	f105 0c08 	add.w	ip, r5, #8
900157a0:	443b      	add	r3, r7
900157a2:	4433      	add	r3, r6
900157a4:	f104 064c 	add.w	r6, r4, #76	@ 0x4c
900157a8:	b29b      	uxth	r3, r3
900157aa:	4635      	mov	r5, r6
900157ac:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
900157b0:	6810      	ldr	r0, [r2, #0]
900157b2:	3208      	adds	r2, #8
900157b4:	f852 1c04 	ldr.w	r1, [r2, #-4]
900157b8:	4637      	mov	r7, r6
900157ba:	4562      	cmp	r2, ip
900157bc:	c703      	stmia	r7!, {r0, r1}
900157be:	463e      	mov	r6, r7
900157c0:	d1f6      	bne.n	900157b0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf0>
900157c2:	6810      	ldr	r0, [r2, #0]
900157c4:	6038      	str	r0, [r7, #0]
900157c6:	8892      	ldrh	r2, [r2, #4]
900157c8:	80ba      	strh	r2, [r7, #4]
900157ca:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
900157ce:	10db      	asrs	r3, r3, #3
900157d0:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
900157d4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
900157d8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
900157dc:	4313      	orrs	r3, r2
900157de:	f894 205e 	ldrb.w	r2, [r4, #94]	@ 0x5e
900157e2:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
900157e6:	f894 3055 	ldrb.w	r3, [r4, #85]	@ 0x55
900157ea:	1a9b      	subs	r3, r3, r2
900157ec:	f884 3055 	strb.w	r3, [r4, #85]	@ 0x55
900157f0:	e771      	b.n	900156d6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
900157f2:	f023 0204 	bic.w	r2, r3, #4
900157f6:	f640 611b 	movw	r1, #3611	@ 0xe1b
900157fa:	428a      	cmp	r2, r1
900157fc:	d003      	beq.n	90015806 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x146>
900157fe:	f640 621d 	movw	r2, #3613	@ 0xe1d
90015802:	4293      	cmp	r3, r2
90015804:	d120      	bne.n	90015848 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x188>
90015806:	3b01      	subs	r3, #1
90015808:	4602      	mov	r2, r0
9001580a:	4629      	mov	r1, r5
9001580c:	4620      	mov	r0, r4
9001580e:	b29b      	uxth	r3, r3
90015810:	f7ff ff4b 	bl	900156aa <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
90015814:	7b41      	ldrb	r1, [r0, #13]
90015816:	00cb      	lsls	r3, r1, #3
90015818:	0649      	lsls	r1, r1, #25
9001581a:	f403 7280 	and.w	r2, r3, #256	@ 0x100
9001581e:	7a03      	ldrb	r3, [r0, #8]
90015820:	ea43 0302 	orr.w	r3, r3, r2
90015824:	bf44      	itt	mi
90015826:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
9001582a:	b21b      	sxthmi	r3, r3
9001582c:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
90015830:	7b6b      	ldrb	r3, [r5, #13]
90015832:	7aaa      	ldrb	r2, [r5, #10]
90015834:	005b      	lsls	r3, r3, #1
90015836:	f403 7380 	and.w	r3, r3, #256	@ 0x100
9001583a:	4313      	orrs	r3, r2
9001583c:	115a      	asrs	r2, r3, #5
9001583e:	eb02 0393 	add.w	r3, r2, r3, lsr #2
90015842:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
90015846:	e035      	b.n	900158b4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f4>
90015848:	ea4f 02cc 	mov.w	r2, ip, lsl #3
9001584c:	f01c 0f40 	tst.w	ip, #64	@ 0x40
90015850:	f402 7180 	and.w	r1, r2, #256	@ 0x100
90015854:	7a2a      	ldrb	r2, [r5, #8]
90015856:	ea42 0201 	orr.w	r2, r2, r1
9001585a:	f640 6109 	movw	r1, #3593	@ 0xe09
9001585e:	bf1c      	itt	ne
90015860:	f5a2 7200 	subne.w	r2, r2, #512	@ 0x200
90015864:	b212      	sxthne	r2, r2
90015866:	f8a4 205a 	strh.w	r2, [r4, #90]	@ 0x5a
9001586a:	f023 0210 	bic.w	r2, r3, #16
9001586e:	428a      	cmp	r2, r1
90015870:	d003      	beq.n	9001587a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ba>
90015872:	f640 6213 	movw	r2, #3603	@ 0xe13
90015876:	4293      	cmp	r3, r2
90015878:	d129      	bne.n	900158ce <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20e>
9001587a:	7b6e      	ldrb	r6, [r5, #13]
9001587c:	4629      	mov	r1, r5
9001587e:	0076      	lsls	r6, r6, #1
90015880:	f406 7280 	and.w	r2, r6, #256	@ 0x100
90015884:	7aae      	ldrb	r6, [r5, #10]
90015886:	4316      	orrs	r6, r2
90015888:	f640 6213 	movw	r2, #3603	@ 0xe13
9001588c:	4293      	cmp	r3, r2
9001588e:	4602      	mov	r2, r0
90015890:	4620      	mov	r0, r4
90015892:	bf16      	itet	ne
90015894:	f103 33ff 	addne.w	r3, r3, #4294967295
90015898:	f640 630c 	movweq	r3, #3596	@ 0xe0c
9001589c:	b29b      	uxthne	r3, r3
9001589e:	f7ff ff04 	bl	900156aa <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
900158a2:	7b43      	ldrb	r3, [r0, #13]
900158a4:	7a82      	ldrb	r2, [r0, #10]
900158a6:	005b      	lsls	r3, r3, #1
900158a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
900158ac:	4313      	orrs	r3, r2
900158ae:	1af6      	subs	r6, r6, r3
900158b0:	f8a4 605e 	strh.w	r6, [r4, #94]	@ 0x5e
900158b4:	7b69      	ldrb	r1, [r5, #13]
900158b6:	00cb      	lsls	r3, r1, #3
900158b8:	f403 7280 	and.w	r2, r3, #256	@ 0x100
900158bc:	7a2b      	ldrb	r3, [r5, #8]
900158be:	4313      	orrs	r3, r2
900158c0:	064a      	lsls	r2, r1, #25
900158c2:	bf44      	itt	mi
900158c4:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
900158c8:	b21b      	sxthmi	r3, r3
900158ca:	1bdb      	subs	r3, r3, r7
900158cc:	e747      	b.n	9001575e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
900158ce:	2300      	movs	r3, #0
900158d0:	e7b7      	b.n	90015842 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x182>
900158d2:	bf00      	nop
900158d4:	3fc00079 	.word	0x3fc00079

900158d8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
900158d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
900158dc:	4604      	mov	r4, r0
900158de:	b942      	cbnz	r2, 900158f2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
900158e0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
900158e4:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
900158e8:	f8a0 305c 	strh.w	r3, [r0, #92]	@ 0x5c
900158ec:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
900158f0:	e047      	b.n	90015982 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
900158f2:	7b51      	ldrb	r1, [r2, #13]
900158f4:	8893      	ldrh	r3, [r2, #4]
900158f6:	010d      	lsls	r5, r1, #4
900158f8:	f405 7080 	and.w	r0, r5, #256	@ 0x100
900158fc:	79d5      	ldrb	r5, [r2, #7]
900158fe:	4305      	orrs	r5, r0
90015900:	2d04      	cmp	r5, #4
90015902:	bfcc      	ite	gt
90015904:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
90015908:	f04f 0e01 	movle.w	lr, #1
9001590c:	f5b3 6fdd 	cmp.w	r3, #1768	@ 0x6e8
90015910:	f200 80ab 	bhi.w	90015a6a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
90015914:	f240 60e7 	movw	r0, #1767	@ 0x6e7
90015918:	4283      	cmp	r3, r0
9001591a:	d216      	bcs.n	9001594a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
9001591c:	f240 605b 	movw	r0, #1627	@ 0x65b
90015920:	4283      	cmp	r3, r0
90015922:	d859      	bhi.n	900159d8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
90015924:	f240 6057 	movw	r0, #1623	@ 0x657
90015928:	4283      	cmp	r3, r0
9001592a:	d20e      	bcs.n	9001594a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
9001592c:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
90015930:	d24a      	bcs.n	900159c8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
90015932:	f240 604e 	movw	r0, #1614	@ 0x64e
90015936:	4283      	cmp	r3, r0
90015938:	d207      	bcs.n	9001594a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
9001593a:	f240 601a 	movw	r0, #1562	@ 0x61a
9001593e:	4283      	cmp	r3, r0
90015940:	d02a      	beq.n	90015998 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
90015942:	d821      	bhi.n	90015988 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
90015944:	f5b3 6fc2 	cmp.w	r3, #1552	@ 0x610
90015948:	d35b      	bcc.n	90015a02 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
9001594a:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	@ 0x5a
9001594e:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
90015952:	f040 80d0 	bne.w	90015af6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
90015956:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	@ 0x5c
9001595a:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
9001595e:	f040 80ca 	bne.w	90015af6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
90015962:	00cb      	lsls	r3, r1, #3
90015964:	0649      	lsls	r1, r1, #25
90015966:	f403 7080 	and.w	r0, r3, #256	@ 0x100
9001596a:	7a13      	ldrb	r3, [r2, #8]
9001596c:	ea43 0300 	orr.w	r3, r3, r0
90015970:	bf44      	itt	mi
90015972:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
90015976:	b21b      	sxthmi	r3, r3
90015978:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
9001597c:	1b5d      	subs	r5, r3, r5
9001597e:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
90015982:	4610      	mov	r0, r2
90015984:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
90015988:	f240 604b 	movw	r0, #1611	@ 0x64b
9001598c:	4283      	cmp	r3, r0
9001598e:	d338      	bcc.n	90015a02 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
90015990:	f240 604c 	movw	r0, #1612	@ 0x64c
90015994:	4283      	cmp	r3, r0
90015996:	d9d8      	bls.n	9001594a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
90015998:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	@ 0x5a
9001599c:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	@ 0x5c
900159a0:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
900159a4:	f040 80f3 	bne.w	90015b8e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
900159a8:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
900159ac:	f040 80ef 	bne.w	90015b8e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
900159b0:	00cb      	lsls	r3, r1, #3
900159b2:	064e      	lsls	r6, r1, #25
900159b4:	f403 7080 	and.w	r0, r3, #256	@ 0x100
900159b8:	7a13      	ldrb	r3, [r2, #8]
900159ba:	ea43 0300 	orr.w	r3, r3, r0
900159be:	bf44      	itt	mi
900159c0:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
900159c4:	b21b      	sxthmi	r3, r3
900159c6:	e7d9      	b.n	9001597c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
900159c8:	f240 6054 	movw	r0, #1620	@ 0x654
900159cc:	4283      	cmp	r3, r0
900159ce:	d8e3      	bhi.n	90015998 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
900159d0:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
900159d4:	d9e0      	bls.n	90015998 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
900159d6:	e7b8      	b.n	9001594a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
900159d8:	f240 6074 	movw	r0, #1652	@ 0x674
900159dc:	4283      	cmp	r3, r0
900159de:	d0b4      	beq.n	9001594a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
900159e0:	d82d      	bhi.n	90015a3e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
900159e2:	f240 605e 	movw	r0, #1630	@ 0x65e
900159e6:	4283      	cmp	r3, r0
900159e8:	d804      	bhi.n	900159f4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
900159ea:	f240 605d 	movw	r0, #1629	@ 0x65d
900159ee:	4283      	cmp	r3, r0
900159f0:	d3d2      	bcc.n	90015998 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
900159f2:	e7aa      	b.n	9001594a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
900159f4:	f240 605f 	movw	r0, #1631	@ 0x65f
900159f8:	4283      	cmp	r3, r0
900159fa:	d0cd      	beq.n	90015998 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
900159fc:	f5b3 6fce 	cmp.w	r3, #1648	@ 0x670
90015a00:	d0a3      	beq.n	9001594a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
90015a02:	00cb      	lsls	r3, r1, #3
90015a04:	0649      	lsls	r1, r1, #25
90015a06:	f403 7080 	and.w	r0, r3, #256	@ 0x100
90015a0a:	7a13      	ldrb	r3, [r2, #8]
90015a0c:	ea43 0300 	orr.w	r3, r3, r0
90015a10:	bf44      	itt	mi
90015a12:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
90015a16:	b21b      	sxthmi	r3, r3
90015a18:	1b5d      	subs	r5, r3, r5
90015a1a:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
90015a1e:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
90015a22:	7b53      	ldrb	r3, [r2, #13]
90015a24:	015b      	lsls	r3, r3, #5
90015a26:	f403 7180 	and.w	r1, r3, #256	@ 0x100
90015a2a:	7993      	ldrb	r3, [r2, #6]
90015a2c:	430b      	orrs	r3, r1
90015a2e:	2105      	movs	r1, #5
90015a30:	005b      	lsls	r3, r3, #1
90015a32:	fb93 f3f1 	sdiv	r3, r3, r1
90015a36:	f992 1009 	ldrsb.w	r1, [r2, #9]
90015a3a:	440b      	add	r3, r1
90015a3c:	e756      	b.n	900158ec <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
90015a3e:	f240 60e2 	movw	r0, #1762	@ 0x6e2
90015a42:	4283      	cmp	r3, r0
90015a44:	d809      	bhi.n	90015a5a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
90015a46:	f240 60df 	movw	r0, #1759	@ 0x6df
90015a4a:	4283      	cmp	r3, r0
90015a4c:	f4bf af7d 	bcs.w	9001594a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
90015a50:	f2a3 63d6 	subw	r3, r3, #1750	@ 0x6d6
90015a54:	2b05      	cmp	r3, #5
90015a56:	d8d4      	bhi.n	90015a02 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
90015a58:	e777      	b.n	9001594a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
90015a5a:	f240 60e3 	movw	r0, #1763	@ 0x6e3
90015a5e:	4283      	cmp	r3, r0
90015a60:	d09a      	beq.n	90015998 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
90015a62:	f240 60e4 	movw	r0, #1764	@ 0x6e4
90015a66:	4283      	cmp	r3, r0
90015a68:	e7ca      	b.n	90015a00 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
90015a6a:	f5b3 6f0f 	cmp.w	r3, #2288	@ 0x8f0
90015a6e:	d22b      	bcs.n	90015ac8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
90015a70:	f640 00ed 	movw	r0, #2285	@ 0x8ed
90015a74:	4283      	cmp	r3, r0
90015a76:	d28f      	bcs.n	90015998 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
90015a78:	f640 00e5 	movw	r0, #2277	@ 0x8e5
90015a7c:	4283      	cmp	r3, r0
90015a7e:	d816      	bhi.n	90015aae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
90015a80:	f640 00e4 	movw	r0, #2276	@ 0x8e4
90015a84:	4283      	cmp	r3, r0
90015a86:	f4bf af60 	bcs.w	9001594a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
90015a8a:	f240 60ec 	movw	r0, #1772	@ 0x6ec
90015a8e:	4283      	cmp	r3, r0
90015a90:	d80a      	bhi.n	90015aa8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
90015a92:	f240 60eb 	movw	r0, #1771	@ 0x6eb
90015a96:	4283      	cmp	r3, r0
90015a98:	f4bf af57 	bcs.w	9001594a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
90015a9c:	f240 60ea 	movw	r0, #1770	@ 0x6ea
90015aa0:	4283      	cmp	r3, r0
90015aa2:	f43f af79 	beq.w	90015998 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
90015aa6:	e7ac      	b.n	90015a02 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
90015aa8:	f240 60ed 	movw	r0, #1773	@ 0x6ed
90015aac:	e7f8      	b.n	90015aa0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
90015aae:	f640 00e8 	movw	r0, #2280	@ 0x8e8
90015ab2:	4283      	cmp	r3, r0
90015ab4:	d802      	bhi.n	90015abc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
90015ab6:	f640 00e7 	movw	r0, #2279	@ 0x8e7
90015aba:	e798      	b.n	900159ee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
90015abc:	f640 00e9 	movw	r0, #2281	@ 0x8e9
90015ac0:	4283      	cmp	r3, r0
90015ac2:	f47f af42 	bne.w	9001594a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
90015ac6:	e767      	b.n	90015998 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
90015ac8:	f640 00f6 	movw	r0, #2294	@ 0x8f6
90015acc:	4283      	cmp	r3, r0
90015ace:	f43f af63 	beq.w	90015998 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
90015ad2:	d802      	bhi.n	90015ada <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
90015ad4:	f640 00f2 	movw	r0, #2290	@ 0x8f2
90015ad8:	e7f2      	b.n	90015ac0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
90015ada:	f640 00fa 	movw	r0, #2298	@ 0x8fa
90015ade:	4283      	cmp	r3, r0
90015ae0:	d805      	bhi.n	90015aee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
90015ae2:	f640 00f9 	movw	r0, #2297	@ 0x8f9
90015ae6:	4283      	cmp	r3, r0
90015ae8:	f4ff af2f 	bcc.w	9001594a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
90015aec:	e754      	b.n	90015998 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
90015aee:	f640 00fe 	movw	r0, #2302	@ 0x8fe
90015af2:	4283      	cmp	r3, r0
90015af4:	e7af      	b.n	90015a56 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
90015af6:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
90015afa:	4617      	mov	r7, r2
90015afc:	f102 0808 	add.w	r8, r2, #8
90015b00:	4666      	mov	r6, ip
90015b02:	6838      	ldr	r0, [r7, #0]
90015b04:	3708      	adds	r7, #8
90015b06:	f857 1c04 	ldr.w	r1, [r7, #-4]
90015b0a:	46e6      	mov	lr, ip
90015b0c:	4547      	cmp	r7, r8
90015b0e:	e8ae 0003 	stmia.w	lr!, {r0, r1}
90015b12:	46f4      	mov	ip, lr
90015b14:	d1f5      	bne.n	90015b02 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
90015b16:	6838      	ldr	r0, [r7, #0]
90015b18:	f8ce 0000 	str.w	r0, [lr]
90015b1c:	88b9      	ldrh	r1, [r7, #4]
90015b1e:	f8ae 1004 	strh.w	r1, [lr, #4]
90015b22:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
90015b26:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
90015b2a:	d009      	beq.n	90015b40 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x268>
90015b2c:	7b51      	ldrb	r1, [r2, #13]
90015b2e:	7992      	ldrb	r2, [r2, #6]
90015b30:	0149      	lsls	r1, r1, #5
90015b32:	f401 7180 	and.w	r1, r1, #256	@ 0x100
90015b36:	4311      	orrs	r1, r2
90015b38:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
90015b3c:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
90015b40:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
90015b44:	b2ad      	uxth	r5, r5
90015b46:	d00d      	beq.n	90015b64 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28c>
90015b48:	442b      	add	r3, r5
90015b4a:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
90015b4e:	b29b      	uxth	r3, r3
90015b50:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
90015b54:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
90015b58:	10db      	asrs	r3, r3, #3
90015b5a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
90015b5e:	4313      	orrs	r3, r2
90015b60:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
90015b64:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
90015b68:	00cb      	lsls	r3, r1, #3
90015b6a:	064f      	lsls	r7, r1, #25
90015b6c:	f403 7280 	and.w	r2, r3, #256	@ 0x100
90015b70:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
90015b74:	ea43 0302 	orr.w	r3, r3, r2
90015b78:	bf44      	itt	mi
90015b7a:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
90015b7e:	b21b      	sxthmi	r3, r3
90015b80:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
90015b84:	1b5b      	subs	r3, r3, r5
90015b86:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
90015b8a:	4632      	mov	r2, r6
90015b8c:	e6f9      	b.n	90015982 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
90015b8e:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
90015b92:	4617      	mov	r7, r2
90015b94:	f102 0908 	add.w	r9, r2, #8
90015b98:	4666      	mov	r6, ip
90015b9a:	6838      	ldr	r0, [r7, #0]
90015b9c:	3708      	adds	r7, #8
90015b9e:	f857 1c04 	ldr.w	r1, [r7, #-4]
90015ba2:	46e0      	mov	r8, ip
90015ba4:	454f      	cmp	r7, r9
90015ba6:	e8a8 0003 	stmia.w	r8!, {r0, r1}
90015baa:	46c4      	mov	ip, r8
90015bac:	d1f5      	bne.n	90015b9a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c2>
90015bae:	6838      	ldr	r0, [r7, #0]
90015bb0:	f8c8 0000 	str.w	r0, [r8]
90015bb4:	88b9      	ldrh	r1, [r7, #4]
90015bb6:	f8a8 1004 	strh.w	r1, [r8, #4]
90015bba:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
90015bbe:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
90015bc2:	d009      	beq.n	90015bd8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>
90015bc4:	7b51      	ldrb	r1, [r2, #13]
90015bc6:	7992      	ldrb	r2, [r2, #6]
90015bc8:	0149      	lsls	r1, r1, #5
90015bca:	f401 7180 	and.w	r1, r1, #256	@ 0x100
90015bce:	4311      	orrs	r1, r2
90015bd0:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
90015bd4:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
90015bd8:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
90015bdc:	d00e      	beq.n	90015bfc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
90015bde:	eba3 030e 	sub.w	r3, r3, lr
90015be2:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
90015be6:	b29b      	uxth	r3, r3
90015be8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
90015bec:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
90015bf0:	10db      	asrs	r3, r3, #3
90015bf2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
90015bf6:	4313      	orrs	r3, r2
90015bf8:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
90015bfc:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
90015c00:	00cb      	lsls	r3, r1, #3
90015c02:	0648      	lsls	r0, r1, #25
90015c04:	f403 7280 	and.w	r2, r3, #256	@ 0x100
90015c08:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
90015c0c:	ea43 0302 	orr.w	r3, r3, r2
90015c10:	bf44      	itt	mi
90015c12:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
90015c16:	b21b      	sxthmi	r3, r3
90015c18:	1b5d      	subs	r5, r3, r5
90015c1a:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
90015c1e:	e7b4      	b.n	90015b8a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>

90015c20 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
90015c20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90015c24:	461e      	mov	r6, r3
90015c26:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
90015c28:	4604      	mov	r4, r0
90015c2a:	4617      	mov	r7, r2
90015c2c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
90015c30:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
90015c34:	f7ef ffac 	bl	90005b90 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
90015c38:	4605      	mov	r5, r0
90015c3a:	b918      	cbnz	r0, 90015c44 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
90015c3c:	6030      	str	r0, [r6, #0]
90015c3e:	4628      	mov	r0, r5
90015c40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90015c44:	683b      	ldr	r3, [r7, #0]
90015c46:	4601      	mov	r1, r0
90015c48:	4638      	mov	r0, r7
90015c4a:	68db      	ldr	r3, [r3, #12]
90015c4c:	4798      	blx	r3
90015c4e:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
90015c52:	4602      	mov	r2, r0
90015c54:	6030      	str	r0, [r6, #0]
90015c56:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
90015c5a:	d213      	bcs.n	90015c84 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
90015c5c:	4643      	mov	r3, r8
90015c5e:	4639      	mov	r1, r7
90015c60:	4620      	mov	r0, r4
90015c62:	f7ff fe39 	bl	900158d8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
90015c66:	6030      	str	r0, [r6, #0]
90015c68:	6833      	ldr	r3, [r6, #0]
90015c6a:	b143      	cbz	r3, 90015c7e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
90015c6c:	7b5a      	ldrb	r2, [r3, #13]
90015c6e:	7a9b      	ldrb	r3, [r3, #10]
90015c70:	0052      	lsls	r2, r2, #1
90015c72:	f402 7280 	and.w	r2, r2, #256	@ 0x100
90015c76:	4313      	orrs	r3, r2
90015c78:	bf0c      	ite	eq
90015c7a:	2301      	moveq	r3, #1
90015c7c:	2300      	movne	r3, #0
90015c7e:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
90015c82:	e7dc      	b.n	90015c3e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
90015c84:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
90015c88:	b29b      	uxth	r3, r3
90015c8a:	2b7f      	cmp	r3, #127	@ 0x7f
90015c8c:	d804      	bhi.n	90015c98 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
90015c8e:	4639      	mov	r1, r7
90015c90:	4620      	mov	r0, r4
90015c92:	f7ff fd15 	bl	900156c0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
90015c96:	e7e6      	b.n	90015c66 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
90015c98:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
90015c9c:	2b00      	cmp	r3, #0
90015c9e:	d0e3      	beq.n	90015c68 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
90015ca0:	f640 1302 	movw	r3, #2306	@ 0x902
90015ca4:	429d      	cmp	r5, r3
90015ca6:	d1df      	bne.n	90015c68 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
90015ca8:	4601      	mov	r1, r0
90015caa:	4620      	mov	r0, r4
90015cac:	f7ff fcd9 	bl	90015662 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
90015cb0:	e7d9      	b.n	90015c66 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

90015cb2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
90015cb2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
90015cb6:	461e      	mov	r6, r3
90015cb8:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
90015cba:	4604      	mov	r4, r0
90015cbc:	4617      	mov	r7, r2
90015cbe:	eb00 0343 	add.w	r3, r0, r3, lsl #1
90015cc2:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
90015cc6:	f7ef ff63 	bl	90005b90 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
90015cca:	4605      	mov	r5, r0
90015ccc:	b918      	cbnz	r0, 90015cd6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x24>
90015cce:	6030      	str	r0, [r6, #0]
90015cd0:	4628      	mov	r0, r5
90015cd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
90015cd6:	683b      	ldr	r3, [r7, #0]
90015cd8:	4601      	mov	r1, r0
90015cda:	4638      	mov	r0, r7
90015cdc:	f8d3 9008 	ldr.w	r9, [r3, #8]
90015ce0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
90015ce4:	47c8      	blx	r9
90015ce6:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
90015cea:	4602      	mov	r2, r0
90015cec:	6030      	str	r0, [r6, #0]
90015cee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
90015cf2:	d213      	bcs.n	90015d1c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x6a>
90015cf4:	4643      	mov	r3, r8
90015cf6:	4639      	mov	r1, r7
90015cf8:	4620      	mov	r0, r4
90015cfa:	f7ff fded 	bl	900158d8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
90015cfe:	6030      	str	r0, [r6, #0]
90015d00:	6833      	ldr	r3, [r6, #0]
90015d02:	b143      	cbz	r3, 90015d16 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x64>
90015d04:	7b5a      	ldrb	r2, [r3, #13]
90015d06:	7a9b      	ldrb	r3, [r3, #10]
90015d08:	0052      	lsls	r2, r2, #1
90015d0a:	f402 7280 	and.w	r2, r2, #256	@ 0x100
90015d0e:	4313      	orrs	r3, r2
90015d10:	bf0c      	ite	eq
90015d12:	2301      	moveq	r3, #1
90015d14:	2300      	movne	r3, #0
90015d16:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
90015d1a:	e7d9      	b.n	90015cd0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1e>
90015d1c:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
90015d20:	b29b      	uxth	r3, r3
90015d22:	2b7f      	cmp	r3, #127	@ 0x7f
90015d24:	d804      	bhi.n	90015d30 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7e>
90015d26:	4639      	mov	r1, r7
90015d28:	4620      	mov	r0, r4
90015d2a:	f7ff fcc9 	bl	900156c0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
90015d2e:	e7e6      	b.n	90015cfe <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>
90015d30:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
90015d34:	2b00      	cmp	r3, #0
90015d36:	d0e3      	beq.n	90015d00 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
90015d38:	f640 1302 	movw	r3, #2306	@ 0x902
90015d3c:	429d      	cmp	r5, r3
90015d3e:	d1df      	bne.n	90015d00 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
90015d40:	4601      	mov	r1, r0
90015d42:	4620      	mov	r0, r4
90015d44:	f7ff fc8d 	bl	90015662 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
90015d48:	e7d9      	b.n	90015cfe <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>

90015d4a <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
90015d4a:	b510      	push	{r4, lr}
90015d4c:	4604      	mov	r4, r0
90015d4e:	f8b4 1040 	ldrh.w	r1, [r4, #64]	@ 0x40
90015d52:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
90015d54:	b1e1      	cbz	r1, 90015d90 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
90015d56:	2b0a      	cmp	r3, #10
90015d58:	d02d      	beq.n	90015db6 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
90015d5a:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
90015d5c:	3901      	subs	r1, #1
90015d5e:	eb04 0042 	add.w	r0, r4, r2, lsl #1
90015d62:	8f40      	ldrh	r0, [r0, #58]	@ 0x3a
90015d64:	f8a4 1040 	strh.w	r1, [r4, #64]	@ 0x40
90015d68:	1c51      	adds	r1, r2, #1
90015d6a:	b289      	uxth	r1, r1
90015d6c:	2901      	cmp	r1, #1
90015d6e:	bf8a      	itet	hi
90015d70:	f102 32ff 	addhi.w	r2, r2, #4294967295
90015d74:	87e1      	strhls	r1, [r4, #62]	@ 0x3e
90015d76:	87e2      	strhhi	r2, [r4, #62]	@ 0x3e
90015d78:	1c5a      	adds	r2, r3, #1
90015d7a:	8722      	strh	r2, [r4, #56]	@ 0x38
90015d7c:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
90015d7e:	4413      	add	r3, r2
90015d80:	b29b      	uxth	r3, r3
90015d82:	2b09      	cmp	r3, #9
90015d84:	bf88      	it	hi
90015d86:	3b0a      	subhi	r3, #10
90015d88:	eb04 0343 	add.w	r3, r4, r3, lsl #1
90015d8c:	8458      	strh	r0, [r3, #34]	@ 0x22
90015d8e:	e7de      	b.n	90015d4e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
90015d90:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
90015d92:	2b0a      	cmp	r3, #10
90015d94:	d00f      	beq.n	90015db6 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
90015d96:	4620      	mov	r0, r4
90015d98:	f7ff fc11 	bl	900155be <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
90015d9c:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
90015d9e:	1c5a      	adds	r2, r3, #1
90015da0:	8722      	strh	r2, [r4, #56]	@ 0x38
90015da2:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
90015da4:	4413      	add	r3, r2
90015da6:	b29b      	uxth	r3, r3
90015da8:	2b09      	cmp	r3, #9
90015daa:	bf88      	it	hi
90015dac:	3b0a      	subhi	r3, #10
90015dae:	eb04 0343 	add.w	r3, r4, r3, lsl #1
90015db2:	8458      	strh	r0, [r3, #34]	@ 0x22
90015db4:	e7ec      	b.n	90015d90 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
90015db6:	bd10      	pop	{r4, pc}

90015db8 <_ZN8touchgfx12TextProvider11getNextCharEv>:
90015db8:	b538      	push	{r3, r4, r5, lr}
90015dba:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
90015dbc:	4604      	mov	r4, r0
90015dbe:	eb00 0243 	add.w	r2, r0, r3, lsl #1
90015dc2:	8c55      	ldrh	r5, [r2, #34]	@ 0x22
90015dc4:	8f02      	ldrh	r2, [r0, #56]	@ 0x38
90015dc6:	3a01      	subs	r2, #1
90015dc8:	8702      	strh	r2, [r0, #56]	@ 0x38
90015dca:	1c5a      	adds	r2, r3, #1
90015dcc:	b292      	uxth	r2, r2
90015dce:	2a09      	cmp	r2, #9
90015dd0:	bf8a      	itet	hi
90015dd2:	3b09      	subhi	r3, #9
90015dd4:	86c2      	strhls	r2, [r0, #54]	@ 0x36
90015dd6:	86c3      	strhhi	r3, [r0, #54]	@ 0x36
90015dd8:	f7ff ffb7 	bl	90015d4a <_ZN8touchgfx12TextProvider15fillInputBufferEv>
90015ddc:	8c23      	ldrh	r3, [r4, #32]
90015dde:	2b01      	cmp	r3, #1
90015de0:	bf9c      	itt	ls
90015de2:	3301      	addls	r3, #1
90015de4:	8423      	strhls	r3, [r4, #32]
90015de6:	8be3      	ldrh	r3, [r4, #30]
90015de8:	b90b      	cbnz	r3, 90015dee <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
90015dea:	2302      	movs	r3, #2
90015dec:	83e3      	strh	r3, [r4, #30]
90015dee:	8be3      	ldrh	r3, [r4, #30]
90015df0:	4628      	mov	r0, r5
90015df2:	3b01      	subs	r3, #1
90015df4:	b29b      	uxth	r3, r3
90015df6:	83e3      	strh	r3, [r4, #30]
90015df8:	eb04 0443 	add.w	r4, r4, r3, lsl #1
90015dfc:	8365      	strh	r5, [r4, #26]
90015dfe:	bd38      	pop	{r3, r4, r5, pc}

90015e00 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
90015e00:	428a      	cmp	r2, r1
90015e02:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
90015e06:	8ec7      	ldrh	r7, [r0, #54]	@ 0x36
90015e08:	d932      	bls.n	90015e70 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x70>
90015e0a:	8f05      	ldrh	r5, [r0, #56]	@ 0x38
90015e0c:	1a54      	subs	r4, r2, r1
90015e0e:	f8b0 8040 	ldrh.w	r8, [r0, #64]	@ 0x40
90015e12:	19ee      	adds	r6, r5, r7
90015e14:	fa1f fe84 	uxth.w	lr, r4
90015e18:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	@ 0x3e
90015e1c:	3e01      	subs	r6, #1
90015e1e:	b2b4      	uxth	r4, r6
90015e20:	eba4 090e 	sub.w	r9, r4, lr
90015e24:	fa1f f989 	uxth.w	r9, r9
90015e28:	2c09      	cmp	r4, #9
90015e2a:	4626      	mov	r6, r4
90015e2c:	bf88      	it	hi
90015e2e:	f1a4 060a 	subhi.w	r6, r4, #10
90015e32:	f1bc 0f00 	cmp.w	ip, #0
90015e36:	f104 34ff 	add.w	r4, r4, #4294967295
90015e3a:	bf08      	it	eq
90015e3c:	f04f 0c02 	moveq.w	ip, #2
90015e40:	eb00 0646 	add.w	r6, r0, r6, lsl #1
90015e44:	b2a4      	uxth	r4, r4
90015e46:	f10c 3cff 	add.w	ip, ip, #4294967295
90015e4a:	f8b6 a022 	ldrh.w	sl, [r6, #34]	@ 0x22
90015e4e:	454c      	cmp	r4, r9
90015e50:	fa1f fc8c 	uxth.w	ip, ip
90015e54:	eb00 064c 	add.w	r6, r0, ip, lsl #1
90015e58:	f8a6 a03a 	strh.w	sl, [r6, #58]	@ 0x3a
90015e5c:	d1e4      	bne.n	90015e28 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
90015e5e:	eba5 050e 	sub.w	r5, r5, lr
90015e62:	eb0e 0408 	add.w	r4, lr, r8
90015e66:	f8a0 c03e 	strh.w	ip, [r0, #62]	@ 0x3e
90015e6a:	8705      	strh	r5, [r0, #56]	@ 0x38
90015e6c:	f8a0 4040 	strh.w	r4, [r0, #64]	@ 0x40
90015e70:	8f04      	ldrh	r4, [r0, #56]	@ 0x38
90015e72:	250a      	movs	r5, #10
90015e74:	1a64      	subs	r4, r4, r1
90015e76:	4439      	add	r1, r7
90015e78:	b289      	uxth	r1, r1
90015e7a:	8704      	strh	r4, [r0, #56]	@ 0x38
90015e7c:	2909      	cmp	r1, #9
90015e7e:	bf88      	it	hi
90015e80:	390a      	subhi	r1, #10
90015e82:	86c1      	strh	r1, [r0, #54]	@ 0x36
90015e84:	b18a      	cbz	r2, 90015eaa <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
90015e86:	8f01      	ldrh	r1, [r0, #56]	@ 0x38
90015e88:	3a01      	subs	r2, #1
90015e8a:	3101      	adds	r1, #1
90015e8c:	b292      	uxth	r2, r2
90015e8e:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
90015e92:	8701      	strh	r1, [r0, #56]	@ 0x38
90015e94:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
90015e96:	b901      	cbnz	r1, 90015e9a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9a>
90015e98:	86c5      	strh	r5, [r0, #54]	@ 0x36
90015e9a:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
90015e9c:	3901      	subs	r1, #1
90015e9e:	b289      	uxth	r1, r1
90015ea0:	86c1      	strh	r1, [r0, #54]	@ 0x36
90015ea2:	eb00 0141 	add.w	r1, r0, r1, lsl #1
90015ea6:	844c      	strh	r4, [r1, #34]	@ 0x22
90015ea8:	e7ec      	b.n	90015e84 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>
90015eaa:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
90015eae:	f7ff bf4c 	b.w	90015d4a <_ZN8touchgfx12TextProvider15fillInputBufferEv>

90015eb2 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
90015eb2:	b570      	push	{r4, r5, r6, lr}
90015eb4:	2500      	movs	r5, #0
90015eb6:	4295      	cmp	r5, r2
90015eb8:	d011      	beq.n	90015ede <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
90015eba:	8bc4      	ldrh	r4, [r0, #30]
90015ebc:	f831 6b02 	ldrh.w	r6, [r1], #2
90015ec0:	4414      	add	r4, r2
90015ec2:	3c01      	subs	r4, #1
90015ec4:	1b64      	subs	r4, r4, r5
90015ec6:	b2a4      	uxth	r4, r4
90015ec8:	2c01      	cmp	r4, #1
90015eca:	bf88      	it	hi
90015ecc:	3c02      	subhi	r4, #2
90015ece:	eb00 0444 	add.w	r4, r0, r4, lsl #1
90015ed2:	8b64      	ldrh	r4, [r4, #26]
90015ed4:	42b4      	cmp	r4, r6
90015ed6:	d117      	bne.n	90015f08 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
90015ed8:	3501      	adds	r5, #1
90015eda:	b2ad      	uxth	r5, r5
90015edc:	e7eb      	b.n	90015eb6 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
90015ede:	f8bd 2010 	ldrh.w	r2, [sp, #16]
90015ee2:	2400      	movs	r4, #0
90015ee4:	4413      	add	r3, r2
90015ee6:	b2a2      	uxth	r2, r4
90015ee8:	429a      	cmp	r2, r3
90015eea:	da0f      	bge.n	90015f0c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
90015eec:	8ec6      	ldrh	r6, [r0, #54]	@ 0x36
90015eee:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
90015ef2:	3401      	adds	r4, #1
90015ef4:	4432      	add	r2, r6
90015ef6:	b292      	uxth	r2, r2
90015ef8:	2a09      	cmp	r2, #9
90015efa:	bf88      	it	hi
90015efc:	3a0a      	subhi	r2, #10
90015efe:	eb00 0242 	add.w	r2, r0, r2, lsl #1
90015f02:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
90015f04:	42aa      	cmp	r2, r5
90015f06:	d0ee      	beq.n	90015ee6 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
90015f08:	2000      	movs	r0, #0
90015f0a:	bd70      	pop	{r4, r5, r6, pc}
90015f0c:	2001      	movs	r0, #1
90015f0e:	e7fc      	b.n	90015f0a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

90015f10 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
90015f10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
90015f14:	4605      	mov	r5, r0
90015f16:	4616      	mov	r6, r2
90015f18:	1c8c      	adds	r4, r1, #2
90015f1a:	8809      	ldrh	r1, [r1, #0]
90015f1c:	ea4f 3a11 	mov.w	sl, r1, lsr #12
90015f20:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
90015f24:	42b3      	cmp	r3, r6
90015f26:	d124      	bne.n	90015f72 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
90015f28:	f3c1 2903 	ubfx	r9, r1, #8, #4
90015f2c:	f3c1 1803 	ubfx	r8, r1, #4, #4
90015f30:	f001 070f 	and.w	r7, r1, #15
90015f34:	4652      	mov	r2, sl
90015f36:	f8cd 8000 	str.w	r8, [sp]
90015f3a:	464b      	mov	r3, r9
90015f3c:	4621      	mov	r1, r4
90015f3e:	4628      	mov	r0, r5
90015f40:	f7ff ffb7 	bl	90015eb2 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
90015f44:	4683      	mov	fp, r0
90015f46:	b168      	cbz	r0, 90015f64 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
90015f48:	eb0a 0109 	add.w	r1, sl, r9
90015f4c:	463a      	mov	r2, r7
90015f4e:	4628      	mov	r0, r5
90015f50:	4441      	add	r1, r8
90015f52:	eb04 0341 	add.w	r3, r4, r1, lsl #1
90015f56:	4649      	mov	r1, r9
90015f58:	f7ff ff52 	bl	90015e00 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
90015f5c:	4658      	mov	r0, fp
90015f5e:	b003      	add	sp, #12
90015f60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90015f64:	eb07 010a 	add.w	r1, r7, sl
90015f68:	4449      	add	r1, r9
90015f6a:	4441      	add	r1, r8
90015f6c:	eb04 0141 	add.w	r1, r4, r1, lsl #1
90015f70:	e7d2      	b.n	90015f18 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
90015f72:	f04f 0b00 	mov.w	fp, #0
90015f76:	e7f1      	b.n	90015f5c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

90015f78 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
90015f78:	b570      	push	{r4, r5, r6, lr}
90015f7a:	8810      	ldrh	r0, [r2, #0]
90015f7c:	4298      	cmp	r0, r3
90015f7e:	d817      	bhi.n	90015fb0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
90015f80:	1e48      	subs	r0, r1, #1
90015f82:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
90015f86:	4298      	cmp	r0, r3
90015f88:	d312      	bcc.n	90015fb0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
90015f8a:	2400      	movs	r4, #0
90015f8c:	428c      	cmp	r4, r1
90015f8e:	d20f      	bcs.n	90015fb0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
90015f90:	1860      	adds	r0, r4, r1
90015f92:	1040      	asrs	r0, r0, #1
90015f94:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
90015f98:	0085      	lsls	r5, r0, #2
90015f9a:	42b3      	cmp	r3, r6
90015f9c:	d902      	bls.n	90015fa4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
90015f9e:	3001      	adds	r0, #1
90015fa0:	b284      	uxth	r4, r0
90015fa2:	e7f3      	b.n	90015f8c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
90015fa4:	d201      	bcs.n	90015faa <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
90015fa6:	b281      	uxth	r1, r0
90015fa8:	e7f0      	b.n	90015f8c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
90015faa:	442a      	add	r2, r5
90015fac:	8850      	ldrh	r0, [r2, #2]
90015fae:	bd70      	pop	{r4, r5, r6, pc}
90015fb0:	2000      	movs	r0, #0
90015fb2:	e7fc      	b.n	90015fae <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

90015fb4 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
90015fb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90015fb8:	6c45      	ldr	r5, [r0, #68]	@ 0x44
90015fba:	4604      	mov	r4, r0
90015fbc:	260b      	movs	r6, #11
90015fbe:	886f      	ldrh	r7, [r5, #2]
90015fc0:	087f      	lsrs	r7, r7, #1
90015fc2:	3e01      	subs	r6, #1
90015fc4:	d013      	beq.n	90015fee <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
90015fc6:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
90015fc8:	462a      	mov	r2, r5
90015fca:	4639      	mov	r1, r7
90015fcc:	4620      	mov	r0, r4
90015fce:	eb04 0343 	add.w	r3, r4, r3, lsl #1
90015fd2:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
90015fd6:	4643      	mov	r3, r8
90015fd8:	f7ff ffce 	bl	90015f78 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
90015fdc:	b138      	cbz	r0, 90015fee <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
90015fde:	eb05 0140 	add.w	r1, r5, r0, lsl #1
90015fe2:	4642      	mov	r2, r8
90015fe4:	4620      	mov	r0, r4
90015fe6:	f7ff ff93 	bl	90015f10 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
90015fea:	2800      	cmp	r0, #0
90015fec:	d1e9      	bne.n	90015fc2 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
90015fee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

90015ff4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
90015ff4:	b570      	push	{r4, r5, r6, lr}
90015ff6:	694a      	ldr	r2, [r1, #20]
90015ff8:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
90015ffa:	684b      	ldr	r3, [r1, #4]
90015ffc:	1b54      	subs	r4, r2, r5
90015ffe:	6ace      	ldr	r6, [r1, #44]	@ 0x2c
90016000:	f000 8106 	beq.w	90016210 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
90016004:	1b9b      	subs	r3, r3, r6
90016006:	d003      	beq.n	90016010 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
90016008:	4363      	muls	r3, r4
9001600a:	2210      	movs	r2, #16
9001600c:	fb93 f3f2 	sdiv	r3, r3, r2
90016010:	680c      	ldr	r4, [r1, #0]
90016012:	698a      	ldr	r2, [r1, #24]
90016014:	1b65      	subs	r5, r4, r5
90016016:	f000 80fd 	beq.w	90016214 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
9001601a:	1b92      	subs	r2, r2, r6
9001601c:	d003      	beq.n	90016026 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
9001601e:	436a      	muls	r2, r5
90016020:	2410      	movs	r4, #16
90016022:	fb92 f2f4 	sdiv	r2, r2, r4
90016026:	1a9b      	subs	r3, r3, r2
90016028:	ed9f 4a89 	vldr	s8, [pc, #548]	@ 90016250 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
9001602c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
90016030:	460a      	mov	r2, r1
90016032:	ee07 3a90 	vmov	s15, r3
90016036:	f100 040c 	add.w	r4, r0, #12
9001603a:	4603      	mov	r3, r0
9001603c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
90016040:	ee67 7a84 	vmul.f32	s15, s15, s8
90016044:	ee87 3a27 	vdiv.f32	s6, s14, s15
90016048:	eeb1 6a43 	vneg.f32	s12, s6
9001604c:	edd2 7a02 	vldr	s15, [r2, #8]
90016050:	3214      	adds	r2, #20
90016052:	eec7 6a27 	vdiv.f32	s13, s14, s15
90016056:	ece3 6a01 	vstmia	r3!, {s13}
9001605a:	429c      	cmp	r4, r3
9001605c:	ed52 7a02 	vldr	s15, [r2, #-8]
90016060:	ee67 7aa6 	vmul.f32	s15, s15, s13
90016064:	edc3 7a02 	vstr	s15, [r3, #8]
90016068:	ed52 7a01 	vldr	s15, [r2, #-4]
9001606c:	ee67 7aa6 	vmul.f32	s15, s15, s13
90016070:	edc3 7a05 	vstr	s15, [r3, #20]
90016074:	d1ea      	bne.n	9001604c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
90016076:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
90016078:	698b      	ldr	r3, [r1, #24]
9001607a:	edd0 4a02 	vldr	s9, [r0, #8]
9001607e:	1a9b      	subs	r3, r3, r2
90016080:	edd0 3a00 	vldr	s7, [r0]
90016084:	edd0 6a01 	vldr	s13, [r0, #4]
90016088:	ee07 3a90 	vmov	s15, r3
9001608c:	684b      	ldr	r3, [r1, #4]
9001608e:	ee76 6ae4 	vsub.f32	s13, s13, s9
90016092:	ed90 5a05 	vldr	s10, [r0, #20]
90016096:	1a9b      	subs	r3, r3, r2
90016098:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9001609c:	ee73 4ae4 	vsub.f32	s9, s7, s9
900160a0:	ed90 2a03 	vldr	s4, [r0, #12]
900160a4:	ee07 3a10 	vmov	s14, r3
900160a8:	edd0 5a04 	vldr	s11, [r0, #16]
900160ac:	ee67 7a84 	vmul.f32	s15, s15, s8
900160b0:	ed90 1a07 	vldr	s2, [r0, #28]
900160b4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
900160b8:	edd0 2a06 	vldr	s5, [r0, #24]
900160bc:	ee75 5ac5 	vsub.f32	s11, s11, s10
900160c0:	ee64 7ae7 	vnmul.f32	s15, s9, s15
900160c4:	ee27 7a04 	vmul.f32	s14, s14, s8
900160c8:	ee32 5a45 	vsub.f32	s10, s4, s10
900160cc:	eee6 7a87 	vfma.f32	s15, s13, s14
900160d0:	ee67 7a83 	vmul.f32	s15, s15, s6
900160d4:	edc0 7a09 	vstr	s15, [r0, #36]	@ 0x24
900160d8:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
900160da:	694a      	ldr	r2, [r1, #20]
900160dc:	1b13      	subs	r3, r2, r4
900160de:	ee07 3a10 	vmov	s14, r3
900160e2:	680b      	ldr	r3, [r1, #0]
900160e4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
900160e8:	1b1b      	subs	r3, r3, r4
900160ea:	ee27 7a04 	vmul.f32	s14, s14, s8
900160ee:	ee64 4ac7 	vnmul.f32	s9, s9, s14
900160f2:	ee07 3a10 	vmov	s14, r3
900160f6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
900160fa:	ee27 7a04 	vmul.f32	s14, s14, s8
900160fe:	eee6 4a87 	vfma.f32	s9, s13, s14
90016102:	ee64 4a86 	vmul.f32	s9, s9, s12
90016106:	edc0 4a0a 	vstr	s9, [r0, #40]	@ 0x28
9001610a:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
9001610c:	698b      	ldr	r3, [r1, #24]
9001610e:	1a9b      	subs	r3, r3, r2
90016110:	ee06 3a90 	vmov	s13, r3
90016114:	684b      	ldr	r3, [r1, #4]
90016116:	1a9b      	subs	r3, r3, r2
90016118:	eef8 6ae6 	vcvt.f32.s32	s13, s13
9001611c:	ee07 3a10 	vmov	s14, r3
90016120:	ee66 6a84 	vmul.f32	s13, s13, s8
90016124:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
90016128:	ee65 6a66 	vnmul.f32	s13, s10, s13
9001612c:	ee27 7a04 	vmul.f32	s14, s14, s8
90016130:	eee5 6a87 	vfma.f32	s13, s11, s14
90016134:	ee66 6a83 	vmul.f32	s13, s13, s6
90016138:	edc0 6a0b 	vstr	s13, [r0, #44]	@ 0x2c
9001613c:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
9001613e:	694a      	ldr	r2, [r1, #20]
90016140:	1b13      	subs	r3, r2, r4
90016142:	ee07 3a10 	vmov	s14, r3
90016146:	680b      	ldr	r3, [r1, #0]
90016148:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
9001614c:	1b1b      	subs	r3, r3, r4
9001614e:	ee27 7a04 	vmul.f32	s14, s14, s8
90016152:	ee25 5a47 	vnmul.f32	s10, s10, s14
90016156:	ee07 3a10 	vmov	s14, r3
9001615a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
9001615e:	ee27 7a04 	vmul.f32	s14, s14, s8
90016162:	eea5 5a87 	vfma.f32	s10, s11, s14
90016166:	edd0 5a08 	vldr	s11, [r0, #32]
9001616a:	ee31 1a65 	vsub.f32	s2, s2, s11
9001616e:	ee72 5ae5 	vsub.f32	s11, s5, s11
90016172:	ee25 5a06 	vmul.f32	s10, s10, s12
90016176:	ed80 5a0c 	vstr	s10, [r0, #48]	@ 0x30
9001617a:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
9001617c:	698b      	ldr	r3, [r1, #24]
9001617e:	1a9b      	subs	r3, r3, r2
90016180:	ee07 3a10 	vmov	s14, r3
90016184:	684b      	ldr	r3, [r1, #4]
90016186:	1a9b      	subs	r3, r3, r2
90016188:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
9001618c:	ee01 3a90 	vmov	s3, r3
90016190:	ee27 7a04 	vmul.f32	s14, s14, s8
90016194:	eef8 1ae1 	vcvt.f32.s32	s3, s3
90016198:	ee25 7ac7 	vnmul.f32	s14, s11, s14
9001619c:	ee61 1a84 	vmul.f32	s3, s3, s8
900161a0:	eea1 7a21 	vfma.f32	s14, s2, s3
900161a4:	ee27 7a03 	vmul.f32	s14, s14, s6
900161a8:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
900161ac:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
900161ae:	694a      	ldr	r2, [r1, #20]
900161b0:	1b13      	subs	r3, r2, r4
900161b2:	ee03 3a10 	vmov	s6, r3
900161b6:	680b      	ldr	r3, [r1, #0]
900161b8:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
900161bc:	1b1b      	subs	r3, r3, r4
900161be:	ee23 3a04 	vmul.f32	s6, s6, s8
900161c2:	ee65 5ac3 	vnmul.f32	s11, s11, s6
900161c6:	ee03 3a10 	vmov	s6, r3
900161ca:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
900161ce:	ee23 4a04 	vmul.f32	s8, s6, s8
900161d2:	eee1 5a04 	vfma.f32	s11, s2, s8
900161d6:	ee25 6a86 	vmul.f32	s12, s11, s12
900161da:	ee62 5a67 	vnmul.f32	s11, s4, s15
900161de:	ed80 6a0e 	vstr	s12, [r0, #56]	@ 0x38
900161e2:	eee3 5aa6 	vfma.f32	s11, s7, s13
900161e6:	eef5 5ac0 	vcmpe.f32	s11, #0.0
900161ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
900161ee:	dd13      	ble.n	90016218 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
900161f0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
900161f4:	ee62 7ae7 	vnmul.f32	s15, s5, s15
900161f8:	63c3      	str	r3, [r0, #60]	@ 0x3c
900161fa:	eee3 7a87 	vfma.f32	s15, s7, s14
900161fe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
90016202:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90016206:	dd15      	ble.n	90016234 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
90016208:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
9001620c:	6403      	str	r3, [r0, #64]	@ 0x40
9001620e:	bd70      	pop	{r4, r5, r6, pc}
90016210:	4623      	mov	r3, r4
90016212:	e6fd      	b.n	90016010 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
90016214:	462a      	mov	r2, r5
90016216:	e706      	b.n	90016026 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
90016218:	d502      	bpl.n	90016220 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
9001621a:	f647 73ff 	movw	r3, #32767	@ 0x7fff
9001621e:	e7e9      	b.n	900161f4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
90016220:	ee22 2a64 	vnmul.f32	s4, s4, s9
90016224:	eea3 2a85 	vfma.f32	s4, s7, s10
90016228:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
9001622c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90016230:	dade      	bge.n	900161f0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
90016232:	e7f2      	b.n	9001621a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
90016234:	d502      	bpl.n	9001623c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
90016236:	f647 73ff 	movw	r3, #32767	@ 0x7fff
9001623a:	e7e7      	b.n	9001620c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
9001623c:	ee62 4ae4 	vnmul.f32	s9, s5, s9
90016240:	eee3 4a86 	vfma.f32	s9, s7, s12
90016244:	eef5 4ac0 	vcmpe.f32	s9, #0.0
90016248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
9001624c:	dadc      	bge.n	90016208 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
9001624e:	e7f2      	b.n	90016236 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
90016250:	3d800000 	.word	0x3d800000

90016254 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
90016254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
90016258:	2714      	movs	r7, #20
9001625a:	435f      	muls	r7, r3
9001625c:	eb02 0c07 	add.w	ip, r2, r7
90016260:	f8dc 5004 	ldr.w	r5, [ip, #4]
90016264:	f115 0e0f 	adds.w	lr, r5, #15
90016268:	f100 80a2 	bmi.w	900163b0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
9001626c:	ea4f 1e2e 	mov.w	lr, lr, asr #4
90016270:	9c08      	ldr	r4, [sp, #32]
90016272:	2614      	movs	r6, #20
90016274:	f8c0 e014 	str.w	lr, [r0, #20]
90016278:	4366      	muls	r6, r4
9001627a:	eb02 0806 	add.w	r8, r2, r6
9001627e:	f8d8 5004 	ldr.w	r5, [r8, #4]
90016282:	f115 040f 	adds.w	r4, r5, #15
90016286:	f100 809f 	bmi.w	900163c8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
9001628a:	1124      	asrs	r4, r4, #4
9001628c:	eba4 040e 	sub.w	r4, r4, lr
90016290:	6184      	str	r4, [r0, #24]
90016292:	2c00      	cmp	r4, #0
90016294:	f000 808a 	beq.w	900163ac <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
90016298:	f8dc 9004 	ldr.w	r9, [ip, #4]
9001629c:	f8d8 4004 	ldr.w	r4, [r8, #4]
900162a0:	5995      	ldr	r5, [r2, r6]
900162a2:	eba4 0809 	sub.w	r8, r4, r9
900162a6:	59d4      	ldr	r4, [r2, r7]
900162a8:	eba5 0a04 	sub.w	sl, r5, r4
900162ac:	ea4f 1608 	mov.w	r6, r8, lsl #4
900162b0:	ea4f 150a 	mov.w	r5, sl, lsl #4
900162b4:	fb0e fe05 	mul.w	lr, lr, r5
900162b8:	fb0a ee19 	mls	lr, sl, r9, lr
900162bc:	fb08 e404 	mla	r4, r8, r4, lr
900162c0:	3c01      	subs	r4, #1
900162c2:	19a4      	adds	r4, r4, r6
900162c4:	f100 808c 	bmi.w	900163e0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
900162c8:	fb94 fef6 	sdiv	lr, r4, r6
900162cc:	fb06 441e 	mls	r4, r6, lr, r4
900162d0:	f8c0 e000 	str.w	lr, [r0]
900162d4:	6104      	str	r4, [r0, #16]
900162d6:	2d00      	cmp	r5, #0
900162d8:	f2c0 8095 	blt.w	90016406 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
900162dc:	fb95 f4f6 	sdiv	r4, r5, r6
900162e0:	fb06 5514 	mls	r5, r6, r4, r5
900162e4:	6044      	str	r4, [r0, #4]
900162e6:	6085      	str	r5, [r0, #8]
900162e8:	60c6      	str	r6, [r0, #12]
900162ea:	eb01 0383 	add.w	r3, r1, r3, lsl #2
900162ee:	f8dc 4004 	ldr.w	r4, [ip, #4]
900162f2:	6945      	ldr	r5, [r0, #20]
900162f4:	59d2      	ldr	r2, [r2, r7]
900162f6:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
900162fa:	eddf 6a4b 	vldr	s13, [pc, #300]	@ 90016428 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
900162fe:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
90016302:	ee07 4a10 	vmov	s14, r4
90016306:	6804      	ldr	r4, [r0, #0]
90016308:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
9001630c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
90016310:	ee07 2a90 	vmov	s15, r2
90016314:	ee27 7a26 	vmul.f32	s14, s14, s13
90016318:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9001631c:	ee67 7aa6 	vmul.f32	s15, s15, s13
90016320:	edd3 6a00 	vldr	s13, [r3]
90016324:	eee6 6a07 	vfma.f32	s13, s12, s14
90016328:	ed91 6a09 	vldr	s12, [r1, #36]	@ 0x24
9001632c:	eee6 6a27 	vfma.f32	s13, s12, s15
90016330:	edc0 6a07 	vstr	s13, [r0, #28]
90016334:	edd0 6a01 	vldr	s13, [r0, #4]
90016338:	edd1 5a09 	vldr	s11, [r1, #36]	@ 0x24
9001633c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
90016340:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
90016344:	eea6 6aa5 	vfma.f32	s12, s13, s11
90016348:	ed80 6a08 	vstr	s12, [r0, #32]
9001634c:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
9001634e:	6242      	str	r2, [r0, #36]	@ 0x24
90016350:	edd1 5a0c 	vldr	s11, [r1, #48]	@ 0x30
90016354:	ed93 6a03 	vldr	s12, [r3, #12]
90016358:	eea5 6a87 	vfma.f32	s12, s11, s14
9001635c:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
90016360:	eea5 6aa7 	vfma.f32	s12, s11, s15
90016364:	ed80 6a0a 	vstr	s12, [r0, #40]	@ 0x28
90016368:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
9001636c:	ed91 6a0c 	vldr	s12, [r1, #48]	@ 0x30
90016370:	eea6 6aa5 	vfma.f32	s12, s13, s11
90016374:	ed80 6a0b 	vstr	s12, [r0, #44]	@ 0x2c
90016378:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
9001637a:	6302      	str	r2, [r0, #48]	@ 0x30
9001637c:	ed93 6a06 	vldr	s12, [r3, #24]
90016380:	edd1 5a0e 	vldr	s11, [r1, #56]	@ 0x38
90016384:	eea5 6a87 	vfma.f32	s12, s11, s14
90016388:	eeb0 7a46 	vmov.f32	s14, s12
9001638c:	ed91 6a0d 	vldr	s12, [r1, #52]	@ 0x34
90016390:	eea6 7a27 	vfma.f32	s14, s12, s15
90016394:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
90016398:	ed91 7a0d 	vldr	s14, [r1, #52]	@ 0x34
9001639c:	edd1 7a0e 	vldr	s15, [r1, #56]	@ 0x38
900163a0:	eee6 7a87 	vfma.f32	s15, s13, s14
900163a4:	edc0 7a0e 	vstr	s15, [r0, #56]	@ 0x38
900163a8:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
900163aa:	63c3      	str	r3, [r0, #60]	@ 0x3c
900163ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
900163b0:	2410      	movs	r4, #16
900163b2:	f1c5 0501 	rsb	r5, r5, #1
900163b6:	fb9e fef4 	sdiv	lr, lr, r4
900163ba:	f015 050f 	ands.w	r5, r5, #15
900163be:	bf18      	it	ne
900163c0:	2501      	movne	r5, #1
900163c2:	ebae 0e05 	sub.w	lr, lr, r5
900163c6:	e753      	b.n	90016270 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
900163c8:	f04f 0910 	mov.w	r9, #16
900163cc:	f1c5 0501 	rsb	r5, r5, #1
900163d0:	fb94 f4f9 	sdiv	r4, r4, r9
900163d4:	f015 050f 	ands.w	r5, r5, #15
900163d8:	bf18      	it	ne
900163da:	2501      	movne	r5, #1
900163dc:	1b64      	subs	r4, r4, r5
900163de:	e755      	b.n	9001628c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
900163e0:	4264      	negs	r4, r4
900163e2:	fb94 fef6 	sdiv	lr, r4, r6
900163e6:	f1ce 0800 	rsb	r8, lr, #0
900163ea:	fb06 441e 	mls	r4, r6, lr, r4
900163ee:	f8c0 8000 	str.w	r8, [r0]
900163f2:	6104      	str	r4, [r0, #16]
900163f4:	2c00      	cmp	r4, #0
900163f6:	f43f af6e 	beq.w	900162d6 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
900163fa:	ea6f 0e0e 	mvn.w	lr, lr
900163fe:	1b34      	subs	r4, r6, r4
90016400:	f8c0 e000 	str.w	lr, [r0]
90016404:	e766      	b.n	900162d4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
90016406:	426d      	negs	r5, r5
90016408:	fb95 f4f6 	sdiv	r4, r5, r6
9001640c:	f1c4 0e00 	rsb	lr, r4, #0
90016410:	fb06 5514 	mls	r5, r6, r4, r5
90016414:	f8c0 e004 	str.w	lr, [r0, #4]
90016418:	6085      	str	r5, [r0, #8]
9001641a:	2d00      	cmp	r5, #0
9001641c:	f43f af64 	beq.w	900162e8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
90016420:	43e4      	mvns	r4, r4
90016422:	1b75      	subs	r5, r6, r5
90016424:	6044      	str	r4, [r0, #4]
90016426:	e75e      	b.n	900162e6 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
90016428:	3d800000 	.word	0x3d800000

9001642c <_ZN8touchgfx7Unicode6strlenEPKt>:
9001642c:	4602      	mov	r2, r0
9001642e:	b148      	cbz	r0, 90016444 <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
90016430:	2300      	movs	r3, #0
90016432:	b298      	uxth	r0, r3
90016434:	3301      	adds	r3, #1
90016436:	eb02 0143 	add.w	r1, r2, r3, lsl #1
9001643a:	f831 1c02 	ldrh.w	r1, [r1, #-2]
9001643e:	2900      	cmp	r1, #0
90016440:	d1f7      	bne.n	90016432 <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
90016442:	4770      	bx	lr
90016444:	4770      	bx	lr

90016446 <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
90016446:	b530      	push	{r4, r5, lr}
90016448:	4604      	mov	r4, r0
9001644a:	b159      	cbz	r1, 90016464 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
9001644c:	b148      	cbz	r0, 90016462 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
9001644e:	2300      	movs	r3, #0
90016450:	b298      	uxth	r0, r3
90016452:	4282      	cmp	r2, r0
90016454:	d905      	bls.n	90016462 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
90016456:	5ccd      	ldrb	r5, [r1, r3]
90016458:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
9001645c:	3301      	adds	r3, #1
9001645e:	2d00      	cmp	r5, #0
90016460:	d1f6      	bne.n	90016450 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
90016462:	bd30      	pop	{r4, r5, pc}
90016464:	4608      	mov	r0, r1
90016466:	e7fc      	b.n	90016462 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

90016468 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>:
90016468:	b5f0      	push	{r4, r5, r6, r7, lr}
9001646a:	468c      	mov	ip, r1
9001646c:	b08b      	sub	sp, #44	@ 0x2c
9001646e:	2100      	movs	r1, #0
90016470:	ae01      	add	r6, sp, #4
90016472:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
90016476:	211f      	movs	r1, #31
90016478:	fbb0 f7f3 	udiv	r7, r0, r3
9001647c:	fb03 0517 	mls	r5, r3, r7, r0
90016480:	4638      	mov	r0, r7
90016482:	b2ec      	uxtb	r4, r5
90016484:	2d09      	cmp	r5, #9
90016486:	bfd4      	ite	le
90016488:	3430      	addle	r4, #48	@ 0x30
9001648a:	3457      	addgt	r4, #87	@ 0x57
9001648c:	b2e4      	uxtb	r4, r4
9001648e:	558c      	strb	r4, [r1, r6]
90016490:	1e4c      	subs	r4, r1, #1
90016492:	b92f      	cbnz	r7, 900164a0 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x38>
90016494:	4431      	add	r1, r6
90016496:	4660      	mov	r0, ip
90016498:	f7ff ffd5 	bl	90016446 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
9001649c:	b00b      	add	sp, #44	@ 0x2c
9001649e:	bdf0      	pop	{r4, r5, r6, r7, pc}
900164a0:	4621      	mov	r1, r4
900164a2:	e7e9      	b.n	90016478 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x10>

900164a4 <_ZN8touchgfx7Unicode4itoaElPtti>:
900164a4:	b5f0      	push	{r4, r5, r6, r7, lr}
900164a6:	4607      	mov	r7, r0
900164a8:	b08b      	sub	sp, #44	@ 0x2c
900164aa:	4608      	mov	r0, r1
900164ac:	b341      	cbz	r1, 90016500 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
900164ae:	1e99      	subs	r1, r3, #2
900164b0:	2922      	cmp	r1, #34	@ 0x22
900164b2:	d825      	bhi.n	90016500 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
900164b4:	2100      	movs	r1, #0
900164b6:	463c      	mov	r4, r7
900164b8:	261f      	movs	r6, #31
900164ba:	f10d 0c04 	add.w	ip, sp, #4
900164be:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
900164c2:	1e71      	subs	r1, r6, #1
900164c4:	fb94 fef3 	sdiv	lr, r4, r3
900164c8:	fb03 441e 	mls	r4, r3, lr, r4
900164cc:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
900164d0:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
900164d4:	b2ec      	uxtb	r4, r5
900164d6:	2d09      	cmp	r5, #9
900164d8:	bfd4      	ite	le
900164da:	3430      	addle	r4, #48	@ 0x30
900164dc:	3457      	addgt	r4, #87	@ 0x57
900164de:	b2e4      	uxtb	r4, r4
900164e0:	f80c 4006 	strb.w	r4, [ip, r6]
900164e4:	4674      	mov	r4, lr
900164e6:	b96c      	cbnz	r4, 90016504 <_ZN8touchgfx7Unicode4itoaElPtti+0x60>
900164e8:	2f00      	cmp	r7, #0
900164ea:	da05      	bge.n	900164f8 <_ZN8touchgfx7Unicode4itoaElPtti+0x54>
900164ec:	ab0a      	add	r3, sp, #40	@ 0x28
900164ee:	4419      	add	r1, r3
900164f0:	232d      	movs	r3, #45	@ 0x2d
900164f2:	f801 3c24 	strb.w	r3, [r1, #-36]
900164f6:	1eb1      	subs	r1, r6, #2
900164f8:	3101      	adds	r1, #1
900164fa:	4461      	add	r1, ip
900164fc:	f7ff ffa3 	bl	90016446 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
90016500:	b00b      	add	sp, #44	@ 0x2c
90016502:	bdf0      	pop	{r4, r5, r6, r7, pc}
90016504:	460e      	mov	r6, r1
90016506:	e7dc      	b.n	900164c2 <_ZN8touchgfx7Unicode4itoaElPtti+0x1e>

90016508 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
90016508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001650c:	b085      	sub	sp, #20
9001650e:	4691      	mov	r9, r2
90016510:	6802      	ldr	r2, [r0, #0]
90016512:	4688      	mov	r8, r1
90016514:	461c      	mov	r4, r3
90016516:	f89d 1040 	ldrb.w	r1, [sp, #64]	@ 0x40
9001651a:	f89d 3048 	ldrb.w	r3, [sp, #72]	@ 0x48
9001651e:	4683      	mov	fp, r0
90016520:	4610      	mov	r0, r2
90016522:	9103      	str	r1, [sp, #12]
90016524:	9302      	str	r3, [sp, #8]
90016526:	9201      	str	r2, [sp, #4]
90016528:	f7ff ff80 	bl	9001642c <_ZN8touchgfx7Unicode6strlenEPKt>
9001652c:	f1b8 0f00 	cmp.w	r8, #0
90016530:	bf0c      	ite	eq
90016532:	4684      	moveq	ip, r0
90016534:	f100 0c01 	addne.w	ip, r0, #1
90016538:	f1b9 0f69 	cmp.w	r9, #105	@ 0x69
9001653c:	f89d 6038 	ldrb.w	r6, [sp, #56]	@ 0x38
90016540:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
90016542:	fa1f fc8c 	uxth.w	ip, ip
90016546:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
90016548:	f8dd a054 	ldr.w	sl, [sp, #84]	@ 0x54
9001654c:	9903      	ldr	r1, [sp, #12]
9001654e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
90016552:	d041      	beq.n	900165d8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
90016554:	d834      	bhi.n	900165c0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
90016556:	f1b9 0f63 	cmp.w	r9, #99	@ 0x63
9001655a:	d059      	beq.n	90016610 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
9001655c:	f1b9 0f64 	cmp.w	r9, #100	@ 0x64
90016560:	d03a      	beq.n	900165d8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
90016562:	f1b9 0f58 	cmp.w	r9, #88	@ 0x58
90016566:	d034      	beq.n	900165d2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
90016568:	2400      	movs	r4, #0
9001656a:	f8bd 2050 	ldrh.w	r2, [sp, #80]	@ 0x50
9001656e:	3a01      	subs	r2, #1
90016570:	b169      	cbz	r1, 9001658e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
90016572:	9911      	ldr	r1, [sp, #68]	@ 0x44
90016574:	458c      	cmp	ip, r1
90016576:	da09      	bge.n	9001658c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
90016578:	eba1 010c 	sub.w	r1, r1, ip
9001657c:	b289      	uxth	r1, r1
9001657e:	b933      	cbnz	r3, 9001658e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
90016580:	2e00      	cmp	r6, #0
90016582:	d051      	beq.n	90016628 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
90016584:	2800      	cmp	r0, #0
90016586:	d04f      	beq.n	90016628 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
90016588:	440c      	add	r4, r1
9001658a:	b2a4      	uxth	r4, r4
9001658c:	2100      	movs	r1, #0
9001658e:	682b      	ldr	r3, [r5, #0]
90016590:	4293      	cmp	r3, r2
90016592:	da07      	bge.n	900165a4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
90016594:	f1b8 0f00 	cmp.w	r8, #0
90016598:	d004      	beq.n	900165a4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
9001659a:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
9001659e:	682b      	ldr	r3, [r5, #0]
900165a0:	3301      	adds	r3, #1
900165a2:	602b      	str	r3, [r5, #0]
900165a4:	2730      	movs	r7, #48	@ 0x30
900165a6:	2c00      	cmp	r4, #0
900165a8:	d04e      	beq.n	90016648 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
900165aa:	682e      	ldr	r6, [r5, #0]
900165ac:	3c01      	subs	r4, #1
900165ae:	42b2      	cmp	r2, r6
900165b0:	b2a4      	uxth	r4, r4
900165b2:	dd49      	ble.n	90016648 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
900165b4:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
900165b8:	682b      	ldr	r3, [r5, #0]
900165ba:	3301      	adds	r3, #1
900165bc:	602b      	str	r3, [r5, #0]
900165be:	e7f2      	b.n	900165a6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
900165c0:	f1b9 0f73 	cmp.w	r9, #115	@ 0x73
900165c4:	d01d      	beq.n	90016602 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
900165c6:	f1b9 0f78 	cmp.w	r9, #120	@ 0x78
900165ca:	d002      	beq.n	900165d2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
900165cc:	f1b9 0f6f 	cmp.w	r9, #111	@ 0x6f
900165d0:	e7c9      	b.n	90016566 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
900165d2:	4684      	mov	ip, r0
900165d4:	f04f 0800 	mov.w	r8, #0
900165d8:	2c00      	cmp	r4, #0
900165da:	d0c6      	beq.n	9001656a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
900165dc:	b947      	cbnz	r7, 900165f0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
900165de:	2801      	cmp	r0, #1
900165e0:	d106      	bne.n	900165f0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
900165e2:	8814      	ldrh	r4, [r2, #0]
900165e4:	2c30      	cmp	r4, #48	@ 0x30
900165e6:	bf02      	ittt	eq
900165e8:	3202      	addeq	r2, #2
900165ea:	4638      	moveq	r0, r7
900165ec:	f8cb 2000 	streq.w	r2, [fp]
900165f0:	45bc      	cmp	ip, r7
900165f2:	da14      	bge.n	9001661e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
900165f4:	b2bf      	uxth	r7, r7
900165f6:	eba7 040c 	sub.w	r4, r7, ip
900165fa:	46bc      	mov	ip, r7
900165fc:	b2a4      	uxth	r4, r4
900165fe:	2600      	movs	r6, #0
90016600:	e7b3      	b.n	9001656a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
90016602:	4684      	mov	ip, r0
90016604:	b16c      	cbz	r4, 90016622 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
90016606:	42b8      	cmp	r0, r7
90016608:	dd00      	ble.n	9001660c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
9001660a:	b2b8      	uxth	r0, r7
9001660c:	2400      	movs	r4, #0
9001660e:	e003      	b.n	90016618 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
90016610:	f04f 0c01 	mov.w	ip, #1
90016614:	2400      	movs	r4, #0
90016616:	4660      	mov	r0, ip
90016618:	4626      	mov	r6, r4
9001661a:	46a0      	mov	r8, r4
9001661c:	e7a5      	b.n	9001656a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
9001661e:	2400      	movs	r4, #0
90016620:	e7ed      	b.n	900165fe <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
90016622:	4626      	mov	r6, r4
90016624:	46a0      	mov	r8, r4
90016626:	e7a0      	b.n	9001656a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
90016628:	2900      	cmp	r1, #0
9001662a:	d0b0      	beq.n	9001658e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
9001662c:	2720      	movs	r7, #32
9001662e:	682e      	ldr	r6, [r5, #0]
90016630:	2900      	cmp	r1, #0
90016632:	d0ac      	beq.n	9001658e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
90016634:	3901      	subs	r1, #1
90016636:	4296      	cmp	r6, r2
90016638:	b289      	uxth	r1, r1
9001663a:	daa7      	bge.n	9001658c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
9001663c:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
90016640:	682b      	ldr	r3, [r5, #0]
90016642:	3301      	adds	r3, #1
90016644:	602b      	str	r3, [r5, #0]
90016646:	e7f2      	b.n	9001662e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
90016648:	b188      	cbz	r0, 9001666e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
9001664a:	682b      	ldr	r3, [r5, #0]
9001664c:	3801      	subs	r0, #1
9001664e:	429a      	cmp	r2, r3
90016650:	b280      	uxth	r0, r0
90016652:	dd0c      	ble.n	9001666e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
90016654:	f8db 3000 	ldr.w	r3, [fp]
90016658:	1c9c      	adds	r4, r3, #2
9001665a:	f8cb 4000 	str.w	r4, [fp]
9001665e:	881c      	ldrh	r4, [r3, #0]
90016660:	682b      	ldr	r3, [r5, #0]
90016662:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
90016666:	682b      	ldr	r3, [r5, #0]
90016668:	3301      	adds	r3, #1
9001666a:	602b      	str	r3, [r5, #0]
9001666c:	e7ec      	b.n	90016648 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
9001666e:	2620      	movs	r6, #32
90016670:	b151      	cbz	r1, 90016688 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
90016672:	6828      	ldr	r0, [r5, #0]
90016674:	3901      	subs	r1, #1
90016676:	4282      	cmp	r2, r0
90016678:	b289      	uxth	r1, r1
9001667a:	dd05      	ble.n	90016688 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
9001667c:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
90016680:	682b      	ldr	r3, [r5, #0]
90016682:	3301      	adds	r3, #1
90016684:	602b      	str	r3, [r5, #0]
90016686:	e7f3      	b.n	90016670 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
90016688:	b005      	add	sp, #20
9001668a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

9001668e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
9001668e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
90016692:	2400      	movs	r4, #0
90016694:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
90016698:	e9dd e609 	ldrd	lr, r6, [sp, #36]	@ 0x24
9001669c:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	@ 0x2c
900166a0:	8014      	strh	r4, [r2, #0]
900166a2:	701c      	strb	r4, [r3, #0]
900166a4:	f888 4000 	strb.w	r4, [r8]
900166a8:	f88c 4000 	strb.w	r4, [ip]
900166ac:	f88e 4000 	strb.w	r4, [lr]
900166b0:	703c      	strb	r4, [r7, #0]
900166b2:	6804      	ldr	r4, [r0, #0]
900166b4:	b1a4      	cbz	r4, 900166e0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
900166b6:	8824      	ldrh	r4, [r4, #0]
900166b8:	f04f 0901 	mov.w	r9, #1
900166bc:	b314      	cbz	r4, 90016704 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
900166be:	2c2b      	cmp	r4, #43	@ 0x2b
900166c0:	d001      	beq.n	900166c6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
900166c2:	2c20      	cmp	r4, #32
900166c4:	d110      	bne.n	900166e8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
900166c6:	8014      	strh	r4, [r2, #0]
900166c8:	6804      	ldr	r4, [r0, #0]
900166ca:	b10c      	cbz	r4, 900166d0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
900166cc:	3402      	adds	r4, #2
900166ce:	6004      	str	r4, [r0, #0]
900166d0:	680c      	ldr	r4, [r1, #0]
900166d2:	b10c      	cbz	r4, 900166d8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
900166d4:	3401      	adds	r4, #1
900166d6:	600c      	str	r4, [r1, #0]
900166d8:	6804      	ldr	r4, [r0, #0]
900166da:	b17c      	cbz	r4, 900166fc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
900166dc:	8824      	ldrh	r4, [r4, #0]
900166de:	e7ed      	b.n	900166bc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
900166e0:	680c      	ldr	r4, [r1, #0]
900166e2:	b17c      	cbz	r4, 90016704 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
900166e4:	7824      	ldrb	r4, [r4, #0]
900166e6:	e7e7      	b.n	900166b8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
900166e8:	2c2d      	cmp	r4, #45	@ 0x2d
900166ea:	d102      	bne.n	900166f2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
900166ec:	f883 9000 	strb.w	r9, [r3]
900166f0:	e7ea      	b.n	900166c8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
900166f2:	2c23      	cmp	r4, #35	@ 0x23
900166f4:	d107      	bne.n	90016706 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
900166f6:	f888 9000 	strb.w	r9, [r8]
900166fa:	e7e5      	b.n	900166c8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
900166fc:	680c      	ldr	r4, [r1, #0]
900166fe:	b10c      	cbz	r4, 90016704 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
90016700:	7824      	ldrb	r4, [r4, #0]
90016702:	e7db      	b.n	900166bc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
90016704:	2400      	movs	r4, #0
90016706:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
9001670a:	2b09      	cmp	r3, #9
9001670c:	d901      	bls.n	90016712 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
9001670e:	2c2a      	cmp	r4, #42	@ 0x2a
90016710:	d122      	bne.n	90016758 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
90016712:	2301      	movs	r3, #1
90016714:	2c30      	cmp	r4, #48	@ 0x30
90016716:	f88e 3000 	strb.w	r3, [lr]
9001671a:	d10d      	bne.n	90016738 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
9001671c:	f88c 3000 	strb.w	r3, [ip]
90016720:	6803      	ldr	r3, [r0, #0]
90016722:	b10b      	cbz	r3, 90016728 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
90016724:	3302      	adds	r3, #2
90016726:	6003      	str	r3, [r0, #0]
90016728:	680b      	ldr	r3, [r1, #0]
9001672a:	b10b      	cbz	r3, 90016730 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
9001672c:	3301      	adds	r3, #1
9001672e:	600b      	str	r3, [r1, #0]
90016730:	6803      	ldr	r3, [r0, #0]
90016732:	2b00      	cmp	r3, #0
90016734:	d02f      	beq.n	90016796 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
90016736:	881c      	ldrh	r4, [r3, #0]
90016738:	2c2a      	cmp	r4, #42	@ 0x2a
9001673a:	d135      	bne.n	900167a8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
9001673c:	f04f 33ff 	mov.w	r3, #4294967295
90016740:	6033      	str	r3, [r6, #0]
90016742:	6803      	ldr	r3, [r0, #0]
90016744:	b10b      	cbz	r3, 9001674a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
90016746:	3302      	adds	r3, #2
90016748:	6003      	str	r3, [r0, #0]
9001674a:	680b      	ldr	r3, [r1, #0]
9001674c:	b10b      	cbz	r3, 90016752 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
9001674e:	3301      	adds	r3, #1
90016750:	600b      	str	r3, [r1, #0]
90016752:	6803      	ldr	r3, [r0, #0]
90016754:	b31b      	cbz	r3, 9001679e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
90016756:	881c      	ldrh	r4, [r3, #0]
90016758:	2c2e      	cmp	r4, #46	@ 0x2e
9001675a:	d11a      	bne.n	90016792 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
9001675c:	2301      	movs	r3, #1
9001675e:	703b      	strb	r3, [r7, #0]
90016760:	6803      	ldr	r3, [r0, #0]
90016762:	b10b      	cbz	r3, 90016768 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
90016764:	3302      	adds	r3, #2
90016766:	6003      	str	r3, [r0, #0]
90016768:	680b      	ldr	r3, [r1, #0]
9001676a:	b10b      	cbz	r3, 90016770 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
9001676c:	3301      	adds	r3, #1
9001676e:	600b      	str	r3, [r1, #0]
90016770:	6803      	ldr	r3, [r0, #0]
90016772:	2b00      	cmp	r3, #0
90016774:	d036      	beq.n	900167e4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
90016776:	881b      	ldrh	r3, [r3, #0]
90016778:	2b2a      	cmp	r3, #42	@ 0x2a
9001677a:	d137      	bne.n	900167ec <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
9001677c:	f04f 33ff 	mov.w	r3, #4294967295
90016780:	602b      	str	r3, [r5, #0]
90016782:	6803      	ldr	r3, [r0, #0]
90016784:	b10b      	cbz	r3, 9001678a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
90016786:	3302      	adds	r3, #2
90016788:	6003      	str	r3, [r0, #0]
9001678a:	680b      	ldr	r3, [r1, #0]
9001678c:	b10b      	cbz	r3, 90016792 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
9001678e:	3301      	adds	r3, #1
90016790:	600b      	str	r3, [r1, #0]
90016792:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
90016796:	680c      	ldr	r4, [r1, #0]
90016798:	b134      	cbz	r4, 900167a8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
9001679a:	7824      	ldrb	r4, [r4, #0]
9001679c:	e7cc      	b.n	90016738 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
9001679e:	680b      	ldr	r3, [r1, #0]
900167a0:	2b00      	cmp	r3, #0
900167a2:	d0f6      	beq.n	90016792 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
900167a4:	781c      	ldrb	r4, [r3, #0]
900167a6:	e7d7      	b.n	90016758 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
900167a8:	2300      	movs	r3, #0
900167aa:	220a      	movs	r2, #10
900167ac:	6033      	str	r3, [r6, #0]
900167ae:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
900167b2:	fa1f f38c 	uxth.w	r3, ip
900167b6:	2b09      	cmp	r3, #9
900167b8:	d8ce      	bhi.n	90016758 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
900167ba:	6833      	ldr	r3, [r6, #0]
900167bc:	fb02 c303 	mla	r3, r2, r3, ip
900167c0:	6033      	str	r3, [r6, #0]
900167c2:	6803      	ldr	r3, [r0, #0]
900167c4:	b10b      	cbz	r3, 900167ca <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
900167c6:	3302      	adds	r3, #2
900167c8:	6003      	str	r3, [r0, #0]
900167ca:	680b      	ldr	r3, [r1, #0]
900167cc:	b10b      	cbz	r3, 900167d2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
900167ce:	3301      	adds	r3, #1
900167d0:	600b      	str	r3, [r1, #0]
900167d2:	6803      	ldr	r3, [r0, #0]
900167d4:	b10b      	cbz	r3, 900167da <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
900167d6:	881c      	ldrh	r4, [r3, #0]
900167d8:	e7e9      	b.n	900167ae <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
900167da:	680c      	ldr	r4, [r1, #0]
900167dc:	2c00      	cmp	r4, #0
900167de:	d0e6      	beq.n	900167ae <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
900167e0:	7824      	ldrb	r4, [r4, #0]
900167e2:	e7e4      	b.n	900167ae <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
900167e4:	680b      	ldr	r3, [r1, #0]
900167e6:	b10b      	cbz	r3, 900167ec <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
900167e8:	781b      	ldrb	r3, [r3, #0]
900167ea:	e7c5      	b.n	90016778 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
900167ec:	2200      	movs	r2, #0
900167ee:	240a      	movs	r4, #10
900167f0:	602a      	str	r2, [r5, #0]
900167f2:	3b30      	subs	r3, #48	@ 0x30
900167f4:	682a      	ldr	r2, [r5, #0]
900167f6:	b29e      	uxth	r6, r3
900167f8:	2e09      	cmp	r6, #9
900167fa:	d813      	bhi.n	90016824 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
900167fc:	fb04 3302 	mla	r3, r4, r2, r3
90016800:	602b      	str	r3, [r5, #0]
90016802:	6803      	ldr	r3, [r0, #0]
90016804:	b10b      	cbz	r3, 9001680a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
90016806:	3302      	adds	r3, #2
90016808:	6003      	str	r3, [r0, #0]
9001680a:	680b      	ldr	r3, [r1, #0]
9001680c:	b10b      	cbz	r3, 90016812 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
9001680e:	3301      	adds	r3, #1
90016810:	600b      	str	r3, [r1, #0]
90016812:	6803      	ldr	r3, [r0, #0]
90016814:	b10b      	cbz	r3, 9001681a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
90016816:	881b      	ldrh	r3, [r3, #0]
90016818:	e7eb      	b.n	900167f2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
9001681a:	680b      	ldr	r3, [r1, #0]
9001681c:	2b00      	cmp	r3, #0
9001681e:	d0e8      	beq.n	900167f2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
90016820:	781b      	ldrb	r3, [r3, #0]
90016822:	e7e6      	b.n	900167f2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
90016824:	2a06      	cmp	r2, #6
90016826:	bfa8      	it	ge
90016828:	2206      	movge	r2, #6
9001682a:	602a      	str	r2, [r5, #0]
9001682c:	e7b1      	b.n	90016792 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

9001682e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
9001682e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90016832:	b0a3      	sub	sp, #140	@ 0x8c
90016834:	2600      	movs	r6, #0
90016836:	4607      	mov	r7, r0
90016838:	4688      	mov	r8, r1
9001683a:	f10d 0944 	add.w	r9, sp, #68	@ 0x44
9001683e:	4631      	mov	r1, r6
90016840:	9c2c      	ldr	r4, [sp, #176]	@ 0xb0
90016842:	4648      	mov	r0, r9
90016844:	960d      	str	r6, [sp, #52]	@ 0x34
90016846:	e9cd 3208 	strd	r3, r2, [sp, #32]
9001684a:	2242      	movs	r2, #66	@ 0x42
9001684c:	f00c fc7e 	bl	9002314c <memset>
90016850:	b15f      	cbz	r7, 9001686a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
90016852:	f108 3aff 	add.w	sl, r8, #4294967295
90016856:	9a09      	ldr	r2, [sp, #36]	@ 0x24
90016858:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
9001685a:	b152      	cbz	r2, 90016872 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
9001685c:	8812      	ldrh	r2, [r2, #0]
9001685e:	b10a      	cbz	r2, 90016864 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
90016860:	459a      	cmp	sl, r3
90016862:	dc2e      	bgt.n	900168c2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
90016864:	2200      	movs	r2, #0
90016866:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
9001686a:	4638      	mov	r0, r7
9001686c:	b023      	add	sp, #140	@ 0x8c
9001686e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90016872:	9a08      	ldr	r2, [sp, #32]
90016874:	2a00      	cmp	r2, #0
90016876:	d0f5      	beq.n	90016864 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
90016878:	7812      	ldrb	r2, [r2, #0]
9001687a:	e7f0      	b.n	9001685e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
9001687c:	2d00      	cmp	r5, #0
9001687e:	d0ea      	beq.n	90016856 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
90016880:	782a      	ldrb	r2, [r5, #0]
90016882:	b142      	cbz	r2, 90016896 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
90016884:	2a25      	cmp	r2, #37	@ 0x25
90016886:	d001      	beq.n	9001688c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
90016888:	459a      	cmp	sl, r3
9001688a:	dc08      	bgt.n	9001689e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
9001688c:	f1bb 0f00 	cmp.w	fp, #0
90016890:	d121      	bne.n	900168d6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
90016892:	2d00      	cmp	r5, #0
90016894:	d0df      	beq.n	90016856 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
90016896:	782a      	ldrb	r2, [r5, #0]
90016898:	f04f 0b00 	mov.w	fp, #0
9001689c:	e01d      	b.n	900168da <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
9001689e:	f1bb 0f00 	cmp.w	fp, #0
900168a2:	d077      	beq.n	90016994 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x166>
900168a4:	f8bb 2000 	ldrh.w	r2, [fp]
900168a8:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
900168ac:	f1bb 0f00 	cmp.w	fp, #0
900168b0:	d002      	beq.n	900168b8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
900168b2:	f10b 0202 	add.w	r2, fp, #2
900168b6:	9209      	str	r2, [sp, #36]	@ 0x24
900168b8:	b10d      	cbz	r5, 900168be <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
900168ba:	3501      	adds	r5, #1
900168bc:	9508      	str	r5, [sp, #32]
900168be:	3301      	adds	r3, #1
900168c0:	930d      	str	r3, [sp, #52]	@ 0x34
900168c2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
900168c4:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
900168c8:	f1bb 0f00 	cmp.w	fp, #0
900168cc:	d0d6      	beq.n	9001687c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
900168ce:	f8bb 2000 	ldrh.w	r2, [fp]
900168d2:	2a00      	cmp	r2, #0
900168d4:	d1d6      	bne.n	90016884 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
900168d6:	f8bb 2000 	ldrh.w	r2, [fp]
900168da:	2a00      	cmp	r2, #0
900168dc:	d0bb      	beq.n	90016856 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
900168de:	459a      	cmp	sl, r3
900168e0:	ddb9      	ble.n	90016856 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
900168e2:	f8ad 6032 	strh.w	r6, [sp, #50]	@ 0x32
900168e6:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
900168ea:	f88d 602e 	strb.w	r6, [sp, #46]	@ 0x2e
900168ee:	f88d 602f 	strb.w	r6, [sp, #47]	@ 0x2f
900168f2:	f88d 6030 	strb.w	r6, [sp, #48]	@ 0x30
900168f6:	960e      	str	r6, [sp, #56]	@ 0x38
900168f8:	f88d 6031 	strb.w	r6, [sp, #49]	@ 0x31
900168fc:	960f      	str	r6, [sp, #60]	@ 0x3c
900168fe:	f1bb 0f00 	cmp.w	fp, #0
90016902:	d002      	beq.n	9001690a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
90016904:	f10b 0302 	add.w	r3, fp, #2
90016908:	9309      	str	r3, [sp, #36]	@ 0x24
9001690a:	b10d      	cbz	r5, 90016910 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
9001690c:	1c6b      	adds	r3, r5, #1
9001690e:	9308      	str	r3, [sp, #32]
90016910:	ab0f      	add	r3, sp, #60	@ 0x3c
90016912:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
90016916:	a908      	add	r1, sp, #32
90016918:	a809      	add	r0, sp, #36	@ 0x24
9001691a:	9305      	str	r3, [sp, #20]
9001691c:	f10d 0331 	add.w	r3, sp, #49	@ 0x31
90016920:	9304      	str	r3, [sp, #16]
90016922:	ab0e      	add	r3, sp, #56	@ 0x38
90016924:	9303      	str	r3, [sp, #12]
90016926:	ab0c      	add	r3, sp, #48	@ 0x30
90016928:	9302      	str	r3, [sp, #8]
9001692a:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
9001692e:	9301      	str	r3, [sp, #4]
90016930:	f10d 032e 	add.w	r3, sp, #46	@ 0x2e
90016934:	9300      	str	r3, [sp, #0]
90016936:	f10d 032d 	add.w	r3, sp, #45	@ 0x2d
9001693a:	f7ff fea8 	bl	9001668e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
9001693e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
90016940:	2b00      	cmp	r3, #0
90016942:	bfbf      	itttt	lt
90016944:	6823      	ldrlt	r3, [r4, #0]
90016946:	3404      	addlt	r4, #4
90016948:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
9001694c:	930e      	strlt	r3, [sp, #56]	@ 0x38
9001694e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
90016950:	2b00      	cmp	r3, #0
90016952:	bfbe      	ittt	lt
90016954:	6823      	ldrlt	r3, [r4, #0]
90016956:	3404      	addlt	r4, #4
90016958:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
9001695c:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
90016960:	bfb8      	it	lt
90016962:	930f      	strlt	r3, [sp, #60]	@ 0x3c
90016964:	b1d9      	cbz	r1, 9001699e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x170>
90016966:	880b      	ldrh	r3, [r1, #0]
90016968:	2b69      	cmp	r3, #105	@ 0x69
9001696a:	d01f      	beq.n	900169ac <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
9001696c:	d82f      	bhi.n	900169ce <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a0>
9001696e:	2b58      	cmp	r3, #88	@ 0x58
90016970:	d01c      	beq.n	900169ac <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
90016972:	d818      	bhi.n	900169a6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x178>
90016974:	2b25      	cmp	r3, #37	@ 0x25
90016976:	d034      	beq.n	900169e2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b4>
90016978:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
9001697a:	e9cd 5b08 	strd	r5, fp, [sp, #32]
9001697e:	f1bb 0f00 	cmp.w	fp, #0
90016982:	f000 80b7 	beq.w	90016af4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c6>
90016986:	f8bb 5000 	ldrh.w	r5, [fp]
9001698a:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
9001698e:	3301      	adds	r3, #1
90016990:	930d      	str	r3, [sp, #52]	@ 0x34
90016992:	e029      	b.n	900169e8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
90016994:	b10d      	cbz	r5, 9001699a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16c>
90016996:	782a      	ldrb	r2, [r5, #0]
90016998:	e786      	b.n	900168a8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
9001699a:	462a      	mov	r2, r5
9001699c:	e784      	b.n	900168a8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
9001699e:	2a00      	cmp	r2, #0
900169a0:	d0ea      	beq.n	90016978 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
900169a2:	7813      	ldrb	r3, [r2, #0]
900169a4:	e7e0      	b.n	90016968 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x13a>
900169a6:	3b63      	subs	r3, #99	@ 0x63
900169a8:	2b01      	cmp	r3, #1
900169aa:	d8e5      	bhi.n	90016978 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
900169ac:	f8cd 9040 	str.w	r9, [sp, #64]	@ 0x40
900169b0:	b329      	cbz	r1, 900169fe <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d0>
900169b2:	880b      	ldrh	r3, [r1, #0]
900169b4:	2b69      	cmp	r3, #105	@ 0x69
900169b6:	d063      	beq.n	90016a80 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
900169b8:	d825      	bhi.n	90016a06 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d8>
900169ba:	2b63      	cmp	r3, #99	@ 0x63
900169bc:	d038      	beq.n	90016a30 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x202>
900169be:	2b64      	cmp	r3, #100	@ 0x64
900169c0:	d05e      	beq.n	90016a80 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
900169c2:	2b58      	cmp	r3, #88	@ 0x58
900169c4:	d07a      	beq.n	90016abc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28e>
900169c6:	f8ad 6044 	strh.w	r6, [sp, #68]	@ 0x44
900169ca:	4625      	mov	r5, r4
900169cc:	e036      	b.n	90016a3c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
900169ce:	2b73      	cmp	r3, #115	@ 0x73
900169d0:	d0ec      	beq.n	900169ac <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
900169d2:	d802      	bhi.n	900169da <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ac>
900169d4:	2b6f      	cmp	r3, #111	@ 0x6f
900169d6:	d1cf      	bne.n	90016978 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
900169d8:	e7e8      	b.n	900169ac <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
900169da:	2b75      	cmp	r3, #117	@ 0x75
900169dc:	d0e6      	beq.n	900169ac <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
900169de:	2b78      	cmp	r3, #120	@ 0x78
900169e0:	e7f9      	b.n	900169d6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a8>
900169e2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
900169e4:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
900169e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
900169ea:	b10b      	cbz	r3, 900169f0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c2>
900169ec:	3302      	adds	r3, #2
900169ee:	9309      	str	r3, [sp, #36]	@ 0x24
900169f0:	9b08      	ldr	r3, [sp, #32]
900169f2:	2b00      	cmp	r3, #0
900169f4:	f43f af2f 	beq.w	90016856 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
900169f8:	3301      	adds	r3, #1
900169fa:	9308      	str	r3, [sp, #32]
900169fc:	e72b      	b.n	90016856 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
900169fe:	2a00      	cmp	r2, #0
90016a00:	d0e1      	beq.n	900169c6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
90016a02:	7813      	ldrb	r3, [r2, #0]
90016a04:	e7d6      	b.n	900169b4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x186>
90016a06:	2b73      	cmp	r3, #115	@ 0x73
90016a08:	d036      	beq.n	90016a78 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24a>
90016a0a:	d807      	bhi.n	90016a1c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ee>
90016a0c:	2b6f      	cmp	r3, #111	@ 0x6f
90016a0e:	d1da      	bne.n	900169c6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
90016a10:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
90016a12:	1d25      	adds	r5, r4, #4
90016a14:	2308      	movs	r3, #8
90016a16:	eba8 0202 	sub.w	r2, r8, r2
90016a1a:	e049      	b.n	90016ab0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
90016a1c:	2b75      	cmp	r3, #117	@ 0x75
90016a1e:	d042      	beq.n	90016aa6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x278>
90016a20:	2b78      	cmp	r3, #120	@ 0x78
90016a22:	d1d0      	bne.n	900169c6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
90016a24:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
90016a26:	1d25      	adds	r5, r4, #4
90016a28:	2310      	movs	r3, #16
90016a2a:	eba8 0202 	sub.w	r2, r8, r2
90016a2e:	e03f      	b.n	90016ab0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
90016a30:	6823      	ldr	r3, [r4, #0]
90016a32:	1d25      	adds	r5, r4, #4
90016a34:	f8ad 6046 	strh.w	r6, [sp, #70]	@ 0x46
90016a38:	f8ad 3044 	strh.w	r3, [sp, #68]	@ 0x44
90016a3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
90016a3e:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
90016a42:	2b00      	cmp	r3, #0
90016a44:	d051      	beq.n	90016aea <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2bc>
90016a46:	881a      	ldrh	r2, [r3, #0]
90016a48:	a80d      	add	r0, sp, #52	@ 0x34
90016a4a:	f89d 3031 	ldrb.w	r3, [sp, #49]	@ 0x31
90016a4e:	462c      	mov	r4, r5
90016a50:	9005      	str	r0, [sp, #20]
90016a52:	f89d 002d 	ldrb.w	r0, [sp, #45]	@ 0x2d
90016a56:	9004      	str	r0, [sp, #16]
90016a58:	980e      	ldr	r0, [sp, #56]	@ 0x38
90016a5a:	9003      	str	r0, [sp, #12]
90016a5c:	f89d 0030 	ldrb.w	r0, [sp, #48]	@ 0x30
90016a60:	9002      	str	r0, [sp, #8]
90016a62:	980f      	ldr	r0, [sp, #60]	@ 0x3c
90016a64:	9001      	str	r0, [sp, #4]
90016a66:	f89d 002f 	ldrb.w	r0, [sp, #47]	@ 0x2f
90016a6a:	e9cd 8706 	strd	r8, r7, [sp, #24]
90016a6e:	9000      	str	r0, [sp, #0]
90016a70:	a810      	add	r0, sp, #64	@ 0x40
90016a72:	f7ff fd49 	bl	90016508 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
90016a76:	e7b7      	b.n	900169e8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
90016a78:	1d25      	adds	r5, r4, #4
90016a7a:	6823      	ldr	r3, [r4, #0]
90016a7c:	9310      	str	r3, [sp, #64]	@ 0x40
90016a7e:	e7dd      	b.n	90016a3c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
90016a80:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
90016a82:	230a      	movs	r3, #10
90016a84:	4649      	mov	r1, r9
90016a86:	6820      	ldr	r0, [r4, #0]
90016a88:	eba8 0202 	sub.w	r2, r8, r2
90016a8c:	1d25      	adds	r5, r4, #4
90016a8e:	b292      	uxth	r2, r2
90016a90:	f7ff fd08 	bl	900164a4 <_ZN8touchgfx7Unicode4itoaElPtti>
90016a94:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
90016a98:	2b2d      	cmp	r3, #45	@ 0x2d
90016a9a:	d1cf      	bne.n	90016a3c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
90016a9c:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
90016aa0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
90016aa2:	3302      	adds	r3, #2
90016aa4:	e7ea      	b.n	90016a7c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24e>
90016aa6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
90016aa8:	1d25      	adds	r5, r4, #4
90016aaa:	230a      	movs	r3, #10
90016aac:	eba8 0202 	sub.w	r2, r8, r2
90016ab0:	b292      	uxth	r2, r2
90016ab2:	4649      	mov	r1, r9
90016ab4:	6820      	ldr	r0, [r4, #0]
90016ab6:	f7ff fcd7 	bl	90016468 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
90016aba:	e7bf      	b.n	90016a3c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
90016abc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
90016abe:	2310      	movs	r3, #16
90016ac0:	4649      	mov	r1, r9
90016ac2:	6820      	ldr	r0, [r4, #0]
90016ac4:	eba8 0202 	sub.w	r2, r8, r2
90016ac8:	1d25      	adds	r5, r4, #4
90016aca:	b292      	uxth	r2, r2
90016acc:	f7ff fccc 	bl	90016468 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
90016ad0:	f10d 0242 	add.w	r2, sp, #66	@ 0x42
90016ad4:	f832 3f02 	ldrh.w	r3, [r2, #2]!
90016ad8:	2b00      	cmp	r3, #0
90016ada:	d0af      	beq.n	90016a3c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
90016adc:	f1a3 0161 	sub.w	r1, r3, #97	@ 0x61
90016ae0:	2919      	cmp	r1, #25
90016ae2:	d8f7      	bhi.n	90016ad4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
90016ae4:	3b20      	subs	r3, #32
90016ae6:	8013      	strh	r3, [r2, #0]
90016ae8:	e7f4      	b.n	90016ad4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
90016aea:	9a08      	ldr	r2, [sp, #32]
90016aec:	2a00      	cmp	r2, #0
90016aee:	d0ab      	beq.n	90016a48 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
90016af0:	7812      	ldrb	r2, [r2, #0]
90016af2:	e7a9      	b.n	90016a48 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
90016af4:	2d00      	cmp	r5, #0
90016af6:	f43f af48 	beq.w	9001698a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>
90016afa:	782d      	ldrb	r5, [r5, #0]
90016afc:	e745      	b.n	9001698a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>

90016afe <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
90016afe:	b507      	push	{r0, r1, r2, lr}
90016b00:	9300      	str	r3, [sp, #0]
90016b02:	4613      	mov	r3, r2
90016b04:	2200      	movs	r2, #0
90016b06:	f7ff fe92 	bl	9001682e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
90016b0a:	b003      	add	sp, #12
90016b0c:	f85d fb04 	ldr.w	pc, [sp], #4

90016b10 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
90016b10:	b40c      	push	{r2, r3}
90016b12:	b507      	push	{r0, r1, r2, lr}
90016b14:	ab04      	add	r3, sp, #16
90016b16:	f853 2b04 	ldr.w	r2, [r3], #4
90016b1a:	9301      	str	r3, [sp, #4]
90016b1c:	f7ff ffef 	bl	90016afe <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
90016b20:	b003      	add	sp, #12
90016b22:	f85d eb04 	ldr.w	lr, [sp], #4
90016b26:	b002      	add	sp, #8
90016b28:	4770      	bx	lr
	...

90016b2c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf>:
90016b2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90016b30:	b0c3      	sub	sp, #268	@ 0x10c
90016b32:	2600      	movs	r6, #0
90016b34:	4607      	mov	r7, r0
90016b36:	4689      	mov	r9, r1
90016b38:	f10d 0840 	add.w	r8, sp, #64	@ 0x40
90016b3c:	4631      	mov	r1, r6
90016b3e:	f8dd a130 	ldr.w	sl, [sp, #304]	@ 0x130
90016b42:	4640      	mov	r0, r8
90016b44:	960c      	str	r6, [sp, #48]	@ 0x30
90016b46:	e9cd 3208 	strd	r3, r2, [sp, #32]
90016b4a:	22c8      	movs	r2, #200	@ 0xc8
90016b4c:	f00c fafe 	bl	9002314c <memset>
90016b50:	b17f      	cbz	r7, 90016b72 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x46>
90016b52:	eddf 5aa3 	vldr	s11, [pc, #652]	@ 90016de0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2b4>
90016b56:	f8df b294 	ldr.w	fp, [pc, #660]	@ 90016dec <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2c0>
90016b5a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
90016b5c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
90016b5e:	b162      	cbz	r2, 90016b7a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x4e>
90016b60:	8812      	ldrh	r2, [r2, #0]
90016b62:	b11a      	cbz	r2, 90016b6c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x40>
90016b64:	f109 31ff 	add.w	r1, r9, #4294967295
90016b68:	4299      	cmp	r1, r3
90016b6a:	dc26      	bgt.n	90016bba <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x8e>
90016b6c:	2200      	movs	r2, #0
90016b6e:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
90016b72:	4638      	mov	r0, r7
90016b74:	b043      	add	sp, #268	@ 0x10c
90016b76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90016b7a:	9a08      	ldr	r2, [sp, #32]
90016b7c:	2a00      	cmp	r2, #0
90016b7e:	d0f5      	beq.n	90016b6c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x40>
90016b80:	7812      	ldrb	r2, [r2, #0]
90016b82:	e7ee      	b.n	90016b62 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x36>
90016b84:	2c00      	cmp	r4, #0
90016b86:	d0e8      	beq.n	90016b5a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2e>
90016b88:	7822      	ldrb	r2, [r4, #0]
90016b8a:	b132      	cbz	r2, 90016b9a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x6e>
90016b8c:	2a25      	cmp	r2, #37	@ 0x25
90016b8e:	d001      	beq.n	90016b94 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x68>
90016b90:	4299      	cmp	r1, r3
90016b92:	dc05      	bgt.n	90016ba0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x74>
90016b94:	b9cd      	cbnz	r5, 90016bca <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x9e>
90016b96:	2c00      	cmp	r4, #0
90016b98:	d0df      	beq.n	90016b5a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2e>
90016b9a:	7822      	ldrb	r2, [r4, #0]
90016b9c:	2500      	movs	r5, #0
90016b9e:	e015      	b.n	90016bcc <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0xa0>
90016ba0:	2d00      	cmp	r5, #0
90016ba2:	d073      	beq.n	90016c8c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x160>
90016ba4:	882a      	ldrh	r2, [r5, #0]
90016ba6:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
90016baa:	b10d      	cbz	r5, 90016bb0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x84>
90016bac:	3502      	adds	r5, #2
90016bae:	9509      	str	r5, [sp, #36]	@ 0x24
90016bb0:	b10c      	cbz	r4, 90016bb6 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x8a>
90016bb2:	3401      	adds	r4, #1
90016bb4:	9408      	str	r4, [sp, #32]
90016bb6:	3301      	adds	r3, #1
90016bb8:	930c      	str	r3, [sp, #48]	@ 0x30
90016bba:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
90016bbc:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
90016bc0:	2d00      	cmp	r5, #0
90016bc2:	d0df      	beq.n	90016b84 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x58>
90016bc4:	882a      	ldrh	r2, [r5, #0]
90016bc6:	2a00      	cmp	r2, #0
90016bc8:	d1e0      	bne.n	90016b8c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x60>
90016bca:	882a      	ldrh	r2, [r5, #0]
90016bcc:	2a00      	cmp	r2, #0
90016bce:	d0c4      	beq.n	90016b5a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2e>
90016bd0:	4299      	cmp	r1, r3
90016bd2:	ddc2      	ble.n	90016b5a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2e>
90016bd4:	2300      	movs	r3, #0
90016bd6:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
90016bda:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
90016bde:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
90016be2:	f88d 302b 	strb.w	r3, [sp, #43]	@ 0x2b
90016be6:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
90016bea:	930d      	str	r3, [sp, #52]	@ 0x34
90016bec:	f88d 302d 	strb.w	r3, [sp, #45]	@ 0x2d
90016bf0:	930e      	str	r3, [sp, #56]	@ 0x38
90016bf2:	b10d      	cbz	r5, 90016bf8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0xcc>
90016bf4:	1cab      	adds	r3, r5, #2
90016bf6:	9309      	str	r3, [sp, #36]	@ 0x24
90016bf8:	b10c      	cbz	r4, 90016bfe <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0xd2>
90016bfa:	1c63      	adds	r3, r4, #1
90016bfc:	9308      	str	r3, [sp, #32]
90016bfe:	ab0e      	add	r3, sp, #56	@ 0x38
90016c00:	f10d 022e 	add.w	r2, sp, #46	@ 0x2e
90016c04:	a908      	add	r1, sp, #32
90016c06:	a809      	add	r0, sp, #36	@ 0x24
90016c08:	9305      	str	r3, [sp, #20]
90016c0a:	f10d 032d 	add.w	r3, sp, #45	@ 0x2d
90016c0e:	9304      	str	r3, [sp, #16]
90016c10:	ab0d      	add	r3, sp, #52	@ 0x34
90016c12:	9303      	str	r3, [sp, #12]
90016c14:	ab0b      	add	r3, sp, #44	@ 0x2c
90016c16:	9302      	str	r3, [sp, #8]
90016c18:	f10d 032b 	add.w	r3, sp, #43	@ 0x2b
90016c1c:	9301      	str	r3, [sp, #4]
90016c1e:	f10d 032a 	add.w	r3, sp, #42	@ 0x2a
90016c22:	9300      	str	r3, [sp, #0]
90016c24:	f10d 0329 	add.w	r3, sp, #41	@ 0x29
90016c28:	f7ff fd31 	bl	9001668e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
90016c2c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
90016c2e:	2b00      	cmp	r3, #0
90016c30:	da0b      	bge.n	90016c4a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x11e>
90016c32:	eb0a 0386 	add.w	r3, sl, r6, lsl #2
90016c36:	3601      	adds	r6, #1
90016c38:	edd3 7a00 	vldr	s15, [r3]
90016c3c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
90016c40:	ee17 3a90 	vmov	r3, s15
90016c44:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
90016c48:	930d      	str	r3, [sp, #52]	@ 0x34
90016c4a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
90016c4c:	2b00      	cmp	r3, #0
90016c4e:	da0b      	bge.n	90016c68 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x13c>
90016c50:	eb0a 0386 	add.w	r3, sl, r6, lsl #2
90016c54:	3601      	adds	r6, #1
90016c56:	edd3 7a00 	vldr	s15, [r3]
90016c5a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
90016c5e:	ee17 3a90 	vmov	r3, s15
90016c62:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
90016c66:	930e      	str	r3, [sp, #56]	@ 0x38
90016c68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
90016c6a:	b1a3      	cbz	r3, 90016c96 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x16a>
90016c6c:	881a      	ldrh	r2, [r3, #0]
90016c6e:	2a25      	cmp	r2, #37	@ 0x25
90016c70:	d016      	beq.n	90016ca0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x174>
90016c72:	2a66      	cmp	r2, #102	@ 0x66
90016c74:	d01a      	beq.n	90016cac <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x180>
90016c76:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
90016c78:	e9cd 4508 	strd	r4, r5, [sp, #32]
90016c7c:	2d00      	cmp	r5, #0
90016c7e:	f000 80fd 	beq.w	90016e7c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x350>
90016c82:	882c      	ldrh	r4, [r5, #0]
90016c84:	f827 4013 	strh.w	r4, [r7, r3, lsl #1]
90016c88:	3301      	adds	r3, #1
90016c8a:	e00d      	b.n	90016ca8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x17c>
90016c8c:	b10c      	cbz	r4, 90016c92 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x166>
90016c8e:	7822      	ldrb	r2, [r4, #0]
90016c90:	e789      	b.n	90016ba6 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x7a>
90016c92:	4622      	mov	r2, r4
90016c94:	e787      	b.n	90016ba6 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x7a>
90016c96:	9b08      	ldr	r3, [sp, #32]
90016c98:	2b00      	cmp	r3, #0
90016c9a:	d0ec      	beq.n	90016c76 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x14a>
90016c9c:	781a      	ldrb	r2, [r3, #0]
90016c9e:	e7e6      	b.n	90016c6e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x142>
90016ca0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
90016ca2:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
90016ca6:	3302      	adds	r3, #2
90016ca8:	930c      	str	r3, [sp, #48]	@ 0x30
90016caa:	e040      	b.n	90016d2e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x202>
90016cac:	eb0a 0386 	add.w	r3, sl, r6, lsl #2
90016cb0:	f8cd 803c 	str.w	r8, [sp, #60]	@ 0x3c
90016cb4:	3601      	adds	r6, #1
90016cb6:	edd3 7a00 	vldr	s15, [r3]
90016cba:	f89d 302d 	ldrb.w	r3, [sp, #45]	@ 0x2d
90016cbe:	b923      	cbnz	r3, 90016cca <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x19e>
90016cc0:	2301      	movs	r3, #1
90016cc2:	f88d 302d 	strb.w	r3, [sp, #45]	@ 0x2d
90016cc6:	2306      	movs	r3, #6
90016cc8:	930e      	str	r3, [sp, #56]	@ 0x38
90016cca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
90016cce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90016cd2:	bf42      	ittt	mi
90016cd4:	eef1 7a67 	vnegmi.f32	s15, s15
90016cd8:	232d      	movmi	r3, #45	@ 0x2d
90016cda:	f8ad 302e 	strhmi.w	r3, [sp, #46]	@ 0x2e
90016cde:	eeb0 7ae7 	vabs.f32	s14, s15
90016ce2:	eeb4 7a65 	vcmp.f32	s14, s11
90016ce6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90016cea:	dd2b      	ble.n	90016d44 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x218>
90016cec:	2366      	movs	r3, #102	@ 0x66
90016cee:	f8cd b040 	str.w	fp, [sp, #64]	@ 0x40
90016cf2:	9311      	str	r3, [sp, #68]	@ 0x44
90016cf4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
90016cf6:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
90016cfa:	2b00      	cmp	r3, #0
90016cfc:	f000 80b8 	beq.w	90016e70 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x344>
90016d00:	881a      	ldrh	r2, [r3, #0]
90016d02:	a80c      	add	r0, sp, #48	@ 0x30
90016d04:	f89d 302d 	ldrb.w	r3, [sp, #45]	@ 0x2d
90016d08:	9005      	str	r0, [sp, #20]
90016d0a:	f89d 0029 	ldrb.w	r0, [sp, #41]	@ 0x29
90016d0e:	9004      	str	r0, [sp, #16]
90016d10:	980d      	ldr	r0, [sp, #52]	@ 0x34
90016d12:	9003      	str	r0, [sp, #12]
90016d14:	f89d 002c 	ldrb.w	r0, [sp, #44]	@ 0x2c
90016d18:	9002      	str	r0, [sp, #8]
90016d1a:	980e      	ldr	r0, [sp, #56]	@ 0x38
90016d1c:	9001      	str	r0, [sp, #4]
90016d1e:	f89d 002b 	ldrb.w	r0, [sp, #43]	@ 0x2b
90016d22:	e9cd 9706 	strd	r9, r7, [sp, #24]
90016d26:	9000      	str	r0, [sp, #0]
90016d28:	a80f      	add	r0, sp, #60	@ 0x3c
90016d2a:	f7ff fbed 	bl	90016508 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
90016d2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
90016d30:	b10b      	cbz	r3, 90016d36 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x20a>
90016d32:	3302      	adds	r3, #2
90016d34:	9309      	str	r3, [sp, #36]	@ 0x24
90016d36:	9b08      	ldr	r3, [sp, #32]
90016d38:	2b00      	cmp	r3, #0
90016d3a:	f43f af0e 	beq.w	90016b5a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2e>
90016d3e:	3301      	adds	r3, #1
90016d40:	9308      	str	r3, [sp, #32]
90016d42:	e70a      	b.n	90016b5a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2e>
90016d44:	eef4 7a67 	vcmp.f32	s15, s15
90016d48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90016d4c:	d60b      	bvs.n	90016d66 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x23a>
90016d4e:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
90016d52:	980e      	ldr	r0, [sp, #56]	@ 0x38
90016d54:	2300      	movs	r3, #0
90016d56:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 90016de4 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2b8>
90016d5a:	4283      	cmp	r3, r0
90016d5c:	da07      	bge.n	90016d6e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x242>
90016d5e:	ee87 7a06 	vdiv.f32	s14, s14, s12
90016d62:	3301      	adds	r3, #1
90016d64:	e7f9      	b.n	90016d5a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x22e>
90016d66:	4b20      	ldr	r3, [pc, #128]	@ (90016de8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2bc>)
90016d68:	9310      	str	r3, [sp, #64]	@ 0x40
90016d6a:	236e      	movs	r3, #110	@ 0x6e
90016d6c:	e7c1      	b.n	90016cf2 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x1c6>
90016d6e:	ee77 7a87 	vadd.f32	s15, s15, s14
90016d72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
90016d76:	eeb0 7a67 	vmov.f32	s14, s15
90016d7a:	eeb4 7ac6 	vcmpe.f32	s14, s12
90016d7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90016d82:	da27      	bge.n	90016dd4 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2a8>
90016d84:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
90016d86:	eeb6 5a00 	vmov.f32	s10, #96	@ 0x3f000000  0.5
90016d8a:	2100      	movs	r1, #0
90016d8c:	eba9 0202 	sub.w	r2, r9, r2
90016d90:	eef4 6ac5 	vcmpe.f32	s13, s10
90016d94:	b28c      	uxth	r4, r1
90016d96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90016d9a:	db2a      	blt.n	90016df2 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2c6>
90016d9c:	1a53      	subs	r3, r2, r1
90016d9e:	2b00      	cmp	r3, #0
90016da0:	dd27      	ble.n	90016df2 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2c6>
90016da2:	2963      	cmp	r1, #99	@ 0x63
90016da4:	d024      	beq.n	90016df0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2c4>
90016da6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
90016daa:	eebd 7ac7 	vcvt.s32.f32	s14, s14
90016dae:	ee17 3a10 	vmov	r3, s14
90016db2:	2b09      	cmp	r3, #9
90016db4:	bfa8      	it	ge
90016db6:	2309      	movge	r3, #9
90016db8:	ee07 3a10 	vmov	s14, r3
90016dbc:	f103 0430 	add.w	r4, r3, #48	@ 0x30
90016dc0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
90016dc4:	f828 4011 	strh.w	r4, [r8, r1, lsl #1]
90016dc8:	3101      	adds	r1, #1
90016dca:	eee7 7a66 	vfms.f32	s15, s14, s13
90016dce:	eec6 6a86 	vdiv.f32	s13, s13, s12
90016dd2:	e7dd      	b.n	90016d90 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x264>
90016dd4:	ee66 6a86 	vmul.f32	s13, s13, s12
90016dd8:	ee87 7a06 	vdiv.f32	s14, s14, s12
90016ddc:	e7cd      	b.n	90016d7a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x24e>
90016dde:	bf00      	nop
90016de0:	7f7fffff 	.word	0x7f7fffff
90016de4:	3f000002 	.word	0x3f000002
90016de8:	0061006e 	.word	0x0061006e
90016dec:	006e0069 	.word	0x006e0069
90016df0:	460c      	mov	r4, r1
90016df2:	2a63      	cmp	r2, #99	@ 0x63
90016df4:	bfd4      	ite	le
90016df6:	ebc4 0202 	rsble	r2, r4, r2
90016dfa:	f1c4 0263 	rsbgt	r2, r4, #99	@ 0x63
90016dfe:	2a00      	cmp	r2, #0
90016e00:	dd31      	ble.n	90016e66 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x33a>
90016e02:	4603      	mov	r3, r0
90016e04:	2501      	movs	r5, #1
90016e06:	210a      	movs	r1, #10
90016e08:	2b00      	cmp	r3, #0
90016e0a:	dd0d      	ble.n	90016e28 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2fc>
90016e0c:	ee67 7a86 	vmul.f32	s15, s15, s12
90016e10:	3b01      	subs	r3, #1
90016e12:	eebd 7ae7 	vcvt.s32.f32	s14, s15
90016e16:	ee17 ca10 	vmov	ip, s14
90016e1a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
90016e1e:	fb01 c505 	mla	r5, r1, r5, ip
90016e22:	ee77 7ac7 	vsub.f32	s15, s15, s14
90016e26:	e7ef      	b.n	90016e08 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2dc>
90016e28:	2800      	cmp	r0, #0
90016e2a:	f100 33ff 	add.w	r3, r0, #4294967295
90016e2e:	ea4f 0444 	mov.w	r4, r4, lsl #1
90016e32:	bfac      	ite	ge
90016e34:	1a18      	subge	r0, r3, r0
90016e36:	4618      	movlt	r0, r3
90016e38:	b292      	uxth	r2, r2
90016e3a:	230a      	movs	r3, #10
90016e3c:	900e      	str	r0, [sp, #56]	@ 0x38
90016e3e:	eb08 0104 	add.w	r1, r8, r4
90016e42:	4628      	mov	r0, r5
90016e44:	f7ff fb2e 	bl	900164a4 <_ZN8touchgfx7Unicode4itoaElPtti>
90016e48:	2d01      	cmp	r5, #1
90016e4a:	dc0a      	bgt.n	90016e62 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x336>
90016e4c:	f89d 302a 	ldrb.w	r3, [sp, #42]	@ 0x2a
90016e50:	2b00      	cmp	r3, #0
90016e52:	bf0c      	ite	eq
90016e54:	2300      	moveq	r3, #0
90016e56:	232e      	movne	r3, #46	@ 0x2e
90016e58:	aa42      	add	r2, sp, #264	@ 0x108
90016e5a:	4414      	add	r4, r2
90016e5c:	f824 3cc8 	strh.w	r3, [r4, #-200]
90016e60:	e748      	b.n	90016cf4 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x1c8>
90016e62:	232e      	movs	r3, #46	@ 0x2e
90016e64:	e7f8      	b.n	90016e58 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x32c>
90016e66:	ab42      	add	r3, sp, #264	@ 0x108
90016e68:	eb03 0444 	add.w	r4, r3, r4, lsl #1
90016e6c:	2300      	movs	r3, #0
90016e6e:	e7f5      	b.n	90016e5c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x330>
90016e70:	9a08      	ldr	r2, [sp, #32]
90016e72:	2a00      	cmp	r2, #0
90016e74:	f43f af45 	beq.w	90016d02 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x1d6>
90016e78:	7812      	ldrb	r2, [r2, #0]
90016e7a:	e742      	b.n	90016d02 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x1d6>
90016e7c:	2c00      	cmp	r4, #0
90016e7e:	f43f af01 	beq.w	90016c84 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x158>
90016e82:	7824      	ldrb	r4, [r4, #0]
90016e84:	e6fe      	b.n	90016c84 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x158>
90016e86:	bf00      	nop

90016e88 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf>:
90016e88:	b507      	push	{r0, r1, r2, lr}
90016e8a:	9300      	str	r3, [sp, #0]
90016e8c:	4613      	mov	r3, r2
90016e8e:	2200      	movs	r2, #0
90016e90:	f7ff fe4c 	bl	90016b2c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf>
90016e94:	b003      	add	sp, #12
90016e96:	f85d fb04 	ldr.w	pc, [sp], #4
	...

90016e9c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
90016e9c:	4b01      	ldr	r3, [pc, #4]	@ (90016ea4 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
90016e9e:	6018      	str	r0, [r3, #0]
90016ea0:	4770      	bx	lr
90016ea2:	bf00      	nop
90016ea4:	2402636c 	.word	0x2402636c

90016ea8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
90016ea8:	4b06      	ldr	r3, [pc, #24]	@ (90016ec4 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
90016eaa:	881a      	ldrh	r2, [r3, #0]
90016eac:	4282      	cmp	r2, r0
90016eae:	d807      	bhi.n	90016ec0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
90016eb0:	4b05      	ldr	r3, [pc, #20]	@ (90016ec8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
90016eb2:	881b      	ldrh	r3, [r3, #0]
90016eb4:	4413      	add	r3, r2
90016eb6:	4298      	cmp	r0, r3
90016eb8:	bfac      	ite	ge
90016eba:	2000      	movge	r0, #0
90016ebc:	2001      	movlt	r0, #1
90016ebe:	4770      	bx	lr
90016ec0:	2000      	movs	r0, #0
90016ec2:	4770      	bx	lr
90016ec4:	2402638c 	.word	0x2402638c
90016ec8:	24026390 	.word	0x24026390

90016ecc <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
90016ecc:	b508      	push	{r3, lr}
90016ece:	4601      	mov	r1, r0
90016ed0:	f7ff ffea 	bl	90016ea8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
90016ed4:	b118      	cbz	r0, 90016ede <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
90016ed6:	4b02      	ldr	r3, [pc, #8]	@ (90016ee0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
90016ed8:	681b      	ldr	r3, [r3, #0]
90016eda:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
90016ede:	bd08      	pop	{r3, pc}
90016ee0:	24026370 	.word	0x24026370

90016ee4 <_ZN8touchgfx6Bitmap10clearCacheEv>:
90016ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
90016ee6:	4c24      	ldr	r4, [pc, #144]	@ (90016f78 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
90016ee8:	6823      	ldr	r3, [r4, #0]
90016eea:	2b00      	cmp	r3, #0
90016eec:	d042      	beq.n	90016f74 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
90016eee:	4a23      	ldr	r2, [pc, #140]	@ (90016f7c <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
90016ef0:	4d23      	ldr	r5, [pc, #140]	@ (90016f80 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
90016ef2:	8811      	ldrh	r1, [r2, #0]
90016ef4:	f8b5 c000 	ldrh.w	ip, [r5]
90016ef8:	4822      	ldr	r0, [pc, #136]	@ (90016f84 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
90016efa:	4461      	add	r1, ip
90016efc:	1c4a      	adds	r2, r1, #1
90016efe:	008f      	lsls	r7, r1, #2
90016f00:	f022 0201 	bic.w	r2, r2, #1
90016f04:	19de      	adds	r6, r3, r7
90016f06:	0412      	lsls	r2, r2, #16
90016f08:	6006      	str	r6, [r0, #0]
90016f0a:	4e1f      	ldr	r6, [pc, #124]	@ (90016f88 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
90016f0c:	0c12      	lsrs	r2, r2, #16
90016f0e:	eb07 0742 	add.w	r7, r7, r2, lsl #1
90016f12:	19da      	adds	r2, r3, r7
90016f14:	6032      	str	r2, [r6, #0]
90016f16:	220e      	movs	r2, #14
90016f18:	fb02 f20c 	mul.w	r2, r2, ip
90016f1c:	3203      	adds	r2, #3
90016f1e:	f022 0203 	bic.w	r2, r2, #3
90016f22:	443a      	add	r2, r7
90016f24:	4f19      	ldr	r7, [pc, #100]	@ (90016f8c <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
90016f26:	4413      	add	r3, r2
90016f28:	603b      	str	r3, [r7, #0]
90016f2a:	2300      	movs	r3, #0
90016f2c:	4f18      	ldr	r7, [pc, #96]	@ (90016f90 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
90016f2e:	469c      	mov	ip, r3
90016f30:	803b      	strh	r3, [r7, #0]
90016f32:	4f18      	ldr	r7, [pc, #96]	@ (90016f94 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
90016f34:	683f      	ldr	r7, [r7, #0]
90016f36:	1aba      	subs	r2, r7, r2
90016f38:	4f17      	ldr	r7, [pc, #92]	@ (90016f98 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
90016f3a:	603a      	str	r2, [r7, #0]
90016f3c:	f64f 77ff 	movw	r7, #65535	@ 0xffff
90016f40:	4a16      	ldr	r2, [pc, #88]	@ (90016f9c <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
90016f42:	8013      	strh	r3, [r2, #0]
90016f44:	428b      	cmp	r3, r1
90016f46:	d10d      	bne.n	90016f64 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
90016f48:	882d      	ldrh	r5, [r5, #0]
90016f4a:	2300      	movs	r3, #0
90016f4c:	6830      	ldr	r0, [r6, #0]
90016f4e:	240e      	movs	r4, #14
90016f50:	429d      	cmp	r5, r3
90016f52:	d90f      	bls.n	90016f74 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
90016f54:	fb04 0203 	mla	r2, r4, r3, r0
90016f58:	3301      	adds	r3, #1
90016f5a:	7b11      	ldrb	r1, [r2, #12]
90016f5c:	f36f 1145 	bfc	r1, #5, #1
90016f60:	7311      	strb	r1, [r2, #12]
90016f62:	e7f5      	b.n	90016f50 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
90016f64:	6822      	ldr	r2, [r4, #0]
90016f66:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
90016f6a:	6802      	ldr	r2, [r0, #0]
90016f6c:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
90016f70:	3301      	adds	r3, #1
90016f72:	e7e7      	b.n	90016f44 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
90016f74:	bdf0      	pop	{r4, r5, r6, r7, pc}
90016f76:	bf00      	nop
90016f78:	24026370 	.word	0x24026370
90016f7c:	2402638c 	.word	0x2402638c
90016f80:	24026390 	.word	0x24026390
90016f84:	24026384 	.word	0x24026384
90016f88:	24026374 	.word	0x24026374
90016f8c:	2402637c 	.word	0x2402637c
90016f90:	2402638e 	.word	0x2402638e
90016f94:	24026378 	.word	0x24026378
90016f98:	24026388 	.word	0x24026388
90016f9c:	24026380 	.word	0x24026380

90016fa0 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
90016fa0:	4b06      	ldr	r3, [pc, #24]	@ (90016fbc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
90016fa2:	681b      	ldr	r3, [r3, #0]
90016fa4:	b943      	cbnz	r3, 90016fb8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
90016fa6:	b139      	cbz	r1, 90016fb8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
90016fa8:	4b05      	ldr	r3, [pc, #20]	@ (90016fc0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
90016faa:	801a      	strh	r2, [r3, #0]
90016fac:	4b05      	ldr	r3, [pc, #20]	@ (90016fc4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
90016fae:	6019      	str	r1, [r3, #0]
90016fb0:	4b05      	ldr	r3, [pc, #20]	@ (90016fc8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
90016fb2:	6018      	str	r0, [r3, #0]
90016fb4:	f7ff bf96 	b.w	90016ee4 <_ZN8touchgfx6Bitmap10clearCacheEv>
90016fb8:	4770      	bx	lr
90016fba:	bf00      	nop
90016fbc:	2402637c 	.word	0x2402637c
90016fc0:	24026390 	.word	0x24026390
90016fc4:	24026378 	.word	0x24026378
90016fc8:	24026370 	.word	0x24026370

90016fcc <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
90016fcc:	b470      	push	{r4, r5, r6}
90016fce:	4c07      	ldr	r4, [pc, #28]	@ (90016fec <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
90016fd0:	4605      	mov	r5, r0
90016fd2:	4610      	mov	r0, r2
90016fd4:	9a03      	ldr	r2, [sp, #12]
90016fd6:	6826      	ldr	r6, [r4, #0]
90016fd8:	b936      	cbnz	r6, 90016fe8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
90016fda:	6025      	str	r5, [r4, #0]
90016fdc:	4c04      	ldr	r4, [pc, #16]	@ (90016ff0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
90016fde:	8021      	strh	r1, [r4, #0]
90016fe0:	4619      	mov	r1, r3
90016fe2:	bc70      	pop	{r4, r5, r6}
90016fe4:	f7ff bfdc 	b.w	90016fa0 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
90016fe8:	bc70      	pop	{r4, r5, r6}
90016fea:	4770      	bx	lr
90016fec:	24026394 	.word	0x24026394
90016ff0:	2402638c 	.word	0x2402638c

90016ff4 <_ZNK8touchgfx6Bitmap8getWidthEv>:
90016ff4:	4a12      	ldr	r2, [pc, #72]	@ (90017040 <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
90016ff6:	8803      	ldrh	r3, [r0, #0]
90016ff8:	8812      	ldrh	r2, [r2, #0]
90016ffa:	4293      	cmp	r3, r2
90016ffc:	d207      	bcs.n	9001700e <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
90016ffe:	4a11      	ldr	r2, [pc, #68]	@ (90017044 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
90017000:	2114      	movs	r1, #20
90017002:	6812      	ldr	r2, [r2, #0]
90017004:	fb01 2303 	mla	r3, r1, r3, r2
90017008:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
9001700c:	4770      	bx	lr
9001700e:	490e      	ldr	r1, [pc, #56]	@ (90017048 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
90017010:	8809      	ldrh	r1, [r1, #0]
90017012:	4411      	add	r1, r2
90017014:	428b      	cmp	r3, r1
90017016:	da04      	bge.n	90017022 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
90017018:	1a9b      	subs	r3, r3, r2
9001701a:	4a0c      	ldr	r2, [pc, #48]	@ (9001704c <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
9001701c:	210e      	movs	r1, #14
9001701e:	6812      	ldr	r2, [r2, #0]
90017020:	e7f0      	b.n	90017004 <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
90017022:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
90017026:	4293      	cmp	r3, r2
90017028:	d108      	bne.n	9001703c <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
9001702a:	4b09      	ldr	r3, [pc, #36]	@ (90017050 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
9001702c:	781b      	ldrb	r3, [r3, #0]
9001702e:	b91b      	cbnz	r3, 90017038 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
90017030:	4b08      	ldr	r3, [pc, #32]	@ (90017054 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
90017032:	f9b3 0000 	ldrsh.w	r0, [r3]
90017036:	4770      	bx	lr
90017038:	4b07      	ldr	r3, [pc, #28]	@ (90017058 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
9001703a:	e7fa      	b.n	90017032 <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
9001703c:	2000      	movs	r0, #0
9001703e:	4770      	bx	lr
90017040:	2402638c 	.word	0x2402638c
90017044:	24026394 	.word	0x24026394
90017048:	24026390 	.word	0x24026390
9001704c:	24026374 	.word	0x24026374
90017050:	24026304 	.word	0x24026304
90017054:	24026306 	.word	0x24026306
90017058:	24026308 	.word	0x24026308

9001705c <_ZNK8touchgfx6Bitmap9getHeightEv>:
9001705c:	4a12      	ldr	r2, [pc, #72]	@ (900170a8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
9001705e:	8803      	ldrh	r3, [r0, #0]
90017060:	8812      	ldrh	r2, [r2, #0]
90017062:	4293      	cmp	r3, r2
90017064:	d207      	bcs.n	90017076 <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
90017066:	4a11      	ldr	r2, [pc, #68]	@ (900170ac <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
90017068:	2114      	movs	r1, #20
9001706a:	6812      	ldr	r2, [r2, #0]
9001706c:	fb01 2303 	mla	r3, r1, r3, r2
90017070:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
90017074:	4770      	bx	lr
90017076:	490e      	ldr	r1, [pc, #56]	@ (900170b0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
90017078:	8809      	ldrh	r1, [r1, #0]
9001707a:	4411      	add	r1, r2
9001707c:	428b      	cmp	r3, r1
9001707e:	da04      	bge.n	9001708a <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
90017080:	1a9b      	subs	r3, r3, r2
90017082:	4a0c      	ldr	r2, [pc, #48]	@ (900170b4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
90017084:	210e      	movs	r1, #14
90017086:	6812      	ldr	r2, [r2, #0]
90017088:	e7f0      	b.n	9001706c <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
9001708a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
9001708e:	4293      	cmp	r3, r2
90017090:	d108      	bne.n	900170a4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
90017092:	4b09      	ldr	r3, [pc, #36]	@ (900170b8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
90017094:	781b      	ldrb	r3, [r3, #0]
90017096:	b91b      	cbnz	r3, 900170a0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
90017098:	4b08      	ldr	r3, [pc, #32]	@ (900170bc <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
9001709a:	f9b3 0000 	ldrsh.w	r0, [r3]
9001709e:	4770      	bx	lr
900170a0:	4b07      	ldr	r3, [pc, #28]	@ (900170c0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
900170a2:	e7fa      	b.n	9001709a <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
900170a4:	2000      	movs	r0, #0
900170a6:	4770      	bx	lr
900170a8:	2402638c 	.word	0x2402638c
900170ac:	24026394 	.word	0x24026394
900170b0:	24026390 	.word	0x24026390
900170b4:	24026374 	.word	0x24026374
900170b8:	24026304 	.word	0x24026304
900170bc:	24026308 	.word	0x24026308
900170c0:	24026306 	.word	0x24026306

900170c4 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
900170c4:	4a1f      	ldr	r2, [pc, #124]	@ (90017144 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>)
900170c6:	b510      	push	{r4, lr}
900170c8:	880b      	ldrh	r3, [r1, #0]
900170ca:	8812      	ldrh	r2, [r2, #0]
900170cc:	4293      	cmp	r3, r2
900170ce:	d213      	bcs.n	900170f8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
900170d0:	4a1d      	ldr	r2, [pc, #116]	@ (90017148 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>)
900170d2:	2114      	movs	r1, #20
900170d4:	6812      	ldr	r2, [r2, #0]
900170d6:	fb01 2303 	mla	r3, r1, r3, r2
900170da:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
900170de:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
900170e2:	8a1a      	ldrh	r2, [r3, #16]
900170e4:	8a5b      	ldrh	r3, [r3, #18]
900170e6:	f3c2 020c 	ubfx	r2, r2, #0, #13
900170ea:	8004      	strh	r4, [r0, #0]
900170ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
900170f0:	8041      	strh	r1, [r0, #2]
900170f2:	8082      	strh	r2, [r0, #4]
900170f4:	80c3      	strh	r3, [r0, #6]
900170f6:	e00e      	b.n	90017116 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
900170f8:	4914      	ldr	r1, [pc, #80]	@ (9001714c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x88>)
900170fa:	8809      	ldrh	r1, [r1, #0]
900170fc:	4411      	add	r1, r2
900170fe:	428b      	cmp	r3, r1
90017100:	da0a      	bge.n	90017118 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x54>
90017102:	1a9b      	subs	r3, r3, r2
90017104:	4a12      	ldr	r2, [pc, #72]	@ (90017150 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
90017106:	210e      	movs	r1, #14
90017108:	6812      	ldr	r2, [r2, #0]
9001710a:	fb01 2303 	mla	r3, r1, r3, r2
9001710e:	681a      	ldr	r2, [r3, #0]
90017110:	6002      	str	r2, [r0, #0]
90017112:	685a      	ldr	r2, [r3, #4]
90017114:	6042      	str	r2, [r0, #4]
90017116:	bd10      	pop	{r4, pc}
90017118:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
9001711c:	4293      	cmp	r3, r2
9001711e:	d10b      	bne.n	90017138 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x74>
90017120:	4b0c      	ldr	r3, [pc, #48]	@ (90017154 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
90017122:	f9b3 1000 	ldrsh.w	r1, [r3]
90017126:	4b0c      	ldr	r3, [pc, #48]	@ (90017158 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
90017128:	8081      	strh	r1, [r0, #4]
9001712a:	f9b3 2000 	ldrsh.w	r2, [r3]
9001712e:	2300      	movs	r3, #0
90017130:	80c2      	strh	r2, [r0, #6]
90017132:	8003      	strh	r3, [r0, #0]
90017134:	8043      	strh	r3, [r0, #2]
90017136:	e7ee      	b.n	90017116 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
90017138:	2300      	movs	r3, #0
9001713a:	8003      	strh	r3, [r0, #0]
9001713c:	8043      	strh	r3, [r0, #2]
9001713e:	8083      	strh	r3, [r0, #4]
90017140:	e7d8      	b.n	900170f4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
90017142:	bf00      	nop
90017144:	2402638c 	.word	0x2402638c
90017148:	24026394 	.word	0x24026394
9001714c:	24026390 	.word	0x24026390
90017150:	24026374 	.word	0x24026374
90017154:	24026300 	.word	0x24026300
90017158:	24026302 	.word	0x24026302

9001715c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
9001715c:	4a17      	ldr	r2, [pc, #92]	@ (900171bc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x60>)
9001715e:	8803      	ldrh	r3, [r0, #0]
90017160:	8812      	ldrh	r2, [r2, #0]
90017162:	4293      	cmp	r3, r2
90017164:	d213      	bcs.n	9001718e <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x32>
90017166:	4a16      	ldr	r2, [pc, #88]	@ (900171c0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
90017168:	2114      	movs	r1, #20
9001716a:	6812      	ldr	r2, [r2, #0]
9001716c:	fb01 2303 	mla	r3, r1, r3, r2
90017170:	8a1a      	ldrh	r2, [r3, #16]
90017172:	8919      	ldrh	r1, [r3, #8]
90017174:	f3c2 020c 	ubfx	r2, r2, #0, #13
90017178:	428a      	cmp	r2, r1
9001717a:	db1d      	blt.n	900171b8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
9001717c:	8a58      	ldrh	r0, [r3, #18]
9001717e:	f3c0 000c 	ubfx	r0, r0, #0, #13
90017182:	895b      	ldrh	r3, [r3, #10]
90017184:	4298      	cmp	r0, r3
90017186:	bfac      	ite	ge
90017188:	2000      	movge	r0, #0
9001718a:	2001      	movlt	r0, #1
9001718c:	4770      	bx	lr
9001718e:	490d      	ldr	r1, [pc, #52]	@ (900171c4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
90017190:	8809      	ldrh	r1, [r1, #0]
90017192:	4411      	add	r1, r2
90017194:	428b      	cmp	r3, r1
90017196:	da0d      	bge.n	900171b4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
90017198:	1a9b      	subs	r3, r3, r2
9001719a:	4a0b      	ldr	r2, [pc, #44]	@ (900171c8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
9001719c:	210e      	movs	r1, #14
9001719e:	6812      	ldr	r2, [r2, #0]
900171a0:	fb01 2303 	mla	r3, r1, r3, r2
900171a4:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
900171a8:	891a      	ldrh	r2, [r3, #8]
900171aa:	4291      	cmp	r1, r2
900171ac:	db04      	blt.n	900171b8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
900171ae:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
900171b2:	e7e6      	b.n	90017182 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x26>
900171b4:	2000      	movs	r0, #0
900171b6:	4770      	bx	lr
900171b8:	2001      	movs	r0, #1
900171ba:	4770      	bx	lr
900171bc:	2402638c 	.word	0x2402638c
900171c0:	24026394 	.word	0x24026394
900171c4:	24026390 	.word	0x24026390
900171c8:	24026374 	.word	0x24026374

900171cc <_ZNK8touchgfx6Bitmap7getDataEv>:
900171cc:	4a12      	ldr	r2, [pc, #72]	@ (90017218 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
900171ce:	8803      	ldrh	r3, [r0, #0]
900171d0:	8811      	ldrh	r1, [r2, #0]
900171d2:	428b      	cmp	r3, r1
900171d4:	d20b      	bcs.n	900171ee <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
900171d6:	4a11      	ldr	r2, [pc, #68]	@ (9001721c <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
900171d8:	6812      	ldr	r2, [r2, #0]
900171da:	b112      	cbz	r2, 900171e2 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
900171dc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
900171e0:	b9c0      	cbnz	r0, 90017214 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
900171e2:	4a0f      	ldr	r2, [pc, #60]	@ (90017220 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
900171e4:	6811      	ldr	r1, [r2, #0]
900171e6:	2214      	movs	r2, #20
900171e8:	4353      	muls	r3, r2
900171ea:	58c8      	ldr	r0, [r1, r3]
900171ec:	4770      	bx	lr
900171ee:	4a0d      	ldr	r2, [pc, #52]	@ (90017224 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
900171f0:	8812      	ldrh	r2, [r2, #0]
900171f2:	440a      	add	r2, r1
900171f4:	4293      	cmp	r3, r2
900171f6:	da04      	bge.n	90017202 <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
900171f8:	4a08      	ldr	r2, [pc, #32]	@ (9001721c <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
900171fa:	6812      	ldr	r2, [r2, #0]
900171fc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
90017200:	4770      	bx	lr
90017202:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
90017206:	4293      	cmp	r3, r2
90017208:	d103      	bne.n	90017212 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
9001720a:	4b07      	ldr	r3, [pc, #28]	@ (90017228 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
9001720c:	681b      	ldr	r3, [r3, #0]
9001720e:	6c58      	ldr	r0, [r3, #68]	@ 0x44
90017210:	4770      	bx	lr
90017212:	2000      	movs	r0, #0
90017214:	4770      	bx	lr
90017216:	bf00      	nop
90017218:	2402638c 	.word	0x2402638c
9001721c:	24026370 	.word	0x24026370
90017220:	24026394 	.word	0x24026394
90017224:	24026390 	.word	0x24026390
90017228:	2402630c 	.word	0x2402630c

9001722c <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
9001722c:	4b24      	ldr	r3, [pc, #144]	@ (900172c0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
9001722e:	8802      	ldrh	r2, [r0, #0]
90017230:	8818      	ldrh	r0, [r3, #0]
90017232:	4282      	cmp	r2, r0
90017234:	d221      	bcs.n	9001727a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
90017236:	4b23      	ldr	r3, [pc, #140]	@ (900172c4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
90017238:	6819      	ldr	r1, [r3, #0]
9001723a:	2314      	movs	r3, #20
9001723c:	fb03 1302 	mla	r3, r3, r2, r1
90017240:	6858      	ldr	r0, [r3, #4]
90017242:	2800      	cmp	r0, #0
90017244:	d03a      	beq.n	900172bc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
90017246:	4920      	ldr	r1, [pc, #128]	@ (900172c8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
90017248:	6809      	ldr	r1, [r1, #0]
9001724a:	2900      	cmp	r1, #0
9001724c:	d036      	beq.n	900172bc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
9001724e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
90017252:	2900      	cmp	r1, #0
90017254:	d032      	beq.n	900172bc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
90017256:	891a      	ldrh	r2, [r3, #8]
90017258:	8958      	ldrh	r0, [r3, #10]
9001725a:	4350      	muls	r0, r2
9001725c:	7c5a      	ldrb	r2, [r3, #17]
9001725e:	7cdb      	ldrb	r3, [r3, #19]
90017260:	0952      	lsrs	r2, r2, #5
90017262:	f3c3 1342 	ubfx	r3, r3, #5, #3
90017266:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
9001726a:	2b0b      	cmp	r3, #11
9001726c:	bf18      	it	ne
9001726e:	0040      	lslne	r0, r0, #1
90017270:	3003      	adds	r0, #3
90017272:	f020 0003 	bic.w	r0, r0, #3
90017276:	4408      	add	r0, r1
90017278:	4770      	bx	lr
9001727a:	4b14      	ldr	r3, [pc, #80]	@ (900172cc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
9001727c:	881b      	ldrh	r3, [r3, #0]
9001727e:	4403      	add	r3, r0
90017280:	429a      	cmp	r2, r3
90017282:	da1a      	bge.n	900172ba <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
90017284:	4b12      	ldr	r3, [pc, #72]	@ (900172d0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
90017286:	1a10      	subs	r0, r2, r0
90017288:	210e      	movs	r1, #14
9001728a:	681b      	ldr	r3, [r3, #0]
9001728c:	fb01 3000 	mla	r0, r1, r0, r3
90017290:	7b03      	ldrb	r3, [r0, #12]
90017292:	f003 031f 	and.w	r3, r3, #31
90017296:	2b0b      	cmp	r3, #11
90017298:	d10b      	bne.n	900172b2 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
9001729a:	8903      	ldrh	r3, [r0, #8]
9001729c:	8940      	ldrh	r0, [r0, #10]
9001729e:	4358      	muls	r0, r3
900172a0:	4b09      	ldr	r3, [pc, #36]	@ (900172c8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
900172a2:	3003      	adds	r0, #3
900172a4:	6819      	ldr	r1, [r3, #0]
900172a6:	f020 0303 	bic.w	r3, r0, #3
900172aa:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
900172ae:	4418      	add	r0, r3
900172b0:	4770      	bx	lr
900172b2:	2b0d      	cmp	r3, #13
900172b4:	d101      	bne.n	900172ba <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
900172b6:	300d      	adds	r0, #13
900172b8:	4770      	bx	lr
900172ba:	2000      	movs	r0, #0
900172bc:	4770      	bx	lr
900172be:	bf00      	nop
900172c0:	2402638c 	.word	0x2402638c
900172c4:	24026394 	.word	0x24026394
900172c8:	24026370 	.word	0x24026370
900172cc:	24026390 	.word	0x24026390
900172d0:	24026374 	.word	0x24026374

900172d4 <_ZNK8touchgfx6Bitmap9getFormatEv>:
900172d4:	4a17      	ldr	r2, [pc, #92]	@ (90017334 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
900172d6:	b510      	push	{r4, lr}
900172d8:	8803      	ldrh	r3, [r0, #0]
900172da:	8812      	ldrh	r2, [r2, #0]
900172dc:	4293      	cmp	r3, r2
900172de:	d20c      	bcs.n	900172fa <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
900172e0:	4a15      	ldr	r2, [pc, #84]	@ (90017338 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
900172e2:	2114      	movs	r1, #20
900172e4:	6812      	ldr	r2, [r2, #0]
900172e6:	fb01 2303 	mla	r3, r1, r3, r2
900172ea:	7c58      	ldrb	r0, [r3, #17]
900172ec:	0942      	lsrs	r2, r0, #5
900172ee:	7cd8      	ldrb	r0, [r3, #19]
900172f0:	f3c0 1042 	ubfx	r0, r0, #5, #3
900172f4:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
900172f8:	bd10      	pop	{r4, pc}
900172fa:	4910      	ldr	r1, [pc, #64]	@ (9001733c <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
900172fc:	8809      	ldrh	r1, [r1, #0]
900172fe:	4411      	add	r1, r2
90017300:	428b      	cmp	r3, r1
90017302:	da09      	bge.n	90017318 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
90017304:	1a9b      	subs	r3, r3, r2
90017306:	4a0e      	ldr	r2, [pc, #56]	@ (90017340 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
90017308:	210e      	movs	r1, #14
9001730a:	6812      	ldr	r2, [r2, #0]
9001730c:	fb01 2303 	mla	r3, r1, r3, r2
90017310:	7b18      	ldrb	r0, [r3, #12]
90017312:	f000 001f 	and.w	r0, r0, #31
90017316:	e7ef      	b.n	900172f8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
90017318:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
9001731c:	4293      	cmp	r3, r2
9001731e:	d106      	bne.n	9001732e <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
90017320:	f7f9 fb6c 	bl	900109fc <_ZN8touchgfx3HAL3lcdEv>
90017324:	6803      	ldr	r3, [r0, #0]
90017326:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9001732a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9001732c:	4718      	bx	r3
9001732e:	2000      	movs	r0, #0
90017330:	e7e2      	b.n	900172f8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
90017332:	bf00      	nop
90017334:	2402638c 	.word	0x2402638c
90017338:	24026394 	.word	0x24026394
9001733c:	24026390 	.word	0x24026390
90017340:	24026374 	.word	0x24026374

90017344 <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
90017344:	2010      	movs	r0, #16
90017346:	4770      	bx	lr

90017348 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
90017348:	4b02      	ldr	r3, [pc, #8]	@ (90017354 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0xc>)
9001734a:	8818      	ldrh	r0, [r3, #0]
9001734c:	0040      	lsls	r0, r0, #1
9001734e:	b280      	uxth	r0, r0
90017350:	4770      	bx	lr
90017352:	bf00      	nop
90017354:	24026306 	.word	0x24026306

90017358 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
90017358:	2bff      	cmp	r3, #255	@ 0xff
9001735a:	d050      	beq.n	900173fe <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
9001735c:	2a0b      	cmp	r2, #11
9001735e:	d04a      	beq.n	900173f6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
90017360:	d80e      	bhi.n	90017380 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
90017362:	2a03      	cmp	r2, #3
90017364:	d03f      	beq.n	900173e6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
90017366:	d804      	bhi.n	90017372 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
90017368:	2a01      	cmp	r2, #1
9001736a:	d03e      	beq.n	900173ea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
9001736c:	d93f      	bls.n	900173ee <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
9001736e:	6b80      	ldr	r0, [r0, #56]	@ 0x38
90017370:	4770      	bx	lr
90017372:	2a09      	cmp	r2, #9
90017374:	d03f      	beq.n	900173f6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
90017376:	d83c      	bhi.n	900173f2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
90017378:	2a08      	cmp	r2, #8
9001737a:	d03a      	beq.n	900173f2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
9001737c:	2000      	movs	r0, #0
9001737e:	4770      	bx	lr
90017380:	2a2f      	cmp	r2, #47	@ 0x2f
90017382:	d024      	beq.n	900173ce <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
90017384:	d80d      	bhi.n	900173a2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
90017386:	2a2d      	cmp	r2, #45	@ 0x2d
90017388:	d014      	beq.n	900173b4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5c>
9001738a:	d826      	bhi.n	900173da <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
9001738c:	2a2c      	cmp	r2, #44	@ 0x2c
9001738e:	d1f5      	bne.n	9001737c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
90017390:	684b      	ldr	r3, [r1, #4]
90017392:	781b      	ldrb	r3, [r3, #0]
90017394:	2b01      	cmp	r3, #1
90017396:	d018      	beq.n	900173ca <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
90017398:	d323      	bcc.n	900173e2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
9001739a:	2b02      	cmp	r3, #2
9001739c:	d1ee      	bne.n	9001737c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
9001739e:	6880      	ldr	r0, [r0, #8]
900173a0:	4770      	bx	lr
900173a2:	2a31      	cmp	r2, #49	@ 0x31
900173a4:	d004      	beq.n	900173b0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x58>
900173a6:	d328      	bcc.n	900173fa <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
900173a8:	2a32      	cmp	r2, #50	@ 0x32
900173aa:	d026      	beq.n	900173fa <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
900173ac:	2a33      	cmp	r2, #51	@ 0x33
900173ae:	d1e5      	bne.n	9001737c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
900173b0:	6f00      	ldr	r0, [r0, #112]	@ 0x70
900173b2:	4770      	bx	lr
900173b4:	684b      	ldr	r3, [r1, #4]
900173b6:	781b      	ldrb	r3, [r3, #0]
900173b8:	2b01      	cmp	r3, #1
900173ba:	d004      	beq.n	900173c6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
900173bc:	d30b      	bcc.n	900173d6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
900173be:	2b02      	cmp	r3, #2
900173c0:	d1dc      	bne.n	9001737c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
900173c2:	6900      	ldr	r0, [r0, #16]
900173c4:	4770      	bx	lr
900173c6:	6a00      	ldr	r0, [r0, #32]
900173c8:	4770      	bx	lr
900173ca:	6980      	ldr	r0, [r0, #24]
900173cc:	4770      	bx	lr
900173ce:	684b      	ldr	r3, [r1, #4]
900173d0:	781b      	ldrb	r3, [r3, #0]
900173d2:	2b00      	cmp	r3, #0
900173d4:	d1d2      	bne.n	9001737c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
900173d6:	6b00      	ldr	r0, [r0, #48]	@ 0x30
900173d8:	4770      	bx	lr
900173da:	684b      	ldr	r3, [r1, #4]
900173dc:	781b      	ldrb	r3, [r3, #0]
900173de:	2b00      	cmp	r3, #0
900173e0:	d1cc      	bne.n	9001737c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
900173e2:	6a80      	ldr	r0, [r0, #40]	@ 0x28
900173e4:	4770      	bx	lr
900173e6:	6c80      	ldr	r0, [r0, #72]	@ 0x48
900173e8:	4770      	bx	lr
900173ea:	6d00      	ldr	r0, [r0, #80]	@ 0x50
900173ec:	4770      	bx	lr
900173ee:	6c00      	ldr	r0, [r0, #64]	@ 0x40
900173f0:	4770      	bx	lr
900173f2:	6d80      	ldr	r0, [r0, #88]	@ 0x58
900173f4:	4770      	bx	lr
900173f6:	6e00      	ldr	r0, [r0, #96]	@ 0x60
900173f8:	4770      	bx	lr
900173fa:	6e80      	ldr	r0, [r0, #104]	@ 0x68
900173fc:	4770      	bx	lr
900173fe:	2a0b      	cmp	r2, #11
90017400:	d049      	beq.n	90017496 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
90017402:	d80e      	bhi.n	90017422 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xca>
90017404:	2a03      	cmp	r2, #3
90017406:	d040      	beq.n	9001748a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
90017408:	d804      	bhi.n	90017414 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbc>
9001740a:	2a01      	cmp	r2, #1
9001740c:	d03f      	beq.n	9001748e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
9001740e:	d940      	bls.n	90017492 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
90017410:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
90017412:	4770      	bx	lr
90017414:	2a09      	cmp	r2, #9
90017416:	d03e      	beq.n	90017496 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
90017418:	d801      	bhi.n	9001741e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc6>
9001741a:	2a08      	cmp	r2, #8
9001741c:	d1ae      	bne.n	9001737c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
9001741e:	6dc0      	ldr	r0, [r0, #92]	@ 0x5c
90017420:	4770      	bx	lr
90017422:	2a2f      	cmp	r2, #47	@ 0x2f
90017424:	d024      	beq.n	90017470 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
90017426:	d80d      	bhi.n	90017444 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
90017428:	2a2d      	cmp	r2, #45	@ 0x2d
9001742a:	d014      	beq.n	90017456 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfe>
9001742c:	d826      	bhi.n	9001747c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x124>
9001742e:	2a2c      	cmp	r2, #44	@ 0x2c
90017430:	d1a4      	bne.n	9001737c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
90017432:	684b      	ldr	r3, [r1, #4]
90017434:	781b      	ldrb	r3, [r3, #0]
90017436:	2b01      	cmp	r3, #1
90017438:	d018      	beq.n	9001746c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x114>
9001743a:	d324      	bcc.n	90017486 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
9001743c:	2b02      	cmp	r3, #2
9001743e:	d19d      	bne.n	9001737c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
90017440:	68c0      	ldr	r0, [r0, #12]
90017442:	4770      	bx	lr
90017444:	2a31      	cmp	r2, #49	@ 0x31
90017446:	d004      	beq.n	90017452 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfa>
90017448:	d327      	bcc.n	9001749a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
9001744a:	2a32      	cmp	r2, #50	@ 0x32
9001744c:	d025      	beq.n	9001749a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
9001744e:	2a33      	cmp	r2, #51	@ 0x33
90017450:	d194      	bne.n	9001737c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
90017452:	6f40      	ldr	r0, [r0, #116]	@ 0x74
90017454:	4770      	bx	lr
90017456:	684b      	ldr	r3, [r1, #4]
90017458:	781b      	ldrb	r3, [r3, #0]
9001745a:	2b01      	cmp	r3, #1
9001745c:	d004      	beq.n	90017468 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
9001745e:	d30b      	bcc.n	90017478 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x120>
90017460:	2b02      	cmp	r3, #2
90017462:	d18b      	bne.n	9001737c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
90017464:	6940      	ldr	r0, [r0, #20]
90017466:	4770      	bx	lr
90017468:	6a40      	ldr	r0, [r0, #36]	@ 0x24
9001746a:	4770      	bx	lr
9001746c:	69c0      	ldr	r0, [r0, #28]
9001746e:	4770      	bx	lr
90017470:	684b      	ldr	r3, [r1, #4]
90017472:	781b      	ldrb	r3, [r3, #0]
90017474:	2b00      	cmp	r3, #0
90017476:	d181      	bne.n	9001737c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
90017478:	6b40      	ldr	r0, [r0, #52]	@ 0x34
9001747a:	4770      	bx	lr
9001747c:	684b      	ldr	r3, [r1, #4]
9001747e:	781b      	ldrb	r3, [r3, #0]
90017480:	2b00      	cmp	r3, #0
90017482:	f47f af7b 	bne.w	9001737c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
90017486:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
90017488:	4770      	bx	lr
9001748a:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
9001748c:	4770      	bx	lr
9001748e:	6d40      	ldr	r0, [r0, #84]	@ 0x54
90017490:	4770      	bx	lr
90017492:	6c40      	ldr	r0, [r0, #68]	@ 0x44
90017494:	4770      	bx	lr
90017496:	6e40      	ldr	r0, [r0, #100]	@ 0x64
90017498:	4770      	bx	lr
9001749a:	6ec0      	ldr	r0, [r0, #108]	@ 0x6c
9001749c:	4770      	bx	lr

9001749e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001749e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900174a2:	b087      	sub	sp, #28
900174a4:	9815      	ldr	r0, [sp, #84]	@ 0x54
900174a6:	9205      	str	r2, [sp, #20]
900174a8:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
900174ac:	9101      	str	r1, [sp, #4]
900174ae:	9202      	str	r2, [sp, #8]
900174b0:	6841      	ldr	r1, [r0, #4]
900174b2:	f8dd e060 	ldr.w	lr, [sp, #96]	@ 0x60
900174b6:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	@ 0x58
900174ba:	fb01 2404 	mla	r4, r1, r4, r2
900174be:	6802      	ldr	r2, [r0, #0]
900174c0:	eb02 0444 	add.w	r4, r2, r4, lsl #1
900174c4:	f8de 2000 	ldr.w	r2, [lr]
900174c8:	9203      	str	r2, [sp, #12]
900174ca:	f8de 2004 	ldr.w	r2, [lr, #4]
900174ce:	3204      	adds	r2, #4
900174d0:	9204      	str	r2, [sp, #16]
900174d2:	9a02      	ldr	r2, [sp, #8]
900174d4:	43d6      	mvns	r6, r2
900174d6:	b2f6      	uxtb	r6, r6
900174d8:	9a01      	ldr	r2, [sp, #4]
900174da:	2a00      	cmp	r2, #0
900174dc:	dc03      	bgt.n	900174e6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
900174de:	9a05      	ldr	r2, [sp, #20]
900174e0:	2a00      	cmp	r2, #0
900174e2:	f340 8129 	ble.w	90017738 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
900174e6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
900174e8:	f9be c008 	ldrsh.w	ip, [lr, #8]
900174ec:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
900174f0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
900174f2:	f9be 700c 	ldrsh.w	r7, [lr, #12]
900174f6:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
900174fa:	2b00      	cmp	r3, #0
900174fc:	dd0e      	ble.n	9001751c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
900174fe:	1408      	asrs	r0, r1, #16
90017500:	d405      	bmi.n	9001750e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
90017502:	4560      	cmp	r0, ip
90017504:	da03      	bge.n	9001750e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
90017506:	1410      	asrs	r0, r2, #16
90017508:	d401      	bmi.n	9001750e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
9001750a:	42b8      	cmp	r0, r7
9001750c:	db07      	blt.n	9001751e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
9001750e:	9813      	ldr	r0, [sp, #76]	@ 0x4c
90017510:	3b01      	subs	r3, #1
90017512:	3402      	adds	r4, #2
90017514:	4401      	add	r1, r0
90017516:	9814      	ldr	r0, [sp, #80]	@ 0x50
90017518:	4402      	add	r2, r0
9001751a:	e7ee      	b.n	900174fa <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
9001751c:	d071      	beq.n	90017602 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
9001751e:	1e58      	subs	r0, r3, #1
90017520:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
90017522:	fb05 1500 	mla	r5, r5, r0, r1
90017526:	142d      	asrs	r5, r5, #16
90017528:	d45f      	bmi.n	900175ea <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
9001752a:	4565      	cmp	r5, ip
9001752c:	da5d      	bge.n	900175ea <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
9001752e:	9d14      	ldr	r5, [sp, #80]	@ 0x50
90017530:	fb05 2000 	mla	r0, r5, r0, r2
90017534:	1400      	asrs	r0, r0, #16
90017536:	d458      	bmi.n	900175ea <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
90017538:	42b8      	cmp	r0, r7
9001753a:	da56      	bge.n	900175ea <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
9001753c:	4699      	mov	r9, r3
9001753e:	46a2      	mov	sl, r4
90017540:	f8bd b008 	ldrh.w	fp, [sp, #8]
90017544:	f1b9 0f00 	cmp.w	r9, #0
90017548:	dd57      	ble.n	900175fa <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
9001754a:	ea4f 4c22 	mov.w	ip, r2, asr #16
9001754e:	f9be 7008 	ldrsh.w	r7, [lr, #8]
90017552:	9803      	ldr	r0, [sp, #12]
90017554:	140d      	asrs	r5, r1, #16
90017556:	f109 39ff 	add.w	r9, r9, #4294967295
9001755a:	fb07 000c 	mla	r0, r7, ip, r0
9001755e:	5d40      	ldrb	r0, [r0, r5]
90017560:	9d04      	ldr	r5, [sp, #16]
90017562:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
90017566:	f8ba 5000 	ldrh.w	r5, [sl]
9001756a:	ea4f 2c20 	mov.w	ip, r0, asr #8
9001756e:	122f      	asrs	r7, r5, #8
90017570:	ea4f 08e5 	mov.w	r8, r5, asr #3
90017574:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
90017578:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
9001757c:	00ed      	lsls	r5, r5, #3
9001757e:	f008 08fc 	and.w	r8, r8, #252	@ 0xfc
90017582:	fb17 f706 	smulbb	r7, r7, r6
90017586:	b2ed      	uxtb	r5, r5
90017588:	fb18 f806 	smulbb	r8, r8, r6
9001758c:	fb0c 7c0b 	mla	ip, ip, fp, r7
90017590:	10c7      	asrs	r7, r0, #3
90017592:	fb15 f506 	smulbb	r5, r5, r6
90017596:	00c0      	lsls	r0, r0, #3
90017598:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
9001759c:	fa1f fc8c 	uxth.w	ip, ip
900175a0:	b2c0      	uxtb	r0, r0
900175a2:	fb07 870b 	mla	r7, r7, fp, r8
900175a6:	fb00 500b 	mla	r0, r0, fp, r5
900175aa:	f10c 0501 	add.w	r5, ip, #1
900175ae:	b2bf      	uxth	r7, r7
900175b0:	b280      	uxth	r0, r0
900175b2:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
900175b6:	f107 0801 	add.w	r8, r7, #1
900175ba:	1c45      	adds	r5, r0, #1
900175bc:	eb08 2817 	add.w	r8, r8, r7, lsr #8
900175c0:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
900175c4:	eb05 2510 	add.w	r5, r5, r0, lsr #8
900175c8:	9813      	ldr	r0, [sp, #76]	@ 0x4c
900175ca:	ea4f 1858 	mov.w	r8, r8, lsr #5
900175ce:	f3c5 25c4 	ubfx	r5, r5, #11, #5
900175d2:	4401      	add	r1, r0
900175d4:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
900175d8:	9814      	ldr	r0, [sp, #80]	@ 0x50
900175da:	ea45 0c0c 	orr.w	ip, r5, ip
900175de:	4402      	add	r2, r0
900175e0:	ea4c 0c08 	orr.w	ip, ip, r8
900175e4:	f82a cb02 	strh.w	ip, [sl], #2
900175e8:	e7ac      	b.n	90017544 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
900175ea:	f04f 0800 	mov.w	r8, #0
900175ee:	f8bd a008 	ldrh.w	sl, [sp, #8]
900175f2:	eb03 0008 	add.w	r0, r3, r8
900175f6:	2800      	cmp	r0, #0
900175f8:	dc41      	bgt.n	9001767e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
900175fa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
900175fe:	eb04 0443 	add.w	r4, r4, r3, lsl #1
90017602:	9b01      	ldr	r3, [sp, #4]
90017604:	2b00      	cmp	r3, #0
90017606:	f340 8097 	ble.w	90017738 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
9001760a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
9001760e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
90017610:	ee30 0a04 	vadd.f32	s0, s0, s8
90017614:	ee70 0aa4 	vadd.f32	s1, s1, s9
90017618:	eef0 6a62 	vmov.f32	s13, s5
9001761c:	eec7 7a00 	vdiv.f32	s15, s14, s0
90017620:	ee31 1a05 	vadd.f32	s2, s2, s10
90017624:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90017628:	edcd 6a11 	vstr	s13, [sp, #68]	@ 0x44
9001762c:	eef0 6a43 	vmov.f32	s13, s6
90017630:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90017634:	edcd 6a12 	vstr	s13, [sp, #72]	@ 0x48
90017638:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001763c:	ee61 7a27 	vmul.f32	s15, s2, s15
90017640:	ee77 2a62 	vsub.f32	s5, s14, s5
90017644:	ee37 3ac3 	vsub.f32	s6, s15, s6
90017648:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001764c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
90017650:	ee12 2a90 	vmov	r2, s5
90017654:	eef0 2a47 	vmov.f32	s5, s14
90017658:	fb92 f3f3 	sdiv	r3, r2, r3
9001765c:	ee13 2a10 	vmov	r2, s6
90017660:	9313      	str	r3, [sp, #76]	@ 0x4c
90017662:	9b10      	ldr	r3, [sp, #64]	@ 0x40
90017664:	eeb0 3a67 	vmov.f32	s6, s15
90017668:	fb92 f3f3 	sdiv	r3, r2, r3
9001766c:	9314      	str	r3, [sp, #80]	@ 0x50
9001766e:	9b01      	ldr	r3, [sp, #4]
90017670:	9a05      	ldr	r2, [sp, #20]
90017672:	3b01      	subs	r3, #1
90017674:	9301      	str	r3, [sp, #4]
90017676:	9b10      	ldr	r3, [sp, #64]	@ 0x40
90017678:	bf08      	it	eq
9001767a:	4613      	moveq	r3, r2
9001767c:	e72c      	b.n	900174d8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
9001767e:	140f      	asrs	r7, r1, #16
90017680:	d453      	bmi.n	9001772a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
90017682:	f8de 5008 	ldr.w	r5, [lr, #8]
90017686:	42bd      	cmp	r5, r7
90017688:	dd4f      	ble.n	9001772a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
9001768a:	ea5f 4c22 	movs.w	ip, r2, asr #16
9001768e:	d44c      	bmi.n	9001772a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
90017690:	f8de 000c 	ldr.w	r0, [lr, #12]
90017694:	4560      	cmp	r0, ip
90017696:	dd48      	ble.n	9001772a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
90017698:	9803      	ldr	r0, [sp, #12]
9001769a:	b22d      	sxth	r5, r5
9001769c:	fb0c 0505 	mla	r5, ip, r5, r0
900176a0:	5de8      	ldrb	r0, [r5, r7]
900176a2:	9d04      	ldr	r5, [sp, #16]
900176a4:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
900176a8:	f06f 0501 	mvn.w	r5, #1
900176ac:	fb05 fb08 	mul.w	fp, r5, r8
900176b0:	ea4f 2c20 	mov.w	ip, r0, asr #8
900176b4:	f834 500b 	ldrh.w	r5, [r4, fp]
900176b8:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
900176bc:	122f      	asrs	r7, r5, #8
900176be:	ea4f 09e5 	mov.w	r9, r5, asr #3
900176c2:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
900176c6:	00ed      	lsls	r5, r5, #3
900176c8:	f009 09fc 	and.w	r9, r9, #252	@ 0xfc
900176cc:	fb17 f706 	smulbb	r7, r7, r6
900176d0:	b2ed      	uxtb	r5, r5
900176d2:	fb19 f906 	smulbb	r9, r9, r6
900176d6:	fb0c 7c0a 	mla	ip, ip, sl, r7
900176da:	10c7      	asrs	r7, r0, #3
900176dc:	fb15 f506 	smulbb	r5, r5, r6
900176e0:	00c0      	lsls	r0, r0, #3
900176e2:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
900176e6:	fa1f fc8c 	uxth.w	ip, ip
900176ea:	b2c0      	uxtb	r0, r0
900176ec:	fb07 970a 	mla	r7, r7, sl, r9
900176f0:	fb00 500a 	mla	r0, r0, sl, r5
900176f4:	f10c 0501 	add.w	r5, ip, #1
900176f8:	b2bf      	uxth	r7, r7
900176fa:	b280      	uxth	r0, r0
900176fc:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
90017700:	f107 0901 	add.w	r9, r7, #1
90017704:	1c45      	adds	r5, r0, #1
90017706:	eb09 2917 	add.w	r9, r9, r7, lsr #8
9001770a:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
9001770e:	eb05 2510 	add.w	r5, r5, r0, lsr #8
90017712:	ea4f 1959 	mov.w	r9, r9, lsr #5
90017716:	f3c5 25c4 	ubfx	r5, r5, #11, #5
9001771a:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
9001771e:	ea45 0c0c 	orr.w	ip, r5, ip
90017722:	ea4c 0c09 	orr.w	ip, ip, r9
90017726:	f824 c00b 	strh.w	ip, [r4, fp]
9001772a:	9813      	ldr	r0, [sp, #76]	@ 0x4c
9001772c:	f108 38ff 	add.w	r8, r8, #4294967295
90017730:	4401      	add	r1, r0
90017732:	9814      	ldr	r0, [sp, #80]	@ 0x50
90017734:	4402      	add	r2, r0
90017736:	e75c      	b.n	900175f2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
90017738:	b007      	add	sp, #28
9001773a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

9001773e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001773e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90017742:	b085      	sub	sp, #20
90017744:	4693      	mov	fp, r2
90017746:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
9001774a:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
9001774c:	9d16      	ldr	r5, [sp, #88]	@ 0x58
9001774e:	6870      	ldr	r0, [r6, #4]
90017750:	9100      	str	r1, [sp, #0]
90017752:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
90017756:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	@ 0x44
9001775a:	fb00 2404 	mla	r4, r0, r4, r2
9001775e:	6832      	ldr	r2, [r6, #0]
90017760:	eb02 0444 	add.w	r4, r2, r4, lsl #1
90017764:	682a      	ldr	r2, [r5, #0]
90017766:	9201      	str	r2, [sp, #4]
90017768:	686a      	ldr	r2, [r5, #4]
9001776a:	3204      	adds	r2, #4
9001776c:	9202      	str	r2, [sp, #8]
9001776e:	9a00      	ldr	r2, [sp, #0]
90017770:	2a00      	cmp	r2, #0
90017772:	dc03      	bgt.n	9001777c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
90017774:	f1bb 0f00 	cmp.w	fp, #0
90017778:	f340 80a0 	ble.w	900178bc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
9001777c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
9001777e:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
90017782:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
90017786:	9a10      	ldr	r2, [sp, #64]	@ 0x40
90017788:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
9001778c:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
90017790:	2b00      	cmp	r3, #0
90017792:	dd0c      	ble.n	900177ae <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
90017794:	1406      	asrs	r6, r0, #16
90017796:	d405      	bmi.n	900177a4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
90017798:	454e      	cmp	r6, r9
9001779a:	da03      	bge.n	900177a4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
9001779c:	1416      	asrs	r6, r2, #16
9001779e:	d401      	bmi.n	900177a4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
900177a0:	4546      	cmp	r6, r8
900177a2:	db05      	blt.n	900177b0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
900177a4:	4470      	add	r0, lr
900177a6:	4462      	add	r2, ip
900177a8:	3b01      	subs	r3, #1
900177aa:	3402      	adds	r4, #2
900177ac:	e7f0      	b.n	90017790 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
900177ae:	d00f      	beq.n	900177d0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
900177b0:	1e5e      	subs	r6, r3, #1
900177b2:	fb0e 0706 	mla	r7, lr, r6, r0
900177b6:	143f      	asrs	r7, r7, #16
900177b8:	d541      	bpl.n	9001783e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
900177ba:	eb04 0643 	add.w	r6, r4, r3, lsl #1
900177be:	4698      	mov	r8, r3
900177c0:	9603      	str	r6, [sp, #12]
900177c2:	f1b8 0f00 	cmp.w	r8, #0
900177c6:	dc59      	bgt.n	9001787c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
900177c8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
900177cc:	eb04 0443 	add.w	r4, r4, r3, lsl #1
900177d0:	9b00      	ldr	r3, [sp, #0]
900177d2:	2b00      	cmp	r3, #0
900177d4:	dd72      	ble.n	900178bc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
900177d6:	ee30 0a04 	vadd.f32	s0, s0, s8
900177da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
900177dc:	ee70 0aa4 	vadd.f32	s1, s1, s9
900177e0:	eeb0 6a62 	vmov.f32	s12, s5
900177e4:	eec6 7a80 	vdiv.f32	s15, s13, s0
900177e8:	ee31 1a05 	vadd.f32	s2, s2, s10
900177ec:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
900177f0:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
900177f4:	eeb0 6a43 	vmov.f32	s12, s6
900177f8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
900177fc:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
90017800:	ee20 7aa7 	vmul.f32	s14, s1, s15
90017804:	ee61 7a27 	vmul.f32	s15, s2, s15
90017808:	ee77 2a62 	vsub.f32	s5, s14, s5
9001780c:	ee37 3ac3 	vsub.f32	s6, s15, s6
90017810:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90017814:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
90017818:	ee12 2a90 	vmov	r2, s5
9001781c:	eef0 2a47 	vmov.f32	s5, s14
90017820:	fb92 fef3 	sdiv	lr, r2, r3
90017824:	ee13 2a10 	vmov	r2, s6
90017828:	eeb0 3a67 	vmov.f32	s6, s15
9001782c:	fb92 fcf3 	sdiv	ip, r2, r3
90017830:	9b00      	ldr	r3, [sp, #0]
90017832:	3b01      	subs	r3, #1
90017834:	9300      	str	r3, [sp, #0]
90017836:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
90017838:	bf08      	it	eq
9001783a:	465b      	moveq	r3, fp
9001783c:	e797      	b.n	9001776e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
9001783e:	454f      	cmp	r7, r9
90017840:	dabb      	bge.n	900177ba <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
90017842:	fb0c 2606 	mla	r6, ip, r6, r2
90017846:	1436      	asrs	r6, r6, #16
90017848:	d4b7      	bmi.n	900177ba <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
9001784a:	4546      	cmp	r6, r8
9001784c:	dab5      	bge.n	900177ba <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
9001784e:	461e      	mov	r6, r3
90017850:	46a0      	mov	r8, r4
90017852:	2e00      	cmp	r6, #0
90017854:	ddb8      	ble.n	900177c8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
90017856:	1417      	asrs	r7, r2, #16
90017858:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
9001785c:	9901      	ldr	r1, [sp, #4]
9001785e:	ea4f 4920 	mov.w	r9, r0, asr #16
90017862:	4462      	add	r2, ip
90017864:	4470      	add	r0, lr
90017866:	fb0a 1707 	mla	r7, sl, r7, r1
9001786a:	9902      	ldr	r1, [sp, #8]
9001786c:	3e01      	subs	r6, #1
9001786e:	f817 7009 	ldrb.w	r7, [r7, r9]
90017872:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
90017876:	f828 7b02 	strh.w	r7, [r8], #2
9001787a:	e7ea      	b.n	90017852 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
9001787c:	ea5f 4920 	movs.w	r9, r0, asr #16
90017880:	d417      	bmi.n	900178b2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
90017882:	68ae      	ldr	r6, [r5, #8]
90017884:	454e      	cmp	r6, r9
90017886:	dd14      	ble.n	900178b2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
90017888:	ea5f 4a22 	movs.w	sl, r2, asr #16
9001788c:	d411      	bmi.n	900178b2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
9001788e:	68ef      	ldr	r7, [r5, #12]
90017890:	4557      	cmp	r7, sl
90017892:	dd0e      	ble.n	900178b2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
90017894:	9f01      	ldr	r7, [sp, #4]
90017896:	b236      	sxth	r6, r6
90017898:	f06f 0101 	mvn.w	r1, #1
9001789c:	fb0a 7606 	mla	r6, sl, r6, r7
900178a0:	9f02      	ldr	r7, [sp, #8]
900178a2:	f816 6009 	ldrb.w	r6, [r6, r9]
900178a6:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
900178aa:	fb01 f608 	mul.w	r6, r1, r8
900178ae:	9903      	ldr	r1, [sp, #12]
900178b0:	538f      	strh	r7, [r1, r6]
900178b2:	4470      	add	r0, lr
900178b4:	4462      	add	r2, ip
900178b6:	f108 38ff 	add.w	r8, r8, #4294967295
900178ba:	e782      	b.n	900177c2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
900178bc:	b005      	add	sp, #20
900178be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

900178c2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
900178c2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900178c6:	b087      	sub	sp, #28
900178c8:	9c15      	ldr	r4, [sp, #84]	@ 0x54
900178ca:	9205      	str	r2, [sp, #20]
900178cc:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
900178d0:	9102      	str	r1, [sp, #8]
900178d2:	9203      	str	r2, [sp, #12]
900178d4:	6861      	ldr	r1, [r4, #4]
900178d6:	f8dd c060 	ldr.w	ip, [sp, #96]	@ 0x60
900178da:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	@ 0x58
900178de:	fb01 2000 	mla	r0, r1, r0, r2
900178e2:	6822      	ldr	r2, [r4, #0]
900178e4:	eb02 0240 	add.w	r2, r2, r0, lsl #1
900178e8:	9200      	str	r2, [sp, #0]
900178ea:	f8dc 2000 	ldr.w	r2, [ip]
900178ee:	9204      	str	r2, [sp, #16]
900178f0:	f8dc 2004 	ldr.w	r2, [ip, #4]
900178f4:	3204      	adds	r2, #4
900178f6:	9201      	str	r2, [sp, #4]
900178f8:	9a03      	ldr	r2, [sp, #12]
900178fa:	43d5      	mvns	r5, r2
900178fc:	b2ed      	uxtb	r5, r5
900178fe:	9a02      	ldr	r2, [sp, #8]
90017900:	2a00      	cmp	r2, #0
90017902:	dc03      	bgt.n	9001790c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
90017904:	9a05      	ldr	r2, [sp, #20]
90017906:	2a00      	cmp	r2, #0
90017908:	f340 812c 	ble.w	90017b64 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
9001790c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
9001790e:	f9bc e008 	ldrsh.w	lr, [ip, #8]
90017912:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
90017916:	9a12      	ldr	r2, [sp, #72]	@ 0x48
90017918:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
9001791c:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
90017920:	2b00      	cmp	r3, #0
90017922:	dd10      	ble.n	90017946 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
90017924:	140c      	asrs	r4, r1, #16
90017926:	d405      	bmi.n	90017934 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
90017928:	4574      	cmp	r4, lr
9001792a:	da03      	bge.n	90017934 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
9001792c:	1414      	asrs	r4, r2, #16
9001792e:	d401      	bmi.n	90017934 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
90017930:	42bc      	cmp	r4, r7
90017932:	db09      	blt.n	90017948 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
90017934:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
90017936:	3b01      	subs	r3, #1
90017938:	9800      	ldr	r0, [sp, #0]
9001793a:	4421      	add	r1, r4
9001793c:	9c14      	ldr	r4, [sp, #80]	@ 0x50
9001793e:	3002      	adds	r0, #2
90017940:	4422      	add	r2, r4
90017942:	9000      	str	r0, [sp, #0]
90017944:	e7ec      	b.n	90017920 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
90017946:	d071      	beq.n	90017a2c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
90017948:	1e5c      	subs	r4, r3, #1
9001794a:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
9001794c:	fb06 1604 	mla	r6, r6, r4, r1
90017950:	1436      	asrs	r6, r6, #16
90017952:	d45d      	bmi.n	90017a10 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
90017954:	4576      	cmp	r6, lr
90017956:	da5b      	bge.n	90017a10 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
90017958:	9e14      	ldr	r6, [sp, #80]	@ 0x50
9001795a:	fb06 2404 	mla	r4, r6, r4, r2
9001795e:	1424      	asrs	r4, r4, #16
90017960:	d456      	bmi.n	90017a10 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
90017962:	42bc      	cmp	r4, r7
90017964:	da54      	bge.n	90017a10 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
90017966:	4698      	mov	r8, r3
90017968:	f8dd 9000 	ldr.w	r9, [sp]
9001796c:	f8bd a00c 	ldrh.w	sl, [sp, #12]
90017970:	f1b8 0f00 	cmp.w	r8, #0
90017974:	dd54      	ble.n	90017a20 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
90017976:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
9001797a:	1414      	asrs	r4, r2, #16
9001797c:	9804      	ldr	r0, [sp, #16]
9001797e:	140e      	asrs	r6, r1, #16
90017980:	f108 38ff 	add.w	r8, r8, #4294967295
90017984:	fb07 0404 	mla	r4, r7, r4, r0
90017988:	9801      	ldr	r0, [sp, #4]
9001798a:	f814 e006 	ldrb.w	lr, [r4, r6]
9001798e:	f8b9 4000 	ldrh.w	r4, [r9]
90017992:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
90017996:	1227      	asrs	r7, r4, #8
90017998:	eb00 0b0e 	add.w	fp, r0, lr
9001799c:	f810 e00e 	ldrb.w	lr, [r0, lr]
900179a0:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
900179a4:	9813      	ldr	r0, [sp, #76]	@ 0x4c
900179a6:	f89b 6002 	ldrb.w	r6, [fp, #2]
900179aa:	f89b b001 	ldrb.w	fp, [fp, #1]
900179ae:	4401      	add	r1, r0
900179b0:	fb16 f60a 	smulbb	r6, r6, sl
900179b4:	9814      	ldr	r0, [sp, #80]	@ 0x50
900179b6:	fb1b fb0a 	smulbb	fp, fp, sl
900179ba:	fb07 6705 	mla	r7, r7, r5, r6
900179be:	10e6      	asrs	r6, r4, #3
900179c0:	00e4      	lsls	r4, r4, #3
900179c2:	4402      	add	r2, r0
900179c4:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
900179c8:	b2bf      	uxth	r7, r7
900179ca:	b2e4      	uxtb	r4, r4
900179cc:	fb06 b605 	mla	r6, r6, r5, fp
900179d0:	fb14 f405 	smulbb	r4, r4, r5
900179d4:	b2b6      	uxth	r6, r6
900179d6:	fb0e 4e0a 	mla	lr, lr, sl, r4
900179da:	1c7c      	adds	r4, r7, #1
900179dc:	f106 0b01 	add.w	fp, r6, #1
900179e0:	fa1f fe8e 	uxth.w	lr, lr
900179e4:	eb04 2717 	add.w	r7, r4, r7, lsr #8
900179e8:	f10e 0401 	add.w	r4, lr, #1
900179ec:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
900179f0:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
900179f4:	eb04 241e 	add.w	r4, r4, lr, lsr #8
900179f8:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
900179fc:	f3c4 24c4 	ubfx	r4, r4, #11, #5
90017a00:	f40b 6bfc 	and.w	fp, fp, #2016	@ 0x7e0
90017a04:	4327      	orrs	r7, r4
90017a06:	ea47 070b 	orr.w	r7, r7, fp
90017a0a:	f829 7b02 	strh.w	r7, [r9], #2
90017a0e:	e7af      	b.n	90017970 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
90017a10:	f04f 0e00 	mov.w	lr, #0
90017a14:	f8bd 900c 	ldrh.w	r9, [sp, #12]
90017a18:	eb03 040e 	add.w	r4, r3, lr
90017a1c:	2c00      	cmp	r4, #0
90017a1e:	dc43      	bgt.n	90017aa8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
90017a20:	9a00      	ldr	r2, [sp, #0]
90017a22:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
90017a26:	eb02 0343 	add.w	r3, r2, r3, lsl #1
90017a2a:	9300      	str	r3, [sp, #0]
90017a2c:	9b02      	ldr	r3, [sp, #8]
90017a2e:	2b00      	cmp	r3, #0
90017a30:	f340 8098 	ble.w	90017b64 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
90017a34:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
90017a38:	9b10      	ldr	r3, [sp, #64]	@ 0x40
90017a3a:	ee30 0a04 	vadd.f32	s0, s0, s8
90017a3e:	ee70 0aa4 	vadd.f32	s1, s1, s9
90017a42:	eef0 6a62 	vmov.f32	s13, s5
90017a46:	eec7 7a00 	vdiv.f32	s15, s14, s0
90017a4a:	ee31 1a05 	vadd.f32	s2, s2, s10
90017a4e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90017a52:	edcd 6a11 	vstr	s13, [sp, #68]	@ 0x44
90017a56:	eef0 6a43 	vmov.f32	s13, s6
90017a5a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90017a5e:	edcd 6a12 	vstr	s13, [sp, #72]	@ 0x48
90017a62:	ee20 7aa7 	vmul.f32	s14, s1, s15
90017a66:	ee61 7a27 	vmul.f32	s15, s2, s15
90017a6a:	ee77 2a62 	vsub.f32	s5, s14, s5
90017a6e:	ee37 3ac3 	vsub.f32	s6, s15, s6
90017a72:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90017a76:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
90017a7a:	ee12 2a90 	vmov	r2, s5
90017a7e:	eef0 2a47 	vmov.f32	s5, s14
90017a82:	fb92 f3f3 	sdiv	r3, r2, r3
90017a86:	ee13 2a10 	vmov	r2, s6
90017a8a:	9313      	str	r3, [sp, #76]	@ 0x4c
90017a8c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
90017a8e:	eeb0 3a67 	vmov.f32	s6, s15
90017a92:	fb92 f3f3 	sdiv	r3, r2, r3
90017a96:	9314      	str	r3, [sp, #80]	@ 0x50
90017a98:	9b02      	ldr	r3, [sp, #8]
90017a9a:	9a05      	ldr	r2, [sp, #20]
90017a9c:	3b01      	subs	r3, #1
90017a9e:	9302      	str	r3, [sp, #8]
90017aa0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
90017aa2:	bf08      	it	eq
90017aa4:	4613      	moveq	r3, r2
90017aa6:	e72a      	b.n	900178fe <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
90017aa8:	140f      	asrs	r7, r1, #16
90017aaa:	d454      	bmi.n	90017b56 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
90017aac:	f8dc 6008 	ldr.w	r6, [ip, #8]
90017ab0:	42be      	cmp	r6, r7
90017ab2:	dd50      	ble.n	90017b56 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
90017ab4:	ea5f 4822 	movs.w	r8, r2, asr #16
90017ab8:	d44d      	bmi.n	90017b56 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
90017aba:	f8dc 400c 	ldr.w	r4, [ip, #12]
90017abe:	4544      	cmp	r4, r8
90017ac0:	dd49      	ble.n	90017b56 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
90017ac2:	9c04      	ldr	r4, [sp, #16]
90017ac4:	b236      	sxth	r6, r6
90017ac6:	f06f 0001 	mvn.w	r0, #1
90017aca:	fb08 4606 	mla	r6, r8, r6, r4
90017ace:	9c01      	ldr	r4, [sp, #4]
90017ad0:	fb00 fa0e 	mul.w	sl, r0, lr
90017ad4:	9800      	ldr	r0, [sp, #0]
90017ad6:	f816 8007 	ldrb.w	r8, [r6, r7]
90017ada:	eb08 0848 	add.w	r8, r8, r8, lsl #1
90017ade:	eb04 0b08 	add.w	fp, r4, r8
90017ae2:	f830 400a 	ldrh.w	r4, [r0, sl]
90017ae6:	9801      	ldr	r0, [sp, #4]
90017ae8:	f89b 6002 	ldrb.w	r6, [fp, #2]
90017aec:	1227      	asrs	r7, r4, #8
90017aee:	f89b b001 	ldrb.w	fp, [fp, #1]
90017af2:	fb16 f609 	smulbb	r6, r6, r9
90017af6:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
90017afa:	f810 8008 	ldrb.w	r8, [r0, r8]
90017afe:	fb1b fb09 	smulbb	fp, fp, r9
90017b02:	fb07 6705 	mla	r7, r7, r5, r6
90017b06:	10e6      	asrs	r6, r4, #3
90017b08:	00e4      	lsls	r4, r4, #3
90017b0a:	9800      	ldr	r0, [sp, #0]
90017b0c:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
90017b10:	b2bf      	uxth	r7, r7
90017b12:	b2e4      	uxtb	r4, r4
90017b14:	fb06 b605 	mla	r6, r6, r5, fp
90017b18:	fb14 f405 	smulbb	r4, r4, r5
90017b1c:	b2b6      	uxth	r6, r6
90017b1e:	fb08 4809 	mla	r8, r8, r9, r4
90017b22:	1c7c      	adds	r4, r7, #1
90017b24:	f106 0b01 	add.w	fp, r6, #1
90017b28:	fa1f f888 	uxth.w	r8, r8
90017b2c:	eb04 2717 	add.w	r7, r4, r7, lsr #8
90017b30:	f108 0401 	add.w	r4, r8, #1
90017b34:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
90017b38:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
90017b3c:	eb04 2418 	add.w	r4, r4, r8, lsr #8
90017b40:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
90017b44:	f3c4 24c4 	ubfx	r4, r4, #11, #5
90017b48:	f40b 6bfc 	and.w	fp, fp, #2016	@ 0x7e0
90017b4c:	4327      	orrs	r7, r4
90017b4e:	ea47 070b 	orr.w	r7, r7, fp
90017b52:	f820 700a 	strh.w	r7, [r0, sl]
90017b56:	9813      	ldr	r0, [sp, #76]	@ 0x4c
90017b58:	f10e 3eff 	add.w	lr, lr, #4294967295
90017b5c:	4401      	add	r1, r0
90017b5e:	9814      	ldr	r0, [sp, #80]	@ 0x50
90017b60:	4402      	add	r2, r0
90017b62:	e759      	b.n	90017a18 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
90017b64:	b007      	add	sp, #28
90017b66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

90017b6c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90017b6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90017b70:	b085      	sub	sp, #20
90017b72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
90017b76:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
90017b78:	9d16      	ldr	r5, [sp, #88]	@ 0x58
90017b7a:	9203      	str	r2, [sp, #12]
90017b7c:	6870      	ldr	r0, [r6, #4]
90017b7e:	686f      	ldr	r7, [r5, #4]
90017b80:	f8dd c044 	ldr.w	ip, [sp, #68]	@ 0x44
90017b84:	3704      	adds	r7, #4
90017b86:	9101      	str	r1, [sp, #4]
90017b88:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
90017b8c:	fb00 2404 	mla	r4, r0, r4, r2
90017b90:	6832      	ldr	r2, [r6, #0]
90017b92:	eb02 0444 	add.w	r4, r2, r4, lsl #1
90017b96:	682a      	ldr	r2, [r5, #0]
90017b98:	9202      	str	r2, [sp, #8]
90017b9a:	9a01      	ldr	r2, [sp, #4]
90017b9c:	2a00      	cmp	r2, #0
90017b9e:	dc03      	bgt.n	90017ba8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
90017ba0:	9a03      	ldr	r2, [sp, #12]
90017ba2:	2a00      	cmp	r2, #0
90017ba4:	f340 80cc 	ble.w	90017d40 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
90017ba8:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
90017baa:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
90017bae:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
90017bb2:	9a10      	ldr	r2, [sp, #64]	@ 0x40
90017bb4:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
90017bb8:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
90017bbc:	2b00      	cmp	r3, #0
90017bbe:	dd0d      	ble.n	90017bdc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
90017bc0:	1406      	asrs	r6, r0, #16
90017bc2:	d405      	bmi.n	90017bd0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
90017bc4:	454e      	cmp	r6, r9
90017bc6:	da03      	bge.n	90017bd0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
90017bc8:	1416      	asrs	r6, r2, #16
90017bca:	d401      	bmi.n	90017bd0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
90017bcc:	4546      	cmp	r6, r8
90017bce:	db06      	blt.n	90017bde <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
90017bd0:	9e12      	ldr	r6, [sp, #72]	@ 0x48
90017bd2:	4460      	add	r0, ip
90017bd4:	3b01      	subs	r3, #1
90017bd6:	3402      	adds	r4, #2
90017bd8:	4432      	add	r2, r6
90017bda:	e7ef      	b.n	90017bbc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
90017bdc:	d00f      	beq.n	90017bfe <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
90017bde:	1e5e      	subs	r6, r3, #1
90017be0:	fb0c 0e06 	mla	lr, ip, r6, r0
90017be4:	ea5f 4e2e 	movs.w	lr, lr, asr #16
90017be8:	d543      	bpl.n	90017c72 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
90017bea:	4698      	mov	r8, r3
90017bec:	eb04 0a43 	add.w	sl, r4, r3, lsl #1
90017bf0:	f1b8 0f00 	cmp.w	r8, #0
90017bf4:	dc71      	bgt.n	90017cda <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
90017bf6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
90017bfa:	eb04 0443 	add.w	r4, r4, r3, lsl #1
90017bfe:	9b01      	ldr	r3, [sp, #4]
90017c00:	2b00      	cmp	r3, #0
90017c02:	f340 809d 	ble.w	90017d40 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
90017c06:	ee30 0a04 	vadd.f32	s0, s0, s8
90017c0a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
90017c0c:	ee70 0aa4 	vadd.f32	s1, s1, s9
90017c10:	eeb0 6a62 	vmov.f32	s12, s5
90017c14:	eec6 7a80 	vdiv.f32	s15, s13, s0
90017c18:	ee31 1a05 	vadd.f32	s2, s2, s10
90017c1c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
90017c20:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
90017c24:	eeb0 6a43 	vmov.f32	s12, s6
90017c28:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
90017c2c:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
90017c30:	ee20 7aa7 	vmul.f32	s14, s1, s15
90017c34:	ee61 7a27 	vmul.f32	s15, s2, s15
90017c38:	ee77 2a62 	vsub.f32	s5, s14, s5
90017c3c:	ee37 3ac3 	vsub.f32	s6, s15, s6
90017c40:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90017c44:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
90017c48:	ee12 2a90 	vmov	r2, s5
90017c4c:	eef0 2a47 	vmov.f32	s5, s14
90017c50:	fb92 fcf3 	sdiv	ip, r2, r3
90017c54:	ee13 2a10 	vmov	r2, s6
90017c58:	eeb0 3a67 	vmov.f32	s6, s15
90017c5c:	fb92 f3f3 	sdiv	r3, r2, r3
90017c60:	9312      	str	r3, [sp, #72]	@ 0x48
90017c62:	9b01      	ldr	r3, [sp, #4]
90017c64:	9a03      	ldr	r2, [sp, #12]
90017c66:	3b01      	subs	r3, #1
90017c68:	9301      	str	r3, [sp, #4]
90017c6a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
90017c6c:	bf08      	it	eq
90017c6e:	4613      	moveq	r3, r2
90017c70:	e793      	b.n	90017b9a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
90017c72:	45ce      	cmp	lr, r9
90017c74:	dab9      	bge.n	90017bea <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
90017c76:	9912      	ldr	r1, [sp, #72]	@ 0x48
90017c78:	fb01 2606 	mla	r6, r1, r6, r2
90017c7c:	1436      	asrs	r6, r6, #16
90017c7e:	d4b4      	bmi.n	90017bea <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
90017c80:	4546      	cmp	r6, r8
90017c82:	dab2      	bge.n	90017bea <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
90017c84:	4698      	mov	r8, r3
90017c86:	46a2      	mov	sl, r4
90017c88:	f1b8 0f00 	cmp.w	r8, #0
90017c8c:	ddb3      	ble.n	90017bf6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
90017c8e:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
90017c92:	1416      	asrs	r6, r2, #16
90017c94:	9902      	ldr	r1, [sp, #8]
90017c96:	ea4f 4e20 	mov.w	lr, r0, asr #16
90017c9a:	f108 38ff 	add.w	r8, r8, #4294967295
90017c9e:	4460      	add	r0, ip
90017ca0:	fb09 1606 	mla	r6, r9, r6, r1
90017ca4:	4928      	ldr	r1, [pc, #160]	@ (90017d48 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>)
90017ca6:	f816 e00e 	ldrb.w	lr, [r6, lr]
90017caa:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
90017cae:	eb07 0b0e 	add.w	fp, r7, lr
90017cb2:	f89b 6001 	ldrb.w	r6, [fp, #1]
90017cb6:	f89b 9002 	ldrb.w	r9, [fp, #2]
90017cba:	00f6      	lsls	r6, r6, #3
90017cbc:	ea01 2909 	and.w	r9, r1, r9, lsl #8
90017cc0:	9912      	ldr	r1, [sp, #72]	@ 0x48
90017cc2:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
90017cc6:	440a      	add	r2, r1
90017cc8:	ea49 0606 	orr.w	r6, r9, r6
90017ccc:	f817 900e 	ldrb.w	r9, [r7, lr]
90017cd0:	ea46 06d9 	orr.w	r6, r6, r9, lsr #3
90017cd4:	f82a 6b02 	strh.w	r6, [sl], #2
90017cd8:	e7d6      	b.n	90017c88 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
90017cda:	ea5f 4920 	movs.w	r9, r0, asr #16
90017cde:	d429      	bmi.n	90017d34 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
90017ce0:	68ae      	ldr	r6, [r5, #8]
90017ce2:	454e      	cmp	r6, r9
90017ce4:	dd26      	ble.n	90017d34 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
90017ce6:	ea5f 4b22 	movs.w	fp, r2, asr #16
90017cea:	d423      	bmi.n	90017d34 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
90017cec:	68e9      	ldr	r1, [r5, #12]
90017cee:	4559      	cmp	r1, fp
90017cf0:	dd20      	ble.n	90017d34 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
90017cf2:	fa0f fe86 	sxth.w	lr, r6
90017cf6:	9902      	ldr	r1, [sp, #8]
90017cf8:	fb0b 1e0e 	mla	lr, fp, lr, r1
90017cfc:	f06f 0101 	mvn.w	r1, #1
90017d00:	f81e e009 	ldrb.w	lr, [lr, r9]
90017d04:	fb01 f908 	mul.w	r9, r1, r8
90017d08:	f2a1 71fe 	subw	r1, r1, #2046	@ 0x7fe
90017d0c:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
90017d10:	eb07 060e 	add.w	r6, r7, lr
90017d14:	f896 b002 	ldrb.w	fp, [r6, #2]
90017d18:	7876      	ldrb	r6, [r6, #1]
90017d1a:	ea01 2b0b 	and.w	fp, r1, fp, lsl #8
90017d1e:	00f6      	lsls	r6, r6, #3
90017d20:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
90017d24:	ea4b 0606 	orr.w	r6, fp, r6
90017d28:	f817 b00e 	ldrb.w	fp, [r7, lr]
90017d2c:	ea46 06db 	orr.w	r6, r6, fp, lsr #3
90017d30:	f82a 6009 	strh.w	r6, [sl, r9]
90017d34:	9912      	ldr	r1, [sp, #72]	@ 0x48
90017d36:	4460      	add	r0, ip
90017d38:	f108 38ff 	add.w	r8, r8, #4294967295
90017d3c:	440a      	add	r2, r1
90017d3e:	e757      	b.n	90017bf0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
90017d40:	b005      	add	sp, #20
90017d42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90017d46:	bf00      	nop
90017d48:	fffff800 	.word	0xfffff800

90017d4c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90017d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90017d50:	b087      	sub	sp, #28
90017d52:	468b      	mov	fp, r1
90017d54:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
90017d58:	9815      	ldr	r0, [sp, #84]	@ 0x54
90017d5a:	9204      	str	r2, [sp, #16]
90017d5c:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
90017d60:	6841      	ldr	r1, [r0, #4]
90017d62:	9205      	str	r2, [sp, #20]
90017d64:	f8dd c060 	ldr.w	ip, [sp, #96]	@ 0x60
90017d68:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	@ 0x58
90017d6c:	fb01 2404 	mla	r4, r1, r4, r2
90017d70:	6802      	ldr	r2, [r0, #0]
90017d72:	eb02 0444 	add.w	r4, r2, r4, lsl #1
90017d76:	f8dc 2000 	ldr.w	r2, [ip]
90017d7a:	9201      	str	r2, [sp, #4]
90017d7c:	f8dc 2004 	ldr.w	r2, [ip, #4]
90017d80:	3204      	adds	r2, #4
90017d82:	9202      	str	r2, [sp, #8]
90017d84:	f1bb 0f00 	cmp.w	fp, #0
90017d88:	dc03      	bgt.n	90017d92 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
90017d8a:	9a04      	ldr	r2, [sp, #16]
90017d8c:	2a00      	cmp	r2, #0
90017d8e:	f340 8138 	ble.w	90018002 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
90017d92:	9a11      	ldr	r2, [sp, #68]	@ 0x44
90017d94:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
90017d98:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
90017d9c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
90017d9e:	f9bc 600c 	ldrsh.w	r6, [ip, #12]
90017da2:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
90017da6:	2b00      	cmp	r3, #0
90017da8:	dd0e      	ble.n	90017dc8 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
90017daa:	1402      	asrs	r2, r0, #16
90017dac:	d405      	bmi.n	90017dba <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
90017dae:	42ba      	cmp	r2, r7
90017db0:	da03      	bge.n	90017dba <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
90017db2:	140a      	asrs	r2, r1, #16
90017db4:	d401      	bmi.n	90017dba <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
90017db6:	42b2      	cmp	r2, r6
90017db8:	db07      	blt.n	90017dca <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
90017dba:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
90017dbc:	3b01      	subs	r3, #1
90017dbe:	3402      	adds	r4, #2
90017dc0:	4410      	add	r0, r2
90017dc2:	9a14      	ldr	r2, [sp, #80]	@ 0x50
90017dc4:	4411      	add	r1, r2
90017dc6:	e7ee      	b.n	90017da6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
90017dc8:	d019      	beq.n	90017dfe <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
90017dca:	1e5a      	subs	r2, r3, #1
90017dcc:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
90017dce:	fb05 0502 	mla	r5, r5, r2, r0
90017dd2:	142d      	asrs	r5, r5, #16
90017dd4:	d409      	bmi.n	90017dea <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
90017dd6:	42bd      	cmp	r5, r7
90017dd8:	da07      	bge.n	90017dea <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
90017dda:	9d14      	ldr	r5, [sp, #80]	@ 0x50
90017ddc:	fb05 1202 	mla	r2, r5, r2, r1
90017de0:	1412      	asrs	r2, r2, #16
90017de2:	d402      	bmi.n	90017dea <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
90017de4:	42b2      	cmp	r2, r6
90017de6:	f2c0 80ac 	blt.w	90017f42 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
90017dea:	f04f 0e00 	mov.w	lr, #0
90017dee:	eb03 020e 	add.w	r2, r3, lr
90017df2:	2a00      	cmp	r2, #0
90017df4:	dc3e      	bgt.n	90017e74 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
90017df6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
90017dfa:	eb04 0443 	add.w	r4, r4, r3, lsl #1
90017dfe:	f1bb 0f00 	cmp.w	fp, #0
90017e02:	f340 80fe 	ble.w	90018002 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
90017e06:	ee30 0a04 	vadd.f32	s0, s0, s8
90017e0a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
90017e0c:	ee70 0aa4 	vadd.f32	s1, s1, s9
90017e10:	f1bb 0b01 	subs.w	fp, fp, #1
90017e14:	eeb0 6a62 	vmov.f32	s12, s5
90017e18:	eec6 7a80 	vdiv.f32	s15, s13, s0
90017e1c:	ee31 1a05 	vadd.f32	s2, s2, s10
90017e20:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
90017e24:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
90017e28:	eeb0 6a43 	vmov.f32	s12, s6
90017e2c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
90017e30:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
90017e34:	ee20 7aa7 	vmul.f32	s14, s1, s15
90017e38:	ee61 7a27 	vmul.f32	s15, s2, s15
90017e3c:	ee77 2a62 	vsub.f32	s5, s14, s5
90017e40:	ee37 3ac3 	vsub.f32	s6, s15, s6
90017e44:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90017e48:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
90017e4c:	ee12 2a90 	vmov	r2, s5
90017e50:	eef0 2a47 	vmov.f32	s5, s14
90017e54:	fb92 f3f3 	sdiv	r3, r2, r3
90017e58:	ee13 2a10 	vmov	r2, s6
90017e5c:	9313      	str	r3, [sp, #76]	@ 0x4c
90017e5e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
90017e60:	eeb0 3a67 	vmov.f32	s6, s15
90017e64:	fb92 f3f3 	sdiv	r3, r2, r3
90017e68:	9a04      	ldr	r2, [sp, #16]
90017e6a:	9314      	str	r3, [sp, #80]	@ 0x50
90017e6c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
90017e6e:	bf08      	it	eq
90017e70:	4613      	moveq	r3, r2
90017e72:	e787      	b.n	90017d84 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
90017e74:	1406      	asrs	r6, r0, #16
90017e76:	d45d      	bmi.n	90017f34 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
90017e78:	f8dc 5008 	ldr.w	r5, [ip, #8]
90017e7c:	42b5      	cmp	r5, r6
90017e7e:	dd59      	ble.n	90017f34 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
90017e80:	140f      	asrs	r7, r1, #16
90017e82:	d457      	bmi.n	90017f34 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
90017e84:	f8dc 200c 	ldr.w	r2, [ip, #12]
90017e88:	42ba      	cmp	r2, r7
90017e8a:	dd53      	ble.n	90017f34 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
90017e8c:	9a01      	ldr	r2, [sp, #4]
90017e8e:	b22d      	sxth	r5, r5
90017e90:	fb07 2505 	mla	r5, r7, r5, r2
90017e94:	5daa      	ldrb	r2, [r5, r6]
90017e96:	9d02      	ldr	r5, [sp, #8]
90017e98:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
90017e9c:	0e2e      	lsrs	r6, r5, #24
90017e9e:	d049      	beq.n	90017f34 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
90017ea0:	f06f 0201 	mvn.w	r2, #1
90017ea4:	f3c5 2a07 	ubfx	sl, r5, #8, #8
90017ea8:	fb02 f20e 	mul.w	r2, r2, lr
90017eac:	f834 8002 	ldrh.w	r8, [r4, r2]
90017eb0:	9203      	str	r2, [sp, #12]
90017eb2:	9a05      	ldr	r2, [sp, #20]
90017eb4:	ea4f 2728 	mov.w	r7, r8, asr #8
90017eb8:	4356      	muls	r6, r2
90017eba:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
90017ebe:	1c72      	adds	r2, r6, #1
90017ec0:	eb02 2226 	add.w	r2, r2, r6, asr #8
90017ec4:	f3c5 4607 	ubfx	r6, r5, #16, #8
90017ec8:	b2ed      	uxtb	r5, r5
90017eca:	1212      	asrs	r2, r2, #8
90017ecc:	fa1f f982 	uxth.w	r9, r2
90017ed0:	43d2      	mvns	r2, r2
90017ed2:	fb16 f609 	smulbb	r6, r6, r9
90017ed6:	b2d2      	uxtb	r2, r2
90017ed8:	fb15 f509 	smulbb	r5, r5, r9
90017edc:	fb07 6702 	mla	r7, r7, r2, r6
90017ee0:	ea4f 06e8 	mov.w	r6, r8, asr #3
90017ee4:	fb1a fa09 	smulbb	sl, sl, r9
90017ee8:	ea4f 08c8 	mov.w	r8, r8, lsl #3
90017eec:	b2bf      	uxth	r7, r7
90017eee:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
90017ef2:	fa5f f888 	uxtb.w	r8, r8
90017ef6:	fb06 a602 	mla	r6, r6, r2, sl
90017efa:	fb08 5502 	mla	r5, r8, r2, r5
90017efe:	1c7a      	adds	r2, r7, #1
90017f00:	b2b6      	uxth	r6, r6
90017f02:	b2ad      	uxth	r5, r5
90017f04:	eb02 2717 	add.w	r7, r2, r7, lsr #8
90017f08:	9a03      	ldr	r2, [sp, #12]
90017f0a:	f105 0a01 	add.w	sl, r5, #1
90017f0e:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
90017f12:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
90017f16:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
90017f1a:	ea4a 0707 	orr.w	r7, sl, r7
90017f1e:	f106 0a01 	add.w	sl, r6, #1
90017f22:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
90017f26:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
90017f2a:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
90017f2e:	ea47 070a 	orr.w	r7, r7, sl
90017f32:	52a7      	strh	r7, [r4, r2]
90017f34:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
90017f36:	f10e 3eff 	add.w	lr, lr, #4294967295
90017f3a:	4410      	add	r0, r2
90017f3c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
90017f3e:	4411      	add	r1, r2
90017f40:	e755      	b.n	90017dee <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
90017f42:	f04f 0800 	mov.w	r8, #0
90017f46:	eba3 0208 	sub.w	r2, r3, r8
90017f4a:	2a00      	cmp	r2, #0
90017f4c:	f77f af53 	ble.w	90017df6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
90017f50:	f9bc 6008 	ldrsh.w	r6, [ip, #8]
90017f54:	140a      	asrs	r2, r1, #16
90017f56:	9f01      	ldr	r7, [sp, #4]
90017f58:	1405      	asrs	r5, r0, #16
90017f5a:	fb06 7202 	mla	r2, r6, r2, r7
90017f5e:	5d52      	ldrb	r2, [r2, r5]
90017f60:	9d02      	ldr	r5, [sp, #8]
90017f62:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
90017f66:	0e2e      	lsrs	r6, r5, #24
90017f68:	d044      	beq.n	90017ff4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
90017f6a:	9a05      	ldr	r2, [sp, #20]
90017f6c:	f3c5 2a07 	ubfx	sl, r5, #8, #8
90017f70:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
90017f74:	4356      	muls	r6, r2
90017f76:	ea4f 272e 	mov.w	r7, lr, asr #8
90017f7a:	1c72      	adds	r2, r6, #1
90017f7c:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
90017f80:	eb02 2226 	add.w	r2, r2, r6, asr #8
90017f84:	f3c5 4607 	ubfx	r6, r5, #16, #8
90017f88:	b2ed      	uxtb	r5, r5
90017f8a:	1212      	asrs	r2, r2, #8
90017f8c:	fa1f f982 	uxth.w	r9, r2
90017f90:	43d2      	mvns	r2, r2
90017f92:	fb16 f609 	smulbb	r6, r6, r9
90017f96:	b2d2      	uxtb	r2, r2
90017f98:	fb15 f509 	smulbb	r5, r5, r9
90017f9c:	fb07 6702 	mla	r7, r7, r2, r6
90017fa0:	ea4f 06ee 	mov.w	r6, lr, asr #3
90017fa4:	fb1a fa09 	smulbb	sl, sl, r9
90017fa8:	ea4f 0ece 	mov.w	lr, lr, lsl #3
90017fac:	b2bf      	uxth	r7, r7
90017fae:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
90017fb2:	fa5f fe8e 	uxtb.w	lr, lr
90017fb6:	fb06 a602 	mla	r6, r6, r2, sl
90017fba:	fb0e 5502 	mla	r5, lr, r2, r5
90017fbe:	1c7a      	adds	r2, r7, #1
90017fc0:	b2b6      	uxth	r6, r6
90017fc2:	b2ad      	uxth	r5, r5
90017fc4:	eb02 2717 	add.w	r7, r2, r7, lsr #8
90017fc8:	f105 0a01 	add.w	sl, r5, #1
90017fcc:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
90017fd0:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
90017fd4:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
90017fd8:	ea4a 0707 	orr.w	r7, sl, r7
90017fdc:	f106 0a01 	add.w	sl, r6, #1
90017fe0:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
90017fe4:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
90017fe8:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
90017fec:	ea47 070a 	orr.w	r7, r7, sl
90017ff0:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
90017ff4:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
90017ff6:	f108 0801 	add.w	r8, r8, #1
90017ffa:	4410      	add	r0, r2
90017ffc:	9a14      	ldr	r2, [sp, #80]	@ 0x50
90017ffe:	4411      	add	r1, r2
90018000:	e7a1      	b.n	90017f46 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
90018002:	b007      	add	sp, #28
90018004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

90018008 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90018008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001800c:	b085      	sub	sp, #20
9001800e:	468b      	mov	fp, r1
90018010:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
90018014:	9813      	ldr	r0, [sp, #76]	@ 0x4c
90018016:	9203      	str	r2, [sp, #12]
90018018:	6841      	ldr	r1, [r0, #4]
9001801a:	f8dd e058 	ldr.w	lr, [sp, #88]	@ 0x58
9001801e:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
90018022:	fb01 2404 	mla	r4, r1, r4, r2
90018026:	6802      	ldr	r2, [r0, #0]
90018028:	eb02 0444 	add.w	r4, r2, r4, lsl #1
9001802c:	f8de 2000 	ldr.w	r2, [lr]
90018030:	9200      	str	r2, [sp, #0]
90018032:	f8de 2004 	ldr.w	r2, [lr, #4]
90018036:	3204      	adds	r2, #4
90018038:	9201      	str	r2, [sp, #4]
9001803a:	f1bb 0f00 	cmp.w	fp, #0
9001803e:	dc03      	bgt.n	90018048 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
90018040:	9a03      	ldr	r2, [sp, #12]
90018042:	2a00      	cmp	r2, #0
90018044:	f340 8153 	ble.w	900182ee <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
90018048:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
9001804a:	f9be 7008 	ldrsh.w	r7, [lr, #8]
9001804e:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
90018052:	9a10      	ldr	r2, [sp, #64]	@ 0x40
90018054:	f9be 600c 	ldrsh.w	r6, [lr, #12]
90018058:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
9001805c:	2b00      	cmp	r3, #0
9001805e:	dd0e      	ble.n	9001807e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
90018060:	1408      	asrs	r0, r1, #16
90018062:	d405      	bmi.n	90018070 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
90018064:	42b8      	cmp	r0, r7
90018066:	da03      	bge.n	90018070 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
90018068:	1410      	asrs	r0, r2, #16
9001806a:	d401      	bmi.n	90018070 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
9001806c:	42b0      	cmp	r0, r6
9001806e:	db07      	blt.n	90018080 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
90018070:	9811      	ldr	r0, [sp, #68]	@ 0x44
90018072:	3b01      	subs	r3, #1
90018074:	3402      	adds	r4, #2
90018076:	4401      	add	r1, r0
90018078:	9812      	ldr	r0, [sp, #72]	@ 0x48
9001807a:	4402      	add	r2, r0
9001807c:	e7ee      	b.n	9001805c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
9001807e:	d017      	beq.n	900180b0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
90018080:	1e58      	subs	r0, r3, #1
90018082:	9d11      	ldr	r5, [sp, #68]	@ 0x44
90018084:	fb05 1500 	mla	r5, r5, r0, r1
90018088:	142d      	asrs	r5, r5, #16
9001808a:	d409      	bmi.n	900180a0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
9001808c:	42bd      	cmp	r5, r7
9001808e:	da07      	bge.n	900180a0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
90018090:	9d12      	ldr	r5, [sp, #72]	@ 0x48
90018092:	fb05 2000 	mla	r0, r5, r0, r2
90018096:	1400      	asrs	r0, r0, #16
90018098:	d402      	bmi.n	900180a0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
9001809a:	42b0      	cmp	r0, r6
9001809c:	f2c0 80bc 	blt.w	90018218 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
900180a0:	2600      	movs	r6, #0
900180a2:	1998      	adds	r0, r3, r6
900180a4:	2800      	cmp	r0, #0
900180a6:	dc3e      	bgt.n	90018126 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
900180a8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
900180ac:	eb04 0443 	add.w	r4, r4, r3, lsl #1
900180b0:	f1bb 0f00 	cmp.w	fp, #0
900180b4:	f340 811b 	ble.w	900182ee <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
900180b8:	ee30 0a04 	vadd.f32	s0, s0, s8
900180bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
900180be:	ee70 0aa4 	vadd.f32	s1, s1, s9
900180c2:	f1bb 0b01 	subs.w	fp, fp, #1
900180c6:	eeb0 6a62 	vmov.f32	s12, s5
900180ca:	eec6 7a80 	vdiv.f32	s15, s13, s0
900180ce:	ee31 1a05 	vadd.f32	s2, s2, s10
900180d2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
900180d6:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
900180da:	eeb0 6a43 	vmov.f32	s12, s6
900180de:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
900180e2:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
900180e6:	ee20 7aa7 	vmul.f32	s14, s1, s15
900180ea:	ee61 7a27 	vmul.f32	s15, s2, s15
900180ee:	ee77 2a62 	vsub.f32	s5, s14, s5
900180f2:	ee37 3ac3 	vsub.f32	s6, s15, s6
900180f6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
900180fa:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
900180fe:	ee12 2a90 	vmov	r2, s5
90018102:	eef0 2a47 	vmov.f32	s5, s14
90018106:	fb92 f3f3 	sdiv	r3, r2, r3
9001810a:	ee13 2a10 	vmov	r2, s6
9001810e:	9311      	str	r3, [sp, #68]	@ 0x44
90018110:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
90018112:	eeb0 3a67 	vmov.f32	s6, s15
90018116:	fb92 f3f3 	sdiv	r3, r2, r3
9001811a:	9a03      	ldr	r2, [sp, #12]
9001811c:	9312      	str	r3, [sp, #72]	@ 0x48
9001811e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
90018120:	bf08      	it	eq
90018122:	4613      	moveq	r3, r2
90018124:	e789      	b.n	9001803a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
90018126:	140f      	asrs	r7, r1, #16
90018128:	d426      	bmi.n	90018178 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
9001812a:	f8de 5008 	ldr.w	r5, [lr, #8]
9001812e:	42bd      	cmp	r5, r7
90018130:	dd22      	ble.n	90018178 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
90018132:	ea5f 4c22 	movs.w	ip, r2, asr #16
90018136:	d41f      	bmi.n	90018178 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
90018138:	f8de 000c 	ldr.w	r0, [lr, #12]
9001813c:	4560      	cmp	r0, ip
9001813e:	dd1b      	ble.n	90018178 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
90018140:	9800      	ldr	r0, [sp, #0]
90018142:	b22d      	sxth	r5, r5
90018144:	fb0c 0505 	mla	r5, ip, r5, r0
90018148:	5de8      	ldrb	r0, [r5, r7]
9001814a:	9d01      	ldr	r5, [sp, #4]
9001814c:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
90018150:	0e07      	lsrs	r7, r0, #24
90018152:	2fff      	cmp	r7, #255	@ 0xff
90018154:	d116      	bne.n	90018184 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
90018156:	f06f 0501 	mvn.w	r5, #1
9001815a:	fb05 f706 	mul.w	r7, r5, r6
9001815e:	f2a5 75fe 	subw	r5, r5, #2046	@ 0x7fe
90018162:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
90018166:	0945      	lsrs	r5, r0, #5
90018168:	f3c0 00c4 	ubfx	r0, r0, #3, #5
9001816c:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
90018170:	ea4c 0505 	orr.w	r5, ip, r5
90018174:	4305      	orrs	r5, r0
90018176:	53e5      	strh	r5, [r4, r7]
90018178:	9811      	ldr	r0, [sp, #68]	@ 0x44
9001817a:	3e01      	subs	r6, #1
9001817c:	4401      	add	r1, r0
9001817e:	9812      	ldr	r0, [sp, #72]	@ 0x48
90018180:	4402      	add	r2, r0
90018182:	e78e      	b.n	900180a2 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
90018184:	b2fd      	uxtb	r5, r7
90018186:	2f00      	cmp	r7, #0
90018188:	d0f6      	beq.n	90018178 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
9001818a:	f06f 0701 	mvn.w	r7, #1
9001818e:	fa1f f985 	uxth.w	r9, r5
90018192:	43ed      	mvns	r5, r5
90018194:	f3c0 2a07 	ubfx	sl, r0, #8, #8
90018198:	4377      	muls	r7, r6
9001819a:	fb1a fa09 	smulbb	sl, sl, r9
9001819e:	b2ed      	uxtb	r5, r5
900181a0:	f834 8007 	ldrh.w	r8, [r4, r7]
900181a4:	9702      	str	r7, [sp, #8]
900181a6:	f3c0 4707 	ubfx	r7, r0, #16, #8
900181aa:	ea4f 2c28 	mov.w	ip, r8, asr #8
900181ae:	fb17 f709 	smulbb	r7, r7, r9
900181b2:	b2c0      	uxtb	r0, r0
900181b4:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
900181b8:	fb10 f009 	smulbb	r0, r0, r9
900181bc:	fb0c 7c05 	mla	ip, ip, r5, r7
900181c0:	ea4f 07e8 	mov.w	r7, r8, asr #3
900181c4:	ea4f 08c8 	mov.w	r8, r8, lsl #3
900181c8:	fa1f fc8c 	uxth.w	ip, ip
900181cc:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
900181d0:	fa5f f888 	uxtb.w	r8, r8
900181d4:	fb07 a705 	mla	r7, r7, r5, sl
900181d8:	fb08 0005 	mla	r0, r8, r5, r0
900181dc:	f10c 0501 	add.w	r5, ip, #1
900181e0:	b2bf      	uxth	r7, r7
900181e2:	b280      	uxth	r0, r0
900181e4:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
900181e8:	f100 0a01 	add.w	sl, r0, #1
900181ec:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
900181f0:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
900181f4:	9802      	ldr	r0, [sp, #8]
900181f6:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
900181fa:	ea4a 0c0c 	orr.w	ip, sl, ip
900181fe:	f107 0a01 	add.w	sl, r7, #1
90018202:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
90018206:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
9001820a:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
9001820e:	ea4c 0c0a 	orr.w	ip, ip, sl
90018212:	f824 c000 	strh.w	ip, [r4, r0]
90018216:	e7af      	b.n	90018178 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
90018218:	f04f 0800 	mov.w	r8, #0
9001821c:	eba3 0008 	sub.w	r0, r3, r8
90018220:	2800      	cmp	r0, #0
90018222:	f77f af41 	ble.w	900180a8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
90018226:	f9be 6008 	ldrsh.w	r6, [lr, #8]
9001822a:	1410      	asrs	r0, r2, #16
9001822c:	9f00      	ldr	r7, [sp, #0]
9001822e:	140d      	asrs	r5, r1, #16
90018230:	fb06 7000 	mla	r0, r6, r0, r7
90018234:	5d40      	ldrb	r0, [r0, r5]
90018236:	9d01      	ldr	r5, [sp, #4]
90018238:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
9001823c:	0e2e      	lsrs	r6, r5, #24
9001823e:	2eff      	cmp	r6, #255	@ 0xff
90018240:	d112      	bne.n	90018268 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x260>
90018242:	482c      	ldr	r0, [pc, #176]	@ (900182f4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
90018244:	ea00 2615 	and.w	r6, r0, r5, lsr #8
90018248:	0968      	lsrs	r0, r5, #5
9001824a:	f3c5 05c4 	ubfx	r5, r5, #3, #5
9001824e:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
90018252:	4330      	orrs	r0, r6
90018254:	4328      	orrs	r0, r5
90018256:	f824 0018 	strh.w	r0, [r4, r8, lsl #1]
9001825a:	9811      	ldr	r0, [sp, #68]	@ 0x44
9001825c:	f108 0801 	add.w	r8, r8, #1
90018260:	4401      	add	r1, r0
90018262:	9812      	ldr	r0, [sp, #72]	@ 0x48
90018264:	4402      	add	r2, r0
90018266:	e7d9      	b.n	9001821c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
90018268:	b2f0      	uxtb	r0, r6
9001826a:	2e00      	cmp	r6, #0
9001826c:	d0f5      	beq.n	9001825a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
9001826e:	f834 c018 	ldrh.w	ip, [r4, r8, lsl #1]
90018272:	fa1f f980 	uxth.w	r9, r0
90018276:	f3c5 4607 	ubfx	r6, r5, #16, #8
9001827a:	43c0      	mvns	r0, r0
9001827c:	ea4f 272c 	mov.w	r7, ip, asr #8
90018280:	f3c5 2a07 	ubfx	sl, r5, #8, #8
90018284:	fb16 f609 	smulbb	r6, r6, r9
90018288:	b2c0      	uxtb	r0, r0
9001828a:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
9001828e:	b2ed      	uxtb	r5, r5
90018290:	fb1a fa09 	smulbb	sl, sl, r9
90018294:	fb07 6700 	mla	r7, r7, r0, r6
90018298:	ea4f 06ec 	mov.w	r6, ip, asr #3
9001829c:	fb15 f509 	smulbb	r5, r5, r9
900182a0:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
900182a4:	b2bf      	uxth	r7, r7
900182a6:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
900182aa:	fa5f fc8c 	uxtb.w	ip, ip
900182ae:	fb06 a600 	mla	r6, r6, r0, sl
900182b2:	fb0c 5500 	mla	r5, ip, r0, r5
900182b6:	1c78      	adds	r0, r7, #1
900182b8:	b2b6      	uxth	r6, r6
900182ba:	b2ad      	uxth	r5, r5
900182bc:	eb00 2717 	add.w	r7, r0, r7, lsr #8
900182c0:	f105 0a01 	add.w	sl, r5, #1
900182c4:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
900182c8:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
900182cc:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
900182d0:	ea4a 0707 	orr.w	r7, sl, r7
900182d4:	f106 0a01 	add.w	sl, r6, #1
900182d8:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
900182dc:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
900182e0:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
900182e4:	ea47 070a 	orr.w	r7, r7, sl
900182e8:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
900182ec:	e7b5      	b.n	9001825a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
900182ee:	b005      	add	sp, #20
900182f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
900182f4:	fffff800 	.word	0xfffff800

900182f8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
900182f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900182fc:	b087      	sub	sp, #28
900182fe:	468b      	mov	fp, r1
90018300:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
90018304:	9c15      	ldr	r4, [sp, #84]	@ 0x54
90018306:	9204      	str	r2, [sp, #16]
90018308:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
9001830c:	6861      	ldr	r1, [r4, #4]
9001830e:	9205      	str	r2, [sp, #20]
90018310:	f8dd e060 	ldr.w	lr, [sp, #96]	@ 0x60
90018314:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	@ 0x58
90018318:	fb01 2000 	mla	r0, r1, r0, r2
9001831c:	6822      	ldr	r2, [r4, #0]
9001831e:	eb02 0040 	add.w	r0, r2, r0, lsl #1
90018322:	f8de 2000 	ldr.w	r2, [lr]
90018326:	9201      	str	r2, [sp, #4]
90018328:	f8de 2004 	ldr.w	r2, [lr, #4]
9001832c:	9202      	str	r2, [sp, #8]
9001832e:	f1bb 0f00 	cmp.w	fp, #0
90018332:	dc03      	bgt.n	9001833c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
90018334:	9a04      	ldr	r2, [sp, #16]
90018336:	2a00      	cmp	r2, #0
90018338:	f340 8142 	ble.w	900185c0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
9001833c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
9001833e:	f9be 7008 	ldrsh.w	r7, [lr, #8]
90018342:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
90018346:	9a12      	ldr	r2, [sp, #72]	@ 0x48
90018348:	f9be 600c 	ldrsh.w	r6, [lr, #12]
9001834c:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
90018350:	2b00      	cmp	r3, #0
90018352:	dd0e      	ble.n	90018372 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
90018354:	140c      	asrs	r4, r1, #16
90018356:	d405      	bmi.n	90018364 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
90018358:	42bc      	cmp	r4, r7
9001835a:	da03      	bge.n	90018364 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
9001835c:	1414      	asrs	r4, r2, #16
9001835e:	d401      	bmi.n	90018364 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
90018360:	42b4      	cmp	r4, r6
90018362:	db07      	blt.n	90018374 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
90018364:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
90018366:	3b01      	subs	r3, #1
90018368:	3002      	adds	r0, #2
9001836a:	4421      	add	r1, r4
9001836c:	9c14      	ldr	r4, [sp, #80]	@ 0x50
9001836e:	4422      	add	r2, r4
90018370:	e7ee      	b.n	90018350 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
90018372:	d019      	beq.n	900183a8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
90018374:	1e5c      	subs	r4, r3, #1
90018376:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
90018378:	fb05 1504 	mla	r5, r5, r4, r1
9001837c:	142d      	asrs	r5, r5, #16
9001837e:	d409      	bmi.n	90018394 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
90018380:	42bd      	cmp	r5, r7
90018382:	da07      	bge.n	90018394 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
90018384:	9d14      	ldr	r5, [sp, #80]	@ 0x50
90018386:	fb05 2404 	mla	r4, r5, r4, r2
9001838a:	1424      	asrs	r4, r4, #16
9001838c:	d402      	bmi.n	90018394 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
9001838e:	42b4      	cmp	r4, r6
90018390:	f2c0 80b1 	blt.w	900184f6 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
90018394:	f04f 0800 	mov.w	r8, #0
90018398:	eb03 0408 	add.w	r4, r3, r8
9001839c:	2c00      	cmp	r4, #0
9001839e:	dc3e      	bgt.n	9001841e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
900183a0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
900183a4:	eb00 0043 	add.w	r0, r0, r3, lsl #1
900183a8:	f1bb 0f00 	cmp.w	fp, #0
900183ac:	f340 8108 	ble.w	900185c0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
900183b0:	ee30 0a04 	vadd.f32	s0, s0, s8
900183b4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
900183b6:	ee70 0aa4 	vadd.f32	s1, s1, s9
900183ba:	f1bb 0b01 	subs.w	fp, fp, #1
900183be:	eeb0 6a62 	vmov.f32	s12, s5
900183c2:	eec6 7a80 	vdiv.f32	s15, s13, s0
900183c6:	ee31 1a05 	vadd.f32	s2, s2, s10
900183ca:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
900183ce:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
900183d2:	eeb0 6a43 	vmov.f32	s12, s6
900183d6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
900183da:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
900183de:	ee20 7aa7 	vmul.f32	s14, s1, s15
900183e2:	ee61 7a27 	vmul.f32	s15, s2, s15
900183e6:	ee77 2a62 	vsub.f32	s5, s14, s5
900183ea:	ee37 3ac3 	vsub.f32	s6, s15, s6
900183ee:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
900183f2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
900183f6:	ee12 2a90 	vmov	r2, s5
900183fa:	eef0 2a47 	vmov.f32	s5, s14
900183fe:	fb92 f3f3 	sdiv	r3, r2, r3
90018402:	ee13 2a10 	vmov	r2, s6
90018406:	9313      	str	r3, [sp, #76]	@ 0x4c
90018408:	9b10      	ldr	r3, [sp, #64]	@ 0x40
9001840a:	eeb0 3a67 	vmov.f32	s6, s15
9001840e:	fb92 f3f3 	sdiv	r3, r2, r3
90018412:	9a04      	ldr	r2, [sp, #16]
90018414:	9314      	str	r3, [sp, #80]	@ 0x50
90018416:	9b10      	ldr	r3, [sp, #64]	@ 0x40
90018418:	bf08      	it	eq
9001841a:	4613      	moveq	r3, r2
9001841c:	e787      	b.n	9001832e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
9001841e:	140e      	asrs	r6, r1, #16
90018420:	d462      	bmi.n	900184e8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
90018422:	f8de 5008 	ldr.w	r5, [lr, #8]
90018426:	42b5      	cmp	r5, r6
90018428:	dd5e      	ble.n	900184e8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
9001842a:	1417      	asrs	r7, r2, #16
9001842c:	d45c      	bmi.n	900184e8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
9001842e:	f8de 400c 	ldr.w	r4, [lr, #12]
90018432:	42bc      	cmp	r4, r7
90018434:	dd58      	ble.n	900184e8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
90018436:	b22d      	sxth	r5, r5
90018438:	9c02      	ldr	r4, [sp, #8]
9001843a:	fb07 6505 	mla	r5, r7, r5, r6
9001843e:	5d66      	ldrb	r6, [r4, r5]
90018440:	2e00      	cmp	r6, #0
90018442:	d051      	beq.n	900184e8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
90018444:	9c01      	ldr	r4, [sp, #4]
90018446:	f834 9015 	ldrh.w	r9, [r4, r5, lsl #1]
9001844a:	f06f 0401 	mvn.w	r4, #1
9001844e:	fb04 f408 	mul.w	r4, r4, r8
90018452:	ea4f 2c29 	mov.w	ip, r9, asr #8
90018456:	5b05      	ldrh	r5, [r0, r4]
90018458:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
9001845c:	9403      	str	r4, [sp, #12]
9001845e:	9c05      	ldr	r4, [sp, #20]
90018460:	ea4f 0ae5 	mov.w	sl, r5, asr #3
90018464:	4366      	muls	r6, r4
90018466:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
9001846a:	1c74      	adds	r4, r6, #1
9001846c:	eb04 2416 	add.w	r4, r4, r6, lsr #8
90018470:	122e      	asrs	r6, r5, #8
90018472:	1224      	asrs	r4, r4, #8
90018474:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
90018478:	00ed      	lsls	r5, r5, #3
9001847a:	b2a7      	uxth	r7, r4
9001847c:	43e4      	mvns	r4, r4
9001847e:	b2ed      	uxtb	r5, r5
90018480:	b2e4      	uxtb	r4, r4
90018482:	fb16 f604 	smulbb	r6, r6, r4
90018486:	fb15 f504 	smulbb	r5, r5, r4
9001848a:	fb0c 6c07 	mla	ip, ip, r7, r6
9001848e:	ea4f 06e9 	mov.w	r6, r9, asr #3
90018492:	fb1a fa04 	smulbb	sl, sl, r4
90018496:	ea4f 09c9 	mov.w	r9, r9, lsl #3
9001849a:	fa1f fc8c 	uxth.w	ip, ip
9001849e:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
900184a2:	fa5f f989 	uxtb.w	r9, r9
900184a6:	fb06 a607 	mla	r6, r6, r7, sl
900184aa:	f10c 0401 	add.w	r4, ip, #1
900184ae:	fb09 5507 	mla	r5, r9, r7, r5
900184b2:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
900184b6:	9c03      	ldr	r4, [sp, #12]
900184b8:	b2ad      	uxth	r5, r5
900184ba:	b2b6      	uxth	r6, r6
900184bc:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
900184c0:	f105 0a01 	add.w	sl, r5, #1
900184c4:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
900184c8:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
900184cc:	ea4a 0c0c 	orr.w	ip, sl, ip
900184d0:	f106 0a01 	add.w	sl, r6, #1
900184d4:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
900184d8:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
900184dc:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
900184e0:	ea4c 0c0a 	orr.w	ip, ip, sl
900184e4:	f820 c004 	strh.w	ip, [r0, r4]
900184e8:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
900184ea:	f108 38ff 	add.w	r8, r8, #4294967295
900184ee:	4421      	add	r1, r4
900184f0:	9c14      	ldr	r4, [sp, #80]	@ 0x50
900184f2:	4422      	add	r2, r4
900184f4:	e750      	b.n	90018398 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
900184f6:	f04f 0900 	mov.w	r9, #0
900184fa:	eba3 0409 	sub.w	r4, r3, r9
900184fe:	2c00      	cmp	r4, #0
90018500:	f77f af4e 	ble.w	900183a0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
90018504:	f9be 6008 	ldrsh.w	r6, [lr, #8]
90018508:	140d      	asrs	r5, r1, #16
9001850a:	1414      	asrs	r4, r2, #16
9001850c:	fb06 5404 	mla	r4, r6, r4, r5
90018510:	9d02      	ldr	r5, [sp, #8]
90018512:	5d2e      	ldrb	r6, [r5, r4]
90018514:	2e00      	cmp	r6, #0
90018516:	d04c      	beq.n	900185b2 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
90018518:	9d01      	ldr	r5, [sp, #4]
9001851a:	f835 8014 	ldrh.w	r8, [r5, r4, lsl #1]
9001851e:	9c05      	ldr	r4, [sp, #20]
90018520:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
90018524:	ea4f 2c28 	mov.w	ip, r8, asr #8
90018528:	4366      	muls	r6, r4
9001852a:	ea4f 0ae5 	mov.w	sl, r5, asr #3
9001852e:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
90018532:	1c74      	adds	r4, r6, #1
90018534:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
90018538:	eb04 2416 	add.w	r4, r4, r6, lsr #8
9001853c:	122e      	asrs	r6, r5, #8
9001853e:	1224      	asrs	r4, r4, #8
90018540:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
90018544:	00ed      	lsls	r5, r5, #3
90018546:	b2a7      	uxth	r7, r4
90018548:	43e4      	mvns	r4, r4
9001854a:	b2ed      	uxtb	r5, r5
9001854c:	b2e4      	uxtb	r4, r4
9001854e:	fb16 f604 	smulbb	r6, r6, r4
90018552:	fb15 f504 	smulbb	r5, r5, r4
90018556:	fb0c 6c07 	mla	ip, ip, r7, r6
9001855a:	ea4f 06e8 	mov.w	r6, r8, asr #3
9001855e:	fb1a fa04 	smulbb	sl, sl, r4
90018562:	ea4f 08c8 	mov.w	r8, r8, lsl #3
90018566:	fa1f fc8c 	uxth.w	ip, ip
9001856a:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
9001856e:	fa5f f888 	uxtb.w	r8, r8
90018572:	fb06 a607 	mla	r6, r6, r7, sl
90018576:	f10c 0401 	add.w	r4, ip, #1
9001857a:	fb08 5507 	mla	r5, r8, r7, r5
9001857e:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
90018582:	b2ad      	uxth	r5, r5
90018584:	b2b6      	uxth	r6, r6
90018586:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
9001858a:	f105 0a01 	add.w	sl, r5, #1
9001858e:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
90018592:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
90018596:	ea4a 0c0c 	orr.w	ip, sl, ip
9001859a:	f106 0a01 	add.w	sl, r6, #1
9001859e:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
900185a2:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
900185a6:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
900185aa:	ea4c 0c0a 	orr.w	ip, ip, sl
900185ae:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
900185b2:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
900185b4:	f109 0901 	add.w	r9, r9, #1
900185b8:	4421      	add	r1, r4
900185ba:	9c14      	ldr	r4, [sp, #80]	@ 0x50
900185bc:	4422      	add	r2, r4
900185be:	e79c      	b.n	900184fa <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
900185c0:	b007      	add	sp, #28
900185c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

900185c6 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
900185c6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900185ca:	b085      	sub	sp, #20
900185cc:	468b      	mov	fp, r1
900185ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
900185d2:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
900185d4:	9203      	str	r2, [sp, #12]
900185d6:	6861      	ldr	r1, [r4, #4]
900185d8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
900185dc:	e9dd 2014 	ldrd	r2, r0, [sp, #80]	@ 0x50
900185e0:	fb01 2000 	mla	r0, r1, r0, r2
900185e4:	6822      	ldr	r2, [r4, #0]
900185e6:	eb02 0040 	add.w	r0, r2, r0, lsl #1
900185ea:	f8d8 2000 	ldr.w	r2, [r8]
900185ee:	9200      	str	r2, [sp, #0]
900185f0:	f8d8 2004 	ldr.w	r2, [r8, #4]
900185f4:	9201      	str	r2, [sp, #4]
900185f6:	f1bb 0f00 	cmp.w	fp, #0
900185fa:	dc03      	bgt.n	90018604 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
900185fc:	9a03      	ldr	r2, [sp, #12]
900185fe:	2a00      	cmp	r2, #0
90018600:	f340 8146 	ble.w	90018890 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
90018604:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
90018606:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
9001860a:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
9001860e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
90018610:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
90018614:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
90018618:	2b00      	cmp	r3, #0
9001861a:	dd0e      	ble.n	9001863a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
9001861c:	140c      	asrs	r4, r1, #16
9001861e:	d405      	bmi.n	9001862c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
90018620:	42bc      	cmp	r4, r7
90018622:	da03      	bge.n	9001862c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
90018624:	1414      	asrs	r4, r2, #16
90018626:	d401      	bmi.n	9001862c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
90018628:	42b4      	cmp	r4, r6
9001862a:	db07      	blt.n	9001863c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
9001862c:	9c11      	ldr	r4, [sp, #68]	@ 0x44
9001862e:	3b01      	subs	r3, #1
90018630:	3002      	adds	r0, #2
90018632:	4421      	add	r1, r4
90018634:	9c12      	ldr	r4, [sp, #72]	@ 0x48
90018636:	4422      	add	r2, r4
90018638:	e7ee      	b.n	90018618 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
9001863a:	d017      	beq.n	9001866c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
9001863c:	1e5c      	subs	r4, r3, #1
9001863e:	9d11      	ldr	r5, [sp, #68]	@ 0x44
90018640:	fb05 1504 	mla	r5, r5, r4, r1
90018644:	142d      	asrs	r5, r5, #16
90018646:	d409      	bmi.n	9001865c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
90018648:	42bd      	cmp	r5, r7
9001864a:	da07      	bge.n	9001865c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
9001864c:	9d12      	ldr	r5, [sp, #72]	@ 0x48
9001864e:	fb05 2404 	mla	r4, r5, r4, r2
90018652:	1424      	asrs	r4, r4, #16
90018654:	d402      	bmi.n	9001865c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
90018656:	42b4      	cmp	r4, r6
90018658:	f2c0 80b3 	blt.w	900187c2 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
9001865c:	2600      	movs	r6, #0
9001865e:	199c      	adds	r4, r3, r6
90018660:	2c00      	cmp	r4, #0
90018662:	dc3e      	bgt.n	900186e2 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
90018664:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
90018668:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001866c:	f1bb 0f00 	cmp.w	fp, #0
90018670:	f340 810e 	ble.w	90018890 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
90018674:	ee30 0a04 	vadd.f32	s0, s0, s8
90018678:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
9001867a:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001867e:	f1bb 0b01 	subs.w	fp, fp, #1
90018682:	eeb0 6a62 	vmov.f32	s12, s5
90018686:	eec6 7a80 	vdiv.f32	s15, s13, s0
9001868a:	ee31 1a05 	vadd.f32	s2, s2, s10
9001868e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
90018692:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
90018696:	eeb0 6a43 	vmov.f32	s12, s6
9001869a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001869e:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
900186a2:	ee20 7aa7 	vmul.f32	s14, s1, s15
900186a6:	ee61 7a27 	vmul.f32	s15, s2, s15
900186aa:	ee77 2a62 	vsub.f32	s5, s14, s5
900186ae:	ee37 3ac3 	vsub.f32	s6, s15, s6
900186b2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
900186b6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
900186ba:	ee12 2a90 	vmov	r2, s5
900186be:	eef0 2a47 	vmov.f32	s5, s14
900186c2:	fb92 f3f3 	sdiv	r3, r2, r3
900186c6:	ee13 2a10 	vmov	r2, s6
900186ca:	9311      	str	r3, [sp, #68]	@ 0x44
900186cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
900186ce:	eeb0 3a67 	vmov.f32	s6, s15
900186d2:	fb92 f3f3 	sdiv	r3, r2, r3
900186d6:	9a03      	ldr	r2, [sp, #12]
900186d8:	9312      	str	r3, [sp, #72]	@ 0x48
900186da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
900186dc:	bf08      	it	eq
900186de:	4613      	moveq	r3, r2
900186e0:	e789      	b.n	900185f6 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
900186e2:	140f      	asrs	r7, r1, #16
900186e4:	d418      	bmi.n	90018718 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
900186e6:	f8d8 5008 	ldr.w	r5, [r8, #8]
900186ea:	42bd      	cmp	r5, r7
900186ec:	dd14      	ble.n	90018718 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
900186ee:	ea5f 4c22 	movs.w	ip, r2, asr #16
900186f2:	d411      	bmi.n	90018718 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
900186f4:	f8d8 400c 	ldr.w	r4, [r8, #12]
900186f8:	4564      	cmp	r4, ip
900186fa:	dd0d      	ble.n	90018718 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
900186fc:	b22d      	sxth	r5, r5
900186fe:	9c01      	ldr	r4, [sp, #4]
90018700:	fb0c 7505 	mla	r5, ip, r5, r7
90018704:	5d64      	ldrb	r4, [r4, r5]
90018706:	2cff      	cmp	r4, #255	@ 0xff
90018708:	d10c      	bne.n	90018724 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
9001870a:	9c00      	ldr	r4, [sp, #0]
9001870c:	f834 5015 	ldrh.w	r5, [r4, r5, lsl #1]
90018710:	f06f 0401 	mvn.w	r4, #1
90018714:	4374      	muls	r4, r6
90018716:	5305      	strh	r5, [r0, r4]
90018718:	9c11      	ldr	r4, [sp, #68]	@ 0x44
9001871a:	3e01      	subs	r6, #1
9001871c:	4421      	add	r1, r4
9001871e:	9c12      	ldr	r4, [sp, #72]	@ 0x48
90018720:	4422      	add	r2, r4
90018722:	e79c      	b.n	9001865e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
90018724:	2c00      	cmp	r4, #0
90018726:	d0f7      	beq.n	90018718 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
90018728:	9f00      	ldr	r7, [sp, #0]
9001872a:	fa1f fc84 	uxth.w	ip, r4
9001872e:	43e4      	mvns	r4, r4
90018730:	f837 9015 	ldrh.w	r9, [r7, r5, lsl #1]
90018734:	f06f 0501 	mvn.w	r5, #1
90018738:	b2e4      	uxtb	r4, r4
9001873a:	4375      	muls	r5, r6
9001873c:	ea4f 2e29 	mov.w	lr, r9, asr #8
90018740:	9502      	str	r5, [sp, #8]
90018742:	f00e 0ef8 	and.w	lr, lr, #248	@ 0xf8
90018746:	5b45      	ldrh	r5, [r0, r5]
90018748:	122f      	asrs	r7, r5, #8
9001874a:	ea4f 0ae5 	mov.w	sl, r5, asr #3
9001874e:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
90018752:	00ed      	lsls	r5, r5, #3
90018754:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
90018758:	fb17 f704 	smulbb	r7, r7, r4
9001875c:	b2ed      	uxtb	r5, r5
9001875e:	fb1a fa04 	smulbb	sl, sl, r4
90018762:	fb0e 7e0c 	mla	lr, lr, ip, r7
90018766:	ea4f 07e9 	mov.w	r7, r9, asr #3
9001876a:	fb15 f504 	smulbb	r5, r5, r4
9001876e:	ea4f 09c9 	mov.w	r9, r9, lsl #3
90018772:	fa1f fe8e 	uxth.w	lr, lr
90018776:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
9001877a:	fa5f f989 	uxtb.w	r9, r9
9001877e:	fb07 a70c 	mla	r7, r7, ip, sl
90018782:	f10e 0401 	add.w	r4, lr, #1
90018786:	fb09 550c 	mla	r5, r9, ip, r5
9001878a:	eb04 2e1e 	add.w	lr, r4, lr, lsr #8
9001878e:	9c02      	ldr	r4, [sp, #8]
90018790:	b2ad      	uxth	r5, r5
90018792:	b2bf      	uxth	r7, r7
90018794:	f40e 4e78 	and.w	lr, lr, #63488	@ 0xf800
90018798:	f105 0a01 	add.w	sl, r5, #1
9001879c:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
900187a0:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
900187a4:	ea4a 0e0e 	orr.w	lr, sl, lr
900187a8:	f107 0a01 	add.w	sl, r7, #1
900187ac:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
900187b0:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
900187b4:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
900187b8:	ea4e 0e0a 	orr.w	lr, lr, sl
900187bc:	f820 e004 	strh.w	lr, [r0, r4]
900187c0:	e7aa      	b.n	90018718 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
900187c2:	f04f 0900 	mov.w	r9, #0
900187c6:	eba3 0409 	sub.w	r4, r3, r9
900187ca:	2c00      	cmp	r4, #0
900187cc:	f77f af4a 	ble.w	90018664 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
900187d0:	1414      	asrs	r4, r2, #16
900187d2:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
900187d6:	140d      	asrs	r5, r1, #16
900187d8:	fb06 5504 	mla	r5, r6, r4, r5
900187dc:	9c01      	ldr	r4, [sp, #4]
900187de:	5d64      	ldrb	r4, [r4, r5]
900187e0:	2cff      	cmp	r4, #255	@ 0xff
900187e2:	d10b      	bne.n	900187fc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
900187e4:	9c00      	ldr	r4, [sp, #0]
900187e6:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
900187ea:	f820 4019 	strh.w	r4, [r0, r9, lsl #1]
900187ee:	9c11      	ldr	r4, [sp, #68]	@ 0x44
900187f0:	f109 0901 	add.w	r9, r9, #1
900187f4:	4421      	add	r1, r4
900187f6:	9c12      	ldr	r4, [sp, #72]	@ 0x48
900187f8:	4422      	add	r2, r4
900187fa:	e7e4      	b.n	900187c6 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
900187fc:	2c00      	cmp	r4, #0
900187fe:	d0f6      	beq.n	900187ee <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
90018800:	9e00      	ldr	r6, [sp, #0]
90018802:	b2a7      	uxth	r7, r4
90018804:	43e4      	mvns	r4, r4
90018806:	f836 e015 	ldrh.w	lr, [r6, r5, lsl #1]
9001880a:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
9001880e:	b2e4      	uxtb	r4, r4
90018810:	ea4f 2c2e 	mov.w	ip, lr, asr #8
90018814:	122e      	asrs	r6, r5, #8
90018816:	ea4f 0ae5 	mov.w	sl, r5, asr #3
9001881a:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
9001881e:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
90018822:	00ed      	lsls	r5, r5, #3
90018824:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
90018828:	fb16 f604 	smulbb	r6, r6, r4
9001882c:	b2ed      	uxtb	r5, r5
9001882e:	fb1a fa04 	smulbb	sl, sl, r4
90018832:	fb0c 6c07 	mla	ip, ip, r7, r6
90018836:	ea4f 06ee 	mov.w	r6, lr, asr #3
9001883a:	fb15 f504 	smulbb	r5, r5, r4
9001883e:	ea4f 0ece 	mov.w	lr, lr, lsl #3
90018842:	fa1f fc8c 	uxth.w	ip, ip
90018846:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
9001884a:	fa5f fe8e 	uxtb.w	lr, lr
9001884e:	fb06 a607 	mla	r6, r6, r7, sl
90018852:	f10c 0401 	add.w	r4, ip, #1
90018856:	fb0e 5507 	mla	r5, lr, r7, r5
9001885a:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
9001885e:	b2ad      	uxth	r5, r5
90018860:	b2b6      	uxth	r6, r6
90018862:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
90018866:	f105 0a01 	add.w	sl, r5, #1
9001886a:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
9001886e:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
90018872:	ea4a 0c0c 	orr.w	ip, sl, ip
90018876:	f106 0a01 	add.w	sl, r6, #1
9001887a:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
9001887e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
90018882:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
90018886:	ea4c 0c0a 	orr.w	ip, ip, sl
9001888a:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
9001888e:	e7ae      	b.n	900187ee <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
90018890:	b005      	add	sp, #20
90018892:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

90018896 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90018896:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001889a:	b085      	sub	sp, #20
9001889c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
9001889e:	9203      	str	r2, [sp, #12]
900188a0:	f89d 205c 	ldrb.w	r2, [sp, #92]	@ 0x5c
900188a4:	9100      	str	r1, [sp, #0]
900188a6:	9201      	str	r2, [sp, #4]
900188a8:	6841      	ldr	r1, [r0, #4]
900188aa:	f8dd e058 	ldr.w	lr, [sp, #88]	@ 0x58
900188ae:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
900188b2:	fb01 2404 	mla	r4, r1, r4, r2
900188b6:	6802      	ldr	r2, [r0, #0]
900188b8:	eb02 0444 	add.w	r4, r2, r4, lsl #1
900188bc:	f8de 2000 	ldr.w	r2, [lr]
900188c0:	9202      	str	r2, [sp, #8]
900188c2:	9a01      	ldr	r2, [sp, #4]
900188c4:	43d6      	mvns	r6, r2
900188c6:	b2f6      	uxtb	r6, r6
900188c8:	9a00      	ldr	r2, [sp, #0]
900188ca:	2a00      	cmp	r2, #0
900188cc:	dc03      	bgt.n	900188d6 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
900188ce:	9a03      	ldr	r2, [sp, #12]
900188d0:	2a00      	cmp	r2, #0
900188d2:	f340 8124 	ble.w	90018b1e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
900188d6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
900188d8:	f9be c008 	ldrsh.w	ip, [lr, #8]
900188dc:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
900188e0:	9a10      	ldr	r2, [sp, #64]	@ 0x40
900188e2:	f9be 700c 	ldrsh.w	r7, [lr, #12]
900188e6:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
900188ea:	2b00      	cmp	r3, #0
900188ec:	dd0e      	ble.n	9001890c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
900188ee:	1408      	asrs	r0, r1, #16
900188f0:	d405      	bmi.n	900188fe <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
900188f2:	4560      	cmp	r0, ip
900188f4:	da03      	bge.n	900188fe <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
900188f6:	1410      	asrs	r0, r2, #16
900188f8:	d401      	bmi.n	900188fe <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
900188fa:	42b8      	cmp	r0, r7
900188fc:	db07      	blt.n	9001890e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
900188fe:	9811      	ldr	r0, [sp, #68]	@ 0x44
90018900:	3b01      	subs	r3, #1
90018902:	3402      	adds	r4, #2
90018904:	4401      	add	r1, r0
90018906:	9812      	ldr	r0, [sp, #72]	@ 0x48
90018908:	4402      	add	r2, r0
9001890a:	e7ee      	b.n	900188ea <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
9001890c:	d06e      	beq.n	900189ec <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
9001890e:	1e58      	subs	r0, r3, #1
90018910:	9d11      	ldr	r5, [sp, #68]	@ 0x44
90018912:	fb05 1500 	mla	r5, r5, r0, r1
90018916:	142d      	asrs	r5, r5, #16
90018918:	d45c      	bmi.n	900189d4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
9001891a:	4565      	cmp	r5, ip
9001891c:	da5a      	bge.n	900189d4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
9001891e:	9d12      	ldr	r5, [sp, #72]	@ 0x48
90018920:	fb05 2000 	mla	r0, r5, r0, r2
90018924:	1400      	asrs	r0, r0, #16
90018926:	d455      	bmi.n	900189d4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
90018928:	42b8      	cmp	r0, r7
9001892a:	da53      	bge.n	900189d4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
9001892c:	4699      	mov	r9, r3
9001892e:	46a2      	mov	sl, r4
90018930:	f8bd b004 	ldrh.w	fp, [sp, #4]
90018934:	f1b9 0f00 	cmp.w	r9, #0
90018938:	dd54      	ble.n	900189e4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
9001893a:	f9be 7008 	ldrsh.w	r7, [lr, #8]
9001893e:	140d      	asrs	r5, r1, #16
90018940:	1410      	asrs	r0, r2, #16
90018942:	f109 39ff 	add.w	r9, r9, #4294967295
90018946:	fb07 5000 	mla	r0, r7, r0, r5
9001894a:	9d02      	ldr	r5, [sp, #8]
9001894c:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
90018950:	f8ba 5000 	ldrh.w	r5, [sl]
90018954:	ea4f 2c20 	mov.w	ip, r0, asr #8
90018958:	122f      	asrs	r7, r5, #8
9001895a:	ea4f 08e5 	mov.w	r8, r5, asr #3
9001895e:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
90018962:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
90018966:	00ed      	lsls	r5, r5, #3
90018968:	f008 08fc 	and.w	r8, r8, #252	@ 0xfc
9001896c:	fb17 f706 	smulbb	r7, r7, r6
90018970:	b2ed      	uxtb	r5, r5
90018972:	fb18 f806 	smulbb	r8, r8, r6
90018976:	fb0c 7c0b 	mla	ip, ip, fp, r7
9001897a:	10c7      	asrs	r7, r0, #3
9001897c:	fb15 f506 	smulbb	r5, r5, r6
90018980:	00c0      	lsls	r0, r0, #3
90018982:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
90018986:	fa1f fc8c 	uxth.w	ip, ip
9001898a:	b2c0      	uxtb	r0, r0
9001898c:	fb07 870b 	mla	r7, r7, fp, r8
90018990:	fb00 500b 	mla	r0, r0, fp, r5
90018994:	f10c 0501 	add.w	r5, ip, #1
90018998:	b2bf      	uxth	r7, r7
9001899a:	b280      	uxth	r0, r0
9001899c:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
900189a0:	f107 0801 	add.w	r8, r7, #1
900189a4:	1c45      	adds	r5, r0, #1
900189a6:	eb08 2817 	add.w	r8, r8, r7, lsr #8
900189aa:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
900189ae:	eb05 2510 	add.w	r5, r5, r0, lsr #8
900189b2:	9811      	ldr	r0, [sp, #68]	@ 0x44
900189b4:	ea4f 1858 	mov.w	r8, r8, lsr #5
900189b8:	f3c5 25c4 	ubfx	r5, r5, #11, #5
900189bc:	4401      	add	r1, r0
900189be:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
900189c2:	9812      	ldr	r0, [sp, #72]	@ 0x48
900189c4:	ea45 0c0c 	orr.w	ip, r5, ip
900189c8:	4402      	add	r2, r0
900189ca:	ea4c 0c08 	orr.w	ip, ip, r8
900189ce:	f82a cb02 	strh.w	ip, [sl], #2
900189d2:	e7af      	b.n	90018934 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
900189d4:	f04f 0800 	mov.w	r8, #0
900189d8:	f8bd a004 	ldrh.w	sl, [sp, #4]
900189dc:	eb03 0008 	add.w	r0, r3, r8
900189e0:	2800      	cmp	r0, #0
900189e2:	dc41      	bgt.n	90018a68 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
900189e4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
900189e8:	eb04 0443 	add.w	r4, r4, r3, lsl #1
900189ec:	9b00      	ldr	r3, [sp, #0]
900189ee:	2b00      	cmp	r3, #0
900189f0:	f340 8095 	ble.w	90018b1e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
900189f4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
900189f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
900189fa:	ee30 0a04 	vadd.f32	s0, s0, s8
900189fe:	ee70 0aa4 	vadd.f32	s1, s1, s9
90018a02:	eef0 6a62 	vmov.f32	s13, s5
90018a06:	eec7 7a00 	vdiv.f32	s15, s14, s0
90018a0a:	ee31 1a05 	vadd.f32	s2, s2, s10
90018a0e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90018a12:	edcd 6a0f 	vstr	s13, [sp, #60]	@ 0x3c
90018a16:	eef0 6a43 	vmov.f32	s13, s6
90018a1a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90018a1e:	edcd 6a10 	vstr	s13, [sp, #64]	@ 0x40
90018a22:	ee20 7aa7 	vmul.f32	s14, s1, s15
90018a26:	ee61 7a27 	vmul.f32	s15, s2, s15
90018a2a:	ee77 2a62 	vsub.f32	s5, s14, s5
90018a2e:	ee37 3ac3 	vsub.f32	s6, s15, s6
90018a32:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90018a36:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
90018a3a:	ee12 2a90 	vmov	r2, s5
90018a3e:	eef0 2a47 	vmov.f32	s5, s14
90018a42:	fb92 f3f3 	sdiv	r3, r2, r3
90018a46:	ee13 2a10 	vmov	r2, s6
90018a4a:	9311      	str	r3, [sp, #68]	@ 0x44
90018a4c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
90018a4e:	eeb0 3a67 	vmov.f32	s6, s15
90018a52:	fb92 f3f3 	sdiv	r3, r2, r3
90018a56:	9312      	str	r3, [sp, #72]	@ 0x48
90018a58:	9b00      	ldr	r3, [sp, #0]
90018a5a:	9a03      	ldr	r2, [sp, #12]
90018a5c:	3b01      	subs	r3, #1
90018a5e:	9300      	str	r3, [sp, #0]
90018a60:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
90018a62:	bf08      	it	eq
90018a64:	4613      	moveq	r3, r2
90018a66:	e72f      	b.n	900188c8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
90018a68:	140f      	asrs	r7, r1, #16
90018a6a:	d451      	bmi.n	90018b10 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
90018a6c:	f8de 5008 	ldr.w	r5, [lr, #8]
90018a70:	42bd      	cmp	r5, r7
90018a72:	dd4d      	ble.n	90018b10 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
90018a74:	ea5f 4c22 	movs.w	ip, r2, asr #16
90018a78:	d44a      	bmi.n	90018b10 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
90018a7a:	f8de 000c 	ldr.w	r0, [lr, #12]
90018a7e:	4560      	cmp	r0, ip
90018a80:	dd46      	ble.n	90018b10 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
90018a82:	b22d      	sxth	r5, r5
90018a84:	9802      	ldr	r0, [sp, #8]
90018a86:	fb0c 7505 	mla	r5, ip, r5, r7
90018a8a:	f830 0015 	ldrh.w	r0, [r0, r5, lsl #1]
90018a8e:	f06f 0501 	mvn.w	r5, #1
90018a92:	fb05 fb08 	mul.w	fp, r5, r8
90018a96:	ea4f 2c20 	mov.w	ip, r0, asr #8
90018a9a:	f834 500b 	ldrh.w	r5, [r4, fp]
90018a9e:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
90018aa2:	122f      	asrs	r7, r5, #8
90018aa4:	ea4f 09e5 	mov.w	r9, r5, asr #3
90018aa8:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
90018aac:	00ed      	lsls	r5, r5, #3
90018aae:	f009 09fc 	and.w	r9, r9, #252	@ 0xfc
90018ab2:	fb17 f706 	smulbb	r7, r7, r6
90018ab6:	b2ed      	uxtb	r5, r5
90018ab8:	fb19 f906 	smulbb	r9, r9, r6
90018abc:	fb0c 7c0a 	mla	ip, ip, sl, r7
90018ac0:	10c7      	asrs	r7, r0, #3
90018ac2:	fb15 f506 	smulbb	r5, r5, r6
90018ac6:	00c0      	lsls	r0, r0, #3
90018ac8:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
90018acc:	fa1f fc8c 	uxth.w	ip, ip
90018ad0:	b2c0      	uxtb	r0, r0
90018ad2:	fb07 970a 	mla	r7, r7, sl, r9
90018ad6:	fb00 500a 	mla	r0, r0, sl, r5
90018ada:	f10c 0501 	add.w	r5, ip, #1
90018ade:	b2bf      	uxth	r7, r7
90018ae0:	b280      	uxth	r0, r0
90018ae2:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
90018ae6:	f107 0901 	add.w	r9, r7, #1
90018aea:	1c45      	adds	r5, r0, #1
90018aec:	eb09 2917 	add.w	r9, r9, r7, lsr #8
90018af0:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
90018af4:	eb05 2510 	add.w	r5, r5, r0, lsr #8
90018af8:	ea4f 1959 	mov.w	r9, r9, lsr #5
90018afc:	f3c5 25c4 	ubfx	r5, r5, #11, #5
90018b00:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
90018b04:	ea45 0c0c 	orr.w	ip, r5, ip
90018b08:	ea4c 0c09 	orr.w	ip, ip, r9
90018b0c:	f824 c00b 	strh.w	ip, [r4, fp]
90018b10:	9811      	ldr	r0, [sp, #68]	@ 0x44
90018b12:	f108 38ff 	add.w	r8, r8, #4294967295
90018b16:	4401      	add	r1, r0
90018b18:	9812      	ldr	r0, [sp, #72]	@ 0x48
90018b1a:	4402      	add	r2, r0
90018b1c:	e75e      	b.n	900189dc <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
90018b1e:	b005      	add	sp, #20
90018b20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

90018b24 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90018b24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90018b28:	b085      	sub	sp, #20
90018b2a:	4693      	mov	fp, r2
90018b2c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
90018b30:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
90018b32:	9d16      	ldr	r5, [sp, #88]	@ 0x58
90018b34:	6870      	ldr	r0, [r6, #4]
90018b36:	9101      	str	r1, [sp, #4]
90018b38:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
90018b3c:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	@ 0x44
90018b40:	fb00 2404 	mla	r4, r0, r4, r2
90018b44:	6832      	ldr	r2, [r6, #0]
90018b46:	eb02 0444 	add.w	r4, r2, r4, lsl #1
90018b4a:	682a      	ldr	r2, [r5, #0]
90018b4c:	9202      	str	r2, [sp, #8]
90018b4e:	9a01      	ldr	r2, [sp, #4]
90018b50:	2a00      	cmp	r2, #0
90018b52:	dc03      	bgt.n	90018b5c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
90018b54:	f1bb 0f00 	cmp.w	fp, #0
90018b58:	f340 809a 	ble.w	90018c90 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
90018b5c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
90018b5e:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
90018b62:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
90018b66:	9a10      	ldr	r2, [sp, #64]	@ 0x40
90018b68:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
90018b6c:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
90018b70:	2b00      	cmp	r3, #0
90018b72:	dd0c      	ble.n	90018b8e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
90018b74:	1406      	asrs	r6, r0, #16
90018b76:	d405      	bmi.n	90018b84 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
90018b78:	454e      	cmp	r6, r9
90018b7a:	da03      	bge.n	90018b84 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
90018b7c:	1416      	asrs	r6, r2, #16
90018b7e:	d401      	bmi.n	90018b84 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
90018b80:	4546      	cmp	r6, r8
90018b82:	db05      	blt.n	90018b90 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
90018b84:	4470      	add	r0, lr
90018b86:	4462      	add	r2, ip
90018b88:	3b01      	subs	r3, #1
90018b8a:	3402      	adds	r4, #2
90018b8c:	e7f0      	b.n	90018b70 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
90018b8e:	d00f      	beq.n	90018bb0 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
90018b90:	1e5e      	subs	r6, r3, #1
90018b92:	fb0e 0706 	mla	r7, lr, r6, r0
90018b96:	143f      	asrs	r7, r7, #16
90018b98:	d541      	bpl.n	90018c1e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
90018b9a:	eb04 0643 	add.w	r6, r4, r3, lsl #1
90018b9e:	4698      	mov	r8, r3
90018ba0:	9603      	str	r6, [sp, #12]
90018ba2:	f1b8 0f00 	cmp.w	r8, #0
90018ba6:	dc56      	bgt.n	90018c56 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
90018ba8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
90018bac:	eb04 0443 	add.w	r4, r4, r3, lsl #1
90018bb0:	9b01      	ldr	r3, [sp, #4]
90018bb2:	2b00      	cmp	r3, #0
90018bb4:	dd6c      	ble.n	90018c90 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
90018bb6:	ee30 0a04 	vadd.f32	s0, s0, s8
90018bba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
90018bbc:	ee70 0aa4 	vadd.f32	s1, s1, s9
90018bc0:	eeb0 6a62 	vmov.f32	s12, s5
90018bc4:	eec6 7a80 	vdiv.f32	s15, s13, s0
90018bc8:	ee31 1a05 	vadd.f32	s2, s2, s10
90018bcc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
90018bd0:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
90018bd4:	eeb0 6a43 	vmov.f32	s12, s6
90018bd8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
90018bdc:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
90018be0:	ee20 7aa7 	vmul.f32	s14, s1, s15
90018be4:	ee61 7a27 	vmul.f32	s15, s2, s15
90018be8:	ee77 2a62 	vsub.f32	s5, s14, s5
90018bec:	ee37 3ac3 	vsub.f32	s6, s15, s6
90018bf0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90018bf4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
90018bf8:	ee12 2a90 	vmov	r2, s5
90018bfc:	eef0 2a47 	vmov.f32	s5, s14
90018c00:	fb92 fef3 	sdiv	lr, r2, r3
90018c04:	ee13 2a10 	vmov	r2, s6
90018c08:	eeb0 3a67 	vmov.f32	s6, s15
90018c0c:	fb92 fcf3 	sdiv	ip, r2, r3
90018c10:	9b01      	ldr	r3, [sp, #4]
90018c12:	3b01      	subs	r3, #1
90018c14:	9301      	str	r3, [sp, #4]
90018c16:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
90018c18:	bf08      	it	eq
90018c1a:	465b      	moveq	r3, fp
90018c1c:	e797      	b.n	90018b4e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
90018c1e:	454f      	cmp	r7, r9
90018c20:	dabb      	bge.n	90018b9a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
90018c22:	fb0c 2606 	mla	r6, ip, r6, r2
90018c26:	1436      	asrs	r6, r6, #16
90018c28:	d4b7      	bmi.n	90018b9a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
90018c2a:	4546      	cmp	r6, r8
90018c2c:	dab5      	bge.n	90018b9a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
90018c2e:	461e      	mov	r6, r3
90018c30:	46a0      	mov	r8, r4
90018c32:	2e00      	cmp	r6, #0
90018c34:	ddb8      	ble.n	90018ba8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
90018c36:	1417      	asrs	r7, r2, #16
90018c38:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
90018c3c:	ea4f 4920 	mov.w	r9, r0, asr #16
90018c40:	9902      	ldr	r1, [sp, #8]
90018c42:	4470      	add	r0, lr
90018c44:	4462      	add	r2, ip
90018c46:	fb0a 9707 	mla	r7, sl, r7, r9
90018c4a:	3e01      	subs	r6, #1
90018c4c:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
90018c50:	f828 7b02 	strh.w	r7, [r8], #2
90018c54:	e7ed      	b.n	90018c32 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
90018c56:	ea5f 4920 	movs.w	r9, r0, asr #16
90018c5a:	d414      	bmi.n	90018c86 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
90018c5c:	68ae      	ldr	r6, [r5, #8]
90018c5e:	454e      	cmp	r6, r9
90018c60:	dd11      	ble.n	90018c86 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
90018c62:	ea5f 4a22 	movs.w	sl, r2, asr #16
90018c66:	d40e      	bmi.n	90018c86 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
90018c68:	68ef      	ldr	r7, [r5, #12]
90018c6a:	4557      	cmp	r7, sl
90018c6c:	dd0b      	ble.n	90018c86 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
90018c6e:	b236      	sxth	r6, r6
90018c70:	f06f 0101 	mvn.w	r1, #1
90018c74:	9f02      	ldr	r7, [sp, #8]
90018c76:	fb0a 9606 	mla	r6, sl, r6, r9
90018c7a:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
90018c7e:	fb01 f608 	mul.w	r6, r1, r8
90018c82:	9903      	ldr	r1, [sp, #12]
90018c84:	538f      	strh	r7, [r1, r6]
90018c86:	4470      	add	r0, lr
90018c88:	4462      	add	r2, ip
90018c8a:	f108 38ff 	add.w	r8, r8, #4294967295
90018c8e:	e788      	b.n	90018ba2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
90018c90:	b005      	add	sp, #20
90018c92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

90018c96 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90018c96:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90018c9a:	b087      	sub	sp, #28
90018c9c:	468b      	mov	fp, r1
90018c9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
90018ca2:	9815      	ldr	r0, [sp, #84]	@ 0x54
90018ca4:	9203      	str	r2, [sp, #12]
90018ca6:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
90018caa:	6841      	ldr	r1, [r0, #4]
90018cac:	9204      	str	r2, [sp, #16]
90018cae:	f8dd 9060 	ldr.w	r9, [sp, #96]	@ 0x60
90018cb2:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	@ 0x58
90018cb6:	fb01 2505 	mla	r5, r1, r5, r2
90018cba:	6802      	ldr	r2, [r0, #0]
90018cbc:	eb02 0545 	add.w	r5, r2, r5, lsl #1
90018cc0:	f8d9 2000 	ldr.w	r2, [r9]
90018cc4:	9201      	str	r2, [sp, #4]
90018cc6:	f1bb 0f00 	cmp.w	fp, #0
90018cca:	dc03      	bgt.n	90018cd4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
90018ccc:	9a03      	ldr	r2, [sp, #12]
90018cce:	2a00      	cmp	r2, #0
90018cd0:	f340 8158 	ble.w	90018f84 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
90018cd4:	9a11      	ldr	r2, [sp, #68]	@ 0x44
90018cd6:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
90018cda:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
90018cde:	9a12      	ldr	r2, [sp, #72]	@ 0x48
90018ce0:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
90018ce4:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
90018ce8:	2b00      	cmp	r3, #0
90018cea:	dd0e      	ble.n	90018d0a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
90018cec:	1402      	asrs	r2, r0, #16
90018cee:	d405      	bmi.n	90018cfc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
90018cf0:	42ba      	cmp	r2, r7
90018cf2:	da03      	bge.n	90018cfc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
90018cf4:	140a      	asrs	r2, r1, #16
90018cf6:	d401      	bmi.n	90018cfc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
90018cf8:	42b2      	cmp	r2, r6
90018cfa:	db07      	blt.n	90018d0c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
90018cfc:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
90018cfe:	3b01      	subs	r3, #1
90018d00:	3502      	adds	r5, #2
90018d02:	4410      	add	r0, r2
90018d04:	9a14      	ldr	r2, [sp, #80]	@ 0x50
90018d06:	4411      	add	r1, r2
90018d08:	e7ee      	b.n	90018ce8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
90018d0a:	d017      	beq.n	90018d3c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
90018d0c:	1e5a      	subs	r2, r3, #1
90018d0e:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
90018d10:	fb04 0402 	mla	r4, r4, r2, r0
90018d14:	1424      	asrs	r4, r4, #16
90018d16:	d409      	bmi.n	90018d2c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
90018d18:	42bc      	cmp	r4, r7
90018d1a:	da07      	bge.n	90018d2c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
90018d1c:	9c14      	ldr	r4, [sp, #80]	@ 0x50
90018d1e:	fb04 1202 	mla	r2, r4, r2, r1
90018d22:	1412      	asrs	r2, r2, #16
90018d24:	d402      	bmi.n	90018d2c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
90018d26:	42b2      	cmp	r2, r6
90018d28:	f2c0 80bf 	blt.w	90018eaa <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
90018d2c:	2700      	movs	r7, #0
90018d2e:	19da      	adds	r2, r3, r7
90018d30:	2a00      	cmp	r2, #0
90018d32:	dc3e      	bgt.n	90018db2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
90018d34:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
90018d38:	eb05 0543 	add.w	r5, r5, r3, lsl #1
90018d3c:	f1bb 0f00 	cmp.w	fp, #0
90018d40:	f340 8120 	ble.w	90018f84 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
90018d44:	ee30 0a04 	vadd.f32	s0, s0, s8
90018d48:	9b10      	ldr	r3, [sp, #64]	@ 0x40
90018d4a:	ee70 0aa4 	vadd.f32	s1, s1, s9
90018d4e:	f1bb 0b01 	subs.w	fp, fp, #1
90018d52:	eeb0 6a62 	vmov.f32	s12, s5
90018d56:	eec6 7a80 	vdiv.f32	s15, s13, s0
90018d5a:	ee31 1a05 	vadd.f32	s2, s2, s10
90018d5e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
90018d62:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
90018d66:	eeb0 6a43 	vmov.f32	s12, s6
90018d6a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
90018d6e:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
90018d72:	ee20 7aa7 	vmul.f32	s14, s1, s15
90018d76:	ee61 7a27 	vmul.f32	s15, s2, s15
90018d7a:	ee77 2a62 	vsub.f32	s5, s14, s5
90018d7e:	ee37 3ac3 	vsub.f32	s6, s15, s6
90018d82:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90018d86:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
90018d8a:	ee12 2a90 	vmov	r2, s5
90018d8e:	eef0 2a47 	vmov.f32	s5, s14
90018d92:	fb92 f3f3 	sdiv	r3, r2, r3
90018d96:	ee13 2a10 	vmov	r2, s6
90018d9a:	9313      	str	r3, [sp, #76]	@ 0x4c
90018d9c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
90018d9e:	eeb0 3a67 	vmov.f32	s6, s15
90018da2:	fb92 f3f3 	sdiv	r3, r2, r3
90018da6:	9a03      	ldr	r2, [sp, #12]
90018da8:	9314      	str	r3, [sp, #80]	@ 0x50
90018daa:	9b10      	ldr	r3, [sp, #64]	@ 0x40
90018dac:	bf08      	it	eq
90018dae:	4613      	moveq	r3, r2
90018db0:	e789      	b.n	90018cc6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
90018db2:	1406      	asrs	r6, r0, #16
90018db4:	d42d      	bmi.n	90018e12 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
90018db6:	f8d9 4008 	ldr.w	r4, [r9, #8]
90018dba:	42b4      	cmp	r4, r6
90018dbc:	dd29      	ble.n	90018e12 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
90018dbe:	ea5f 4c21 	movs.w	ip, r1, asr #16
90018dc2:	d426      	bmi.n	90018e12 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
90018dc4:	f8d9 200c 	ldr.w	r2, [r9, #12]
90018dc8:	4562      	cmp	r2, ip
90018dca:	dd22      	ble.n	90018e12 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
90018dcc:	b224      	sxth	r4, r4
90018dce:	9a01      	ldr	r2, [sp, #4]
90018dd0:	fb0c 6404 	mla	r4, ip, r4, r6
90018dd4:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
90018dd8:	0e22      	lsrs	r2, r4, #24
90018dda:	d01a      	beq.n	90018e12 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
90018ddc:	9e04      	ldr	r6, [sp, #16]
90018dde:	4372      	muls	r2, r6
90018de0:	1c56      	adds	r6, r2, #1
90018de2:	eb06 2222 	add.w	r2, r6, r2, asr #8
90018de6:	0a26      	lsrs	r6, r4, #8
90018de8:	1212      	asrs	r2, r2, #8
90018dea:	9605      	str	r6, [sp, #20]
90018dec:	2aff      	cmp	r2, #255	@ 0xff
90018dee:	d116      	bne.n	90018e1e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
90018df0:	f06f 0201 	mvn.w	r2, #1
90018df4:	f426 66ff 	bic.w	r6, r6, #2040	@ 0x7f8
90018df8:	fb02 fc07 	mul.w	ip, r2, r7
90018dfc:	0962      	lsrs	r2, r4, #5
90018dfe:	f026 0607 	bic.w	r6, r6, #7
90018e02:	f3c4 04c4 	ubfx	r4, r4, #3, #5
90018e06:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
90018e0a:	4316      	orrs	r6, r2
90018e0c:	4326      	orrs	r6, r4
90018e0e:	f825 600c 	strh.w	r6, [r5, ip]
90018e12:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
90018e14:	3f01      	subs	r7, #1
90018e16:	4410      	add	r0, r2
90018e18:	9a14      	ldr	r2, [sp, #80]	@ 0x50
90018e1a:	4411      	add	r1, r2
90018e1c:	e787      	b.n	90018d2e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
90018e1e:	f06f 0601 	mvn.w	r6, #1
90018e22:	fa1f fa82 	uxth.w	sl, r2
90018e26:	f3c4 4c07 	ubfx	ip, r4, #16, #8
90018e2a:	43d2      	mvns	r2, r2
90018e2c:	437e      	muls	r6, r7
90018e2e:	b2e4      	uxtb	r4, r4
90018e30:	fb1c fc0a 	smulbb	ip, ip, sl
90018e34:	b2d2      	uxtb	r2, r2
90018e36:	f835 8006 	ldrh.w	r8, [r5, r6]
90018e3a:	fb14 f40a 	smulbb	r4, r4, sl
90018e3e:	9602      	str	r6, [sp, #8]
90018e40:	ea4f 2e28 	mov.w	lr, r8, asr #8
90018e44:	f89d 6014 	ldrb.w	r6, [sp, #20]
90018e48:	fb16 f60a 	smulbb	r6, r6, sl
90018e4c:	f00e 0ef8 	and.w	lr, lr, #248	@ 0xf8
90018e50:	fb0e ce02 	mla	lr, lr, r2, ip
90018e54:	ea4f 0ce8 	mov.w	ip, r8, asr #3
90018e58:	ea4f 08c8 	mov.w	r8, r8, lsl #3
90018e5c:	fa1f fe8e 	uxth.w	lr, lr
90018e60:	f00c 0cfc 	and.w	ip, ip, #252	@ 0xfc
90018e64:	fa5f f888 	uxtb.w	r8, r8
90018e68:	fb0c 6c02 	mla	ip, ip, r2, r6
90018e6c:	fb08 4402 	mla	r4, r8, r2, r4
90018e70:	f10e 0201 	add.w	r2, lr, #1
90018e74:	fa1f fc8c 	uxth.w	ip, ip
90018e78:	b2a4      	uxth	r4, r4
90018e7a:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
90018e7e:	9a02      	ldr	r2, [sp, #8]
90018e80:	1c66      	adds	r6, r4, #1
90018e82:	f40e 4e78 	and.w	lr, lr, #63488	@ 0xf800
90018e86:	eb06 2614 	add.w	r6, r6, r4, lsr #8
90018e8a:	f3c6 26c4 	ubfx	r6, r6, #11, #5
90018e8e:	ea46 0e0e 	orr.w	lr, r6, lr
90018e92:	f10c 0601 	add.w	r6, ip, #1
90018e96:	eb06 261c 	add.w	r6, r6, ip, lsr #8
90018e9a:	0976      	lsrs	r6, r6, #5
90018e9c:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
90018ea0:	ea4e 0e06 	orr.w	lr, lr, r6
90018ea4:	f825 e002 	strh.w	lr, [r5, r2]
90018ea8:	e7b3      	b.n	90018e12 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
90018eaa:	f04f 0800 	mov.w	r8, #0
90018eae:	eba3 0208 	sub.w	r2, r3, r8
90018eb2:	2a00      	cmp	r2, #0
90018eb4:	f77f af3e 	ble.w	90018d34 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
90018eb8:	1404      	asrs	r4, r0, #16
90018eba:	f9b9 6008 	ldrsh.w	r6, [r9, #8]
90018ebe:	140a      	asrs	r2, r1, #16
90018ec0:	fb06 4202 	mla	r2, r6, r2, r4
90018ec4:	9c01      	ldr	r4, [sp, #4]
90018ec6:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
90018eca:	0e22      	lsrs	r2, r4, #24
90018ecc:	d015      	beq.n	90018efa <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
90018ece:	9e04      	ldr	r6, [sp, #16]
90018ed0:	4372      	muls	r2, r6
90018ed2:	1c56      	adds	r6, r2, #1
90018ed4:	eb06 2222 	add.w	r2, r6, r2, asr #8
90018ed8:	0a26      	lsrs	r6, r4, #8
90018eda:	1212      	asrs	r2, r2, #8
90018edc:	2aff      	cmp	r2, #255	@ 0xff
90018ede:	d113      	bne.n	90018f08 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
90018ee0:	0962      	lsrs	r2, r4, #5
90018ee2:	f426 66ff 	bic.w	r6, r6, #2040	@ 0x7f8
90018ee6:	f3c4 04c4 	ubfx	r4, r4, #3, #5
90018eea:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
90018eee:	f026 0607 	bic.w	r6, r6, #7
90018ef2:	4316      	orrs	r6, r2
90018ef4:	4326      	orrs	r6, r4
90018ef6:	f825 6018 	strh.w	r6, [r5, r8, lsl #1]
90018efa:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
90018efc:	f108 0801 	add.w	r8, r8, #1
90018f00:	4410      	add	r0, r2
90018f02:	9a14      	ldr	r2, [sp, #80]	@ 0x50
90018f04:	4411      	add	r1, r2
90018f06:	e7d2      	b.n	90018eae <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
90018f08:	f835 e018 	ldrh.w	lr, [r5, r8, lsl #1]
90018f0c:	fa1f fa82 	uxth.w	sl, r2
90018f10:	f3c4 4707 	ubfx	r7, r4, #16, #8
90018f14:	43d2      	mvns	r2, r2
90018f16:	ea4f 2c2e 	mov.w	ip, lr, asr #8
90018f1a:	fb17 f70a 	smulbb	r7, r7, sl
90018f1e:	b2d2      	uxtb	r2, r2
90018f20:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
90018f24:	b2e4      	uxtb	r4, r4
90018f26:	b2f6      	uxtb	r6, r6
90018f28:	fb0c 7c02 	mla	ip, ip, r2, r7
90018f2c:	ea4f 07ee 	mov.w	r7, lr, asr #3
90018f30:	fb14 f40a 	smulbb	r4, r4, sl
90018f34:	ea4f 0ece 	mov.w	lr, lr, lsl #3
90018f38:	fa1f fc8c 	uxth.w	ip, ip
90018f3c:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
90018f40:	fb16 f60a 	smulbb	r6, r6, sl
90018f44:	fa5f fe8e 	uxtb.w	lr, lr
90018f48:	fb0e 4402 	mla	r4, lr, r2, r4
90018f4c:	fb07 6702 	mla	r7, r7, r2, r6
90018f50:	f10c 0201 	add.w	r2, ip, #1
90018f54:	b2a4      	uxth	r4, r4
90018f56:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
90018f5a:	1c66      	adds	r6, r4, #1
90018f5c:	b2bf      	uxth	r7, r7
90018f5e:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
90018f62:	eb06 2614 	add.w	r6, r6, r4, lsr #8
90018f66:	f3c6 26c4 	ubfx	r6, r6, #11, #5
90018f6a:	ea46 0c0c 	orr.w	ip, r6, ip
90018f6e:	1c7e      	adds	r6, r7, #1
90018f70:	eb06 2617 	add.w	r6, r6, r7, lsr #8
90018f74:	0976      	lsrs	r6, r6, #5
90018f76:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
90018f7a:	ea4c 0c06 	orr.w	ip, ip, r6
90018f7e:	f825 c018 	strh.w	ip, [r5, r8, lsl #1]
90018f82:	e7ba      	b.n	90018efa <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
90018f84:	b007      	add	sp, #28
90018f86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

90018f8c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90018f8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90018f90:	b085      	sub	sp, #20
90018f92:	468b      	mov	fp, r1
90018f94:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
90018f98:	9813      	ldr	r0, [sp, #76]	@ 0x4c
90018f9a:	9203      	str	r2, [sp, #12]
90018f9c:	6841      	ldr	r1, [r0, #4]
90018f9e:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
90018fa2:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
90018fa6:	fb01 2404 	mla	r4, r1, r4, r2
90018faa:	6802      	ldr	r2, [r0, #0]
90018fac:	eb02 0444 	add.w	r4, r2, r4, lsl #1
90018fb0:	f8d8 2000 	ldr.w	r2, [r8]
90018fb4:	9201      	str	r2, [sp, #4]
90018fb6:	f1bb 0f00 	cmp.w	fp, #0
90018fba:	dc03      	bgt.n	90018fc4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
90018fbc:	9a03      	ldr	r2, [sp, #12]
90018fbe:	2a00      	cmp	r2, #0
90018fc0:	f340 814f 	ble.w	90019262 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
90018fc4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
90018fc6:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
90018fca:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
90018fce:	9a10      	ldr	r2, [sp, #64]	@ 0x40
90018fd0:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
90018fd4:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
90018fd8:	2b00      	cmp	r3, #0
90018fda:	dd0e      	ble.n	90018ffa <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
90018fdc:	1408      	asrs	r0, r1, #16
90018fde:	d405      	bmi.n	90018fec <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
90018fe0:	42b8      	cmp	r0, r7
90018fe2:	da03      	bge.n	90018fec <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
90018fe4:	1410      	asrs	r0, r2, #16
90018fe6:	d401      	bmi.n	90018fec <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
90018fe8:	42b0      	cmp	r0, r6
90018fea:	db07      	blt.n	90018ffc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
90018fec:	9811      	ldr	r0, [sp, #68]	@ 0x44
90018fee:	3b01      	subs	r3, #1
90018ff0:	3402      	adds	r4, #2
90018ff2:	4401      	add	r1, r0
90018ff4:	9812      	ldr	r0, [sp, #72]	@ 0x48
90018ff6:	4402      	add	r2, r0
90018ff8:	e7ee      	b.n	90018fd8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
90018ffa:	d017      	beq.n	9001902c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
90018ffc:	1e58      	subs	r0, r3, #1
90018ffe:	9d11      	ldr	r5, [sp, #68]	@ 0x44
90019000:	fb05 1500 	mla	r5, r5, r0, r1
90019004:	142d      	asrs	r5, r5, #16
90019006:	d409      	bmi.n	9001901c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
90019008:	42bd      	cmp	r5, r7
9001900a:	da07      	bge.n	9001901c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
9001900c:	9d12      	ldr	r5, [sp, #72]	@ 0x48
9001900e:	fb05 2000 	mla	r0, r5, r0, r2
90019012:	1400      	asrs	r0, r0, #16
90019014:	d402      	bmi.n	9001901c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
90019016:	42b0      	cmp	r0, r6
90019018:	f2c0 80ba 	blt.w	90019190 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
9001901c:	2600      	movs	r6, #0
9001901e:	1998      	adds	r0, r3, r6
90019020:	2800      	cmp	r0, #0
90019022:	dc3e      	bgt.n	900190a2 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
90019024:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
90019028:	eb04 0443 	add.w	r4, r4, r3, lsl #1
9001902c:	f1bb 0f00 	cmp.w	fp, #0
90019030:	f340 8117 	ble.w	90019262 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
90019034:	ee30 0a04 	vadd.f32	s0, s0, s8
90019038:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
9001903a:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001903e:	f1bb 0b01 	subs.w	fp, fp, #1
90019042:	eeb0 6a62 	vmov.f32	s12, s5
90019046:	eec6 7a80 	vdiv.f32	s15, s13, s0
9001904a:	ee31 1a05 	vadd.f32	s2, s2, s10
9001904e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
90019052:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
90019056:	eeb0 6a43 	vmov.f32	s12, s6
9001905a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001905e:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
90019062:	ee20 7aa7 	vmul.f32	s14, s1, s15
90019066:	ee61 7a27 	vmul.f32	s15, s2, s15
9001906a:	ee77 2a62 	vsub.f32	s5, s14, s5
9001906e:	ee37 3ac3 	vsub.f32	s6, s15, s6
90019072:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90019076:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001907a:	ee12 2a90 	vmov	r2, s5
9001907e:	eef0 2a47 	vmov.f32	s5, s14
90019082:	fb92 f3f3 	sdiv	r3, r2, r3
90019086:	ee13 2a10 	vmov	r2, s6
9001908a:	9311      	str	r3, [sp, #68]	@ 0x44
9001908c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
9001908e:	eeb0 3a67 	vmov.f32	s6, s15
90019092:	fb92 f3f3 	sdiv	r3, r2, r3
90019096:	9a03      	ldr	r2, [sp, #12]
90019098:	9312      	str	r3, [sp, #72]	@ 0x48
9001909a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
9001909c:	bf08      	it	eq
9001909e:	4613      	moveq	r3, r2
900190a0:	e789      	b.n	90018fb6 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
900190a2:	140f      	asrs	r7, r1, #16
900190a4:	d424      	bmi.n	900190f0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
900190a6:	f8d8 5008 	ldr.w	r5, [r8, #8]
900190aa:	42bd      	cmp	r5, r7
900190ac:	dd20      	ble.n	900190f0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
900190ae:	ea5f 4c22 	movs.w	ip, r2, asr #16
900190b2:	d41d      	bmi.n	900190f0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
900190b4:	f8d8 000c 	ldr.w	r0, [r8, #12]
900190b8:	4560      	cmp	r0, ip
900190ba:	dd19      	ble.n	900190f0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
900190bc:	b22d      	sxth	r5, r5
900190be:	9801      	ldr	r0, [sp, #4]
900190c0:	fb0c 7505 	mla	r5, ip, r5, r7
900190c4:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
900190c8:	0e07      	lsrs	r7, r0, #24
900190ca:	2fff      	cmp	r7, #255	@ 0xff
900190cc:	d116      	bne.n	900190fc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
900190ce:	f06f 0501 	mvn.w	r5, #1
900190d2:	fb05 f706 	mul.w	r7, r5, r6
900190d6:	f2a5 75fe 	subw	r5, r5, #2046	@ 0x7fe
900190da:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
900190de:	0945      	lsrs	r5, r0, #5
900190e0:	f3c0 00c4 	ubfx	r0, r0, #3, #5
900190e4:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
900190e8:	ea4c 0505 	orr.w	r5, ip, r5
900190ec:	4305      	orrs	r5, r0
900190ee:	53e5      	strh	r5, [r4, r7]
900190f0:	9811      	ldr	r0, [sp, #68]	@ 0x44
900190f2:	3e01      	subs	r6, #1
900190f4:	4401      	add	r1, r0
900190f6:	9812      	ldr	r0, [sp, #72]	@ 0x48
900190f8:	4402      	add	r2, r0
900190fa:	e790      	b.n	9001901e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
900190fc:	b2fd      	uxtb	r5, r7
900190fe:	2f00      	cmp	r7, #0
90019100:	d0f6      	beq.n	900190f0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
90019102:	f06f 0701 	mvn.w	r7, #1
90019106:	fa1f f985 	uxth.w	r9, r5
9001910a:	43ed      	mvns	r5, r5
9001910c:	f3c0 2a07 	ubfx	sl, r0, #8, #8
90019110:	4377      	muls	r7, r6
90019112:	fb1a fa09 	smulbb	sl, sl, r9
90019116:	b2ed      	uxtb	r5, r5
90019118:	f834 e007 	ldrh.w	lr, [r4, r7]
9001911c:	9702      	str	r7, [sp, #8]
9001911e:	f3c0 4707 	ubfx	r7, r0, #16, #8
90019122:	ea4f 2c2e 	mov.w	ip, lr, asr #8
90019126:	fb17 f709 	smulbb	r7, r7, r9
9001912a:	b2c0      	uxtb	r0, r0
9001912c:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
90019130:	fb10 f009 	smulbb	r0, r0, r9
90019134:	fb0c 7c05 	mla	ip, ip, r5, r7
90019138:	ea4f 07ee 	mov.w	r7, lr, asr #3
9001913c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
90019140:	fa1f fc8c 	uxth.w	ip, ip
90019144:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
90019148:	fa5f fe8e 	uxtb.w	lr, lr
9001914c:	fb07 a705 	mla	r7, r7, r5, sl
90019150:	fb0e 0005 	mla	r0, lr, r5, r0
90019154:	f10c 0501 	add.w	r5, ip, #1
90019158:	b2bf      	uxth	r7, r7
9001915a:	b280      	uxth	r0, r0
9001915c:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
90019160:	f100 0a01 	add.w	sl, r0, #1
90019164:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
90019168:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
9001916c:	9802      	ldr	r0, [sp, #8]
9001916e:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
90019172:	ea4a 0c0c 	orr.w	ip, sl, ip
90019176:	f107 0a01 	add.w	sl, r7, #1
9001917a:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
9001917e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
90019182:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
90019186:	ea4c 0c0a 	orr.w	ip, ip, sl
9001918a:	f824 c000 	strh.w	ip, [r4, r0]
9001918e:	e7af      	b.n	900190f0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
90019190:	f04f 0e00 	mov.w	lr, #0
90019194:	eba3 000e 	sub.w	r0, r3, lr
90019198:	2800      	cmp	r0, #0
9001919a:	f77f af43 	ble.w	90019024 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
9001919e:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
900191a2:	140d      	asrs	r5, r1, #16
900191a4:	1410      	asrs	r0, r2, #16
900191a6:	fb06 5000 	mla	r0, r6, r0, r5
900191aa:	9d01      	ldr	r5, [sp, #4]
900191ac:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
900191b0:	0e2e      	lsrs	r6, r5, #24
900191b2:	2eff      	cmp	r6, #255	@ 0xff
900191b4:	d112      	bne.n	900191dc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
900191b6:	482c      	ldr	r0, [pc, #176]	@ (90019268 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>)
900191b8:	ea00 2615 	and.w	r6, r0, r5, lsr #8
900191bc:	0968      	lsrs	r0, r5, #5
900191be:	f3c5 05c4 	ubfx	r5, r5, #3, #5
900191c2:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
900191c6:	4330      	orrs	r0, r6
900191c8:	4328      	orrs	r0, r5
900191ca:	f824 001e 	strh.w	r0, [r4, lr, lsl #1]
900191ce:	9811      	ldr	r0, [sp, #68]	@ 0x44
900191d0:	f10e 0e01 	add.w	lr, lr, #1
900191d4:	4401      	add	r1, r0
900191d6:	9812      	ldr	r0, [sp, #72]	@ 0x48
900191d8:	4402      	add	r2, r0
900191da:	e7db      	b.n	90019194 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
900191dc:	b2f0      	uxtb	r0, r6
900191de:	2e00      	cmp	r6, #0
900191e0:	d0f5      	beq.n	900191ce <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
900191e2:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
900191e6:	fa1f f980 	uxth.w	r9, r0
900191ea:	f3c5 4607 	ubfx	r6, r5, #16, #8
900191ee:	43c0      	mvns	r0, r0
900191f0:	ea4f 272c 	mov.w	r7, ip, asr #8
900191f4:	f3c5 2a07 	ubfx	sl, r5, #8, #8
900191f8:	fb16 f609 	smulbb	r6, r6, r9
900191fc:	b2c0      	uxtb	r0, r0
900191fe:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
90019202:	b2ed      	uxtb	r5, r5
90019204:	fb1a fa09 	smulbb	sl, sl, r9
90019208:	fb07 6700 	mla	r7, r7, r0, r6
9001920c:	ea4f 06ec 	mov.w	r6, ip, asr #3
90019210:	fb15 f509 	smulbb	r5, r5, r9
90019214:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
90019218:	b2bf      	uxth	r7, r7
9001921a:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
9001921e:	fa5f fc8c 	uxtb.w	ip, ip
90019222:	fb06 a600 	mla	r6, r6, r0, sl
90019226:	fb0c 5500 	mla	r5, ip, r0, r5
9001922a:	1c78      	adds	r0, r7, #1
9001922c:	b2b6      	uxth	r6, r6
9001922e:	b2ad      	uxth	r5, r5
90019230:	eb00 2717 	add.w	r7, r0, r7, lsr #8
90019234:	f105 0a01 	add.w	sl, r5, #1
90019238:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
9001923c:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
90019240:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
90019244:	ea4a 0707 	orr.w	r7, sl, r7
90019248:	f106 0a01 	add.w	sl, r6, #1
9001924c:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
90019250:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
90019254:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
90019258:	ea47 070a 	orr.w	r7, r7, sl
9001925c:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
90019260:	e7b5      	b.n	900191ce <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
90019262:	b005      	add	sp, #20
90019264:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90019268:	fffff800 	.word	0xfffff800

9001926c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001926c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90019270:	b087      	sub	sp, #28
90019272:	468b      	mov	fp, r1
90019274:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
90019278:	9815      	ldr	r0, [sp, #84]	@ 0x54
9001927a:	9203      	str	r2, [sp, #12]
9001927c:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
90019280:	6841      	ldr	r1, [r0, #4]
90019282:	9204      	str	r2, [sp, #16]
90019284:	f8dd 9060 	ldr.w	r9, [sp, #96]	@ 0x60
90019288:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	@ 0x58
9001928c:	fb01 2404 	mla	r4, r1, r4, r2
90019290:	6802      	ldr	r2, [r0, #0]
90019292:	eb02 0444 	add.w	r4, r2, r4, lsl #1
90019296:	f8d9 2008 	ldr.w	r2, [r9, #8]
9001929a:	3201      	adds	r2, #1
9001929c:	f022 0201 	bic.w	r2, r2, #1
900192a0:	9200      	str	r2, [sp, #0]
900192a2:	f8d9 2000 	ldr.w	r2, [r9]
900192a6:	9201      	str	r2, [sp, #4]
900192a8:	f1bb 0f00 	cmp.w	fp, #0
900192ac:	dc03      	bgt.n	900192b6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
900192ae:	9a03      	ldr	r2, [sp, #12]
900192b0:	2a00      	cmp	r2, #0
900192b2:	f340 816a 	ble.w	9001958a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
900192b6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
900192b8:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
900192bc:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
900192c0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
900192c2:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
900192c6:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
900192ca:	2b00      	cmp	r3, #0
900192cc:	dd0e      	ble.n	900192ec <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
900192ce:	1402      	asrs	r2, r0, #16
900192d0:	d405      	bmi.n	900192de <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
900192d2:	42ba      	cmp	r2, r7
900192d4:	da03      	bge.n	900192de <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
900192d6:	140a      	asrs	r2, r1, #16
900192d8:	d401      	bmi.n	900192de <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
900192da:	42b2      	cmp	r2, r6
900192dc:	db07      	blt.n	900192ee <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
900192de:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
900192e0:	3b01      	subs	r3, #1
900192e2:	3402      	adds	r4, #2
900192e4:	4410      	add	r0, r2
900192e6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
900192e8:	4411      	add	r1, r2
900192ea:	e7ee      	b.n	900192ca <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
900192ec:	d017      	beq.n	9001931e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
900192ee:	1e5a      	subs	r2, r3, #1
900192f0:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
900192f2:	fb05 0502 	mla	r5, r5, r2, r0
900192f6:	142d      	asrs	r5, r5, #16
900192f8:	d409      	bmi.n	9001930e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
900192fa:	42bd      	cmp	r5, r7
900192fc:	da07      	bge.n	9001930e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
900192fe:	9d14      	ldr	r5, [sp, #80]	@ 0x50
90019300:	fb05 1202 	mla	r2, r5, r2, r1
90019304:	1412      	asrs	r2, r2, #16
90019306:	d402      	bmi.n	9001930e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
90019308:	42b2      	cmp	r2, r6
9001930a:	f2c0 80c8 	blt.w	9001949e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
9001930e:	2700      	movs	r7, #0
90019310:	19da      	adds	r2, r3, r7
90019312:	2a00      	cmp	r2, #0
90019314:	dc3e      	bgt.n	90019394 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
90019316:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
9001931a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
9001931e:	f1bb 0f00 	cmp.w	fp, #0
90019322:	f340 8132 	ble.w	9001958a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
90019326:	ee30 0a04 	vadd.f32	s0, s0, s8
9001932a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
9001932c:	ee70 0aa4 	vadd.f32	s1, s1, s9
90019330:	f1bb 0b01 	subs.w	fp, fp, #1
90019334:	eeb0 6a62 	vmov.f32	s12, s5
90019338:	eec6 7a80 	vdiv.f32	s15, s13, s0
9001933c:	ee31 1a05 	vadd.f32	s2, s2, s10
90019340:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
90019344:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
90019348:	eeb0 6a43 	vmov.f32	s12, s6
9001934c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
90019350:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
90019354:	ee20 7aa7 	vmul.f32	s14, s1, s15
90019358:	ee61 7a27 	vmul.f32	s15, s2, s15
9001935c:	ee77 2a62 	vsub.f32	s5, s14, s5
90019360:	ee37 3ac3 	vsub.f32	s6, s15, s6
90019364:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90019368:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001936c:	ee12 2a90 	vmov	r2, s5
90019370:	eef0 2a47 	vmov.f32	s5, s14
90019374:	fb92 f3f3 	sdiv	r3, r2, r3
90019378:	ee13 2a10 	vmov	r2, s6
9001937c:	9313      	str	r3, [sp, #76]	@ 0x4c
9001937e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
90019380:	eeb0 3a67 	vmov.f32	s6, s15
90019384:	fb92 f3f3 	sdiv	r3, r2, r3
90019388:	9a03      	ldr	r2, [sp, #12]
9001938a:	9314      	str	r3, [sp, #80]	@ 0x50
9001938c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
9001938e:	bf08      	it	eq
90019390:	4613      	moveq	r3, r2
90019392:	e789      	b.n	900192a8 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
90019394:	1405      	asrs	r5, r0, #16
90019396:	d436      	bmi.n	90019406 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
90019398:	f8d9 2008 	ldr.w	r2, [r9, #8]
9001939c:	42aa      	cmp	r2, r5
9001939e:	dd32      	ble.n	90019406 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
900193a0:	140e      	asrs	r6, r1, #16
900193a2:	d430      	bmi.n	90019406 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
900193a4:	f8d9 200c 	ldr.w	r2, [r9, #12]
900193a8:	42b2      	cmp	r2, r6
900193aa:	dd2c      	ble.n	90019406 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
900193ac:	9a00      	ldr	r2, [sp, #0]
900193ae:	fb06 5502 	mla	r5, r6, r2, r5
900193b2:	9e01      	ldr	r6, [sp, #4]
900193b4:	086a      	lsrs	r2, r5, #1
900193b6:	5cb2      	ldrb	r2, [r6, r2]
900193b8:	07ee      	lsls	r6, r5, #31
900193ba:	bf54      	ite	pl
900193bc:	f002 020f 	andpl.w	r2, r2, #15
900193c0:	1112      	asrmi	r2, r2, #4
900193c2:	eb02 1202 	add.w	r2, r2, r2, lsl #4
900193c6:	b2d2      	uxtb	r2, r2
900193c8:	b1ea      	cbz	r2, 90019406 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
900193ca:	9d04      	ldr	r5, [sp, #16]
900193cc:	436a      	muls	r2, r5
900193ce:	1c55      	adds	r5, r2, #1
900193d0:	eb05 2222 	add.w	r2, r5, r2, asr #8
900193d4:	4d6e      	ldr	r5, [pc, #440]	@ (90019590 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
900193d6:	1212      	asrs	r2, r2, #8
900193d8:	682d      	ldr	r5, [r5, #0]
900193da:	2aff      	cmp	r2, #255	@ 0xff
900193dc:	ea4f 2615 	mov.w	r6, r5, lsr #8
900193e0:	9605      	str	r6, [sp, #20]
900193e2:	d116      	bne.n	90019412 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
900193e4:	f06f 0201 	mvn.w	r2, #1
900193e8:	f426 66ff 	bic.w	r6, r6, #2040	@ 0x7f8
900193ec:	fb02 fc07 	mul.w	ip, r2, r7
900193f0:	096a      	lsrs	r2, r5, #5
900193f2:	f026 0607 	bic.w	r6, r6, #7
900193f6:	f3c5 05c4 	ubfx	r5, r5, #3, #5
900193fa:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
900193fe:	4316      	orrs	r6, r2
90019400:	432e      	orrs	r6, r5
90019402:	f824 600c 	strh.w	r6, [r4, ip]
90019406:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
90019408:	3f01      	subs	r7, #1
9001940a:	4410      	add	r0, r2
9001940c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
9001940e:	4411      	add	r1, r2
90019410:	e77e      	b.n	90019310 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
90019412:	f06f 0601 	mvn.w	r6, #1
90019416:	fa1f fa82 	uxth.w	sl, r2
9001941a:	f3c5 4c07 	ubfx	ip, r5, #16, #8
9001941e:	43d2      	mvns	r2, r2
90019420:	437e      	muls	r6, r7
90019422:	b2ed      	uxtb	r5, r5
90019424:	fb1c fc0a 	smulbb	ip, ip, sl
90019428:	b2d2      	uxtb	r2, r2
9001942a:	f834 8006 	ldrh.w	r8, [r4, r6]
9001942e:	fb15 f50a 	smulbb	r5, r5, sl
90019432:	9602      	str	r6, [sp, #8]
90019434:	ea4f 2e28 	mov.w	lr, r8, asr #8
90019438:	f89d 6014 	ldrb.w	r6, [sp, #20]
9001943c:	fb16 f60a 	smulbb	r6, r6, sl
90019440:	f00e 0ef8 	and.w	lr, lr, #248	@ 0xf8
90019444:	fb0e ce02 	mla	lr, lr, r2, ip
90019448:	ea4f 0ce8 	mov.w	ip, r8, asr #3
9001944c:	ea4f 08c8 	mov.w	r8, r8, lsl #3
90019450:	fa1f fe8e 	uxth.w	lr, lr
90019454:	f00c 0cfc 	and.w	ip, ip, #252	@ 0xfc
90019458:	fa5f f888 	uxtb.w	r8, r8
9001945c:	fb0c 6c02 	mla	ip, ip, r2, r6
90019460:	fb08 5502 	mla	r5, r8, r2, r5
90019464:	f10e 0201 	add.w	r2, lr, #1
90019468:	fa1f fc8c 	uxth.w	ip, ip
9001946c:	b2ad      	uxth	r5, r5
9001946e:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
90019472:	9a02      	ldr	r2, [sp, #8]
90019474:	1c6e      	adds	r6, r5, #1
90019476:	f40e 4e78 	and.w	lr, lr, #63488	@ 0xf800
9001947a:	eb06 2615 	add.w	r6, r6, r5, lsr #8
9001947e:	f3c6 26c4 	ubfx	r6, r6, #11, #5
90019482:	ea46 0e0e 	orr.w	lr, r6, lr
90019486:	f10c 0601 	add.w	r6, ip, #1
9001948a:	eb06 261c 	add.w	r6, r6, ip, lsr #8
9001948e:	0976      	lsrs	r6, r6, #5
90019490:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
90019494:	ea4e 0e06 	orr.w	lr, lr, r6
90019498:	f824 e002 	strh.w	lr, [r4, r2]
9001949c:	e7b3      	b.n	90019406 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
9001949e:	f04f 0800 	mov.w	r8, #0
900194a2:	eba3 0208 	sub.w	r2, r3, r8
900194a6:	2a00      	cmp	r2, #0
900194a8:	f77f af35 	ble.w	90019316 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
900194ac:	1402      	asrs	r2, r0, #16
900194ae:	9e00      	ldr	r6, [sp, #0]
900194b0:	140d      	asrs	r5, r1, #16
900194b2:	fb06 2505 	mla	r5, r6, r5, r2
900194b6:	9e01      	ldr	r6, [sp, #4]
900194b8:	086a      	lsrs	r2, r5, #1
900194ba:	07ed      	lsls	r5, r5, #31
900194bc:	5cb2      	ldrb	r2, [r6, r2]
900194be:	bf54      	ite	pl
900194c0:	f002 020f 	andpl.w	r2, r2, #15
900194c4:	1112      	asrmi	r2, r2, #4
900194c6:	eb02 1202 	add.w	r2, r2, r2, lsl #4
900194ca:	b2d2      	uxtb	r2, r2
900194cc:	b1c2      	cbz	r2, 90019500 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
900194ce:	9d04      	ldr	r5, [sp, #16]
900194d0:	436a      	muls	r2, r5
900194d2:	1c55      	adds	r5, r2, #1
900194d4:	eb05 2222 	add.w	r2, r5, r2, asr #8
900194d8:	4d2d      	ldr	r5, [pc, #180]	@ (90019590 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
900194da:	1212      	asrs	r2, r2, #8
900194dc:	682e      	ldr	r6, [r5, #0]
900194de:	2aff      	cmp	r2, #255	@ 0xff
900194e0:	ea4f 2516 	mov.w	r5, r6, lsr #8
900194e4:	d113      	bne.n	9001950e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
900194e6:	0972      	lsrs	r2, r6, #5
900194e8:	f425 65ff 	bic.w	r5, r5, #2040	@ 0x7f8
900194ec:	f3c6 06c4 	ubfx	r6, r6, #3, #5
900194f0:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
900194f4:	f025 0507 	bic.w	r5, r5, #7
900194f8:	4315      	orrs	r5, r2
900194fa:	4335      	orrs	r5, r6
900194fc:	f824 5018 	strh.w	r5, [r4, r8, lsl #1]
90019500:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
90019502:	f108 0801 	add.w	r8, r8, #1
90019506:	4410      	add	r0, r2
90019508:	9a14      	ldr	r2, [sp, #80]	@ 0x50
9001950a:	4411      	add	r1, r2
9001950c:	e7c9      	b.n	900194a2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
9001950e:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
90019512:	fa1f fa82 	uxth.w	sl, r2
90019516:	f3c6 4707 	ubfx	r7, r6, #16, #8
9001951a:	43d2      	mvns	r2, r2
9001951c:	ea4f 2c2e 	mov.w	ip, lr, asr #8
90019520:	fb17 f70a 	smulbb	r7, r7, sl
90019524:	b2d2      	uxtb	r2, r2
90019526:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
9001952a:	b2f6      	uxtb	r6, r6
9001952c:	b2ed      	uxtb	r5, r5
9001952e:	fb0c 7c02 	mla	ip, ip, r2, r7
90019532:	ea4f 07ee 	mov.w	r7, lr, asr #3
90019536:	fb16 f60a 	smulbb	r6, r6, sl
9001953a:	ea4f 0ece 	mov.w	lr, lr, lsl #3
9001953e:	fa1f fc8c 	uxth.w	ip, ip
90019542:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
90019546:	fb15 f50a 	smulbb	r5, r5, sl
9001954a:	fa5f fe8e 	uxtb.w	lr, lr
9001954e:	fb0e 6602 	mla	r6, lr, r2, r6
90019552:	fb07 5702 	mla	r7, r7, r2, r5
90019556:	f10c 0201 	add.w	r2, ip, #1
9001955a:	b2b6      	uxth	r6, r6
9001955c:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
90019560:	1c75      	adds	r5, r6, #1
90019562:	b2bf      	uxth	r7, r7
90019564:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
90019568:	eb05 2516 	add.w	r5, r5, r6, lsr #8
9001956c:	f3c5 25c4 	ubfx	r5, r5, #11, #5
90019570:	ea45 0c0c 	orr.w	ip, r5, ip
90019574:	1c7d      	adds	r5, r7, #1
90019576:	eb05 2517 	add.w	r5, r5, r7, lsr #8
9001957a:	096d      	lsrs	r5, r5, #5
9001957c:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
90019580:	ea4c 0c05 	orr.w	ip, ip, r5
90019584:	f824 c018 	strh.w	ip, [r4, r8, lsl #1]
90019588:	e7ba      	b.n	90019500 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
9001958a:	b007      	add	sp, #28
9001958c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90019590:	24026314 	.word	0x24026314

90019594 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90019594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90019598:	b087      	sub	sp, #28
9001959a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
9001959e:	f8df 8308 	ldr.w	r8, [pc, #776]	@ 900198a8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x314>
900195a2:	9815      	ldr	r0, [sp, #84]	@ 0x54
900195a4:	9101      	str	r1, [sp, #4]
900195a6:	9205      	str	r2, [sp, #20]
900195a8:	6841      	ldr	r1, [r0, #4]
900195aa:	f8dd b060 	ldr.w	fp, [sp, #96]	@ 0x60
900195ae:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	@ 0x58
900195b2:	fb01 2404 	mla	r4, r1, r4, r2
900195b6:	6802      	ldr	r2, [r0, #0]
900195b8:	eb02 0444 	add.w	r4, r2, r4, lsl #1
900195bc:	f8db 2008 	ldr.w	r2, [fp, #8]
900195c0:	3201      	adds	r2, #1
900195c2:	f022 0201 	bic.w	r2, r2, #1
900195c6:	9202      	str	r2, [sp, #8]
900195c8:	f8db 2000 	ldr.w	r2, [fp]
900195cc:	9203      	str	r2, [sp, #12]
900195ce:	9a01      	ldr	r2, [sp, #4]
900195d0:	2a00      	cmp	r2, #0
900195d2:	dc03      	bgt.n	900195dc <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
900195d4:	9a05      	ldr	r2, [sp, #20]
900195d6:	2a00      	cmp	r2, #0
900195d8:	f340 8162 	ble.w	900198a0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
900195dc:	9a11      	ldr	r2, [sp, #68]	@ 0x44
900195de:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
900195e2:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
900195e6:	9a12      	ldr	r2, [sp, #72]	@ 0x48
900195e8:	f9bb 600c 	ldrsh.w	r6, [fp, #12]
900195ec:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
900195f0:	2b00      	cmp	r3, #0
900195f2:	dd0e      	ble.n	90019612 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
900195f4:	1402      	asrs	r2, r0, #16
900195f6:	d405      	bmi.n	90019604 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
900195f8:	42ba      	cmp	r2, r7
900195fa:	da03      	bge.n	90019604 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
900195fc:	140a      	asrs	r2, r1, #16
900195fe:	d401      	bmi.n	90019604 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
90019600:	42b2      	cmp	r2, r6
90019602:	db07      	blt.n	90019614 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
90019604:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
90019606:	3b01      	subs	r3, #1
90019608:	3402      	adds	r4, #2
9001960a:	4410      	add	r0, r2
9001960c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
9001960e:	4411      	add	r1, r2
90019610:	e7ee      	b.n	900195f0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
90019612:	d017      	beq.n	90019644 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
90019614:	1e5a      	subs	r2, r3, #1
90019616:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
90019618:	fb05 0502 	mla	r5, r5, r2, r0
9001961c:	142d      	asrs	r5, r5, #16
9001961e:	d409      	bmi.n	90019634 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
90019620:	42bd      	cmp	r5, r7
90019622:	da07      	bge.n	90019634 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
90019624:	9d14      	ldr	r5, [sp, #80]	@ 0x50
90019626:	fb05 1202 	mla	r2, r5, r2, r1
9001962a:	1412      	asrs	r2, r2, #16
9001962c:	d402      	bmi.n	90019634 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
9001962e:	42b2      	cmp	r2, r6
90019630:	f2c0 80c3 	blt.w	900197ba <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x226>
90019634:	2500      	movs	r5, #0
90019636:	195a      	adds	r2, r3, r5
90019638:	2a00      	cmp	r2, #0
9001963a:	dc3f      	bgt.n	900196bc <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
9001963c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
90019640:	eb04 0443 	add.w	r4, r4, r3, lsl #1
90019644:	9b01      	ldr	r3, [sp, #4]
90019646:	2b00      	cmp	r3, #0
90019648:	f340 812a 	ble.w	900198a0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
9001964c:	ee30 0a04 	vadd.f32	s0, s0, s8
90019650:	9b10      	ldr	r3, [sp, #64]	@ 0x40
90019652:	ee70 0aa4 	vadd.f32	s1, s1, s9
90019656:	eeb0 6a62 	vmov.f32	s12, s5
9001965a:	eec6 7a80 	vdiv.f32	s15, s13, s0
9001965e:	ee31 1a05 	vadd.f32	s2, s2, s10
90019662:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
90019666:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
9001966a:	eeb0 6a43 	vmov.f32	s12, s6
9001966e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
90019672:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
90019676:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001967a:	ee61 7a27 	vmul.f32	s15, s2, s15
9001967e:	ee77 2a62 	vsub.f32	s5, s14, s5
90019682:	ee37 3ac3 	vsub.f32	s6, s15, s6
90019686:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001968a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001968e:	ee12 2a90 	vmov	r2, s5
90019692:	eef0 2a47 	vmov.f32	s5, s14
90019696:	fb92 f3f3 	sdiv	r3, r2, r3
9001969a:	ee13 2a10 	vmov	r2, s6
9001969e:	9313      	str	r3, [sp, #76]	@ 0x4c
900196a0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
900196a2:	eeb0 3a67 	vmov.f32	s6, s15
900196a6:	fb92 f3f3 	sdiv	r3, r2, r3
900196aa:	9314      	str	r3, [sp, #80]	@ 0x50
900196ac:	9b01      	ldr	r3, [sp, #4]
900196ae:	9a05      	ldr	r2, [sp, #20]
900196b0:	3b01      	subs	r3, #1
900196b2:	9301      	str	r3, [sp, #4]
900196b4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
900196b6:	bf08      	it	eq
900196b8:	4613      	moveq	r3, r2
900196ba:	e788      	b.n	900195ce <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
900196bc:	1406      	asrs	r6, r0, #16
900196be:	d42c      	bmi.n	9001971a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
900196c0:	f8db 2008 	ldr.w	r2, [fp, #8]
900196c4:	42b2      	cmp	r2, r6
900196c6:	dd28      	ble.n	9001971a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
900196c8:	140f      	asrs	r7, r1, #16
900196ca:	d426      	bmi.n	9001971a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
900196cc:	f8db 200c 	ldr.w	r2, [fp, #12]
900196d0:	42ba      	cmp	r2, r7
900196d2:	dd22      	ble.n	9001971a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
900196d4:	9a02      	ldr	r2, [sp, #8]
900196d6:	fb07 6602 	mla	r6, r7, r2, r6
900196da:	9f03      	ldr	r7, [sp, #12]
900196dc:	0872      	lsrs	r2, r6, #1
900196de:	07f6      	lsls	r6, r6, #31
900196e0:	5cba      	ldrb	r2, [r7, r2]
900196e2:	bf54      	ite	pl
900196e4:	f002 020f 	andpl.w	r2, r2, #15
900196e8:	1112      	asrmi	r2, r2, #4
900196ea:	eb02 1202 	add.w	r2, r2, r2, lsl #4
900196ee:	b2d2      	uxtb	r2, r2
900196f0:	2aff      	cmp	r2, #255	@ 0xff
900196f2:	d118      	bne.n	90019726 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
900196f4:	f06f 0601 	mvn.w	r6, #1
900196f8:	f8d8 2000 	ldr.w	r2, [r8]
900196fc:	fb06 f705 	mul.w	r7, r6, r5
90019700:	f2a6 76fe 	subw	r6, r6, #2046	@ 0x7fe
90019704:	ea06 2c12 	and.w	ip, r6, r2, lsr #8
90019708:	0956      	lsrs	r6, r2, #5
9001970a:	f3c2 02c4 	ubfx	r2, r2, #3, #5
9001970e:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
90019712:	ea4c 0606 	orr.w	r6, ip, r6
90019716:	4316      	orrs	r6, r2
90019718:	53e6      	strh	r6, [r4, r7]
9001971a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
9001971c:	3d01      	subs	r5, #1
9001971e:	4410      	add	r0, r2
90019720:	9a14      	ldr	r2, [sp, #80]	@ 0x50
90019722:	4411      	add	r1, r2
90019724:	e787      	b.n	90019636 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
90019726:	2a00      	cmp	r2, #0
90019728:	d0f7      	beq.n	9001971a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
9001972a:	f06f 0601 	mvn.w	r6, #1
9001972e:	f8d8 c000 	ldr.w	ip, [r8]
90019732:	fa1f f982 	uxth.w	r9, r2
90019736:	43d2      	mvns	r2, r2
90019738:	436e      	muls	r6, r5
9001973a:	f3cc 2a07 	ubfx	sl, ip, #8, #8
9001973e:	b2d2      	uxtb	r2, r2
90019740:	f834 e006 	ldrh.w	lr, [r4, r6]
90019744:	fb1a fa09 	smulbb	sl, sl, r9
90019748:	9604      	str	r6, [sp, #16]
9001974a:	f3cc 4607 	ubfx	r6, ip, #16, #8
9001974e:	ea4f 272e 	mov.w	r7, lr, asr #8
90019752:	fb16 f609 	smulbb	r6, r6, r9
90019756:	fa5f fc8c 	uxtb.w	ip, ip
9001975a:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
9001975e:	fb1c fc09 	smulbb	ip, ip, r9
90019762:	fb07 6702 	mla	r7, r7, r2, r6
90019766:	ea4f 06ee 	mov.w	r6, lr, asr #3
9001976a:	ea4f 0ece 	mov.w	lr, lr, lsl #3
9001976e:	b2bf      	uxth	r7, r7
90019770:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
90019774:	fa5f fe8e 	uxtb.w	lr, lr
90019778:	fb06 a602 	mla	r6, r6, r2, sl
9001977c:	fb0e cc02 	mla	ip, lr, r2, ip
90019780:	1c7a      	adds	r2, r7, #1
90019782:	b2b6      	uxth	r6, r6
90019784:	fa1f fc8c 	uxth.w	ip, ip
90019788:	eb02 2717 	add.w	r7, r2, r7, lsr #8
9001978c:	9a04      	ldr	r2, [sp, #16]
9001978e:	f10c 0a01 	add.w	sl, ip, #1
90019792:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
90019796:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
9001979a:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
9001979e:	ea4a 0707 	orr.w	r7, sl, r7
900197a2:	f106 0a01 	add.w	sl, r6, #1
900197a6:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
900197aa:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
900197ae:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
900197b2:	ea47 070a 	orr.w	r7, r7, sl
900197b6:	52a7      	strh	r7, [r4, r2]
900197b8:	e7af      	b.n	9001971a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
900197ba:	f04f 0e00 	mov.w	lr, #0
900197be:	eba3 020e 	sub.w	r2, r3, lr
900197c2:	2a00      	cmp	r2, #0
900197c4:	f77f af3a 	ble.w	9001963c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
900197c8:	1402      	asrs	r2, r0, #16
900197ca:	9e02      	ldr	r6, [sp, #8]
900197cc:	140d      	asrs	r5, r1, #16
900197ce:	fb06 2505 	mla	r5, r6, r5, r2
900197d2:	9e03      	ldr	r6, [sp, #12]
900197d4:	086a      	lsrs	r2, r5, #1
900197d6:	07ed      	lsls	r5, r5, #31
900197d8:	5cb2      	ldrb	r2, [r6, r2]
900197da:	bf54      	ite	pl
900197dc:	f002 020f 	andpl.w	r2, r2, #15
900197e0:	1112      	asrmi	r2, r2, #4
900197e2:	eb02 1202 	add.w	r2, r2, r2, lsl #4
900197e6:	b2d2      	uxtb	r2, r2
900197e8:	2aff      	cmp	r2, #255	@ 0xff
900197ea:	d115      	bne.n	90019818 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
900197ec:	f8d8 5000 	ldr.w	r5, [r8]
900197f0:	f6a2 02ff 	subw	r2, r2, #2303	@ 0x8ff
900197f4:	ea02 2615 	and.w	r6, r2, r5, lsr #8
900197f8:	096a      	lsrs	r2, r5, #5
900197fa:	f3c5 05c4 	ubfx	r5, r5, #3, #5
900197fe:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
90019802:	4332      	orrs	r2, r6
90019804:	432a      	orrs	r2, r5
90019806:	f824 201e 	strh.w	r2, [r4, lr, lsl #1]
9001980a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
9001980c:	f10e 0e01 	add.w	lr, lr, #1
90019810:	4410      	add	r0, r2
90019812:	9a14      	ldr	r2, [sp, #80]	@ 0x50
90019814:	4411      	add	r1, r2
90019816:	e7d2      	b.n	900197be <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
90019818:	2a00      	cmp	r2, #0
9001981a:	d0f6      	beq.n	9001980a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
9001981c:	f8d8 7000 	ldr.w	r7, [r8]
90019820:	fa1f f982 	uxth.w	r9, r2
90019824:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
90019828:	43d2      	mvns	r2, r2
9001982a:	f3c7 4507 	ubfx	r5, r7, #16, #8
9001982e:	f3c7 2a07 	ubfx	sl, r7, #8, #8
90019832:	ea4f 262c 	mov.w	r6, ip, asr #8
90019836:	fb15 f509 	smulbb	r5, r5, r9
9001983a:	b2d2      	uxtb	r2, r2
9001983c:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
90019840:	b2ff      	uxtb	r7, r7
90019842:	fb1a fa09 	smulbb	sl, sl, r9
90019846:	fb06 5602 	mla	r6, r6, r2, r5
9001984a:	ea4f 05ec 	mov.w	r5, ip, asr #3
9001984e:	fb17 f709 	smulbb	r7, r7, r9
90019852:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
90019856:	b2b6      	uxth	r6, r6
90019858:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
9001985c:	fa5f fc8c 	uxtb.w	ip, ip
90019860:	fb05 a502 	mla	r5, r5, r2, sl
90019864:	fb0c 7702 	mla	r7, ip, r2, r7
90019868:	1c72      	adds	r2, r6, #1
9001986a:	b2ad      	uxth	r5, r5
9001986c:	b2bf      	uxth	r7, r7
9001986e:	eb02 2616 	add.w	r6, r2, r6, lsr #8
90019872:	f107 0a01 	add.w	sl, r7, #1
90019876:	f406 4678 	and.w	r6, r6, #63488	@ 0xf800
9001987a:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
9001987e:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
90019882:	ea4a 0606 	orr.w	r6, sl, r6
90019886:	f105 0a01 	add.w	sl, r5, #1
9001988a:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
9001988e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
90019892:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
90019896:	ea46 060a 	orr.w	r6, r6, sl
9001989a:	f824 601e 	strh.w	r6, [r4, lr, lsl #1]
9001989e:	e7b4      	b.n	9001980a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
900198a0:	b007      	add	sp, #28
900198a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
900198a6:	bf00      	nop
900198a8:	24026314 	.word	0x24026314

900198ac <_ZN8touchgfx8LCD16bppD1Ev>:
900198ac:	4770      	bx	lr

900198ae <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
900198ae:	4770      	bx	lr

900198b0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
900198b0:	4770      	bx	lr

900198b2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
900198b2:	4770      	bx	lr

900198b4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
900198b4:	4770      	bx	lr

900198b6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
900198b6:	4770      	bx	lr

900198b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
900198b8:	4770      	bx	lr

900198ba <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
900198ba:	4770      	bx	lr

900198bc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
900198bc:	4770      	bx	lr

900198be <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
900198be:	4770      	bx	lr

900198c0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
900198c0:	4770      	bx	lr

900198c2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
900198c2:	4770      	bx	lr

900198c4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev>:
900198c4:	4770      	bx	lr

900198c6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
900198c6:	4770      	bx	lr

900198c8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
900198c8:	4770      	bx	lr

900198ca <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev>:
900198ca:	4770      	bx	lr

900198cc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev>:
900198cc:	4770      	bx	lr

900198ce <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
900198ce:	4770      	bx	lr

900198d0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
900198d0:	4770      	bx	lr

900198d2 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
900198d2:	4770      	bx	lr

900198d4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
900198d4:	4770      	bx	lr

900198d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
900198d6:	4770      	bx	lr

900198d8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
900198d8:	4770      	bx	lr

900198da <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
900198da:	4770      	bx	lr

900198dc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
900198dc:	4770      	bx	lr

900198de <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
900198de:	4770      	bx	lr

900198e0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
900198e0:	4770      	bx	lr

900198e2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
900198e2:	4770      	bx	lr

900198e4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
900198e4:	4770      	bx	lr

900198e6 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
900198e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
900198ea:	b088      	sub	sp, #32
900198ec:	4606      	mov	r6, r0
900198ee:	4688      	mov	r8, r1
900198f0:	4691      	mov	r9, r2
900198f2:	ac08      	add	r4, sp, #32
900198f4:	f824 3d0c 	strh.w	r3, [r4, #-12]!
900198f8:	4620      	mov	r0, r4
900198fa:	f7fd fc67 	bl	900171cc <_ZNK8touchgfx6Bitmap7getDataEv>
900198fe:	6833      	ldr	r3, [r6, #0]
90019900:	4605      	mov	r5, r0
90019902:	4620      	mov	r0, r4
90019904:	699f      	ldr	r7, [r3, #24]
90019906:	f7fd fb75 	bl	90016ff4 <_ZNK8touchgfx6Bitmap8getWidthEv>
9001990a:	4682      	mov	sl, r0
9001990c:	4620      	mov	r0, r4
9001990e:	f7fd fba5 	bl	9001705c <_ZNK8touchgfx6Bitmap9getHeightEv>
90019912:	9500      	str	r5, [sp, #0]
90019914:	464b      	mov	r3, r9
90019916:	4642      	mov	r2, r8
90019918:	4631      	mov	r1, r6
9001991a:	e9cd a001 	strd	sl, r0, [sp, #4]
9001991e:	a806      	add	r0, sp, #24
90019920:	47b8      	blx	r7
90019922:	4628      	mov	r0, r5
90019924:	b008      	add	sp, #32
90019926:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

9001992c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
9001992c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
90019930:	2300      	movs	r3, #0
90019932:	9300      	str	r3, [sp, #0]
90019934:	4b3d      	ldr	r3, [pc, #244]	@ (90019a2c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x100>)
90019936:	781b      	ldrb	r3, [r3, #0]
90019938:	2b00      	cmp	r3, #0
9001993a:	d137      	bne.n	900199ac <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x80>
9001993c:	4a3c      	ldr	r2, [pc, #240]	@ (90019a30 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
9001993e:	f9b2 2000 	ldrsh.w	r2, [r2]
90019942:	f8ad 2004 	strh.w	r2, [sp, #4]
90019946:	2b00      	cmp	r3, #0
90019948:	d132      	bne.n	900199b0 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x84>
9001994a:	4b3a      	ldr	r3, [pc, #232]	@ (90019a34 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
9001994c:	f9b3 3000 	ldrsh.w	r3, [r3]
90019950:	ac02      	add	r4, sp, #8
90019952:	6808      	ldr	r0, [r1, #0]
90019954:	f8ad 3006 	strh.w	r3, [sp, #6]
90019958:	ab02      	add	r3, sp, #8
9001995a:	6849      	ldr	r1, [r1, #4]
9001995c:	4d36      	ldr	r5, [pc, #216]	@ (90019a38 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x10c>)
9001995e:	c303      	stmia	r3!, {r0, r1}
90019960:	4669      	mov	r1, sp
90019962:	4620      	mov	r0, r4
90019964:	f7f9 ffe0 	bl	90013928 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
90019968:	4668      	mov	r0, sp
9001996a:	f7f9 ff99 	bl	900138a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001996e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
90019972:	f8bd 2000 	ldrh.w	r2, [sp]
90019976:	462f      	mov	r7, r5
90019978:	6828      	ldr	r0, [r5, #0]
9001997a:	4413      	add	r3, r2
9001997c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
90019980:	f8ad 3008 	strh.w	r3, [sp, #8]
90019984:	f8bd 300a 	ldrh.w	r3, [sp, #10]
90019988:	4413      	add	r3, r2
9001998a:	f8ad 300a 	strh.w	r3, [sp, #10]
9001998e:	6803      	ldr	r3, [r0, #0]
90019990:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
90019992:	4798      	blx	r3
90019994:	f010 0f01 	tst.w	r0, #1
90019998:	d00c      	beq.n	900199b4 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x88>
9001999a:	6828      	ldr	r0, [r5, #0]
9001999c:	6803      	ldr	r3, [r0, #0]
9001999e:	e894 0006 	ldmia.w	r4, {r1, r2}
900199a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
900199a4:	4798      	blx	r3
900199a6:	b004      	add	sp, #16
900199a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
900199ac:	4a21      	ldr	r2, [pc, #132]	@ (90019a34 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
900199ae:	e7c6      	b.n	9001993e <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
900199b0:	4b1f      	ldr	r3, [pc, #124]	@ (90019a30 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
900199b2:	e7cb      	b.n	9001994c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
900199b4:	6838      	ldr	r0, [r7, #0]
900199b6:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
900199ba:	6803      	ldr	r3, [r0, #0]
900199bc:	f9bd 500e 	ldrsh.w	r5, [sp, #14]
900199c0:	ea4f 0848 	mov.w	r8, r8, lsl #1
900199c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
900199c6:	4798      	blx	r3
900199c8:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
900199cc:	f8bd 200a 	ldrh.w	r2, [sp, #10]
900199d0:	f8bd 6004 	ldrh.w	r6, [sp, #4]
900199d4:	fb16 3602 	smlabb	r6, r6, r2, r3
900199d8:	eb00 0646 	add.w	r6, r0, r6, lsl #1
900199dc:	6838      	ldr	r0, [r7, #0]
900199de:	6803      	ldr	r3, [r0, #0]
900199e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
900199e2:	4798      	blx	r3
900199e4:	4a12      	ldr	r2, [pc, #72]	@ (90019a30 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
900199e6:	f9bd 400a 	ldrsh.w	r4, [sp, #10]
900199ea:	8813      	ldrh	r3, [r2, #0]
900199ec:	4691      	mov	r9, r2
900199ee:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
900199f2:	435d      	muls	r5, r3
900199f4:	fb03 1404 	mla	r4, r3, r4, r1
900199f8:	eb00 0444 	add.w	r4, r0, r4, lsl #1
900199fc:	eb04 0545 	add.w	r5, r4, r5, lsl #1
90019a00:	6838      	ldr	r0, [r7, #0]
90019a02:	42ac      	cmp	r4, r5
90019a04:	6803      	ldr	r3, [r0, #0]
90019a06:	d20e      	bcs.n	90019a26 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xfa>
90019a08:	f8d3 a034 	ldr.w	sl, [r3, #52]	@ 0x34
90019a0c:	4632      	mov	r2, r6
90019a0e:	4643      	mov	r3, r8
90019a10:	4621      	mov	r1, r4
90019a12:	47d0      	blx	sl
90019a14:	f8b9 3000 	ldrh.w	r3, [r9]
90019a18:	eb04 0443 	add.w	r4, r4, r3, lsl #1
90019a1c:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
90019a20:	eb06 0643 	add.w	r6, r6, r3, lsl #1
90019a24:	e7ec      	b.n	90019a00 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd4>
90019a26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90019a28:	4798      	blx	r3
90019a2a:	e7bc      	b.n	900199a6 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
90019a2c:	24026304 	.word	0x24026304
90019a30:	24026306 	.word	0x24026306
90019a34:	24026308 	.word	0x24026308
90019a38:	2402630c 	.word	0x2402630c

90019a3c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
90019a3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90019a40:	b08b      	sub	sp, #44	@ 0x2c
90019a42:	460f      	mov	r7, r1
90019a44:	4616      	mov	r6, r2
90019a46:	f89d b050 	ldrb.w	fp, [sp, #80]	@ 0x50
90019a4a:	f89d 4054 	ldrb.w	r4, [sp, #84]	@ 0x54
90019a4e:	f1bb 0f00 	cmp.w	fp, #0
90019a52:	d049      	beq.n	90019ae8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
90019a54:	6810      	ldr	r0, [r2, #0]
90019a56:	ad06      	add	r5, sp, #24
90019a58:	6851      	ldr	r1, [r2, #4]
90019a5a:	c503      	stmia	r5!, {r0, r1}
90019a5c:	6818      	ldr	r0, [r3, #0]
90019a5e:	ad08      	add	r5, sp, #32
90019a60:	6859      	ldr	r1, [r3, #4]
90019a62:	c503      	stmia	r5!, {r0, r1}
90019a64:	a806      	add	r0, sp, #24
90019a66:	f7f9 ff1b 	bl	900138a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
90019a6a:	4631      	mov	r1, r6
90019a6c:	a808      	add	r0, sp, #32
90019a6e:	f7f9 ff5b 	bl	90013928 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
90019a72:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
90019a76:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
90019a7a:	f8bd 601c 	ldrh.w	r6, [sp, #28]
90019a7e:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	@ 0x24
90019a82:	fb16 2103 	smlabb	r1, r6, r3, r2
90019a86:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	@ 0x26
90019a8a:	eb07 0641 	add.w	r6, r7, r1, lsl #1
90019a8e:	f8bd 1018 	ldrh.w	r1, [sp, #24]
90019a92:	4f5f      	ldr	r7, [pc, #380]	@ (90019c10 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
90019a94:	440a      	add	r2, r1
90019a96:	6838      	ldr	r0, [r7, #0]
90019a98:	46b9      	mov	r9, r7
90019a9a:	f8ad 2020 	strh.w	r2, [sp, #32]
90019a9e:	f8bd 201a 	ldrh.w	r2, [sp, #26]
90019aa2:	4413      	add	r3, r2
90019aa4:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
90019aa8:	6803      	ldr	r3, [r0, #0]
90019aaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
90019aac:	4798      	blx	r3
90019aae:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
90019ab2:	d01c      	beq.n	90019aee <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
90019ab4:	f010 0f04 	tst.w	r0, #4
90019ab8:	d01d      	beq.n	90019af6 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
90019aba:	f8d9 0000 	ldr.w	r0, [r9]
90019abe:	2700      	movs	r7, #0
90019ac0:	b2ad      	uxth	r5, r5
90019ac2:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
90019ac6:	6801      	ldr	r1, [r0, #0]
90019ac8:	f8bd 2020 	ldrh.w	r2, [sp, #32]
90019acc:	f8cd b00c 	str.w	fp, [sp, #12]
90019ad0:	9501      	str	r5, [sp, #4]
90019ad2:	e9cd 4704 	strd	r4, r7, [sp, #16]
90019ad6:	f8bd 401c 	ldrh.w	r4, [sp, #28]
90019ada:	9402      	str	r4, [sp, #8]
90019adc:	fa1f f488 	uxth.w	r4, r8
90019ae0:	9400      	str	r4, [sp, #0]
90019ae2:	6c4c      	ldr	r4, [r1, #68]	@ 0x44
90019ae4:	4631      	mov	r1, r6
90019ae6:	47a0      	blx	r4
90019ae8:	b00b      	add	sp, #44	@ 0x2c
90019aea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90019aee:	b914      	cbnz	r4, 90019af6 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
90019af0:	f010 0f01 	tst.w	r0, #1
90019af4:	e7e0      	b.n	90019ab8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7c>
90019af6:	f8d9 0000 	ldr.w	r0, [r9]
90019afa:	ea4f 0748 	mov.w	r7, r8, lsl #1
90019afe:	6803      	ldr	r3, [r0, #0]
90019b00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90019b02:	4798      	blx	r3
90019b04:	4b43      	ldr	r3, [pc, #268]	@ (90019c14 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d8>)
90019b06:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	@ 0x22
90019b0a:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
90019b0e:	881a      	ldrh	r2, [r3, #0]
90019b10:	469a      	mov	sl, r3
90019b12:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
90019b16:	fb05 f502 	mul.w	r5, r5, r2
90019b1a:	fb02 1404 	mla	r4, r2, r4, r1
90019b1e:	eb00 0444 	add.w	r4, r0, r4, lsl #1
90019b22:	d059      	beq.n	90019bd8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>
90019b24:	f1cb 09ff 	rsb	r9, fp, #255	@ 0xff
90019b28:	eb04 0545 	add.w	r5, r4, r5, lsl #1
90019b2c:	fa1f f28b 	uxth.w	r2, fp
90019b30:	469e      	mov	lr, r3
90019b32:	fa1f f989 	uxth.w	r9, r9
90019b36:	42ac      	cmp	r4, r5
90019b38:	d264      	bcs.n	90019c04 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
90019b3a:	eb04 0a07 	add.w	sl, r4, r7
90019b3e:	4554      	cmp	r4, sl
90019b40:	d23d      	bcs.n	90019bbe <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x182>
90019b42:	8821      	ldrh	r1, [r4, #0]
90019b44:	f836 3b02 	ldrh.w	r3, [r6], #2
90019b48:	1208      	asrs	r0, r1, #8
90019b4a:	ea4f 2c23 	mov.w	ip, r3, asr #8
90019b4e:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
90019b52:	ea4f 0be1 	mov.w	fp, r1, asr #3
90019b56:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
90019b5a:	00c9      	lsls	r1, r1, #3
90019b5c:	fb10 f009 	smulbb	r0, r0, r9
90019b60:	f00b 0bfc 	and.w	fp, fp, #252	@ 0xfc
90019b64:	b2c9      	uxtb	r1, r1
90019b66:	fb0c 0c02 	mla	ip, ip, r2, r0
90019b6a:	10d8      	asrs	r0, r3, #3
90019b6c:	fb1b fb09 	smulbb	fp, fp, r9
90019b70:	00db      	lsls	r3, r3, #3
90019b72:	fa1f fc8c 	uxth.w	ip, ip
90019b76:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
90019b7a:	fb11 f109 	smulbb	r1, r1, r9
90019b7e:	b2db      	uxtb	r3, r3
90019b80:	fb00 b002 	mla	r0, r0, r2, fp
90019b84:	f10c 0b01 	add.w	fp, ip, #1
90019b88:	fb03 1302 	mla	r3, r3, r2, r1
90019b8c:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
90019b90:	b29b      	uxth	r3, r3
90019b92:	b280      	uxth	r0, r0
90019b94:	f40c 4b78 	and.w	fp, ip, #63488	@ 0xf800
90019b98:	f103 0c01 	add.w	ip, r3, #1
90019b9c:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
90019ba0:	1c43      	adds	r3, r0, #1
90019ba2:	eb03 2010 	add.w	r0, r3, r0, lsr #8
90019ba6:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
90019baa:	0940      	lsrs	r0, r0, #5
90019bac:	ea4c 0c0b 	orr.w	ip, ip, fp
90019bb0:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
90019bb4:	ea4c 0c00 	orr.w	ip, ip, r0
90019bb8:	f824 cb02 	strh.w	ip, [r4], #2
90019bbc:	e7bf      	b.n	90019b3e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x102>
90019bbe:	f8be 3000 	ldrh.w	r3, [lr]
90019bc2:	eba3 0308 	sub.w	r3, r3, r8
90019bc6:	eb04 0443 	add.w	r4, r4, r3, lsl #1
90019bca:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
90019bce:	eba3 0308 	sub.w	r3, r3, r8
90019bd2:	eb06 0643 	add.w	r6, r6, r3, lsl #1
90019bd6:	e7ae      	b.n	90019b36 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfa>
90019bd8:	eb04 0545 	add.w	r5, r4, r5, lsl #1
90019bdc:	f8d9 0000 	ldr.w	r0, [r9]
90019be0:	42ac      	cmp	r4, r5
90019be2:	6803      	ldr	r3, [r0, #0]
90019be4:	d20e      	bcs.n	90019c04 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
90019be6:	f8d3 8034 	ldr.w	r8, [r3, #52]	@ 0x34
90019bea:	4632      	mov	r2, r6
90019bec:	463b      	mov	r3, r7
90019bee:	4621      	mov	r1, r4
90019bf0:	47c0      	blx	r8
90019bf2:	f8ba 3000 	ldrh.w	r3, [sl]
90019bf6:	eb04 0443 	add.w	r4, r4, r3, lsl #1
90019bfa:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
90019bfe:	eb06 0643 	add.w	r6, r6, r3, lsl #1
90019c02:	e7eb      	b.n	90019bdc <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a0>
90019c04:	4b02      	ldr	r3, [pc, #8]	@ (90019c10 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
90019c06:	6818      	ldr	r0, [r3, #0]
90019c08:	6803      	ldr	r3, [r0, #0]
90019c0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90019c0c:	4798      	blx	r3
90019c0e:	e76b      	b.n	90019ae8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
90019c10:	2402630c 	.word	0x2402630c
90019c14:	24026306 	.word	0x24026306

90019c18 <_ZN8touchgfx8LCD16bppD0Ev>:
90019c18:	b510      	push	{r4, lr}
90019c1a:	4604      	mov	r4, r0
90019c1c:	2178      	movs	r1, #120	@ 0x78
90019c1e:	f008 ffca 	bl	90022bb6 <_ZdlPvj>
90019c22:	4620      	mov	r0, r4
90019c24:	bd10      	pop	{r4, pc}

90019c26 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
90019c26:	b510      	push	{r4, lr}
90019c28:	4604      	mov	r4, r0
90019c2a:	2104      	movs	r1, #4
90019c2c:	f008 ffc3 	bl	90022bb6 <_ZdlPvj>
90019c30:	4620      	mov	r0, r4
90019c32:	bd10      	pop	{r4, pc}

90019c34 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
90019c34:	b510      	push	{r4, lr}
90019c36:	4604      	mov	r4, r0
90019c38:	2104      	movs	r1, #4
90019c3a:	f008 ffbc 	bl	90022bb6 <_ZdlPvj>
90019c3e:	4620      	mov	r0, r4
90019c40:	bd10      	pop	{r4, pc}

90019c42 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
90019c42:	b510      	push	{r4, lr}
90019c44:	4604      	mov	r4, r0
90019c46:	2104      	movs	r1, #4
90019c48:	f008 ffb5 	bl	90022bb6 <_ZdlPvj>
90019c4c:	4620      	mov	r0, r4
90019c4e:	bd10      	pop	{r4, pc}

90019c50 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
90019c50:	b510      	push	{r4, lr}
90019c52:	4604      	mov	r4, r0
90019c54:	2104      	movs	r1, #4
90019c56:	f008 ffae 	bl	90022bb6 <_ZdlPvj>
90019c5a:	4620      	mov	r0, r4
90019c5c:	bd10      	pop	{r4, pc}

90019c5e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
90019c5e:	b510      	push	{r4, lr}
90019c60:	4604      	mov	r4, r0
90019c62:	2104      	movs	r1, #4
90019c64:	f008 ffa7 	bl	90022bb6 <_ZdlPvj>
90019c68:	4620      	mov	r0, r4
90019c6a:	bd10      	pop	{r4, pc}

90019c6c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
90019c6c:	b510      	push	{r4, lr}
90019c6e:	4604      	mov	r4, r0
90019c70:	2104      	movs	r1, #4
90019c72:	f008 ffa0 	bl	90022bb6 <_ZdlPvj>
90019c76:	4620      	mov	r0, r4
90019c78:	bd10      	pop	{r4, pc}

90019c7a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
90019c7a:	b510      	push	{r4, lr}
90019c7c:	4604      	mov	r4, r0
90019c7e:	2104      	movs	r1, #4
90019c80:	f008 ff99 	bl	90022bb6 <_ZdlPvj>
90019c84:	4620      	mov	r0, r4
90019c86:	bd10      	pop	{r4, pc}

90019c88 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
90019c88:	b510      	push	{r4, lr}
90019c8a:	4604      	mov	r4, r0
90019c8c:	2104      	movs	r1, #4
90019c8e:	f008 ff92 	bl	90022bb6 <_ZdlPvj>
90019c92:	4620      	mov	r0, r4
90019c94:	bd10      	pop	{r4, pc}

90019c96 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
90019c96:	b510      	push	{r4, lr}
90019c98:	4604      	mov	r4, r0
90019c9a:	2104      	movs	r1, #4
90019c9c:	f008 ff8b 	bl	90022bb6 <_ZdlPvj>
90019ca0:	4620      	mov	r0, r4
90019ca2:	bd10      	pop	{r4, pc}

90019ca4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
90019ca4:	b510      	push	{r4, lr}
90019ca6:	4604      	mov	r4, r0
90019ca8:	2104      	movs	r1, #4
90019caa:	f008 ff84 	bl	90022bb6 <_ZdlPvj>
90019cae:	4620      	mov	r0, r4
90019cb0:	bd10      	pop	{r4, pc}

90019cb2 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
90019cb2:	b510      	push	{r4, lr}
90019cb4:	4604      	mov	r4, r0
90019cb6:	2104      	movs	r1, #4
90019cb8:	f008 ff7d 	bl	90022bb6 <_ZdlPvj>
90019cbc:	4620      	mov	r0, r4
90019cbe:	bd10      	pop	{r4, pc}

90019cc0 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
90019cc0:	b510      	push	{r4, lr}
90019cc2:	4604      	mov	r4, r0
90019cc4:	2104      	movs	r1, #4
90019cc6:	f008 ff76 	bl	90022bb6 <_ZdlPvj>
90019cca:	4620      	mov	r0, r4
90019ccc:	bd10      	pop	{r4, pc}

90019cce <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
90019cce:	b510      	push	{r4, lr}
90019cd0:	4604      	mov	r4, r0
90019cd2:	2104      	movs	r1, #4
90019cd4:	f008 ff6f 	bl	90022bb6 <_ZdlPvj>
90019cd8:	4620      	mov	r0, r4
90019cda:	bd10      	pop	{r4, pc}

90019cdc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
90019cdc:	b510      	push	{r4, lr}
90019cde:	4604      	mov	r4, r0
90019ce0:	2104      	movs	r1, #4
90019ce2:	f008 ff68 	bl	90022bb6 <_ZdlPvj>
90019ce6:	4620      	mov	r0, r4
90019ce8:	bd10      	pop	{r4, pc}

90019cea <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
90019cea:	b510      	push	{r4, lr}
90019cec:	4604      	mov	r4, r0
90019cee:	2104      	movs	r1, #4
90019cf0:	f008 ff61 	bl	90022bb6 <_ZdlPvj>
90019cf4:	4620      	mov	r0, r4
90019cf6:	bd10      	pop	{r4, pc}

90019cf8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD0Ev>:
90019cf8:	b510      	push	{r4, lr}
90019cfa:	4604      	mov	r4, r0
90019cfc:	2104      	movs	r1, #4
90019cfe:	f008 ff5a 	bl	90022bb6 <_ZdlPvj>
90019d02:	4620      	mov	r0, r4
90019d04:	bd10      	pop	{r4, pc}

90019d06 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
90019d06:	b510      	push	{r4, lr}
90019d08:	4604      	mov	r4, r0
90019d0a:	2104      	movs	r1, #4
90019d0c:	f008 ff53 	bl	90022bb6 <_ZdlPvj>
90019d10:	4620      	mov	r0, r4
90019d12:	bd10      	pop	{r4, pc}

90019d14 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
90019d14:	b510      	push	{r4, lr}
90019d16:	4604      	mov	r4, r0
90019d18:	2104      	movs	r1, #4
90019d1a:	f008 ff4c 	bl	90022bb6 <_ZdlPvj>
90019d1e:	4620      	mov	r0, r4
90019d20:	bd10      	pop	{r4, pc}

90019d22 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD0Ev>:
90019d22:	b510      	push	{r4, lr}
90019d24:	4604      	mov	r4, r0
90019d26:	2104      	movs	r1, #4
90019d28:	f008 ff45 	bl	90022bb6 <_ZdlPvj>
90019d2c:	4620      	mov	r0, r4
90019d2e:	bd10      	pop	{r4, pc}

90019d30 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD0Ev>:
90019d30:	b510      	push	{r4, lr}
90019d32:	4604      	mov	r4, r0
90019d34:	2104      	movs	r1, #4
90019d36:	f008 ff3e 	bl	90022bb6 <_ZdlPvj>
90019d3a:	4620      	mov	r0, r4
90019d3c:	bd10      	pop	{r4, pc}

90019d3e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
90019d3e:	b510      	push	{r4, lr}
90019d40:	4604      	mov	r4, r0
90019d42:	2104      	movs	r1, #4
90019d44:	f008 ff37 	bl	90022bb6 <_ZdlPvj>
90019d48:	4620      	mov	r0, r4
90019d4a:	bd10      	pop	{r4, pc}

90019d4c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
90019d4c:	b510      	push	{r4, lr}
90019d4e:	4604      	mov	r4, r0
90019d50:	2104      	movs	r1, #4
90019d52:	f008 ff30 	bl	90022bb6 <_ZdlPvj>
90019d56:	4620      	mov	r0, r4
90019d58:	bd10      	pop	{r4, pc}

90019d5a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
90019d5a:	b510      	push	{r4, lr}
90019d5c:	4604      	mov	r4, r0
90019d5e:	2104      	movs	r1, #4
90019d60:	f008 ff29 	bl	90022bb6 <_ZdlPvj>
90019d64:	4620      	mov	r0, r4
90019d66:	bd10      	pop	{r4, pc}

90019d68 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
90019d68:	b510      	push	{r4, lr}
90019d6a:	4604      	mov	r4, r0
90019d6c:	2104      	movs	r1, #4
90019d6e:	f008 ff22 	bl	90022bb6 <_ZdlPvj>
90019d72:	4620      	mov	r0, r4
90019d74:	bd10      	pop	{r4, pc}

90019d76 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
90019d76:	b510      	push	{r4, lr}
90019d78:	4604      	mov	r4, r0
90019d7a:	2104      	movs	r1, #4
90019d7c:	f008 ff1b 	bl	90022bb6 <_ZdlPvj>
90019d80:	4620      	mov	r0, r4
90019d82:	bd10      	pop	{r4, pc}

90019d84 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
90019d84:	b510      	push	{r4, lr}
90019d86:	4604      	mov	r4, r0
90019d88:	2104      	movs	r1, #4
90019d8a:	f008 ff14 	bl	90022bb6 <_ZdlPvj>
90019d8e:	4620      	mov	r0, r4
90019d90:	bd10      	pop	{r4, pc}

90019d92 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
90019d92:	b510      	push	{r4, lr}
90019d94:	4604      	mov	r4, r0
90019d96:	2104      	movs	r1, #4
90019d98:	f008 ff0d 	bl	90022bb6 <_ZdlPvj>
90019d9c:	4620      	mov	r0, r4
90019d9e:	bd10      	pop	{r4, pc}

90019da0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
90019da0:	b510      	push	{r4, lr}
90019da2:	4604      	mov	r4, r0
90019da4:	2104      	movs	r1, #4
90019da6:	f008 ff06 	bl	90022bb6 <_ZdlPvj>
90019daa:	4620      	mov	r0, r4
90019dac:	bd10      	pop	{r4, pc}
	...

90019db0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
90019db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90019db4:	b091      	sub	sp, #68	@ 0x44
90019db6:	469b      	mov	fp, r3
90019db8:	4616      	mov	r6, r2
90019dba:	f9b3 2000 	ldrsh.w	r2, [r3]
90019dbe:	f10d 0828 	add.w	r8, sp, #40	@ 0x28
90019dc2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
90019dc6:	f9bd 906c 	ldrsh.w	r9, [sp, #108]	@ 0x6c
90019dca:	4604      	mov	r4, r0
90019dcc:	f9bd 7070 	ldrsh.w	r7, [sp, #112]	@ 0x70
90019dd0:	4640      	mov	r0, r8
90019dd2:	460d      	mov	r5, r1
90019dd4:	4659      	mov	r1, fp
90019dd6:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
90019dda:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
90019dde:	f8ad 902c 	strh.w	r9, [sp, #44]	@ 0x2c
90019de2:	f8ad 702e 	strh.w	r7, [sp, #46]	@ 0x2e
90019de6:	f7f6 fb2b 	bl	90010440 <_ZN8touchgfx4RectaNERKS0_>
90019dea:	4631      	mov	r1, r6
90019dec:	4640      	mov	r0, r8
90019dee:	f7f6 fb27 	bl	90010440 <_ZN8touchgfx4RectaNERKS0_>
90019df2:	4b74      	ldr	r3, [pc, #464]	@ (90019fc4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x214>)
90019df4:	8818      	ldrh	r0, [r3, #0]
90019df6:	4b74      	ldr	r3, [pc, #464]	@ (90019fc8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x218>)
90019df8:	b202      	sxth	r2, r0
90019dfa:	8819      	ldrh	r1, [r3, #0]
90019dfc:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	@ 0x28
90019e00:	b20e      	sxth	r6, r1
90019e02:	2b00      	cmp	r3, #0
90019e04:	da07      	bge.n	90019e16 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x66>
90019e06:	f8bd c02c 	ldrh.w	ip, [sp, #44]	@ 0x2c
90019e0a:	4463      	add	r3, ip
90019e0c:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
90019e10:	2300      	movs	r3, #0
90019e12:	f8ad 3028 	strh.w	r3, [sp, #40]	@ 0x28
90019e16:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	@ 0x28
90019e1a:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	@ 0x2c
90019e1e:	1ad2      	subs	r2, r2, r3
90019e20:	4594      	cmp	ip, r2
90019e22:	bfc4      	itt	gt
90019e24:	1ac2      	subgt	r2, r0, r3
90019e26:	f8ad 202c 	strhgt.w	r2, [sp, #44]	@ 0x2c
90019e2a:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
90019e2e:	2a00      	cmp	r2, #0
90019e30:	da07      	bge.n	90019e42 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x92>
90019e32:	f8bd c02e 	ldrh.w	ip, [sp, #46]	@ 0x2e
90019e36:	4462      	add	r2, ip
90019e38:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
90019e3c:	2200      	movs	r2, #0
90019e3e:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
90019e42:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	@ 0x2a
90019e46:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	@ 0x2e
90019e4a:	eba6 060a 	sub.w	r6, r6, sl
90019e4e:	42b2      	cmp	r2, r6
90019e50:	bfc4      	itt	gt
90019e52:	eba1 020a 	subgt.w	r2, r1, sl
90019e56:	f8ad 202e 	strhgt.w	r2, [sp, #46]	@ 0x2e
90019e5a:	4a5c      	ldr	r2, [pc, #368]	@ (90019fcc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x21c>)
90019e5c:	7812      	ldrb	r2, [r2, #0]
90019e5e:	b9a2      	cbnz	r2, 90019e8a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xda>
90019e60:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	@ 0x2c
90019e64:	4286      	cmp	r6, r0
90019e66:	4640      	mov	r0, r8
90019e68:	9303      	str	r3, [sp, #12]
90019e6a:	bf14      	ite	ne
90019e6c:	2600      	movne	r6, #0
90019e6e:	2601      	moveq	r6, #1
90019e70:	f7f6 fb29 	bl	900104c6 <_ZNK8touchgfx4Rect7isEmptyEv>
90019e74:	9b03      	ldr	r3, [sp, #12]
90019e76:	b160      	cbz	r0, 90019e92 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xe2>
90019e78:	2300      	movs	r3, #0
90019e7a:	8023      	strh	r3, [r4, #0]
90019e7c:	8063      	strh	r3, [r4, #2]
90019e7e:	80a3      	strh	r3, [r4, #4]
90019e80:	4620      	mov	r0, r4
90019e82:	80e3      	strh	r3, [r4, #6]
90019e84:	b011      	add	sp, #68	@ 0x44
90019e86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90019e8a:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	@ 0x2e
90019e8e:	428e      	cmp	r6, r1
90019e90:	e7e9      	b.n	90019e66 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb6>
90019e92:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
90019e96:	a90e      	add	r1, sp, #56	@ 0x38
90019e98:	900e      	str	r0, [sp, #56]	@ 0x38
90019e9a:	a80c      	add	r0, sp, #48	@ 0x30
90019e9c:	9205      	str	r2, [sp, #20]
90019e9e:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	@ 0x2e
90019ea2:	f8ad 903c 	strh.w	r9, [sp, #60]	@ 0x3c
90019ea6:	9206      	str	r2, [sp, #24]
90019ea8:	f8bb 2000 	ldrh.w	r2, [fp]
90019eac:	f8ad 703e 	strh.w	r7, [sp, #62]	@ 0x3e
90019eb0:	1a9b      	subs	r3, r3, r2
90019eb2:	b21b      	sxth	r3, r3
90019eb4:	9303      	str	r3, [sp, #12]
90019eb6:	f8bb 3002 	ldrh.w	r3, [fp, #2]
90019eba:	f8df b118 	ldr.w	fp, [pc, #280]	@ 90019fd4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
90019ebe:	ebaa 0a03 	sub.w	sl, sl, r3
90019ec2:	fa0f f38a 	sxth.w	r3, sl
90019ec6:	9304      	str	r3, [sp, #16]
90019ec8:	9b03      	ldr	r3, [sp, #12]
90019eca:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
90019ece:	9b04      	ldr	r3, [sp, #16]
90019ed0:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
90019ed4:	9b05      	ldr	r3, [sp, #20]
90019ed6:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
90019eda:	9b06      	ldr	r3, [sp, #24]
90019edc:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
90019ee0:	f7f9 fd22 	bl	90013928 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
90019ee4:	4640      	mov	r0, r8
90019ee6:	f7f9 fcdb 	bl	900138a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
90019eea:	a80e      	add	r0, sp, #56	@ 0x38
90019eec:	f7f9 fcd8 	bl	900138a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
90019ef0:	4b37      	ldr	r3, [pc, #220]	@ (90019fd0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
90019ef2:	4628      	mov	r0, r5
90019ef4:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	@ 0x3c
90019ef8:	881b      	ldrh	r3, [r3, #0]
90019efa:	9307      	str	r3, [sp, #28]
90019efc:	682b      	ldr	r3, [r5, #0]
90019efe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
90019f00:	4798      	blx	r3
90019f02:	f8bd 5032 	ldrh.w	r5, [sp, #50]	@ 0x32
90019f06:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
90019f0a:	4681      	mov	r9, r0
90019f0c:	f8db 0000 	ldr.w	r0, [fp]
90019f10:	fb1a 3305 	smlabb	r3, sl, r5, r3
90019f14:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
90019f16:	eb05 0543 	add.w	r5, r5, r3, lsl #1
90019f1a:	6803      	ldr	r3, [r0, #0]
90019f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
90019f1e:	4798      	blx	r3
90019f20:	4607      	mov	r7, r0
90019f22:	f8db 0000 	ldr.w	r0, [fp]
90019f26:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	@ 0x28
90019f2a:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
90019f2e:	6803      	ldr	r3, [r0, #0]
90019f30:	9109      	str	r1, [sp, #36]	@ 0x24
90019f32:	9208      	str	r2, [sp, #32]
90019f34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
90019f36:	4798      	blx	r3
90019f38:	f010 0f01 	tst.w	r0, #1
90019f3c:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
90019f40:	d012      	beq.n	90019f68 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b8>
90019f42:	f8db 0000 	ldr.w	r0, [fp]
90019f46:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	@ 0x34
90019f4a:	6803      	ldr	r3, [r0, #0]
90019f4c:	9200      	str	r2, [sp, #0]
90019f4e:	6ede      	ldr	r6, [r3, #108]	@ 0x6c
90019f50:	462b      	mov	r3, r5
90019f52:	e898 0006 	ldmia.w	r8, {r1, r2}
90019f56:	47b0      	blx	r6
90019f58:	9b03      	ldr	r3, [sp, #12]
90019f5a:	8023      	strh	r3, [r4, #0]
90019f5c:	9b04      	ldr	r3, [sp, #16]
90019f5e:	8063      	strh	r3, [r4, #2]
90019f60:	9b05      	ldr	r3, [sp, #20]
90019f62:	80a3      	strh	r3, [r4, #4]
90019f64:	9b06      	ldr	r3, [sp, #24]
90019f66:	e78b      	b.n	90019e80 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xd0>
90019f68:	fb09 f202 	mul.w	r2, r9, r2
90019f6c:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	@ 0x36
90019f70:	eb02 0141 	add.w	r1, r2, r1, lsl #1
90019f74:	440f      	add	r7, r1
90019f76:	b166      	cbz	r6, 90019f92 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
90019f78:	9a07      	ldr	r2, [sp, #28]
90019f7a:	4592      	cmp	sl, r2
90019f7c:	d109      	bne.n	90019f92 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
90019f7e:	f8db 0000 	ldr.w	r0, [fp]
90019f82:	fb09 f303 	mul.w	r3, r9, r3
90019f86:	4629      	mov	r1, r5
90019f88:	6802      	ldr	r2, [r0, #0]
90019f8a:	6b56      	ldr	r6, [r2, #52]	@ 0x34
90019f8c:	463a      	mov	r2, r7
90019f8e:	47b0      	blx	r6
90019f90:	e7e2      	b.n	90019f58 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
90019f92:	fb0a f303 	mul.w	r3, sl, r3
90019f96:	ea4f 064a 	mov.w	r6, sl, lsl #1
90019f9a:	f8df b038 	ldr.w	fp, [pc, #56]	@ 90019fd4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
90019f9e:	eb05 0843 	add.w	r8, r5, r3, lsl #1
90019fa2:	4545      	cmp	r5, r8
90019fa4:	d2d8      	bcs.n	90019f58 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
90019fa6:	f8db 0000 	ldr.w	r0, [fp]
90019faa:	4629      	mov	r1, r5
90019fac:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
90019fb0:	4435      	add	r5, r6
90019fb2:	6802      	ldr	r2, [r0, #0]
90019fb4:	005b      	lsls	r3, r3, #1
90019fb6:	f8d2 a034 	ldr.w	sl, [r2, #52]	@ 0x34
90019fba:	463a      	mov	r2, r7
90019fbc:	47d0      	blx	sl
90019fbe:	444f      	add	r7, r9
90019fc0:	e7ef      	b.n	90019fa2 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f2>
90019fc2:	bf00      	nop
90019fc4:	24026300 	.word	0x24026300
90019fc8:	24026302 	.word	0x24026302
90019fcc:	24026304 	.word	0x24026304
90019fd0:	24026306 	.word	0x24026306
90019fd4:	2402630c 	.word	0x2402630c

90019fd8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
90019fd8:	b5f0      	push	{r4, r5, r6, r7, lr}
90019fda:	4606      	mov	r6, r0
90019fdc:	b087      	sub	sp, #28
90019fde:	460c      	mov	r4, r1
90019fe0:	4617      	mov	r7, r2
90019fe2:	461d      	mov	r5, r3
90019fe4:	b333      	cbz	r3, 9001a034 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
90019fe6:	4608      	mov	r0, r1
90019fe8:	f7f6 fa6d 	bl	900104c6 <_ZNK8touchgfx4Rect7isEmptyEv>
90019fec:	bb10      	cbnz	r0, 9001a034 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
90019fee:	6820      	ldr	r0, [r4, #0]
90019ff0:	ab04      	add	r3, sp, #16
90019ff2:	6861      	ldr	r1, [r4, #4]
90019ff4:	4c1b      	ldr	r4, [pc, #108]	@ (9001a064 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x8c>)
90019ff6:	c303      	stmia	r3!, {r0, r1}
90019ff8:	a804      	add	r0, sp, #16
90019ffa:	f7f9 fc51 	bl	900138a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
90019ffe:	6820      	ldr	r0, [r4, #0]
9001a000:	6803      	ldr	r3, [r0, #0]
9001a002:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
9001a004:	4798      	blx	r3
9001a006:	2dff      	cmp	r5, #255	@ 0xff
9001a008:	d016      	beq.n	9001a038 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
9001a00a:	f010 0f08 	tst.w	r0, #8
9001a00e:	6820      	ldr	r0, [r4, #0]
9001a010:	d015      	beq.n	9001a03e <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
9001a012:	2400      	movs	r4, #0
9001a014:	6801      	ldr	r1, [r0, #0]
9001a016:	f8bd 3012 	ldrh.w	r3, [sp, #18]
9001a01a:	f8bd 2010 	ldrh.w	r2, [sp, #16]
9001a01e:	e9cd 5402 	strd	r5, r4, [sp, #8]
9001a022:	f8bd 4016 	ldrh.w	r4, [sp, #22]
9001a026:	9401      	str	r4, [sp, #4]
9001a028:	f8bd 4014 	ldrh.w	r4, [sp, #20]
9001a02c:	9400      	str	r4, [sp, #0]
9001a02e:	6e0c      	ldr	r4, [r1, #96]	@ 0x60
9001a030:	4639      	mov	r1, r7
9001a032:	47a0      	blx	r4
9001a034:	b007      	add	sp, #28
9001a036:	bdf0      	pop	{r4, r5, r6, r7, pc}
9001a038:	f010 0f02 	tst.w	r0, #2
9001a03c:	e7e7      	b.n	9001a00e <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x36>
9001a03e:	6803      	ldr	r3, [r0, #0]
9001a040:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9001a042:	4798      	blx	r3
9001a044:	4b08      	ldr	r3, [pc, #32]	@ (9001a068 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
9001a046:	4601      	mov	r1, r0
9001a048:	4630      	mov	r0, r6
9001a04a:	881a      	ldrh	r2, [r3, #0]
9001a04c:	6833      	ldr	r3, [r6, #0]
9001a04e:	e9cd 7500 	strd	r7, r5, [sp]
9001a052:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
9001a054:	ab04      	add	r3, sp, #16
9001a056:	47a8      	blx	r5
9001a058:	6820      	ldr	r0, [r4, #0]
9001a05a:	6803      	ldr	r3, [r0, #0]
9001a05c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9001a05e:	4798      	blx	r3
9001a060:	e7e8      	b.n	9001a034 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
9001a062:	bf00      	nop
9001a064:	2402630c 	.word	0x2402630c
9001a068:	24026306 	.word	0x24026306

9001a06c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
9001a06c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9001a070:	f89d 7024 	ldrb.w	r7, [sp, #36]	@ 0x24
9001a074:	4688      	mov	r8, r1
9001a076:	4614      	mov	r4, r2
9001a078:	461d      	mov	r5, r3
9001a07a:	9e08      	ldr	r6, [sp, #32]
9001a07c:	2f00      	cmp	r7, #0
9001a07e:	f000 80ab 	beq.w	9001a1d8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
9001a082:	4618      	mov	r0, r3
9001a084:	f7f6 fa1f 	bl	900104c6 <_ZNK8touchgfx4Rect7isEmptyEv>
9001a088:	2800      	cmp	r0, #0
9001a08a:	f040 80a5 	bne.w	9001a1d8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
9001a08e:	f9b5 1000 	ldrsh.w	r1, [r5]
9001a092:	2fff      	cmp	r7, #255	@ 0xff
9001a094:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
9001a098:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
9001a09c:	fb04 1303 	mla	r3, r4, r3, r1
9001a0a0:	f9b5 5006 	ldrsh.w	r5, [r5, #6]
9001a0a4:	eba4 0200 	sub.w	r2, r4, r0
9001a0a8:	eb08 0143 	add.w	r1, r8, r3, lsl #1
9001a0ac:	fb04 f505 	mul.w	r5, r4, r5
9001a0b0:	ea4f 2816 	mov.w	r8, r6, lsr #8
9001a0b4:	eb01 0545 	add.w	r5, r1, r5, lsl #1
9001a0b8:	d04a      	beq.n	9001a150 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe4>
9001a0ba:	b2bc      	uxth	r4, r7
9001a0bc:	f1c7 0cff 	rsb	ip, r7, #255	@ 0xff
9001a0c0:	f3c6 4e07 	ubfx	lr, r6, #16, #8
9001a0c4:	fa5f f788 	uxtb.w	r7, r8
9001a0c8:	b2f3      	uxtb	r3, r6
9001a0ca:	0040      	lsls	r0, r0, #1
9001a0cc:	fb0e fe04 	mul.w	lr, lr, r4
9001a0d0:	4367      	muls	r7, r4
9001a0d2:	ea4f 0842 	mov.w	r8, r2, lsl #1
9001a0d6:	4363      	muls	r3, r4
9001a0d8:	fa1f fc8c 	uxth.w	ip, ip
9001a0dc:	42a9      	cmp	r1, r5
9001a0de:	d27b      	bcs.n	9001a1d8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
9001a0e0:	eb01 0900 	add.w	r9, r1, r0
9001a0e4:	4549      	cmp	r1, r9
9001a0e6:	d231      	bcs.n	9001a14c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe0>
9001a0e8:	880a      	ldrh	r2, [r1, #0]
9001a0ea:	1214      	asrs	r4, r2, #8
9001a0ec:	10d6      	asrs	r6, r2, #3
9001a0ee:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
9001a0f2:	00d2      	lsls	r2, r2, #3
9001a0f4:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
9001a0f8:	b2d2      	uxtb	r2, r2
9001a0fa:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
9001a0fe:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
9001a102:	fb14 f40c 	smulbb	r4, r4, ip
9001a106:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
9001a10a:	fb12 f20c 	smulbb	r2, r2, ip
9001a10e:	fb16 f60c 	smulbb	r6, r6, ip
9001a112:	4474      	add	r4, lr
9001a114:	441a      	add	r2, r3
9001a116:	b2a4      	uxth	r4, r4
9001a118:	443e      	add	r6, r7
9001a11a:	b292      	uxth	r2, r2
9001a11c:	f104 0a01 	add.w	sl, r4, #1
9001a120:	b2b6      	uxth	r6, r6
9001a122:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
9001a126:	f102 0a01 	add.w	sl, r2, #1
9001a12a:	eb0a 2212 	add.w	r2, sl, r2, lsr #8
9001a12e:	f404 4478 	and.w	r4, r4, #63488	@ 0xf800
9001a132:	f3c2 22c4 	ubfx	r2, r2, #11, #5
9001a136:	4322      	orrs	r2, r4
9001a138:	1c74      	adds	r4, r6, #1
9001a13a:	eb04 2616 	add.w	r6, r4, r6, lsr #8
9001a13e:	0976      	lsrs	r6, r6, #5
9001a140:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
9001a144:	4332      	orrs	r2, r6
9001a146:	f821 2b02 	strh.w	r2, [r1], #2
9001a14a:	e7cb      	b.n	9001a0e4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x78>
9001a14c:	4441      	add	r1, r8
9001a14e:	e7c5      	b.n	9001a0dc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x70>
9001a150:	0973      	lsrs	r3, r6, #5
9001a152:	4f22      	ldr	r7, [pc, #136]	@ (9001a1dc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x170>)
9001a154:	f3c6 06c4 	ubfx	r6, r6, #3, #5
9001a158:	ea08 0707 	and.w	r7, r8, r7
9001a15c:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
9001a160:	433b      	orrs	r3, r7
9001a162:	07e7      	lsls	r7, r4, #31
9001a164:	ea43 0306 	orr.w	r3, r3, r6
9001a168:	b29b      	uxth	r3, r3
9001a16a:	d50b      	bpl.n	9001a184 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x118>
9001a16c:	0040      	lsls	r0, r0, #1
9001a16e:	0052      	lsls	r2, r2, #1
9001a170:	42a9      	cmp	r1, r5
9001a172:	d231      	bcs.n	9001a1d8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
9001a174:	180c      	adds	r4, r1, r0
9001a176:	42a1      	cmp	r1, r4
9001a178:	d202      	bcs.n	9001a180 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x114>
9001a17a:	f821 3b02 	strh.w	r3, [r1], #2
9001a17e:	e7fa      	b.n	9001a176 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x10a>
9001a180:	4411      	add	r1, r2
9001a182:	e7f5      	b.n	9001a170 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x104>
9001a184:	078e      	lsls	r6, r1, #30
9001a186:	d008      	beq.n	9001a19a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12e>
9001a188:	0066      	lsls	r6, r4, #1
9001a18a:	460a      	mov	r2, r1
9001a18c:	42aa      	cmp	r2, r5
9001a18e:	d202      	bcs.n	9001a196 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12a>
9001a190:	8013      	strh	r3, [r2, #0]
9001a192:	4432      	add	r2, r6
9001a194:	e7fa      	b.n	9001a18c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x120>
9001a196:	3102      	adds	r1, #2
9001a198:	3801      	subs	r0, #1
9001a19a:	07c2      	lsls	r2, r0, #31
9001a19c:	d50b      	bpl.n	9001a1b6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x14a>
9001a19e:	f100 4200 	add.w	r2, r0, #2147483648	@ 0x80000000
9001a1a2:	0066      	lsls	r6, r4, #1
9001a1a4:	3a01      	subs	r2, #1
9001a1a6:	eb01 0242 	add.w	r2, r1, r2, lsl #1
9001a1aa:	42aa      	cmp	r2, r5
9001a1ac:	d202      	bcs.n	9001a1b4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x148>
9001a1ae:	8013      	strh	r3, [r2, #0]
9001a1b0:	4432      	add	r2, r6
9001a1b2:	e7fa      	b.n	9001a1aa <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x13e>
9001a1b4:	3801      	subs	r0, #1
9001a1b6:	b178      	cbz	r0, 9001a1d8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
9001a1b8:	1040      	asrs	r0, r0, #1
9001a1ba:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
9001a1be:	0080      	lsls	r0, r0, #2
9001a1c0:	0064      	lsls	r4, r4, #1
9001a1c2:	42a9      	cmp	r1, r5
9001a1c4:	d208      	bcs.n	9001a1d8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
9001a1c6:	180e      	adds	r6, r1, r0
9001a1c8:	460a      	mov	r2, r1
9001a1ca:	42b2      	cmp	r2, r6
9001a1cc:	d202      	bcs.n	9001a1d4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
9001a1ce:	f842 3b04 	str.w	r3, [r2], #4
9001a1d2:	e7fa      	b.n	9001a1ca <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x15e>
9001a1d4:	4421      	add	r1, r4
9001a1d6:	e7f4      	b.n	9001a1c2 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x156>
9001a1d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9001a1dc:	00fff800 	.word	0x00fff800

9001a1e0 <_ZN8touchgfx8LCD16bppC1Ev>:
9001a1e0:	2200      	movs	r2, #0
9001a1e2:	4910      	ldr	r1, [pc, #64]	@ (9001a224 <_ZN8touchgfx8LCD16bppC1Ev+0x44>)
9001a1e4:	6042      	str	r2, [r0, #4]
9001a1e6:	6001      	str	r1, [r0, #0]
9001a1e8:	e9c0 2202 	strd	r2, r2, [r0, #8]
9001a1ec:	e9c0 2204 	strd	r2, r2, [r0, #16]
9001a1f0:	e9c0 2206 	strd	r2, r2, [r0, #24]
9001a1f4:	e9c0 2208 	strd	r2, r2, [r0, #32]
9001a1f8:	e9c0 220a 	strd	r2, r2, [r0, #40]	@ 0x28
9001a1fc:	e9c0 220c 	strd	r2, r2, [r0, #48]	@ 0x30
9001a200:	e9c0 220e 	strd	r2, r2, [r0, #56]	@ 0x38
9001a204:	e9c0 2210 	strd	r2, r2, [r0, #64]	@ 0x40
9001a208:	e9c0 2212 	strd	r2, r2, [r0, #72]	@ 0x48
9001a20c:	e9c0 2214 	strd	r2, r2, [r0, #80]	@ 0x50
9001a210:	e9c0 2216 	strd	r2, r2, [r0, #88]	@ 0x58
9001a214:	e9c0 2218 	strd	r2, r2, [r0, #96]	@ 0x60
9001a218:	e9c0 221a 	strd	r2, r2, [r0, #104]	@ 0x68
9001a21c:	e9c0 221c 	strd	r2, r2, [r0, #112]	@ 0x70
9001a220:	4770      	bx	lr
9001a222:	bf00      	nop
9001a224:	90026e34 	.word	0x90026e34

9001a228 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
9001a228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001a22c:	b08d      	sub	sp, #52	@ 0x34
9001a22e:	460d      	mov	r5, r1
9001a230:	4604      	mov	r4, r0
9001a232:	4699      	mov	r9, r3
9001a234:	6808      	ldr	r0, [r1, #0]
9001a236:	ab08      	add	r3, sp, #32
9001a238:	6849      	ldr	r1, [r1, #4]
9001a23a:	c303      	stmia	r3!, {r0, r1}
9001a23c:	6810      	ldr	r0, [r2, #0]
9001a23e:	ab0a      	add	r3, sp, #40	@ 0x28
9001a240:	6851      	ldr	r1, [r2, #4]
9001a242:	c303      	stmia	r3!, {r0, r1}
9001a244:	a808      	add	r0, sp, #32
9001a246:	f7f9 fb2b 	bl	900138a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001a24a:	4629      	mov	r1, r5
9001a24c:	a80a      	add	r0, sp, #40	@ 0x28
9001a24e:	4d67      	ldr	r5, [pc, #412]	@ (9001a3ec <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
9001a250:	f7f9 fb6a 	bl	90013928 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
9001a254:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	@ 0x28
9001a258:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	@ 0x2a
9001a25c:	f8bd 1024 	ldrh.w	r1, [sp, #36]	@ 0x24
9001a260:	6828      	ldr	r0, [r5, #0]
9001a262:	fb11 2103 	smlabb	r1, r1, r3, r2
9001a266:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	@ 0x2c
9001a26a:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	@ 0x2e
9001a26e:	eb04 0481 	add.w	r4, r4, r1, lsl #2
9001a272:	f8bd 1020 	ldrh.w	r1, [sp, #32]
9001a276:	440a      	add	r2, r1
9001a278:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
9001a27c:	f8bd 2022 	ldrh.w	r2, [sp, #34]	@ 0x22
9001a280:	4413      	add	r3, r2
9001a282:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
9001a286:	6803      	ldr	r3, [r0, #0]
9001a288:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
9001a28a:	4798      	blx	r3
9001a28c:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
9001a290:	d119      	bne.n	9001a2c6 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
9001a292:	f010 0f20 	tst.w	r0, #32
9001a296:	6828      	ldr	r0, [r5, #0]
9001a298:	d018      	beq.n	9001a2cc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
9001a29a:	2500      	movs	r5, #0
9001a29c:	6801      	ldr	r1, [r0, #0]
9001a29e:	b2b6      	uxth	r6, r6
9001a2a0:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
9001a2a4:	f8bd 2028 	ldrh.w	r2, [sp, #40]	@ 0x28
9001a2a8:	9601      	str	r6, [sp, #4]
9001a2aa:	e9cd 9503 	strd	r9, r5, [sp, #12]
9001a2ae:	f8bd 5024 	ldrh.w	r5, [sp, #36]	@ 0x24
9001a2b2:	9502      	str	r5, [sp, #8]
9001a2b4:	fa1f f588 	uxth.w	r5, r8
9001a2b8:	9500      	str	r5, [sp, #0]
9001a2ba:	6d0d      	ldr	r5, [r1, #80]	@ 0x50
9001a2bc:	4621      	mov	r1, r4
9001a2be:	47a8      	blx	r5
9001a2c0:	b00d      	add	sp, #52	@ 0x34
9001a2c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001a2c6:	f010 0f40 	tst.w	r0, #64	@ 0x40
9001a2ca:	e7e4      	b.n	9001a296 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
9001a2cc:	6803      	ldr	r3, [r0, #0]
9001a2ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9001a2d0:	4798      	blx	r3
9001a2d2:	4947      	ldr	r1, [pc, #284]	@ (9001a3f0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c8>)
9001a2d4:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
9001a2d8:	880b      	ldrh	r3, [r1, #0]
9001a2da:	468a      	mov	sl, r1
9001a2dc:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	@ 0x28
9001a2e0:	fb03 5202 	mla	r2, r3, r2, r5
9001a2e4:	4373      	muls	r3, r6
9001a2e6:	eb00 0042 	add.w	r0, r0, r2, lsl #1
9001a2ea:	eb00 0343 	add.w	r3, r0, r3, lsl #1
9001a2ee:	9307      	str	r3, [sp, #28]
9001a2f0:	ea4f 0348 	mov.w	r3, r8, lsl #1
9001a2f4:	9306      	str	r3, [sp, #24]
9001a2f6:	9b07      	ldr	r3, [sp, #28]
9001a2f8:	4298      	cmp	r0, r3
9001a2fa:	d270      	bcs.n	9001a3de <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b6>
9001a2fc:	9b06      	ldr	r3, [sp, #24]
9001a2fe:	4621      	mov	r1, r4
9001a300:	eb00 0b03 	add.w	fp, r0, r3
9001a304:	4558      	cmp	r0, fp
9001a306:	d25d      	bcs.n	9001a3c4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x19c>
9001a308:	f851 4b04 	ldr.w	r4, [r1], #4
9001a30c:	0e23      	lsrs	r3, r4, #24
9001a30e:	d014      	beq.n	9001a33a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
9001a310:	2bff      	cmp	r3, #255	@ 0xff
9001a312:	ea4f 2c14 	mov.w	ip, r4, lsr #8
9001a316:	d112      	bne.n	9001a33e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
9001a318:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
9001a31c:	d10f      	bne.n	9001a33e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
9001a31e:	0963      	lsrs	r3, r4, #5
9001a320:	f42c 6cff 	bic.w	ip, ip, #2040	@ 0x7f8
9001a324:	f3c4 04c4 	ubfx	r4, r4, #3, #5
9001a328:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
9001a32c:	f02c 0c07 	bic.w	ip, ip, #7
9001a330:	ea43 0c0c 	orr.w	ip, r3, ip
9001a334:	ea4c 0404 	orr.w	r4, ip, r4
9001a338:	8004      	strh	r4, [r0, #0]
9001a33a:	3002      	adds	r0, #2
9001a33c:	e7e2      	b.n	9001a304 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xdc>
9001a33e:	fb09 f303 	mul.w	r3, r9, r3
9001a342:	8807      	ldrh	r7, [r0, #0]
9001a344:	f3c4 4e07 	ubfx	lr, r4, #16, #8
9001a348:	fa5f fc8c 	uxtb.w	ip, ip
9001a34c:	1c5a      	adds	r2, r3, #1
9001a34e:	123e      	asrs	r6, r7, #8
9001a350:	10fd      	asrs	r5, r7, #3
9001a352:	eb02 2223 	add.w	r2, r2, r3, asr #8
9001a356:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
9001a35a:	00ff      	lsls	r7, r7, #3
9001a35c:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
9001a360:	1212      	asrs	r2, r2, #8
9001a362:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
9001a366:	b293      	uxth	r3, r2
9001a368:	43d2      	mvns	r2, r2
9001a36a:	b2ff      	uxtb	r7, r7
9001a36c:	fb1e fe03 	smulbb	lr, lr, r3
9001a370:	b2d2      	uxtb	r2, r2
9001a372:	fb1c fc03 	smulbb	ip, ip, r3
9001a376:	b2e4      	uxtb	r4, r4
9001a378:	fb06 e602 	mla	r6, r6, r2, lr
9001a37c:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
9001a380:	fb14 f403 	smulbb	r4, r4, r3
9001a384:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
9001a388:	b2b6      	uxth	r6, r6
9001a38a:	fb05 c502 	mla	r5, r5, r2, ip
9001a38e:	fb07 4702 	mla	r7, r7, r2, r4
9001a392:	f106 0e01 	add.w	lr, r6, #1
9001a396:	b2ad      	uxth	r5, r5
9001a398:	b2bf      	uxth	r7, r7
9001a39a:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
9001a39e:	f105 0c01 	add.w	ip, r5, #1
9001a3a2:	f406 4e78 	and.w	lr, r6, #63488	@ 0xf800
9001a3a6:	1c7e      	adds	r6, r7, #1
9001a3a8:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
9001a3ac:	eb06 2617 	add.w	r6, r6, r7, lsr #8
9001a3b0:	096d      	lsrs	r5, r5, #5
9001a3b2:	f3c6 26c4 	ubfx	r6, r6, #11, #5
9001a3b6:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
9001a3ba:	ea46 060e 	orr.w	r6, r6, lr
9001a3be:	432e      	orrs	r6, r5
9001a3c0:	8006      	strh	r6, [r0, #0]
9001a3c2:	e7ba      	b.n	9001a33a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
9001a3c4:	f8ba 3000 	ldrh.w	r3, [sl]
9001a3c8:	f9bd 4024 	ldrsh.w	r4, [sp, #36]	@ 0x24
9001a3cc:	eba3 0308 	sub.w	r3, r3, r8
9001a3d0:	eba4 0408 	sub.w	r4, r4, r8
9001a3d4:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001a3d8:	eb01 0484 	add.w	r4, r1, r4, lsl #2
9001a3dc:	e78b      	b.n	9001a2f6 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xce>
9001a3de:	4b03      	ldr	r3, [pc, #12]	@ (9001a3ec <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
9001a3e0:	6818      	ldr	r0, [r3, #0]
9001a3e2:	6803      	ldr	r3, [r0, #0]
9001a3e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9001a3e6:	4798      	blx	r3
9001a3e8:	e76a      	b.n	9001a2c0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
9001a3ea:	bf00      	nop
9001a3ec:	2402630c 	.word	0x2402630c
9001a3f0:	24026306 	.word	0x24026306

9001a3f4 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>:
9001a3f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
9001a3f8:	b085      	sub	sp, #20
9001a3fa:	6810      	ldr	r0, [r2, #0]
9001a3fc:	460c      	mov	r4, r1
9001a3fe:	6851      	ldr	r1, [r2, #4]
9001a400:	466d      	mov	r5, sp
9001a402:	4616      	mov	r6, r2
9001a404:	c503      	stmia	r5!, {r0, r1}
9001a406:	6818      	ldr	r0, [r3, #0]
9001a408:	6859      	ldr	r1, [r3, #4]
9001a40a:	c503      	stmia	r5!, {r0, r1}
9001a40c:	4668      	mov	r0, sp
9001a40e:	4d2e      	ldr	r5, [pc, #184]	@ (9001a4c8 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd4>)
9001a410:	f7f9 fa46 	bl	900138a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001a414:	4631      	mov	r1, r6
9001a416:	a802      	add	r0, sp, #8
9001a418:	4e2c      	ldr	r6, [pc, #176]	@ (9001a4cc <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd8>)
9001a41a:	f7f9 fa85 	bl	90013928 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
9001a41e:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
9001a422:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
9001a426:	f8bd 1004 	ldrh.w	r1, [sp, #4]
9001a42a:	6828      	ldr	r0, [r5, #0]
9001a42c:	fb11 2103 	smlabb	r1, r1, r3, r2
9001a430:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
9001a434:	f9bd 800e 	ldrsh.w	r8, [sp, #14]
9001a438:	eb04 0481 	add.w	r4, r4, r1, lsl #2
9001a43c:	f8bd 1000 	ldrh.w	r1, [sp]
9001a440:	440a      	add	r2, r1
9001a442:	f8ad 2008 	strh.w	r2, [sp, #8]
9001a446:	f8bd 2002 	ldrh.w	r2, [sp, #2]
9001a44a:	4413      	add	r3, r2
9001a44c:	f8ad 300a 	strh.w	r3, [sp, #10]
9001a450:	6803      	ldr	r3, [r0, #0]
9001a452:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9001a454:	4798      	blx	r3
9001a456:	8833      	ldrh	r3, [r6, #0]
9001a458:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
9001a45c:	ea4f 0c47 	mov.w	ip, r7, lsl #1
9001a460:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
9001a464:	f8df e068 	ldr.w	lr, [pc, #104]	@ 9001a4d0 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xdc>
9001a468:	fb03 1202 	mla	r2, r3, r2, r1
9001a46c:	fb08 f303 	mul.w	r3, r8, r3
9001a470:	eb00 0042 	add.w	r0, r0, r2, lsl #1
9001a474:	eb00 0343 	add.w	r3, r0, r3, lsl #1
9001a478:	4298      	cmp	r0, r3
9001a47a:	d21d      	bcs.n	9001a4b8 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xc4>
9001a47c:	eb00 080c 	add.w	r8, r0, ip
9001a480:	4540      	cmp	r0, r8
9001a482:	d20f      	bcs.n	9001a4a4 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xb0>
9001a484:	f854 1b04 	ldr.w	r1, [r4], #4
9001a488:	ea4f 1951 	mov.w	r9, r1, lsr #5
9001a48c:	ea0e 2211 	and.w	r2, lr, r1, lsr #8
9001a490:	f3c1 01c4 	ubfx	r1, r1, #3, #5
9001a494:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
9001a498:	ea42 0209 	orr.w	r2, r2, r9
9001a49c:	430a      	orrs	r2, r1
9001a49e:	f820 2b02 	strh.w	r2, [r0], #2
9001a4a2:	e7ed      	b.n	9001a480 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x8c>
9001a4a4:	8832      	ldrh	r2, [r6, #0]
9001a4a6:	1bd2      	subs	r2, r2, r7
9001a4a8:	eb00 0042 	add.w	r0, r0, r2, lsl #1
9001a4ac:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
9001a4b0:	1bd2      	subs	r2, r2, r7
9001a4b2:	eb04 0482 	add.w	r4, r4, r2, lsl #2
9001a4b6:	e7df      	b.n	9001a478 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x84>
9001a4b8:	6828      	ldr	r0, [r5, #0]
9001a4ba:	6803      	ldr	r3, [r0, #0]
9001a4bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9001a4be:	4798      	blx	r3
9001a4c0:	b005      	add	sp, #20
9001a4c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
9001a4c6:	bf00      	nop
9001a4c8:	2402630c 	.word	0x2402630c
9001a4cc:	24026306 	.word	0x24026306
9001a4d0:	fffff800 	.word	0xfffff800

9001a4d4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>:
9001a4d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9001a4d8:	b08e      	sub	sp, #56	@ 0x38
9001a4da:	460e      	mov	r6, r1
9001a4dc:	4604      	mov	r4, r0
9001a4de:	461d      	mov	r5, r3
9001a4e0:	6808      	ldr	r0, [r1, #0]
9001a4e2:	ab0a      	add	r3, sp, #40	@ 0x28
9001a4e4:	6849      	ldr	r1, [r1, #4]
9001a4e6:	f8df 81d4 	ldr.w	r8, [pc, #468]	@ 9001a6bc <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>
9001a4ea:	f8df 91d4 	ldr.w	r9, [pc, #468]	@ 9001a6c0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1ec>
9001a4ee:	c303      	stmia	r3!, {r0, r1}
9001a4f0:	6810      	ldr	r0, [r2, #0]
9001a4f2:	ab0c      	add	r3, sp, #48	@ 0x30
9001a4f4:	6851      	ldr	r1, [r2, #4]
9001a4f6:	c303      	stmia	r3!, {r0, r1}
9001a4f8:	a80a      	add	r0, sp, #40	@ 0x28
9001a4fa:	f7f9 f9d1 	bl	900138a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001a4fe:	4631      	mov	r1, r6
9001a500:	a80c      	add	r0, sp, #48	@ 0x30
9001a502:	f7f9 fa11 	bl	90013928 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
9001a506:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
9001a50a:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
9001a50e:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
9001a512:	f8d8 0000 	ldr.w	r0, [r8]
9001a516:	fb11 2103 	smlabb	r1, r1, r3, r2
9001a51a:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	@ 0x34
9001a51e:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	@ 0x36
9001a522:	eb01 0141 	add.w	r1, r1, r1, lsl #1
9001a526:	440c      	add	r4, r1
9001a528:	f8bd 1028 	ldrh.w	r1, [sp, #40]	@ 0x28
9001a52c:	440a      	add	r2, r1
9001a52e:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
9001a532:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
9001a536:	4413      	add	r3, r2
9001a538:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
9001a53c:	6803      	ldr	r3, [r0, #0]
9001a53e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
9001a540:	4798      	blx	r3
9001a542:	2dff      	cmp	r5, #255	@ 0xff
9001a544:	d124      	bne.n	9001a590 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xbc>
9001a546:	f010 0f01 	tst.w	r0, #1
9001a54a:	f8d8 0000 	ldr.w	r0, [r8]
9001a54e:	d022      	beq.n	9001a596 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xc2>
9001a550:	2100      	movs	r1, #0
9001a552:	f04f 0e01 	mov.w	lr, #1
9001a556:	f8d0 c000 	ldr.w	ip, [r0]
9001a55a:	b2b6      	uxth	r6, r6
9001a55c:	f8cd e018 	str.w	lr, [sp, #24]
9001a560:	b2bf      	uxth	r7, r7
9001a562:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
9001a566:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
9001a56a:	e9cd 1107 	strd	r1, r1, [sp, #28]
9001a56e:	f8b9 e000 	ldrh.w	lr, [r9]
9001a572:	9503      	str	r5, [sp, #12]
9001a574:	9601      	str	r6, [sp, #4]
9001a576:	9700      	str	r7, [sp, #0]
9001a578:	e9cd 1e04 	strd	r1, lr, [sp, #16]
9001a57c:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
9001a580:	9102      	str	r1, [sp, #8]
9001a582:	4621      	mov	r1, r4
9001a584:	f8dc 5040 	ldr.w	r5, [ip, #64]	@ 0x40
9001a588:	47a8      	blx	r5
9001a58a:	b00e      	add	sp, #56	@ 0x38
9001a58c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9001a590:	f010 0f04 	tst.w	r0, #4
9001a594:	e7d9      	b.n	9001a54a <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x76>
9001a596:	6803      	ldr	r3, [r0, #0]
9001a598:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9001a59a:	4798      	blx	r3
9001a59c:	f8b9 3000 	ldrh.w	r3, [r9]
9001a5a0:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
9001a5a4:	ea4f 0e47 	mov.w	lr, r7, lsl #1
9001a5a8:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	@ 0x30
9001a5ac:	435e      	muls	r6, r3
9001a5ae:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	@ 0x2c
9001a5b2:	2dff      	cmp	r5, #255	@ 0xff
9001a5b4:	fb03 1202 	mla	r2, r3, r2, r1
9001a5b8:	ebac 0c07 	sub.w	ip, ip, r7
9001a5bc:	eba3 0707 	sub.w	r7, r3, r7
9001a5c0:	eb00 0042 	add.w	r0, r0, r2, lsl #1
9001a5c4:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
9001a5c8:	eb00 0646 	add.w	r6, r0, r6, lsl #1
9001a5cc:	ea4f 0747 	mov.w	r7, r7, lsl #1
9001a5d0:	d049      	beq.n	9001a666 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x192>
9001a5d2:	43eb      	mvns	r3, r5
9001a5d4:	fa1f f985 	uxth.w	r9, r5
9001a5d8:	b2db      	uxtb	r3, r3
9001a5da:	42b0      	cmp	r0, r6
9001a5dc:	d266      	bcs.n	9001a6ac <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
9001a5de:	eb00 0a0e 	add.w	sl, r0, lr
9001a5e2:	4550      	cmp	r0, sl
9001a5e4:	4621      	mov	r1, r4
9001a5e6:	f104 0403 	add.w	r4, r4, #3
9001a5ea:	d25b      	bcs.n	9001a6a4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d0>
9001a5ec:	8802      	ldrh	r2, [r0, #0]
9001a5ee:	f814 1c01 	ldrb.w	r1, [r4, #-1]
9001a5f2:	ea4f 2822 	mov.w	r8, r2, asr #8
9001a5f6:	fb11 f109 	smulbb	r1, r1, r9
9001a5fa:	10d5      	asrs	r5, r2, #3
9001a5fc:	f008 08f8 	and.w	r8, r8, #248	@ 0xf8
9001a600:	00d2      	lsls	r2, r2, #3
9001a602:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
9001a606:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
9001a60a:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
9001a60e:	fb08 1803 	mla	r8, r8, r3, r1
9001a612:	f814 1c02 	ldrb.w	r1, [r4, #-2]
9001a616:	b2d2      	uxtb	r2, r2
9001a618:	fb11 f109 	smulbb	r1, r1, r9
9001a61c:	fa1f f888 	uxth.w	r8, r8
9001a620:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
9001a624:	fb05 1503 	mla	r5, r5, r3, r1
9001a628:	f814 1c03 	ldrb.w	r1, [r4, #-3]
9001a62c:	fb11 f109 	smulbb	r1, r1, r9
9001a630:	b2ad      	uxth	r5, r5
9001a632:	fb02 1203 	mla	r2, r2, r3, r1
9001a636:	f108 0101 	add.w	r1, r8, #1
9001a63a:	b292      	uxth	r2, r2
9001a63c:	eb01 2818 	add.w	r8, r1, r8, lsr #8
9001a640:	1c51      	adds	r1, r2, #1
9001a642:	f408 4878 	and.w	r8, r8, #63488	@ 0xf800
9001a646:	eb01 2212 	add.w	r2, r1, r2, lsr #8
9001a64a:	1c69      	adds	r1, r5, #1
9001a64c:	eb01 2515 	add.w	r5, r1, r5, lsr #8
9001a650:	f3c2 22c4 	ubfx	r2, r2, #11, #5
9001a654:	096d      	lsrs	r5, r5, #5
9001a656:	ea42 0208 	orr.w	r2, r2, r8
9001a65a:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
9001a65e:	432a      	orrs	r2, r5
9001a660:	f820 2b02 	strh.w	r2, [r0], #2
9001a664:	e7bd      	b.n	9001a5e2 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x10e>
9001a666:	4a14      	ldr	r2, [pc, #80]	@ (9001a6b8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e4>)
9001a668:	42b0      	cmp	r0, r6
9001a66a:	d21f      	bcs.n	9001a6ac <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
9001a66c:	eb00 050e 	add.w	r5, r0, lr
9001a670:	42a8      	cmp	r0, r5
9001a672:	4621      	mov	r1, r4
9001a674:	f104 0403 	add.w	r4, r4, #3
9001a678:	d210      	bcs.n	9001a69c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1c8>
9001a67a:	f814 3c02 	ldrb.w	r3, [r4, #-2]
9001a67e:	f814 1c01 	ldrb.w	r1, [r4, #-1]
9001a682:	00db      	lsls	r3, r3, #3
9001a684:	ea02 2101 	and.w	r1, r2, r1, lsl #8
9001a688:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
9001a68c:	430b      	orrs	r3, r1
9001a68e:	f814 1c03 	ldrb.w	r1, [r4, #-3]
9001a692:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
9001a696:	f820 3b02 	strh.w	r3, [r0], #2
9001a69a:	e7e9      	b.n	9001a670 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x19c>
9001a69c:	4438      	add	r0, r7
9001a69e:	eb01 040c 	add.w	r4, r1, ip
9001a6a2:	e7e1      	b.n	9001a668 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x194>
9001a6a4:	4438      	add	r0, r7
9001a6a6:	eb01 040c 	add.w	r4, r1, ip
9001a6aa:	e796      	b.n	9001a5da <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x106>
9001a6ac:	4b03      	ldr	r3, [pc, #12]	@ (9001a6bc <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>)
9001a6ae:	6818      	ldr	r0, [r3, #0]
9001a6b0:	6803      	ldr	r3, [r0, #0]
9001a6b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9001a6b4:	4798      	blx	r3
9001a6b6:	e768      	b.n	9001a58a <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xb6>
9001a6b8:	fffff800 	.word	0xfffff800
9001a6bc:	2402630c 	.word	0x2402630c
9001a6c0:	24026306 	.word	0x24026306

9001a6c4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
9001a6c4:	b4f0      	push	{r4, r5, r6, r7}
9001a6c6:	4616      	mov	r6, r2
9001a6c8:	461c      	mov	r4, r3
9001a6ca:	460d      	mov	r5, r1
9001a6cc:	9a04      	ldr	r2, [sp, #16]
9001a6ce:	2e01      	cmp	r6, #1
9001a6d0:	f89d 3014 	ldrb.w	r3, [sp, #20]
9001a6d4:	f89d 7018 	ldrb.w	r7, [sp, #24]
9001a6d8:	d012      	beq.n	9001a700 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x3c>
9001a6da:	d303      	bcc.n	9001a6e4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x20>
9001a6dc:	2e02      	cmp	r6, #2
9001a6de:	d00a      	beq.n	9001a6f6 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x32>
9001a6e0:	bcf0      	pop	{r4, r5, r6, r7}
9001a6e2:	4770      	bx	lr
9001a6e4:	6805      	ldr	r5, [r0, #0]
9001a6e6:	e9cd 3704 	strd	r3, r7, [sp, #16]
9001a6ea:	68ed      	ldr	r5, [r5, #12]
9001a6ec:	4613      	mov	r3, r2
9001a6ee:	4622      	mov	r2, r4
9001a6f0:	46ac      	mov	ip, r5
9001a6f2:	bcf0      	pop	{r4, r5, r6, r7}
9001a6f4:	4760      	bx	ip
9001a6f6:	4621      	mov	r1, r4
9001a6f8:	4628      	mov	r0, r5
9001a6fa:	bcf0      	pop	{r4, r5, r6, r7}
9001a6fc:	f7ff bd94 	b.w	9001a228 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
9001a700:	4621      	mov	r1, r4
9001a702:	4628      	mov	r0, r5
9001a704:	bcf0      	pop	{r4, r5, r6, r7}
9001a706:	f7ff bee5 	b.w	9001a4d4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
	...

9001a70c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
9001a70c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001a710:	b093      	sub	sp, #76	@ 0x4c
9001a712:	4681      	mov	r9, r0
9001a714:	4688      	mov	r8, r1
9001a716:	6810      	ldr	r0, [r2, #0]
9001a718:	6851      	ldr	r1, [r2, #4]
9001a71a:	ac0e      	add	r4, sp, #56	@ 0x38
9001a71c:	4616      	mov	r6, r2
9001a71e:	f89d a070 	ldrb.w	sl, [sp, #112]	@ 0x70
9001a722:	4f6b      	ldr	r7, [pc, #428]	@ (9001a8d0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>)
9001a724:	c403      	stmia	r4!, {r0, r1}
9001a726:	6818      	ldr	r0, [r3, #0]
9001a728:	ac10      	add	r4, sp, #64	@ 0x40
9001a72a:	6859      	ldr	r1, [r3, #4]
9001a72c:	c403      	stmia	r4!, {r0, r1}
9001a72e:	a80e      	add	r0, sp, #56	@ 0x38
9001a730:	f7f9 f8b6 	bl	900138a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001a734:	4631      	mov	r1, r6
9001a736:	a810      	add	r0, sp, #64	@ 0x40
9001a738:	4e66      	ldr	r6, [pc, #408]	@ (9001a8d4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
9001a73a:	f7f9 f8f5 	bl	90013928 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
9001a73e:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	@ 0x40
9001a742:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	@ 0x42
9001a746:	f8bd 103c 	ldrh.w	r1, [sp, #60]	@ 0x3c
9001a74a:	6830      	ldr	r0, [r6, #0]
9001a74c:	fb11 2103 	smlabb	r1, r1, r3, r2
9001a750:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	@ 0x44
9001a754:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	@ 0x46
9001a758:	4489      	add	r9, r1
9001a75a:	f8bd 1038 	ldrh.w	r1, [sp, #56]	@ 0x38
9001a75e:	440a      	add	r2, r1
9001a760:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
9001a764:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
9001a768:	4413      	add	r3, r2
9001a76a:	f8ad 3042 	strh.w	r3, [sp, #66]	@ 0x42
9001a76e:	6803      	ldr	r3, [r0, #0]
9001a770:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
9001a772:	4798      	blx	r3
9001a774:	f010 0f80 	tst.w	r0, #128	@ 0x80
9001a778:	6830      	ldr	r0, [r6, #0]
9001a77a:	d01d      	beq.n	9001a7b8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
9001a77c:	2200      	movs	r2, #0
9001a77e:	6801      	ldr	r1, [r0, #0]
9001a780:	b2a4      	uxth	r4, r4
9001a782:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
9001a786:	b2ad      	uxth	r5, r5
9001a788:	e9cd 2208 	strd	r2, r2, [sp, #32]
9001a78c:	220b      	movs	r2, #11
9001a78e:	9207      	str	r2, [sp, #28]
9001a790:	883a      	ldrh	r2, [r7, #0]
9001a792:	9502      	str	r5, [sp, #8]
9001a794:	9206      	str	r2, [sp, #24]
9001a796:	2201      	movs	r2, #1
9001a798:	9401      	str	r4, [sp, #4]
9001a79a:	e9cd a204 	strd	sl, r2, [sp, #16]
9001a79e:	f8bd 203c 	ldrh.w	r2, [sp, #60]	@ 0x3c
9001a7a2:	9203      	str	r2, [sp, #12]
9001a7a4:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
9001a7a8:	9200      	str	r2, [sp, #0]
9001a7aa:	4642      	mov	r2, r8
9001a7ac:	6bcc      	ldr	r4, [r1, #60]	@ 0x3c
9001a7ae:	4649      	mov	r1, r9
9001a7b0:	47a0      	blx	r4
9001a7b2:	b013      	add	sp, #76	@ 0x4c
9001a7b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001a7b8:	6803      	ldr	r3, [r0, #0]
9001a7ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9001a7bc:	4798      	blx	r3
9001a7be:	883b      	ldrh	r3, [r7, #0]
9001a7c0:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	@ 0x42
9001a7c4:	f04f 0e04 	mov.w	lr, #4
9001a7c8:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	@ 0x40
9001a7cc:	435d      	muls	r5, r3
9001a7ce:	fb03 1202 	mla	r2, r3, r2, r1
9001a7d2:	eb00 0042 	add.w	r0, r0, r2, lsl #1
9001a7d6:	eb00 0245 	add.w	r2, r0, r5, lsl #1
9001a7da:	920c      	str	r2, [sp, #48]	@ 0x30
9001a7dc:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	@ 0x3c
9001a7e0:	1b12      	subs	r2, r2, r4
9001a7e2:	920d      	str	r2, [sp, #52]	@ 0x34
9001a7e4:	0062      	lsls	r2, r4, #1
9001a7e6:	1b1c      	subs	r4, r3, r4
9001a7e8:	920a      	str	r2, [sp, #40]	@ 0x28
9001a7ea:	0063      	lsls	r3, r4, #1
9001a7ec:	930b      	str	r3, [sp, #44]	@ 0x2c
9001a7ee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
9001a7f0:	4298      	cmp	r0, r3
9001a7f2:	d266      	bcs.n	9001a8c2 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b6>
9001a7f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
9001a7f6:	eb00 0b03 	add.w	fp, r0, r3
9001a7fa:	4558      	cmp	r0, fp
9001a7fc:	d25c      	bcs.n	9001a8b8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
9001a7fe:	f819 3b01 	ldrb.w	r3, [r9], #1
9001a802:	fb1e e303 	smlabb	r3, lr, r3, lr
9001a806:	f858 2003 	ldr.w	r2, [r8, r3]
9001a80a:	0e11      	lsrs	r1, r2, #24
9001a80c:	d012      	beq.n	9001a834 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
9001a80e:	29ff      	cmp	r1, #255	@ 0xff
9001a810:	ea4f 2712 	mov.w	r7, r2, lsr #8
9001a814:	d110      	bne.n	9001a838 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
9001a816:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
9001a81a:	d10d      	bne.n	9001a838 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
9001a81c:	0953      	lsrs	r3, r2, #5
9001a81e:	f427 67ff 	bic.w	r7, r7, #2040	@ 0x7f8
9001a822:	f3c2 02c4 	ubfx	r2, r2, #3, #5
9001a826:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
9001a82a:	f027 0707 	bic.w	r7, r7, #7
9001a82e:	431f      	orrs	r7, r3
9001a830:	433a      	orrs	r2, r7
9001a832:	8002      	strh	r2, [r0, #0]
9001a834:	3002      	adds	r0, #2
9001a836:	e7e0      	b.n	9001a7fa <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xee>
9001a838:	fb0a f101 	mul.w	r1, sl, r1
9001a83c:	8806      	ldrh	r6, [r0, #0]
9001a83e:	f3c2 4c07 	ubfx	ip, r2, #16, #8
9001a842:	b2d2      	uxtb	r2, r2
9001a844:	1c4b      	adds	r3, r1, #1
9001a846:	1235      	asrs	r5, r6, #8
9001a848:	10f4      	asrs	r4, r6, #3
9001a84a:	eb03 2321 	add.w	r3, r3, r1, asr #8
9001a84e:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
9001a852:	00f6      	lsls	r6, r6, #3
9001a854:	f004 04fc 	and.w	r4, r4, #252	@ 0xfc
9001a858:	121b      	asrs	r3, r3, #8
9001a85a:	b2f6      	uxtb	r6, r6
9001a85c:	b299      	uxth	r1, r3
9001a85e:	43db      	mvns	r3, r3
9001a860:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
9001a864:	fb1c fc01 	smulbb	ip, ip, r1
9001a868:	b2db      	uxtb	r3, r3
9001a86a:	fb12 f201 	smulbb	r2, r2, r1
9001a86e:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
9001a872:	fb05 c503 	mla	r5, r5, r3, ip
9001a876:	b2ff      	uxtb	r7, r7
9001a878:	fb06 2203 	mla	r2, r6, r3, r2
9001a87c:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
9001a880:	fb17 f701 	smulbb	r7, r7, r1
9001a884:	b2ad      	uxth	r5, r5
9001a886:	b292      	uxth	r2, r2
9001a888:	fb04 7403 	mla	r4, r4, r3, r7
9001a88c:	f105 0c01 	add.w	ip, r5, #1
9001a890:	1c57      	adds	r7, r2, #1
9001a892:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
9001a896:	eb07 2712 	add.w	r7, r7, r2, lsr #8
9001a89a:	b2a4      	uxth	r4, r4
9001a89c:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
9001a8a0:	f3c7 27c4 	ubfx	r7, r7, #11, #5
9001a8a4:	433d      	orrs	r5, r7
9001a8a6:	1c67      	adds	r7, r4, #1
9001a8a8:	eb07 2414 	add.w	r4, r7, r4, lsr #8
9001a8ac:	0964      	lsrs	r4, r4, #5
9001a8ae:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
9001a8b2:	4325      	orrs	r5, r4
9001a8b4:	8005      	strh	r5, [r0, #0]
9001a8b6:	e7bd      	b.n	9001a834 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
9001a8b8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
9001a8ba:	4418      	add	r0, r3
9001a8bc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
9001a8be:	4499      	add	r9, r3
9001a8c0:	e795      	b.n	9001a7ee <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xe2>
9001a8c2:	4b04      	ldr	r3, [pc, #16]	@ (9001a8d4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
9001a8c4:	6818      	ldr	r0, [r3, #0]
9001a8c6:	6803      	ldr	r3, [r0, #0]
9001a8c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9001a8ca:	4798      	blx	r3
9001a8cc:	e771      	b.n	9001a7b2 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xa6>
9001a8ce:	bf00      	nop
9001a8d0:	24026306 	.word	0x24026306
9001a8d4:	2402630c 	.word	0x2402630c

9001a8d8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
9001a8d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001a8dc:	b087      	sub	sp, #28
9001a8de:	4680      	mov	r8, r0
9001a8e0:	460d      	mov	r5, r1
9001a8e2:	4614      	mov	r4, r2
9001a8e4:	f89d 6040 	ldrb.w	r6, [sp, #64]	@ 0x40
9001a8e8:	2e00      	cmp	r6, #0
9001a8ea:	f000 80b9 	beq.w	9001aa60 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x188>
9001a8ee:	6810      	ldr	r0, [r2, #0]
9001a8f0:	af02      	add	r7, sp, #8
9001a8f2:	6851      	ldr	r1, [r2, #4]
9001a8f4:	c703      	stmia	r7!, {r0, r1}
9001a8f6:	6818      	ldr	r0, [r3, #0]
9001a8f8:	af04      	add	r7, sp, #16
9001a8fa:	6859      	ldr	r1, [r3, #4]
9001a8fc:	c703      	stmia	r7!, {r0, r1}
9001a8fe:	a802      	add	r0, sp, #8
9001a900:	f7f8 ffce 	bl	900138a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001a904:	4621      	mov	r1, r4
9001a906:	a804      	add	r0, sp, #16
9001a908:	f7f9 f80e 	bl	90013928 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
9001a90c:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
9001a910:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
9001a914:	f8bd 400c 	ldrh.w	r4, [sp, #12]
9001a918:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
9001a91c:	fb14 2103 	smlabb	r1, r4, r3, r2
9001a920:	eb08 0401 	add.w	r4, r8, r1
9001a924:	f8bd 1008 	ldrh.w	r1, [sp, #8]
9001a928:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
9001a92c:	440a      	add	r2, r1
9001a92e:	ea4f 0a48 	mov.w	sl, r8, lsl #1
9001a932:	f8ad 2010 	strh.w	r2, [sp, #16]
9001a936:	f8bd 200a 	ldrh.w	r2, [sp, #10]
9001a93a:	4413      	add	r3, r2
9001a93c:	f8ad 3012 	strh.w	r3, [sp, #18]
9001a940:	4b49      	ldr	r3, [pc, #292]	@ (9001aa68 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
9001a942:	6818      	ldr	r0, [r3, #0]
9001a944:	6803      	ldr	r3, [r0, #0]
9001a946:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9001a948:	4798      	blx	r3
9001a94a:	4b48      	ldr	r3, [pc, #288]	@ (9001aa6c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x194>)
9001a94c:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
9001a950:	2eff      	cmp	r6, #255	@ 0xff
9001a952:	881a      	ldrh	r2, [r3, #0]
9001a954:	f9bd c010 	ldrsh.w	ip, [sp, #16]
9001a958:	fb02 c101 	mla	r1, r2, r1, ip
9001a95c:	fb02 f207 	mul.w	r2, r2, r7
9001a960:	eb00 0041 	add.w	r0, r0, r1, lsl #1
9001a964:	f105 0104 	add.w	r1, r5, #4
9001a968:	461d      	mov	r5, r3
9001a96a:	d05a      	beq.n	9001aa22 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14a>
9001a96c:	f1c6 0eff 	rsb	lr, r6, #255	@ 0xff
9001a970:	eb00 0242 	add.w	r2, r0, r2, lsl #1
9001a974:	b2b6      	uxth	r6, r6
9001a976:	9301      	str	r3, [sp, #4]
9001a978:	fa1f fe8e 	uxth.w	lr, lr
9001a97c:	4282      	cmp	r2, r0
9001a97e:	d96a      	bls.n	9001aa56 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
9001a980:	eb00 0b0a 	add.w	fp, r0, sl
9001a984:	4583      	cmp	fp, r0
9001a986:	d940      	bls.n	9001aa0a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x132>
9001a988:	8805      	ldrh	r5, [r0, #0]
9001a98a:	f814 3b01 	ldrb.w	r3, [r4], #1
9001a98e:	122f      	asrs	r7, r5, #8
9001a990:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
9001a994:	ea4f 09e5 	mov.w	r9, r5, asr #3
9001a998:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
9001a99c:	00ed      	lsls	r5, r5, #3
9001a99e:	ea4f 2c23 	mov.w	ip, r3, asr #8
9001a9a2:	f009 09fc 	and.w	r9, r9, #252	@ 0xfc
9001a9a6:	fb17 f70e 	smulbb	r7, r7, lr
9001a9aa:	b2ed      	uxtb	r5, r5
9001a9ac:	fb19 f90e 	smulbb	r9, r9, lr
9001a9b0:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
9001a9b4:	fb15 f50e 	smulbb	r5, r5, lr
9001a9b8:	fb0c 7c06 	mla	ip, ip, r6, r7
9001a9bc:	10df      	asrs	r7, r3, #3
9001a9be:	00db      	lsls	r3, r3, #3
9001a9c0:	fa1f fc8c 	uxth.w	ip, ip
9001a9c4:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
9001a9c8:	b2db      	uxtb	r3, r3
9001a9ca:	fb07 9706 	mla	r7, r7, r6, r9
9001a9ce:	f10c 0901 	add.w	r9, ip, #1
9001a9d2:	fb03 5306 	mla	r3, r3, r6, r5
9001a9d6:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
9001a9da:	b29b      	uxth	r3, r3
9001a9dc:	f40c 4978 	and.w	r9, ip, #63488	@ 0xf800
9001a9e0:	b2bf      	uxth	r7, r7
9001a9e2:	f103 0c01 	add.w	ip, r3, #1
9001a9e6:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
9001a9ea:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
9001a9ee:	ea4c 0c09 	orr.w	ip, ip, r9
9001a9f2:	f107 0901 	add.w	r9, r7, #1
9001a9f6:	eb09 2717 	add.w	r7, r9, r7, lsr #8
9001a9fa:	097f      	lsrs	r7, r7, #5
9001a9fc:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
9001aa00:	ea4c 0c07 	orr.w	ip, ip, r7
9001aa04:	f820 cb02 	strh.w	ip, [r0], #2
9001aa08:	e7bc      	b.n	9001a984 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xac>
9001aa0a:	9b01      	ldr	r3, [sp, #4]
9001aa0c:	881b      	ldrh	r3, [r3, #0]
9001aa0e:	eba3 0308 	sub.w	r3, r3, r8
9001aa12:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001aa16:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
9001aa1a:	eba3 0308 	sub.w	r3, r3, r8
9001aa1e:	441c      	add	r4, r3
9001aa20:	e7ac      	b.n	9001a97c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xa4>
9001aa22:	eb00 0242 	add.w	r2, r0, r2, lsl #1
9001aa26:	4282      	cmp	r2, r0
9001aa28:	d915      	bls.n	9001aa56 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
9001aa2a:	eb00 060a 	add.w	r6, r0, sl
9001aa2e:	4286      	cmp	r6, r0
9001aa30:	d906      	bls.n	9001aa40 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x168>
9001aa32:	f814 3b01 	ldrb.w	r3, [r4], #1
9001aa36:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
9001aa3a:	f820 3b02 	strh.w	r3, [r0], #2
9001aa3e:	e7f6      	b.n	9001aa2e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x156>
9001aa40:	882b      	ldrh	r3, [r5, #0]
9001aa42:	eba3 0308 	sub.w	r3, r3, r8
9001aa46:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001aa4a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
9001aa4e:	eba3 0308 	sub.w	r3, r3, r8
9001aa52:	441c      	add	r4, r3
9001aa54:	e7e7      	b.n	9001aa26 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14e>
9001aa56:	4b04      	ldr	r3, [pc, #16]	@ (9001aa68 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
9001aa58:	6818      	ldr	r0, [r3, #0]
9001aa5a:	6803      	ldr	r3, [r0, #0]
9001aa5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9001aa5e:	4798      	blx	r3
9001aa60:	b007      	add	sp, #28
9001aa62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001aa66:	bf00      	nop
9001aa68:	2402630c 	.word	0x2402630c
9001aa6c:	24026306 	.word	0x24026306

9001aa70 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
9001aa70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001aa74:	b091      	sub	sp, #68	@ 0x44
9001aa76:	4680      	mov	r8, r0
9001aa78:	460f      	mov	r7, r1
9001aa7a:	4614      	mov	r4, r2
9001aa7c:	f89d 5068 	ldrb.w	r5, [sp, #104]	@ 0x68
9001aa80:	2d00      	cmp	r5, #0
9001aa82:	d051      	beq.n	9001ab28 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
9001aa84:	6810      	ldr	r0, [r2, #0]
9001aa86:	ae0c      	add	r6, sp, #48	@ 0x30
9001aa88:	6851      	ldr	r1, [r2, #4]
9001aa8a:	f8df 9200 	ldr.w	r9, [pc, #512]	@ 9001ac8c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>
9001aa8e:	c603      	stmia	r6!, {r0, r1}
9001aa90:	6818      	ldr	r0, [r3, #0]
9001aa92:	ae0e      	add	r6, sp, #56	@ 0x38
9001aa94:	6859      	ldr	r1, [r3, #4]
9001aa96:	c603      	stmia	r6!, {r0, r1}
9001aa98:	a80c      	add	r0, sp, #48	@ 0x30
9001aa9a:	f7f8 ff01 	bl	900138a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001aa9e:	4621      	mov	r1, r4
9001aaa0:	a80e      	add	r0, sp, #56	@ 0x38
9001aaa2:	f7f8 ff41 	bl	90013928 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
9001aaa6:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
9001aaaa:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
9001aaae:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
9001aab2:	f8d9 0000 	ldr.w	r0, [r9]
9001aab6:	fb11 2103 	smlabb	r1, r1, r3, r2
9001aaba:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	@ 0x3c
9001aabe:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	@ 0x3e
9001aac2:	eb08 0401 	add.w	r4, r8, r1
9001aac6:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
9001aaca:	f8df 81c4 	ldr.w	r8, [pc, #452]	@ 9001ac90 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x220>
9001aace:	440a      	add	r2, r1
9001aad0:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
9001aad4:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
9001aad8:	4413      	add	r3, r2
9001aada:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
9001aade:	6803      	ldr	r3, [r0, #0]
9001aae0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
9001aae2:	4798      	blx	r3
9001aae4:	f010 0f80 	tst.w	r0, #128	@ 0x80
9001aae8:	f8d9 0000 	ldr.w	r0, [r9]
9001aaec:	d01f      	beq.n	9001ab2e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xbe>
9001aaee:	2200      	movs	r2, #0
9001aaf0:	6801      	ldr	r1, [r0, #0]
9001aaf2:	b2b6      	uxth	r6, r6
9001aaf4:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
9001aaf8:	e9cd 2208 	strd	r2, r2, [sp, #32]
9001aafc:	220b      	movs	r2, #11
9001aafe:	9207      	str	r2, [sp, #28]
9001ab00:	f8b8 2000 	ldrh.w	r2, [r8]
9001ab04:	9601      	str	r6, [sp, #4]
9001ab06:	9206      	str	r2, [sp, #24]
9001ab08:	2201      	movs	r2, #1
9001ab0a:	e9cd 5204 	strd	r5, r2, [sp, #16]
9001ab0e:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
9001ab12:	9203      	str	r2, [sp, #12]
9001ab14:	fa1f f28a 	uxth.w	r2, sl
9001ab18:	9202      	str	r2, [sp, #8]
9001ab1a:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
9001ab1e:	9200      	str	r2, [sp, #0]
9001ab20:	463a      	mov	r2, r7
9001ab22:	6bcd      	ldr	r5, [r1, #60]	@ 0x3c
9001ab24:	4621      	mov	r1, r4
9001ab26:	47a8      	blx	r5
9001ab28:	b011      	add	sp, #68	@ 0x44
9001ab2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001ab2e:	6803      	ldr	r3, [r0, #0]
9001ab30:	ea4f 0946 	mov.w	r9, r6, lsl #1
9001ab34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9001ab36:	4798      	blx	r3
9001ab38:	f8b8 2000 	ldrh.w	r2, [r8]
9001ab3c:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
9001ab40:	2dff      	cmp	r5, #255	@ 0xff
9001ab42:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	@ 0x38
9001ab46:	fb0a fa02 	mul.w	sl, sl, r2
9001ab4a:	fb02 1303 	mla	r3, r2, r3, r1
9001ab4e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001ab52:	d062      	beq.n	9001ac1a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1aa>
9001ab54:	ea6f 0c05 	mvn.w	ip, r5
9001ab58:	eb00 034a 	add.w	r3, r0, sl, lsl #1
9001ab5c:	b2ad      	uxth	r5, r5
9001ab5e:	f8cd 802c 	str.w	r8, [sp, #44]	@ 0x2c
9001ab62:	fa5f fc8c 	uxtb.w	ip, ip
9001ab66:	930a      	str	r3, [sp, #40]	@ 0x28
9001ab68:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
9001ab6a:	4298      	cmp	r0, r3
9001ab6c:	f080 8085 	bcs.w	9001ac7a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
9001ab70:	eb00 0b09 	add.w	fp, r0, r9
9001ab74:	4558      	cmp	r0, fp
9001ab76:	d246      	bcs.n	9001ac06 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x196>
9001ab78:	f814 eb01 	ldrb.w	lr, [r4], #1
9001ab7c:	2303      	movs	r3, #3
9001ab7e:	2204      	movs	r2, #4
9001ab80:	fb13 2e0e 	smlabb	lr, r3, lr, r2
9001ab84:	8803      	ldrh	r3, [r0, #0]
9001ab86:	eb07 0a0e 	add.w	sl, r7, lr
9001ab8a:	1219      	asrs	r1, r3, #8
9001ab8c:	10da      	asrs	r2, r3, #3
9001ab8e:	f817 e00e 	ldrb.w	lr, [r7, lr]
9001ab92:	f89a 8002 	ldrb.w	r8, [sl, #2]
9001ab96:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
9001ab9a:	00db      	lsls	r3, r3, #3
9001ab9c:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
9001aba0:	fb18 f805 	smulbb	r8, r8, r5
9001aba4:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
9001aba8:	fb1e fe05 	smulbb	lr, lr, r5
9001abac:	b2db      	uxtb	r3, r3
9001abae:	fb01 810c 	mla	r1, r1, ip, r8
9001abb2:	f89a 8001 	ldrb.w	r8, [sl, #1]
9001abb6:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
9001abba:	fb18 f805 	smulbb	r8, r8, r5
9001abbe:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
9001abc2:	b289      	uxth	r1, r1
9001abc4:	fb02 820c 	mla	r2, r2, ip, r8
9001abc8:	fb03 e30c 	mla	r3, r3, ip, lr
9001abcc:	f101 0801 	add.w	r8, r1, #1
9001abd0:	b292      	uxth	r2, r2
9001abd2:	b29b      	uxth	r3, r3
9001abd4:	eb08 2111 	add.w	r1, r8, r1, lsr #8
9001abd8:	f102 0801 	add.w	r8, r2, #1
9001abdc:	f103 0e01 	add.w	lr, r3, #1
9001abe0:	eb08 2812 	add.w	r8, r8, r2, lsr #8
9001abe4:	f401 4178 	and.w	r1, r1, #63488	@ 0xf800
9001abe8:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
9001abec:	ea4f 1858 	mov.w	r8, r8, lsr #5
9001abf0:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
9001abf4:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
9001abf8:	ea4e 0101 	orr.w	r1, lr, r1
9001abfc:	ea41 0108 	orr.w	r1, r1, r8
9001ac00:	f820 1b02 	strh.w	r1, [r0], #2
9001ac04:	e7b6      	b.n	9001ab74 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x104>
9001ac06:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
9001ac08:	881b      	ldrh	r3, [r3, #0]
9001ac0a:	1b9b      	subs	r3, r3, r6
9001ac0c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001ac10:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
9001ac14:	1b9b      	subs	r3, r3, r6
9001ac16:	441c      	add	r4, r3
9001ac18:	e7a6      	b.n	9001ab68 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xf8>
9001ac1a:	eb00 0a4a 	add.w	sl, r0, sl, lsl #1
9001ac1e:	2203      	movs	r2, #3
9001ac20:	2504      	movs	r5, #4
9001ac22:	4919      	ldr	r1, [pc, #100]	@ (9001ac88 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x218>)
9001ac24:	4550      	cmp	r0, sl
9001ac26:	d228      	bcs.n	9001ac7a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
9001ac28:	eb00 0c09 	add.w	ip, r0, r9
9001ac2c:	4560      	cmp	r0, ip
9001ac2e:	4623      	mov	r3, r4
9001ac30:	d219      	bcs.n	9001ac66 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1f6>
9001ac32:	f893 e000 	ldrb.w	lr, [r3]
9001ac36:	3401      	adds	r4, #1
9001ac38:	fb12 5e0e 	smlabb	lr, r2, lr, r5
9001ac3c:	eb07 0b0e 	add.w	fp, r7, lr
9001ac40:	f817 e00e 	ldrb.w	lr, [r7, lr]
9001ac44:	f89b 3002 	ldrb.w	r3, [fp, #2]
9001ac48:	f89b b001 	ldrb.w	fp, [fp, #1]
9001ac4c:	ea01 2303 	and.w	r3, r1, r3, lsl #8
9001ac50:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
9001ac54:	f40b 6bfc 	and.w	fp, fp, #2016	@ 0x7e0
9001ac58:	ea43 030b 	orr.w	r3, r3, fp
9001ac5c:	ea43 03de 	orr.w	r3, r3, lr, lsr #3
9001ac60:	f820 3b02 	strh.w	r3, [r0], #2
9001ac64:	e7e2      	b.n	9001ac2c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1bc>
9001ac66:	f8b8 3000 	ldrh.w	r3, [r8]
9001ac6a:	1b9b      	subs	r3, r3, r6
9001ac6c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001ac70:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
9001ac74:	1b9b      	subs	r3, r3, r6
9001ac76:	441c      	add	r4, r3
9001ac78:	e7d4      	b.n	9001ac24 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
9001ac7a:	4b04      	ldr	r3, [pc, #16]	@ (9001ac8c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>)
9001ac7c:	6818      	ldr	r0, [r3, #0]
9001ac7e:	6803      	ldr	r3, [r0, #0]
9001ac80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9001ac82:	4798      	blx	r3
9001ac84:	e750      	b.n	9001ab28 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
9001ac86:	bf00      	nop
9001ac88:	fffff800 	.word	0xfffff800
9001ac8c:	2402630c 	.word	0x2402630c
9001ac90:	24026306 	.word	0x24026306

9001ac94 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
9001ac94:	b430      	push	{r4, r5}
9001ac96:	780d      	ldrb	r5, [r1, #0]
9001ac98:	f89d 4008 	ldrb.w	r4, [sp, #8]
9001ac9c:	2d01      	cmp	r5, #1
9001ac9e:	d00a      	beq.n	9001acb6 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x22>
9001aca0:	d305      	bcc.n	9001acae <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
9001aca2:	2d02      	cmp	r5, #2
9001aca4:	d10b      	bne.n	9001acbe <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x2a>
9001aca6:	9402      	str	r4, [sp, #8]
9001aca8:	bc30      	pop	{r4, r5}
9001acaa:	f7ff be15 	b.w	9001a8d8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
9001acae:	9402      	str	r4, [sp, #8]
9001acb0:	bc30      	pop	{r4, r5}
9001acb2:	f7ff bd2b 	b.w	9001a70c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
9001acb6:	9402      	str	r4, [sp, #8]
9001acb8:	bc30      	pop	{r4, r5}
9001acba:	f7ff bed9 	b.w	9001aa70 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
9001acbe:	bc30      	pop	{r4, r5}
9001acc0:	4770      	bx	lr
	...

9001acc4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
9001acc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001acc8:	b087      	sub	sp, #28
9001acca:	4604      	mov	r4, r0
9001accc:	460e      	mov	r6, r1
9001acce:	6810      	ldr	r0, [r2, #0]
9001acd0:	6851      	ldr	r1, [r2, #4]
9001acd2:	ad02      	add	r5, sp, #8
9001acd4:	4617      	mov	r7, r2
9001acd6:	f89d a040 	ldrb.w	sl, [sp, #64]	@ 0x40
9001acda:	f8df 9230 	ldr.w	r9, [pc, #560]	@ 9001af0c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
9001acde:	c503      	stmia	r5!, {r0, r1}
9001ace0:	6818      	ldr	r0, [r3, #0]
9001ace2:	ad04      	add	r5, sp, #16
9001ace4:	6859      	ldr	r1, [r3, #4]
9001ace6:	c503      	stmia	r5!, {r0, r1}
9001ace8:	a802      	add	r0, sp, #8
9001acea:	f7f8 fdd9 	bl	900138a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001acee:	4639      	mov	r1, r7
9001acf0:	a804      	add	r0, sp, #16
9001acf2:	f7f8 fe19 	bl	90013928 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
9001acf6:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
9001acfa:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
9001acfe:	f8bd 100c 	ldrh.w	r1, [sp, #12]
9001ad02:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
9001ad06:	fb11 2103 	smlabb	r1, r1, r3, r2
9001ad0a:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
9001ad0e:	eb04 0441 	add.w	r4, r4, r1, lsl #1
9001ad12:	440e      	add	r6, r1
9001ad14:	f8bd 1008 	ldrh.w	r1, [sp, #8]
9001ad18:	440a      	add	r2, r1
9001ad1a:	f8ad 2010 	strh.w	r2, [sp, #16]
9001ad1e:	f8bd 200a 	ldrh.w	r2, [sp, #10]
9001ad22:	4413      	add	r3, r2
9001ad24:	f8ad 3012 	strh.w	r3, [sp, #18]
9001ad28:	4b77      	ldr	r3, [pc, #476]	@ (9001af08 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
9001ad2a:	6818      	ldr	r0, [r3, #0]
9001ad2c:	6803      	ldr	r3, [r0, #0]
9001ad2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9001ad30:	4798      	blx	r3
9001ad32:	f8b9 b000 	ldrh.w	fp, [r9]
9001ad36:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
9001ad3a:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
9001ad3e:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
9001ad42:	fb05 f50b 	mul.w	r5, r5, fp
9001ad46:	fb0b 2303 	mla	r3, fp, r3, r2
9001ad4a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001ad4e:	ea4f 0348 	mov.w	r3, r8, lsl #1
9001ad52:	9300      	str	r3, [sp, #0]
9001ad54:	d069      	beq.n	9001ae2a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x166>
9001ad56:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
9001ad5a:	4558      	cmp	r0, fp
9001ad5c:	f080 80cc 	bcs.w	9001aef8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
9001ad60:	9b00      	ldr	r3, [sp, #0]
9001ad62:	4631      	mov	r1, r6
9001ad64:	18c3      	adds	r3, r0, r3
9001ad66:	9301      	str	r3, [sp, #4]
9001ad68:	9b01      	ldr	r3, [sp, #4]
9001ad6a:	4298      	cmp	r0, r3
9001ad6c:	d24f      	bcs.n	9001ae0e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x14a>
9001ad6e:	f811 2b01 	ldrb.w	r2, [r1], #1
9001ad72:	2a00      	cmp	r2, #0
9001ad74:	d048      	beq.n	9001ae08 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
9001ad76:	fb0a f202 	mul.w	r2, sl, r2
9001ad7a:	1c53      	adds	r3, r2, #1
9001ad7c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
9001ad80:	121b      	asrs	r3, r3, #8
9001ad82:	d041      	beq.n	9001ae08 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
9001ad84:	8802      	ldrh	r2, [r0, #0]
9001ad86:	b29e      	uxth	r6, r3
9001ad88:	f8b4 c000 	ldrh.w	ip, [r4]
9001ad8c:	43db      	mvns	r3, r3
9001ad8e:	1215      	asrs	r5, r2, #8
9001ad90:	b2db      	uxtb	r3, r3
9001ad92:	ea4f 272c 	mov.w	r7, ip, asr #8
9001ad96:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
9001ad9a:	ea4f 0ee2 	mov.w	lr, r2, asr #3
9001ad9e:	fb15 f503 	smulbb	r5, r5, r3
9001ada2:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
9001ada6:	00d2      	lsls	r2, r2, #3
9001ada8:	f00e 0efc 	and.w	lr, lr, #252	@ 0xfc
9001adac:	fb07 5706 	mla	r7, r7, r6, r5
9001adb0:	ea4f 05ec 	mov.w	r5, ip, asr #3
9001adb4:	b2d2      	uxtb	r2, r2
9001adb6:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
9001adba:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
9001adbe:	fb1e fe03 	smulbb	lr, lr, r3
9001adc2:	b2bf      	uxth	r7, r7
9001adc4:	fb12 f203 	smulbb	r2, r2, r3
9001adc8:	fa5f fc8c 	uxtb.w	ip, ip
9001adcc:	fb05 e506 	mla	r5, r5, r6, lr
9001add0:	f107 0e01 	add.w	lr, r7, #1
9001add4:	fb0c 2c06 	mla	ip, ip, r6, r2
9001add8:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
9001addc:	fa1f fc8c 	uxth.w	ip, ip
9001ade0:	f407 4e78 	and.w	lr, r7, #63488	@ 0xf800
9001ade4:	b2ad      	uxth	r5, r5
9001ade6:	f10c 0701 	add.w	r7, ip, #1
9001adea:	eb07 271c 	add.w	r7, r7, ip, lsr #8
9001adee:	f3c7 27c4 	ubfx	r7, r7, #11, #5
9001adf2:	ea47 070e 	orr.w	r7, r7, lr
9001adf6:	f105 0e01 	add.w	lr, r5, #1
9001adfa:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
9001adfe:	096d      	lsrs	r5, r5, #5
9001ae00:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
9001ae04:	432f      	orrs	r7, r5
9001ae06:	8007      	strh	r7, [r0, #0]
9001ae08:	3002      	adds	r0, #2
9001ae0a:	3402      	adds	r4, #2
9001ae0c:	e7ac      	b.n	9001ad68 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
9001ae0e:	f8b9 3000 	ldrh.w	r3, [r9]
9001ae12:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
9001ae16:	eba3 0308 	sub.w	r3, r3, r8
9001ae1a:	eba6 0608 	sub.w	r6, r6, r8
9001ae1e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001ae22:	eb04 0446 	add.w	r4, r4, r6, lsl #1
9001ae26:	440e      	add	r6, r1
9001ae28:	e797      	b.n	9001ad5a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
9001ae2a:	eb00 0545 	add.w	r5, r0, r5, lsl #1
9001ae2e:	42a8      	cmp	r0, r5
9001ae30:	d262      	bcs.n	9001aef8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
9001ae32:	9b00      	ldr	r3, [sp, #0]
9001ae34:	4631      	mov	r1, r6
9001ae36:	eb00 0b03 	add.w	fp, r0, r3
9001ae3a:	4558      	cmp	r0, fp
9001ae3c:	d24e      	bcs.n	9001aedc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
9001ae3e:	f811 3b01 	ldrb.w	r3, [r1], #1
9001ae42:	b12b      	cbz	r3, 9001ae50 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
9001ae44:	2bff      	cmp	r3, #255	@ 0xff
9001ae46:	f8b4 e000 	ldrh.w	lr, [r4]
9001ae4a:	d104      	bne.n	9001ae56 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x192>
9001ae4c:	f8a0 e000 	strh.w	lr, [r0]
9001ae50:	3002      	adds	r0, #2
9001ae52:	3402      	adds	r4, #2
9001ae54:	e7f1      	b.n	9001ae3a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x176>
9001ae56:	8802      	ldrh	r2, [r0, #0]
9001ae58:	b29f      	uxth	r7, r3
9001ae5a:	43db      	mvns	r3, r3
9001ae5c:	ea4f 2c2e 	mov.w	ip, lr, asr #8
9001ae60:	1216      	asrs	r6, r2, #8
9001ae62:	b2db      	uxtb	r3, r3
9001ae64:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
9001ae68:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
9001ae6c:	ea4f 0ae2 	mov.w	sl, r2, asr #3
9001ae70:	00d2      	lsls	r2, r2, #3
9001ae72:	fb16 f603 	smulbb	r6, r6, r3
9001ae76:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
9001ae7a:	b2d2      	uxtb	r2, r2
9001ae7c:	fb0c 6c07 	mla	ip, ip, r7, r6
9001ae80:	ea4f 06ee 	mov.w	r6, lr, asr #3
9001ae84:	fb1a fa03 	smulbb	sl, sl, r3
9001ae88:	ea4f 0ece 	mov.w	lr, lr, lsl #3
9001ae8c:	fa1f fc8c 	uxth.w	ip, ip
9001ae90:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
9001ae94:	fb12 f303 	smulbb	r3, r2, r3
9001ae98:	fa5f fe8e 	uxtb.w	lr, lr
9001ae9c:	fb06 a607 	mla	r6, r6, r7, sl
9001aea0:	f10c 0201 	add.w	r2, ip, #1
9001aea4:	fb0e 3307 	mla	r3, lr, r7, r3
9001aea8:	b2b6      	uxth	r6, r6
9001aeaa:	b29b      	uxth	r3, r3
9001aeac:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
9001aeb0:	f106 0a01 	add.w	sl, r6, #1
9001aeb4:	f40c 4278 	and.w	r2, ip, #63488	@ 0xf800
9001aeb8:	f103 0c01 	add.w	ip, r3, #1
9001aebc:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
9001aec0:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
9001aec4:	0976      	lsrs	r6, r6, #5
9001aec6:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
9001aeca:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
9001aece:	ea4c 0c02 	orr.w	ip, ip, r2
9001aed2:	ea4c 0c06 	orr.w	ip, ip, r6
9001aed6:	f8a0 c000 	strh.w	ip, [r0]
9001aeda:	e7b9      	b.n	9001ae50 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
9001aedc:	f8b9 3000 	ldrh.w	r3, [r9]
9001aee0:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
9001aee4:	eba3 0308 	sub.w	r3, r3, r8
9001aee8:	eba6 0608 	sub.w	r6, r6, r8
9001aeec:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001aef0:	eb04 0446 	add.w	r4, r4, r6, lsl #1
9001aef4:	440e      	add	r6, r1
9001aef6:	e79a      	b.n	9001ae2e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x16a>
9001aef8:	4b03      	ldr	r3, [pc, #12]	@ (9001af08 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
9001aefa:	6818      	ldr	r0, [r3, #0]
9001aefc:	6803      	ldr	r3, [r0, #0]
9001aefe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9001af00:	4798      	blx	r3
9001af02:	b007      	add	sp, #28
9001af04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001af08:	2402630c 	.word	0x2402630c
9001af0c:	24026306 	.word	0x24026306

9001af10 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
9001af10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001af14:	b089      	sub	sp, #36	@ 0x24
9001af16:	4682      	mov	sl, r0
9001af18:	460f      	mov	r7, r1
9001af1a:	4691      	mov	r9, r2
9001af1c:	f89d 604c 	ldrb.w	r6, [sp, #76]	@ 0x4c
9001af20:	4698      	mov	r8, r3
9001af22:	9c12      	ldr	r4, [sp, #72]	@ 0x48
9001af24:	2e00      	cmp	r6, #0
9001af26:	d036      	beq.n	9001af96 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
9001af28:	4608      	mov	r0, r1
9001af2a:	f7fc f863 	bl	90016ff4 <_ZNK8touchgfx6Bitmap8getWidthEv>
9001af2e:	4605      	mov	r5, r0
9001af30:	4638      	mov	r0, r7
9001af32:	f7fc f893 	bl	9001705c <_ZNK8touchgfx6Bitmap9getHeightEv>
9001af36:	f8ad 000e 	strh.w	r0, [sp, #14]
9001af3a:	4638      	mov	r0, r7
9001af3c:	f8ad 9008 	strh.w	r9, [sp, #8]
9001af40:	f8ad 500c 	strh.w	r5, [sp, #12]
9001af44:	f8ad 800a 	strh.w	r8, [sp, #10]
9001af48:	f7fc f940 	bl	900171cc <_ZNK8touchgfx6Bitmap7getDataEv>
9001af4c:	4605      	mov	r5, r0
9001af4e:	4638      	mov	r0, r7
9001af50:	f7fc f96c 	bl	9001722c <_ZNK8touchgfx6Bitmap12getExtraDataEv>
9001af54:	4681      	mov	r9, r0
9001af56:	4638      	mov	r0, r7
9001af58:	f7fc f9bc 	bl	900172d4 <_ZNK8touchgfx6Bitmap9getFormatEv>
9001af5c:	280b      	cmp	r0, #11
9001af5e:	d81a      	bhi.n	9001af96 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
9001af60:	e8df f000 	tbb	[pc, r0]
9001af64:	1906aebd 	.word	0x1906aebd
9001af68:	19191919 	.word	0x19191919
9001af6c:	b5191919 	.word	0xb5191919
9001af70:	4bb0      	ldr	r3, [pc, #704]	@ (9001b234 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x324>)
9001af72:	6818      	ldr	r0, [r3, #0]
9001af74:	6803      	ldr	r3, [r0, #0]
9001af76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
9001af78:	4798      	blx	r3
9001af7a:	2eff      	cmp	r6, #255	@ 0xff
9001af7c:	d121      	bne.n	9001afc2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb2>
9001af7e:	0683      	lsls	r3, r0, #26
9001af80:	d41f      	bmi.n	9001afc2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb2>
9001af82:	4638      	mov	r0, r7
9001af84:	f7fc f8ea 	bl	9001715c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
9001af88:	b940      	cbnz	r0, 9001af9c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x8c>
9001af8a:	4623      	mov	r3, r4
9001af8c:	aa02      	add	r2, sp, #8
9001af8e:	4629      	mov	r1, r5
9001af90:	4650      	mov	r0, sl
9001af92:	f7ff fa2f 	bl	9001a3f4 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
9001af96:	b009      	add	sp, #36	@ 0x24
9001af98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001af9c:	f10d 0818 	add.w	r8, sp, #24
9001afa0:	4639      	mov	r1, r7
9001afa2:	af04      	add	r7, sp, #16
9001afa4:	4640      	mov	r0, r8
9001afa6:	f7fc f88d 	bl	900170c4 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
9001afaa:	e898 0003 	ldmia.w	r8, {r0, r1}
9001afae:	e887 0003 	stmia.w	r7, {r0, r1}
9001afb2:	4638      	mov	r0, r7
9001afb4:	4621      	mov	r1, r4
9001afb6:	f7f5 fa43 	bl	90010440 <_ZN8touchgfx4RectaNERKS0_>
9001afba:	4638      	mov	r0, r7
9001afbc:	f7f5 fa83 	bl	900104c6 <_ZNK8touchgfx4Rect7isEmptyEv>
9001afc0:	b130      	cbz	r0, 9001afd0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>
9001afc2:	4633      	mov	r3, r6
9001afc4:	4622      	mov	r2, r4
9001afc6:	a902      	add	r1, sp, #8
9001afc8:	4628      	mov	r0, r5
9001afca:	f7ff f92d 	bl	9001a228 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
9001afce:	e7e2      	b.n	9001af96 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
9001afd0:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
9001afd4:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
9001afd8:	4293      	cmp	r3, r2
9001afda:	dd12      	ble.n	9001b002 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xf2>
9001afdc:	1a9b      	subs	r3, r3, r2
9001afde:	f9b4 0000 	ldrsh.w	r0, [r4]
9001afe2:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
9001afe6:	f8ad 0018 	strh.w	r0, [sp, #24]
9001afea:	4628      	mov	r0, r5
9001afec:	f8ad 201a 	strh.w	r2, [sp, #26]
9001aff0:	4642      	mov	r2, r8
9001aff2:	f8ad 101c 	strh.w	r1, [sp, #28]
9001aff6:	a902      	add	r1, sp, #8
9001aff8:	f8ad 301e 	strh.w	r3, [sp, #30]
9001affc:	4633      	mov	r3, r6
9001affe:	f7ff f913 	bl	9001a228 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
9001b002:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
9001b006:	f9b4 2000 	ldrsh.w	r2, [r4]
9001b00a:	4293      	cmp	r3, r2
9001b00c:	dd12      	ble.n	9001b034 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x124>
9001b00e:	1a9b      	subs	r3, r3, r2
9001b010:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
9001b014:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
9001b018:	f8ad 2018 	strh.w	r2, [sp, #24]
9001b01c:	4642      	mov	r2, r8
9001b01e:	f8ad 001a 	strh.w	r0, [sp, #26]
9001b022:	4628      	mov	r0, r5
9001b024:	f8ad 301c 	strh.w	r3, [sp, #28]
9001b028:	23ff      	movs	r3, #255	@ 0xff
9001b02a:	f8ad 101e 	strh.w	r1, [sp, #30]
9001b02e:	a902      	add	r1, sp, #8
9001b030:	f7ff f8fa 	bl	9001a228 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
9001b034:	463b      	mov	r3, r7
9001b036:	aa02      	add	r2, sp, #8
9001b038:	4629      	mov	r1, r5
9001b03a:	4650      	mov	r0, sl
9001b03c:	f7ff f9da 	bl	9001a3f4 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
9001b040:	88a2      	ldrh	r2, [r4, #4]
9001b042:	8823      	ldrh	r3, [r4, #0]
9001b044:	f8bd 1014 	ldrh.w	r1, [sp, #20]
9001b048:	4413      	add	r3, r2
9001b04a:	f8bd 2010 	ldrh.w	r2, [sp, #16]
9001b04e:	440a      	add	r2, r1
9001b050:	b29b      	uxth	r3, r3
9001b052:	b292      	uxth	r2, r2
9001b054:	b218      	sxth	r0, r3
9001b056:	b211      	sxth	r1, r2
9001b058:	4288      	cmp	r0, r1
9001b05a:	dd12      	ble.n	9001b082 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x172>
9001b05c:	1a9b      	subs	r3, r3, r2
9001b05e:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
9001b062:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
9001b066:	4642      	mov	r2, r8
9001b068:	f8ad 1018 	strh.w	r1, [sp, #24]
9001b06c:	a902      	add	r1, sp, #8
9001b06e:	f8ad 301c 	strh.w	r3, [sp, #28]
9001b072:	23ff      	movs	r3, #255	@ 0xff
9001b074:	f8ad 001e 	strh.w	r0, [sp, #30]
9001b078:	4628      	mov	r0, r5
9001b07a:	f8ad 601a 	strh.w	r6, [sp, #26]
9001b07e:	f7ff f8d3 	bl	9001a228 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
9001b082:	88e2      	ldrh	r2, [r4, #6]
9001b084:	8863      	ldrh	r3, [r4, #2]
9001b086:	f8bd 1016 	ldrh.w	r1, [sp, #22]
9001b08a:	4413      	add	r3, r2
9001b08c:	f8bd 2012 	ldrh.w	r2, [sp, #18]
9001b090:	440a      	add	r2, r1
9001b092:	b29b      	uxth	r3, r3
9001b094:	b292      	uxth	r2, r2
9001b096:	b218      	sxth	r0, r3
9001b098:	b211      	sxth	r1, r2
9001b09a:	4288      	cmp	r0, r1
9001b09c:	f77f af7b 	ble.w	9001af96 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
9001b0a0:	1a9b      	subs	r3, r3, r2
9001b0a2:	f9b4 6000 	ldrsh.w	r6, [r4]
9001b0a6:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
9001b0aa:	4642      	mov	r2, r8
9001b0ac:	f8ad 301e 	strh.w	r3, [sp, #30]
9001b0b0:	23ff      	movs	r3, #255	@ 0xff
9001b0b2:	f8ad 6018 	strh.w	r6, [sp, #24]
9001b0b6:	f8ad 101a 	strh.w	r1, [sp, #26]
9001b0ba:	f8ad 001c 	strh.w	r0, [sp, #28]
9001b0be:	e782      	b.n	9001afc6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb6>
9001b0c0:	4633      	mov	r3, r6
9001b0c2:	4622      	mov	r2, r4
9001b0c4:	a902      	add	r1, sp, #8
9001b0c6:	4628      	mov	r0, r5
9001b0c8:	f7ff fa04 	bl	9001a4d4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
9001b0cc:	e763      	b.n	9001af96 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
9001b0ce:	9600      	str	r6, [sp, #0]
9001b0d0:	4623      	mov	r3, r4
9001b0d2:	aa02      	add	r2, sp, #8
9001b0d4:	4649      	mov	r1, r9
9001b0d6:	4628      	mov	r0, r5
9001b0d8:	f7ff fddc 	bl	9001ac94 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
9001b0dc:	e75b      	b.n	9001af96 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
9001b0de:	4638      	mov	r0, r7
9001b0e0:	f7fc f83c 	bl	9001715c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
9001b0e4:	b950      	cbnz	r0, 9001b0fc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1ec>
9001b0e6:	f8da 3000 	ldr.w	r3, [sl]
9001b0ea:	aa02      	add	r2, sp, #8
9001b0ec:	4629      	mov	r1, r5
9001b0ee:	e9cd 6000 	strd	r6, r0, [sp]
9001b0f2:	4650      	mov	r0, sl
9001b0f4:	68de      	ldr	r6, [r3, #12]
9001b0f6:	4623      	mov	r3, r4
9001b0f8:	47b0      	blx	r6
9001b0fa:	e74c      	b.n	9001af96 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
9001b0fc:	f10d 0818 	add.w	r8, sp, #24
9001b100:	4639      	mov	r1, r7
9001b102:	af04      	add	r7, sp, #16
9001b104:	4640      	mov	r0, r8
9001b106:	f7fb ffdd 	bl	900170c4 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
9001b10a:	e898 0003 	ldmia.w	r8, {r0, r1}
9001b10e:	e887 0003 	stmia.w	r7, {r0, r1}
9001b112:	4638      	mov	r0, r7
9001b114:	4621      	mov	r1, r4
9001b116:	f7f5 f993 	bl	90010440 <_ZN8touchgfx4RectaNERKS0_>
9001b11a:	4638      	mov	r0, r7
9001b11c:	f7f5 f9d3 	bl	900104c6 <_ZNK8touchgfx4Rect7isEmptyEv>
9001b120:	b138      	cbz	r0, 9001b132 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x222>
9001b122:	4623      	mov	r3, r4
9001b124:	9600      	str	r6, [sp, #0]
9001b126:	aa02      	add	r2, sp, #8
9001b128:	4649      	mov	r1, r9
9001b12a:	4628      	mov	r0, r5
9001b12c:	f7ff fdca 	bl	9001acc4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
9001b130:	e731      	b.n	9001af96 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
9001b132:	f8da 3000 	ldr.w	r3, [sl]
9001b136:	aa02      	add	r2, sp, #8
9001b138:	4629      	mov	r1, r5
9001b13a:	e9cd 6000 	strd	r6, r0, [sp]
9001b13e:	4650      	mov	r0, sl
9001b140:	f8d3 b00c 	ldr.w	fp, [r3, #12]
9001b144:	463b      	mov	r3, r7
9001b146:	47d8      	blx	fp
9001b148:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
9001b14c:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
9001b150:	4293      	cmp	r3, r2
9001b152:	dd13      	ble.n	9001b17c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x26c>
9001b154:	f9b4 0000 	ldrsh.w	r0, [r4]
9001b158:	1a9b      	subs	r3, r3, r2
9001b15a:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
9001b15e:	f8ad 0018 	strh.w	r0, [sp, #24]
9001b162:	4628      	mov	r0, r5
9001b164:	f8ad 201a 	strh.w	r2, [sp, #26]
9001b168:	aa02      	add	r2, sp, #8
9001b16a:	f8ad 101c 	strh.w	r1, [sp, #28]
9001b16e:	4649      	mov	r1, r9
9001b170:	f8ad 301e 	strh.w	r3, [sp, #30]
9001b174:	4643      	mov	r3, r8
9001b176:	9600      	str	r6, [sp, #0]
9001b178:	f7ff fda4 	bl	9001acc4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
9001b17c:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
9001b180:	f9b4 2000 	ldrsh.w	r2, [r4]
9001b184:	4293      	cmp	r3, r2
9001b186:	dd13      	ble.n	9001b1b0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2a0>
9001b188:	1a9b      	subs	r3, r3, r2
9001b18a:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
9001b18e:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
9001b192:	f8ad 2018 	strh.w	r2, [sp, #24]
9001b196:	aa02      	add	r2, sp, #8
9001b198:	f8ad 001a 	strh.w	r0, [sp, #26]
9001b19c:	4628      	mov	r0, r5
9001b19e:	f8ad 301c 	strh.w	r3, [sp, #28]
9001b1a2:	4643      	mov	r3, r8
9001b1a4:	f8ad 101e 	strh.w	r1, [sp, #30]
9001b1a8:	4649      	mov	r1, r9
9001b1aa:	9600      	str	r6, [sp, #0]
9001b1ac:	f7ff fd8a 	bl	9001acc4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
9001b1b0:	88a2      	ldrh	r2, [r4, #4]
9001b1b2:	8823      	ldrh	r3, [r4, #0]
9001b1b4:	f8bd 1014 	ldrh.w	r1, [sp, #20]
9001b1b8:	4413      	add	r3, r2
9001b1ba:	f8bd 2010 	ldrh.w	r2, [sp, #16]
9001b1be:	440a      	add	r2, r1
9001b1c0:	b29b      	uxth	r3, r3
9001b1c2:	b292      	uxth	r2, r2
9001b1c4:	b218      	sxth	r0, r3
9001b1c6:	b211      	sxth	r1, r2
9001b1c8:	4288      	cmp	r0, r1
9001b1ca:	dd13      	ble.n	9001b1f4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2e4>
9001b1cc:	1a9b      	subs	r3, r3, r2
9001b1ce:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
9001b1d2:	f9bd 7012 	ldrsh.w	r7, [sp, #18]
9001b1d6:	aa02      	add	r2, sp, #8
9001b1d8:	f8ad 1018 	strh.w	r1, [sp, #24]
9001b1dc:	4649      	mov	r1, r9
9001b1de:	f8ad 301c 	strh.w	r3, [sp, #28]
9001b1e2:	4643      	mov	r3, r8
9001b1e4:	f8ad 001e 	strh.w	r0, [sp, #30]
9001b1e8:	4628      	mov	r0, r5
9001b1ea:	9600      	str	r6, [sp, #0]
9001b1ec:	f8ad 701a 	strh.w	r7, [sp, #26]
9001b1f0:	f7ff fd68 	bl	9001acc4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
9001b1f4:	88e2      	ldrh	r2, [r4, #6]
9001b1f6:	8863      	ldrh	r3, [r4, #2]
9001b1f8:	f8bd 1016 	ldrh.w	r1, [sp, #22]
9001b1fc:	4413      	add	r3, r2
9001b1fe:	f8bd 2012 	ldrh.w	r2, [sp, #18]
9001b202:	440a      	add	r2, r1
9001b204:	b29b      	uxth	r3, r3
9001b206:	b292      	uxth	r2, r2
9001b208:	b218      	sxth	r0, r3
9001b20a:	b211      	sxth	r1, r2
9001b20c:	4288      	cmp	r0, r1
9001b20e:	f77f aec2 	ble.w	9001af96 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
9001b212:	f9b4 7000 	ldrsh.w	r7, [r4]
9001b216:	1a9b      	subs	r3, r3, r2
9001b218:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
9001b21c:	f8ad 301e 	strh.w	r3, [sp, #30]
9001b220:	4643      	mov	r3, r8
9001b222:	f8ad 7018 	strh.w	r7, [sp, #24]
9001b226:	f8ad 101a 	strh.w	r1, [sp, #26]
9001b22a:	f8ad 001c 	strh.w	r0, [sp, #28]
9001b22e:	9600      	str	r6, [sp, #0]
9001b230:	e779      	b.n	9001b126 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x216>
9001b232:	bf00      	nop
9001b234:	2402630c 	.word	0x2402630c

9001b238 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
9001b238:	b180      	cbz	r0, 9001b25c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x24>
9001b23a:	2903      	cmp	r1, #3
9001b23c:	d81c      	bhi.n	9001b278 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
9001b23e:	e8df f001 	tbb	[pc, r1]
9001b242:	1d02      	.short	0x1d02
9001b244:	1f08      	.short	0x1f08
9001b246:	4b10      	ldr	r3, [pc, #64]	@ (9001b288 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
9001b248:	8818      	ldrh	r0, [r3, #0]
9001b24a:	f3c0 000e 	ubfx	r0, r0, #0, #15
9001b24e:	4240      	negs	r0, r0
9001b250:	4770      	bx	lr
9001b252:	4b0d      	ldr	r3, [pc, #52]	@ (9001b288 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
9001b254:	8818      	ldrh	r0, [r3, #0]
9001b256:	f3c0 000e 	ubfx	r0, r0, #0, #15
9001b25a:	4770      	bx	lr
9001b25c:	2903      	cmp	r1, #3
9001b25e:	d80b      	bhi.n	9001b278 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
9001b260:	a301      	add	r3, pc, #4	@ (adr r3, 9001b268 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x30>)
9001b262:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
9001b266:	bf00      	nop
9001b268:	9001b27d 	.word	0x9001b27d
9001b26c:	9001b253 	.word	0x9001b253
9001b270:	9001b281 	.word	0x9001b281
9001b274:	9001b247 	.word	0x9001b247
9001b278:	2000      	movs	r0, #0
9001b27a:	4770      	bx	lr
9001b27c:	2001      	movs	r0, #1
9001b27e:	4770      	bx	lr
9001b280:	f04f 30ff 	mov.w	r0, #4294967295
9001b284:	4770      	bx	lr
9001b286:	bf00      	nop
9001b288:	24026306 	.word	0x24026306

9001b28c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
9001b28c:	b180      	cbz	r0, 9001b2b0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x24>
9001b28e:	2903      	cmp	r1, #3
9001b290:	d81c      	bhi.n	9001b2cc <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
9001b292:	e8df f001 	tbb	[pc, r1]
9001b296:	021d      	.short	0x021d
9001b298:	071f      	.short	0x071f
9001b29a:	4b10      	ldr	r3, [pc, #64]	@ (9001b2dc <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
9001b29c:	8818      	ldrh	r0, [r3, #0]
9001b29e:	f3c0 000e 	ubfx	r0, r0, #0, #15
9001b2a2:	4770      	bx	lr
9001b2a4:	4b0d      	ldr	r3, [pc, #52]	@ (9001b2dc <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
9001b2a6:	8818      	ldrh	r0, [r3, #0]
9001b2a8:	f3c0 000e 	ubfx	r0, r0, #0, #15
9001b2ac:	4240      	negs	r0, r0
9001b2ae:	4770      	bx	lr
9001b2b0:	2903      	cmp	r1, #3
9001b2b2:	d80b      	bhi.n	9001b2cc <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
9001b2b4:	a301      	add	r3, pc, #4	@ (adr r3, 9001b2bc <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x30>)
9001b2b6:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
9001b2ba:	bf00      	nop
9001b2bc:	9001b29b 	.word	0x9001b29b
9001b2c0:	9001b2d5 	.word	0x9001b2d5
9001b2c4:	9001b2a5 	.word	0x9001b2a5
9001b2c8:	9001b2d1 	.word	0x9001b2d1
9001b2cc:	2000      	movs	r0, #0
9001b2ce:	4770      	bx	lr
9001b2d0:	2001      	movs	r0, #1
9001b2d2:	4770      	bx	lr
9001b2d4:	f04f 30ff 	mov.w	r0, #4294967295
9001b2d8:	4770      	bx	lr
9001b2da:	bf00      	nop
9001b2dc:	24026306 	.word	0x24026306

9001b2e0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
9001b2e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001b2e4:	b099      	sub	sp, #100	@ 0x64
9001b2e6:	910b      	str	r1, [sp, #44]	@ 0x2c
9001b2e8:	a914      	add	r1, sp, #80	@ 0x50
9001b2ea:	f9bd 4088 	ldrsh.w	r4, [sp, #136]	@ 0x88
9001b2ee:	f8bd 5090 	ldrh.w	r5, [sp, #144]	@ 0x90
9001b2f2:	f8bd 6094 	ldrh.w	r6, [sp, #148]	@ 0x94
9001b2f6:	f89d 80ac 	ldrb.w	r8, [sp, #172]	@ 0xac
9001b2fa:	f89d a0b4 	ldrb.w	sl, [sp, #180]	@ 0xb4
9001b2fe:	e881 000c 	stmia.w	r1, {r2, r3}
9001b302:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	@ 0x8c
9001b306:	e9dd 2126 	ldrd	r2, r1, [sp, #152]	@ 0x98
9001b30a:	9309      	str	r3, [sp, #36]	@ 0x24
9001b30c:	f891 900d 	ldrb.w	r9, [r1, #13]
9001b310:	f89d 30a4 	ldrb.w	r3, [sp, #164]	@ 0xa4
9001b314:	ea4f 1749 	mov.w	r7, r9, lsl #5
9001b318:	9310      	str	r3, [sp, #64]	@ 0x40
9001b31a:	f89d 30b0 	ldrb.w	r3, [sp, #176]	@ 0xb0
9001b31e:	930c      	str	r3, [sp, #48]	@ 0x30
9001b320:	f407 7380 	and.w	r3, r7, #256	@ 0x100
9001b324:	798f      	ldrb	r7, [r1, #6]
9001b326:	431f      	orrs	r7, r3
9001b328:	f000 8195 	beq.w	9001b656 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
9001b32c:	ea4f 1909 	mov.w	r9, r9, lsl #4
9001b330:	f409 7380 	and.w	r3, r9, #256	@ 0x100
9001b334:	f891 9007 	ldrb.w	r9, [r1, #7]
9001b338:	ea59 0903 	orrs.w	r9, r9, r3
9001b33c:	f000 818b 	beq.w	9001b656 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
9001b340:	f991 3009 	ldrsb.w	r3, [r1, #9]
9001b344:	b29b      	uxth	r3, r3
9001b346:	2d00      	cmp	r5, #0
9001b348:	f000 812e 	beq.w	9001b5a8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c8>
9001b34c:	1aed      	subs	r5, r5, r3
9001b34e:	b2ad      	uxth	r5, r5
9001b350:	042b      	lsls	r3, r5, #16
9001b352:	d502      	bpl.n	9001b35a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
9001b354:	1b64      	subs	r4, r4, r5
9001b356:	2500      	movs	r5, #0
9001b358:	b224      	sxth	r4, r4
9001b35a:	f9b2 1000 	ldrsh.w	r1, [r2]
9001b35e:	a814      	add	r0, sp, #80	@ 0x50
9001b360:	f8cd 9028 	str.w	r9, [sp, #40]	@ 0x28
9001b364:	428c      	cmp	r4, r1
9001b366:	b28b      	uxth	r3, r1
9001b368:	bfbf      	itttt	lt
9001b36a:	18ed      	addlt	r5, r5, r3
9001b36c:	1b2c      	sublt	r4, r5, r4
9001b36e:	b2a5      	uxthlt	r5, r4
9001b370:	460c      	movlt	r4, r1
9001b372:	8891      	ldrh	r1, [r2, #4]
9001b374:	440b      	add	r3, r1
9001b376:	4621      	mov	r1, r4
9001b378:	b21b      	sxth	r3, r3
9001b37a:	930f      	str	r3, [sp, #60]	@ 0x3c
9001b37c:	88d3      	ldrh	r3, [r2, #6]
9001b37e:	8852      	ldrh	r2, [r2, #2]
9001b380:	4413      	add	r3, r2
9001b382:	9a09      	ldr	r2, [sp, #36]	@ 0x24
9001b384:	b21b      	sxth	r3, r3
9001b386:	930d      	str	r3, [sp, #52]	@ 0x34
9001b388:	4bbd      	ldr	r3, [pc, #756]	@ (9001b680 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>)
9001b38a:	f893 b000 	ldrb.w	fp, [r3]
9001b38e:	f10b 3cff 	add.w	ip, fp, #4294967295
9001b392:	f1dc 0300 	rsbs	r3, ip, #0
9001b396:	eb43 030c 	adc.w	r3, r3, ip
9001b39a:	930e      	str	r3, [sp, #56]	@ 0x38
9001b39c:	4653      	mov	r3, sl
9001b39e:	f7f8 f8f9 	bl	90013594 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
9001b3a2:	4621      	mov	r1, r4
9001b3a4:	f8ad 005c 	strh.w	r0, [sp, #92]	@ 0x5c
9001b3a8:	4653      	mov	r3, sl
9001b3aa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
9001b3ac:	a814      	add	r0, sp, #80	@ 0x50
9001b3ae:	f7f8 f90e 	bl	900135ce <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
9001b3b2:	a918      	add	r1, sp, #96	@ 0x60
9001b3b4:	f821 0d02 	strh.w	r0, [r1, #-2]!
9001b3b8:	a817      	add	r0, sp, #92	@ 0x5c
9001b3ba:	f7f8 fa2f 	bl	9001381c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
9001b3be:	f1ba 0f00 	cmp.w	sl, #0
9001b3c2:	f040 80f4 	bne.w	9001b5ae <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ce>
9001b3c6:	f1bb 0f01 	cmp.w	fp, #1
9001b3ca:	f040 80f8 	bne.w	9001b5be <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2de>
9001b3ce:	9b10      	ldr	r3, [sp, #64]	@ 0x40
9001b3d0:	2b00      	cmp	r3, #0
9001b3d2:	f040 8145 	bne.w	9001b660 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>
9001b3d6:	b2ba      	uxth	r2, r7
9001b3d8:	b905      	cbnz	r5, 9001b3dc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xfc>
9001b3da:	b16e      	cbz	r6, 9001b3f8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x118>
9001b3dc:	fb06 5302 	mla	r3, r6, r2, r5
9001b3e0:	9828      	ldr	r0, [sp, #160]	@ 0xa0
9001b3e2:	4631      	mov	r1, r6
9001b3e4:	fb08 f303 	mul.w	r3, r8, r3
9001b3e8:	f003 0607 	and.w	r6, r3, #7
9001b3ec:	eb00 03d3 	add.w	r3, r0, r3, lsr #3
9001b3f0:	9328      	str	r3, [sp, #160]	@ 0xa0
9001b3f2:	eba9 0301 	sub.w	r3, r9, r1
9001b3f6:	930a      	str	r3, [sp, #40]	@ 0x28
9001b3f8:	4651      	mov	r1, sl
9001b3fa:	980e      	ldr	r0, [sp, #56]	@ 0x38
9001b3fc:	f7ff ff1c 	bl	9001b238 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
9001b400:	4681      	mov	r9, r0
9001b402:	980e      	ldr	r0, [sp, #56]	@ 0x38
9001b404:	f7ff ff42 	bl	9001b28c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
9001b408:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
9001b40a:	9909      	ldr	r1, [sp, #36]	@ 0x24
9001b40c:	4683      	mov	fp, r0
9001b40e:	eba3 0a01 	sub.w	sl, r3, r1
9001b412:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
9001b414:	459a      	cmp	sl, r3
9001b416:	bfa8      	it	ge
9001b418:	469a      	movge	sl, r3
9001b41a:	f1ba 0f00 	cmp.w	sl, #0
9001b41e:	f340 811a 	ble.w	9001b656 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
9001b422:	1b64      	subs	r4, r4, r5
9001b424:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
9001b426:	1b1c      	subs	r4, r3, r4
9001b428:	42bc      	cmp	r4, r7
9001b42a:	bfd4      	ite	le
9001b42c:	ebc5 0504 	rsble	r5, r5, r4
9001b430:	ebc5 0507 	rsbgt	r5, r5, r7
9001b434:	2d00      	cmp	r5, #0
9001b436:	f340 810e 	ble.w	9001b656 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
9001b43a:	1b52      	subs	r2, r2, r5
9001b43c:	fb08 f302 	mul.w	r3, r8, r2
9001b440:	930f      	str	r3, [sp, #60]	@ 0x3c
9001b442:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
9001b444:	2b00      	cmp	r3, #0
9001b446:	f040 8116 	bne.w	9001b676 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x396>
9001b44a:	4b8e      	ldr	r3, [pc, #568]	@ (9001b684 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>)
9001b44c:	6818      	ldr	r0, [r3, #0]
9001b44e:	6803      	ldr	r3, [r0, #0]
9001b450:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9001b452:	4798      	blx	r3
9001b454:	2301      	movs	r3, #1
9001b456:	4a8c      	ldr	r2, [pc, #560]	@ (9001b688 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>)
9001b458:	fa03 f308 	lsl.w	r3, r3, r8
9001b45c:	8811      	ldrh	r1, [r2, #0]
9001b45e:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	@ 0x5c
9001b462:	3b01      	subs	r3, #1
9001b464:	b2db      	uxtb	r3, r3
9001b466:	930e      	str	r3, [sp, #56]	@ 0x38
9001b468:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	@ 0x5e
9001b46c:	fb01 2303 	mla	r3, r1, r3, r2
9001b470:	eb00 0343 	add.w	r3, r0, r3, lsl #1
9001b474:	930a      	str	r3, [sp, #40]	@ 0x28
9001b476:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
9001b478:	f3c3 4307 	ubfx	r3, r3, #16, #8
9001b47c:	9313      	str	r3, [sp, #76]	@ 0x4c
9001b47e:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
9001b480:	0a19      	lsrs	r1, r3, #8
9001b482:	b2cb      	uxtb	r3, r1
9001b484:	9312      	str	r3, [sp, #72]	@ 0x48
9001b486:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
9001b488:	b2db      	uxtb	r3, r3
9001b48a:	9311      	str	r3, [sp, #68]	@ 0x44
9001b48c:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
9001b48e:	095a      	lsrs	r2, r3, #5
9001b490:	4b7e      	ldr	r3, [pc, #504]	@ (9001b68c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
9001b492:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
9001b496:	400b      	ands	r3, r1
9001b498:	4313      	orrs	r3, r2
9001b49a:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
9001b49c:	f3c2 02c4 	ubfx	r2, r2, #3, #5
9001b4a0:	4313      	orrs	r3, r2
9001b4a2:	b29b      	uxth	r3, r3
9001b4a4:	9310      	str	r3, [sp, #64]	@ 0x40
9001b4a6:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
9001b4a8:	781a      	ldrb	r2, [r3, #0]
9001b4aa:	ea4f 0349 	mov.w	r3, r9, lsl #1
9001b4ae:	fb05 b919 	mls	r9, r5, r9, fp
9001b4b2:	4132      	asrs	r2, r6
9001b4b4:	fb03 fb05 	mul.w	fp, r3, r5
9001b4b8:	930d      	str	r3, [sp, #52]	@ 0x34
9001b4ba:	b2d2      	uxtb	r2, r2
9001b4bc:	eb0b 0b49 	add.w	fp, fp, r9, lsl #1
9001b4c0:	f11a 3aff 	adds.w	sl, sl, #4294967295
9001b4c4:	f0c0 80f5 	bcc.w	9001b6b2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3d2>
9001b4c8:	46ae      	mov	lr, r5
9001b4ca:	f8dd c028 	ldr.w	ip, [sp, #40]	@ 0x28
9001b4ce:	f11e 3eff 	adds.w	lr, lr, #4294967295
9001b4d2:	f0c0 80dd 	bcc.w	9001b690 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b0>
9001b4d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
9001b4d8:	4013      	ands	r3, r2
9001b4da:	d055      	beq.n	9001b588 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
9001b4dc:	20ff      	movs	r0, #255	@ 0xff
9001b4de:	990e      	ldr	r1, [sp, #56]	@ 0x38
9001b4e0:	fb90 f1f1 	sdiv	r1, r0, r1
9001b4e4:	434b      	muls	r3, r1
9001b4e6:	2bfe      	cmp	r3, #254	@ 0xfe
9001b4e8:	dd03      	ble.n	9001b4f2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x212>
9001b4ea:	990c      	ldr	r1, [sp, #48]	@ 0x30
9001b4ec:	4281      	cmp	r1, r0
9001b4ee:	f000 80c4 	beq.w	9001b67a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39a>
9001b4f2:	990c      	ldr	r1, [sp, #48]	@ 0x30
9001b4f4:	f8bc 4000 	ldrh.w	r4, [ip]
9001b4f8:	fb11 f303 	smulbb	r3, r1, r3
9001b4fc:	1220      	asrs	r0, r4, #8
9001b4fe:	b29b      	uxth	r3, r3
9001b500:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
9001b504:	1c59      	adds	r1, r3, #1
9001b506:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
9001b50a:	eb01 2313 	add.w	r3, r1, r3, lsr #8
9001b50e:	10e1      	asrs	r1, r4, #3
9001b510:	f3c3 2307 	ubfx	r3, r3, #8, #8
9001b514:	00e4      	lsls	r4, r4, #3
9001b516:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
9001b51a:	b29f      	uxth	r7, r3
9001b51c:	43db      	mvns	r3, r3
9001b51e:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
9001b522:	b2db      	uxtb	r3, r3
9001b524:	b2e4      	uxtb	r4, r4
9001b526:	9309      	str	r3, [sp, #36]	@ 0x24
9001b528:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
9001b52a:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
9001b52e:	fb13 f907 	smulbb	r9, r3, r7
9001b532:	9b09      	ldr	r3, [sp, #36]	@ 0x24
9001b534:	fb00 9003 	mla	r0, r0, r3, r9
9001b538:	9b12      	ldr	r3, [sp, #72]	@ 0x48
9001b53a:	fb13 f907 	smulbb	r9, r3, r7
9001b53e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
9001b540:	b280      	uxth	r0, r0
9001b542:	fb01 9103 	mla	r1, r1, r3, r9
9001b546:	9b11      	ldr	r3, [sp, #68]	@ 0x44
9001b548:	fb13 f707 	smulbb	r7, r3, r7
9001b54c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
9001b54e:	b289      	uxth	r1, r1
9001b550:	fb04 7403 	mla	r4, r4, r3, r7
9001b554:	1c43      	adds	r3, r0, #1
9001b556:	b2a4      	uxth	r4, r4
9001b558:	eb03 2010 	add.w	r0, r3, r0, lsr #8
9001b55c:	f104 0901 	add.w	r9, r4, #1
9001b560:	f400 4078 	and.w	r0, r0, #63488	@ 0xf800
9001b564:	eb09 2914 	add.w	r9, r9, r4, lsr #8
9001b568:	f3c9 29c4 	ubfx	r9, r9, #11, #5
9001b56c:	ea49 0000 	orr.w	r0, r9, r0
9001b570:	f101 0901 	add.w	r9, r1, #1
9001b574:	eb09 2911 	add.w	r9, r9, r1, lsr #8
9001b578:	ea4f 1959 	mov.w	r9, r9, lsr #5
9001b57c:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
9001b580:	ea40 0009 	orr.w	r0, r0, r9
9001b584:	f8ac 0000 	strh.w	r0, [ip]
9001b588:	4446      	add	r6, r8
9001b58a:	b2b6      	uxth	r6, r6
9001b58c:	2e07      	cmp	r6, #7
9001b58e:	bf89      	itett	hi
9001b590:	9b28      	ldrhi	r3, [sp, #160]	@ 0xa0
9001b592:	fa42 f208 	asrls.w	r2, r2, r8
9001b596:	2600      	movhi	r6, #0
9001b598:	785a      	ldrbhi	r2, [r3, #1]
9001b59a:	bf8a      	itet	hi
9001b59c:	3301      	addhi	r3, #1
9001b59e:	b2d2      	uxtbls	r2, r2
9001b5a0:	9328      	strhi	r3, [sp, #160]	@ 0xa0
9001b5a2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
9001b5a4:	449c      	add	ip, r3
9001b5a6:	e792      	b.n	9001b4ce <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ee>
9001b5a8:	441c      	add	r4, r3
9001b5aa:	b224      	sxth	r4, r4
9001b5ac:	e6d5      	b.n	9001b35a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
9001b5ae:	f1ba 0f01 	cmp.w	sl, #1
9001b5b2:	f47f af0c 	bne.w	9001b3ce <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
9001b5b6:	f1bb 0f01 	cmp.w	fp, #1
9001b5ba:	f47f af08 	bne.w	9001b3ce <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
9001b5be:	f8df b0c4 	ldr.w	fp, [pc, #196]	@ 9001b684 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>
9001b5c2:	f8db 0000 	ldr.w	r0, [fp]
9001b5c6:	6803      	ldr	r3, [r0, #0]
9001b5c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
9001b5ca:	4798      	blx	r3
9001b5cc:	f410 7380 	ands.w	r3, r0, #256	@ 0x100
9001b5d0:	465a      	mov	r2, fp
9001b5d2:	d006      	beq.n	9001b5e2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
9001b5d4:	f1b8 0f04 	cmp.w	r8, #4
9001b5d8:	d140      	bne.n	9001b65c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>
9001b5da:	9b10      	ldr	r3, [sp, #64]	@ 0x40
9001b5dc:	3300      	adds	r3, #0
9001b5de:	bf18      	it	ne
9001b5e0:	2301      	movne	r3, #1
9001b5e2:	0580      	lsls	r0, r0, #22
9001b5e4:	d56e      	bpl.n	9001b6c4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>
9001b5e6:	f1b8 0f08 	cmp.w	r8, #8
9001b5ea:	d16b      	bne.n	9001b6c4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>
9001b5ec:	2b00      	cmp	r3, #0
9001b5ee:	bf0c      	ite	eq
9001b5f0:	f44f 7100 	moveq.w	r1, #512	@ 0x200
9001b5f4:	f44f 7180 	movne.w	r1, #256	@ 0x100
9001b5f8:	2d00      	cmp	r5, #0
9001b5fa:	f47f aee8 	bne.w	9001b3ce <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
9001b5fe:	2e00      	cmp	r6, #0
9001b600:	f47f aee5 	bne.w	9001b3ce <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
9001b604:	19e3      	adds	r3, r4, r7
9001b606:	980f      	ldr	r0, [sp, #60]	@ 0x3c
9001b608:	4283      	cmp	r3, r0
9001b60a:	f73f aee0 	bgt.w	9001b3ce <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
9001b60e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
9001b610:	980d      	ldr	r0, [sp, #52]	@ 0x34
9001b612:	444b      	add	r3, r9
9001b614:	4283      	cmp	r3, r0
9001b616:	f73f aeda 	bgt.w	9001b3ce <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
9001b61a:	b2bf      	uxth	r7, r7
9001b61c:	f1b8 0f08 	cmp.w	r8, #8
9001b620:	6810      	ldr	r0, [r2, #0]
9001b622:	f04f 0500 	mov.w	r5, #0
9001b626:	bf18      	it	ne
9001b628:	3701      	addne	r7, #1
9001b62a:	f8bd 305e 	ldrh.w	r3, [sp, #94]	@ 0x5e
9001b62e:	6804      	ldr	r4, [r0, #0]
9001b630:	bf18      	it	ne
9001b632:	f027 0701 	bicne.w	r7, r7, #1
9001b636:	f8bd 205c 	ldrh.w	r2, [sp, #92]	@ 0x5c
9001b63a:	e9cd 1505 	strd	r1, r5, [sp, #20]
9001b63e:	990c      	ldr	r1, [sp, #48]	@ 0x30
9001b640:	bf18      	it	ne
9001b642:	b2bf      	uxthne	r7, r7
9001b644:	9104      	str	r1, [sp, #16]
9001b646:	992a      	ldr	r1, [sp, #168]	@ 0xa8
9001b648:	e9cd 7900 	strd	r7, r9, [sp]
9001b64c:	e9cd 7102 	strd	r7, r1, [sp, #8]
9001b650:	9928      	ldr	r1, [sp, #160]	@ 0xa0
9001b652:	6d64      	ldr	r4, [r4, #84]	@ 0x54
9001b654:	47a0      	blx	r4
9001b656:	b019      	add	sp, #100	@ 0x64
9001b658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001b65c:	2300      	movs	r3, #0
9001b65e:	e7c0      	b.n	9001b5e2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
9001b660:	2208      	movs	r2, #8
9001b662:	fb92 f3f8 	sdiv	r3, r2, r8
9001b666:	1e5a      	subs	r2, r3, #1
9001b668:	443a      	add	r2, r7
9001b66a:	fb92 f2f3 	sdiv	r2, r2, r3
9001b66e:	fb12 f203 	smulbb	r2, r2, r3
9001b672:	b292      	uxth	r2, r2
9001b674:	e6b0      	b.n	9001b3d8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf8>
9001b676:	980b      	ldr	r0, [sp, #44]	@ 0x2c
9001b678:	e6ec      	b.n	9001b454 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x174>
9001b67a:	9810      	ldr	r0, [sp, #64]	@ 0x40
9001b67c:	e782      	b.n	9001b584 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a4>
9001b67e:	bf00      	nop
9001b680:	24026304 	.word	0x24026304
9001b684:	2402630c 	.word	0x2402630c
9001b688:	24026306 	.word	0x24026306
9001b68c:	00fff800 	.word	0x00fff800
9001b690:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
9001b692:	b153      	cbz	r3, 9001b6aa <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ca>
9001b694:	441e      	add	r6, r3
9001b696:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
9001b698:	b2b6      	uxth	r6, r6
9001b69a:	eb03 03d6 	add.w	r3, r3, r6, lsr #3
9001b69e:	f006 0607 	and.w	r6, r6, #7
9001b6a2:	781a      	ldrb	r2, [r3, #0]
9001b6a4:	9328      	str	r3, [sp, #160]	@ 0xa0
9001b6a6:	4132      	asrs	r2, r6
9001b6a8:	b2d2      	uxtb	r2, r2
9001b6aa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
9001b6ac:	445b      	add	r3, fp
9001b6ae:	930a      	str	r3, [sp, #40]	@ 0x28
9001b6b0:	e706      	b.n	9001b4c0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e0>
9001b6b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
9001b6b4:	2b00      	cmp	r3, #0
9001b6b6:	d1ce      	bne.n	9001b656 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
9001b6b8:	4b05      	ldr	r3, [pc, #20]	@ (9001b6d0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f0>)
9001b6ba:	6818      	ldr	r0, [r3, #0]
9001b6bc:	6803      	ldr	r3, [r0, #0]
9001b6be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9001b6c0:	4798      	blx	r3
9001b6c2:	e7c8      	b.n	9001b656 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
9001b6c4:	2b00      	cmp	r3, #0
9001b6c6:	f43f ae82 	beq.w	9001b3ce <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
9001b6ca:	f44f 7180 	mov.w	r1, #256	@ 0x100
9001b6ce:	e793      	b.n	9001b5f8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x318>
9001b6d0:	2402630c 	.word	0x2402630c

9001b6d4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>:
9001b6d4:	b538      	push	{r3, r4, r5, lr}
9001b6d6:	4c15      	ldr	r4, [pc, #84]	@ (9001b72c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
9001b6d8:	4605      	mov	r5, r0
9001b6da:	7823      	ldrb	r3, [r4, #0]
9001b6dc:	f3bf 8f5b 	dmb	ish
9001b6e0:	07da      	lsls	r2, r3, #31
9001b6e2:	d40b      	bmi.n	9001b6fc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
9001b6e4:	4620      	mov	r0, r4
9001b6e6:	f007 fa68 	bl	90022bba <__cxa_guard_acquire>
9001b6ea:	b138      	cbz	r0, 9001b6fc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
9001b6ec:	4620      	mov	r0, r4
9001b6ee:	f007 fa70 	bl	90022bd2 <__cxa_guard_release>
9001b6f2:	4a0f      	ldr	r2, [pc, #60]	@ (9001b730 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
9001b6f4:	490f      	ldr	r1, [pc, #60]	@ (9001b734 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
9001b6f6:	4810      	ldr	r0, [pc, #64]	@ (9001b738 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
9001b6f8:	f007 fa58 	bl	90022bac <__aeabi_atexit>
9001b6fc:	4c0f      	ldr	r4, [pc, #60]	@ (9001b73c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x68>)
9001b6fe:	7823      	ldrb	r3, [r4, #0]
9001b700:	f3bf 8f5b 	dmb	ish
9001b704:	07db      	lsls	r3, r3, #31
9001b706:	d40b      	bmi.n	9001b720 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
9001b708:	4620      	mov	r0, r4
9001b70a:	f007 fa56 	bl	90022bba <__cxa_guard_acquire>
9001b70e:	b138      	cbz	r0, 9001b720 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
9001b710:	4620      	mov	r0, r4
9001b712:	f007 fa5e 	bl	90022bd2 <__cxa_guard_release>
9001b716:	4a06      	ldr	r2, [pc, #24]	@ (9001b730 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
9001b718:	4909      	ldr	r1, [pc, #36]	@ (9001b740 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
9001b71a:	480a      	ldr	r0, [pc, #40]	@ (9001b744 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
9001b71c:	f007 fa46 	bl	90022bac <__aeabi_atexit>
9001b720:	4b05      	ldr	r3, [pc, #20]	@ (9001b738 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
9001b722:	612b      	str	r3, [r5, #16]
9001b724:	4b07      	ldr	r3, [pc, #28]	@ (9001b744 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
9001b726:	616b      	str	r3, [r5, #20]
9001b728:	bd38      	pop	{r3, r4, r5, pc}
9001b72a:	bf00      	nop
9001b72c:	240263d8 	.word	0x240263d8
9001b730:	24000000 	.word	0x24000000
9001b734:	900198e1 	.word	0x900198e1
9001b738:	240000ac 	.word	0x240000ac
9001b73c:	240263dc 	.word	0x240263dc
9001b740:	900198df 	.word	0x900198df
9001b744:	240000b0 	.word	0x240000b0

9001b748 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>:
9001b748:	b538      	push	{r3, r4, r5, lr}
9001b74a:	4c15      	ldr	r4, [pc, #84]	@ (9001b7a0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
9001b74c:	4605      	mov	r5, r0
9001b74e:	7823      	ldrb	r3, [r4, #0]
9001b750:	f3bf 8f5b 	dmb	ish
9001b754:	07da      	lsls	r2, r3, #31
9001b756:	d40b      	bmi.n	9001b770 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
9001b758:	4620      	mov	r0, r4
9001b75a:	f007 fa2e 	bl	90022bba <__cxa_guard_acquire>
9001b75e:	b138      	cbz	r0, 9001b770 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
9001b760:	4620      	mov	r0, r4
9001b762:	f007 fa36 	bl	90022bd2 <__cxa_guard_release>
9001b766:	4a0f      	ldr	r2, [pc, #60]	@ (9001b7a4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
9001b768:	490f      	ldr	r1, [pc, #60]	@ (9001b7a8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
9001b76a:	4810      	ldr	r0, [pc, #64]	@ (9001b7ac <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
9001b76c:	f007 fa1e 	bl	90022bac <__aeabi_atexit>
9001b770:	4c0f      	ldr	r4, [pc, #60]	@ (9001b7b0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x68>)
9001b772:	7823      	ldrb	r3, [r4, #0]
9001b774:	f3bf 8f5b 	dmb	ish
9001b778:	07db      	lsls	r3, r3, #31
9001b77a:	d40b      	bmi.n	9001b794 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
9001b77c:	4620      	mov	r0, r4
9001b77e:	f007 fa1c 	bl	90022bba <__cxa_guard_acquire>
9001b782:	b138      	cbz	r0, 9001b794 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
9001b784:	4620      	mov	r0, r4
9001b786:	f007 fa24 	bl	90022bd2 <__cxa_guard_release>
9001b78a:	4a06      	ldr	r2, [pc, #24]	@ (9001b7a4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
9001b78c:	4909      	ldr	r1, [pc, #36]	@ (9001b7b4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
9001b78e:	480a      	ldr	r0, [pc, #40]	@ (9001b7b8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
9001b790:	f007 fa0c 	bl	90022bac <__aeabi_atexit>
9001b794:	4b05      	ldr	r3, [pc, #20]	@ (9001b7ac <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
9001b796:	60ab      	str	r3, [r5, #8]
9001b798:	4b07      	ldr	r3, [pc, #28]	@ (9001b7b8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
9001b79a:	60eb      	str	r3, [r5, #12]
9001b79c:	bd38      	pop	{r3, r4, r5, pc}
9001b79e:	bf00      	nop
9001b7a0:	240263b0 	.word	0x240263b0
9001b7a4:	24000000 	.word	0x24000000
9001b7a8:	900198e5 	.word	0x900198e5
9001b7ac:	24000084 	.word	0x24000084
9001b7b0:	240263b4 	.word	0x240263b4
9001b7b4:	900198e3 	.word	0x900198e3
9001b7b8:	24000088 	.word	0x24000088

9001b7bc <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>:
9001b7bc:	b510      	push	{r4, lr}
9001b7be:	4604      	mov	r4, r0
9001b7c0:	f7ff ff88 	bl	9001b6d4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>
9001b7c4:	4620      	mov	r0, r4
9001b7c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9001b7ca:	f7ff bfbd 	b.w	9001b748 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>
	...

9001b7d0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
9001b7d0:	b538      	push	{r3, r4, r5, lr}
9001b7d2:	4c15      	ldr	r4, [pc, #84]	@ (9001b828 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
9001b7d4:	4605      	mov	r5, r0
9001b7d6:	7823      	ldrb	r3, [r4, #0]
9001b7d8:	f3bf 8f5b 	dmb	ish
9001b7dc:	07da      	lsls	r2, r3, #31
9001b7de:	d40b      	bmi.n	9001b7f8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
9001b7e0:	4620      	mov	r0, r4
9001b7e2:	f007 f9ea 	bl	90022bba <__cxa_guard_acquire>
9001b7e6:	b138      	cbz	r0, 9001b7f8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
9001b7e8:	4620      	mov	r0, r4
9001b7ea:	f007 f9f2 	bl	90022bd2 <__cxa_guard_release>
9001b7ee:	4a0f      	ldr	r2, [pc, #60]	@ (9001b82c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
9001b7f0:	490f      	ldr	r1, [pc, #60]	@ (9001b830 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
9001b7f2:	4810      	ldr	r0, [pc, #64]	@ (9001b834 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
9001b7f4:	f007 f9da 	bl	90022bac <__aeabi_atexit>
9001b7f8:	4c0f      	ldr	r4, [pc, #60]	@ (9001b838 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
9001b7fa:	7823      	ldrb	r3, [r4, #0]
9001b7fc:	f3bf 8f5b 	dmb	ish
9001b800:	07db      	lsls	r3, r3, #31
9001b802:	d40b      	bmi.n	9001b81c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
9001b804:	4620      	mov	r0, r4
9001b806:	f007 f9d8 	bl	90022bba <__cxa_guard_acquire>
9001b80a:	b138      	cbz	r0, 9001b81c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
9001b80c:	4620      	mov	r0, r4
9001b80e:	f007 f9e0 	bl	90022bd2 <__cxa_guard_release>
9001b812:	4a06      	ldr	r2, [pc, #24]	@ (9001b82c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
9001b814:	4909      	ldr	r1, [pc, #36]	@ (9001b83c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
9001b816:	480a      	ldr	r0, [pc, #40]	@ (9001b840 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
9001b818:	f007 f9c8 	bl	90022bac <__aeabi_atexit>
9001b81c:	4b05      	ldr	r3, [pc, #20]	@ (9001b834 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
9001b81e:	622b      	str	r3, [r5, #32]
9001b820:	4b07      	ldr	r3, [pc, #28]	@ (9001b840 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
9001b822:	626b      	str	r3, [r5, #36]	@ 0x24
9001b824:	bd38      	pop	{r3, r4, r5, pc}
9001b826:	bf00      	nop
9001b828:	240263e0 	.word	0x240263e0
9001b82c:	24000000 	.word	0x24000000
9001b830:	900198d9 	.word	0x900198d9
9001b834:	240000b4 	.word	0x240000b4
9001b838:	240263e4 	.word	0x240263e4
9001b83c:	900198d7 	.word	0x900198d7
9001b840:	240000b8 	.word	0x240000b8

9001b844 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
9001b844:	b538      	push	{r3, r4, r5, lr}
9001b846:	4c15      	ldr	r4, [pc, #84]	@ (9001b89c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
9001b848:	4605      	mov	r5, r0
9001b84a:	7823      	ldrb	r3, [r4, #0]
9001b84c:	f3bf 8f5b 	dmb	ish
9001b850:	07da      	lsls	r2, r3, #31
9001b852:	d40b      	bmi.n	9001b86c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
9001b854:	4620      	mov	r0, r4
9001b856:	f007 f9b0 	bl	90022bba <__cxa_guard_acquire>
9001b85a:	b138      	cbz	r0, 9001b86c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
9001b85c:	4620      	mov	r0, r4
9001b85e:	f007 f9b8 	bl	90022bd2 <__cxa_guard_release>
9001b862:	4a0f      	ldr	r2, [pc, #60]	@ (9001b8a0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
9001b864:	490f      	ldr	r1, [pc, #60]	@ (9001b8a4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
9001b866:	4810      	ldr	r0, [pc, #64]	@ (9001b8a8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
9001b868:	f007 f9a0 	bl	90022bac <__aeabi_atexit>
9001b86c:	4c0f      	ldr	r4, [pc, #60]	@ (9001b8ac <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
9001b86e:	7823      	ldrb	r3, [r4, #0]
9001b870:	f3bf 8f5b 	dmb	ish
9001b874:	07db      	lsls	r3, r3, #31
9001b876:	d40b      	bmi.n	9001b890 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
9001b878:	4620      	mov	r0, r4
9001b87a:	f007 f99e 	bl	90022bba <__cxa_guard_acquire>
9001b87e:	b138      	cbz	r0, 9001b890 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
9001b880:	4620      	mov	r0, r4
9001b882:	f007 f9a6 	bl	90022bd2 <__cxa_guard_release>
9001b886:	4a06      	ldr	r2, [pc, #24]	@ (9001b8a0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
9001b888:	4909      	ldr	r1, [pc, #36]	@ (9001b8b0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
9001b88a:	480a      	ldr	r0, [pc, #40]	@ (9001b8b4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
9001b88c:	f007 f98e 	bl	90022bac <__aeabi_atexit>
9001b890:	4b05      	ldr	r3, [pc, #20]	@ (9001b8a8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
9001b892:	61ab      	str	r3, [r5, #24]
9001b894:	4b07      	ldr	r3, [pc, #28]	@ (9001b8b4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
9001b896:	61eb      	str	r3, [r5, #28]
9001b898:	bd38      	pop	{r3, r4, r5, pc}
9001b89a:	bf00      	nop
9001b89c:	240263b8 	.word	0x240263b8
9001b8a0:	24000000 	.word	0x24000000
9001b8a4:	900198dd 	.word	0x900198dd
9001b8a8:	2400008c 	.word	0x2400008c
9001b8ac:	240263bc 	.word	0x240263bc
9001b8b0:	900198db 	.word	0x900198db
9001b8b4:	24000090 	.word	0x24000090

9001b8b8 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>:
9001b8b8:	b510      	push	{r4, lr}
9001b8ba:	4604      	mov	r4, r0
9001b8bc:	f7ff ff88 	bl	9001b7d0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
9001b8c0:	4620      	mov	r0, r4
9001b8c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9001b8c6:	f7ff bfbd 	b.w	9001b844 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

9001b8cc <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
9001b8cc:	b538      	push	{r3, r4, r5, lr}
9001b8ce:	4c15      	ldr	r4, [pc, #84]	@ (9001b924 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
9001b8d0:	4605      	mov	r5, r0
9001b8d2:	7823      	ldrb	r3, [r4, #0]
9001b8d4:	f3bf 8f5b 	dmb	ish
9001b8d8:	07da      	lsls	r2, r3, #31
9001b8da:	d40b      	bmi.n	9001b8f4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
9001b8dc:	4620      	mov	r0, r4
9001b8de:	f007 f96c 	bl	90022bba <__cxa_guard_acquire>
9001b8e2:	b138      	cbz	r0, 9001b8f4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
9001b8e4:	4620      	mov	r0, r4
9001b8e6:	f007 f974 	bl	90022bd2 <__cxa_guard_release>
9001b8ea:	4a0f      	ldr	r2, [pc, #60]	@ (9001b928 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
9001b8ec:	490f      	ldr	r1, [pc, #60]	@ (9001b92c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
9001b8ee:	4810      	ldr	r0, [pc, #64]	@ (9001b930 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
9001b8f0:	f007 f95c 	bl	90022bac <__aeabi_atexit>
9001b8f4:	4c0f      	ldr	r4, [pc, #60]	@ (9001b934 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
9001b8f6:	7823      	ldrb	r3, [r4, #0]
9001b8f8:	f3bf 8f5b 	dmb	ish
9001b8fc:	07db      	lsls	r3, r3, #31
9001b8fe:	d40b      	bmi.n	9001b918 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
9001b900:	4620      	mov	r0, r4
9001b902:	f007 f95a 	bl	90022bba <__cxa_guard_acquire>
9001b906:	b138      	cbz	r0, 9001b918 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
9001b908:	4620      	mov	r0, r4
9001b90a:	f007 f962 	bl	90022bd2 <__cxa_guard_release>
9001b90e:	4a06      	ldr	r2, [pc, #24]	@ (9001b928 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
9001b910:	4909      	ldr	r1, [pc, #36]	@ (9001b938 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
9001b912:	480a      	ldr	r0, [pc, #40]	@ (9001b93c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
9001b914:	f007 f94a 	bl	90022bac <__aeabi_atexit>
9001b918:	4b05      	ldr	r3, [pc, #20]	@ (9001b930 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
9001b91a:	632b      	str	r3, [r5, #48]	@ 0x30
9001b91c:	4b07      	ldr	r3, [pc, #28]	@ (9001b93c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
9001b91e:	636b      	str	r3, [r5, #52]	@ 0x34
9001b920:	bd38      	pop	{r3, r4, r5, pc}
9001b922:	bf00      	nop
9001b924:	240263f0 	.word	0x240263f0
9001b928:	24000000 	.word	0x24000000
9001b92c:	900198d1 	.word	0x900198d1
9001b930:	240000c4 	.word	0x240000c4
9001b934:	240263f4 	.word	0x240263f4
9001b938:	900198cf 	.word	0x900198cf
9001b93c:	240000c8 	.word	0x240000c8

9001b940 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
9001b940:	b538      	push	{r3, r4, r5, lr}
9001b942:	4c15      	ldr	r4, [pc, #84]	@ (9001b998 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
9001b944:	4605      	mov	r5, r0
9001b946:	7823      	ldrb	r3, [r4, #0]
9001b948:	f3bf 8f5b 	dmb	ish
9001b94c:	07da      	lsls	r2, r3, #31
9001b94e:	d40b      	bmi.n	9001b968 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
9001b950:	4620      	mov	r0, r4
9001b952:	f007 f932 	bl	90022bba <__cxa_guard_acquire>
9001b956:	b138      	cbz	r0, 9001b968 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
9001b958:	4620      	mov	r0, r4
9001b95a:	f007 f93a 	bl	90022bd2 <__cxa_guard_release>
9001b95e:	4a0f      	ldr	r2, [pc, #60]	@ (9001b99c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
9001b960:	490f      	ldr	r1, [pc, #60]	@ (9001b9a0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
9001b962:	4810      	ldr	r0, [pc, #64]	@ (9001b9a4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
9001b964:	f007 f922 	bl	90022bac <__aeabi_atexit>
9001b968:	4c0f      	ldr	r4, [pc, #60]	@ (9001b9a8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
9001b96a:	7823      	ldrb	r3, [r4, #0]
9001b96c:	f3bf 8f5b 	dmb	ish
9001b970:	07db      	lsls	r3, r3, #31
9001b972:	d40b      	bmi.n	9001b98c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
9001b974:	4620      	mov	r0, r4
9001b976:	f007 f920 	bl	90022bba <__cxa_guard_acquire>
9001b97a:	b138      	cbz	r0, 9001b98c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
9001b97c:	4620      	mov	r0, r4
9001b97e:	f007 f928 	bl	90022bd2 <__cxa_guard_release>
9001b982:	4a06      	ldr	r2, [pc, #24]	@ (9001b99c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
9001b984:	4909      	ldr	r1, [pc, #36]	@ (9001b9ac <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
9001b986:	480a      	ldr	r0, [pc, #40]	@ (9001b9b0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
9001b988:	f007 f910 	bl	90022bac <__aeabi_atexit>
9001b98c:	4b05      	ldr	r3, [pc, #20]	@ (9001b9a4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
9001b98e:	62ab      	str	r3, [r5, #40]	@ 0x28
9001b990:	4b07      	ldr	r3, [pc, #28]	@ (9001b9b0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
9001b992:	62eb      	str	r3, [r5, #44]	@ 0x2c
9001b994:	bd38      	pop	{r3, r4, r5, pc}
9001b996:	bf00      	nop
9001b998:	240263c0 	.word	0x240263c0
9001b99c:	24000000 	.word	0x24000000
9001b9a0:	900198d5 	.word	0x900198d5
9001b9a4:	24000094 	.word	0x24000094
9001b9a8:	240263c4 	.word	0x240263c4
9001b9ac:	900198d3 	.word	0x900198d3
9001b9b0:	24000098 	.word	0x24000098

9001b9b4 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>:
9001b9b4:	b510      	push	{r4, lr}
9001b9b6:	4604      	mov	r4, r0
9001b9b8:	f7ff ff88 	bl	9001b8cc <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
9001b9bc:	4620      	mov	r0, r4
9001b9be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9001b9c2:	f7ff bfbd 	b.w	9001b940 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

9001b9c8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>:
9001b9c8:	b538      	push	{r3, r4, r5, lr}
9001b9ca:	4c15      	ldr	r4, [pc, #84]	@ (9001ba20 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
9001b9cc:	4605      	mov	r5, r0
9001b9ce:	7823      	ldrb	r3, [r4, #0]
9001b9d0:	f3bf 8f5b 	dmb	ish
9001b9d4:	07da      	lsls	r2, r3, #31
9001b9d6:	d40b      	bmi.n	9001b9f0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
9001b9d8:	4620      	mov	r0, r4
9001b9da:	f007 f8ee 	bl	90022bba <__cxa_guard_acquire>
9001b9de:	b138      	cbz	r0, 9001b9f0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
9001b9e0:	4620      	mov	r0, r4
9001b9e2:	f007 f8f6 	bl	90022bd2 <__cxa_guard_release>
9001b9e6:	4a0f      	ldr	r2, [pc, #60]	@ (9001ba24 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
9001b9e8:	490f      	ldr	r1, [pc, #60]	@ (9001ba28 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
9001b9ea:	4810      	ldr	r0, [pc, #64]	@ (9001ba2c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
9001b9ec:	f007 f8de 	bl	90022bac <__aeabi_atexit>
9001b9f0:	4c0f      	ldr	r4, [pc, #60]	@ (9001ba30 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x68>)
9001b9f2:	7823      	ldrb	r3, [r4, #0]
9001b9f4:	f3bf 8f5b 	dmb	ish
9001b9f8:	07db      	lsls	r3, r3, #31
9001b9fa:	d40b      	bmi.n	9001ba14 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
9001b9fc:	4620      	mov	r0, r4
9001b9fe:	f007 f8dc 	bl	90022bba <__cxa_guard_acquire>
9001ba02:	b138      	cbz	r0, 9001ba14 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
9001ba04:	4620      	mov	r0, r4
9001ba06:	f007 f8e4 	bl	90022bd2 <__cxa_guard_release>
9001ba0a:	4a06      	ldr	r2, [pc, #24]	@ (9001ba24 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
9001ba0c:	4909      	ldr	r1, [pc, #36]	@ (9001ba34 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
9001ba0e:	480a      	ldr	r0, [pc, #40]	@ (9001ba38 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
9001ba10:	f007 f8cc 	bl	90022bac <__aeabi_atexit>
9001ba14:	4b05      	ldr	r3, [pc, #20]	@ (9001ba2c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
9001ba16:	652b      	str	r3, [r5, #80]	@ 0x50
9001ba18:	4b07      	ldr	r3, [pc, #28]	@ (9001ba38 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
9001ba1a:	656b      	str	r3, [r5, #84]	@ 0x54
9001ba1c:	bd38      	pop	{r3, r4, r5, pc}
9001ba1e:	bf00      	nop
9001ba20:	240263f8 	.word	0x240263f8
9001ba24:	24000000 	.word	0x24000000
9001ba28:	900198c1 	.word	0x900198c1
9001ba2c:	240000cc 	.word	0x240000cc
9001ba30:	240263fc 	.word	0x240263fc
9001ba34:	900198bf 	.word	0x900198bf
9001ba38:	240000d0 	.word	0x240000d0

9001ba3c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>:
9001ba3c:	b538      	push	{r3, r4, r5, lr}
9001ba3e:	4c15      	ldr	r4, [pc, #84]	@ (9001ba94 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
9001ba40:	4605      	mov	r5, r0
9001ba42:	7823      	ldrb	r3, [r4, #0]
9001ba44:	f3bf 8f5b 	dmb	ish
9001ba48:	07da      	lsls	r2, r3, #31
9001ba4a:	d40b      	bmi.n	9001ba64 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
9001ba4c:	4620      	mov	r0, r4
9001ba4e:	f007 f8b4 	bl	90022bba <__cxa_guard_acquire>
9001ba52:	b138      	cbz	r0, 9001ba64 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
9001ba54:	4620      	mov	r0, r4
9001ba56:	f007 f8bc 	bl	90022bd2 <__cxa_guard_release>
9001ba5a:	4a0f      	ldr	r2, [pc, #60]	@ (9001ba98 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
9001ba5c:	490f      	ldr	r1, [pc, #60]	@ (9001ba9c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
9001ba5e:	4810      	ldr	r0, [pc, #64]	@ (9001baa0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
9001ba60:	f007 f8a4 	bl	90022bac <__aeabi_atexit>
9001ba64:	4c0f      	ldr	r4, [pc, #60]	@ (9001baa4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x68>)
9001ba66:	7823      	ldrb	r3, [r4, #0]
9001ba68:	f3bf 8f5b 	dmb	ish
9001ba6c:	07db      	lsls	r3, r3, #31
9001ba6e:	d40b      	bmi.n	9001ba88 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
9001ba70:	4620      	mov	r0, r4
9001ba72:	f007 f8a2 	bl	90022bba <__cxa_guard_acquire>
9001ba76:	b138      	cbz	r0, 9001ba88 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
9001ba78:	4620      	mov	r0, r4
9001ba7a:	f007 f8aa 	bl	90022bd2 <__cxa_guard_release>
9001ba7e:	4a06      	ldr	r2, [pc, #24]	@ (9001ba98 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
9001ba80:	4909      	ldr	r1, [pc, #36]	@ (9001baa8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
9001ba82:	480a      	ldr	r0, [pc, #40]	@ (9001baac <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
9001ba84:	f007 f892 	bl	90022bac <__aeabi_atexit>
9001ba88:	4b05      	ldr	r3, [pc, #20]	@ (9001baa0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
9001ba8a:	64ab      	str	r3, [r5, #72]	@ 0x48
9001ba8c:	4b07      	ldr	r3, [pc, #28]	@ (9001baac <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
9001ba8e:	64eb      	str	r3, [r5, #76]	@ 0x4c
9001ba90:	bd38      	pop	{r3, r4, r5, pc}
9001ba92:	bf00      	nop
9001ba94:	24026400 	.word	0x24026400
9001ba98:	24000000 	.word	0x24000000
9001ba9c:	900198c5 	.word	0x900198c5
9001baa0:	240000d4 	.word	0x240000d4
9001baa4:	24026404 	.word	0x24026404
9001baa8:	900198c3 	.word	0x900198c3
9001baac:	240000d8 	.word	0x240000d8

9001bab0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>:
9001bab0:	b538      	push	{r3, r4, r5, lr}
9001bab2:	4c15      	ldr	r4, [pc, #84]	@ (9001bb08 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
9001bab4:	4605      	mov	r5, r0
9001bab6:	7823      	ldrb	r3, [r4, #0]
9001bab8:	f3bf 8f5b 	dmb	ish
9001babc:	07da      	lsls	r2, r3, #31
9001babe:	d40b      	bmi.n	9001bad8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
9001bac0:	4620      	mov	r0, r4
9001bac2:	f007 f87a 	bl	90022bba <__cxa_guard_acquire>
9001bac6:	b138      	cbz	r0, 9001bad8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
9001bac8:	4620      	mov	r0, r4
9001baca:	f007 f882 	bl	90022bd2 <__cxa_guard_release>
9001bace:	4a0f      	ldr	r2, [pc, #60]	@ (9001bb0c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
9001bad0:	490f      	ldr	r1, [pc, #60]	@ (9001bb10 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
9001bad2:	4810      	ldr	r0, [pc, #64]	@ (9001bb14 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
9001bad4:	f007 f86a 	bl	90022bac <__aeabi_atexit>
9001bad8:	4c0f      	ldr	r4, [pc, #60]	@ (9001bb18 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x68>)
9001bada:	7823      	ldrb	r3, [r4, #0]
9001badc:	f3bf 8f5b 	dmb	ish
9001bae0:	07db      	lsls	r3, r3, #31
9001bae2:	d40b      	bmi.n	9001bafc <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
9001bae4:	4620      	mov	r0, r4
9001bae6:	f007 f868 	bl	90022bba <__cxa_guard_acquire>
9001baea:	b138      	cbz	r0, 9001bafc <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
9001baec:	4620      	mov	r0, r4
9001baee:	f007 f870 	bl	90022bd2 <__cxa_guard_release>
9001baf2:	4a06      	ldr	r2, [pc, #24]	@ (9001bb0c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
9001baf4:	4909      	ldr	r1, [pc, #36]	@ (9001bb1c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
9001baf6:	480a      	ldr	r0, [pc, #40]	@ (9001bb20 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
9001baf8:	f007 f858 	bl	90022bac <__aeabi_atexit>
9001bafc:	4b05      	ldr	r3, [pc, #20]	@ (9001bb14 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
9001bafe:	642b      	str	r3, [r5, #64]	@ 0x40
9001bb00:	4b07      	ldr	r3, [pc, #28]	@ (9001bb20 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
9001bb02:	646b      	str	r3, [r5, #68]	@ 0x44
9001bb04:	bd38      	pop	{r3, r4, r5, pc}
9001bb06:	bf00      	nop
9001bb08:	240263c8 	.word	0x240263c8
9001bb0c:	24000000 	.word	0x24000000
9001bb10:	900198c9 	.word	0x900198c9
9001bb14:	2400009c 	.word	0x2400009c
9001bb18:	240263cc 	.word	0x240263cc
9001bb1c:	900198c7 	.word	0x900198c7
9001bb20:	240000a0 	.word	0x240000a0

9001bb24 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>:
9001bb24:	b538      	push	{r3, r4, r5, lr}
9001bb26:	4c15      	ldr	r4, [pc, #84]	@ (9001bb7c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
9001bb28:	4605      	mov	r5, r0
9001bb2a:	7823      	ldrb	r3, [r4, #0]
9001bb2c:	f3bf 8f5b 	dmb	ish
9001bb30:	07da      	lsls	r2, r3, #31
9001bb32:	d40b      	bmi.n	9001bb4c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
9001bb34:	4620      	mov	r0, r4
9001bb36:	f007 f840 	bl	90022bba <__cxa_guard_acquire>
9001bb3a:	b138      	cbz	r0, 9001bb4c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
9001bb3c:	4620      	mov	r0, r4
9001bb3e:	f007 f848 	bl	90022bd2 <__cxa_guard_release>
9001bb42:	4a0f      	ldr	r2, [pc, #60]	@ (9001bb80 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
9001bb44:	490f      	ldr	r1, [pc, #60]	@ (9001bb84 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
9001bb46:	4810      	ldr	r0, [pc, #64]	@ (9001bb88 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
9001bb48:	f007 f830 	bl	90022bac <__aeabi_atexit>
9001bb4c:	4c0f      	ldr	r4, [pc, #60]	@ (9001bb8c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x68>)
9001bb4e:	7823      	ldrb	r3, [r4, #0]
9001bb50:	f3bf 8f5b 	dmb	ish
9001bb54:	07db      	lsls	r3, r3, #31
9001bb56:	d40b      	bmi.n	9001bb70 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
9001bb58:	4620      	mov	r0, r4
9001bb5a:	f007 f82e 	bl	90022bba <__cxa_guard_acquire>
9001bb5e:	b138      	cbz	r0, 9001bb70 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
9001bb60:	4620      	mov	r0, r4
9001bb62:	f007 f836 	bl	90022bd2 <__cxa_guard_release>
9001bb66:	4a06      	ldr	r2, [pc, #24]	@ (9001bb80 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
9001bb68:	4909      	ldr	r1, [pc, #36]	@ (9001bb90 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
9001bb6a:	480a      	ldr	r0, [pc, #40]	@ (9001bb94 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
9001bb6c:	f007 f81e 	bl	90022bac <__aeabi_atexit>
9001bb70:	4b05      	ldr	r3, [pc, #20]	@ (9001bb88 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
9001bb72:	63ab      	str	r3, [r5, #56]	@ 0x38
9001bb74:	4b07      	ldr	r3, [pc, #28]	@ (9001bb94 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
9001bb76:	63eb      	str	r3, [r5, #60]	@ 0x3c
9001bb78:	bd38      	pop	{r3, r4, r5, pc}
9001bb7a:	bf00      	nop
9001bb7c:	240263e8 	.word	0x240263e8
9001bb80:	24000000 	.word	0x24000000
9001bb84:	900198cd 	.word	0x900198cd
9001bb88:	240000bc 	.word	0x240000bc
9001bb8c:	240263ec 	.word	0x240263ec
9001bb90:	900198cb 	.word	0x900198cb
9001bb94:	240000c0 	.word	0x240000c0

9001bb98 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>:
9001bb98:	b510      	push	{r4, lr}
9001bb9a:	4604      	mov	r4, r0
9001bb9c:	f7ff ff14 	bl	9001b9c8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>
9001bba0:	4620      	mov	r0, r4
9001bba2:	f7ff ff85 	bl	9001bab0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>
9001bba6:	4620      	mov	r0, r4
9001bba8:	f7ff ff48 	bl	9001ba3c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>
9001bbac:	4620      	mov	r0, r4
9001bbae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9001bbb2:	f7ff bfb7 	b.w	9001bb24 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>
	...

9001bbb8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
9001bbb8:	b538      	push	{r3, r4, r5, lr}
9001bbba:	4c15      	ldr	r4, [pc, #84]	@ (9001bc10 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
9001bbbc:	4605      	mov	r5, r0
9001bbbe:	7823      	ldrb	r3, [r4, #0]
9001bbc0:	f3bf 8f5b 	dmb	ish
9001bbc4:	07da      	lsls	r2, r3, #31
9001bbc6:	d40b      	bmi.n	9001bbe0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
9001bbc8:	4620      	mov	r0, r4
9001bbca:	f006 fff6 	bl	90022bba <__cxa_guard_acquire>
9001bbce:	b138      	cbz	r0, 9001bbe0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
9001bbd0:	4620      	mov	r0, r4
9001bbd2:	f006 fffe 	bl	90022bd2 <__cxa_guard_release>
9001bbd6:	4a0f      	ldr	r2, [pc, #60]	@ (9001bc14 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
9001bbd8:	490f      	ldr	r1, [pc, #60]	@ (9001bc18 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
9001bbda:	4810      	ldr	r0, [pc, #64]	@ (9001bc1c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
9001bbdc:	f006 ffe6 	bl	90022bac <__aeabi_atexit>
9001bbe0:	4c0f      	ldr	r4, [pc, #60]	@ (9001bc20 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
9001bbe2:	7823      	ldrb	r3, [r4, #0]
9001bbe4:	f3bf 8f5b 	dmb	ish
9001bbe8:	07db      	lsls	r3, r3, #31
9001bbea:	d40b      	bmi.n	9001bc04 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
9001bbec:	4620      	mov	r0, r4
9001bbee:	f006 ffe4 	bl	90022bba <__cxa_guard_acquire>
9001bbf2:	b138      	cbz	r0, 9001bc04 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
9001bbf4:	4620      	mov	r0, r4
9001bbf6:	f006 ffec 	bl	90022bd2 <__cxa_guard_release>
9001bbfa:	4a06      	ldr	r2, [pc, #24]	@ (9001bc14 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
9001bbfc:	4909      	ldr	r1, [pc, #36]	@ (9001bc24 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
9001bbfe:	480a      	ldr	r0, [pc, #40]	@ (9001bc28 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
9001bc00:	f006 ffd4 	bl	90022bac <__aeabi_atexit>
9001bc04:	4b05      	ldr	r3, [pc, #20]	@ (9001bc1c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
9001bc06:	662b      	str	r3, [r5, #96]	@ 0x60
9001bc08:	4b07      	ldr	r3, [pc, #28]	@ (9001bc28 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
9001bc0a:	666b      	str	r3, [r5, #100]	@ 0x64
9001bc0c:	bd38      	pop	{r3, r4, r5, pc}
9001bc0e:	bf00      	nop
9001bc10:	240263d0 	.word	0x240263d0
9001bc14:	24000000 	.word	0x24000000
9001bc18:	900198b9 	.word	0x900198b9
9001bc1c:	240000a4 	.word	0x240000a4
9001bc20:	240263d4 	.word	0x240263d4
9001bc24:	900198b7 	.word	0x900198b7
9001bc28:	240000a8 	.word	0x240000a8

9001bc2c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
9001bc2c:	b538      	push	{r3, r4, r5, lr}
9001bc2e:	4c15      	ldr	r4, [pc, #84]	@ (9001bc84 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
9001bc30:	4605      	mov	r5, r0
9001bc32:	7823      	ldrb	r3, [r4, #0]
9001bc34:	f3bf 8f5b 	dmb	ish
9001bc38:	07da      	lsls	r2, r3, #31
9001bc3a:	d40b      	bmi.n	9001bc54 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
9001bc3c:	4620      	mov	r0, r4
9001bc3e:	f006 ffbc 	bl	90022bba <__cxa_guard_acquire>
9001bc42:	b138      	cbz	r0, 9001bc54 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
9001bc44:	4620      	mov	r0, r4
9001bc46:	f006 ffc4 	bl	90022bd2 <__cxa_guard_release>
9001bc4a:	4a0f      	ldr	r2, [pc, #60]	@ (9001bc88 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
9001bc4c:	490f      	ldr	r1, [pc, #60]	@ (9001bc8c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
9001bc4e:	4810      	ldr	r0, [pc, #64]	@ (9001bc90 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
9001bc50:	f006 ffac 	bl	90022bac <__aeabi_atexit>
9001bc54:	4c0f      	ldr	r4, [pc, #60]	@ (9001bc94 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
9001bc56:	7823      	ldrb	r3, [r4, #0]
9001bc58:	f3bf 8f5b 	dmb	ish
9001bc5c:	07db      	lsls	r3, r3, #31
9001bc5e:	d40b      	bmi.n	9001bc78 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
9001bc60:	4620      	mov	r0, r4
9001bc62:	f006 ffaa 	bl	90022bba <__cxa_guard_acquire>
9001bc66:	b138      	cbz	r0, 9001bc78 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
9001bc68:	4620      	mov	r0, r4
9001bc6a:	f006 ffb2 	bl	90022bd2 <__cxa_guard_release>
9001bc6e:	4a06      	ldr	r2, [pc, #24]	@ (9001bc88 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
9001bc70:	4909      	ldr	r1, [pc, #36]	@ (9001bc98 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
9001bc72:	480a      	ldr	r0, [pc, #40]	@ (9001bc9c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
9001bc74:	f006 ff9a 	bl	90022bac <__aeabi_atexit>
9001bc78:	4b05      	ldr	r3, [pc, #20]	@ (9001bc90 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
9001bc7a:	65ab      	str	r3, [r5, #88]	@ 0x58
9001bc7c:	4b07      	ldr	r3, [pc, #28]	@ (9001bc9c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
9001bc7e:	65eb      	str	r3, [r5, #92]	@ 0x5c
9001bc80:	bd38      	pop	{r3, r4, r5, pc}
9001bc82:	bf00      	nop
9001bc84:	240263a8 	.word	0x240263a8
9001bc88:	24000000 	.word	0x24000000
9001bc8c:	900198bd 	.word	0x900198bd
9001bc90:	2400007c 	.word	0x2400007c
9001bc94:	240263ac 	.word	0x240263ac
9001bc98:	900198bb 	.word	0x900198bb
9001bc9c:	24000080 	.word	0x24000080

9001bca0 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>:
9001bca0:	b510      	push	{r4, lr}
9001bca2:	4604      	mov	r4, r0
9001bca4:	f7ff ff88 	bl	9001bbb8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
9001bca8:	4620      	mov	r0, r4
9001bcaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9001bcae:	f7ff bfbd 	b.w	9001bc2c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

9001bcb4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>:
9001bcb4:	b538      	push	{r3, r4, r5, lr}
9001bcb6:	4c15      	ldr	r4, [pc, #84]	@ (9001bd0c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
9001bcb8:	4605      	mov	r5, r0
9001bcba:	7823      	ldrb	r3, [r4, #0]
9001bcbc:	f3bf 8f5b 	dmb	ish
9001bcc0:	07da      	lsls	r2, r3, #31
9001bcc2:	d40b      	bmi.n	9001bcdc <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
9001bcc4:	4620      	mov	r0, r4
9001bcc6:	f006 ff78 	bl	90022bba <__cxa_guard_acquire>
9001bcca:	b138      	cbz	r0, 9001bcdc <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
9001bccc:	4620      	mov	r0, r4
9001bcce:	f006 ff80 	bl	90022bd2 <__cxa_guard_release>
9001bcd2:	4a0f      	ldr	r2, [pc, #60]	@ (9001bd10 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
9001bcd4:	490f      	ldr	r1, [pc, #60]	@ (9001bd14 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
9001bcd6:	4810      	ldr	r0, [pc, #64]	@ (9001bd18 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
9001bcd8:	f006 ff68 	bl	90022bac <__aeabi_atexit>
9001bcdc:	4c0f      	ldr	r4, [pc, #60]	@ (9001bd1c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
9001bcde:	7823      	ldrb	r3, [r4, #0]
9001bce0:	f3bf 8f5b 	dmb	ish
9001bce4:	07db      	lsls	r3, r3, #31
9001bce6:	d40b      	bmi.n	9001bd00 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
9001bce8:	4620      	mov	r0, r4
9001bcea:	f006 ff66 	bl	90022bba <__cxa_guard_acquire>
9001bcee:	b138      	cbz	r0, 9001bd00 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
9001bcf0:	4620      	mov	r0, r4
9001bcf2:	f006 ff6e 	bl	90022bd2 <__cxa_guard_release>
9001bcf6:	4a06      	ldr	r2, [pc, #24]	@ (9001bd10 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
9001bcf8:	4909      	ldr	r1, [pc, #36]	@ (9001bd20 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
9001bcfa:	480a      	ldr	r0, [pc, #40]	@ (9001bd24 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
9001bcfc:	f006 ff56 	bl	90022bac <__aeabi_atexit>
9001bd00:	4b05      	ldr	r3, [pc, #20]	@ (9001bd18 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
9001bd02:	672b      	str	r3, [r5, #112]	@ 0x70
9001bd04:	4b07      	ldr	r3, [pc, #28]	@ (9001bd24 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
9001bd06:	676b      	str	r3, [r5, #116]	@ 0x74
9001bd08:	bd38      	pop	{r3, r4, r5, pc}
9001bd0a:	bf00      	nop
9001bd0c:	240263a0 	.word	0x240263a0
9001bd10:	24000000 	.word	0x24000000
9001bd14:	900198b1 	.word	0x900198b1
9001bd18:	24000074 	.word	0x24000074
9001bd1c:	240263a4 	.word	0x240263a4
9001bd20:	900198af 	.word	0x900198af
9001bd24:	24000078 	.word	0x24000078

9001bd28 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>:
9001bd28:	b538      	push	{r3, r4, r5, lr}
9001bd2a:	4c15      	ldr	r4, [pc, #84]	@ (9001bd80 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
9001bd2c:	4605      	mov	r5, r0
9001bd2e:	7823      	ldrb	r3, [r4, #0]
9001bd30:	f3bf 8f5b 	dmb	ish
9001bd34:	07da      	lsls	r2, r3, #31
9001bd36:	d40b      	bmi.n	9001bd50 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
9001bd38:	4620      	mov	r0, r4
9001bd3a:	f006 ff3e 	bl	90022bba <__cxa_guard_acquire>
9001bd3e:	b138      	cbz	r0, 9001bd50 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
9001bd40:	4620      	mov	r0, r4
9001bd42:	f006 ff46 	bl	90022bd2 <__cxa_guard_release>
9001bd46:	4a0f      	ldr	r2, [pc, #60]	@ (9001bd84 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
9001bd48:	490f      	ldr	r1, [pc, #60]	@ (9001bd88 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
9001bd4a:	4810      	ldr	r0, [pc, #64]	@ (9001bd8c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
9001bd4c:	f006 ff2e 	bl	90022bac <__aeabi_atexit>
9001bd50:	4c0f      	ldr	r4, [pc, #60]	@ (9001bd90 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
9001bd52:	7823      	ldrb	r3, [r4, #0]
9001bd54:	f3bf 8f5b 	dmb	ish
9001bd58:	07db      	lsls	r3, r3, #31
9001bd5a:	d40b      	bmi.n	9001bd74 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
9001bd5c:	4620      	mov	r0, r4
9001bd5e:	f006 ff2c 	bl	90022bba <__cxa_guard_acquire>
9001bd62:	b138      	cbz	r0, 9001bd74 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
9001bd64:	4620      	mov	r0, r4
9001bd66:	f006 ff34 	bl	90022bd2 <__cxa_guard_release>
9001bd6a:	4a06      	ldr	r2, [pc, #24]	@ (9001bd84 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
9001bd6c:	4909      	ldr	r1, [pc, #36]	@ (9001bd94 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
9001bd6e:	480a      	ldr	r0, [pc, #40]	@ (9001bd98 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
9001bd70:	f006 ff1c 	bl	90022bac <__aeabi_atexit>
9001bd74:	4b05      	ldr	r3, [pc, #20]	@ (9001bd8c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
9001bd76:	66ab      	str	r3, [r5, #104]	@ 0x68
9001bd78:	4b07      	ldr	r3, [pc, #28]	@ (9001bd98 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
9001bd7a:	66eb      	str	r3, [r5, #108]	@ 0x6c
9001bd7c:	bd38      	pop	{r3, r4, r5, pc}
9001bd7e:	bf00      	nop
9001bd80:	24026398 	.word	0x24026398
9001bd84:	24000000 	.word	0x24000000
9001bd88:	900198b5 	.word	0x900198b5
9001bd8c:	2400006c 	.word	0x2400006c
9001bd90:	2402639c 	.word	0x2402639c
9001bd94:	900198b3 	.word	0x900198b3
9001bd98:	24000070 	.word	0x24000070

9001bd9c <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>:
9001bd9c:	b510      	push	{r4, lr}
9001bd9e:	4604      	mov	r4, r0
9001bda0:	f7ff ff88 	bl	9001bcb4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>
9001bda4:	4620      	mov	r0, r4
9001bda6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9001bdaa:	f7ff bfbd 	b.w	9001bd28 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>

9001bdae <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>:
9001bdae:	b510      	push	{r4, lr}
9001bdb0:	4604      	mov	r4, r0
9001bdb2:	f7ff fff3 	bl	9001bd9c <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>
9001bdb6:	4620      	mov	r0, r4
9001bdb8:	f7ff ff72 	bl	9001bca0 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>
9001bdbc:	4620      	mov	r0, r4
9001bdbe:	f7ff fdf9 	bl	9001b9b4 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>
9001bdc2:	4620      	mov	r0, r4
9001bdc4:	f7ff fcfa 	bl	9001b7bc <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>
9001bdc8:	4620      	mov	r0, r4
9001bdca:	f7ff fd75 	bl	9001b8b8 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>
9001bdce:	4620      	mov	r0, r4
9001bdd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9001bdd4:	f7ff bee0 	b.w	9001bb98 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>

9001bdd8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>:
9001bdd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001bddc:	e9dd 450b 	ldrd	r4, r5, [sp, #44]	@ 0x2c
9001bde0:	f9bd e024 	ldrsh.w	lr, [sp, #36]	@ 0x24
9001bde4:	2d00      	cmp	r5, #0
9001bde6:	f9bd b028 	ldrsh.w	fp, [sp, #40]	@ 0x28
9001bdea:	fb05 4c0e 	mla	ip, r5, lr, r4
9001bdee:	f89d 9034 	ldrb.w	r9, [sp, #52]	@ 0x34
9001bdf2:	f89d 7038 	ldrb.w	r7, [sp, #56]	@ 0x38
9001bdf6:	f89d 603c 	ldrb.w	r6, [sp, #60]	@ 0x3c
9001bdfa:	eb02 0a0c 	add.w	sl, r2, ip
9001bdfe:	8808      	ldrh	r0, [r1, #0]
9001be00:	f2c0 80b0 	blt.w	9001bf64 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
9001be04:	45ab      	cmp	fp, r5
9001be06:	f340 80ad 	ble.w	9001bf64 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
9001be0a:	2c00      	cmp	r4, #0
9001be0c:	f2c0 80a8 	blt.w	9001bf60 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
9001be10:	45a6      	cmp	lr, r4
9001be12:	f340 80a5 	ble.w	9001bf60 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
9001be16:	f812 200c 	ldrb.w	r2, [r2, ip]
9001be1a:	f833 8012 	ldrh.w	r8, [r3, r2, lsl #1]
9001be1e:	1c62      	adds	r2, r4, #1
9001be20:	f100 80a3 	bmi.w	9001bf6a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
9001be24:	4596      	cmp	lr, r2
9001be26:	f340 80a0 	ble.w	9001bf6a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
9001be2a:	f1b9 0f00 	cmp.w	r9, #0
9001be2e:	f000 809c 	beq.w	9001bf6a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
9001be32:	f89a 2001 	ldrb.w	r2, [sl, #1]
9001be36:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
9001be3a:	3501      	adds	r5, #1
9001be3c:	f100 8099 	bmi.w	9001bf72 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
9001be40:	45ab      	cmp	fp, r5
9001be42:	f340 8096 	ble.w	9001bf72 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
9001be46:	2f00      	cmp	r7, #0
9001be48:	f000 8093 	beq.w	9001bf72 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
9001be4c:	2c00      	cmp	r4, #0
9001be4e:	f2c0 808e 	blt.w	9001bf6e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
9001be52:	45a6      	cmp	lr, r4
9001be54:	f340 808b 	ble.w	9001bf6e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
9001be58:	f81a 200e 	ldrb.w	r2, [sl, lr]
9001be5c:	f833 5012 	ldrh.w	r5, [r3, r2, lsl #1]
9001be60:	3401      	adds	r4, #1
9001be62:	f100 8089 	bmi.w	9001bf78 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
9001be66:	45a6      	cmp	lr, r4
9001be68:	f340 8086 	ble.w	9001bf78 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
9001be6c:	f1b9 0f00 	cmp.w	r9, #0
9001be70:	f000 8082 	beq.w	9001bf78 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
9001be74:	44d6      	add	lr, sl
9001be76:	f89e 2001 	ldrb.w	r2, [lr, #1]
9001be7a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
9001be7e:	ea4f 4408 	mov.w	r4, r8, lsl #16
9001be82:	f428 68fc 	bic.w	r8, r8, #2016	@ 0x7e0
9001be86:	fb19 fe07 	smulbb	lr, r9, r7
9001be8a:	f1c7 0210 	rsb	r2, r7, #16
9001be8e:	f004 64fc 	and.w	r4, r4, #132120576	@ 0x7e00000
9001be92:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
9001be96:	eba2 0209 	sub.w	r2, r2, r9
9001be9a:	ea44 0808 	orr.w	r8, r4, r8
9001be9e:	ea4f 440c 	mov.w	r4, ip, lsl #16
9001bea2:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
9001bea6:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
9001beaa:	f004 64fc 	and.w	r4, r4, #132120576	@ 0x7e00000
9001beae:	ebce 0747 	rsb	r7, lr, r7, lsl #1
9001beb2:	ea44 0c0c 	orr.w	ip, r4, ip
9001beb6:	ebce 0449 	rsb	r4, lr, r9, lsl #1
9001beba:	fb04 f40c 	mul.w	r4, r4, ip
9001bebe:	fb02 4808 	mla	r8, r2, r8, r4
9001bec2:	041a      	lsls	r2, r3, #16
9001bec4:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
9001bec8:	b2b4      	uxth	r4, r6
9001beca:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
9001bece:	43f6      	mvns	r6, r6
9001bed0:	4313      	orrs	r3, r2
9001bed2:	042a      	lsls	r2, r5, #16
9001bed4:	f425 65fc 	bic.w	r5, r5, #2016	@ 0x7e0
9001bed8:	b2f6      	uxtb	r6, r6
9001beda:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
9001bede:	fb0e 8303 	mla	r3, lr, r3, r8
9001bee2:	432a      	orrs	r2, r5
9001bee4:	fb07 3202 	mla	r2, r7, r2, r3
9001bee8:	10c7      	asrs	r7, r0, #3
9001beea:	0d53      	lsrs	r3, r2, #21
9001beec:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
9001bef0:	0952      	lsrs	r2, r2, #5
9001bef2:	fb17 f706 	smulbb	r7, r7, r6
9001bef6:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
9001befa:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
9001befe:	431a      	orrs	r2, r3
9001bf00:	b293      	uxth	r3, r2
9001bf02:	1202      	asrs	r2, r0, #8
9001bf04:	121d      	asrs	r5, r3, #8
9001bf06:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
9001bf0a:	00c0      	lsls	r0, r0, #3
9001bf0c:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
9001bf10:	fb12 f206 	smulbb	r2, r2, r6
9001bf14:	b2c0      	uxtb	r0, r0
9001bf16:	fb05 2504 	mla	r5, r5, r4, r2
9001bf1a:	10da      	asrs	r2, r3, #3
9001bf1c:	fb10 f006 	smulbb	r0, r0, r6
9001bf20:	00db      	lsls	r3, r3, #3
9001bf22:	b2ad      	uxth	r5, r5
9001bf24:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
9001bf28:	b2db      	uxtb	r3, r3
9001bf2a:	fb02 7204 	mla	r2, r2, r4, r7
9001bf2e:	fb03 0004 	mla	r0, r3, r4, r0
9001bf32:	1c6b      	adds	r3, r5, #1
9001bf34:	b292      	uxth	r2, r2
9001bf36:	b280      	uxth	r0, r0
9001bf38:	eb03 2515 	add.w	r5, r3, r5, lsr #8
9001bf3c:	1c43      	adds	r3, r0, #1
9001bf3e:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
9001bf42:	eb03 2310 	add.w	r3, r3, r0, lsr #8
9001bf46:	1c50      	adds	r0, r2, #1
9001bf48:	eb00 2212 	add.w	r2, r0, r2, lsr #8
9001bf4c:	f3c3 23c4 	ubfx	r3, r3, #11, #5
9001bf50:	0952      	lsrs	r2, r2, #5
9001bf52:	432b      	orrs	r3, r5
9001bf54:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
9001bf58:	4313      	orrs	r3, r2
9001bf5a:	800b      	strh	r3, [r1, #0]
9001bf5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001bf60:	4680      	mov	r8, r0
9001bf62:	e75c      	b.n	9001be1e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x46>
9001bf64:	4684      	mov	ip, r0
9001bf66:	4680      	mov	r8, r0
9001bf68:	e767      	b.n	9001be3a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
9001bf6a:	4684      	mov	ip, r0
9001bf6c:	e765      	b.n	9001be3a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
9001bf6e:	4605      	mov	r5, r0
9001bf70:	e776      	b.n	9001be60 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x88>
9001bf72:	4603      	mov	r3, r0
9001bf74:	4605      	mov	r5, r0
9001bf76:	e782      	b.n	9001be7e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
9001bf78:	4603      	mov	r3, r0
9001bf7a:	e780      	b.n	9001be7e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>

9001bf7c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001bf7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001bf80:	b099      	sub	sp, #100	@ 0x64
9001bf82:	9215      	str	r2, [sp, #84]	@ 0x54
9001bf84:	9309      	str	r3, [sp, #36]	@ 0x24
9001bf86:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
9001bf88:	f89d 30ac 	ldrb.w	r3, [sp, #172]	@ 0xac
9001bf8c:	9016      	str	r0, [sp, #88]	@ 0x58
9001bf8e:	930d      	str	r3, [sp, #52]	@ 0x34
9001bf90:	6850      	ldr	r0, [r2, #4]
9001bf92:	910c      	str	r1, [sp, #48]	@ 0x30
9001bf94:	6812      	ldr	r2, [r2, #0]
9001bf96:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	@ 0xa0
9001bf9a:	e9dd a523 	ldrd	sl, r5, [sp, #140]	@ 0x8c
9001bf9e:	fb00 1303 	mla	r3, r0, r3, r1
9001bfa2:	eb02 0843 	add.w	r8, r2, r3, lsl #1
9001bfa6:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
9001bfa8:	681b      	ldr	r3, [r3, #0]
9001bfaa:	930b      	str	r3, [sp, #44]	@ 0x2c
9001bfac:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
9001bfae:	685e      	ldr	r6, [r3, #4]
9001bfb0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
9001bfb2:	3604      	adds	r6, #4
9001bfb4:	43db      	mvns	r3, r3
9001bfb6:	b2db      	uxtb	r3, r3
9001bfb8:	930a      	str	r3, [sp, #40]	@ 0x28
9001bfba:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
9001bfbc:	2b00      	cmp	r3, #0
9001bfbe:	dc03      	bgt.n	9001bfc8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
9001bfc0:	9b15      	ldr	r3, [sp, #84]	@ 0x54
9001bfc2:	2b00      	cmp	r3, #0
9001bfc4:	f340 8225 	ble.w	9001c412 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
9001bfc8:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
9001bfca:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
9001bfce:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
9001bfd2:	1e48      	subs	r0, r1, #1
9001bfd4:	1e57      	subs	r7, r2, #1
9001bfd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
9001bfd8:	2b00      	cmp	r3, #0
9001bfda:	f340 80e3 	ble.w	9001c1a4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
9001bfde:	ea5f 4c2a 	movs.w	ip, sl, asr #16
9001bfe2:	ea4f 4325 	mov.w	r3, r5, asr #16
9001bfe6:	d406      	bmi.n	9001bff6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
9001bfe8:	4584      	cmp	ip, r0
9001bfea:	da04      	bge.n	9001bff6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
9001bfec:	2b00      	cmp	r3, #0
9001bfee:	db02      	blt.n	9001bff6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
9001bff0:	42bb      	cmp	r3, r7
9001bff2:	f2c0 80d8 	blt.w	9001c1a6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
9001bff6:	f11c 0c01 	adds.w	ip, ip, #1
9001bffa:	f100 80c9 	bmi.w	9001c190 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
9001bffe:	4561      	cmp	r1, ip
9001c000:	f2c0 80c6 	blt.w	9001c190 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
9001c004:	3301      	adds	r3, #1
9001c006:	f100 80c3 	bmi.w	9001c190 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
9001c00a:	429a      	cmp	r2, r3
9001c00c:	f2c0 80c0 	blt.w	9001c190 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
9001c010:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
9001c014:	4647      	mov	r7, r8
9001c016:	f1bb 0f00 	cmp.w	fp, #0
9001c01a:	f340 80e3 	ble.w	9001c1e4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
9001c01e:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
9001c020:	ea4f 4c25 	mov.w	ip, r5, asr #16
9001c024:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
9001c026:	f3ca 3003 	ubfx	r0, sl, #12, #4
9001c02a:	f8d2 e00c 	ldr.w	lr, [r2, #12]
9001c02e:	ea5f 422a 	movs.w	r2, sl, asr #16
9001c032:	f3c5 3103 	ubfx	r1, r5, #12, #4
9001c036:	689b      	ldr	r3, [r3, #8]
9001c038:	f100 8121 	bmi.w	9001c27e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
9001c03c:	f103 39ff 	add.w	r9, r3, #4294967295
9001c040:	454a      	cmp	r2, r9
9001c042:	f280 811c 	bge.w	9001c27e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
9001c046:	f1bc 0f00 	cmp.w	ip, #0
9001c04a:	f2c0 8118 	blt.w	9001c27e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
9001c04e:	f10e 39ff 	add.w	r9, lr, #4294967295
9001c052:	45cc      	cmp	ip, r9
9001c054:	f280 8113 	bge.w	9001c27e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
9001c058:	b21b      	sxth	r3, r3
9001c05a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
9001c05c:	fb0c 2203 	mla	r2, ip, r3, r2
9001c060:	eb04 0902 	add.w	r9, r4, r2
9001c064:	5ca2      	ldrb	r2, [r4, r2]
9001c066:	f836 e012 	ldrh.w	lr, [r6, r2, lsl #1]
9001c06a:	2800      	cmp	r0, #0
9001c06c:	f000 80fe 	beq.w	9001c26c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
9001c070:	f899 2001 	ldrb.w	r2, [r9, #1]
9001c074:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
9001c078:	9211      	str	r2, [sp, #68]	@ 0x44
9001c07a:	b151      	cbz	r1, 9001c092 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
9001c07c:	eb09 0203 	add.w	r2, r9, r3
9001c080:	f819 3003 	ldrb.w	r3, [r9, r3]
9001c084:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
9001c088:	930f      	str	r3, [sp, #60]	@ 0x3c
9001c08a:	7853      	ldrb	r3, [r2, #1]
9001c08c:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
9001c090:	9312      	str	r3, [sp, #72]	@ 0x48
9001c092:	9b11      	ldr	r3, [sp, #68]	@ 0x44
9001c094:	fb10 f201 	smulbb	r2, r0, r1
9001c098:	9c12      	ldr	r4, [sp, #72]	@ 0x48
9001c09a:	ea4f 4c03 	mov.w	ip, r3, lsl #16
9001c09e:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
9001c0a2:	f424 64fc 	bic.w	r4, r4, #2016	@ 0x7e0
9001c0a6:	10d2      	asrs	r2, r2, #3
9001c0a8:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
9001c0ac:	ebc2 0940 	rsb	r9, r2, r0, lsl #1
9001c0b0:	ea4c 0c03 	orr.w	ip, ip, r3
9001c0b4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
9001c0b6:	041b      	lsls	r3, r3, #16
9001c0b8:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
9001c0bc:	4323      	orrs	r3, r4
9001c0be:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
9001c0c0:	4353      	muls	r3, r2
9001c0c2:	fb09 330c 	mla	r3, r9, ip, r3
9001c0c6:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
9001c0ca:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
9001c0ce:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
9001c0d2:	ea4c 0e0e 	orr.w	lr, ip, lr
9001c0d6:	f1c1 0c10 	rsb	ip, r1, #16
9001c0da:	ebac 0c00 	sub.w	ip, ip, r0
9001c0de:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
9001c0e2:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
9001c0e6:	fb0c 3c0e 	mla	ip, ip, lr, r3
9001c0ea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
9001c0ec:	0418      	lsls	r0, r3, #16
9001c0ee:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
9001c0f2:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
9001c0f6:	4318      	orrs	r0, r3
9001c0f8:	fb02 c200 	mla	r2, r2, r0, ip
9001c0fc:	8838      	ldrh	r0, [r7, #0]
9001c0fe:	0d53      	lsrs	r3, r2, #21
9001c100:	0952      	lsrs	r2, r2, #5
9001c102:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
9001c106:	1201      	asrs	r1, r0, #8
9001c108:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
9001c10c:	ea4f 0ee0 	mov.w	lr, r0, asr #3
9001c110:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
9001c114:	00c0      	lsls	r0, r0, #3
9001c116:	431a      	orrs	r2, r3
9001c118:	f8bd 3034 	ldrh.w	r3, [sp, #52]	@ 0x34
9001c11c:	fb11 f104 	smulbb	r1, r1, r4
9001c120:	f00e 0efc 	and.w	lr, lr, #252	@ 0xfc
9001c124:	b292      	uxth	r2, r2
9001c126:	fb1e fe04 	smulbb	lr, lr, r4
9001c12a:	b2c0      	uxtb	r0, r0
9001c12c:	ea4f 2c22 	mov.w	ip, r2, asr #8
9001c130:	fb10 f004 	smulbb	r0, r0, r4
9001c134:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
9001c138:	fb0c 1c03 	mla	ip, ip, r3, r1
9001c13c:	10d1      	asrs	r1, r2, #3
9001c13e:	00d2      	lsls	r2, r2, #3
9001c140:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
9001c144:	fa1f fc8c 	uxth.w	ip, ip
9001c148:	b2d2      	uxtb	r2, r2
9001c14a:	fb01 e103 	mla	r1, r1, r3, lr
9001c14e:	fb02 0303 	mla	r3, r2, r3, r0
9001c152:	b289      	uxth	r1, r1
9001c154:	b29a      	uxth	r2, r3
9001c156:	f10c 0301 	add.w	r3, ip, #1
9001c15a:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
9001c15e:	1c53      	adds	r3, r2, #1
9001c160:	eb03 2312 	add.w	r3, r3, r2, lsr #8
9001c164:	1c4a      	adds	r2, r1, #1
9001c166:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
9001c16a:	eb02 2111 	add.w	r1, r2, r1, lsr #8
9001c16e:	f3c3 23c4 	ubfx	r3, r3, #11, #5
9001c172:	0949      	lsrs	r1, r1, #5
9001c174:	ea43 030c 	orr.w	r3, r3, ip
9001c178:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
9001c17c:	430b      	orrs	r3, r1
9001c17e:	803b      	strh	r3, [r7, #0]
9001c180:	9b25      	ldr	r3, [sp, #148]	@ 0x94
9001c182:	3702      	adds	r7, #2
9001c184:	f10b 3bff 	add.w	fp, fp, #4294967295
9001c188:	449a      	add	sl, r3
9001c18a:	9b26      	ldr	r3, [sp, #152]	@ 0x98
9001c18c:	441d      	add	r5, r3
9001c18e:	e742      	b.n	9001c016 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
9001c190:	9b25      	ldr	r3, [sp, #148]	@ 0x94
9001c192:	f108 0802 	add.w	r8, r8, #2
9001c196:	449a      	add	sl, r3
9001c198:	9b26      	ldr	r3, [sp, #152]	@ 0x98
9001c19a:	441d      	add	r5, r3
9001c19c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
9001c19e:	3b01      	subs	r3, #1
9001c1a0:	9309      	str	r3, [sp, #36]	@ 0x24
9001c1a2:	e718      	b.n	9001bfd6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
9001c1a4:	d023      	beq.n	9001c1ee <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
9001c1a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
9001c1a8:	9825      	ldr	r0, [sp, #148]	@ 0x94
9001c1aa:	3b01      	subs	r3, #1
9001c1ac:	fb00 a003 	mla	r0, r0, r3, sl
9001c1b0:	1400      	asrs	r0, r0, #16
9001c1b2:	f53f af2d 	bmi.w	9001c010 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
9001c1b6:	3901      	subs	r1, #1
9001c1b8:	4288      	cmp	r0, r1
9001c1ba:	f6bf af29 	bge.w	9001c010 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
9001c1be:	9926      	ldr	r1, [sp, #152]	@ 0x98
9001c1c0:	fb01 5303 	mla	r3, r1, r3, r5
9001c1c4:	141b      	asrs	r3, r3, #16
9001c1c6:	f53f af23 	bmi.w	9001c010 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
9001c1ca:	3a01      	subs	r2, #1
9001c1cc:	4293      	cmp	r3, r2
9001c1ce:	f6bf af1f 	bge.w	9001c010 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
9001c1d2:	f8dd e024 	ldr.w	lr, [sp, #36]	@ 0x24
9001c1d6:	f8bd 9034 	ldrh.w	r9, [sp, #52]	@ 0x34
9001c1da:	f8cd 8038 	str.w	r8, [sp, #56]	@ 0x38
9001c1de:	f1be 0f00 	cmp.w	lr, #0
9001c1e2:	dc6c      	bgt.n	9001c2be <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
9001c1e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
9001c1e6:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
9001c1ea:	eb08 0844 	add.w	r8, r8, r4, lsl #1
9001c1ee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
9001c1f0:	2b00      	cmp	r3, #0
9001c1f2:	f340 810e 	ble.w	9001c412 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
9001c1f6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
9001c1fa:	9b22      	ldr	r3, [sp, #136]	@ 0x88
9001c1fc:	ee30 0a04 	vadd.f32	s0, s0, s8
9001c200:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001c204:	eef0 6a62 	vmov.f32	s13, s5
9001c208:	eec7 7a00 	vdiv.f32	s15, s14, s0
9001c20c:	ee31 1a05 	vadd.f32	s2, s2, s10
9001c210:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001c214:	ee16 aa90 	vmov	sl, s13
9001c218:	eef0 6a43 	vmov.f32	s13, s6
9001c21c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001c220:	ee16 5a90 	vmov	r5, s13
9001c224:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001c228:	ee61 7a27 	vmul.f32	s15, s2, s15
9001c22c:	ee77 2a62 	vsub.f32	s5, s14, s5
9001c230:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001c234:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001c238:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001c23c:	ee12 2a90 	vmov	r2, s5
9001c240:	eef0 2a47 	vmov.f32	s5, s14
9001c244:	fb92 f3f3 	sdiv	r3, r2, r3
9001c248:	ee13 2a10 	vmov	r2, s6
9001c24c:	9325      	str	r3, [sp, #148]	@ 0x94
9001c24e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
9001c250:	eeb0 3a67 	vmov.f32	s6, s15
9001c254:	fb92 f3f3 	sdiv	r3, r2, r3
9001c258:	9326      	str	r3, [sp, #152]	@ 0x98
9001c25a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
9001c25c:	9a15      	ldr	r2, [sp, #84]	@ 0x54
9001c25e:	3b01      	subs	r3, #1
9001c260:	930c      	str	r3, [sp, #48]	@ 0x30
9001c262:	9b22      	ldr	r3, [sp, #136]	@ 0x88
9001c264:	bf08      	it	eq
9001c266:	4613      	moveq	r3, r2
9001c268:	9309      	str	r3, [sp, #36]	@ 0x24
9001c26a:	e6a6      	b.n	9001bfba <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
9001c26c:	2900      	cmp	r1, #0
9001c26e:	f43f af10 	beq.w	9001c092 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
9001c272:	f819 3003 	ldrb.w	r3, [r9, r3]
9001c276:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
9001c27a:	930f      	str	r3, [sp, #60]	@ 0x3c
9001c27c:	e709      	b.n	9001c092 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
9001c27e:	f112 0901 	adds.w	r9, r2, #1
9001c282:	f53f af7d 	bmi.w	9001c180 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
9001c286:	454b      	cmp	r3, r9
9001c288:	f6ff af7a 	blt.w	9001c180 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
9001c28c:	f11c 0901 	adds.w	r9, ip, #1
9001c290:	f53f af76 	bmi.w	9001c180 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
9001c294:	45ce      	cmp	lr, r9
9001c296:	f6ff af73 	blt.w	9001c180 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
9001c29a:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
9001c29c:	b21b      	sxth	r3, r3
9001c29e:	9202      	str	r2, [sp, #8]
9001c2a0:	fa0f f28e 	sxth.w	r2, lr
9001c2a4:	9300      	str	r3, [sp, #0]
9001c2a6:	4633      	mov	r3, r6
9001c2a8:	9201      	str	r2, [sp, #4]
9001c2aa:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
9001c2ac:	e9cd 1405 	strd	r1, r4, [sp, #20]
9001c2b0:	e9cd c003 	strd	ip, r0, [sp, #12]
9001c2b4:	4639      	mov	r1, r7
9001c2b6:	9816      	ldr	r0, [sp, #88]	@ 0x58
9001c2b8:	f7ff fd8e 	bl	9001bdd8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>
9001c2bc:	e760      	b.n	9001c180 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
9001c2be:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
9001c2c0:	ea4f 422a 	mov.w	r2, sl, asr #16
9001c2c4:	1429      	asrs	r1, r5, #16
9001c2c6:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
9001c2c8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
9001c2cc:	f3ca 3c03 	ubfx	ip, sl, #12, #4
9001c2d0:	f3c5 3003 	ubfx	r0, r5, #12, #4
9001c2d4:	fb03 2101 	mla	r1, r3, r1, r2
9001c2d8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
9001c2da:	440a      	add	r2, r1
9001c2dc:	5c61      	ldrb	r1, [r4, r1]
9001c2de:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
9001c2e2:	f1bc 0f00 	cmp.w	ip, #0
9001c2e6:	f000 808c 	beq.w	9001c402 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x486>
9001c2ea:	7857      	ldrb	r7, [r2, #1]
9001c2ec:	f836 4017 	ldrh.w	r4, [r6, r7, lsl #1]
9001c2f0:	9413      	str	r4, [sp, #76]	@ 0x4c
9001c2f2:	b140      	cbz	r0, 9001c306 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
9001c2f4:	18d7      	adds	r7, r2, r3
9001c2f6:	5cd3      	ldrb	r3, [r2, r3]
9001c2f8:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
9001c2fc:	9310      	str	r3, [sp, #64]	@ 0x40
9001c2fe:	787b      	ldrb	r3, [r7, #1]
9001c300:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
9001c304:	9314      	str	r3, [sp, #80]	@ 0x50
9001c306:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
9001c308:	fb1c f200 	smulbb	r2, ip, r0
9001c30c:	9c14      	ldr	r4, [sp, #80]	@ 0x50
9001c30e:	f10e 3eff 	add.w	lr, lr, #4294967295
9001c312:	041f      	lsls	r7, r3, #16
9001c314:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
9001c318:	10d2      	asrs	r2, r2, #3
9001c31a:	f424 6bfc 	bic.w	fp, r4, #2016	@ 0x7e0
9001c31e:	f007 67fc 	and.w	r7, r7, #132120576	@ 0x7e00000
9001c322:	431f      	orrs	r7, r3
9001c324:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
9001c328:	9317      	str	r3, [sp, #92]	@ 0x5c
9001c32a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
9001c32c:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
9001c32e:	041b      	lsls	r3, r3, #16
9001c330:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
9001c334:	ea43 030b 	orr.w	r3, r3, fp
9001c338:	ea4f 4b01 	mov.w	fp, r1, lsl #16
9001c33c:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
9001c340:	4353      	muls	r3, r2
9001c342:	fb04 3707 	mla	r7, r4, r7, r3
9001c346:	f00b 63fc 	and.w	r3, fp, #132120576	@ 0x7e00000
9001c34a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
9001c34c:	ea43 0b01 	orr.w	fp, r3, r1
9001c350:	f1c0 0110 	rsb	r1, r0, #16
9001c354:	9b10      	ldr	r3, [sp, #64]	@ 0x40
9001c356:	eba1 0c0c 	sub.w	ip, r1, ip
9001c35a:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
9001c35e:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
9001c362:	fb0c 770b 	mla	r7, ip, fp, r7
9001c366:	ea4f 4c03 	mov.w	ip, r3, lsl #16
9001c36a:	f423 6bfc 	bic.w	fp, r3, #2016	@ 0x7e0
9001c36e:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
9001c372:	ea4c 0c0b 	orr.w	ip, ip, fp
9001c376:	fb02 770c 	mla	r7, r2, ip, r7
9001c37a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
9001c37c:	0d79      	lsrs	r1, r7, #21
9001c37e:	8812      	ldrh	r2, [r2, #0]
9001c380:	097f      	lsrs	r7, r7, #5
9001c382:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
9001c386:	f427 67fc 	bic.w	r7, r7, #2016	@ 0x7e0
9001c38a:	430f      	orrs	r7, r1
9001c38c:	1211      	asrs	r1, r2, #8
9001c38e:	b2bb      	uxth	r3, r7
9001c390:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
9001c394:	10d7      	asrs	r7, r2, #3
9001c396:	fb11 f104 	smulbb	r1, r1, r4
9001c39a:	1218      	asrs	r0, r3, #8
9001c39c:	00d2      	lsls	r2, r2, #3
9001c39e:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
9001c3a2:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
9001c3a6:	fb17 f704 	smulbb	r7, r7, r4
9001c3aa:	b2d2      	uxtb	r2, r2
9001c3ac:	fb00 1009 	mla	r0, r0, r9, r1
9001c3b0:	10d9      	asrs	r1, r3, #3
9001c3b2:	fb12 f204 	smulbb	r2, r2, r4
9001c3b6:	00db      	lsls	r3, r3, #3
9001c3b8:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
9001c3bc:	b280      	uxth	r0, r0
9001c3be:	b2db      	uxtb	r3, r3
9001c3c0:	fb01 7109 	mla	r1, r1, r9, r7
9001c3c4:	fb03 2309 	mla	r3, r3, r9, r2
9001c3c8:	1c42      	adds	r2, r0, #1
9001c3ca:	b289      	uxth	r1, r1
9001c3cc:	b29b      	uxth	r3, r3
9001c3ce:	eb02 2010 	add.w	r0, r2, r0, lsr #8
9001c3d2:	1c4f      	adds	r7, r1, #1
9001c3d4:	1c5a      	adds	r2, r3, #1
9001c3d6:	eb07 2111 	add.w	r1, r7, r1, lsr #8
9001c3da:	f400 4078 	and.w	r0, r0, #63488	@ 0xf800
9001c3de:	eb02 2213 	add.w	r2, r2, r3, lsr #8
9001c3e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
9001c3e4:	0949      	lsrs	r1, r1, #5
9001c3e6:	f3c2 22c4 	ubfx	r2, r2, #11, #5
9001c3ea:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
9001c3ee:	4310      	orrs	r0, r2
9001c3f0:	4308      	orrs	r0, r1
9001c3f2:	f823 0b02 	strh.w	r0, [r3], #2
9001c3f6:	930e      	str	r3, [sp, #56]	@ 0x38
9001c3f8:	9b25      	ldr	r3, [sp, #148]	@ 0x94
9001c3fa:	449a      	add	sl, r3
9001c3fc:	9b26      	ldr	r3, [sp, #152]	@ 0x98
9001c3fe:	441d      	add	r5, r3
9001c400:	e6ed      	b.n	9001c1de <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x262>
9001c402:	2800      	cmp	r0, #0
9001c404:	f43f af7f 	beq.w	9001c306 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
9001c408:	5cd3      	ldrb	r3, [r2, r3]
9001c40a:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
9001c40e:	9310      	str	r3, [sp, #64]	@ 0x40
9001c410:	e779      	b.n	9001c306 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
9001c412:	b019      	add	sp, #100	@ 0x64
9001c414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

9001c418 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
9001c418:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9001c41c:	e9dd 480a 	ldrd	r4, r8, [sp, #40]	@ 0x28
9001c420:	f9bd e020 	ldrsh.w	lr, [sp, #32]
9001c424:	f1b8 0f00 	cmp.w	r8, #0
9001c428:	f9bd a024 	ldrsh.w	sl, [sp, #36]	@ 0x24
9001c42c:	fb08 470e 	mla	r7, r8, lr, r4
9001c430:	f89d 5030 	ldrb.w	r5, [sp, #48]	@ 0x30
9001c434:	f89d 6034 	ldrb.w	r6, [sp, #52]	@ 0x34
9001c438:	eb02 0907 	add.w	r9, r2, r7
9001c43c:	8808      	ldrh	r0, [r1, #0]
9001c43e:	db67      	blt.n	9001c510 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
9001c440:	45c2      	cmp	sl, r8
9001c442:	dd65      	ble.n	9001c510 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
9001c444:	2c00      	cmp	r4, #0
9001c446:	db61      	blt.n	9001c50c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
9001c448:	45a6      	cmp	lr, r4
9001c44a:	dd5f      	ble.n	9001c50c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
9001c44c:	5dd2      	ldrb	r2, [r2, r7]
9001c44e:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
9001c452:	1c62      	adds	r2, r4, #1
9001c454:	d45f      	bmi.n	9001c516 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
9001c456:	4596      	cmp	lr, r2
9001c458:	dd5d      	ble.n	9001c516 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
9001c45a:	2d00      	cmp	r5, #0
9001c45c:	d05b      	beq.n	9001c516 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
9001c45e:	f899 2001 	ldrb.w	r2, [r9, #1]
9001c462:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
9001c466:	f118 0801 	adds.w	r8, r8, #1
9001c46a:	d458      	bmi.n	9001c51e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
9001c46c:	45c2      	cmp	sl, r8
9001c46e:	dd56      	ble.n	9001c51e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
9001c470:	2e00      	cmp	r6, #0
9001c472:	d054      	beq.n	9001c51e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
9001c474:	2c00      	cmp	r4, #0
9001c476:	db50      	blt.n	9001c51a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
9001c478:	45a6      	cmp	lr, r4
9001c47a:	dd4e      	ble.n	9001c51a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
9001c47c:	f819 200e 	ldrb.w	r2, [r9, lr]
9001c480:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
9001c484:	3401      	adds	r4, #1
9001c486:	d407      	bmi.n	9001c498 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
9001c488:	45a6      	cmp	lr, r4
9001c48a:	dd05      	ble.n	9001c498 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
9001c48c:	b125      	cbz	r5, 9001c498 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
9001c48e:	44ce      	add	lr, r9
9001c490:	f89e 0001 	ldrb.w	r0, [lr, #1]
9001c494:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
9001c498:	fb15 f406 	smulbb	r4, r5, r6
9001c49c:	ea4f 430c 	mov.w	r3, ip, lsl #16
9001c4a0:	ea4f 4e07 	mov.w	lr, r7, lsl #16
9001c4a4:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
9001c4a8:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
9001c4ac:	f3c4 04c7 	ubfx	r4, r4, #3, #8
9001c4b0:	f00e 6efc 	and.w	lr, lr, #132120576	@ 0x7e00000
9001c4b4:	f427 67fc 	bic.w	r7, r7, #2016	@ 0x7e0
9001c4b8:	ea43 0c0c 	orr.w	ip, r3, ip
9001c4bc:	f1c6 0310 	rsb	r3, r6, #16
9001c4c0:	ea4e 0707 	orr.w	r7, lr, r7
9001c4c4:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
9001c4c8:	1b5b      	subs	r3, r3, r5
9001c4ca:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
9001c4ce:	eb04 0343 	add.w	r3, r4, r3, lsl #1
9001c4d2:	437d      	muls	r5, r7
9001c4d4:	fb03 5c0c 	mla	ip, r3, ip, r5
9001c4d8:	0403      	lsls	r3, r0, #16
9001c4da:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
9001c4de:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
9001c4e2:	4318      	orrs	r0, r3
9001c4e4:	0413      	lsls	r3, r2, #16
9001c4e6:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
9001c4ea:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
9001c4ee:	fb04 c000 	mla	r0, r4, r0, ip
9001c4f2:	4313      	orrs	r3, r2
9001c4f4:	fb06 0003 	mla	r0, r6, r3, r0
9001c4f8:	0d43      	lsrs	r3, r0, #21
9001c4fa:	0940      	lsrs	r0, r0, #5
9001c4fc:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
9001c500:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
9001c504:	4318      	orrs	r0, r3
9001c506:	8008      	strh	r0, [r1, #0]
9001c508:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9001c50c:	4684      	mov	ip, r0
9001c50e:	e7a0      	b.n	9001c452 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x3a>
9001c510:	4607      	mov	r7, r0
9001c512:	4684      	mov	ip, r0
9001c514:	e7a7      	b.n	9001c466 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
9001c516:	4607      	mov	r7, r0
9001c518:	e7a5      	b.n	9001c466 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
9001c51a:	4602      	mov	r2, r0
9001c51c:	e7b2      	b.n	9001c484 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x6c>
9001c51e:	4602      	mov	r2, r0
9001c520:	e7ba      	b.n	9001c498 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>

9001c522 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001c522:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001c526:	b093      	sub	sp, #76	@ 0x4c
9001c528:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
9001c52c:	920f      	str	r2, [sp, #60]	@ 0x3c
9001c52e:	9a21      	ldr	r2, [sp, #132]	@ 0x84
9001c530:	9010      	str	r0, [sp, #64]	@ 0x40
9001c532:	9108      	str	r1, [sp, #32]
9001c534:	6850      	ldr	r0, [r2, #4]
9001c536:	9306      	str	r3, [sp, #24]
9001c538:	6812      	ldr	r2, [r2, #0]
9001c53a:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	@ 0x88
9001c53e:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	@ 0x74
9001c542:	fb00 1303 	mla	r3, r0, r3, r1
9001c546:	eb02 0943 	add.w	r9, r2, r3, lsl #1
9001c54a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
9001c54c:	681b      	ldr	r3, [r3, #0]
9001c54e:	9307      	str	r3, [sp, #28]
9001c550:	9b24      	ldr	r3, [sp, #144]	@ 0x90
9001c552:	685f      	ldr	r7, [r3, #4]
9001c554:	3704      	adds	r7, #4
9001c556:	9b08      	ldr	r3, [sp, #32]
9001c558:	2b00      	cmp	r3, #0
9001c55a:	dc03      	bgt.n	9001c564 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
9001c55c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
9001c55e:	2b00      	cmp	r3, #0
9001c560:	f340 81b2 	ble.w	9001c8c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
9001c564:	9b24      	ldr	r3, [sp, #144]	@ 0x90
9001c566:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
9001c56a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
9001c56e:	1e48      	subs	r0, r1, #1
9001c570:	f102 3cff 	add.w	ip, r2, #4294967295
9001c574:	9b06      	ldr	r3, [sp, #24]
9001c576:	2b00      	cmp	r3, #0
9001c578:	f340 80a9 	ble.w	9001c6ce <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
9001c57c:	ea5f 4e24 	movs.w	lr, r4, asr #16
9001c580:	ea4f 4326 	mov.w	r3, r6, asr #16
9001c584:	d406      	bmi.n	9001c594 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
9001c586:	4586      	cmp	lr, r0
9001c588:	da04      	bge.n	9001c594 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
9001c58a:	2b00      	cmp	r3, #0
9001c58c:	db02      	blt.n	9001c594 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
9001c58e:	4563      	cmp	r3, ip
9001c590:	f2c0 809e 	blt.w	9001c6d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
9001c594:	f11e 0e01 	adds.w	lr, lr, #1
9001c598:	f100 808f 	bmi.w	9001c6ba <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
9001c59c:	4571      	cmp	r1, lr
9001c59e:	f2c0 808c 	blt.w	9001c6ba <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
9001c5a2:	3301      	adds	r3, #1
9001c5a4:	f100 8089 	bmi.w	9001c6ba <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
9001c5a8:	429a      	cmp	r2, r3
9001c5aa:	f2c0 8086 	blt.w	9001c6ba <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
9001c5ae:	f8dd b018 	ldr.w	fp, [sp, #24]
9001c5b2:	46c8      	mov	r8, r9
9001c5b4:	f1bb 0f00 	cmp.w	fp, #0
9001c5b8:	f340 80a6 	ble.w	9001c708 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
9001c5bc:	9a24      	ldr	r2, [sp, #144]	@ 0x90
9001c5be:	ea4f 4c26 	mov.w	ip, r6, asr #16
9001c5c2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
9001c5c4:	f3c4 3003 	ubfx	r0, r4, #12, #4
9001c5c8:	f8d2 e00c 	ldr.w	lr, [r2, #12]
9001c5cc:	1422      	asrs	r2, r4, #16
9001c5ce:	f3c6 3103 	ubfx	r1, r6, #12, #4
9001c5d2:	689b      	ldr	r3, [r3, #8]
9001c5d4:	f100 80e3 	bmi.w	9001c79e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
9001c5d8:	f103 3aff 	add.w	sl, r3, #4294967295
9001c5dc:	4552      	cmp	r2, sl
9001c5de:	f280 80de 	bge.w	9001c79e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
9001c5e2:	f1bc 0f00 	cmp.w	ip, #0
9001c5e6:	f2c0 80da 	blt.w	9001c79e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
9001c5ea:	f10e 3aff 	add.w	sl, lr, #4294967295
9001c5ee:	45d4      	cmp	ip, sl
9001c5f0:	f280 80d5 	bge.w	9001c79e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
9001c5f4:	b21b      	sxth	r3, r3
9001c5f6:	9d07      	ldr	r5, [sp, #28]
9001c5f8:	fb0c 2203 	mla	r2, ip, r3, r2
9001c5fc:	eb05 0a02 	add.w	sl, r5, r2
9001c600:	5caa      	ldrb	r2, [r5, r2]
9001c602:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
9001c606:	2800      	cmp	r0, #0
9001c608:	f000 80c0 	beq.w	9001c78c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
9001c60c:	f89a 2001 	ldrb.w	r2, [sl, #1]
9001c610:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
9001c614:	920b      	str	r2, [sp, #44]	@ 0x2c
9001c616:	b151      	cbz	r1, 9001c62e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
9001c618:	eb0a 0203 	add.w	r2, sl, r3
9001c61c:	f81a 3003 	ldrb.w	r3, [sl, r3]
9001c620:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
9001c624:	9309      	str	r3, [sp, #36]	@ 0x24
9001c626:	7853      	ldrb	r3, [r2, #1]
9001c628:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
9001c62c:	930c      	str	r3, [sp, #48]	@ 0x30
9001c62e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
9001c630:	fb10 f201 	smulbb	r2, r0, r1
9001c634:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
9001c636:	ea4f 4c03 	mov.w	ip, r3, lsl #16
9001c63a:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
9001c63e:	f425 65fc 	bic.w	r5, r5, #2016	@ 0x7e0
9001c642:	10d2      	asrs	r2, r2, #3
9001c644:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
9001c648:	ebc2 0a40 	rsb	sl, r2, r0, lsl #1
9001c64c:	ea4c 0c03 	orr.w	ip, ip, r3
9001c650:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
9001c652:	041b      	lsls	r3, r3, #16
9001c654:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
9001c658:	432b      	orrs	r3, r5
9001c65a:	4353      	muls	r3, r2
9001c65c:	fb0a 330c 	mla	r3, sl, ip, r3
9001c660:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
9001c664:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
9001c668:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
9001c66c:	ea4c 0e0e 	orr.w	lr, ip, lr
9001c670:	f1c1 0c10 	rsb	ip, r1, #16
9001c674:	ebac 0c00 	sub.w	ip, ip, r0
9001c678:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
9001c67c:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
9001c680:	fb0c 3c0e 	mla	ip, ip, lr, r3
9001c684:	9b09      	ldr	r3, [sp, #36]	@ 0x24
9001c686:	0418      	lsls	r0, r3, #16
9001c688:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
9001c68c:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
9001c690:	4318      	orrs	r0, r3
9001c692:	fb02 c200 	mla	r2, r2, r0, ip
9001c696:	0d53      	lsrs	r3, r2, #21
9001c698:	0952      	lsrs	r2, r2, #5
9001c69a:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
9001c69e:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
9001c6a2:	431a      	orrs	r2, r3
9001c6a4:	f8a8 2000 	strh.w	r2, [r8]
9001c6a8:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
9001c6aa:	f108 0802 	add.w	r8, r8, #2
9001c6ae:	f10b 3bff 	add.w	fp, fp, #4294967295
9001c6b2:	441c      	add	r4, r3
9001c6b4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
9001c6b6:	441e      	add	r6, r3
9001c6b8:	e77c      	b.n	9001c5b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
9001c6ba:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
9001c6bc:	f109 0902 	add.w	r9, r9, #2
9001c6c0:	441c      	add	r4, r3
9001c6c2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
9001c6c4:	441e      	add	r6, r3
9001c6c6:	9b06      	ldr	r3, [sp, #24]
9001c6c8:	3b01      	subs	r3, #1
9001c6ca:	9306      	str	r3, [sp, #24]
9001c6cc:	e752      	b.n	9001c574 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
9001c6ce:	d020      	beq.n	9001c712 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
9001c6d0:	9b06      	ldr	r3, [sp, #24]
9001c6d2:	981f      	ldr	r0, [sp, #124]	@ 0x7c
9001c6d4:	3b01      	subs	r3, #1
9001c6d6:	fb00 4003 	mla	r0, r0, r3, r4
9001c6da:	1400      	asrs	r0, r0, #16
9001c6dc:	f53f af67 	bmi.w	9001c5ae <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
9001c6e0:	3901      	subs	r1, #1
9001c6e2:	4288      	cmp	r0, r1
9001c6e4:	f6bf af63 	bge.w	9001c5ae <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
9001c6e8:	9920      	ldr	r1, [sp, #128]	@ 0x80
9001c6ea:	fb01 6303 	mla	r3, r1, r3, r6
9001c6ee:	141b      	asrs	r3, r3, #16
9001c6f0:	f53f af5d 	bmi.w	9001c5ae <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
9001c6f4:	3a01      	subs	r2, #1
9001c6f6:	4293      	cmp	r3, r2
9001c6f8:	f6bf af59 	bge.w	9001c5ae <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
9001c6fc:	f8dd 8018 	ldr.w	r8, [sp, #24]
9001c700:	46ca      	mov	sl, r9
9001c702:	f1b8 0f00 	cmp.w	r8, #0
9001c706:	dc67      	bgt.n	9001c7d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
9001c708:	9b06      	ldr	r3, [sp, #24]
9001c70a:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
9001c70e:	eb09 0945 	add.w	r9, r9, r5, lsl #1
9001c712:	9b08      	ldr	r3, [sp, #32]
9001c714:	2b00      	cmp	r3, #0
9001c716:	f340 80d7 	ble.w	9001c8c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
9001c71a:	ee30 0a04 	vadd.f32	s0, s0, s8
9001c71e:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
9001c720:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001c724:	eeb0 6a62 	vmov.f32	s12, s5
9001c728:	eec6 7a80 	vdiv.f32	s15, s13, s0
9001c72c:	ee31 1a05 	vadd.f32	s2, s2, s10
9001c730:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001c734:	ee16 4a10 	vmov	r4, s12
9001c738:	eeb0 6a43 	vmov.f32	s12, s6
9001c73c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001c740:	ee16 6a10 	vmov	r6, s12
9001c744:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001c748:	ee61 7a27 	vmul.f32	s15, s2, s15
9001c74c:	ee77 2a62 	vsub.f32	s5, s14, s5
9001c750:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001c754:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001c758:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001c75c:	ee12 2a90 	vmov	r2, s5
9001c760:	eef0 2a47 	vmov.f32	s5, s14
9001c764:	fb92 f3f3 	sdiv	r3, r2, r3
9001c768:	ee13 2a10 	vmov	r2, s6
9001c76c:	931f      	str	r3, [sp, #124]	@ 0x7c
9001c76e:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
9001c770:	eeb0 3a67 	vmov.f32	s6, s15
9001c774:	fb92 f3f3 	sdiv	r3, r2, r3
9001c778:	9320      	str	r3, [sp, #128]	@ 0x80
9001c77a:	9b08      	ldr	r3, [sp, #32]
9001c77c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
9001c77e:	3b01      	subs	r3, #1
9001c780:	9308      	str	r3, [sp, #32]
9001c782:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
9001c784:	bf08      	it	eq
9001c786:	4613      	moveq	r3, r2
9001c788:	9306      	str	r3, [sp, #24]
9001c78a:	e6e4      	b.n	9001c556 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
9001c78c:	2900      	cmp	r1, #0
9001c78e:	f43f af4e 	beq.w	9001c62e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
9001c792:	f81a 3003 	ldrb.w	r3, [sl, r3]
9001c796:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
9001c79a:	9309      	str	r3, [sp, #36]	@ 0x24
9001c79c:	e747      	b.n	9001c62e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
9001c79e:	f112 0a01 	adds.w	sl, r2, #1
9001c7a2:	d481      	bmi.n	9001c6a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
9001c7a4:	4553      	cmp	r3, sl
9001c7a6:	f6ff af7f 	blt.w	9001c6a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
9001c7aa:	f11c 0a01 	adds.w	sl, ip, #1
9001c7ae:	f53f af7b 	bmi.w	9001c6a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
9001c7b2:	45d6      	cmp	lr, sl
9001c7b4:	f6ff af78 	blt.w	9001c6a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
9001c7b8:	b21b      	sxth	r3, r3
9001c7ba:	e9cd 2c02 	strd	r2, ip, [sp, #8]
9001c7be:	fa0f f28e 	sxth.w	r2, lr
9001c7c2:	9300      	str	r3, [sp, #0]
9001c7c4:	463b      	mov	r3, r7
9001c7c6:	9201      	str	r2, [sp, #4]
9001c7c8:	9a07      	ldr	r2, [sp, #28]
9001c7ca:	e9cd 0104 	strd	r0, r1, [sp, #16]
9001c7ce:	4641      	mov	r1, r8
9001c7d0:	9810      	ldr	r0, [sp, #64]	@ 0x40
9001c7d2:	f7ff fe21 	bl	9001c418 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
9001c7d6:	e767      	b.n	9001c6a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
9001c7d8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
9001c7da:	1422      	asrs	r2, r4, #16
9001c7dc:	1431      	asrs	r1, r6, #16
9001c7de:	9d07      	ldr	r5, [sp, #28]
9001c7e0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
9001c7e4:	f3c4 3e03 	ubfx	lr, r4, #12, #4
9001c7e8:	f3c6 3003 	ubfx	r0, r6, #12, #4
9001c7ec:	fb03 2101 	mla	r1, r3, r1, r2
9001c7f0:	9a07      	ldr	r2, [sp, #28]
9001c7f2:	440a      	add	r2, r1
9001c7f4:	5c69      	ldrb	r1, [r5, r1]
9001c7f6:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
9001c7fa:	f1be 0f00 	cmp.w	lr, #0
9001c7fe:	d05c      	beq.n	9001c8ba <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x398>
9001c800:	f892 c001 	ldrb.w	ip, [r2, #1]
9001c804:	f837 501c 	ldrh.w	r5, [r7, ip, lsl #1]
9001c808:	950d      	str	r5, [sp, #52]	@ 0x34
9001c80a:	b150      	cbz	r0, 9001c822 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
9001c80c:	eb02 0c03 	add.w	ip, r2, r3
9001c810:	5cd3      	ldrb	r3, [r2, r3]
9001c812:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
9001c816:	930a      	str	r3, [sp, #40]	@ 0x28
9001c818:	f89c 3001 	ldrb.w	r3, [ip, #1]
9001c81c:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
9001c820:	930e      	str	r3, [sp, #56]	@ 0x38
9001c822:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
9001c824:	fb1e f200 	smulbb	r2, lr, r0
9001c828:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
9001c82a:	f108 38ff 	add.w	r8, r8, #4294967295
9001c82e:	ea4f 4c03 	mov.w	ip, r3, lsl #16
9001c832:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
9001c836:	10d2      	asrs	r2, r2, #3
9001c838:	f425 6bfc 	bic.w	fp, r5, #2016	@ 0x7e0
9001c83c:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
9001c840:	ea4c 0c03 	orr.w	ip, ip, r3
9001c844:	ebc2 034e 	rsb	r3, r2, lr, lsl #1
9001c848:	9311      	str	r3, [sp, #68]	@ 0x44
9001c84a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
9001c84c:	9d11      	ldr	r5, [sp, #68]	@ 0x44
9001c84e:	041b      	lsls	r3, r3, #16
9001c850:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
9001c854:	ea43 030b 	orr.w	r3, r3, fp
9001c858:	ea4f 4b01 	mov.w	fp, r1, lsl #16
9001c85c:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
9001c860:	4353      	muls	r3, r2
9001c862:	fb05 3c0c 	mla	ip, r5, ip, r3
9001c866:	f00b 63fc 	and.w	r3, fp, #132120576	@ 0x7e00000
9001c86a:	ea43 0b01 	orr.w	fp, r3, r1
9001c86e:	f1c0 0110 	rsb	r1, r0, #16
9001c872:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
9001c874:	eba1 0e0e 	sub.w	lr, r1, lr
9001c878:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
9001c87c:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
9001c880:	fb0e cc0b 	mla	ip, lr, fp, ip
9001c884:	ea4f 4b03 	mov.w	fp, r3, lsl #16
9001c888:	f423 6efc 	bic.w	lr, r3, #2016	@ 0x7e0
9001c88c:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
9001c890:	ea4b 0e0e 	orr.w	lr, fp, lr
9001c894:	fb02 cc0e 	mla	ip, r2, lr, ip
9001c898:	ea4f 535c 	mov.w	r3, ip, lsr #21
9001c89c:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
9001c8a0:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
9001c8a4:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
9001c8a8:	ea43 0c0c 	orr.w	ip, r3, ip
9001c8ac:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
9001c8ae:	441c      	add	r4, r3
9001c8b0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
9001c8b2:	f82a cb02 	strh.w	ip, [sl], #2
9001c8b6:	441e      	add	r6, r3
9001c8b8:	e723      	b.n	9001c702 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
9001c8ba:	2800      	cmp	r0, #0
9001c8bc:	d0b1      	beq.n	9001c822 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
9001c8be:	5cd3      	ldrb	r3, [r2, r3]
9001c8c0:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
9001c8c4:	930a      	str	r3, [sp, #40]	@ 0x28
9001c8c6:	e7ac      	b.n	9001c822 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
9001c8c8:	b013      	add	sp, #76	@ 0x4c
9001c8ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

9001c8ce <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>:
9001c8ce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001c8d2:	880d      	ldrh	r5, [r1, #0]
9001c8d4:	b087      	sub	sp, #28
9001c8d6:	10ef      	asrs	r7, r5, #3
9001c8d8:	9103      	str	r1, [sp, #12]
9001c8da:	ea4f 2a25 	mov.w	sl, r5, asr #8
9001c8de:	f9bd 9040 	ldrsh.w	r9, [sp, #64]	@ 0x40
9001c8e2:	00ed      	lsls	r5, r5, #3
9001c8e4:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
9001c8e8:	f00a 0af8 	and.w	sl, sl, #248	@ 0xf8
9001c8ec:	f9bd b044 	ldrsh.w	fp, [sp, #68]	@ 0x44
9001c8f0:	b2ed      	uxtb	r5, r5
9001c8f2:	9701      	str	r7, [sp, #4]
9001c8f4:	f89d 4050 	ldrb.w	r4, [sp, #80]	@ 0x50
9001c8f8:	9502      	str	r5, [sp, #8]
9001c8fa:	9d01      	ldr	r5, [sp, #4]
9001c8fc:	9902      	ldr	r1, [sp, #8]
9001c8fe:	022d      	lsls	r5, r5, #8
9001c900:	f89d e054 	ldrb.w	lr, [sp, #84]	@ 0x54
9001c904:	f89d 8058 	ldrb.w	r8, [sp, #88]	@ 0x58
9001c908:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
9001c90c:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	@ 0x48
9001c910:	430d      	orrs	r5, r1
9001c912:	fb06 0709 	mla	r7, r6, r9, r0
9001c916:	2e00      	cmp	r6, #0
9001c918:	9505      	str	r5, [sp, #20]
9001c91a:	eb02 0c07 	add.w	ip, r2, r7
9001c91e:	f2c0 80b6 	blt.w	9001ca8e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
9001c922:	45b3      	cmp	fp, r6
9001c924:	f340 80b3 	ble.w	9001ca8e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
9001c928:	2800      	cmp	r0, #0
9001c92a:	f2c0 80ae 	blt.w	9001ca8a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
9001c92e:	4581      	cmp	r9, r0
9001c930:	f340 80ab 	ble.w	9001ca8a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
9001c934:	5dd7      	ldrb	r7, [r2, r7]
9001c936:	eb07 0747 	add.w	r7, r7, r7, lsl #1
9001c93a:	441f      	add	r7, r3
9001c93c:	1c42      	adds	r2, r0, #1
9001c93e:	f100 80a9 	bmi.w	9001ca94 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
9001c942:	4591      	cmp	r9, r2
9001c944:	f340 80a6 	ble.w	9001ca94 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
9001c948:	2c00      	cmp	r4, #0
9001c94a:	f000 80a3 	beq.w	9001ca94 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
9001c94e:	f89c 5001 	ldrb.w	r5, [ip, #1]
9001c952:	eb05 0545 	add.w	r5, r5, r5, lsl #1
9001c956:	441d      	add	r5, r3
9001c958:	3601      	adds	r6, #1
9001c95a:	f100 809f 	bmi.w	9001ca9c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
9001c95e:	45b3      	cmp	fp, r6
9001c960:	f340 809c 	ble.w	9001ca9c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
9001c964:	f1be 0f00 	cmp.w	lr, #0
9001c968:	f000 8098 	beq.w	9001ca9c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
9001c96c:	2800      	cmp	r0, #0
9001c96e:	f2c0 8093 	blt.w	9001ca98 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
9001c972:	4581      	cmp	r9, r0
9001c974:	f340 8090 	ble.w	9001ca98 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
9001c978:	f81c 6009 	ldrb.w	r6, [ip, r9]
9001c97c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
9001c980:	441e      	add	r6, r3
9001c982:	3001      	adds	r0, #1
9001c984:	f100 808d 	bmi.w	9001caa2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
9001c988:	4581      	cmp	r9, r0
9001c98a:	f340 808a 	ble.w	9001caa2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
9001c98e:	2c00      	cmp	r4, #0
9001c990:	f000 8087 	beq.w	9001caa2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
9001c994:	44e1      	add	r9, ip
9001c996:	f899 2001 	ldrb.w	r2, [r9, #1]
9001c99a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
9001c99e:	4413      	add	r3, r2
9001c9a0:	b2a4      	uxth	r4, r4
9001c9a2:	f897 c002 	ldrb.w	ip, [r7, #2]
9001c9a6:	fa1f fe8e 	uxth.w	lr, lr
9001c9aa:	9901      	ldr	r1, [sp, #4]
9001c9ac:	fb04 fb0e 	mul.w	fp, r4, lr
9001c9b0:	0124      	lsls	r4, r4, #4
9001c9b2:	ebcb 1e0e 	rsb	lr, fp, lr, lsl #4
9001c9b6:	f5c4 7980 	rsb	r9, r4, #256	@ 0x100
9001c9ba:	eba4 040b 	sub.w	r4, r4, fp
9001c9be:	fa1f f08e 	uxth.w	r0, lr
9001c9c2:	b2a2      	uxth	r2, r4
9001c9c4:	78ac      	ldrb	r4, [r5, #2]
9001c9c6:	eba9 0900 	sub.w	r9, r9, r0
9001c9ca:	fa1f fe88 	uxth.w	lr, r8
9001c9ce:	4354      	muls	r4, r2
9001c9d0:	ea6f 0808 	mvn.w	r8, r8
9001c9d4:	fa1f f989 	uxth.w	r9, r9
9001c9d8:	fa5f f888 	uxtb.w	r8, r8
9001c9dc:	fb09 440c 	mla	r4, r9, ip, r4
9001c9e0:	f896 c002 	ldrb.w	ip, [r6, #2]
9001c9e4:	fb1a fa08 	smulbb	sl, sl, r8
9001c9e8:	fb00 440c 	mla	r4, r0, ip, r4
9001c9ec:	f893 c002 	ldrb.w	ip, [r3, #2]
9001c9f0:	fb0b 4c0c 	mla	ip, fp, ip, r4
9001c9f4:	787c      	ldrb	r4, [r7, #1]
9001c9f6:	783f      	ldrb	r7, [r7, #0]
9001c9f8:	f3cc 2c07 	ubfx	ip, ip, #8, #8
9001c9fc:	fb0c ac0e 	mla	ip, ip, lr, sl
9001ca00:	f895 a001 	ldrb.w	sl, [r5, #1]
9001ca04:	782d      	ldrb	r5, [r5, #0]
9001ca06:	fb02 fa0a 	mul.w	sl, r2, sl
9001ca0a:	fa1f fc8c 	uxth.w	ip, ip
9001ca0e:	436a      	muls	r2, r5
9001ca10:	7835      	ldrb	r5, [r6, #0]
9001ca12:	fb09 aa04 	mla	sl, r9, r4, sl
9001ca16:	7874      	ldrb	r4, [r6, #1]
9001ca18:	fb09 2207 	mla	r2, r9, r7, r2
9001ca1c:	fb00 aa04 	mla	sl, r0, r4, sl
9001ca20:	785c      	ldrb	r4, [r3, #1]
9001ca22:	fb00 2005 	mla	r0, r0, r5, r2
9001ca26:	781b      	ldrb	r3, [r3, #0]
9001ca28:	fb0b a404 	mla	r4, fp, r4, sl
9001ca2c:	fb11 fa08 	smulbb	sl, r1, r8
9001ca30:	fb0b 0b03 	mla	fp, fp, r3, r0
9001ca34:	9b02      	ldr	r3, [sp, #8]
9001ca36:	f3c4 2407 	ubfx	r4, r4, #8, #8
9001ca3a:	fb13 f808 	smulbb	r8, r3, r8
9001ca3e:	f3cb 2b07 	ubfx	fp, fp, #8, #8
9001ca42:	fb04 a40e 	mla	r4, r4, lr, sl
9001ca46:	f10c 0301 	add.w	r3, ip, #1
9001ca4a:	fb0b 8e0e 	mla	lr, fp, lr, r8
9001ca4e:	b2a4      	uxth	r4, r4
9001ca50:	fa1f fe8e 	uxth.w	lr, lr
9001ca54:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
9001ca58:	f104 0a01 	add.w	sl, r4, #1
9001ca5c:	f40c 4378 	and.w	r3, ip, #63488	@ 0xf800
9001ca60:	f10e 0c01 	add.w	ip, lr, #1
9001ca64:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
9001ca68:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
9001ca6c:	0964      	lsrs	r4, r4, #5
9001ca6e:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
9001ca72:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
9001ca76:	ea4c 0c03 	orr.w	ip, ip, r3
9001ca7a:	9b03      	ldr	r3, [sp, #12]
9001ca7c:	ea4c 0c04 	orr.w	ip, ip, r4
9001ca80:	f8a3 c000 	strh.w	ip, [r3]
9001ca84:	b007      	add	sp, #28
9001ca86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001ca8a:	af05      	add	r7, sp, #20
9001ca8c:	e756      	b.n	9001c93c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x6e>
9001ca8e:	ad05      	add	r5, sp, #20
9001ca90:	462f      	mov	r7, r5
9001ca92:	e761      	b.n	9001c958 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
9001ca94:	ad05      	add	r5, sp, #20
9001ca96:	e75f      	b.n	9001c958 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
9001ca98:	ae05      	add	r6, sp, #20
9001ca9a:	e772      	b.n	9001c982 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb4>
9001ca9c:	ab05      	add	r3, sp, #20
9001ca9e:	461e      	mov	r6, r3
9001caa0:	e77e      	b.n	9001c9a0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>
9001caa2:	ab05      	add	r3, sp, #20
9001caa4:	e77c      	b.n	9001c9a0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>

9001caa6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001caa6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001caaa:	b095      	sub	sp, #84	@ 0x54
9001caac:	9212      	str	r2, [sp, #72]	@ 0x48
9001caae:	9309      	str	r3, [sp, #36]	@ 0x24
9001cab0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
9001cab2:	f89d 309c 	ldrb.w	r3, [sp, #156]	@ 0x9c
9001cab6:	9013      	str	r0, [sp, #76]	@ 0x4c
9001cab8:	930f      	str	r3, [sp, #60]	@ 0x3c
9001caba:	6850      	ldr	r0, [r2, #4]
9001cabc:	910e      	str	r1, [sp, #56]	@ 0x38
9001cabe:	6812      	ldr	r2, [r2, #0]
9001cac0:	e9dd 1324 	ldrd	r1, r3, [sp, #144]	@ 0x90
9001cac4:	fb00 1303 	mla	r3, r0, r3, r1
9001cac8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
9001cacc:	930a      	str	r3, [sp, #40]	@ 0x28
9001cace:	9b26      	ldr	r3, [sp, #152]	@ 0x98
9001cad0:	681b      	ldr	r3, [r3, #0]
9001cad2:	930d      	str	r3, [sp, #52]	@ 0x34
9001cad4:	9b26      	ldr	r3, [sp, #152]	@ 0x98
9001cad6:	685c      	ldr	r4, [r3, #4]
9001cad8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
9001cada:	3404      	adds	r4, #4
9001cadc:	43db      	mvns	r3, r3
9001cade:	b2db      	uxtb	r3, r3
9001cae0:	930b      	str	r3, [sp, #44]	@ 0x2c
9001cae2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
9001cae4:	2b00      	cmp	r3, #0
9001cae6:	dc03      	bgt.n	9001caf0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
9001cae8:	9b12      	ldr	r3, [sp, #72]	@ 0x48
9001caea:	2b00      	cmp	r3, #0
9001caec:	f340 8255 	ble.w	9001cf9a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
9001caf0:	9b26      	ldr	r3, [sp, #152]	@ 0x98
9001caf2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
9001caf6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
9001cafa:	1e48      	subs	r0, r1, #1
9001cafc:	1e55      	subs	r5, r2, #1
9001cafe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
9001cb00:	2b00      	cmp	r3, #0
9001cb02:	f340 80f9 	ble.w	9001ccf8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
9001cb06:	9e1f      	ldr	r6, [sp, #124]	@ 0x7c
9001cb08:	9b20      	ldr	r3, [sp, #128]	@ 0x80
9001cb0a:	1436      	asrs	r6, r6, #16
9001cb0c:	ea4f 4323 	mov.w	r3, r3, asr #16
9001cb10:	d406      	bmi.n	9001cb20 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
9001cb12:	4286      	cmp	r6, r0
9001cb14:	da04      	bge.n	9001cb20 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
9001cb16:	2b00      	cmp	r3, #0
9001cb18:	db02      	blt.n	9001cb20 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
9001cb1a:	42ab      	cmp	r3, r5
9001cb1c:	f2c0 80ed 	blt.w	9001ccfa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
9001cb20:	3601      	adds	r6, #1
9001cb22:	f100 80da 	bmi.w	9001ccda <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
9001cb26:	42b1      	cmp	r1, r6
9001cb28:	f2c0 80d7 	blt.w	9001ccda <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
9001cb2c:	3301      	adds	r3, #1
9001cb2e:	f100 80d4 	bmi.w	9001ccda <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
9001cb32:	429a      	cmp	r2, r3
9001cb34:	f2c0 80d1 	blt.w	9001ccda <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
9001cb38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
9001cb3a:	9311      	str	r3, [sp, #68]	@ 0x44
9001cb3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
9001cb3e:	930c      	str	r3, [sp, #48]	@ 0x30
9001cb40:	9b11      	ldr	r3, [sp, #68]	@ 0x44
9001cb42:	2b00      	cmp	r3, #0
9001cb44:	f340 80fa 	ble.w	9001cd3c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
9001cb48:	9826      	ldr	r0, [sp, #152]	@ 0x98
9001cb4a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
9001cb4c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
9001cb4e:	68c6      	ldr	r6, [r0, #12]
9001cb50:	141d      	asrs	r5, r3, #16
9001cb52:	981f      	ldr	r0, [sp, #124]	@ 0x7c
9001cb54:	f3c2 3103 	ubfx	r1, r2, #12, #4
9001cb58:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
9001cb5a:	9a26      	ldr	r2, [sp, #152]	@ 0x98
9001cb5c:	1400      	asrs	r0, r0, #16
9001cb5e:	f3c3 3303 	ubfx	r3, r3, #12, #4
9001cb62:	6892      	ldr	r2, [r2, #8]
9001cb64:	f100 813e 	bmi.w	9001cde4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
9001cb68:	1e57      	subs	r7, r2, #1
9001cb6a:	42b8      	cmp	r0, r7
9001cb6c:	f280 813a 	bge.w	9001cde4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
9001cb70:	2d00      	cmp	r5, #0
9001cb72:	f2c0 8137 	blt.w	9001cde4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
9001cb76:	1e77      	subs	r7, r6, #1
9001cb78:	42bd      	cmp	r5, r7
9001cb7a:	f280 8133 	bge.w	9001cde4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
9001cb7e:	b212      	sxth	r2, r2
9001cb80:	fb05 0002 	mla	r0, r5, r2, r0
9001cb84:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
9001cb86:	f815 a000 	ldrb.w	sl, [r5, r0]
9001cb8a:	182e      	adds	r6, r5, r0
9001cb8c:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
9001cb90:	eb04 050a 	add.w	r5, r4, sl
9001cb94:	2b00      	cmp	r3, #0
9001cb96:	f000 8117 	beq.w	9001cdc8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
9001cb9a:	f896 c001 	ldrb.w	ip, [r6, #1]
9001cb9e:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
9001cba2:	44a4      	add	ip, r4
9001cba4:	2900      	cmp	r1, #0
9001cba6:	f000 8117 	beq.w	9001cdd8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
9001cbaa:	18b0      	adds	r0, r6, r2
9001cbac:	5cb2      	ldrb	r2, [r6, r2]
9001cbae:	7840      	ldrb	r0, [r0, #1]
9001cbb0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
9001cbb4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
9001cbb8:	4422      	add	r2, r4
9001cbba:	4420      	add	r0, r4
9001cbbc:	b29b      	uxth	r3, r3
9001cbbe:	f89c 7002 	ldrb.w	r7, [ip, #2]
9001cbc2:	b289      	uxth	r1, r1
9001cbc4:	f895 b002 	ldrb.w	fp, [r5, #2]
9001cbc8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
9001cbca:	fb03 f901 	mul.w	r9, r3, r1
9001cbce:	011b      	lsls	r3, r3, #4
9001cbd0:	f8b6 e000 	ldrh.w	lr, [r6]
9001cbd4:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
9001cbd8:	f5c3 7880 	rsb	r8, r3, #256	@ 0x100
9001cbdc:	eba3 0309 	sub.w	r3, r3, r9
9001cbe0:	f8bd 603c 	ldrh.w	r6, [sp, #60]	@ 0x3c
9001cbe4:	b289      	uxth	r1, r1
9001cbe6:	f814 a00a 	ldrb.w	sl, [r4, sl]
9001cbea:	b29b      	uxth	r3, r3
9001cbec:	eba8 0801 	sub.w	r8, r8, r1
9001cbf0:	435f      	muls	r7, r3
9001cbf2:	fa1f f888 	uxth.w	r8, r8
9001cbf6:	9310      	str	r3, [sp, #64]	@ 0x40
9001cbf8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
9001cbfa:	fb08 770b 	mla	r7, r8, fp, r7
9001cbfe:	f892 b002 	ldrb.w	fp, [r2, #2]
9001cc02:	fb01 770b 	mla	r7, r1, fp, r7
9001cc06:	f890 b002 	ldrb.w	fp, [r0, #2]
9001cc0a:	fb09 770b 	mla	r7, r9, fp, r7
9001cc0e:	ea4f 2b2e 	mov.w	fp, lr, asr #8
9001cc12:	f00b 0bf8 	and.w	fp, fp, #248	@ 0xf8
9001cc16:	f3c7 2707 	ubfx	r7, r7, #8, #8
9001cc1a:	fb1b fb03 	smulbb	fp, fp, r3
9001cc1e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
9001cc20:	fb07 b706 	mla	r7, r7, r6, fp
9001cc24:	f895 b001 	ldrb.w	fp, [r5, #1]
9001cc28:	f89c 5001 	ldrb.w	r5, [ip, #1]
9001cc2c:	f89c c000 	ldrb.w	ip, [ip]
9001cc30:	b2bf      	uxth	r7, r7
9001cc32:	435d      	muls	r5, r3
9001cc34:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
9001cc36:	fb08 550b 	mla	r5, r8, fp, r5
9001cc3a:	f892 b001 	ldrb.w	fp, [r2, #1]
9001cc3e:	fb01 550b 	mla	r5, r1, fp, r5
9001cc42:	f890 b001 	ldrb.w	fp, [r0, #1]
9001cc46:	fb09 550b 	mla	r5, r9, fp, r5
9001cc4a:	ea4f 0bee 	mov.w	fp, lr, asr #3
9001cc4e:	ea4f 0ece 	mov.w	lr, lr, lsl #3
9001cc52:	f00b 0bfc 	and.w	fp, fp, #252	@ 0xfc
9001cc56:	f3c5 2507 	ubfx	r5, r5, #8, #8
9001cc5a:	fa5f fe8e 	uxtb.w	lr, lr
9001cc5e:	fb1b fb03 	smulbb	fp, fp, r3
9001cc62:	9b10      	ldr	r3, [sp, #64]	@ 0x40
9001cc64:	fb03 f30c 	mul.w	r3, r3, ip
9001cc68:	f892 c000 	ldrb.w	ip, [r2]
9001cc6c:	fb05 b506 	mla	r5, r5, r6, fp
9001cc70:	fb08 330a 	mla	r3, r8, sl, r3
9001cc74:	b2ad      	uxth	r5, r5
9001cc76:	fb01 330c 	mla	r3, r1, ip, r3
9001cc7a:	f890 c000 	ldrb.w	ip, [r0]
9001cc7e:	f105 0b01 	add.w	fp, r5, #1
9001cc82:	fb09 3c0c 	mla	ip, r9, ip, r3
9001cc86:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
9001cc88:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
9001cc8c:	fb1e fe03 	smulbb	lr, lr, r3
9001cc90:	f3cc 2c07 	ubfx	ip, ip, #8, #8
9001cc94:	1c7b      	adds	r3, r7, #1
9001cc96:	096d      	lsrs	r5, r5, #5
9001cc98:	fb0c e606 	mla	r6, ip, r6, lr
9001cc9c:	eb03 2717 	add.w	r7, r3, r7, lsr #8
9001cca0:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
9001cca4:	b2b6      	uxth	r6, r6
9001cca6:	f407 4378 	and.w	r3, r7, #63488	@ 0xf800
9001ccaa:	1c77      	adds	r7, r6, #1
9001ccac:	eb07 2716 	add.w	r7, r7, r6, lsr #8
9001ccb0:	f3c7 27c4 	ubfx	r7, r7, #11, #5
9001ccb4:	431f      	orrs	r7, r3
9001ccb6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
9001ccb8:	433d      	orrs	r5, r7
9001ccba:	801d      	strh	r5, [r3, #0]
9001ccbc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
9001ccbe:	9a21      	ldr	r2, [sp, #132]	@ 0x84
9001ccc0:	3302      	adds	r3, #2
9001ccc2:	930c      	str	r3, [sp, #48]	@ 0x30
9001ccc4:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
9001ccc6:	4413      	add	r3, r2
9001ccc8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
9001ccca:	931f      	str	r3, [sp, #124]	@ 0x7c
9001cccc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
9001ccce:	4413      	add	r3, r2
9001ccd0:	9320      	str	r3, [sp, #128]	@ 0x80
9001ccd2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
9001ccd4:	3b01      	subs	r3, #1
9001ccd6:	9311      	str	r3, [sp, #68]	@ 0x44
9001ccd8:	e732      	b.n	9001cb40 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
9001ccda:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
9001ccdc:	9e21      	ldr	r6, [sp, #132]	@ 0x84
9001ccde:	4433      	add	r3, r6
9001cce0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
9001cce2:	931f      	str	r3, [sp, #124]	@ 0x7c
9001cce4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
9001cce6:	4433      	add	r3, r6
9001cce8:	9320      	str	r3, [sp, #128]	@ 0x80
9001ccea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
9001ccec:	3b01      	subs	r3, #1
9001ccee:	9309      	str	r3, [sp, #36]	@ 0x24
9001ccf0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
9001ccf2:	3302      	adds	r3, #2
9001ccf4:	930a      	str	r3, [sp, #40]	@ 0x28
9001ccf6:	e702      	b.n	9001cafe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
9001ccf8:	d027      	beq.n	9001cd4a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
9001ccfa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
9001ccfc:	9821      	ldr	r0, [sp, #132]	@ 0x84
9001ccfe:	3b01      	subs	r3, #1
9001cd00:	9d1f      	ldr	r5, [sp, #124]	@ 0x7c
9001cd02:	fb00 5003 	mla	r0, r0, r3, r5
9001cd06:	1400      	asrs	r0, r0, #16
9001cd08:	f53f af16 	bmi.w	9001cb38 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
9001cd0c:	3901      	subs	r1, #1
9001cd0e:	4288      	cmp	r0, r1
9001cd10:	f6bf af12 	bge.w	9001cb38 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
9001cd14:	9922      	ldr	r1, [sp, #136]	@ 0x88
9001cd16:	9820      	ldr	r0, [sp, #128]	@ 0x80
9001cd18:	fb01 0303 	mla	r3, r1, r3, r0
9001cd1c:	141b      	asrs	r3, r3, #16
9001cd1e:	f53f af0b 	bmi.w	9001cb38 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
9001cd22:	3a01      	subs	r2, #1
9001cd24:	4293      	cmp	r3, r2
9001cd26:	f6bf af07 	bge.w	9001cb38 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
9001cd2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
9001cd2c:	f8bd a03c 	ldrh.w	sl, [sp, #60]	@ 0x3c
9001cd30:	9311      	str	r3, [sp, #68]	@ 0x44
9001cd32:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
9001cd34:	930c      	str	r3, [sp, #48]	@ 0x30
9001cd36:	9b11      	ldr	r3, [sp, #68]	@ 0x44
9001cd38:	2b00      	cmp	r3, #0
9001cd3a:	dc70      	bgt.n	9001ce1e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
9001cd3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
9001cd3e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
9001cd40:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
9001cd44:	eb02 0343 	add.w	r3, r2, r3, lsl #1
9001cd48:	930a      	str	r3, [sp, #40]	@ 0x28
9001cd4a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
9001cd4c:	2b00      	cmp	r3, #0
9001cd4e:	f340 8124 	ble.w	9001cf9a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
9001cd52:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
9001cd56:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
9001cd58:	ee30 0a04 	vadd.f32	s0, s0, s8
9001cd5c:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001cd60:	eef0 6a62 	vmov.f32	s13, s5
9001cd64:	eec7 7a00 	vdiv.f32	s15, s14, s0
9001cd68:	ee31 1a05 	vadd.f32	s2, s2, s10
9001cd6c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001cd70:	edcd 6a1f 	vstr	s13, [sp, #124]	@ 0x7c
9001cd74:	eef0 6a43 	vmov.f32	s13, s6
9001cd78:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001cd7c:	edcd 6a20 	vstr	s13, [sp, #128]	@ 0x80
9001cd80:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001cd84:	ee61 7a27 	vmul.f32	s15, s2, s15
9001cd88:	ee77 2a62 	vsub.f32	s5, s14, s5
9001cd8c:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001cd90:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001cd94:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001cd98:	ee12 2a90 	vmov	r2, s5
9001cd9c:	eef0 2a47 	vmov.f32	s5, s14
9001cda0:	fb92 f3f3 	sdiv	r3, r2, r3
9001cda4:	ee13 2a10 	vmov	r2, s6
9001cda8:	9321      	str	r3, [sp, #132]	@ 0x84
9001cdaa:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
9001cdac:	eeb0 3a67 	vmov.f32	s6, s15
9001cdb0:	fb92 f3f3 	sdiv	r3, r2, r3
9001cdb4:	9322      	str	r3, [sp, #136]	@ 0x88
9001cdb6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
9001cdb8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
9001cdba:	3b01      	subs	r3, #1
9001cdbc:	930e      	str	r3, [sp, #56]	@ 0x38
9001cdbe:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
9001cdc0:	bf08      	it	eq
9001cdc2:	4613      	moveq	r3, r2
9001cdc4:	9309      	str	r3, [sp, #36]	@ 0x24
9001cdc6:	e68c      	b.n	9001cae2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
9001cdc8:	b149      	cbz	r1, 9001cdde <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x338>
9001cdca:	5cb2      	ldrb	r2, [r6, r2]
9001cdcc:	4628      	mov	r0, r5
9001cdce:	eb02 0242 	add.w	r2, r2, r2, lsl #1
9001cdd2:	4422      	add	r2, r4
9001cdd4:	46ac      	mov	ip, r5
9001cdd6:	e6f1      	b.n	9001cbbc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
9001cdd8:	4628      	mov	r0, r5
9001cdda:	462a      	mov	r2, r5
9001cddc:	e6ee      	b.n	9001cbbc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
9001cdde:	4628      	mov	r0, r5
9001cde0:	462a      	mov	r2, r5
9001cde2:	e7f7      	b.n	9001cdd4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
9001cde4:	1c47      	adds	r7, r0, #1
9001cde6:	f53f af69 	bmi.w	9001ccbc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
9001cdea:	42ba      	cmp	r2, r7
9001cdec:	f6ff af66 	blt.w	9001ccbc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
9001cdf0:	1c6f      	adds	r7, r5, #1
9001cdf2:	f53f af63 	bmi.w	9001ccbc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
9001cdf6:	42be      	cmp	r6, r7
9001cdf8:	f6ff af60 	blt.w	9001ccbc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
9001cdfc:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
9001cdfe:	b236      	sxth	r6, r6
9001ce00:	b212      	sxth	r2, r2
9001ce02:	9002      	str	r0, [sp, #8]
9001ce04:	9601      	str	r6, [sp, #4]
9001ce06:	9200      	str	r2, [sp, #0]
9001ce08:	9813      	ldr	r0, [sp, #76]	@ 0x4c
9001ce0a:	e9cd 1705 	strd	r1, r7, [sp, #20]
9001ce0e:	e9cd 5303 	strd	r5, r3, [sp, #12]
9001ce12:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	@ 0x30
9001ce16:	4623      	mov	r3, r4
9001ce18:	f7ff fd59 	bl	9001c8ce <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>
9001ce1c:	e74e      	b.n	9001ccbc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
9001ce1e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
9001ce20:	9820      	ldr	r0, [sp, #128]	@ 0x80
9001ce22:	f3c2 3103 	ubfx	r1, r2, #12, #4
9001ce26:	9d1f      	ldr	r5, [sp, #124]	@ 0x7c
9001ce28:	9a26      	ldr	r2, [sp, #152]	@ 0x98
9001ce2a:	1400      	asrs	r0, r0, #16
9001ce2c:	142d      	asrs	r5, r5, #16
9001ce2e:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
9001ce30:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
9001ce34:	f3c3 3303 	ubfx	r3, r3, #12, #4
9001ce38:	fb02 5000 	mla	r0, r2, r0, r5
9001ce3c:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
9001ce3e:	f815 9000 	ldrb.w	r9, [r5, r0]
9001ce42:	182e      	adds	r6, r5, r0
9001ce44:	eb09 0949 	add.w	r9, r9, r9, lsl #1
9001ce48:	eb04 0509 	add.w	r5, r4, r9
9001ce4c:	2b00      	cmp	r3, #0
9001ce4e:	f000 8096 	beq.w	9001cf7e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
9001ce52:	7877      	ldrb	r7, [r6, #1]
9001ce54:	eb07 0747 	add.w	r7, r7, r7, lsl #1
9001ce58:	4427      	add	r7, r4
9001ce5a:	2900      	cmp	r1, #0
9001ce5c:	f000 8097 	beq.w	9001cf8e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e8>
9001ce60:	18b0      	adds	r0, r6, r2
9001ce62:	5cb2      	ldrb	r2, [r6, r2]
9001ce64:	7840      	ldrb	r0, [r0, #1]
9001ce66:	eb02 0242 	add.w	r2, r2, r2, lsl #1
9001ce6a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
9001ce6e:	4422      	add	r2, r4
9001ce70:	4420      	add	r0, r4
9001ce72:	b29b      	uxth	r3, r3
9001ce74:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
9001ce76:	b289      	uxth	r1, r1
9001ce78:	f895 b002 	ldrb.w	fp, [r5, #2]
9001ce7c:	f8b6 c000 	ldrh.w	ip, [r6]
9001ce80:	fb03 f801 	mul.w	r8, r3, r1
9001ce84:	011b      	lsls	r3, r3, #4
9001ce86:	78be      	ldrb	r6, [r7, #2]
9001ce88:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
9001ce8c:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
9001ce90:	eba3 0308 	sub.w	r3, r3, r8
9001ce94:	f814 9009 	ldrb.w	r9, [r4, r9]
9001ce98:	b289      	uxth	r1, r1
9001ce9a:	b29b      	uxth	r3, r3
9001ce9c:	ebae 0e01 	sub.w	lr, lr, r1
9001cea0:	435e      	muls	r6, r3
9001cea2:	fa1f fe8e 	uxth.w	lr, lr
9001cea6:	9310      	str	r3, [sp, #64]	@ 0x40
9001cea8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
9001ceaa:	fb0e 660b 	mla	r6, lr, fp, r6
9001ceae:	f892 b002 	ldrb.w	fp, [r2, #2]
9001ceb2:	fb01 660b 	mla	r6, r1, fp, r6
9001ceb6:	f890 b002 	ldrb.w	fp, [r0, #2]
9001ceba:	fb08 660b 	mla	r6, r8, fp, r6
9001cebe:	ea4f 2b2c 	mov.w	fp, ip, asr #8
9001cec2:	f00b 0bf8 	and.w	fp, fp, #248	@ 0xf8
9001cec6:	f3c6 2607 	ubfx	r6, r6, #8, #8
9001ceca:	fb1b fb03 	smulbb	fp, fp, r3
9001cece:	9b10      	ldr	r3, [sp, #64]	@ 0x40
9001ced0:	fb06 b60a 	mla	r6, r6, sl, fp
9001ced4:	f895 b001 	ldrb.w	fp, [r5, #1]
9001ced8:	787d      	ldrb	r5, [r7, #1]
9001ceda:	783f      	ldrb	r7, [r7, #0]
9001cedc:	b2b6      	uxth	r6, r6
9001cede:	435d      	muls	r5, r3
9001cee0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
9001cee2:	fb0e 550b 	mla	r5, lr, fp, r5
9001cee6:	f892 b001 	ldrb.w	fp, [r2, #1]
9001ceea:	fb01 550b 	mla	r5, r1, fp, r5
9001ceee:	f890 b001 	ldrb.w	fp, [r0, #1]
9001cef2:	fb08 550b 	mla	r5, r8, fp, r5
9001cef6:	ea4f 0bec 	mov.w	fp, ip, asr #3
9001cefa:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
9001cefe:	f00b 0bfc 	and.w	fp, fp, #252	@ 0xfc
9001cf02:	f3c5 2507 	ubfx	r5, r5, #8, #8
9001cf06:	fa5f fc8c 	uxtb.w	ip, ip
9001cf0a:	fb1b fb03 	smulbb	fp, fp, r3
9001cf0e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
9001cf10:	437b      	muls	r3, r7
9001cf12:	7817      	ldrb	r7, [r2, #0]
9001cf14:	fb05 b50a 	mla	r5, r5, sl, fp
9001cf18:	fb0e 3309 	mla	r3, lr, r9, r3
9001cf1c:	b2ad      	uxth	r5, r5
9001cf1e:	fb01 3307 	mla	r3, r1, r7, r3
9001cf22:	7807      	ldrb	r7, [r0, #0]
9001cf24:	f105 0b01 	add.w	fp, r5, #1
9001cf28:	fb08 3707 	mla	r7, r8, r7, r3
9001cf2c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
9001cf2e:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
9001cf32:	fb1c fc03 	smulbb	ip, ip, r3
9001cf36:	f3c7 2707 	ubfx	r7, r7, #8, #8
9001cf3a:	1c73      	adds	r3, r6, #1
9001cf3c:	096d      	lsrs	r5, r5, #5
9001cf3e:	fb07 c70a 	mla	r7, r7, sl, ip
9001cf42:	eb03 2616 	add.w	r6, r3, r6, lsr #8
9001cf46:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
9001cf4a:	b2bf      	uxth	r7, r7
9001cf4c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
9001cf4e:	f406 4678 	and.w	r6, r6, #63488	@ 0xf800
9001cf52:	1c7a      	adds	r2, r7, #1
9001cf54:	eb02 2217 	add.w	r2, r2, r7, lsr #8
9001cf58:	f3c2 22c4 	ubfx	r2, r2, #11, #5
9001cf5c:	4316      	orrs	r6, r2
9001cf5e:	9a21      	ldr	r2, [sp, #132]	@ 0x84
9001cf60:	432e      	orrs	r6, r5
9001cf62:	f823 6b02 	strh.w	r6, [r3], #2
9001cf66:	930c      	str	r3, [sp, #48]	@ 0x30
9001cf68:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
9001cf6a:	4413      	add	r3, r2
9001cf6c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
9001cf6e:	931f      	str	r3, [sp, #124]	@ 0x7c
9001cf70:	9b20      	ldr	r3, [sp, #128]	@ 0x80
9001cf72:	4413      	add	r3, r2
9001cf74:	9320      	str	r3, [sp, #128]	@ 0x80
9001cf76:	9b11      	ldr	r3, [sp, #68]	@ 0x44
9001cf78:	3b01      	subs	r3, #1
9001cf7a:	9311      	str	r3, [sp, #68]	@ 0x44
9001cf7c:	e6db      	b.n	9001cd36 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x290>
9001cf7e:	b149      	cbz	r1, 9001cf94 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ee>
9001cf80:	5cb2      	ldrb	r2, [r6, r2]
9001cf82:	4628      	mov	r0, r5
9001cf84:	eb02 0242 	add.w	r2, r2, r2, lsl #1
9001cf88:	4422      	add	r2, r4
9001cf8a:	462f      	mov	r7, r5
9001cf8c:	e771      	b.n	9001ce72 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
9001cf8e:	4628      	mov	r0, r5
9001cf90:	462a      	mov	r2, r5
9001cf92:	e76e      	b.n	9001ce72 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
9001cf94:	4628      	mov	r0, r5
9001cf96:	462a      	mov	r2, r5
9001cf98:	e7f7      	b.n	9001cf8a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
9001cf9a:	b015      	add	sp, #84	@ 0x54
9001cf9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

9001cfa0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>:
9001cfa0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001cfa4:	880f      	ldrh	r7, [r1, #0]
9001cfa6:	f9bd e030 	ldrsh.w	lr, [sp, #48]	@ 0x30
9001cfaa:	023c      	lsls	r4, r7, #8
9001cfac:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
9001cfb0:	f89d 0040 	ldrb.w	r0, [sp, #64]	@ 0x40
9001cfb4:	f404 0b78 	and.w	fp, r4, #16252928	@ 0xf80000
9001cfb8:	017c      	lsls	r4, r7, #5
9001cfba:	00ff      	lsls	r7, r7, #3
9001cfbc:	f89d 6044 	ldrb.w	r6, [sp, #68]	@ 0x44
9001cfc0:	f404 447c 	and.w	r4, r4, #64512	@ 0xfc00
9001cfc4:	b2ff      	uxtb	r7, r7
9001cfc6:	ea4b 0404 	orr.w	r4, fp, r4
9001cfca:	e9dd c50e 	ldrd	ip, r5, [sp, #56]	@ 0x38
9001cfce:	4327      	orrs	r7, r4
9001cfd0:	fb05 ca0e 	mla	sl, r5, lr, ip
9001cfd4:	2d00      	cmp	r5, #0
9001cfd6:	9701      	str	r7, [sp, #4]
9001cfd8:	eb02 080a 	add.w	r8, r2, sl
9001cfdc:	db7e      	blt.n	9001d0dc <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
9001cfde:	45a9      	cmp	r9, r5
9001cfe0:	dd7c      	ble.n	9001d0dc <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
9001cfe2:	f1bc 0f00 	cmp.w	ip, #0
9001cfe6:	db77      	blt.n	9001d0d8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
9001cfe8:	45e6      	cmp	lr, ip
9001cfea:	dd75      	ble.n	9001d0d8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
9001cfec:	f812 700a 	ldrb.w	r7, [r2, sl]
9001cff0:	eb07 0747 	add.w	r7, r7, r7, lsl #1
9001cff4:	441f      	add	r7, r3
9001cff6:	f11c 0201 	adds.w	r2, ip, #1
9001cffa:	d472      	bmi.n	9001d0e2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
9001cffc:	4596      	cmp	lr, r2
9001cffe:	dd70      	ble.n	9001d0e2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
9001d000:	2800      	cmp	r0, #0
9001d002:	d06e      	beq.n	9001d0e2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
9001d004:	f898 4001 	ldrb.w	r4, [r8, #1]
9001d008:	eb04 0444 	add.w	r4, r4, r4, lsl #1
9001d00c:	441c      	add	r4, r3
9001d00e:	3501      	adds	r5, #1
9001d010:	d46b      	bmi.n	9001d0ea <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
9001d012:	45a9      	cmp	r9, r5
9001d014:	dd69      	ble.n	9001d0ea <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
9001d016:	2e00      	cmp	r6, #0
9001d018:	d067      	beq.n	9001d0ea <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
9001d01a:	f1bc 0f00 	cmp.w	ip, #0
9001d01e:	db62      	blt.n	9001d0e6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
9001d020:	45e6      	cmp	lr, ip
9001d022:	dd60      	ble.n	9001d0e6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
9001d024:	f818 500e 	ldrb.w	r5, [r8, lr]
9001d028:	eb05 0545 	add.w	r5, r5, r5, lsl #1
9001d02c:	441d      	add	r5, r3
9001d02e:	f11c 0201 	adds.w	r2, ip, #1
9001d032:	d45d      	bmi.n	9001d0f0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
9001d034:	4596      	cmp	lr, r2
9001d036:	dd5b      	ble.n	9001d0f0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
9001d038:	2800      	cmp	r0, #0
9001d03a:	d059      	beq.n	9001d0f0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
9001d03c:	44c6      	add	lr, r8
9001d03e:	f89e 2001 	ldrb.w	r2, [lr, #1]
9001d042:	eb02 0242 	add.w	r2, r2, r2, lsl #1
9001d046:	4413      	add	r3, r2
9001d048:	b280      	uxth	r0, r0
9001d04a:	f897 e002 	ldrb.w	lr, [r7, #2]
9001d04e:	b2b2      	uxth	r2, r6
9001d050:	f897 9000 	ldrb.w	r9, [r7]
9001d054:	787f      	ldrb	r7, [r7, #1]
9001d056:	fb00 f602 	mul.w	r6, r0, r2
9001d05a:	0100      	lsls	r0, r0, #4
9001d05c:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
9001d060:	f5c0 7880 	rsb	r8, r0, #256	@ 0x100
9001d064:	1b80      	subs	r0, r0, r6
9001d066:	fa1f fc82 	uxth.w	ip, r2
9001d06a:	b282      	uxth	r2, r0
9001d06c:	78a0      	ldrb	r0, [r4, #2]
9001d06e:	eba8 080c 	sub.w	r8, r8, ip
9001d072:	4350      	muls	r0, r2
9001d074:	fa1f f888 	uxth.w	r8, r8
9001d078:	fb08 0e0e 	mla	lr, r8, lr, r0
9001d07c:	78a8      	ldrb	r0, [r5, #2]
9001d07e:	fb0c e000 	mla	r0, ip, r0, lr
9001d082:	f893 e002 	ldrb.w	lr, [r3, #2]
9001d086:	fb06 0e0e 	mla	lr, r6, lr, r0
9001d08a:	f40e 4078 	and.w	r0, lr, #63488	@ 0xf800
9001d08e:	f894 e000 	ldrb.w	lr, [r4]
9001d092:	fb02 fe0e 	mul.w	lr, r2, lr
9001d096:	fb08 e909 	mla	r9, r8, r9, lr
9001d09a:	f895 e000 	ldrb.w	lr, [r5]
9001d09e:	fb0c 990e 	mla	r9, ip, lr, r9
9001d0a2:	f893 e000 	ldrb.w	lr, [r3]
9001d0a6:	785b      	ldrb	r3, [r3, #1]
9001d0a8:	fb06 9e0e 	mla	lr, r6, lr, r9
9001d0ac:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
9001d0b0:	ea4e 0e00 	orr.w	lr, lr, r0
9001d0b4:	7860      	ldrb	r0, [r4, #1]
9001d0b6:	4350      	muls	r0, r2
9001d0b8:	786a      	ldrb	r2, [r5, #1]
9001d0ba:	fb08 0007 	mla	r0, r8, r7, r0
9001d0be:	fb0c 0202 	mla	r2, ip, r2, r0
9001d0c2:	fb06 2303 	mla	r3, r6, r3, r2
9001d0c6:	095b      	lsrs	r3, r3, #5
9001d0c8:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
9001d0cc:	ea4e 0303 	orr.w	r3, lr, r3
9001d0d0:	800b      	strh	r3, [r1, #0]
9001d0d2:	b003      	add	sp, #12
9001d0d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001d0d8:	af01      	add	r7, sp, #4
9001d0da:	e78c      	b.n	9001cff6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x56>
9001d0dc:	ac01      	add	r4, sp, #4
9001d0de:	4627      	mov	r7, r4
9001d0e0:	e795      	b.n	9001d00e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
9001d0e2:	ac01      	add	r4, sp, #4
9001d0e4:	e793      	b.n	9001d00e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
9001d0e6:	ad01      	add	r5, sp, #4
9001d0e8:	e7a1      	b.n	9001d02e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x8e>
9001d0ea:	ab01      	add	r3, sp, #4
9001d0ec:	461d      	mov	r5, r3
9001d0ee:	e7ab      	b.n	9001d048 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>
9001d0f0:	ab01      	add	r3, sp, #4
9001d0f2:	e7a9      	b.n	9001d048 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>

9001d0f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001d0f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001d0f8:	b08f      	sub	sp, #60	@ 0x3c
9001d0fa:	920c      	str	r2, [sp, #48]	@ 0x30
9001d0fc:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
9001d0fe:	900d      	str	r0, [sp, #52]	@ 0x34
9001d100:	910a      	str	r1, [sp, #40]	@ 0x28
9001d102:	6850      	ldr	r0, [r2, #4]
9001d104:	9306      	str	r3, [sp, #24]
9001d106:	6812      	ldr	r2, [r2, #0]
9001d108:	e9dd 131e 	ldrd	r1, r3, [sp, #120]	@ 0x78
9001d10c:	e9dd b519 	ldrd	fp, r5, [sp, #100]	@ 0x64
9001d110:	fb00 1303 	mla	r3, r0, r3, r1
9001d114:	eb02 0343 	add.w	r3, r2, r3, lsl #1
9001d118:	9307      	str	r3, [sp, #28]
9001d11a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
9001d11c:	681b      	ldr	r3, [r3, #0]
9001d11e:	9308      	str	r3, [sp, #32]
9001d120:	9b20      	ldr	r3, [sp, #128]	@ 0x80
9001d122:	685c      	ldr	r4, [r3, #4]
9001d124:	3404      	adds	r4, #4
9001d126:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
9001d128:	2b00      	cmp	r3, #0
9001d12a:	dc03      	bgt.n	9001d134 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
9001d12c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
9001d12e:	2b00      	cmp	r3, #0
9001d130:	f340 81d5 	ble.w	9001d4de <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
9001d134:	9b20      	ldr	r3, [sp, #128]	@ 0x80
9001d136:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
9001d13a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
9001d13e:	1e48      	subs	r0, r1, #1
9001d140:	1e56      	subs	r6, r2, #1
9001d142:	9b06      	ldr	r3, [sp, #24]
9001d144:	2b00      	cmp	r3, #0
9001d146:	f340 80b6 	ble.w	9001d2b6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
9001d14a:	ea5f 472b 	movs.w	r7, fp, asr #16
9001d14e:	ea4f 4325 	mov.w	r3, r5, asr #16
9001d152:	d406      	bmi.n	9001d162 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
9001d154:	4287      	cmp	r7, r0
9001d156:	da04      	bge.n	9001d162 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
9001d158:	2b00      	cmp	r3, #0
9001d15a:	db02      	blt.n	9001d162 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
9001d15c:	42b3      	cmp	r3, r6
9001d15e:	f2c0 80ab 	blt.w	9001d2b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c4>
9001d162:	3701      	adds	r7, #1
9001d164:	f100 809c 	bmi.w	9001d2a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
9001d168:	42b9      	cmp	r1, r7
9001d16a:	f2c0 8099 	blt.w	9001d2a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
9001d16e:	3301      	adds	r3, #1
9001d170:	f100 8096 	bmi.w	9001d2a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
9001d174:	429a      	cmp	r2, r3
9001d176:	f2c0 8093 	blt.w	9001d2a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
9001d17a:	9b06      	ldr	r3, [sp, #24]
9001d17c:	930b      	str	r3, [sp, #44]	@ 0x2c
9001d17e:	9b07      	ldr	r3, [sp, #28]
9001d180:	9309      	str	r3, [sp, #36]	@ 0x24
9001d182:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
9001d184:	2b00      	cmp	r3, #0
9001d186:	f340 80b4 	ble.w	9001d2f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
9001d18a:	9820      	ldr	r0, [sp, #128]	@ 0x80
9001d18c:	142e      	asrs	r6, r5, #16
9001d18e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
9001d190:	f3cb 3303 	ubfx	r3, fp, #12, #4
9001d194:	68c7      	ldr	r7, [r0, #12]
9001d196:	ea5f 402b 	movs.w	r0, fp, asr #16
9001d19a:	f3c5 3103 	ubfx	r1, r5, #12, #4
9001d19e:	6892      	ldr	r2, [r2, #8]
9001d1a0:	f100 80fb 	bmi.w	9001d39a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
9001d1a4:	f102 3cff 	add.w	ip, r2, #4294967295
9001d1a8:	4560      	cmp	r0, ip
9001d1aa:	f280 80f6 	bge.w	9001d39a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
9001d1ae:	2e00      	cmp	r6, #0
9001d1b0:	f2c0 80f3 	blt.w	9001d39a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
9001d1b4:	f107 3cff 	add.w	ip, r7, #4294967295
9001d1b8:	4566      	cmp	r6, ip
9001d1ba:	f280 80ee 	bge.w	9001d39a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
9001d1be:	b212      	sxth	r2, r2
9001d1c0:	fb06 0002 	mla	r0, r6, r2, r0
9001d1c4:	9e08      	ldr	r6, [sp, #32]
9001d1c6:	1837      	adds	r7, r6, r0
9001d1c8:	5c30      	ldrb	r0, [r6, r0]
9001d1ca:	eb00 0840 	add.w	r8, r0, r0, lsl #1
9001d1ce:	eb04 0c08 	add.w	ip, r4, r8
9001d1d2:	2b00      	cmp	r3, #0
9001d1d4:	f000 80d3 	beq.w	9001d37e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
9001d1d8:	787e      	ldrb	r6, [r7, #1]
9001d1da:	eb06 0646 	add.w	r6, r6, r6, lsl #1
9001d1de:	4426      	add	r6, r4
9001d1e0:	2900      	cmp	r1, #0
9001d1e2:	f000 80d4 	beq.w	9001d38e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
9001d1e6:	18b8      	adds	r0, r7, r2
9001d1e8:	5cba      	ldrb	r2, [r7, r2]
9001d1ea:	7840      	ldrb	r0, [r0, #1]
9001d1ec:	eb02 0242 	add.w	r2, r2, r2, lsl #1
9001d1f0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
9001d1f4:	4422      	add	r2, r4
9001d1f6:	4420      	add	r0, r4
9001d1f8:	b29b      	uxth	r3, r3
9001d1fa:	78b7      	ldrb	r7, [r6, #2]
9001d1fc:	b289      	uxth	r1, r1
9001d1fe:	f89c a002 	ldrb.w	sl, [ip, #2]
9001d202:	f89c c001 	ldrb.w	ip, [ip, #1]
9001d206:	fb03 f901 	mul.w	r9, r3, r1
9001d20a:	011b      	lsls	r3, r3, #4
9001d20c:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
9001d210:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
9001d214:	eba3 0309 	sub.w	r3, r3, r9
9001d218:	b289      	uxth	r1, r1
9001d21a:	b29b      	uxth	r3, r3
9001d21c:	ebae 0e01 	sub.w	lr, lr, r1
9001d220:	435f      	muls	r7, r3
9001d222:	fa1f fe8e 	uxth.w	lr, lr
9001d226:	fb0e 770a 	mla	r7, lr, sl, r7
9001d22a:	f892 a002 	ldrb.w	sl, [r2, #2]
9001d22e:	fb01 770a 	mla	r7, r1, sl, r7
9001d232:	f890 a002 	ldrb.w	sl, [r0, #2]
9001d236:	fb09 7a0a 	mla	sl, r9, sl, r7
9001d23a:	f814 7008 	ldrb.w	r7, [r4, r8]
9001d23e:	f896 8000 	ldrb.w	r8, [r6]
9001d242:	7876      	ldrb	r6, [r6, #1]
9001d244:	f40a 4a78 	and.w	sl, sl, #63488	@ 0xf800
9001d248:	fb03 f808 	mul.w	r8, r3, r8
9001d24c:	4373      	muls	r3, r6
9001d24e:	fb0e 8807 	mla	r8, lr, r7, r8
9001d252:	7817      	ldrb	r7, [r2, #0]
9001d254:	fb0e 330c 	mla	r3, lr, ip, r3
9001d258:	fb01 8807 	mla	r8, r1, r7, r8
9001d25c:	7807      	ldrb	r7, [r0, #0]
9001d25e:	fb09 8707 	mla	r7, r9, r7, r8
9001d262:	f3c7 27c4 	ubfx	r7, r7, #11, #5
9001d266:	ea47 070a 	orr.w	r7, r7, sl
9001d26a:	f892 a001 	ldrb.w	sl, [r2, #1]
9001d26e:	fb01 310a 	mla	r1, r1, sl, r3
9001d272:	f890 a001 	ldrb.w	sl, [r0, #1]
9001d276:	9b09      	ldr	r3, [sp, #36]	@ 0x24
9001d278:	fb09 1a0a 	mla	sl, r9, sl, r1
9001d27c:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
9001d280:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
9001d284:	ea47 070a 	orr.w	r7, r7, sl
9001d288:	801f      	strh	r7, [r3, #0]
9001d28a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
9001d28c:	3302      	adds	r3, #2
9001d28e:	9309      	str	r3, [sp, #36]	@ 0x24
9001d290:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
9001d292:	449b      	add	fp, r3
9001d294:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
9001d296:	441d      	add	r5, r3
9001d298:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
9001d29a:	3b01      	subs	r3, #1
9001d29c:	930b      	str	r3, [sp, #44]	@ 0x2c
9001d29e:	e770      	b.n	9001d182 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
9001d2a0:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
9001d2a2:	449b      	add	fp, r3
9001d2a4:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
9001d2a6:	441d      	add	r5, r3
9001d2a8:	9b06      	ldr	r3, [sp, #24]
9001d2aa:	3b01      	subs	r3, #1
9001d2ac:	9306      	str	r3, [sp, #24]
9001d2ae:	9b07      	ldr	r3, [sp, #28]
9001d2b0:	3302      	adds	r3, #2
9001d2b2:	9307      	str	r3, [sp, #28]
9001d2b4:	e745      	b.n	9001d142 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
9001d2b6:	d023      	beq.n	9001d300 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
9001d2b8:	9b06      	ldr	r3, [sp, #24]
9001d2ba:	981b      	ldr	r0, [sp, #108]	@ 0x6c
9001d2bc:	3b01      	subs	r3, #1
9001d2be:	fb00 b003 	mla	r0, r0, r3, fp
9001d2c2:	1400      	asrs	r0, r0, #16
9001d2c4:	f53f af59 	bmi.w	9001d17a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
9001d2c8:	3901      	subs	r1, #1
9001d2ca:	4288      	cmp	r0, r1
9001d2cc:	f6bf af55 	bge.w	9001d17a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
9001d2d0:	991c      	ldr	r1, [sp, #112]	@ 0x70
9001d2d2:	fb01 5303 	mla	r3, r1, r3, r5
9001d2d6:	141b      	asrs	r3, r3, #16
9001d2d8:	f53f af4f 	bmi.w	9001d17a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
9001d2dc:	3a01      	subs	r2, #1
9001d2de:	4293      	cmp	r3, r2
9001d2e0:	f6bf af4b 	bge.w	9001d17a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
9001d2e4:	9b06      	ldr	r3, [sp, #24]
9001d2e6:	9309      	str	r3, [sp, #36]	@ 0x24
9001d2e8:	9b07      	ldr	r3, [sp, #28]
9001d2ea:	930b      	str	r3, [sp, #44]	@ 0x2c
9001d2ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
9001d2ee:	2b00      	cmp	r3, #0
9001d2f0:	dc70      	bgt.n	9001d3d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
9001d2f2:	9b06      	ldr	r3, [sp, #24]
9001d2f4:	9a07      	ldr	r2, [sp, #28]
9001d2f6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
9001d2fa:	eb02 0343 	add.w	r3, r2, r3, lsl #1
9001d2fe:	9307      	str	r3, [sp, #28]
9001d300:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
9001d302:	2b00      	cmp	r3, #0
9001d304:	f340 80eb 	ble.w	9001d4de <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
9001d308:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
9001d30c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
9001d30e:	ee30 0a04 	vadd.f32	s0, s0, s8
9001d312:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001d316:	eef0 6a62 	vmov.f32	s13, s5
9001d31a:	eec7 7a00 	vdiv.f32	s15, s14, s0
9001d31e:	ee31 1a05 	vadd.f32	s2, s2, s10
9001d322:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001d326:	ee16 ba90 	vmov	fp, s13
9001d32a:	eef0 6a43 	vmov.f32	s13, s6
9001d32e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001d332:	ee16 5a90 	vmov	r5, s13
9001d336:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001d33a:	ee61 7a27 	vmul.f32	s15, s2, s15
9001d33e:	ee77 2a62 	vsub.f32	s5, s14, s5
9001d342:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001d346:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001d34a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001d34e:	ee12 2a90 	vmov	r2, s5
9001d352:	eef0 2a47 	vmov.f32	s5, s14
9001d356:	fb92 f3f3 	sdiv	r3, r2, r3
9001d35a:	ee13 2a10 	vmov	r2, s6
9001d35e:	931b      	str	r3, [sp, #108]	@ 0x6c
9001d360:	9b18      	ldr	r3, [sp, #96]	@ 0x60
9001d362:	eeb0 3a67 	vmov.f32	s6, s15
9001d366:	fb92 f3f3 	sdiv	r3, r2, r3
9001d36a:	931c      	str	r3, [sp, #112]	@ 0x70
9001d36c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
9001d36e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
9001d370:	3b01      	subs	r3, #1
9001d372:	930a      	str	r3, [sp, #40]	@ 0x28
9001d374:	9b18      	ldr	r3, [sp, #96]	@ 0x60
9001d376:	bf08      	it	eq
9001d378:	4613      	moveq	r3, r2
9001d37a:	9306      	str	r3, [sp, #24]
9001d37c:	e6d3      	b.n	9001d126 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
9001d37e:	b149      	cbz	r1, 9001d394 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
9001d380:	5cba      	ldrb	r2, [r7, r2]
9001d382:	4660      	mov	r0, ip
9001d384:	eb02 0242 	add.w	r2, r2, r2, lsl #1
9001d388:	4422      	add	r2, r4
9001d38a:	4666      	mov	r6, ip
9001d38c:	e734      	b.n	9001d1f8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
9001d38e:	4660      	mov	r0, ip
9001d390:	4662      	mov	r2, ip
9001d392:	e731      	b.n	9001d1f8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
9001d394:	4660      	mov	r0, ip
9001d396:	4662      	mov	r2, ip
9001d398:	e7f7      	b.n	9001d38a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
9001d39a:	f110 0c01 	adds.w	ip, r0, #1
9001d39e:	f53f af74 	bmi.w	9001d28a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
9001d3a2:	4562      	cmp	r2, ip
9001d3a4:	f6ff af71 	blt.w	9001d28a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
9001d3a8:	f116 0c01 	adds.w	ip, r6, #1
9001d3ac:	f53f af6d 	bmi.w	9001d28a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
9001d3b0:	4567      	cmp	r7, ip
9001d3b2:	f6ff af6a 	blt.w	9001d28a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
9001d3b6:	b23f      	sxth	r7, r7
9001d3b8:	b212      	sxth	r2, r2
9001d3ba:	9701      	str	r7, [sp, #4]
9001d3bc:	9200      	str	r2, [sp, #0]
9001d3be:	e9cd 3104 	strd	r3, r1, [sp, #16]
9001d3c2:	e9cd 0602 	strd	r0, r6, [sp, #8]
9001d3c6:	4623      	mov	r3, r4
9001d3c8:	980d      	ldr	r0, [sp, #52]	@ 0x34
9001d3ca:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
9001d3ce:	f7ff fde7 	bl	9001cfa0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>
9001d3d2:	e75a      	b.n	9001d28a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
9001d3d4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
9001d3d6:	ea4f 462b 	mov.w	r6, fp, asr #16
9001d3da:	1428      	asrs	r0, r5, #16
9001d3dc:	f3cb 3303 	ubfx	r3, fp, #12, #4
9001d3e0:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
9001d3e4:	f3c5 3103 	ubfx	r1, r5, #12, #4
9001d3e8:	fb02 6000 	mla	r0, r2, r0, r6
9001d3ec:	9e08      	ldr	r6, [sp, #32]
9001d3ee:	f816 8000 	ldrb.w	r8, [r6, r0]
9001d3f2:	1837      	adds	r7, r6, r0
9001d3f4:	eb08 0848 	add.w	r8, r8, r8, lsl #1
9001d3f8:	eb04 0c08 	add.w	ip, r4, r8
9001d3fc:	2b00      	cmp	r3, #0
9001d3fe:	d060      	beq.n	9001d4c2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ce>
9001d400:	787e      	ldrb	r6, [r7, #1]
9001d402:	eb06 0646 	add.w	r6, r6, r6, lsl #1
9001d406:	4426      	add	r6, r4
9001d408:	2900      	cmp	r1, #0
9001d40a:	d062      	beq.n	9001d4d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3de>
9001d40c:	18b8      	adds	r0, r7, r2
9001d40e:	5cba      	ldrb	r2, [r7, r2]
9001d410:	7840      	ldrb	r0, [r0, #1]
9001d412:	eb02 0242 	add.w	r2, r2, r2, lsl #1
9001d416:	eb00 0040 	add.w	r0, r0, r0, lsl #1
9001d41a:	4422      	add	r2, r4
9001d41c:	4420      	add	r0, r4
9001d41e:	b29b      	uxth	r3, r3
9001d420:	78b7      	ldrb	r7, [r6, #2]
9001d422:	b289      	uxth	r1, r1
9001d424:	f89c a002 	ldrb.w	sl, [ip, #2]
9001d428:	f89c c001 	ldrb.w	ip, [ip, #1]
9001d42c:	fb03 f901 	mul.w	r9, r3, r1
9001d430:	011b      	lsls	r3, r3, #4
9001d432:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
9001d436:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
9001d43a:	eba3 0309 	sub.w	r3, r3, r9
9001d43e:	b289      	uxth	r1, r1
9001d440:	b29b      	uxth	r3, r3
9001d442:	ebae 0e01 	sub.w	lr, lr, r1
9001d446:	435f      	muls	r7, r3
9001d448:	fa1f fe8e 	uxth.w	lr, lr
9001d44c:	fb0e 770a 	mla	r7, lr, sl, r7
9001d450:	f892 a002 	ldrb.w	sl, [r2, #2]
9001d454:	fb01 770a 	mla	r7, r1, sl, r7
9001d458:	f890 a002 	ldrb.w	sl, [r0, #2]
9001d45c:	fb09 7a0a 	mla	sl, r9, sl, r7
9001d460:	f814 7008 	ldrb.w	r7, [r4, r8]
9001d464:	f896 8000 	ldrb.w	r8, [r6]
9001d468:	7876      	ldrb	r6, [r6, #1]
9001d46a:	f40a 4a78 	and.w	sl, sl, #63488	@ 0xf800
9001d46e:	fb03 f808 	mul.w	r8, r3, r8
9001d472:	4373      	muls	r3, r6
9001d474:	7856      	ldrb	r6, [r2, #1]
9001d476:	fb0e 8807 	mla	r8, lr, r7, r8
9001d47a:	7817      	ldrb	r7, [r2, #0]
9001d47c:	fb0e 330c 	mla	r3, lr, ip, r3
9001d480:	fb01 8807 	mla	r8, r1, r7, r8
9001d484:	7807      	ldrb	r7, [r0, #0]
9001d486:	fb01 3306 	mla	r3, r1, r6, r3
9001d48a:	fb09 8707 	mla	r7, r9, r7, r8
9001d48e:	f3c7 27c4 	ubfx	r7, r7, #11, #5
9001d492:	ea47 070a 	orr.w	r7, r7, sl
9001d496:	f890 a001 	ldrb.w	sl, [r0, #1]
9001d49a:	fb09 3a0a 	mla	sl, r9, sl, r3
9001d49e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
9001d4a0:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
9001d4a4:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
9001d4a8:	ea47 070a 	orr.w	r7, r7, sl
9001d4ac:	f823 7b02 	strh.w	r7, [r3], #2
9001d4b0:	930b      	str	r3, [sp, #44]	@ 0x2c
9001d4b2:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
9001d4b4:	449b      	add	fp, r3
9001d4b6:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
9001d4b8:	441d      	add	r5, r3
9001d4ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
9001d4bc:	3b01      	subs	r3, #1
9001d4be:	9309      	str	r3, [sp, #36]	@ 0x24
9001d4c0:	e714      	b.n	9001d2ec <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f8>
9001d4c2:	b149      	cbz	r1, 9001d4d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
9001d4c4:	5cba      	ldrb	r2, [r7, r2]
9001d4c6:	4660      	mov	r0, ip
9001d4c8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
9001d4cc:	4422      	add	r2, r4
9001d4ce:	4666      	mov	r6, ip
9001d4d0:	e7a5      	b.n	9001d41e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
9001d4d2:	4660      	mov	r0, ip
9001d4d4:	4662      	mov	r2, ip
9001d4d6:	e7a2      	b.n	9001d41e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
9001d4d8:	4660      	mov	r0, ip
9001d4da:	4662      	mov	r2, ip
9001d4dc:	e7f7      	b.n	9001d4ce <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3da>
9001d4de:	b00f      	add	sp, #60	@ 0x3c
9001d4e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

9001d4e4 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>:
9001d4e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001d4e8:	b085      	sub	sp, #20
9001d4ea:	e9dd 7410 	ldrd	r7, r4, [sp, #64]	@ 0x40
9001d4ee:	f9bd c038 	ldrsh.w	ip, [sp, #56]	@ 0x38
9001d4f2:	9102      	str	r1, [sp, #8]
9001d4f4:	2c00      	cmp	r4, #0
9001d4f6:	fb04 710c 	mla	r1, r4, ip, r7
9001d4fa:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	@ 0x3c
9001d4fe:	f89d 6048 	ldrb.w	r6, [sp, #72]	@ 0x48
9001d502:	f89d 004c 	ldrb.w	r0, [sp, #76]	@ 0x4c
9001d506:	eb02 0e01 	add.w	lr, r2, r1
9001d50a:	f2c0 8122 	blt.w	9001d752 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
9001d50e:	45a0      	cmp	r8, r4
9001d510:	f340 811f 	ble.w	9001d752 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
9001d514:	2f00      	cmp	r7, #0
9001d516:	f2c0 811a 	blt.w	9001d74e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
9001d51a:	45bc      	cmp	ip, r7
9001d51c:	f340 8117 	ble.w	9001d74e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
9001d520:	5c52      	ldrb	r2, [r2, r1]
9001d522:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
9001d526:	1c7a      	adds	r2, r7, #1
9001d528:	f100 8116 	bmi.w	9001d758 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
9001d52c:	4594      	cmp	ip, r2
9001d52e:	f340 8113 	ble.w	9001d758 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
9001d532:	2e00      	cmp	r6, #0
9001d534:	f000 8112 	beq.w	9001d75c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x278>
9001d538:	f89e 2001 	ldrb.w	r2, [lr, #1]
9001d53c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
9001d540:	3401      	adds	r4, #1
9001d542:	f100 810f 	bmi.w	9001d764 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
9001d546:	45a0      	cmp	r8, r4
9001d548:	f340 810c 	ble.w	9001d764 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
9001d54c:	2800      	cmp	r0, #0
9001d54e:	f000 810c 	beq.w	9001d76a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x286>
9001d552:	2f00      	cmp	r7, #0
9001d554:	f2c0 8104 	blt.w	9001d760 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
9001d558:	45bc      	cmp	ip, r7
9001d55a:	f340 8101 	ble.w	9001d760 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
9001d55e:	f81e 200c 	ldrb.w	r2, [lr, ip]
9001d562:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
9001d566:	3701      	adds	r7, #1
9001d568:	f100 8102 	bmi.w	9001d770 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
9001d56c:	45bc      	cmp	ip, r7
9001d56e:	f340 80ff 	ble.w	9001d770 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
9001d572:	2e00      	cmp	r6, #0
9001d574:	f000 80fe 	beq.w	9001d774 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x290>
9001d578:	44f4      	add	ip, lr
9001d57a:	f89c 2001 	ldrb.w	r2, [ip, #1]
9001d57e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
9001d582:	b2b6      	uxth	r6, r6
9001d584:	b280      	uxth	r0, r0
9001d586:	ea4f 6a11 	mov.w	sl, r1, lsr #24
9001d58a:	fb00 fe06 	mul.w	lr, r0, r6
9001d58e:	0136      	lsls	r6, r6, #4
9001d590:	ea4f 6b15 	mov.w	fp, r5, lsr #24
9001d594:	ebce 1000 	rsb	r0, lr, r0, lsl #4
9001d598:	eba6 070e 	sub.w	r7, r6, lr
9001d59c:	f5c6 7380 	rsb	r3, r6, #256	@ 0x100
9001d5a0:	ea4f 6914 	mov.w	r9, r4, lsr #24
9001d5a4:	b280      	uxth	r0, r0
9001d5a6:	b2bf      	uxth	r7, r7
9001d5a8:	1a1b      	subs	r3, r3, r0
9001d5aa:	ea4f 6812 	mov.w	r8, r2, lsr #24
9001d5ae:	fb0a f607 	mul.w	r6, sl, r7
9001d5b2:	b29b      	uxth	r3, r3
9001d5b4:	fb0b 6603 	mla	r6, fp, r3, r6
9001d5b8:	fb00 6609 	mla	r6, r0, r9, r6
9001d5bc:	fb0e 6608 	mla	r6, lr, r8, r6
9001d5c0:	f3c6 2607 	ubfx	r6, r6, #8, #8
9001d5c4:	9600      	str	r6, [sp, #0]
9001d5c6:	2e00      	cmp	r6, #0
9001d5c8:	f000 80be 	beq.w	9001d748 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x264>
9001d5cc:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
9001d5d0:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
9001d5d4:	9e02      	ldr	r6, [sp, #8]
9001d5d6:	fb0b fc0c 	mul.w	ip, fp, ip
9001d5da:	fb0b f505 	mul.w	r5, fp, r5
9001d5de:	8836      	ldrh	r6, [r6, #0]
9001d5e0:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
9001d5e4:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
9001d5e8:	9501      	str	r5, [sp, #4]
9001d5ea:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
9001d5ee:	44dc      	add	ip, fp
9001d5f0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001d5f4:	f00c 15ff 	and.w	r5, ip, #16711935	@ 0xff00ff
9001d5f8:	9503      	str	r5, [sp, #12]
9001d5fa:	9d01      	ldr	r5, [sp, #4]
9001d5fc:	f505 7c80 	add.w	ip, r5, #256	@ 0x100
9001d600:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
9001d604:	f001 1cff 	and.w	ip, r1, #16711935	@ 0xff00ff
9001d608:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
9001d60c:	fb0a fc0c 	mul.w	ip, sl, ip
9001d610:	ea4f 2b15 	mov.w	fp, r5, lsr #8
9001d614:	fb0a fa01 	mul.w	sl, sl, r1
9001d618:	ea4f 251c 	mov.w	r5, ip, lsr #8
9001d61c:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
9001d620:	f50a 7180 	add.w	r1, sl, #256	@ 0x100
9001d624:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
9001d628:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
9001d62c:	4465      	add	r5, ip
9001d62e:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
9001d632:	f404 447f 	and.w	r4, r4, #65280	@ 0xff00
9001d636:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9001d63a:	fb09 fc0c 	mul.w	ip, r9, ip
9001d63e:	0a2d      	lsrs	r5, r5, #8
9001d640:	fb09 f904 	mul.w	r9, r9, r4
9001d644:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
9001d648:	ea4f 211c 	mov.w	r1, ip, lsr #8
9001d64c:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
9001d650:	f509 7480 	add.w	r4, r9, #256	@ 0x100
9001d654:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
9001d658:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
9001d65c:	437d      	muls	r5, r7
9001d65e:	eb04 2919 	add.w	r9, r4, r9, lsr #8
9001d662:	f002 14ff 	and.w	r4, r2, #16711935	@ 0xff00ff
9001d666:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
9001d66a:	4461      	add	r1, ip
9001d66c:	fb08 f404 	mul.w	r4, r8, r4
9001d670:	ea4f 2919 	mov.w	r9, r9, lsr #8
9001d674:	fb08 f802 	mul.w	r8, r8, r2
9001d678:	0a09      	lsrs	r1, r1, #8
9001d67a:	0a22      	lsrs	r2, r4, #8
9001d67c:	f104 1401 	add.w	r4, r4, #65537	@ 0x10001
9001d680:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
9001d684:	fb07 f70a 	mul.w	r7, r7, sl
9001d688:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
9001d68c:	4414      	add	r4, r2
9001d68e:	f508 7280 	add.w	r2, r8, #256	@ 0x100
9001d692:	0a24      	lsrs	r4, r4, #8
9001d694:	eb02 2818 	add.w	r8, r2, r8, lsr #8
9001d698:	9a03      	ldr	r2, [sp, #12]
9001d69a:	f004 14ff 	and.w	r4, r4, #16711935	@ 0xff00ff
9001d69e:	fb02 5503 	mla	r5, r2, r3, r5
9001d6a2:	ea4f 2818 	mov.w	r8, r8, lsr #8
9001d6a6:	9a00      	ldr	r2, [sp, #0]
9001d6a8:	fb04 540e 	mla	r4, r4, lr, r5
9001d6ac:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
9001d6b0:	1235      	asrs	r5, r6, #8
9001d6b2:	fb01 4100 	mla	r1, r1, r0, r4
9001d6b6:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
9001d6ba:	0a09      	lsrs	r1, r1, #8
9001d6bc:	f001 14ff 	and.w	r4, r1, #16711935	@ 0xff00ff
9001d6c0:	f40b 417f 	and.w	r1, fp, #65280	@ 0xff00
9001d6c4:	fb03 7101 	mla	r1, r3, r1, r7
9001d6c8:	fb0e 1e08 	mla	lr, lr, r8, r1
9001d6cc:	f409 417f 	and.w	r1, r9, #65280	@ 0xff00
9001d6d0:	fb00 e101 	mla	r1, r0, r1, lr
9001d6d4:	f89d 0050 	ldrb.w	r0, [sp, #80]	@ 0x50
9001d6d8:	b287      	uxth	r7, r0
9001d6da:	0a09      	lsrs	r1, r1, #8
9001d6dc:	437a      	muls	r2, r7
9001d6de:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
9001d6e2:	1c53      	adds	r3, r2, #1
9001d6e4:	4321      	orrs	r1, r4
9001d6e6:	eb03 2312 	add.w	r3, r3, r2, lsr #8
9001d6ea:	0c0a      	lsrs	r2, r1, #16
9001d6ec:	f3c1 2407 	ubfx	r4, r1, #8, #8
9001d6f0:	ea6f 2313 	mvn.w	r3, r3, lsr #8
9001d6f4:	b2c8      	uxtb	r0, r1
9001d6f6:	fb12 f207 	smulbb	r2, r2, r7
9001d6fa:	fb14 f407 	smulbb	r4, r4, r7
9001d6fe:	b2db      	uxtb	r3, r3
9001d700:	fb10 f007 	smulbb	r0, r0, r7
9001d704:	fb05 2503 	mla	r5, r5, r3, r2
9001d708:	10f2      	asrs	r2, r6, #3
9001d70a:	00f6      	lsls	r6, r6, #3
9001d70c:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
9001d710:	b2ad      	uxth	r5, r5
9001d712:	b2f6      	uxtb	r6, r6
9001d714:	fb02 4203 	mla	r2, r2, r3, r4
9001d718:	fb06 0303 	mla	r3, r6, r3, r0
9001d71c:	b294      	uxth	r4, r2
9001d71e:	b299      	uxth	r1, r3
9001d720:	1c6b      	adds	r3, r5, #1
9001d722:	1c62      	adds	r2, r4, #1
9001d724:	eb03 2515 	add.w	r5, r3, r5, lsr #8
9001d728:	1c4b      	adds	r3, r1, #1
9001d72a:	eb02 2214 	add.w	r2, r2, r4, lsr #8
9001d72e:	eb03 2311 	add.w	r3, r3, r1, lsr #8
9001d732:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
9001d736:	0952      	lsrs	r2, r2, #5
9001d738:	f3c3 23c4 	ubfx	r3, r3, #11, #5
9001d73c:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
9001d740:	432b      	orrs	r3, r5
9001d742:	4313      	orrs	r3, r2
9001d744:	9a02      	ldr	r2, [sp, #8]
9001d746:	8013      	strh	r3, [r2, #0]
9001d748:	b005      	add	sp, #20
9001d74a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001d74e:	2500      	movs	r5, #0
9001d750:	e6e9      	b.n	9001d526 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x42>
9001d752:	2100      	movs	r1, #0
9001d754:	460d      	mov	r5, r1
9001d756:	e6f3      	b.n	9001d540 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
9001d758:	2100      	movs	r1, #0
9001d75a:	e6f1      	b.n	9001d540 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
9001d75c:	4631      	mov	r1, r6
9001d75e:	e6ef      	b.n	9001d540 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
9001d760:	2400      	movs	r4, #0
9001d762:	e700      	b.n	9001d566 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x82>
9001d764:	2200      	movs	r2, #0
9001d766:	4614      	mov	r4, r2
9001d768:	e70b      	b.n	9001d582 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
9001d76a:	4602      	mov	r2, r0
9001d76c:	4604      	mov	r4, r0
9001d76e:	e708      	b.n	9001d582 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
9001d770:	2200      	movs	r2, #0
9001d772:	e706      	b.n	9001d582 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
9001d774:	4632      	mov	r2, r6
9001d776:	e704      	b.n	9001d582 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>

9001d778 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001d778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001d77c:	b09f      	sub	sp, #124	@ 0x7c
9001d77e:	921b      	str	r2, [sp, #108]	@ 0x6c
9001d780:	9309      	str	r3, [sp, #36]	@ 0x24
9001d782:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
9001d784:	f89d 30c4 	ldrb.w	r3, [sp, #196]	@ 0xc4
9001d788:	901d      	str	r0, [sp, #116]	@ 0x74
9001d78a:	931c      	str	r3, [sp, #112]	@ 0x70
9001d78c:	6850      	ldr	r0, [r2, #4]
9001d78e:	9119      	str	r1, [sp, #100]	@ 0x64
9001d790:	6812      	ldr	r2, [r2, #0]
9001d792:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
9001d794:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	@ 0xb8
9001d798:	fb00 1303 	mla	r3, r0, r3, r1
9001d79c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
9001d7a0:	930c      	str	r3, [sp, #48]	@ 0x30
9001d7a2:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
9001d7a4:	681b      	ldr	r3, [r3, #0]
9001d7a6:	9312      	str	r3, [sp, #72]	@ 0x48
9001d7a8:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
9001d7aa:	685e      	ldr	r6, [r3, #4]
9001d7ac:	f8bd 3070 	ldrh.w	r3, [sp, #112]	@ 0x70
9001d7b0:	3604      	adds	r6, #4
9001d7b2:	930d      	str	r3, [sp, #52]	@ 0x34
9001d7b4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
9001d7b6:	2b00      	cmp	r3, #0
9001d7b8:	dc03      	bgt.n	9001d7c2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
9001d7ba:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
9001d7bc:	2b00      	cmp	r3, #0
9001d7be:	f340 8387 	ble.w	9001ded0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
9001d7c2:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
9001d7c4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
9001d7c8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
9001d7cc:	1e48      	subs	r0, r1, #1
9001d7ce:	1e57      	subs	r7, r2, #1
9001d7d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
9001d7d2:	2b00      	cmp	r3, #0
9001d7d4:	f340 8194 	ble.w	9001db00 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x388>
9001d7d8:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
9001d7da:	142b      	asrs	r3, r5, #16
9001d7dc:	ea5f 4c24 	movs.w	ip, r4, asr #16
9001d7e0:	d406      	bmi.n	9001d7f0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
9001d7e2:	4584      	cmp	ip, r0
9001d7e4:	da04      	bge.n	9001d7f0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
9001d7e6:	2b00      	cmp	r3, #0
9001d7e8:	db02      	blt.n	9001d7f0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
9001d7ea:	42bb      	cmp	r3, r7
9001d7ec:	f2c0 8189 	blt.w	9001db02 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
9001d7f0:	f11c 0c01 	adds.w	ip, ip, #1
9001d7f4:	f100 8177 	bmi.w	9001dae6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
9001d7f8:	4561      	cmp	r1, ip
9001d7fa:	f2c0 8174 	blt.w	9001dae6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
9001d7fe:	3301      	adds	r3, #1
9001d800:	f100 8171 	bmi.w	9001dae6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
9001d804:	429a      	cmp	r2, r3
9001d806:	f2c0 816e 	blt.w	9001dae6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
9001d80a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
9001d80c:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
9001d80e:	931a      	str	r3, [sp, #104]	@ 0x68
9001d810:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
9001d812:	2b00      	cmp	r3, #0
9001d814:	f340 8193 	ble.w	9001db3e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
9001d818:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
9001d81a:	ea4f 4c25 	mov.w	ip, r5, asr #16
9001d81e:	f3c5 3103 	ubfx	r1, r5, #12, #4
9001d822:	f3c3 3203 	ubfx	r2, r3, #12, #4
9001d826:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
9001d828:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
9001d82c:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
9001d82e:	141b      	asrs	r3, r3, #16
9001d830:	f100 81d6 	bmi.w	9001dbe0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
9001d834:	f100 38ff 	add.w	r8, r0, #4294967295
9001d838:	4543      	cmp	r3, r8
9001d83a:	f280 81d1 	bge.w	9001dbe0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
9001d83e:	f1bc 0f00 	cmp.w	ip, #0
9001d842:	f2c0 81cd 	blt.w	9001dbe0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
9001d846:	f10e 38ff 	add.w	r8, lr, #4294967295
9001d84a:	45c4      	cmp	ip, r8
9001d84c:	f280 81c8 	bge.w	9001dbe0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
9001d850:	b200      	sxth	r0, r0
9001d852:	9c12      	ldr	r4, [sp, #72]	@ 0x48
9001d854:	fb0c 3300 	mla	r3, ip, r0, r3
9001d858:	eb04 0803 	add.w	r8, r4, r3
9001d85c:	5ce3      	ldrb	r3, [r4, r3]
9001d85e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
9001d862:	ea4f 6e13 	mov.w	lr, r3, lsr #24
9001d866:	2a00      	cmp	r2, #0
9001d868:	f000 81af 	beq.w	9001dbca <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
9001d86c:	f898 c001 	ldrb.w	ip, [r8, #1]
9001d870:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
9001d874:	940e      	str	r4, [sp, #56]	@ 0x38
9001d876:	0e24      	lsrs	r4, r4, #24
9001d878:	9415      	str	r4, [sp, #84]	@ 0x54
9001d87a:	b179      	cbz	r1, 9001d89c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
9001d87c:	eb08 0c00 	add.w	ip, r8, r0
9001d880:	f818 0000 	ldrb.w	r0, [r8, r0]
9001d884:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
9001d888:	900a      	str	r0, [sp, #40]	@ 0x28
9001d88a:	0e00      	lsrs	r0, r0, #24
9001d88c:	9013      	str	r0, [sp, #76]	@ 0x4c
9001d88e:	f89c 0001 	ldrb.w	r0, [ip, #1]
9001d892:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
9001d896:	900f      	str	r0, [sp, #60]	@ 0x3c
9001d898:	0e00      	lsrs	r0, r0, #24
9001d89a:	9016      	str	r0, [sp, #88]	@ 0x58
9001d89c:	b292      	uxth	r2, r2
9001d89e:	9815      	ldr	r0, [sp, #84]	@ 0x54
9001d8a0:	b289      	uxth	r1, r1
9001d8a2:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
9001d8a4:	fb02 f901 	mul.w	r9, r2, r1
9001d8a8:	0112      	lsls	r2, r2, #4
9001d8aa:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
9001d8ae:	eba2 0809 	sub.w	r8, r2, r9
9001d8b2:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
9001d8b6:	b289      	uxth	r1, r1
9001d8b8:	fa1f f888 	uxth.w	r8, r8
9001d8bc:	1a52      	subs	r2, r2, r1
9001d8be:	fb08 f000 	mul.w	r0, r8, r0
9001d8c2:	b292      	uxth	r2, r2
9001d8c4:	fb02 000e 	mla	r0, r2, lr, r0
9001d8c8:	fb01 0004 	mla	r0, r1, r4, r0
9001d8cc:	9c16      	ldr	r4, [sp, #88]	@ 0x58
9001d8ce:	fb09 0004 	mla	r0, r9, r4, r0
9001d8d2:	f3c0 2007 	ubfx	r0, r0, #8, #8
9001d8d6:	2800      	cmp	r0, #0
9001d8d8:	f000 80fa 	beq.w	9001dad0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
9001d8dc:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
9001d8e0:	d01b      	beq.n	9001d91a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
9001d8e2:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
9001d8e6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
9001d8ea:	fb0e fa0a 	mul.w	sl, lr, sl
9001d8ee:	fb0e fe03 	mul.w	lr, lr, r3
9001d8f2:	ea4f 231a 	mov.w	r3, sl, lsr #8
9001d8f6:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
9001d8fa:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
9001d8fe:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
9001d902:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
9001d906:	4453      	add	r3, sl
9001d908:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001d90c:	0a1b      	lsrs	r3, r3, #8
9001d90e:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
9001d912:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
9001d916:	ea43 030c 	orr.w	r3, r3, ip
9001d91a:	9c15      	ldr	r4, [sp, #84]	@ 0x54
9001d91c:	2cff      	cmp	r4, #255	@ 0xff
9001d91e:	d021      	beq.n	9001d964 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
9001d920:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
9001d922:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
9001d926:	9c15      	ldr	r4, [sp, #84]	@ 0x54
9001d928:	fb04 fb0b 	mul.w	fp, r4, fp
9001d92c:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
9001d92e:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
9001d932:	9c15      	ldr	r4, [sp, #84]	@ 0x54
9001d934:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
9001d938:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
9001d93c:	fb04 fa0a 	mul.w	sl, r4, sl
9001d940:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
9001d944:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
9001d948:	44de      	add	lr, fp
9001d94a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
9001d94e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
9001d952:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9001d956:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
9001d95a:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
9001d95e:	ea4e 040a 	orr.w	r4, lr, sl
9001d962:	940e      	str	r4, [sp, #56]	@ 0x38
9001d964:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
9001d966:	2cff      	cmp	r4, #255	@ 0xff
9001d968:	d021      	beq.n	9001d9ae <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
9001d96a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
9001d96c:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
9001d970:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
9001d972:	fb04 fb0b 	mul.w	fp, r4, fp
9001d976:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
9001d978:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
9001d97c:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
9001d97e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
9001d982:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
9001d986:	fb04 fa0a 	mul.w	sl, r4, sl
9001d98a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
9001d98e:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
9001d992:	44de      	add	lr, fp
9001d994:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
9001d998:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
9001d99c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9001d9a0:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
9001d9a4:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
9001d9a8:	ea4e 040a 	orr.w	r4, lr, sl
9001d9ac:	940a      	str	r4, [sp, #40]	@ 0x28
9001d9ae:	9c16      	ldr	r4, [sp, #88]	@ 0x58
9001d9b0:	2cff      	cmp	r4, #255	@ 0xff
9001d9b2:	d021      	beq.n	9001d9f8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x280>
9001d9b4:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
9001d9b6:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
9001d9ba:	9c16      	ldr	r4, [sp, #88]	@ 0x58
9001d9bc:	fb04 fb0b 	mul.w	fp, r4, fp
9001d9c0:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
9001d9c2:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
9001d9c6:	9c16      	ldr	r4, [sp, #88]	@ 0x58
9001d9c8:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
9001d9cc:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
9001d9d0:	fb04 fa0a 	mul.w	sl, r4, sl
9001d9d4:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
9001d9d8:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
9001d9dc:	44de      	add	lr, fp
9001d9de:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
9001d9e2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
9001d9e6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9001d9ea:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
9001d9ee:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
9001d9f2:	ea4e 040a 	orr.w	r4, lr, sl
9001d9f6:	940f      	str	r4, [sp, #60]	@ 0x3c
9001d9f8:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
9001d9fa:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
9001d9fe:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
9001da02:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
9001da06:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
9001da08:	fb08 fc0c 	mul.w	ip, r8, ip
9001da0c:	fb02 cc0e 	mla	ip, r2, lr, ip
9001da10:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
9001da14:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
9001da16:	fb01 cc0e 	mla	ip, r1, lr, ip
9001da1a:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
9001da1e:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
9001da20:	fb09 cc0e 	mla	ip, r9, lr, ip
9001da24:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
9001da28:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
9001da2a:	fb08 f80e 	mul.w	r8, r8, lr
9001da2e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001da32:	fb02 8303 	mla	r3, r2, r3, r8
9001da36:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
9001da38:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
9001da3c:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
9001da40:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
9001da42:	fb01 330a 	mla	r3, r1, sl, r3
9001da46:	f402 417f 	and.w	r1, r2, #65280	@ 0xff00
9001da4a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
9001da4c:	fb09 3901 	mla	r9, r9, r1, r3
9001da50:	883b      	ldrh	r3, [r7, #0]
9001da52:	4342      	muls	r2, r0
9001da54:	ea4f 2919 	mov.w	r9, r9, lsr #8
9001da58:	1c50      	adds	r0, r2, #1
9001da5a:	1219      	asrs	r1, r3, #8
9001da5c:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
9001da60:	eb00 2012 	add.w	r0, r0, r2, lsr #8
9001da64:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
9001da68:	ea4c 0c09 	orr.w	ip, ip, r9
9001da6c:	ea6f 2010 	mvn.w	r0, r0, lsr #8
9001da70:	ea4f 421c 	mov.w	r2, ip, lsr #16
9001da74:	f3cc 2e07 	ubfx	lr, ip, #8, #8
9001da78:	b2c0      	uxtb	r0, r0
9001da7a:	fb12 f204 	smulbb	r2, r2, r4
9001da7e:	fa5f fc8c 	uxtb.w	ip, ip
9001da82:	fb1e fe04 	smulbb	lr, lr, r4
9001da86:	fb01 2100 	mla	r1, r1, r0, r2
9001da8a:	10da      	asrs	r2, r3, #3
9001da8c:	fb1c fc04 	smulbb	ip, ip, r4
9001da90:	00db      	lsls	r3, r3, #3
9001da92:	b289      	uxth	r1, r1
9001da94:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
9001da98:	b2db      	uxtb	r3, r3
9001da9a:	fb02 e200 	mla	r2, r2, r0, lr
9001da9e:	fb03 c300 	mla	r3, r3, r0, ip
9001daa2:	b292      	uxth	r2, r2
9001daa4:	fa1f fc83 	uxth.w	ip, r3
9001daa8:	1c4b      	adds	r3, r1, #1
9001daaa:	eb03 2111 	add.w	r1, r3, r1, lsr #8
9001daae:	f10c 0301 	add.w	r3, ip, #1
9001dab2:	eb03 231c 	add.w	r3, r3, ip, lsr #8
9001dab6:	f401 4178 	and.w	r1, r1, #63488	@ 0xf800
9001daba:	f3c3 23c4 	ubfx	r3, r3, #11, #5
9001dabe:	430b      	orrs	r3, r1
9001dac0:	1c51      	adds	r1, r2, #1
9001dac2:	eb01 2212 	add.w	r2, r1, r2, lsr #8
9001dac6:	0952      	lsrs	r2, r2, #5
9001dac8:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
9001dacc:	4313      	orrs	r3, r2
9001dace:	803b      	strh	r3, [r7, #0]
9001dad0:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
9001dad2:	3702      	adds	r7, #2
9001dad4:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
9001dad6:	441a      	add	r2, r3
9001dad8:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
9001dada:	441d      	add	r5, r3
9001dadc:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
9001dade:	9229      	str	r2, [sp, #164]	@ 0xa4
9001dae0:	3b01      	subs	r3, #1
9001dae2:	931a      	str	r3, [sp, #104]	@ 0x68
9001dae4:	e694      	b.n	9001d810 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
9001dae6:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
9001dae8:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
9001daea:	441c      	add	r4, r3
9001daec:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
9001daee:	441d      	add	r5, r3
9001daf0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
9001daf2:	9429      	str	r4, [sp, #164]	@ 0xa4
9001daf4:	3b01      	subs	r3, #1
9001daf6:	9309      	str	r3, [sp, #36]	@ 0x24
9001daf8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
9001dafa:	3302      	adds	r3, #2
9001dafc:	930c      	str	r3, [sp, #48]	@ 0x30
9001dafe:	e667      	b.n	9001d7d0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
9001db00:	d024      	beq.n	9001db4c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d4>
9001db02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
9001db04:	982b      	ldr	r0, [sp, #172]	@ 0xac
9001db06:	3b01      	subs	r3, #1
9001db08:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
9001db0a:	fb00 4003 	mla	r0, r0, r3, r4
9001db0e:	1400      	asrs	r0, r0, #16
9001db10:	f53f ae7b 	bmi.w	9001d80a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
9001db14:	3901      	subs	r1, #1
9001db16:	4288      	cmp	r0, r1
9001db18:	f6bf ae77 	bge.w	9001d80a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
9001db1c:	992c      	ldr	r1, [sp, #176]	@ 0xb0
9001db1e:	fb01 5303 	mla	r3, r1, r3, r5
9001db22:	141b      	asrs	r3, r3, #16
9001db24:	f53f ae71 	bmi.w	9001d80a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
9001db28:	3a01      	subs	r2, #1
9001db2a:	4293      	cmp	r3, r2
9001db2c:	f6bf ae6d 	bge.w	9001d80a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
9001db30:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
9001db34:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
9001db38:	f1bb 0f00 	cmp.w	fp, #0
9001db3c:	dc70      	bgt.n	9001dc20 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>
9001db3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
9001db40:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
9001db44:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
9001db46:	eb03 0344 	add.w	r3, r3, r4, lsl #1
9001db4a:	930c      	str	r3, [sp, #48]	@ 0x30
9001db4c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
9001db4e:	2b00      	cmp	r3, #0
9001db50:	f340 81be 	ble.w	9001ded0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
9001db54:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
9001db58:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
9001db5a:	ee30 0a04 	vadd.f32	s0, s0, s8
9001db5e:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001db62:	eef0 6a62 	vmov.f32	s13, s5
9001db66:	eec7 7a00 	vdiv.f32	s15, s14, s0
9001db6a:	ee31 1a05 	vadd.f32	s2, s2, s10
9001db6e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001db72:	edcd 6a29 	vstr	s13, [sp, #164]	@ 0xa4
9001db76:	eef0 6a43 	vmov.f32	s13, s6
9001db7a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001db7e:	ee16 5a90 	vmov	r5, s13
9001db82:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001db86:	ee61 7a27 	vmul.f32	s15, s2, s15
9001db8a:	ee77 2a62 	vsub.f32	s5, s14, s5
9001db8e:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001db92:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001db96:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001db9a:	ee12 2a90 	vmov	r2, s5
9001db9e:	eef0 2a47 	vmov.f32	s5, s14
9001dba2:	fb92 f3f3 	sdiv	r3, r2, r3
9001dba6:	ee13 2a10 	vmov	r2, s6
9001dbaa:	932b      	str	r3, [sp, #172]	@ 0xac
9001dbac:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
9001dbae:	eeb0 3a67 	vmov.f32	s6, s15
9001dbb2:	fb92 f3f3 	sdiv	r3, r2, r3
9001dbb6:	932c      	str	r3, [sp, #176]	@ 0xb0
9001dbb8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
9001dbba:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
9001dbbc:	3b01      	subs	r3, #1
9001dbbe:	9319      	str	r3, [sp, #100]	@ 0x64
9001dbc0:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
9001dbc2:	bf08      	it	eq
9001dbc4:	4613      	moveq	r3, r2
9001dbc6:	9309      	str	r3, [sp, #36]	@ 0x24
9001dbc8:	e5f4      	b.n	9001d7b4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
9001dbca:	2900      	cmp	r1, #0
9001dbcc:	f43f ae66 	beq.w	9001d89c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
9001dbd0:	f818 0000 	ldrb.w	r0, [r8, r0]
9001dbd4:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
9001dbd8:	900a      	str	r0, [sp, #40]	@ 0x28
9001dbda:	0e00      	lsrs	r0, r0, #24
9001dbdc:	9013      	str	r0, [sp, #76]	@ 0x4c
9001dbde:	e65d      	b.n	9001d89c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
9001dbe0:	f113 0801 	adds.w	r8, r3, #1
9001dbe4:	f53f af74 	bmi.w	9001dad0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
9001dbe8:	4540      	cmp	r0, r8
9001dbea:	f6ff af71 	blt.w	9001dad0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
9001dbee:	f11c 0801 	adds.w	r8, ip, #1
9001dbf2:	f53f af6d 	bmi.w	9001dad0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
9001dbf6:	45c6      	cmp	lr, r8
9001dbf8:	f6ff af6a 	blt.w	9001dad0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
9001dbfc:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
9001dbfe:	b200      	sxth	r0, r0
9001dc00:	9302      	str	r3, [sp, #8]
9001dc02:	fa0f f38e 	sxth.w	r3, lr
9001dc06:	9000      	str	r0, [sp, #0]
9001dc08:	9301      	str	r3, [sp, #4]
9001dc0a:	4633      	mov	r3, r6
9001dc0c:	981d      	ldr	r0, [sp, #116]	@ 0x74
9001dc0e:	e9cd 1405 	strd	r1, r4, [sp, #20]
9001dc12:	e9cd c203 	strd	ip, r2, [sp, #12]
9001dc16:	4639      	mov	r1, r7
9001dc18:	9a12      	ldr	r2, [sp, #72]	@ 0x48
9001dc1a:	f7ff fc63 	bl	9001d4e4 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>
9001dc1e:	e757      	b.n	9001dad0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
9001dc20:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
9001dc22:	f3c5 3003 	ubfx	r0, r5, #12, #4
9001dc26:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
9001dc28:	f3c3 3203 	ubfx	r2, r3, #12, #4
9001dc2c:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
9001dc2e:	1427      	asrs	r7, r4, #16
9001dc30:	9c12      	ldr	r4, [sp, #72]	@ 0x48
9001dc32:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
9001dc36:	142b      	asrs	r3, r5, #16
9001dc38:	fb01 7303 	mla	r3, r1, r3, r7
9001dc3c:	18e7      	adds	r7, r4, r3
9001dc3e:	5ce3      	ldrb	r3, [r4, r3]
9001dc40:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
9001dc44:	ea4f 6c13 	mov.w	ip, r3, lsr #24
9001dc48:	2a00      	cmp	r2, #0
9001dc4a:	f000 8137 	beq.w	9001debc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x744>
9001dc4e:	f897 e001 	ldrb.w	lr, [r7, #1]
9001dc52:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
9001dc56:	9410      	str	r4, [sp, #64]	@ 0x40
9001dc58:	0e24      	lsrs	r4, r4, #24
9001dc5a:	9417      	str	r4, [sp, #92]	@ 0x5c
9001dc5c:	b170      	cbz	r0, 9001dc7c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
9001dc5e:	eb07 0e01 	add.w	lr, r7, r1
9001dc62:	5c79      	ldrb	r1, [r7, r1]
9001dc64:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
9001dc68:	910b      	str	r1, [sp, #44]	@ 0x2c
9001dc6a:	0e09      	lsrs	r1, r1, #24
9001dc6c:	9114      	str	r1, [sp, #80]	@ 0x50
9001dc6e:	f89e 1001 	ldrb.w	r1, [lr, #1]
9001dc72:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
9001dc76:	9111      	str	r1, [sp, #68]	@ 0x44
9001dc78:	0e09      	lsrs	r1, r1, #24
9001dc7a:	9118      	str	r1, [sp, #96]	@ 0x60
9001dc7c:	b292      	uxth	r2, r2
9001dc7e:	9917      	ldr	r1, [sp, #92]	@ 0x5c
9001dc80:	b280      	uxth	r0, r0
9001dc82:	9c14      	ldr	r4, [sp, #80]	@ 0x50
9001dc84:	fb02 f800 	mul.w	r8, r2, r0
9001dc88:	0112      	lsls	r2, r2, #4
9001dc8a:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
9001dc8e:	eba2 0e08 	sub.w	lr, r2, r8
9001dc92:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
9001dc96:	b280      	uxth	r0, r0
9001dc98:	fa1f fe8e 	uxth.w	lr, lr
9001dc9c:	1a12      	subs	r2, r2, r0
9001dc9e:	fb0e f101 	mul.w	r1, lr, r1
9001dca2:	b292      	uxth	r2, r2
9001dca4:	fb02 110c 	mla	r1, r2, ip, r1
9001dca8:	fb00 1104 	mla	r1, r0, r4, r1
9001dcac:	9c18      	ldr	r4, [sp, #96]	@ 0x60
9001dcae:	fb08 1104 	mla	r1, r8, r4, r1
9001dcb2:	f3c1 2107 	ubfx	r1, r1, #8, #8
9001dcb6:	2900      	cmp	r1, #0
9001dcb8:	f000 80f5 	beq.w	9001dea6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72e>
9001dcbc:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
9001dcc0:	d019      	beq.n	9001dcf6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57e>
9001dcc2:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
9001dcc6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
9001dcca:	fb0c fa0a 	mul.w	sl, ip, sl
9001dcce:	fb0c fc03 	mul.w	ip, ip, r3
9001dcd2:	ea4f 231a 	mov.w	r3, sl, lsr #8
9001dcd6:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
9001dcda:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
9001dcde:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
9001dce2:	eb07 271c 	add.w	r7, r7, ip, lsr #8
9001dce6:	4453      	add	r3, sl
9001dce8:	0a3f      	lsrs	r7, r7, #8
9001dcea:	0a1b      	lsrs	r3, r3, #8
9001dcec:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
9001dcf0:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
9001dcf4:	433b      	orrs	r3, r7
9001dcf6:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
9001dcf8:	2cff      	cmp	r4, #255	@ 0xff
9001dcfa:	d020      	beq.n	9001dd3e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c6>
9001dcfc:	9c10      	ldr	r4, [sp, #64]	@ 0x40
9001dcfe:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
9001dd02:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
9001dd04:	4367      	muls	r7, r4
9001dd06:	9c10      	ldr	r4, [sp, #64]	@ 0x40
9001dd08:	ea4f 2c17 	mov.w	ip, r7, lsr #8
9001dd0c:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
9001dd10:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
9001dd12:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
9001dd16:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
9001dd1a:	fb04 fa0a 	mul.w	sl, r4, sl
9001dd1e:	44bc      	add	ip, r7
9001dd20:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
9001dd24:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001dd28:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
9001dd2c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
9001dd30:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9001dd34:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
9001dd38:	ea4c 040a 	orr.w	r4, ip, sl
9001dd3c:	9410      	str	r4, [sp, #64]	@ 0x40
9001dd3e:	9c14      	ldr	r4, [sp, #80]	@ 0x50
9001dd40:	2cff      	cmp	r4, #255	@ 0xff
9001dd42:	d020      	beq.n	9001dd86 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60e>
9001dd44:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
9001dd46:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
9001dd4a:	9c14      	ldr	r4, [sp, #80]	@ 0x50
9001dd4c:	4367      	muls	r7, r4
9001dd4e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
9001dd50:	ea4f 2c17 	mov.w	ip, r7, lsr #8
9001dd54:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
9001dd58:	9c14      	ldr	r4, [sp, #80]	@ 0x50
9001dd5a:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
9001dd5e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
9001dd62:	fb04 fa0a 	mul.w	sl, r4, sl
9001dd66:	44bc      	add	ip, r7
9001dd68:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
9001dd6c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001dd70:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
9001dd74:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
9001dd78:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9001dd7c:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
9001dd80:	ea4c 040a 	orr.w	r4, ip, sl
9001dd84:	940b      	str	r4, [sp, #44]	@ 0x2c
9001dd86:	9c18      	ldr	r4, [sp, #96]	@ 0x60
9001dd88:	2cff      	cmp	r4, #255	@ 0xff
9001dd8a:	d020      	beq.n	9001ddce <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x656>
9001dd8c:	9c11      	ldr	r4, [sp, #68]	@ 0x44
9001dd8e:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
9001dd92:	9c18      	ldr	r4, [sp, #96]	@ 0x60
9001dd94:	4367      	muls	r7, r4
9001dd96:	9c11      	ldr	r4, [sp, #68]	@ 0x44
9001dd98:	ea4f 2c17 	mov.w	ip, r7, lsr #8
9001dd9c:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
9001dda0:	9c18      	ldr	r4, [sp, #96]	@ 0x60
9001dda2:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
9001dda6:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
9001ddaa:	fb04 fa0a 	mul.w	sl, r4, sl
9001ddae:	44bc      	add	ip, r7
9001ddb0:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
9001ddb4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001ddb8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
9001ddbc:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
9001ddc0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9001ddc4:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
9001ddc8:	ea4c 040a 	orr.w	r4, ip, sl
9001ddcc:	9411      	str	r4, [sp, #68]	@ 0x44
9001ddce:	9c10      	ldr	r4, [sp, #64]	@ 0x40
9001ddd0:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
9001ddd4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
9001ddd8:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
9001dddc:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
9001ddde:	fb0e f707 	mul.w	r7, lr, r7
9001dde2:	fb02 770c 	mla	r7, r2, ip, r7
9001dde6:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
9001ddea:	9c11      	ldr	r4, [sp, #68]	@ 0x44
9001ddec:	fb00 770c 	mla	r7, r0, ip, r7
9001ddf0:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
9001ddf4:	9c10      	ldr	r4, [sp, #64]	@ 0x40
9001ddf6:	fb08 770c 	mla	r7, r8, ip, r7
9001ddfa:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
9001ddfe:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
9001de00:	fb0e fe0c 	mul.w	lr, lr, ip
9001de04:	0a3f      	lsrs	r7, r7, #8
9001de06:	fb02 e303 	mla	r3, r2, r3, lr
9001de0a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
9001de0c:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
9001de10:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
9001de14:	9a11      	ldr	r2, [sp, #68]	@ 0x44
9001de16:	fb00 330a 	mla	r3, r0, sl, r3
9001de1a:	f402 4c7f 	and.w	ip, r2, #65280	@ 0xff00
9001de1e:	f8b9 0000 	ldrh.w	r0, [r9]
9001de22:	fb08 3c0c 	mla	ip, r8, ip, r3
9001de26:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
9001de28:	1202      	asrs	r2, r0, #8
9001de2a:	434b      	muls	r3, r1
9001de2c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001de30:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
9001de34:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
9001de38:	1c59      	adds	r1, r3, #1
9001de3a:	ea47 070c 	orr.w	r7, r7, ip
9001de3e:	eb01 2113 	add.w	r1, r1, r3, lsr #8
9001de42:	0c3b      	lsrs	r3, r7, #16
9001de44:	ea6f 2111 	mvn.w	r1, r1, lsr #8
9001de48:	f3c7 2c07 	ubfx	ip, r7, #8, #8
9001de4c:	b2ff      	uxtb	r7, r7
9001de4e:	fb13 f304 	smulbb	r3, r3, r4
9001de52:	b2c9      	uxtb	r1, r1
9001de54:	fb1c fc04 	smulbb	ip, ip, r4
9001de58:	fb02 3201 	mla	r2, r2, r1, r3
9001de5c:	10c3      	asrs	r3, r0, #3
9001de5e:	fb17 f704 	smulbb	r7, r7, r4
9001de62:	00c0      	lsls	r0, r0, #3
9001de64:	b292      	uxth	r2, r2
9001de66:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
9001de6a:	b2c0      	uxtb	r0, r0
9001de6c:	fb03 c301 	mla	r3, r3, r1, ip
9001de70:	f102 0c01 	add.w	ip, r2, #1
9001de74:	fb00 7001 	mla	r0, r0, r1, r7
9001de78:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
9001de7c:	b280      	uxth	r0, r0
9001de7e:	f402 4c78 	and.w	ip, r2, #63488	@ 0xf800
9001de82:	b29b      	uxth	r3, r3
9001de84:	1c42      	adds	r2, r0, #1
9001de86:	eb02 2210 	add.w	r2, r2, r0, lsr #8
9001de8a:	f3c2 22c4 	ubfx	r2, r2, #11, #5
9001de8e:	ea42 020c 	orr.w	r2, r2, ip
9001de92:	f103 0c01 	add.w	ip, r3, #1
9001de96:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
9001de9a:	095b      	lsrs	r3, r3, #5
9001de9c:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
9001dea0:	431a      	orrs	r2, r3
9001dea2:	f8a9 2000 	strh.w	r2, [r9]
9001dea6:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
9001dea8:	f109 0902 	add.w	r9, r9, #2
9001deac:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
9001deae:	f10b 3bff 	add.w	fp, fp, #4294967295
9001deb2:	441a      	add	r2, r3
9001deb4:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
9001deb6:	9229      	str	r2, [sp, #164]	@ 0xa4
9001deb8:	441d      	add	r5, r3
9001deba:	e63d      	b.n	9001db38 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
9001debc:	2800      	cmp	r0, #0
9001debe:	f43f aedd 	beq.w	9001dc7c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
9001dec2:	5c79      	ldrb	r1, [r7, r1]
9001dec4:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
9001dec8:	910b      	str	r1, [sp, #44]	@ 0x2c
9001deca:	0e09      	lsrs	r1, r1, #24
9001decc:	9114      	str	r1, [sp, #80]	@ 0x50
9001dece:	e6d5      	b.n	9001dc7c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
9001ded0:	b01f      	add	sp, #124	@ 0x7c
9001ded2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

9001ded6 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>:
9001ded6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001deda:	b089      	sub	sp, #36	@ 0x24
9001dedc:	9101      	str	r1, [sp, #4]
9001dede:	9801      	ldr	r0, [sp, #4]
9001dee0:	f9bd c048 	ldrsh.w	ip, [sp, #72]	@ 0x48
9001dee4:	8800      	ldrh	r0, [r0, #0]
9001dee6:	f9bd 804c 	ldrsh.w	r8, [sp, #76]	@ 0x4c
9001deea:	1206      	asrs	r6, r0, #8
9001deec:	f89d 5058 	ldrb.w	r5, [sp, #88]	@ 0x58
9001def0:	f89d 405c 	ldrb.w	r4, [sp, #92]	@ 0x5c
9001def4:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
9001def8:	9602      	str	r6, [sp, #8]
9001defa:	10c6      	asrs	r6, r0, #3
9001defc:	00c0      	lsls	r0, r0, #3
9001defe:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
9001df02:	b2c0      	uxtb	r0, r0
9001df04:	9603      	str	r6, [sp, #12]
9001df06:	9004      	str	r0, [sp, #16]
9001df08:	e9dd 1714 	ldrd	r1, r7, [sp, #80]	@ 0x50
9001df0c:	fb07 100c 	mla	r0, r7, ip, r1
9001df10:	2f00      	cmp	r7, #0
9001df12:	eb02 0e00 	add.w	lr, r2, r0
9001df16:	f2c0 810a 	blt.w	9001e12e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
9001df1a:	45b8      	cmp	r8, r7
9001df1c:	f340 8107 	ble.w	9001e12e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
9001df20:	2900      	cmp	r1, #0
9001df22:	f2c0 8102 	blt.w	9001e12a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
9001df26:	458c      	cmp	ip, r1
9001df28:	f340 80ff 	ble.w	9001e12a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
9001df2c:	5c12      	ldrb	r2, [r2, r0]
9001df2e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
9001df32:	1c4a      	adds	r2, r1, #1
9001df34:	f100 80fe 	bmi.w	9001e134 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
9001df38:	4594      	cmp	ip, r2
9001df3a:	f340 80fb 	ble.w	9001e134 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
9001df3e:	2d00      	cmp	r5, #0
9001df40:	f000 80fa 	beq.w	9001e138 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x262>
9001df44:	f89e 2001 	ldrb.w	r2, [lr, #1]
9001df48:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
9001df4c:	3701      	adds	r7, #1
9001df4e:	f100 80f7 	bmi.w	9001e140 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
9001df52:	45b8      	cmp	r8, r7
9001df54:	f340 80f4 	ble.w	9001e140 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
9001df58:	2c00      	cmp	r4, #0
9001df5a:	f000 80f4 	beq.w	9001e146 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x270>
9001df5e:	2900      	cmp	r1, #0
9001df60:	eb0e 020c 	add.w	r2, lr, ip
9001df64:	f2c0 80ea 	blt.w	9001e13c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
9001df68:	458c      	cmp	ip, r1
9001df6a:	f340 80e7 	ble.w	9001e13c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
9001df6e:	f81e 700c 	ldrb.w	r7, [lr, ip]
9001df72:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
9001df76:	3101      	adds	r1, #1
9001df78:	f100 80e8 	bmi.w	9001e14c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
9001df7c:	458c      	cmp	ip, r1
9001df7e:	f340 80e5 	ble.w	9001e14c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
9001df82:	2d00      	cmp	r5, #0
9001df84:	f000 80e4 	beq.w	9001e150 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x27a>
9001df88:	7852      	ldrb	r2, [r2, #1]
9001df8a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
9001df8e:	0e0b      	lsrs	r3, r1, #24
9001df90:	f007 1cff 	and.w	ip, r7, #16711935	@ 0xff00ff
9001df94:	ea4f 6a10 	mov.w	sl, r0, lsr #24
9001df98:	9300      	str	r3, [sp, #0]
9001df9a:	b2a4      	uxth	r4, r4
9001df9c:	b2ab      	uxth	r3, r5
9001df9e:	f000 15ff 	and.w	r5, r0, #16711935	@ 0xff00ff
9001dfa2:	ea4f 6b16 	mov.w	fp, r6, lsr #24
9001dfa6:	fb03 f904 	mul.w	r9, r3, r4
9001dfaa:	011b      	lsls	r3, r3, #4
9001dfac:	fb0a f505 	mul.w	r5, sl, r5
9001dfb0:	ea4f 6817 	mov.w	r8, r7, lsr #24
9001dfb4:	eba3 0e09 	sub.w	lr, r3, r9
9001dfb8:	f5c3 7280 	rsb	r2, r3, #256	@ 0x100
9001dfbc:	f400 437f 	and.w	r3, r0, #65280	@ 0xff00
9001dfc0:	0a28      	lsrs	r0, r5, #8
9001dfc2:	f105 1501 	add.w	r5, r5, #65537	@ 0x10001
9001dfc6:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
9001dfca:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
9001dfce:	fb0a f303 	mul.w	r3, sl, r3
9001dfd2:	fb08 f707 	mul.w	r7, r8, r7
9001dfd6:	ebc9 1404 	rsb	r4, r9, r4, lsl #4
9001dfda:	4405      	add	r5, r0
9001dfdc:	fb08 fc0c 	mul.w	ip, r8, ip
9001dfe0:	b2a4      	uxth	r4, r4
9001dfe2:	0a2d      	lsrs	r5, r5, #8
9001dfe4:	fa1f fe8e 	uxth.w	lr, lr
9001dfe8:	1b12      	subs	r2, r2, r4
9001dfea:	f005 10ff 	and.w	r0, r5, #16711935	@ 0xff00ff
9001dfee:	b292      	uxth	r2, r2
9001dff0:	9005      	str	r0, [sp, #20]
9001dff2:	f503 7080 	add.w	r0, r3, #256	@ 0x100
9001dff6:	eb00 2313 	add.w	r3, r0, r3, lsr #8
9001dffa:	ea4f 201c 	mov.w	r0, ip, lsr #8
9001dffe:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
9001e002:	0a1b      	lsrs	r3, r3, #8
9001e004:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
9001e008:	9306      	str	r3, [sp, #24]
9001e00a:	f006 13ff 	and.w	r3, r6, #16711935	@ 0xff00ff
9001e00e:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
9001e012:	4460      	add	r0, ip
9001e014:	fb0b f303 	mul.w	r3, fp, r3
9001e018:	fb0b f606 	mul.w	r6, fp, r6
9001e01c:	0a00      	lsrs	r0, r0, #8
9001e01e:	0a1d      	lsrs	r5, r3, #8
9001e020:	f103 1301 	add.w	r3, r3, #65537	@ 0x10001
9001e024:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
9001e028:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
9001e02c:	441d      	add	r5, r3
9001e02e:	f506 7380 	add.w	r3, r6, #256	@ 0x100
9001e032:	eb03 2616 	add.w	r6, r3, r6, lsr #8
9001e036:	f507 7380 	add.w	r3, r7, #256	@ 0x100
9001e03a:	0a2d      	lsrs	r5, r5, #8
9001e03c:	eb03 2317 	add.w	r3, r3, r7, lsr #8
9001e040:	f001 17ff 	and.w	r7, r1, #16711935	@ 0xff00ff
9001e044:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
9001e048:	0a36      	lsrs	r6, r6, #8
9001e04a:	0a1b      	lsrs	r3, r3, #8
9001e04c:	fb05 f50e 	mul.w	r5, r5, lr
9001e050:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
9001e054:	9307      	str	r3, [sp, #28]
9001e056:	0e0b      	lsrs	r3, r1, #24
9001e058:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
9001e05c:	fb0e f606 	mul.w	r6, lr, r6
9001e060:	435f      	muls	r7, r3
9001e062:	4359      	muls	r1, r3
9001e064:	9b05      	ldr	r3, [sp, #20]
9001e066:	ea4f 2c17 	mov.w	ip, r7, lsr #8
9001e06a:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
9001e06e:	fb03 5502 	mla	r5, r3, r2, r5
9001e072:	9b06      	ldr	r3, [sp, #24]
9001e074:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
9001e078:	fb0e fe0b 	mul.w	lr, lr, fp
9001e07c:	44bc      	add	ip, r7
9001e07e:	f501 7780 	add.w	r7, r1, #256	@ 0x100
9001e082:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001e086:	eb07 2111 	add.w	r1, r7, r1, lsr #8
9001e08a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
9001e08e:	0a09      	lsrs	r1, r1, #8
9001e090:	fb0c 5509 	mla	r5, ip, r9, r5
9001e094:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
9001e098:	fb00 5504 	mla	r5, r0, r4, r5
9001e09c:	f403 407f 	and.w	r0, r3, #65280	@ 0xff00
9001e0a0:	9b07      	ldr	r3, [sp, #28]
9001e0a2:	fb02 6000 	mla	r0, r2, r0, r6
9001e0a6:	0a2d      	lsrs	r5, r5, #8
9001e0a8:	fb02 e20a 	mla	r2, r2, sl, lr
9001e0ac:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
9001e0b0:	fb09 0001 	mla	r0, r9, r1, r0
9001e0b4:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
9001e0b8:	fb04 0003 	mla	r0, r4, r3, r0
9001e0bc:	9b00      	ldr	r3, [sp, #0]
9001e0be:	fb04 2408 	mla	r4, r4, r8, r2
9001e0c2:	9a04      	ldr	r2, [sp, #16]
9001e0c4:	0a00      	lsrs	r0, r0, #8
9001e0c6:	fb09 4903 	mla	r9, r9, r3, r4
9001e0ca:	9b02      	ldr	r3, [sp, #8]
9001e0cc:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
9001e0d0:	ea6f 2929 	mvn.w	r9, r9, asr #8
9001e0d4:	4305      	orrs	r5, r0
9001e0d6:	fa5f f989 	uxtb.w	r9, r9
9001e0da:	fb03 f109 	mul.w	r1, r3, r9
9001e0de:	9b03      	ldr	r3, [sp, #12]
9001e0e0:	fb03 f309 	mul.w	r3, r3, r9
9001e0e4:	fb02 f909 	mul.w	r9, r2, r9
9001e0e8:	1c4a      	adds	r2, r1, #1
9001e0ea:	1c58      	adds	r0, r3, #1
9001e0ec:	eb02 2111 	add.w	r1, r2, r1, lsr #8
9001e0f0:	eb00 2013 	add.w	r0, r0, r3, lsr #8
9001e0f4:	0c2a      	lsrs	r2, r5, #16
9001e0f6:	0a2b      	lsrs	r3, r5, #8
9001e0f8:	eb02 2211 	add.w	r2, r2, r1, lsr #8
9001e0fc:	eb03 2310 	add.w	r3, r3, r0, lsr #8
9001e100:	0212      	lsls	r2, r2, #8
9001e102:	00db      	lsls	r3, r3, #3
9001e104:	f402 4278 	and.w	r2, r2, #63488	@ 0xf800
9001e108:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
9001e10c:	4313      	orrs	r3, r2
9001e10e:	f109 0201 	add.w	r2, r9, #1
9001e112:	eb02 2919 	add.w	r9, r2, r9, lsr #8
9001e116:	eb05 2519 	add.w	r5, r5, r9, lsr #8
9001e11a:	f3c5 05c4 	ubfx	r5, r5, #3, #5
9001e11e:	431d      	orrs	r5, r3
9001e120:	9b01      	ldr	r3, [sp, #4]
9001e122:	801d      	strh	r5, [r3, #0]
9001e124:	b009      	add	sp, #36	@ 0x24
9001e126:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001e12a:	2000      	movs	r0, #0
9001e12c:	e701      	b.n	9001df32 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x5c>
9001e12e:	2600      	movs	r6, #0
9001e130:	4630      	mov	r0, r6
9001e132:	e70b      	b.n	9001df4c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
9001e134:	2600      	movs	r6, #0
9001e136:	e709      	b.n	9001df4c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
9001e138:	462e      	mov	r6, r5
9001e13a:	e707      	b.n	9001df4c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
9001e13c:	2700      	movs	r7, #0
9001e13e:	e71a      	b.n	9001df76 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xa0>
9001e140:	2100      	movs	r1, #0
9001e142:	460f      	mov	r7, r1
9001e144:	e723      	b.n	9001df8e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
9001e146:	4621      	mov	r1, r4
9001e148:	4627      	mov	r7, r4
9001e14a:	e720      	b.n	9001df8e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
9001e14c:	2100      	movs	r1, #0
9001e14e:	e71e      	b.n	9001df8e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
9001e150:	4629      	mov	r1, r5
9001e152:	e71c      	b.n	9001df8e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>

9001e154 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001e154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001e158:	b09b      	sub	sp, #108	@ 0x6c
9001e15a:	9218      	str	r2, [sp, #96]	@ 0x60
9001e15c:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
9001e15e:	9019      	str	r0, [sp, #100]	@ 0x64
9001e160:	9116      	str	r1, [sp, #88]	@ 0x58
9001e162:	6850      	ldr	r0, [r2, #4]
9001e164:	9307      	str	r3, [sp, #28]
9001e166:	6812      	ldr	r2, [r2, #0]
9001e168:	9d26      	ldr	r5, [sp, #152]	@ 0x98
9001e16a:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	@ 0xa8
9001e16e:	fb00 1303 	mla	r3, r0, r3, r1
9001e172:	eb02 0343 	add.w	r3, r2, r3, lsl #1
9001e176:	930a      	str	r3, [sp, #40]	@ 0x28
9001e178:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
9001e17a:	681b      	ldr	r3, [r3, #0]
9001e17c:	930f      	str	r3, [sp, #60]	@ 0x3c
9001e17e:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
9001e180:	685e      	ldr	r6, [r3, #4]
9001e182:	3604      	adds	r6, #4
9001e184:	9b16      	ldr	r3, [sp, #88]	@ 0x58
9001e186:	2b00      	cmp	r3, #0
9001e188:	dc03      	bgt.n	9001e192 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
9001e18a:	9b18      	ldr	r3, [sp, #96]	@ 0x60
9001e18c:	2b00      	cmp	r3, #0
9001e18e:	f340 8373 	ble.w	9001e878 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
9001e192:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
9001e194:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
9001e198:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
9001e19c:	1e48      	subs	r0, r1, #1
9001e19e:	1e57      	subs	r7, r2, #1
9001e1a0:	9b07      	ldr	r3, [sp, #28]
9001e1a2:	2b00      	cmp	r3, #0
9001e1a4:	f340 818f 	ble.w	9001e4c6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
9001e1a8:	9c25      	ldr	r4, [sp, #148]	@ 0x94
9001e1aa:	142b      	asrs	r3, r5, #16
9001e1ac:	ea5f 4c24 	movs.w	ip, r4, asr #16
9001e1b0:	d406      	bmi.n	9001e1c0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
9001e1b2:	4584      	cmp	ip, r0
9001e1b4:	da04      	bge.n	9001e1c0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
9001e1b6:	2b00      	cmp	r3, #0
9001e1b8:	db02      	blt.n	9001e1c0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
9001e1ba:	42bb      	cmp	r3, r7
9001e1bc:	f2c0 8184 	blt.w	9001e4c8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
9001e1c0:	f11c 0c01 	adds.w	ip, ip, #1
9001e1c4:	f100 8172 	bmi.w	9001e4ac <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
9001e1c8:	4561      	cmp	r1, ip
9001e1ca:	f2c0 816f 	blt.w	9001e4ac <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
9001e1ce:	3301      	adds	r3, #1
9001e1d0:	f100 816c 	bmi.w	9001e4ac <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
9001e1d4:	429a      	cmp	r2, r3
9001e1d6:	f2c0 8169 	blt.w	9001e4ac <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
9001e1da:	9b07      	ldr	r3, [sp, #28]
9001e1dc:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
9001e1de:	9317      	str	r3, [sp, #92]	@ 0x5c
9001e1e0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
9001e1e2:	2b00      	cmp	r3, #0
9001e1e4:	f340 818e 	ble.w	9001e504 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b0>
9001e1e8:	9b25      	ldr	r3, [sp, #148]	@ 0x94
9001e1ea:	ea4f 4c25 	mov.w	ip, r5, asr #16
9001e1ee:	f3c5 3003 	ubfx	r0, r5, #12, #4
9001e1f2:	f3c3 3203 	ubfx	r2, r3, #12, #4
9001e1f6:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
9001e1f8:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
9001e1fc:	9b25      	ldr	r3, [sp, #148]	@ 0x94
9001e1fe:	141b      	asrs	r3, r3, #16
9001e200:	f100 81d1 	bmi.w	9001e5a6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
9001e204:	f101 38ff 	add.w	r8, r1, #4294967295
9001e208:	4543      	cmp	r3, r8
9001e20a:	f280 81cc 	bge.w	9001e5a6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
9001e20e:	f1bc 0f00 	cmp.w	ip, #0
9001e212:	f2c0 81c8 	blt.w	9001e5a6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
9001e216:	f10e 38ff 	add.w	r8, lr, #4294967295
9001e21a:	45c4      	cmp	ip, r8
9001e21c:	f280 81c3 	bge.w	9001e5a6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
9001e220:	b209      	sxth	r1, r1
9001e222:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
9001e224:	fb0c 3301 	mla	r3, ip, r1, r3
9001e228:	eb04 0803 	add.w	r8, r4, r3
9001e22c:	5ce3      	ldrb	r3, [r4, r3]
9001e22e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
9001e232:	ea4f 6e13 	mov.w	lr, r3, lsr #24
9001e236:	2a00      	cmp	r2, #0
9001e238:	f000 81aa 	beq.w	9001e590 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x43c>
9001e23c:	f898 c001 	ldrb.w	ip, [r8, #1]
9001e240:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
9001e244:	940b      	str	r4, [sp, #44]	@ 0x2c
9001e246:	0e24      	lsrs	r4, r4, #24
9001e248:	9412      	str	r4, [sp, #72]	@ 0x48
9001e24a:	b178      	cbz	r0, 9001e26c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
9001e24c:	eb08 0c01 	add.w	ip, r8, r1
9001e250:	f818 1001 	ldrb.w	r1, [r8, r1]
9001e254:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
9001e258:	9108      	str	r1, [sp, #32]
9001e25a:	0e09      	lsrs	r1, r1, #24
9001e25c:	9110      	str	r1, [sp, #64]	@ 0x40
9001e25e:	f89c 1001 	ldrb.w	r1, [ip, #1]
9001e262:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
9001e266:	910c      	str	r1, [sp, #48]	@ 0x30
9001e268:	0e09      	lsrs	r1, r1, #24
9001e26a:	9113      	str	r1, [sp, #76]	@ 0x4c
9001e26c:	b292      	uxth	r2, r2
9001e26e:	9912      	ldr	r1, [sp, #72]	@ 0x48
9001e270:	b280      	uxth	r0, r0
9001e272:	9c10      	ldr	r4, [sp, #64]	@ 0x40
9001e274:	fb02 f900 	mul.w	r9, r2, r0
9001e278:	0112      	lsls	r2, r2, #4
9001e27a:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
9001e27e:	eba2 0809 	sub.w	r8, r2, r9
9001e282:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
9001e286:	b280      	uxth	r0, r0
9001e288:	fa1f f888 	uxth.w	r8, r8
9001e28c:	1a12      	subs	r2, r2, r0
9001e28e:	fb08 f101 	mul.w	r1, r8, r1
9001e292:	b292      	uxth	r2, r2
9001e294:	fb02 110e 	mla	r1, r2, lr, r1
9001e298:	fb00 1104 	mla	r1, r0, r4, r1
9001e29c:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
9001e29e:	fb09 1104 	mla	r1, r9, r4, r1
9001e2a2:	f3c1 2107 	ubfx	r1, r1, #8, #8
9001e2a6:	2900      	cmp	r1, #0
9001e2a8:	f000 80f5 	beq.w	9001e496 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
9001e2ac:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
9001e2b0:	d01b      	beq.n	9001e2ea <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
9001e2b2:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
9001e2b6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
9001e2ba:	fb0e fa0a 	mul.w	sl, lr, sl
9001e2be:	fb0e fe03 	mul.w	lr, lr, r3
9001e2c2:	ea4f 231a 	mov.w	r3, sl, lsr #8
9001e2c6:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
9001e2ca:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
9001e2ce:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
9001e2d2:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
9001e2d6:	4453      	add	r3, sl
9001e2d8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001e2dc:	0a1b      	lsrs	r3, r3, #8
9001e2de:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
9001e2e2:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
9001e2e6:	ea43 030c 	orr.w	r3, r3, ip
9001e2ea:	9c12      	ldr	r4, [sp, #72]	@ 0x48
9001e2ec:	2cff      	cmp	r4, #255	@ 0xff
9001e2ee:	d021      	beq.n	9001e334 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
9001e2f0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
9001e2f2:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
9001e2f6:	9c12      	ldr	r4, [sp, #72]	@ 0x48
9001e2f8:	fb04 fb0b 	mul.w	fp, r4, fp
9001e2fc:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
9001e2fe:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
9001e302:	9c12      	ldr	r4, [sp, #72]	@ 0x48
9001e304:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
9001e308:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
9001e30c:	fb04 fa0a 	mul.w	sl, r4, sl
9001e310:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
9001e314:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
9001e318:	44de      	add	lr, fp
9001e31a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
9001e31e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
9001e322:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9001e326:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
9001e32a:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
9001e32e:	ea4e 040a 	orr.w	r4, lr, sl
9001e332:	940b      	str	r4, [sp, #44]	@ 0x2c
9001e334:	9c10      	ldr	r4, [sp, #64]	@ 0x40
9001e336:	2cff      	cmp	r4, #255	@ 0xff
9001e338:	d021      	beq.n	9001e37e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
9001e33a:	9c08      	ldr	r4, [sp, #32]
9001e33c:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
9001e340:	9c10      	ldr	r4, [sp, #64]	@ 0x40
9001e342:	fb04 fb0b 	mul.w	fp, r4, fp
9001e346:	9c08      	ldr	r4, [sp, #32]
9001e348:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
9001e34c:	9c10      	ldr	r4, [sp, #64]	@ 0x40
9001e34e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
9001e352:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
9001e356:	fb04 fa0a 	mul.w	sl, r4, sl
9001e35a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
9001e35e:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
9001e362:	44de      	add	lr, fp
9001e364:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
9001e368:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
9001e36c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9001e370:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
9001e374:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
9001e378:	ea4e 040a 	orr.w	r4, lr, sl
9001e37c:	9408      	str	r4, [sp, #32]
9001e37e:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
9001e380:	2cff      	cmp	r4, #255	@ 0xff
9001e382:	d021      	beq.n	9001e3c8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
9001e384:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
9001e386:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
9001e38a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
9001e38c:	fb04 fb0b 	mul.w	fp, r4, fp
9001e390:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
9001e392:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
9001e396:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
9001e398:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
9001e39c:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
9001e3a0:	fb04 fa0a 	mul.w	sl, r4, sl
9001e3a4:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
9001e3a8:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
9001e3ac:	44de      	add	lr, fp
9001e3ae:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
9001e3b2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
9001e3b6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9001e3ba:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
9001e3be:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
9001e3c2:	ea4e 040a 	orr.w	r4, lr, sl
9001e3c6:	940c      	str	r4, [sp, #48]	@ 0x30
9001e3c8:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
9001e3ca:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
9001e3ce:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
9001e3d2:	43c9      	mvns	r1, r1
9001e3d4:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
9001e3d8:	9c08      	ldr	r4, [sp, #32]
9001e3da:	fb08 fc0c 	mul.w	ip, r8, ip
9001e3de:	fb02 cc0e 	mla	ip, r2, lr, ip
9001e3e2:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
9001e3e6:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
9001e3e8:	fb00 cc0e 	mla	ip, r0, lr, ip
9001e3ec:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
9001e3f0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
9001e3f2:	fb09 cc0e 	mla	ip, r9, lr, ip
9001e3f6:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
9001e3fa:	fb08 f80e 	mul.w	r8, r8, lr
9001e3fe:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001e402:	fa5f fe81 	uxtb.w	lr, r1
9001e406:	fb02 8303 	mla	r3, r2, r3, r8
9001e40a:	9a08      	ldr	r2, [sp, #32]
9001e40c:	f8b7 8000 	ldrh.w	r8, [r7]
9001e410:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
9001e414:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
9001e418:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
9001e41a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
9001e41e:	fb00 330a 	mla	r3, r0, sl, r3
9001e422:	f402 407f 	and.w	r0, r2, #65280	@ 0xff00
9001e426:	ea4f 2228 	mov.w	r2, r8, asr #8
9001e42a:	fb09 3900 	mla	r9, r9, r0, r3
9001e42e:	ea4f 00e8 	mov.w	r0, r8, asr #3
9001e432:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
9001e436:	b2c9      	uxtb	r1, r1
9001e438:	ea4f 2919 	mov.w	r9, r9, lsr #8
9001e43c:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
9001e440:	fb02 f20e 	mul.w	r2, r2, lr
9001e444:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
9001e448:	fb00 f00e 	mul.w	r0, r0, lr
9001e44c:	1c53      	adds	r3, r2, #1
9001e44e:	fb01 f10e 	mul.w	r1, r1, lr
9001e452:	ea4c 0c09 	orr.w	ip, ip, r9
9001e456:	eb03 2212 	add.w	r2, r3, r2, lsr #8
9001e45a:	ea4f 431c 	mov.w	r3, ip, lsr #16
9001e45e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
9001e462:	4a60      	ldr	r2, [pc, #384]	@ (9001e5e4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>)
9001e464:	b2db      	uxtb	r3, r3
9001e466:	ea02 2203 	and.w	r2, r2, r3, lsl #8
9001e46a:	1c43      	adds	r3, r0, #1
9001e46c:	eb03 2010 	add.w	r0, r3, r0, lsr #8
9001e470:	ea4f 231c 	mov.w	r3, ip, lsr #8
9001e474:	eb03 2310 	add.w	r3, r3, r0, lsr #8
9001e478:	00db      	lsls	r3, r3, #3
9001e47a:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
9001e47e:	4313      	orrs	r3, r2
9001e480:	1c4a      	adds	r2, r1, #1
9001e482:	eb02 2111 	add.w	r1, r2, r1, lsr #8
9001e486:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
9001e48a:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
9001e48e:	ea4c 0c03 	orr.w	ip, ip, r3
9001e492:	f8a7 c000 	strh.w	ip, [r7]
9001e496:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
9001e498:	3702      	adds	r7, #2
9001e49a:	9a25      	ldr	r2, [sp, #148]	@ 0x94
9001e49c:	441a      	add	r2, r3
9001e49e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
9001e4a0:	441d      	add	r5, r3
9001e4a2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
9001e4a4:	9225      	str	r2, [sp, #148]	@ 0x94
9001e4a6:	3b01      	subs	r3, #1
9001e4a8:	9317      	str	r3, [sp, #92]	@ 0x5c
9001e4aa:	e699      	b.n	9001e1e0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
9001e4ac:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
9001e4ae:	9c25      	ldr	r4, [sp, #148]	@ 0x94
9001e4b0:	441c      	add	r4, r3
9001e4b2:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
9001e4b4:	441d      	add	r5, r3
9001e4b6:	9b07      	ldr	r3, [sp, #28]
9001e4b8:	9425      	str	r4, [sp, #148]	@ 0x94
9001e4ba:	3b01      	subs	r3, #1
9001e4bc:	9307      	str	r3, [sp, #28]
9001e4be:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
9001e4c0:	3302      	adds	r3, #2
9001e4c2:	930a      	str	r3, [sp, #40]	@ 0x28
9001e4c4:	e66c      	b.n	9001e1a0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
9001e4c6:	d024      	beq.n	9001e512 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3be>
9001e4c8:	9b07      	ldr	r3, [sp, #28]
9001e4ca:	9827      	ldr	r0, [sp, #156]	@ 0x9c
9001e4cc:	3b01      	subs	r3, #1
9001e4ce:	9c25      	ldr	r4, [sp, #148]	@ 0x94
9001e4d0:	fb00 4003 	mla	r0, r0, r3, r4
9001e4d4:	1400      	asrs	r0, r0, #16
9001e4d6:	f53f ae80 	bmi.w	9001e1da <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
9001e4da:	3901      	subs	r1, #1
9001e4dc:	4288      	cmp	r0, r1
9001e4de:	f6bf ae7c 	bge.w	9001e1da <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
9001e4e2:	9928      	ldr	r1, [sp, #160]	@ 0xa0
9001e4e4:	fb01 5303 	mla	r3, r1, r3, r5
9001e4e8:	141b      	asrs	r3, r3, #16
9001e4ea:	f53f ae76 	bmi.w	9001e1da <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
9001e4ee:	3a01      	subs	r2, #1
9001e4f0:	4293      	cmp	r3, r2
9001e4f2:	f6bf ae72 	bge.w	9001e1da <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
9001e4f6:	f8dd b01c 	ldr.w	fp, [sp, #28]
9001e4fa:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
9001e4fe:	f1bb 0f00 	cmp.w	fp, #0
9001e502:	dc71      	bgt.n	9001e5e8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
9001e504:	9b07      	ldr	r3, [sp, #28]
9001e506:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
9001e50a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
9001e50c:	eb03 0344 	add.w	r3, r3, r4, lsl #1
9001e510:	930a      	str	r3, [sp, #40]	@ 0x28
9001e512:	9b16      	ldr	r3, [sp, #88]	@ 0x58
9001e514:	2b00      	cmp	r3, #0
9001e516:	f340 81af 	ble.w	9001e878 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
9001e51a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
9001e51e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
9001e520:	ee30 0a04 	vadd.f32	s0, s0, s8
9001e524:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001e528:	eef0 6a62 	vmov.f32	s13, s5
9001e52c:	eec7 7a00 	vdiv.f32	s15, s14, s0
9001e530:	ee31 1a05 	vadd.f32	s2, s2, s10
9001e534:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001e538:	edcd 6a25 	vstr	s13, [sp, #148]	@ 0x94
9001e53c:	eef0 6a43 	vmov.f32	s13, s6
9001e540:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001e544:	ee16 5a90 	vmov	r5, s13
9001e548:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001e54c:	ee61 7a27 	vmul.f32	s15, s2, s15
9001e550:	ee77 2a62 	vsub.f32	s5, s14, s5
9001e554:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001e558:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001e55c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001e560:	ee12 2a90 	vmov	r2, s5
9001e564:	eef0 2a47 	vmov.f32	s5, s14
9001e568:	fb92 f3f3 	sdiv	r3, r2, r3
9001e56c:	ee13 2a10 	vmov	r2, s6
9001e570:	9327      	str	r3, [sp, #156]	@ 0x9c
9001e572:	9b24      	ldr	r3, [sp, #144]	@ 0x90
9001e574:	eeb0 3a67 	vmov.f32	s6, s15
9001e578:	fb92 f3f3 	sdiv	r3, r2, r3
9001e57c:	9328      	str	r3, [sp, #160]	@ 0xa0
9001e57e:	9b16      	ldr	r3, [sp, #88]	@ 0x58
9001e580:	9a18      	ldr	r2, [sp, #96]	@ 0x60
9001e582:	3b01      	subs	r3, #1
9001e584:	9316      	str	r3, [sp, #88]	@ 0x58
9001e586:	9b24      	ldr	r3, [sp, #144]	@ 0x90
9001e588:	bf08      	it	eq
9001e58a:	4613      	moveq	r3, r2
9001e58c:	9307      	str	r3, [sp, #28]
9001e58e:	e5f9      	b.n	9001e184 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
9001e590:	2800      	cmp	r0, #0
9001e592:	f43f ae6b 	beq.w	9001e26c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
9001e596:	f818 1001 	ldrb.w	r1, [r8, r1]
9001e59a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
9001e59e:	9108      	str	r1, [sp, #32]
9001e5a0:	0e09      	lsrs	r1, r1, #24
9001e5a2:	9110      	str	r1, [sp, #64]	@ 0x40
9001e5a4:	e662      	b.n	9001e26c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
9001e5a6:	f113 0801 	adds.w	r8, r3, #1
9001e5aa:	f53f af74 	bmi.w	9001e496 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
9001e5ae:	4541      	cmp	r1, r8
9001e5b0:	f6ff af71 	blt.w	9001e496 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
9001e5b4:	f11c 0801 	adds.w	r8, ip, #1
9001e5b8:	f53f af6d 	bmi.w	9001e496 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
9001e5bc:	45c6      	cmp	lr, r8
9001e5be:	f6ff af6a 	blt.w	9001e496 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
9001e5c2:	b209      	sxth	r1, r1
9001e5c4:	e9cd 3c02 	strd	r3, ip, [sp, #8]
9001e5c8:	fa0f f38e 	sxth.w	r3, lr
9001e5cc:	9100      	str	r1, [sp, #0]
9001e5ce:	4639      	mov	r1, r7
9001e5d0:	9301      	str	r3, [sp, #4]
9001e5d2:	4633      	mov	r3, r6
9001e5d4:	e9cd 2004 	strd	r2, r0, [sp, #16]
9001e5d8:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
9001e5da:	9819      	ldr	r0, [sp, #100]	@ 0x64
9001e5dc:	f7ff fc7b 	bl	9001ded6 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>
9001e5e0:	e759      	b.n	9001e496 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
9001e5e2:	bf00      	nop
9001e5e4:	fffff800 	.word	0xfffff800
9001e5e8:	9b25      	ldr	r3, [sp, #148]	@ 0x94
9001e5ea:	f3c5 3003 	ubfx	r0, r5, #12, #4
9001e5ee:	9c25      	ldr	r4, [sp, #148]	@ 0x94
9001e5f0:	f3c3 3203 	ubfx	r2, r3, #12, #4
9001e5f4:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
9001e5f6:	1427      	asrs	r7, r4, #16
9001e5f8:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
9001e5fa:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
9001e5fe:	142b      	asrs	r3, r5, #16
9001e600:	fb01 7303 	mla	r3, r1, r3, r7
9001e604:	18e7      	adds	r7, r4, r3
9001e606:	5ce3      	ldrb	r3, [r4, r3]
9001e608:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
9001e60c:	ea4f 6c13 	mov.w	ip, r3, lsr #24
9001e610:	2a00      	cmp	r2, #0
9001e612:	f000 8127 	beq.w	9001e864 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x710>
9001e616:	f897 e001 	ldrb.w	lr, [r7, #1]
9001e61a:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
9001e61e:	940d      	str	r4, [sp, #52]	@ 0x34
9001e620:	0e24      	lsrs	r4, r4, #24
9001e622:	9414      	str	r4, [sp, #80]	@ 0x50
9001e624:	b170      	cbz	r0, 9001e644 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
9001e626:	eb07 0e01 	add.w	lr, r7, r1
9001e62a:	5c79      	ldrb	r1, [r7, r1]
9001e62c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
9001e630:	9109      	str	r1, [sp, #36]	@ 0x24
9001e632:	0e09      	lsrs	r1, r1, #24
9001e634:	9111      	str	r1, [sp, #68]	@ 0x44
9001e636:	f89e 1001 	ldrb.w	r1, [lr, #1]
9001e63a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
9001e63e:	910e      	str	r1, [sp, #56]	@ 0x38
9001e640:	0e09      	lsrs	r1, r1, #24
9001e642:	9115      	str	r1, [sp, #84]	@ 0x54
9001e644:	b292      	uxth	r2, r2
9001e646:	9c11      	ldr	r4, [sp, #68]	@ 0x44
9001e648:	b280      	uxth	r0, r0
9001e64a:	fb02 f800 	mul.w	r8, r2, r0
9001e64e:	0112      	lsls	r2, r2, #4
9001e650:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
9001e654:	eba2 0e08 	sub.w	lr, r2, r8
9001e658:	f5c2 7180 	rsb	r1, r2, #256	@ 0x100
9001e65c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
9001e65e:	b280      	uxth	r0, r0
9001e660:	fa1f fe8e 	uxth.w	lr, lr
9001e664:	1a09      	subs	r1, r1, r0
9001e666:	fb0e f202 	mul.w	r2, lr, r2
9001e66a:	b289      	uxth	r1, r1
9001e66c:	fb01 220c 	mla	r2, r1, ip, r2
9001e670:	fb00 2204 	mla	r2, r0, r4, r2
9001e674:	9c15      	ldr	r4, [sp, #84]	@ 0x54
9001e676:	fb08 2204 	mla	r2, r8, r4, r2
9001e67a:	f3c2 2207 	ubfx	r2, r2, #8, #8
9001e67e:	2a00      	cmp	r2, #0
9001e680:	f000 80e5 	beq.w	9001e84e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fa>
9001e684:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
9001e688:	d019      	beq.n	9001e6be <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56a>
9001e68a:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
9001e68e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
9001e692:	fb0c fa0a 	mul.w	sl, ip, sl
9001e696:	fb0c fc03 	mul.w	ip, ip, r3
9001e69a:	ea4f 231a 	mov.w	r3, sl, lsr #8
9001e69e:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
9001e6a2:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
9001e6a6:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
9001e6aa:	eb07 271c 	add.w	r7, r7, ip, lsr #8
9001e6ae:	4453      	add	r3, sl
9001e6b0:	0a3f      	lsrs	r7, r7, #8
9001e6b2:	0a1b      	lsrs	r3, r3, #8
9001e6b4:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
9001e6b8:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
9001e6bc:	433b      	orrs	r3, r7
9001e6be:	9c14      	ldr	r4, [sp, #80]	@ 0x50
9001e6c0:	2cff      	cmp	r4, #255	@ 0xff
9001e6c2:	d020      	beq.n	9001e706 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5b2>
9001e6c4:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
9001e6c6:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
9001e6ca:	9c14      	ldr	r4, [sp, #80]	@ 0x50
9001e6cc:	4367      	muls	r7, r4
9001e6ce:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
9001e6d0:	ea4f 2c17 	mov.w	ip, r7, lsr #8
9001e6d4:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
9001e6d8:	9c14      	ldr	r4, [sp, #80]	@ 0x50
9001e6da:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
9001e6de:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
9001e6e2:	fb04 fa0a 	mul.w	sl, r4, sl
9001e6e6:	44bc      	add	ip, r7
9001e6e8:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
9001e6ec:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001e6f0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
9001e6f4:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
9001e6f8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9001e6fc:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
9001e700:	ea4c 040a 	orr.w	r4, ip, sl
9001e704:	940d      	str	r4, [sp, #52]	@ 0x34
9001e706:	9c11      	ldr	r4, [sp, #68]	@ 0x44
9001e708:	2cff      	cmp	r4, #255	@ 0xff
9001e70a:	d020      	beq.n	9001e74e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5fa>
9001e70c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
9001e70e:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
9001e712:	9c11      	ldr	r4, [sp, #68]	@ 0x44
9001e714:	4367      	muls	r7, r4
9001e716:	9c09      	ldr	r4, [sp, #36]	@ 0x24
9001e718:	ea4f 2c17 	mov.w	ip, r7, lsr #8
9001e71c:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
9001e720:	9c11      	ldr	r4, [sp, #68]	@ 0x44
9001e722:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
9001e726:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
9001e72a:	fb04 fa0a 	mul.w	sl, r4, sl
9001e72e:	44bc      	add	ip, r7
9001e730:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
9001e734:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001e738:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
9001e73c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
9001e740:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9001e744:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
9001e748:	ea4c 040a 	orr.w	r4, ip, sl
9001e74c:	9409      	str	r4, [sp, #36]	@ 0x24
9001e74e:	9c15      	ldr	r4, [sp, #84]	@ 0x54
9001e750:	2cff      	cmp	r4, #255	@ 0xff
9001e752:	d020      	beq.n	9001e796 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x642>
9001e754:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
9001e756:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
9001e75a:	9c15      	ldr	r4, [sp, #84]	@ 0x54
9001e75c:	4367      	muls	r7, r4
9001e75e:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
9001e760:	ea4f 2c17 	mov.w	ip, r7, lsr #8
9001e764:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
9001e768:	9c15      	ldr	r4, [sp, #84]	@ 0x54
9001e76a:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
9001e76e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
9001e772:	fb04 fa0a 	mul.w	sl, r4, sl
9001e776:	44bc      	add	ip, r7
9001e778:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
9001e77c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001e780:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
9001e784:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
9001e788:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9001e78c:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
9001e790:	ea4c 040a 	orr.w	r4, ip, sl
9001e794:	940e      	str	r4, [sp, #56]	@ 0x38
9001e796:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
9001e798:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
9001e79c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
9001e7a0:	43d2      	mvns	r2, r2
9001e7a2:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
9001e7a6:	9c09      	ldr	r4, [sp, #36]	@ 0x24
9001e7a8:	b2d2      	uxtb	r2, r2
9001e7aa:	fb0e f707 	mul.w	r7, lr, r7
9001e7ae:	fb01 770c 	mla	r7, r1, ip, r7
9001e7b2:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
9001e7b6:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
9001e7b8:	fb00 770c 	mla	r7, r0, ip, r7
9001e7bc:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
9001e7c0:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
9001e7c2:	fb08 770c 	mla	r7, r8, ip, r7
9001e7c6:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
9001e7ca:	fb0e fe0c 	mul.w	lr, lr, ip
9001e7ce:	0a3f      	lsrs	r7, r7, #8
9001e7d0:	fb01 e303 	mla	r3, r1, r3, lr
9001e7d4:	9909      	ldr	r1, [sp, #36]	@ 0x24
9001e7d6:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
9001e7da:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
9001e7de:	990e      	ldr	r1, [sp, #56]	@ 0x38
9001e7e0:	fb00 330a 	mla	r3, r0, sl, r3
9001e7e4:	f401 4c7f 	and.w	ip, r1, #65280	@ 0xff00
9001e7e8:	fb08 3c0c 	mla	ip, r8, ip, r3
9001e7ec:	f8b9 3000 	ldrh.w	r3, [r9]
9001e7f0:	1218      	asrs	r0, r3, #8
9001e7f2:	10d9      	asrs	r1, r3, #3
9001e7f4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001e7f8:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
9001e7fc:	00db      	lsls	r3, r3, #3
9001e7fe:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
9001e802:	4350      	muls	r0, r2
9001e804:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
9001e808:	b2db      	uxtb	r3, r3
9001e80a:	4351      	muls	r1, r2
9001e80c:	ea47 070c 	orr.w	r7, r7, ip
9001e810:	4353      	muls	r3, r2
9001e812:	1c42      	adds	r2, r0, #1
9001e814:	eb02 2010 	add.w	r0, r2, r0, lsr #8
9001e818:	0c3a      	lsrs	r2, r7, #16
9001e81a:	eb02 2010 	add.w	r0, r2, r0, lsr #8
9001e81e:	4a18      	ldr	r2, [pc, #96]	@ (9001e880 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72c>)
9001e820:	b2c0      	uxtb	r0, r0
9001e822:	ea02 2000 	and.w	r0, r2, r0, lsl #8
9001e826:	1c4a      	adds	r2, r1, #1
9001e828:	eb02 2111 	add.w	r1, r2, r1, lsr #8
9001e82c:	0a3a      	lsrs	r2, r7, #8
9001e82e:	eb02 2111 	add.w	r1, r2, r1, lsr #8
9001e832:	00c9      	lsls	r1, r1, #3
9001e834:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
9001e838:	4301      	orrs	r1, r0
9001e83a:	1c58      	adds	r0, r3, #1
9001e83c:	eb00 2013 	add.w	r0, r0, r3, lsr #8
9001e840:	eb07 2710 	add.w	r7, r7, r0, lsr #8
9001e844:	f3c7 00c4 	ubfx	r0, r7, #3, #5
9001e848:	4308      	orrs	r0, r1
9001e84a:	f8a9 0000 	strh.w	r0, [r9]
9001e84e:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
9001e850:	f109 0902 	add.w	r9, r9, #2
9001e854:	9a25      	ldr	r2, [sp, #148]	@ 0x94
9001e856:	f10b 3bff 	add.w	fp, fp, #4294967295
9001e85a:	441a      	add	r2, r3
9001e85c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
9001e85e:	9225      	str	r2, [sp, #148]	@ 0x94
9001e860:	441d      	add	r5, r3
9001e862:	e64c      	b.n	9001e4fe <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
9001e864:	2800      	cmp	r0, #0
9001e866:	f43f aeed 	beq.w	9001e644 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
9001e86a:	5c79      	ldrb	r1, [r7, r1]
9001e86c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
9001e870:	9109      	str	r1, [sp, #36]	@ 0x24
9001e872:	0e09      	lsrs	r1, r1, #24
9001e874:	9111      	str	r1, [sp, #68]	@ 0x44
9001e876:	e6e5      	b.n	9001e644 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
9001e878:	b01b      	add	sp, #108	@ 0x6c
9001e87a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001e87e:	bf00      	nop
9001e880:	fffff800 	.word	0xfffff800

9001e884 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>:
9001e884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001e888:	b085      	sub	sp, #20
9001e88a:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
9001e88e:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	@ 0x38
9001e892:	2800      	cmp	r0, #0
9001e894:	9103      	str	r1, [sp, #12]
9001e896:	fb00 7406 	mla	r4, r0, r6, r7
9001e89a:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	@ 0x3c
9001e89e:	f89d 1048 	ldrb.w	r1, [sp, #72]	@ 0x48
9001e8a2:	eb02 0544 	add.w	r5, r2, r4, lsl #1
9001e8a6:	f89d e04c 	ldrb.w	lr, [sp, #76]	@ 0x4c
9001e8aa:	eb03 0904 	add.w	r9, r3, r4
9001e8ae:	9501      	str	r5, [sp, #4]
9001e8b0:	f2c0 8150 	blt.w	9001eb54 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
9001e8b4:	4583      	cmp	fp, r0
9001e8b6:	f340 814d 	ble.w	9001eb54 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
9001e8ba:	2f00      	cmp	r7, #0
9001e8bc:	f2c0 8146 	blt.w	9001eb4c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
9001e8c0:	42be      	cmp	r6, r7
9001e8c2:	f340 8143 	ble.w	9001eb4c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
9001e8c6:	f813 c004 	ldrb.w	ip, [r3, r4]
9001e8ca:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
9001e8ce:	f64f 041f 	movw	r4, #63519	@ 0xf81f
9001e8d2:	ea4f 02ec 	mov.w	r2, ip, asr #3
9001e8d6:	f423 65fc 	bic.w	r5, r3, #2016	@ 0x7e0
9001e8da:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
9001e8de:	4355      	muls	r5, r2
9001e8e0:	fb0c f203 	mul.w	r2, ip, r3
9001e8e4:	ea04 1355 	and.w	r3, r4, r5, lsr #5
9001e8e8:	f605 0501 	addw	r5, r5, #2049	@ 0x801
9001e8ec:	441d      	add	r5, r3
9001e8ee:	f102 0320 	add.w	r3, r2, #32
9001e8f2:	eb03 2312 	add.w	r3, r3, r2, lsr #8
9001e8f6:	ea04 1455 	and.w	r4, r4, r5, lsr #5
9001e8fa:	0a1b      	lsrs	r3, r3, #8
9001e8fc:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
9001e900:	431c      	orrs	r4, r3
9001e902:	1c7b      	adds	r3, r7, #1
9001e904:	f100 812b 	bmi.w	9001eb5e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
9001e908:	429e      	cmp	r6, r3
9001e90a:	f340 8128 	ble.w	9001eb5e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
9001e90e:	2900      	cmp	r1, #0
9001e910:	f000 8128 	beq.w	9001eb64 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e0>
9001e914:	9a01      	ldr	r2, [sp, #4]
9001e916:	f899 3001 	ldrb.w	r3, [r9, #1]
9001e91a:	8855      	ldrh	r5, [r2, #2]
9001e91c:	ea4f 08e3 	mov.w	r8, r3, asr #3
9001e920:	f425 62fc 	bic.w	r2, r5, #2016	@ 0x7e0
9001e924:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
9001e928:	fb08 f802 	mul.w	r8, r8, r2
9001e92c:	f64f 021f 	movw	r2, #63519	@ 0xf81f
9001e930:	435d      	muls	r5, r3
9001e932:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
9001e936:	f608 0801 	addw	r8, r8, #2049	@ 0x801
9001e93a:	44d0      	add	r8, sl
9001e93c:	f105 0a20 	add.w	sl, r5, #32
9001e940:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
9001e944:	ea02 1258 	and.w	r2, r2, r8, lsr #5
9001e948:	0a2d      	lsrs	r5, r5, #8
9001e94a:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
9001e94e:	432a      	orrs	r2, r5
9001e950:	3001      	adds	r0, #1
9001e952:	f100 810d 	bmi.w	9001eb70 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
9001e956:	4583      	cmp	fp, r0
9001e958:	f340 810a 	ble.w	9001eb70 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
9001e95c:	f1be 0f00 	cmp.w	lr, #0
9001e960:	f000 810b 	beq.w	9001eb7a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2f6>
9001e964:	2f00      	cmp	r7, #0
9001e966:	f2c0 8100 	blt.w	9001eb6a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
9001e96a:	42be      	cmp	r6, r7
9001e96c:	f340 80fd 	ble.w	9001eb6a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
9001e970:	9801      	ldr	r0, [sp, #4]
9001e972:	f64f 0b1f 	movw	fp, #63519	@ 0xf81f
9001e976:	f819 5006 	ldrb.w	r5, [r9, r6]
9001e97a:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
9001e97e:	ea4f 0ae5 	mov.w	sl, r5, asr #3
9001e982:	f428 60fc 	bic.w	r0, r8, #2016	@ 0x7e0
9001e986:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
9001e98a:	fb0a fa00 	mul.w	sl, sl, r0
9001e98e:	fb05 f808 	mul.w	r8, r5, r8
9001e992:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
9001e996:	f60a 0a01 	addw	sl, sl, #2049	@ 0x801
9001e99a:	4482      	add	sl, r0
9001e99c:	f108 0020 	add.w	r0, r8, #32
9001e9a0:	eb00 2018 	add.w	r0, r0, r8, lsr #8
9001e9a4:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
9001e9a8:	0a00      	lsrs	r0, r0, #8
9001e9aa:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
9001e9ae:	ea4b 0b00 	orr.w	fp, fp, r0
9001e9b2:	3701      	adds	r7, #1
9001e9b4:	f100 80e6 	bmi.w	9001eb84 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
9001e9b8:	42be      	cmp	r6, r7
9001e9ba:	f340 80e3 	ble.w	9001eb84 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
9001e9be:	2900      	cmp	r1, #0
9001e9c0:	f000 80e3 	beq.w	9001eb8a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x306>
9001e9c4:	3601      	adds	r6, #1
9001e9c6:	9801      	ldr	r0, [sp, #4]
9001e9c8:	f819 7006 	ldrb.w	r7, [r9, r6]
9001e9cc:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
9001e9d0:	ea4f 09e7 	mov.w	r9, r7, asr #3
9001e9d4:	f420 66fc 	bic.w	r6, r0, #2016	@ 0x7e0
9001e9d8:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
9001e9dc:	fb09 f906 	mul.w	r9, r9, r6
9001e9e0:	fb07 f800 	mul.w	r8, r7, r0
9001e9e4:	f64f 001f 	movw	r0, #63519	@ 0xf81f
9001e9e8:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
9001e9ec:	f609 0901 	addw	r9, r9, #2049	@ 0x801
9001e9f0:	44d1      	add	r9, sl
9001e9f2:	ea00 1659 	and.w	r6, r0, r9, lsr #5
9001e9f6:	f108 0020 	add.w	r0, r8, #32
9001e9fa:	eb00 2018 	add.w	r0, r0, r8, lsr #8
9001e9fe:	0a00      	lsrs	r0, r0, #8
9001ea00:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
9001ea04:	4330      	orrs	r0, r6
9001ea06:	b28e      	uxth	r6, r1
9001ea08:	fa1f f98e 	uxth.w	r9, lr
9001ea0c:	ea4f 4a04 	mov.w	sl, r4, lsl #16
9001ea10:	f424 64fc 	bic.w	r4, r4, #2016	@ 0x7e0
9001ea14:	fb06 f809 	mul.w	r8, r6, r9
9001ea18:	0136      	lsls	r6, r6, #4
9001ea1a:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
9001ea1e:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
9001ea22:	9601      	str	r6, [sp, #4]
9001ea24:	ea4a 0404 	orr.w	r4, sl, r4
9001ea28:	ea4f 4a02 	mov.w	sl, r2, lsl #16
9001ea2c:	fa1f f689 	uxth.w	r6, r9
9001ea30:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
9001ea34:	fb11 f90e 	smulbb	r9, r1, lr
9001ea38:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
9001ea3c:	9602      	str	r6, [sp, #8]
9001ea3e:	4626      	mov	r6, r4
9001ea40:	f3c9 09c7 	ubfx	r9, r9, #3, #8
9001ea44:	f1ce 0410 	rsb	r4, lr, #16
9001ea48:	ea4a 0202 	orr.w	r2, sl, r2
9001ea4c:	ea4f 4a00 	mov.w	sl, r0, lsl #16
9001ea50:	1a64      	subs	r4, r4, r1
9001ea52:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
9001ea56:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
9001ea5a:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
9001ea5e:	434a      	muls	r2, r1
9001ea60:	eb09 0444 	add.w	r4, r9, r4, lsl #1
9001ea64:	ea4a 0000 	orr.w	r0, sl, r0
9001ea68:	9903      	ldr	r1, [sp, #12]
9001ea6a:	fb04 2406 	mla	r4, r4, r6, r2
9001ea6e:	9e02      	ldr	r6, [sp, #8]
9001ea70:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
9001ea74:	fb09 4200 	mla	r2, r9, r0, r4
9001ea78:	ea4f 440b 	mov.w	r4, fp, lsl #16
9001ea7c:	f42b 6bfc 	bic.w	fp, fp, #2016	@ 0x7e0
9001ea80:	8808      	ldrh	r0, [r1, #0]
9001ea82:	f004 64fc 	and.w	r4, r4, #132120576	@ 0x7e00000
9001ea86:	f89d 1050 	ldrb.w	r1, [sp, #80]	@ 0x50
9001ea8a:	ea44 0b0b 	orr.w	fp, r4, fp
9001ea8e:	9c01      	ldr	r4, [sp, #4]
9001ea90:	b289      	uxth	r1, r1
9001ea92:	f5c4 7480 	rsb	r4, r4, #256	@ 0x100
9001ea96:	fb0e 2e0b 	mla	lr, lr, fp, r2
9001ea9a:	1ba4      	subs	r4, r4, r6
9001ea9c:	9e01      	ldr	r6, [sp, #4]
9001ea9e:	ea4f 525e 	mov.w	r2, lr, lsr #21
9001eaa2:	eba6 0608 	sub.w	r6, r6, r8
9001eaa6:	b2a4      	uxth	r4, r4
9001eaa8:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
9001eaac:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
9001eab0:	b2b6      	uxth	r6, r6
9001eab2:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
9001eab6:	4373      	muls	r3, r6
9001eab8:	ea42 0e0e 	orr.w	lr, r2, lr
9001eabc:	fb0c 3304 	mla	r3, ip, r4, r3
9001eac0:	9c02      	ldr	r4, [sp, #8]
9001eac2:	fa1f f28e 	uxth.w	r2, lr
9001eac6:	fb04 3505 	mla	r5, r4, r5, r3
9001eaca:	10d4      	asrs	r4, r2, #3
9001eacc:	fb08 5707 	mla	r7, r8, r7, r5
9001ead0:	1215      	asrs	r5, r2, #8
9001ead2:	f004 04fc 	and.w	r4, r4, #252	@ 0xfc
9001ead6:	00d2      	lsls	r2, r2, #3
9001ead8:	f3c7 2707 	ubfx	r7, r7, #8, #8
9001eadc:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
9001eae0:	b2d2      	uxtb	r2, r2
9001eae2:	434f      	muls	r7, r1
9001eae4:	1c7b      	adds	r3, r7, #1
9001eae6:	eb03 2717 	add.w	r7, r3, r7, lsr #8
9001eaea:	1203      	asrs	r3, r0, #8
9001eaec:	ea6f 2717 	mvn.w	r7, r7, lsr #8
9001eaf0:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
9001eaf4:	b2ff      	uxtb	r7, r7
9001eaf6:	fb13 f307 	smulbb	r3, r3, r7
9001eafa:	fb05 3501 	mla	r5, r5, r1, r3
9001eafe:	10c3      	asrs	r3, r0, #3
9001eb00:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
9001eb04:	b2ad      	uxth	r5, r5
9001eb06:	fb13 f307 	smulbb	r3, r3, r7
9001eb0a:	fb04 3401 	mla	r4, r4, r1, r3
9001eb0e:	00c3      	lsls	r3, r0, #3
9001eb10:	b2db      	uxtb	r3, r3
9001eb12:	b2a4      	uxth	r4, r4
9001eb14:	fb13 f307 	smulbb	r3, r3, r7
9001eb18:	fb02 3101 	mla	r1, r2, r1, r3
9001eb1c:	1c6b      	adds	r3, r5, #1
9001eb1e:	1c62      	adds	r2, r4, #1
9001eb20:	b289      	uxth	r1, r1
9001eb22:	eb03 2515 	add.w	r5, r3, r5, lsr #8
9001eb26:	1c4b      	adds	r3, r1, #1
9001eb28:	eb02 2414 	add.w	r4, r2, r4, lsr #8
9001eb2c:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
9001eb30:	9a03      	ldr	r2, [sp, #12]
9001eb32:	eb03 2311 	add.w	r3, r3, r1, lsr #8
9001eb36:	0964      	lsrs	r4, r4, #5
9001eb38:	f3c3 23c4 	ubfx	r3, r3, #11, #5
9001eb3c:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
9001eb40:	432b      	orrs	r3, r5
9001eb42:	4323      	orrs	r3, r4
9001eb44:	8013      	strh	r3, [r2, #0]
9001eb46:	b005      	add	sp, #20
9001eb48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001eb4c:	f04f 0c00 	mov.w	ip, #0
9001eb50:	4664      	mov	r4, ip
9001eb52:	e6d6      	b.n	9001e902 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x7e>
9001eb54:	2300      	movs	r3, #0
9001eb56:	469c      	mov	ip, r3
9001eb58:	461a      	mov	r2, r3
9001eb5a:	461c      	mov	r4, r3
9001eb5c:	e6f8      	b.n	9001e950 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
9001eb5e:	2300      	movs	r3, #0
9001eb60:	461a      	mov	r2, r3
9001eb62:	e6f5      	b.n	9001e950 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
9001eb64:	460b      	mov	r3, r1
9001eb66:	460a      	mov	r2, r1
9001eb68:	e6f2      	b.n	9001e950 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
9001eb6a:	2500      	movs	r5, #0
9001eb6c:	46ab      	mov	fp, r5
9001eb6e:	e720      	b.n	9001e9b2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x12e>
9001eb70:	2700      	movs	r7, #0
9001eb72:	463d      	mov	r5, r7
9001eb74:	4638      	mov	r0, r7
9001eb76:	46bb      	mov	fp, r7
9001eb78:	e745      	b.n	9001ea06 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
9001eb7a:	4677      	mov	r7, lr
9001eb7c:	4675      	mov	r5, lr
9001eb7e:	4670      	mov	r0, lr
9001eb80:	46f3      	mov	fp, lr
9001eb82:	e740      	b.n	9001ea06 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
9001eb84:	2700      	movs	r7, #0
9001eb86:	4638      	mov	r0, r7
9001eb88:	e73d      	b.n	9001ea06 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
9001eb8a:	460f      	mov	r7, r1
9001eb8c:	4608      	mov	r0, r1
9001eb8e:	e73a      	b.n	9001ea06 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>

9001eb90 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001eb90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001eb94:	b097      	sub	sp, #92	@ 0x5c
9001eb96:	9214      	str	r2, [sp, #80]	@ 0x50
9001eb98:	9308      	str	r3, [sp, #32]
9001eb9a:	9a25      	ldr	r2, [sp, #148]	@ 0x94
9001eb9c:	f89d 30a4 	ldrb.w	r3, [sp, #164]	@ 0xa4
9001eba0:	9015      	str	r0, [sp, #84]	@ 0x54
9001eba2:	9312      	str	r3, [sp, #72]	@ 0x48
9001eba4:	6850      	ldr	r0, [r2, #4]
9001eba6:	9111      	str	r1, [sp, #68]	@ 0x44
9001eba8:	6812      	ldr	r2, [r2, #0]
9001ebaa:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	@ 0x98
9001ebae:	fb00 1303 	mla	r3, r0, r3, r1
9001ebb2:	eb02 0343 	add.w	r3, r2, r3, lsl #1
9001ebb6:	9309      	str	r3, [sp, #36]	@ 0x24
9001ebb8:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
9001ebba:	681b      	ldr	r3, [r3, #0]
9001ebbc:	930b      	str	r3, [sp, #44]	@ 0x2c
9001ebbe:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
9001ebc0:	685b      	ldr	r3, [r3, #4]
9001ebc2:	930c      	str	r3, [sp, #48]	@ 0x30
9001ebc4:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
9001ebc8:	930a      	str	r3, [sp, #40]	@ 0x28
9001ebca:	9b11      	ldr	r3, [sp, #68]	@ 0x44
9001ebcc:	2b00      	cmp	r3, #0
9001ebce:	dc03      	bgt.n	9001ebd8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
9001ebd0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
9001ebd2:	2b00      	cmp	r3, #0
9001ebd4:	f340 83cd 	ble.w	9001f372 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e2>
9001ebd8:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
9001ebda:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
9001ebde:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
9001ebe2:	1e48      	subs	r0, r1, #1
9001ebe4:	1e55      	subs	r5, r2, #1
9001ebe6:	9b08      	ldr	r3, [sp, #32]
9001ebe8:	2b00      	cmp	r3, #0
9001ebea:	f340 81a5 	ble.w	9001ef38 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
9001ebee:	9e21      	ldr	r6, [sp, #132]	@ 0x84
9001ebf0:	9b22      	ldr	r3, [sp, #136]	@ 0x88
9001ebf2:	1436      	asrs	r6, r6, #16
9001ebf4:	ea4f 4323 	mov.w	r3, r3, asr #16
9001ebf8:	d406      	bmi.n	9001ec08 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
9001ebfa:	4286      	cmp	r6, r0
9001ebfc:	da04      	bge.n	9001ec08 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
9001ebfe:	2b00      	cmp	r3, #0
9001ec00:	db02      	blt.n	9001ec08 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
9001ec02:	42ab      	cmp	r3, r5
9001ec04:	f2c0 8199 	blt.w	9001ef3a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
9001ec08:	3601      	adds	r6, #1
9001ec0a:	f100 8186 	bmi.w	9001ef1a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
9001ec0e:	42b1      	cmp	r1, r6
9001ec10:	f2c0 8183 	blt.w	9001ef1a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
9001ec14:	3301      	adds	r3, #1
9001ec16:	f100 8180 	bmi.w	9001ef1a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
9001ec1a:	429a      	cmp	r2, r3
9001ec1c:	f2c0 817d 	blt.w	9001ef1a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
9001ec20:	9b08      	ldr	r3, [sp, #32]
9001ec22:	f64f 061f 	movw	r6, #63519	@ 0xf81f
9001ec26:	9f09      	ldr	r7, [sp, #36]	@ 0x24
9001ec28:	9313      	str	r3, [sp, #76]	@ 0x4c
9001ec2a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
9001ec2c:	2b00      	cmp	r3, #0
9001ec2e:	f340 81a6 	ble.w	9001ef7e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
9001ec32:	9b22      	ldr	r3, [sp, #136]	@ 0x88
9001ec34:	9d21      	ldr	r5, [sp, #132]	@ 0x84
9001ec36:	1418      	asrs	r0, r3, #16
9001ec38:	9b21      	ldr	r3, [sp, #132]	@ 0x84
9001ec3a:	142d      	asrs	r5, r5, #16
9001ec3c:	f3c3 3103 	ubfx	r1, r3, #12, #4
9001ec40:	9b22      	ldr	r3, [sp, #136]	@ 0x88
9001ec42:	f3c3 3c03 	ubfx	ip, r3, #12, #4
9001ec46:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
9001ec48:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
9001ec4c:	f100 81fa 	bmi.w	9001f044 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
9001ec50:	f102 3eff 	add.w	lr, r2, #4294967295
9001ec54:	4575      	cmp	r5, lr
9001ec56:	f280 81f5 	bge.w	9001f044 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
9001ec5a:	2800      	cmp	r0, #0
9001ec5c:	f2c0 81f2 	blt.w	9001f044 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
9001ec60:	f103 3eff 	add.w	lr, r3, #4294967295
9001ec64:	4570      	cmp	r0, lr
9001ec66:	f280 81ed 	bge.w	9001f044 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
9001ec6a:	b212      	sxth	r2, r2
9001ec6c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
9001ec6e:	fa1f fe81 	uxth.w	lr, r1
9001ec72:	fb00 5002 	mla	r0, r0, r2, r5
9001ec76:	ea4f 150e 	mov.w	r5, lr, lsl #4
9001ec7a:	eb03 0a00 	add.w	sl, r3, r0
9001ec7e:	f813 9000 	ldrb.w	r9, [r3, r0]
9001ec82:	f5c5 7380 	rsb	r3, r5, #256	@ 0x100
9001ec86:	f89a 8001 	ldrb.w	r8, [sl, #1]
9001ec8a:	b29b      	uxth	r3, r3
9001ec8c:	f1bc 0f00 	cmp.w	ip, #0
9001ec90:	f000 81bb 	beq.w	9001f00a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
9001ec94:	f81a 4002 	ldrb.w	r4, [sl, r2]
9001ec98:	eb0a 0b02 	add.w	fp, sl, r2
9001ec9c:	fa1f fa8c 	uxth.w	sl, ip
9001eca0:	940d      	str	r4, [sp, #52]	@ 0x34
9001eca2:	fb0a fe0e 	mul.w	lr, sl, lr
9001eca6:	f89b 4001 	ldrb.w	r4, [fp, #1]
9001ecaa:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
9001ecae:	eba5 050e 	sub.w	r5, r5, lr
9001ecb2:	940e      	str	r4, [sp, #56]	@ 0x38
9001ecb4:	fa1f fa8a 	uxth.w	sl, sl
9001ecb8:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
9001ecba:	b2ad      	uxth	r5, r5
9001ecbc:	eba3 030a 	sub.w	r3, r3, sl
9001ecc0:	fb08 f505 	mul.w	r5, r8, r5
9001ecc4:	b29b      	uxth	r3, r3
9001ecc6:	fb09 5303 	mla	r3, r9, r3, r5
9001ecca:	fb0a 3304 	mla	r3, sl, r4, r3
9001ecce:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
9001ecd0:	fb0e 3304 	mla	r3, lr, r4, r3
9001ecd4:	f3c3 2307 	ubfx	r3, r3, #8, #8
9001ecd8:	2b00      	cmp	r3, #0
9001ecda:	f000 8111 	beq.w	9001ef00 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
9001ecde:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
9001ece0:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
9001ece4:	eb04 0540 	add.w	r5, r4, r0, lsl #1
9001ece8:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
9001ecec:	f000 8192 	beq.w	9001f014 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>
9001ecf0:	f420 6efc 	bic.w	lr, r0, #2016	@ 0x7e0
9001ecf4:	ea4f 0ae9 	mov.w	sl, r9, asr #3
9001ecf8:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
9001ecfc:	fb0a fe0e 	mul.w	lr, sl, lr
9001ed00:	fb09 f000 	mul.w	r0, r9, r0
9001ed04:	ea06 195e 	and.w	r9, r6, lr, lsr #5
9001ed08:	f60e 0e01 	addw	lr, lr, #2049	@ 0x801
9001ed0c:	f100 0b20 	add.w	fp, r0, #32
9001ed10:	44ce      	add	lr, r9
9001ed12:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
9001ed16:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
9001ed1a:	ea4f 2919 	mov.w	r9, r9, lsr #8
9001ed1e:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
9001ed22:	ea4e 0909 	orr.w	r9, lr, r9
9001ed26:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
9001ed2a:	8868      	ldrh	r0, [r5, #2]
9001ed2c:	d019      	beq.n	9001ed62 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
9001ed2e:	f420 6efc 	bic.w	lr, r0, #2016	@ 0x7e0
9001ed32:	ea4f 0ae8 	mov.w	sl, r8, asr #3
9001ed36:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
9001ed3a:	fb0a fe0e 	mul.w	lr, sl, lr
9001ed3e:	fb08 f800 	mul.w	r8, r8, r0
9001ed42:	ea06 105e 	and.w	r0, r6, lr, lsr #5
9001ed46:	f60e 0e01 	addw	lr, lr, #2049	@ 0x801
9001ed4a:	f108 0b20 	add.w	fp, r8, #32
9001ed4e:	4486      	add	lr, r0
9001ed50:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
9001ed54:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
9001ed58:	0a00      	lsrs	r0, r0, #8
9001ed5a:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
9001ed5e:	ea4e 0000 	orr.w	r0, lr, r0
9001ed62:	ea4f 4e09 	mov.w	lr, r9, lsl #16
9001ed66:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
9001ed6a:	ea4f 4a00 	mov.w	sl, r0, lsl #16
9001ed6e:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
9001ed72:	f00e 6efc 	and.w	lr, lr, #132120576	@ 0x7e00000
9001ed76:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
9001ed7a:	ea4e 0909 	orr.w	r9, lr, r9
9001ed7e:	ea4a 0000 	orr.w	r0, sl, r0
9001ed82:	f1bc 0f00 	cmp.w	ip, #0
9001ed86:	f000 8147 	beq.w	9001f018 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
9001ed8a:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
9001ed8e:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
9001ed90:	3a01      	subs	r2, #1
9001ed92:	2cff      	cmp	r4, #255	@ 0xff
9001ed94:	ea4f 0242 	mov.w	r2, r2, lsl #1
9001ed98:	f102 0202 	add.w	r2, r2, #2
9001ed9c:	eb05 0e02 	add.w	lr, r5, r2
9001eda0:	5aaa      	ldrh	r2, [r5, r2]
9001eda2:	d018      	beq.n	9001edd6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
9001eda4:	f422 65fc 	bic.w	r5, r2, #2016	@ 0x7e0
9001eda8:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
9001edac:	ea4f 08e4 	mov.w	r8, r4, asr #3
9001edb0:	fb04 fa02 	mul.w	sl, r4, r2
9001edb4:	fb08 f805 	mul.w	r8, r8, r5
9001edb8:	f10a 0520 	add.w	r5, sl, #32
9001edbc:	ea06 1258 	and.w	r2, r6, r8, lsr #5
9001edc0:	f608 0801 	addw	r8, r8, #2049	@ 0x801
9001edc4:	eb05 251a 	add.w	r5, r5, sl, lsr #8
9001edc8:	4442      	add	r2, r8
9001edca:	0a2d      	lsrs	r5, r5, #8
9001edcc:	ea06 1252 	and.w	r2, r6, r2, lsr #5
9001edd0:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
9001edd4:	432a      	orrs	r2, r5
9001edd6:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
9001edd8:	f8be 5002 	ldrh.w	r5, [lr, #2]
9001eddc:	2cff      	cmp	r4, #255	@ 0xff
9001edde:	d01a      	beq.n	9001ee16 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x286>
9001ede0:	f425 6efc 	bic.w	lr, r5, #2016	@ 0x7e0
9001ede4:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
9001ede8:	ea4f 08e4 	mov.w	r8, r4, asr #3
9001edec:	fb04 fa05 	mul.w	sl, r4, r5
9001edf0:	fb08 f80e 	mul.w	r8, r8, lr
9001edf4:	f10a 0e20 	add.w	lr, sl, #32
9001edf8:	ea06 1558 	and.w	r5, r6, r8, lsr #5
9001edfc:	f608 0801 	addw	r8, r8, #2049	@ 0x801
9001ee00:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
9001ee04:	4445      	add	r5, r8
9001ee06:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
9001ee0a:	ea06 1555 	and.w	r5, r6, r5, lsr #5
9001ee0e:	f40e 6efc 	and.w	lr, lr, #2016	@ 0x7e0
9001ee12:	ea45 050e 	orr.w	r5, r5, lr
9001ee16:	fb1c fe01 	smulbb	lr, ip, r1
9001ee1a:	f1cc 0810 	rsb	r8, ip, #16
9001ee1e:	ea4f 4a02 	mov.w	sl, r2, lsl #16
9001ee22:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
9001ee26:	ea4f 0eee 	mov.w	lr, lr, asr #3
9001ee2a:	eba8 0801 	sub.w	r8, r8, r1
9001ee2e:	ea4f 4b05 	mov.w	fp, r5, lsl #16
9001ee32:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
9001ee36:	ebce 0141 	rsb	r1, lr, r1, lsl #1
9001ee3a:	f425 65fc 	bic.w	r5, r5, #2016	@ 0x7e0
9001ee3e:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
9001ee42:	ea4a 0202 	orr.w	r2, sl, r2
9001ee46:	4341      	muls	r1, r0
9001ee48:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
9001ee4c:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
9001ee50:	fb09 1108 	mla	r1, r9, r8, r1
9001ee54:	ea4b 0505 	orr.w	r5, fp, r5
9001ee58:	fb0c 1102 	mla	r1, ip, r2, r1
9001ee5c:	fb0e 1e05 	mla	lr, lr, r5, r1
9001ee60:	ea4f 525e 	mov.w	r2, lr, lsr #21
9001ee64:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
9001ee68:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
9001ee6c:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
9001ee70:	ea42 0e0e 	orr.w	lr, r2, lr
9001ee74:	fa1f f28e 	uxth.w	r2, lr
9001ee78:	2bff      	cmp	r3, #255	@ 0xff
9001ee7a:	d103      	bne.n	9001ee84 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
9001ee7c:	9912      	ldr	r1, [sp, #72]	@ 0x48
9001ee7e:	29ff      	cmp	r1, #255	@ 0xff
9001ee80:	f000 80de 	beq.w	9001f040 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
9001ee84:	990a      	ldr	r1, [sp, #40]	@ 0x28
9001ee86:	1215      	asrs	r5, r2, #8
9001ee88:	8838      	ldrh	r0, [r7, #0]
9001ee8a:	434b      	muls	r3, r1
9001ee8c:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
9001ee90:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
9001ee92:	f103 0c01 	add.w	ip, r3, #1
9001ee96:	eb0c 2323 	add.w	r3, ip, r3, asr #8
9001ee9a:	ea6f 2323 	mvn.w	r3, r3, asr #8
9001ee9e:	fa5f fc83 	uxtb.w	ip, r3
9001eea2:	1203      	asrs	r3, r0, #8
9001eea4:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
9001eea8:	fb13 f30c 	smulbb	r3, r3, ip
9001eeac:	fb05 3501 	mla	r5, r5, r1, r3
9001eeb0:	10c3      	asrs	r3, r0, #3
9001eeb2:	10d1      	asrs	r1, r2, #3
9001eeb4:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
9001eeb8:	00d2      	lsls	r2, r2, #3
9001eeba:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
9001eebe:	b2ad      	uxth	r5, r5
9001eec0:	fb13 f30c 	smulbb	r3, r3, ip
9001eec4:	b2d2      	uxtb	r2, r2
9001eec6:	fb01 3104 	mla	r1, r1, r4, r3
9001eeca:	00c3      	lsls	r3, r0, #3
9001eecc:	b2db      	uxtb	r3, r3
9001eece:	b289      	uxth	r1, r1
9001eed0:	fb13 f30c 	smulbb	r3, r3, ip
9001eed4:	fb02 3304 	mla	r3, r2, r4, r3
9001eed8:	b29a      	uxth	r2, r3
9001eeda:	1c6b      	adds	r3, r5, #1
9001eedc:	eb03 2515 	add.w	r5, r3, r5, lsr #8
9001eee0:	1c53      	adds	r3, r2, #1
9001eee2:	eb03 2312 	add.w	r3, r3, r2, lsr #8
9001eee6:	1c4a      	adds	r2, r1, #1
9001eee8:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
9001eeec:	eb02 2111 	add.w	r1, r2, r1, lsr #8
9001eef0:	f3c3 23c4 	ubfx	r3, r3, #11, #5
9001eef4:	0949      	lsrs	r1, r1, #5
9001eef6:	432b      	orrs	r3, r5
9001eef8:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
9001eefc:	430b      	orrs	r3, r1
9001eefe:	803b      	strh	r3, [r7, #0]
9001ef00:	9b21      	ldr	r3, [sp, #132]	@ 0x84
9001ef02:	3702      	adds	r7, #2
9001ef04:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
9001ef06:	4413      	add	r3, r2
9001ef08:	9a22      	ldr	r2, [sp, #136]	@ 0x88
9001ef0a:	9321      	str	r3, [sp, #132]	@ 0x84
9001ef0c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
9001ef0e:	441a      	add	r2, r3
9001ef10:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
9001ef12:	3b01      	subs	r3, #1
9001ef14:	9222      	str	r2, [sp, #136]	@ 0x88
9001ef16:	9313      	str	r3, [sp, #76]	@ 0x4c
9001ef18:	e687      	b.n	9001ec2a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
9001ef1a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
9001ef1c:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
9001ef1e:	9c22      	ldr	r4, [sp, #136]	@ 0x88
9001ef20:	4433      	add	r3, r6
9001ef22:	9321      	str	r3, [sp, #132]	@ 0x84
9001ef24:	9b24      	ldr	r3, [sp, #144]	@ 0x90
9001ef26:	441c      	add	r4, r3
9001ef28:	9b08      	ldr	r3, [sp, #32]
9001ef2a:	3b01      	subs	r3, #1
9001ef2c:	9422      	str	r4, [sp, #136]	@ 0x88
9001ef2e:	9308      	str	r3, [sp, #32]
9001ef30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
9001ef32:	3302      	adds	r3, #2
9001ef34:	9309      	str	r3, [sp, #36]	@ 0x24
9001ef36:	e656      	b.n	9001ebe6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
9001ef38:	d028      	beq.n	9001ef8c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fc>
9001ef3a:	9b08      	ldr	r3, [sp, #32]
9001ef3c:	9823      	ldr	r0, [sp, #140]	@ 0x8c
9001ef3e:	3b01      	subs	r3, #1
9001ef40:	9d21      	ldr	r5, [sp, #132]	@ 0x84
9001ef42:	fb00 5003 	mla	r0, r0, r3, r5
9001ef46:	1400      	asrs	r0, r0, #16
9001ef48:	f53f ae6a 	bmi.w	9001ec20 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
9001ef4c:	3901      	subs	r1, #1
9001ef4e:	4288      	cmp	r0, r1
9001ef50:	f6bf ae66 	bge.w	9001ec20 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
9001ef54:	9924      	ldr	r1, [sp, #144]	@ 0x90
9001ef56:	9822      	ldr	r0, [sp, #136]	@ 0x88
9001ef58:	fb01 0303 	mla	r3, r1, r3, r0
9001ef5c:	141b      	asrs	r3, r3, #16
9001ef5e:	f53f ae5f 	bmi.w	9001ec20 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
9001ef62:	3a01      	subs	r2, #1
9001ef64:	4293      	cmp	r3, r2
9001ef66:	f6bf ae5b 	bge.w	9001ec20 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
9001ef6a:	9b08      	ldr	r3, [sp, #32]
9001ef6c:	f64f 061f 	movw	r6, #63519	@ 0xf81f
9001ef70:	f8dd e024 	ldr.w	lr, [sp, #36]	@ 0x24
9001ef74:	9313      	str	r3, [sp, #76]	@ 0x4c
9001ef76:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
9001ef78:	2b00      	cmp	r3, #0
9001ef7a:	f300 8082 	bgt.w	9001f082 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f2>
9001ef7e:	9b08      	ldr	r3, [sp, #32]
9001ef80:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
9001ef84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
9001ef86:	eb03 0344 	add.w	r3, r3, r4, lsl #1
9001ef8a:	9309      	str	r3, [sp, #36]	@ 0x24
9001ef8c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
9001ef8e:	2b00      	cmp	r3, #0
9001ef90:	f340 81ef 	ble.w	9001f372 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e2>
9001ef94:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
9001ef98:	9b20      	ldr	r3, [sp, #128]	@ 0x80
9001ef9a:	ee30 0a04 	vadd.f32	s0, s0, s8
9001ef9e:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001efa2:	eef0 6a62 	vmov.f32	s13, s5
9001efa6:	eec7 7a00 	vdiv.f32	s15, s14, s0
9001efaa:	ee31 1a05 	vadd.f32	s2, s2, s10
9001efae:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001efb2:	edcd 6a21 	vstr	s13, [sp, #132]	@ 0x84
9001efb6:	eef0 6a43 	vmov.f32	s13, s6
9001efba:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001efbe:	edcd 6a22 	vstr	s13, [sp, #136]	@ 0x88
9001efc2:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001efc6:	ee61 7a27 	vmul.f32	s15, s2, s15
9001efca:	ee77 2a62 	vsub.f32	s5, s14, s5
9001efce:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001efd2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001efd6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001efda:	ee12 2a90 	vmov	r2, s5
9001efde:	eef0 2a47 	vmov.f32	s5, s14
9001efe2:	fb92 f3f3 	sdiv	r3, r2, r3
9001efe6:	ee13 2a10 	vmov	r2, s6
9001efea:	9323      	str	r3, [sp, #140]	@ 0x8c
9001efec:	9b20      	ldr	r3, [sp, #128]	@ 0x80
9001efee:	eeb0 3a67 	vmov.f32	s6, s15
9001eff2:	fb92 f3f3 	sdiv	r3, r2, r3
9001eff6:	9324      	str	r3, [sp, #144]	@ 0x90
9001eff8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
9001effa:	9a14      	ldr	r2, [sp, #80]	@ 0x50
9001effc:	3b01      	subs	r3, #1
9001effe:	9311      	str	r3, [sp, #68]	@ 0x44
9001f000:	9b20      	ldr	r3, [sp, #128]	@ 0x80
9001f002:	bf08      	it	eq
9001f004:	4613      	moveq	r3, r2
9001f006:	9308      	str	r3, [sp, #32]
9001f008:	e5df      	b.n	9001ebca <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
9001f00a:	fb08 f505 	mul.w	r5, r8, r5
9001f00e:	fb09 5303 	mla	r3, r9, r3, r5
9001f012:	e65f      	b.n	9001ecd4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x144>
9001f014:	4681      	mov	r9, r0
9001f016:	e686      	b.n	9001ed26 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
9001f018:	f1c1 0210 	rsb	r2, r1, #16
9001f01c:	4341      	muls	r1, r0
9001f01e:	fb09 1902 	mla	r9, r9, r2, r1
9001f022:	ea4f 0949 	mov.w	r9, r9, lsl #1
9001f026:	ea4f 5259 	mov.w	r2, r9, lsr #21
9001f02a:	ea4f 1959 	mov.w	r9, r9, lsr #5
9001f02e:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
9001f032:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
9001f036:	ea42 0909 	orr.w	r9, r2, r9
9001f03a:	fa1f f289 	uxth.w	r2, r9
9001f03e:	e71b      	b.n	9001ee78 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
9001f040:	803a      	strh	r2, [r7, #0]
9001f042:	e75d      	b.n	9001ef00 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
9001f044:	f115 0e01 	adds.w	lr, r5, #1
9001f048:	f53f af5a 	bmi.w	9001ef00 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
9001f04c:	4572      	cmp	r2, lr
9001f04e:	f6ff af57 	blt.w	9001ef00 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
9001f052:	f110 0e01 	adds.w	lr, r0, #1
9001f056:	f53f af53 	bmi.w	9001ef00 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
9001f05a:	4573      	cmp	r3, lr
9001f05c:	f6ff af50 	blt.w	9001ef00 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
9001f060:	9c12      	ldr	r4, [sp, #72]	@ 0x48
9001f062:	b21b      	sxth	r3, r3
9001f064:	b212      	sxth	r2, r2
9001f066:	9502      	str	r5, [sp, #8]
9001f068:	9301      	str	r3, [sp, #4]
9001f06a:	9200      	str	r2, [sp, #0]
9001f06c:	e9cd 0103 	strd	r0, r1, [sp, #12]
9001f070:	e9cd c405 	strd	ip, r4, [sp, #20]
9001f074:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	@ 0x2c
9001f078:	4639      	mov	r1, r7
9001f07a:	9815      	ldr	r0, [sp, #84]	@ 0x54
9001f07c:	f7ff fc02 	bl	9001e884 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>
9001f080:	e73e      	b.n	9001ef00 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
9001f082:	9b21      	ldr	r3, [sp, #132]	@ 0x84
9001f084:	f3c3 3203 	ubfx	r2, r3, #12, #4
9001f088:	9b22      	ldr	r3, [sp, #136]	@ 0x88
9001f08a:	f3c3 3503 	ubfx	r5, r3, #12, #4
9001f08e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
9001f090:	fa1f fc82 	uxth.w	ip, r2
9001f094:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
9001f098:	9b22      	ldr	r3, [sp, #136]	@ 0x88
9001f09a:	ea4f 100c 	mov.w	r0, ip, lsl #4
9001f09e:	141f      	asrs	r7, r3, #16
9001f0a0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
9001f0a2:	141b      	asrs	r3, r3, #16
9001f0a4:	fb01 3707 	mla	r7, r1, r7, r3
9001f0a8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
9001f0aa:	eb03 0a07 	add.w	sl, r3, r7
9001f0ae:	f813 9007 	ldrb.w	r9, [r3, r7]
9001f0b2:	f5c0 7380 	rsb	r3, r0, #256	@ 0x100
9001f0b6:	f89a 8001 	ldrb.w	r8, [sl, #1]
9001f0ba:	b29b      	uxth	r3, r3
9001f0bc:	2d00      	cmp	r5, #0
9001f0be:	f000 813d 	beq.w	9001f33c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ac>
9001f0c2:	f81a 4001 	ldrb.w	r4, [sl, r1]
9001f0c6:	eb0a 0b01 	add.w	fp, sl, r1
9001f0ca:	fa1f fa85 	uxth.w	sl, r5
9001f0ce:	940f      	str	r4, [sp, #60]	@ 0x3c
9001f0d0:	fb0a fc0c 	mul.w	ip, sl, ip
9001f0d4:	f89b 4001 	ldrb.w	r4, [fp, #1]
9001f0d8:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
9001f0dc:	eba0 000c 	sub.w	r0, r0, ip
9001f0e0:	9410      	str	r4, [sp, #64]	@ 0x40
9001f0e2:	fa1f fa8a 	uxth.w	sl, sl
9001f0e6:	b280      	uxth	r0, r0
9001f0e8:	eba3 030a 	sub.w	r3, r3, sl
9001f0ec:	fb08 f000 	mul.w	r0, r8, r0
9001f0f0:	b29b      	uxth	r3, r3
9001f0f2:	fb09 0303 	mla	r3, r9, r3, r0
9001f0f6:	980f      	ldr	r0, [sp, #60]	@ 0x3c
9001f0f8:	fb0a 3300 	mla	r3, sl, r0, r3
9001f0fc:	fb0c 3304 	mla	r3, ip, r4, r3
9001f100:	f3c3 2307 	ubfx	r3, r3, #8, #8
9001f104:	2b00      	cmp	r3, #0
9001f106:	f000 810b 	beq.w	9001f320 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x790>
9001f10a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
9001f10c:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
9001f110:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
9001f112:	eb00 0047 	add.w	r0, r0, r7, lsl #1
9001f116:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
9001f11a:	f000 8114 	beq.w	9001f346 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b6>
9001f11e:	f427 6cfc 	bic.w	ip, r7, #2016	@ 0x7e0
9001f122:	ea4f 0ae9 	mov.w	sl, r9, asr #3
9001f126:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
9001f12a:	fb0a fc0c 	mul.w	ip, sl, ip
9001f12e:	fb09 f707 	mul.w	r7, r9, r7
9001f132:	ea06 195c 	and.w	r9, r6, ip, lsr #5
9001f136:	f60c 0c01 	addw	ip, ip, #2049	@ 0x801
9001f13a:	f107 0b20 	add.w	fp, r7, #32
9001f13e:	44cc      	add	ip, r9
9001f140:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
9001f144:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
9001f148:	ea4f 2919 	mov.w	r9, r9, lsr #8
9001f14c:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
9001f150:	ea4c 0909 	orr.w	r9, ip, r9
9001f154:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
9001f158:	8847      	ldrh	r7, [r0, #2]
9001f15a:	d019      	beq.n	9001f190 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x600>
9001f15c:	f427 6cfc 	bic.w	ip, r7, #2016	@ 0x7e0
9001f160:	ea4f 0ae8 	mov.w	sl, r8, asr #3
9001f164:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
9001f168:	fb0a fc0c 	mul.w	ip, sl, ip
9001f16c:	fb08 f807 	mul.w	r8, r8, r7
9001f170:	ea06 175c 	and.w	r7, r6, ip, lsr #5
9001f174:	f60c 0c01 	addw	ip, ip, #2049	@ 0x801
9001f178:	f108 0b20 	add.w	fp, r8, #32
9001f17c:	44bc      	add	ip, r7
9001f17e:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
9001f182:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
9001f186:	0a3f      	lsrs	r7, r7, #8
9001f188:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
9001f18c:	ea4c 0707 	orr.w	r7, ip, r7
9001f190:	ea4f 4c09 	mov.w	ip, r9, lsl #16
9001f194:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
9001f198:	ea4f 4a07 	mov.w	sl, r7, lsl #16
9001f19c:	f427 67fc 	bic.w	r7, r7, #2016	@ 0x7e0
9001f1a0:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
9001f1a4:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
9001f1a8:	ea4c 0909 	orr.w	r9, ip, r9
9001f1ac:	ea4a 0707 	orr.w	r7, sl, r7
9001f1b0:	2d00      	cmp	r5, #0
9001f1b2:	f000 80ca 	beq.w	9001f34a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ba>
9001f1b6:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
9001f1ba:	3901      	subs	r1, #1
9001f1bc:	0049      	lsls	r1, r1, #1
9001f1be:	3102      	adds	r1, #2
9001f1c0:	eb00 0c01 	add.w	ip, r0, r1
9001f1c4:	5a41      	ldrh	r1, [r0, r1]
9001f1c6:	980f      	ldr	r0, [sp, #60]	@ 0x3c
9001f1c8:	28ff      	cmp	r0, #255	@ 0xff
9001f1ca:	d019      	beq.n	9001f200 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x670>
9001f1cc:	f421 60fc 	bic.w	r0, r1, #2016	@ 0x7e0
9001f1d0:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
9001f1d2:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
9001f1d6:	ea4f 08e4 	mov.w	r8, r4, asr #3
9001f1da:	fb04 fa01 	mul.w	sl, r4, r1
9001f1de:	fb08 f800 	mul.w	r8, r8, r0
9001f1e2:	f10a 0020 	add.w	r0, sl, #32
9001f1e6:	ea06 1158 	and.w	r1, r6, r8, lsr #5
9001f1ea:	f608 0801 	addw	r8, r8, #2049	@ 0x801
9001f1ee:	eb00 201a 	add.w	r0, r0, sl, lsr #8
9001f1f2:	4441      	add	r1, r8
9001f1f4:	0a00      	lsrs	r0, r0, #8
9001f1f6:	ea06 1151 	and.w	r1, r6, r1, lsr #5
9001f1fa:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
9001f1fe:	4301      	orrs	r1, r0
9001f200:	9c10      	ldr	r4, [sp, #64]	@ 0x40
9001f202:	f8bc 0002 	ldrh.w	r0, [ip, #2]
9001f206:	2cff      	cmp	r4, #255	@ 0xff
9001f208:	d01a      	beq.n	9001f240 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b0>
9001f20a:	f420 6cfc 	bic.w	ip, r0, #2016	@ 0x7e0
9001f20e:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
9001f212:	ea4f 08e4 	mov.w	r8, r4, asr #3
9001f216:	fb04 fa00 	mul.w	sl, r4, r0
9001f21a:	fb08 f80c 	mul.w	r8, r8, ip
9001f21e:	f10a 0c20 	add.w	ip, sl, #32
9001f222:	ea06 1058 	and.w	r0, r6, r8, lsr #5
9001f226:	f608 0801 	addw	r8, r8, #2049	@ 0x801
9001f22a:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
9001f22e:	4440      	add	r0, r8
9001f230:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001f234:	ea06 1050 	and.w	r0, r6, r0, lsr #5
9001f238:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
9001f23c:	ea40 000c 	orr.w	r0, r0, ip
9001f240:	fb15 fc02 	smulbb	ip, r5, r2
9001f244:	f1c5 0810 	rsb	r8, r5, #16
9001f248:	ea4f 4a01 	mov.w	sl, r1, lsl #16
9001f24c:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
9001f250:	ea4f 0cec 	mov.w	ip, ip, asr #3
9001f254:	eba8 0802 	sub.w	r8, r8, r2
9001f258:	ea4f 4b00 	mov.w	fp, r0, lsl #16
9001f25c:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
9001f260:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
9001f264:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
9001f268:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
9001f26c:	ea4a 0101 	orr.w	r1, sl, r1
9001f270:	437a      	muls	r2, r7
9001f272:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
9001f276:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
9001f27a:	fb09 2208 	mla	r2, r9, r8, r2
9001f27e:	ea4b 0000 	orr.w	r0, fp, r0
9001f282:	fb05 2201 	mla	r2, r5, r1, r2
9001f286:	fb0c 2200 	mla	r2, ip, r0, r2
9001f28a:	0d57      	lsrs	r7, r2, #21
9001f28c:	0952      	lsrs	r2, r2, #5
9001f28e:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
9001f292:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
9001f296:	433a      	orrs	r2, r7
9001f298:	2bff      	cmp	r3, #255	@ 0xff
9001f29a:	b292      	uxth	r2, r2
9001f29c:	d102      	bne.n	9001f2a4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x714>
9001f29e:	9912      	ldr	r1, [sp, #72]	@ 0x48
9001f2a0:	29ff      	cmp	r1, #255	@ 0xff
9001f2a2:	d063      	beq.n	9001f36c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7dc>
9001f2a4:	980a      	ldr	r0, [sp, #40]	@ 0x28
9001f2a6:	1215      	asrs	r5, r2, #8
9001f2a8:	f8be 1000 	ldrh.w	r1, [lr]
9001f2ac:	4343      	muls	r3, r0
9001f2ae:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
9001f2b0:	10cf      	asrs	r7, r1, #3
9001f2b2:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
9001f2b6:	1c58      	adds	r0, r3, #1
9001f2b8:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
9001f2bc:	eb00 2323 	add.w	r3, r0, r3, asr #8
9001f2c0:	1208      	asrs	r0, r1, #8
9001f2c2:	ea6f 2323 	mvn.w	r3, r3, asr #8
9001f2c6:	00c9      	lsls	r1, r1, #3
9001f2c8:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
9001f2cc:	b2db      	uxtb	r3, r3
9001f2ce:	b2c9      	uxtb	r1, r1
9001f2d0:	fb10 f003 	smulbb	r0, r0, r3
9001f2d4:	fb11 f103 	smulbb	r1, r1, r3
9001f2d8:	fb05 0504 	mla	r5, r5, r4, r0
9001f2dc:	10d0      	asrs	r0, r2, #3
9001f2de:	fb17 f703 	smulbb	r7, r7, r3
9001f2e2:	00d2      	lsls	r2, r2, #3
9001f2e4:	b2ad      	uxth	r5, r5
9001f2e6:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
9001f2ea:	b2d2      	uxtb	r2, r2
9001f2ec:	fb00 7004 	mla	r0, r0, r4, r7
9001f2f0:	1c6b      	adds	r3, r5, #1
9001f2f2:	fb02 1204 	mla	r2, r2, r4, r1
9001f2f6:	eb03 2515 	add.w	r5, r3, r5, lsr #8
9001f2fa:	b292      	uxth	r2, r2
9001f2fc:	b280      	uxth	r0, r0
9001f2fe:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
9001f302:	1c57      	adds	r7, r2, #1
9001f304:	eb07 2712 	add.w	r7, r7, r2, lsr #8
9001f308:	f3c7 27c4 	ubfx	r7, r7, #11, #5
9001f30c:	433d      	orrs	r5, r7
9001f30e:	1c47      	adds	r7, r0, #1
9001f310:	eb07 2710 	add.w	r7, r7, r0, lsr #8
9001f314:	097f      	lsrs	r7, r7, #5
9001f316:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
9001f31a:	433d      	orrs	r5, r7
9001f31c:	f8ae 5000 	strh.w	r5, [lr]
9001f320:	9b21      	ldr	r3, [sp, #132]	@ 0x84
9001f322:	f10e 0e02 	add.w	lr, lr, #2
9001f326:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
9001f328:	4413      	add	r3, r2
9001f32a:	9a22      	ldr	r2, [sp, #136]	@ 0x88
9001f32c:	9321      	str	r3, [sp, #132]	@ 0x84
9001f32e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
9001f330:	441a      	add	r2, r3
9001f332:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
9001f334:	3b01      	subs	r3, #1
9001f336:	9222      	str	r2, [sp, #136]	@ 0x88
9001f338:	9313      	str	r3, [sp, #76]	@ 0x4c
9001f33a:	e61c      	b.n	9001ef76 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
9001f33c:	fb08 f000 	mul.w	r0, r8, r0
9001f340:	fb09 0303 	mla	r3, r9, r3, r0
9001f344:	e6dc      	b.n	9001f100 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x570>
9001f346:	46b9      	mov	r9, r7
9001f348:	e704      	b.n	9001f154 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c4>
9001f34a:	f1c2 0110 	rsb	r1, r2, #16
9001f34e:	437a      	muls	r2, r7
9001f350:	fb09 2901 	mla	r9, r9, r1, r2
9001f354:	ea4f 0949 	mov.w	r9, r9, lsl #1
9001f358:	ea4f 5059 	mov.w	r0, r9, lsr #21
9001f35c:	ea4f 1259 	mov.w	r2, r9, lsr #5
9001f360:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
9001f364:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
9001f368:	4302      	orrs	r2, r0
9001f36a:	e795      	b.n	9001f298 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x708>
9001f36c:	f8ae 2000 	strh.w	r2, [lr]
9001f370:	e7d6      	b.n	9001f320 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x790>
9001f372:	b017      	add	sp, #92	@ 0x5c
9001f374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

9001f378 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
9001f378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001f37c:	b085      	sub	sp, #20
9001f37e:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
9001f382:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	@ 0x38
9001f386:	2800      	cmp	r0, #0
9001f388:	9103      	str	r1, [sp, #12]
9001f38a:	fb00 7406 	mla	r4, r0, r6, r7
9001f38e:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	@ 0x3c
9001f392:	f89d 1048 	ldrb.w	r1, [sp, #72]	@ 0x48
9001f396:	eb03 0544 	add.w	r5, r3, r4, lsl #1
9001f39a:	f89d e04c 	ldrb.w	lr, [sp, #76]	@ 0x4c
9001f39e:	eb02 0904 	add.w	r9, r2, r4
9001f3a2:	9501      	str	r5, [sp, #4]
9001f3a4:	f2c0 8141 	blt.w	9001f62a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
9001f3a8:	4583      	cmp	fp, r0
9001f3aa:	f340 813e 	ble.w	9001f62a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
9001f3ae:	2f00      	cmp	r7, #0
9001f3b0:	f2c0 8137 	blt.w	9001f622 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
9001f3b4:	42be      	cmp	r6, r7
9001f3b6:	f340 8134 	ble.w	9001f622 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
9001f3ba:	f812 c004 	ldrb.w	ip, [r2, r4]
9001f3be:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
9001f3c2:	f64f 041f 	movw	r4, #63519	@ 0xf81f
9001f3c6:	ea4f 02ec 	mov.w	r2, ip, asr #3
9001f3ca:	f423 65fc 	bic.w	r5, r3, #2016	@ 0x7e0
9001f3ce:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
9001f3d2:	4355      	muls	r5, r2
9001f3d4:	fb0c f203 	mul.w	r2, ip, r3
9001f3d8:	ea04 1355 	and.w	r3, r4, r5, lsr #5
9001f3dc:	f605 0501 	addw	r5, r5, #2049	@ 0x801
9001f3e0:	441d      	add	r5, r3
9001f3e2:	f102 0320 	add.w	r3, r2, #32
9001f3e6:	eb03 2312 	add.w	r3, r3, r2, lsr #8
9001f3ea:	ea04 1455 	and.w	r4, r4, r5, lsr #5
9001f3ee:	0a1b      	lsrs	r3, r3, #8
9001f3f0:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
9001f3f4:	431c      	orrs	r4, r3
9001f3f6:	1c7b      	adds	r3, r7, #1
9001f3f8:	f100 811c 	bmi.w	9001f634 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
9001f3fc:	429e      	cmp	r6, r3
9001f3fe:	f340 8119 	ble.w	9001f634 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
9001f402:	2900      	cmp	r1, #0
9001f404:	f000 8119 	beq.w	9001f63a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c2>
9001f408:	9a01      	ldr	r2, [sp, #4]
9001f40a:	f899 3001 	ldrb.w	r3, [r9, #1]
9001f40e:	8855      	ldrh	r5, [r2, #2]
9001f410:	ea4f 08e3 	mov.w	r8, r3, asr #3
9001f414:	f425 62fc 	bic.w	r2, r5, #2016	@ 0x7e0
9001f418:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
9001f41c:	fb08 f802 	mul.w	r8, r8, r2
9001f420:	f64f 021f 	movw	r2, #63519	@ 0xf81f
9001f424:	435d      	muls	r5, r3
9001f426:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
9001f42a:	f608 0801 	addw	r8, r8, #2049	@ 0x801
9001f42e:	44d0      	add	r8, sl
9001f430:	f105 0a20 	add.w	sl, r5, #32
9001f434:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
9001f438:	ea02 1258 	and.w	r2, r2, r8, lsr #5
9001f43c:	0a2d      	lsrs	r5, r5, #8
9001f43e:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
9001f442:	432a      	orrs	r2, r5
9001f444:	3001      	adds	r0, #1
9001f446:	f100 80fe 	bmi.w	9001f646 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
9001f44a:	4583      	cmp	fp, r0
9001f44c:	f340 80fb 	ble.w	9001f646 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
9001f450:	f1be 0f00 	cmp.w	lr, #0
9001f454:	f000 80fc 	beq.w	9001f650 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2d8>
9001f458:	2f00      	cmp	r7, #0
9001f45a:	f2c0 80f1 	blt.w	9001f640 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
9001f45e:	42be      	cmp	r6, r7
9001f460:	f340 80ee 	ble.w	9001f640 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
9001f464:	9801      	ldr	r0, [sp, #4]
9001f466:	f64f 0b1f 	movw	fp, #63519	@ 0xf81f
9001f46a:	f819 5006 	ldrb.w	r5, [r9, r6]
9001f46e:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
9001f472:	ea4f 0ae5 	mov.w	sl, r5, asr #3
9001f476:	f428 60fc 	bic.w	r0, r8, #2016	@ 0x7e0
9001f47a:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
9001f47e:	fb0a fa00 	mul.w	sl, sl, r0
9001f482:	fb05 f808 	mul.w	r8, r5, r8
9001f486:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
9001f48a:	f60a 0a01 	addw	sl, sl, #2049	@ 0x801
9001f48e:	4482      	add	sl, r0
9001f490:	f108 0020 	add.w	r0, r8, #32
9001f494:	eb00 2018 	add.w	r0, r0, r8, lsr #8
9001f498:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
9001f49c:	0a00      	lsrs	r0, r0, #8
9001f49e:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
9001f4a2:	ea4b 0b00 	orr.w	fp, fp, r0
9001f4a6:	3701      	adds	r7, #1
9001f4a8:	f100 80d7 	bmi.w	9001f65a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
9001f4ac:	42be      	cmp	r6, r7
9001f4ae:	f340 80d4 	ble.w	9001f65a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
9001f4b2:	2900      	cmp	r1, #0
9001f4b4:	f000 80d4 	beq.w	9001f660 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e8>
9001f4b8:	3601      	adds	r6, #1
9001f4ba:	9801      	ldr	r0, [sp, #4]
9001f4bc:	f819 7006 	ldrb.w	r7, [r9, r6]
9001f4c0:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
9001f4c4:	ea4f 09e7 	mov.w	r9, r7, asr #3
9001f4c8:	f420 66fc 	bic.w	r6, r0, #2016	@ 0x7e0
9001f4cc:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
9001f4d0:	fb09 f906 	mul.w	r9, r9, r6
9001f4d4:	fb07 f800 	mul.w	r8, r7, r0
9001f4d8:	f64f 001f 	movw	r0, #63519	@ 0xf81f
9001f4dc:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
9001f4e0:	f609 0901 	addw	r9, r9, #2049	@ 0x801
9001f4e4:	44d1      	add	r9, sl
9001f4e6:	ea00 1659 	and.w	r6, r0, r9, lsr #5
9001f4ea:	f108 0020 	add.w	r0, r8, #32
9001f4ee:	eb00 2018 	add.w	r0, r0, r8, lsr #8
9001f4f2:	0a00      	lsrs	r0, r0, #8
9001f4f4:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
9001f4f8:	4330      	orrs	r0, r6
9001f4fa:	b28e      	uxth	r6, r1
9001f4fc:	fa1f f98e 	uxth.w	r9, lr
9001f500:	ea4f 4a04 	mov.w	sl, r4, lsl #16
9001f504:	f424 64fc 	bic.w	r4, r4, #2016	@ 0x7e0
9001f508:	fb06 f809 	mul.w	r8, r6, r9
9001f50c:	0136      	lsls	r6, r6, #4
9001f50e:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
9001f512:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
9001f516:	9601      	str	r6, [sp, #4]
9001f518:	ea4a 0404 	orr.w	r4, sl, r4
9001f51c:	ea4f 4a02 	mov.w	sl, r2, lsl #16
9001f520:	fa1f f689 	uxth.w	r6, r9
9001f524:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
9001f528:	fb11 f90e 	smulbb	r9, r1, lr
9001f52c:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
9001f530:	9602      	str	r6, [sp, #8]
9001f532:	4626      	mov	r6, r4
9001f534:	f3c9 09c7 	ubfx	r9, r9, #3, #8
9001f538:	f1ce 0410 	rsb	r4, lr, #16
9001f53c:	ea4a 0202 	orr.w	r2, sl, r2
9001f540:	ea4f 4a00 	mov.w	sl, r0, lsl #16
9001f544:	1a64      	subs	r4, r4, r1
9001f546:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
9001f54a:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
9001f54e:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
9001f552:	434a      	muls	r2, r1
9001f554:	eb09 0444 	add.w	r4, r9, r4, lsl #1
9001f558:	ea4a 0000 	orr.w	r0, sl, r0
9001f55c:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
9001f560:	fb04 2406 	mla	r4, r4, r6, r2
9001f564:	9903      	ldr	r1, [sp, #12]
9001f566:	fb09 4200 	mla	r2, r9, r0, r4
9001f56a:	ea4f 440b 	mov.w	r4, fp, lsl #16
9001f56e:	9801      	ldr	r0, [sp, #4]
9001f570:	f42b 6bfc 	bic.w	fp, fp, #2016	@ 0x7e0
9001f574:	f004 64fc 	and.w	r4, r4, #132120576	@ 0x7e00000
9001f578:	8809      	ldrh	r1, [r1, #0]
9001f57a:	f5c0 7080 	rsb	r0, r0, #256	@ 0x100
9001f57e:	ea44 0b0b 	orr.w	fp, r4, fp
9001f582:	9c02      	ldr	r4, [sp, #8]
9001f584:	1b00      	subs	r0, r0, r4
9001f586:	9c01      	ldr	r4, [sp, #4]
9001f588:	fb0e 2e0b 	mla	lr, lr, fp, r2
9001f58c:	eba4 0608 	sub.w	r6, r4, r8
9001f590:	b280      	uxth	r0, r0
9001f592:	ea4f 525e 	mov.w	r2, lr, lsr #21
9001f596:	b2b6      	uxth	r6, r6
9001f598:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
9001f59c:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
9001f5a0:	4373      	muls	r3, r6
9001f5a2:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
9001f5a6:	fb0c 3300 	mla	r3, ip, r0, r3
9001f5aa:	9802      	ldr	r0, [sp, #8]
9001f5ac:	ea42 0e0e 	orr.w	lr, r2, lr
9001f5b0:	fb00 3505 	mla	r5, r0, r5, r3
9001f5b4:	120b      	asrs	r3, r1, #8
9001f5b6:	10c8      	asrs	r0, r1, #3
9001f5b8:	fb08 5707 	mla	r7, r8, r7, r5
9001f5bc:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
9001f5c0:	00c9      	lsls	r1, r1, #3
9001f5c2:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
9001f5c6:	ea6f 2727 	mvn.w	r7, r7, asr #8
9001f5ca:	fa1f f28e 	uxth.w	r2, lr
9001f5ce:	b2c9      	uxtb	r1, r1
9001f5d0:	b2ff      	uxtb	r7, r7
9001f5d2:	437b      	muls	r3, r7
9001f5d4:	4378      	muls	r0, r7
9001f5d6:	434f      	muls	r7, r1
9001f5d8:	1c59      	adds	r1, r3, #1
9001f5da:	eb01 2113 	add.w	r1, r1, r3, lsr #8
9001f5de:	1213      	asrs	r3, r2, #8
9001f5e0:	f023 0307 	bic.w	r3, r3, #7
9001f5e4:	eb03 2311 	add.w	r3, r3, r1, lsr #8
9001f5e8:	1c41      	adds	r1, r0, #1
9001f5ea:	eb01 2010 	add.w	r0, r1, r0, lsr #8
9001f5ee:	10d1      	asrs	r1, r2, #3
9001f5f0:	021b      	lsls	r3, r3, #8
9001f5f2:	f021 0103 	bic.w	r1, r1, #3
9001f5f6:	00d2      	lsls	r2, r2, #3
9001f5f8:	f403 4378 	and.w	r3, r3, #63488	@ 0xf800
9001f5fc:	eb01 2110 	add.w	r1, r1, r0, lsr #8
9001f600:	00c9      	lsls	r1, r1, #3
9001f602:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
9001f606:	430b      	orrs	r3, r1
9001f608:	1c79      	adds	r1, r7, #1
9001f60a:	eb01 2717 	add.w	r7, r1, r7, lsr #8
9001f60e:	eb02 2217 	add.w	r2, r2, r7, lsr #8
9001f612:	f3c2 02c4 	ubfx	r2, r2, #3, #5
9001f616:	431a      	orrs	r2, r3
9001f618:	9b03      	ldr	r3, [sp, #12]
9001f61a:	801a      	strh	r2, [r3, #0]
9001f61c:	b005      	add	sp, #20
9001f61e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001f622:	f04f 0c00 	mov.w	ip, #0
9001f626:	4664      	mov	r4, ip
9001f628:	e6e5      	b.n	9001f3f6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7e>
9001f62a:	2300      	movs	r3, #0
9001f62c:	469c      	mov	ip, r3
9001f62e:	461a      	mov	r2, r3
9001f630:	461c      	mov	r4, r3
9001f632:	e707      	b.n	9001f444 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
9001f634:	2300      	movs	r3, #0
9001f636:	461a      	mov	r2, r3
9001f638:	e704      	b.n	9001f444 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
9001f63a:	460b      	mov	r3, r1
9001f63c:	460a      	mov	r2, r1
9001f63e:	e701      	b.n	9001f444 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
9001f640:	2500      	movs	r5, #0
9001f642:	46ab      	mov	fp, r5
9001f644:	e72f      	b.n	9001f4a6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x12e>
9001f646:	2700      	movs	r7, #0
9001f648:	463d      	mov	r5, r7
9001f64a:	4638      	mov	r0, r7
9001f64c:	46bb      	mov	fp, r7
9001f64e:	e754      	b.n	9001f4fa <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
9001f650:	4677      	mov	r7, lr
9001f652:	4675      	mov	r5, lr
9001f654:	4670      	mov	r0, lr
9001f656:	46f3      	mov	fp, lr
9001f658:	e74f      	b.n	9001f4fa <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
9001f65a:	2700      	movs	r7, #0
9001f65c:	4638      	mov	r0, r7
9001f65e:	e74c      	b.n	9001f4fa <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
9001f660:	460f      	mov	r7, r1
9001f662:	4608      	mov	r0, r1
9001f664:	e749      	b.n	9001f4fa <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
	...

9001f668 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001f668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001f66c:	b093      	sub	sp, #76	@ 0x4c
9001f66e:	9210      	str	r2, [sp, #64]	@ 0x40
9001f670:	9a21      	ldr	r2, [sp, #132]	@ 0x84
9001f672:	9011      	str	r0, [sp, #68]	@ 0x44
9001f674:	910e      	str	r1, [sp, #56]	@ 0x38
9001f676:	6850      	ldr	r0, [r2, #4]
9001f678:	9306      	str	r3, [sp, #24]
9001f67a:	6812      	ldr	r2, [r2, #0]
9001f67c:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	@ 0x88
9001f680:	fb00 1303 	mla	r3, r0, r3, r1
9001f684:	eb02 0343 	add.w	r3, r2, r3, lsl #1
9001f688:	9307      	str	r3, [sp, #28]
9001f68a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
9001f68c:	681b      	ldr	r3, [r3, #0]
9001f68e:	9308      	str	r3, [sp, #32]
9001f690:	9b24      	ldr	r3, [sp, #144]	@ 0x90
9001f692:	685b      	ldr	r3, [r3, #4]
9001f694:	9309      	str	r3, [sp, #36]	@ 0x24
9001f696:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
9001f698:	2b00      	cmp	r3, #0
9001f69a:	dc03      	bgt.n	9001f6a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
9001f69c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
9001f69e:	2b00      	cmp	r3, #0
9001f6a0:	f340 83b6 	ble.w	9001fe10 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a8>
9001f6a4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
9001f6a6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
9001f6aa:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
9001f6ae:	1e48      	subs	r0, r1, #1
9001f6b0:	1e55      	subs	r5, r2, #1
9001f6b2:	9b06      	ldr	r3, [sp, #24]
9001f6b4:	2b00      	cmp	r3, #0
9001f6b6:	f340 8165 	ble.w	9001f984 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
9001f6ba:	9e1d      	ldr	r6, [sp, #116]	@ 0x74
9001f6bc:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
9001f6be:	1436      	asrs	r6, r6, #16
9001f6c0:	ea4f 4323 	mov.w	r3, r3, asr #16
9001f6c4:	d406      	bmi.n	9001f6d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
9001f6c6:	4286      	cmp	r6, r0
9001f6c8:	da04      	bge.n	9001f6d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
9001f6ca:	2b00      	cmp	r3, #0
9001f6cc:	db02      	blt.n	9001f6d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
9001f6ce:	42ab      	cmp	r3, r5
9001f6d0:	f2c0 8159 	blt.w	9001f986 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
9001f6d4:	3601      	adds	r6, #1
9001f6d6:	f100 8146 	bmi.w	9001f966 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
9001f6da:	42b1      	cmp	r1, r6
9001f6dc:	f2c0 8143 	blt.w	9001f966 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
9001f6e0:	3301      	adds	r3, #1
9001f6e2:	f100 8140 	bmi.w	9001f966 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
9001f6e6:	429a      	cmp	r2, r3
9001f6e8:	f2c0 813d 	blt.w	9001f966 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
9001f6ec:	9b06      	ldr	r3, [sp, #24]
9001f6ee:	f64f 061f 	movw	r6, #63519	@ 0xf81f
9001f6f2:	9f07      	ldr	r7, [sp, #28]
9001f6f4:	930f      	str	r3, [sp, #60]	@ 0x3c
9001f6f6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
9001f6f8:	2b00      	cmp	r3, #0
9001f6fa:	f340 8166 	ble.w	9001f9ca <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
9001f6fe:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
9001f700:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
9001f702:	1418      	asrs	r0, r3, #16
9001f704:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
9001f706:	142d      	asrs	r5, r5, #16
9001f708:	f3c3 3103 	ubfx	r1, r3, #12, #4
9001f70c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
9001f70e:	f3c3 3c03 	ubfx	ip, r3, #12, #4
9001f712:	9b24      	ldr	r3, [sp, #144]	@ 0x90
9001f714:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
9001f718:	f100 81f0 	bmi.w	9001fafc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
9001f71c:	f102 3eff 	add.w	lr, r2, #4294967295
9001f720:	4575      	cmp	r5, lr
9001f722:	f280 81eb 	bge.w	9001fafc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
9001f726:	2800      	cmp	r0, #0
9001f728:	f2c0 81e8 	blt.w	9001fafc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
9001f72c:	f103 3eff 	add.w	lr, r3, #4294967295
9001f730:	4570      	cmp	r0, lr
9001f732:	f280 81e3 	bge.w	9001fafc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
9001f736:	b212      	sxth	r2, r2
9001f738:	9b09      	ldr	r3, [sp, #36]	@ 0x24
9001f73a:	fa1f fe81 	uxth.w	lr, r1
9001f73e:	fb00 5002 	mla	r0, r0, r2, r5
9001f742:	ea4f 150e 	mov.w	r5, lr, lsl #4
9001f746:	eb03 0a00 	add.w	sl, r3, r0
9001f74a:	f813 9000 	ldrb.w	r9, [r3, r0]
9001f74e:	f5c5 7380 	rsb	r3, r5, #256	@ 0x100
9001f752:	f89a 8001 	ldrb.w	r8, [sl, #1]
9001f756:	b29b      	uxth	r3, r3
9001f758:	f1bc 0f00 	cmp.w	ip, #0
9001f75c:	f000 817b 	beq.w	9001fa56 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
9001f760:	f81a 4002 	ldrb.w	r4, [sl, r2]
9001f764:	eb0a 0b02 	add.w	fp, sl, r2
9001f768:	fa1f fa8c 	uxth.w	sl, ip
9001f76c:	940a      	str	r4, [sp, #40]	@ 0x28
9001f76e:	fb0a fe0e 	mul.w	lr, sl, lr
9001f772:	f89b 4001 	ldrb.w	r4, [fp, #1]
9001f776:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
9001f77a:	eba5 050e 	sub.w	r5, r5, lr
9001f77e:	940b      	str	r4, [sp, #44]	@ 0x2c
9001f780:	fa1f fa8a 	uxth.w	sl, sl
9001f784:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
9001f786:	b2ad      	uxth	r5, r5
9001f788:	eba3 030a 	sub.w	r3, r3, sl
9001f78c:	fb08 f505 	mul.w	r5, r8, r5
9001f790:	b29b      	uxth	r3, r3
9001f792:	fb09 5303 	mla	r3, r9, r3, r5
9001f796:	fb0a 3304 	mla	r3, sl, r4, r3
9001f79a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
9001f79c:	fb0e 3304 	mla	r3, lr, r4, r3
9001f7a0:	f3c3 2307 	ubfx	r3, r3, #8, #8
9001f7a4:	2b00      	cmp	r3, #0
9001f7a6:	f000 80d1 	beq.w	9001f94c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
9001f7aa:	9c08      	ldr	r4, [sp, #32]
9001f7ac:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
9001f7b0:	eb04 0540 	add.w	r5, r4, r0, lsl #1
9001f7b4:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
9001f7b8:	f000 8152 	beq.w	9001fa60 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
9001f7bc:	f420 6efc 	bic.w	lr, r0, #2016	@ 0x7e0
9001f7c0:	ea4f 0ae9 	mov.w	sl, r9, asr #3
9001f7c4:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
9001f7c8:	fb0a fe0e 	mul.w	lr, sl, lr
9001f7cc:	fb09 f000 	mul.w	r0, r9, r0
9001f7d0:	ea06 195e 	and.w	r9, r6, lr, lsr #5
9001f7d4:	f60e 0e01 	addw	lr, lr, #2049	@ 0x801
9001f7d8:	f100 0b20 	add.w	fp, r0, #32
9001f7dc:	44ce      	add	lr, r9
9001f7de:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
9001f7e2:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
9001f7e6:	ea4f 2919 	mov.w	r9, r9, lsr #8
9001f7ea:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
9001f7ee:	ea4e 0909 	orr.w	r9, lr, r9
9001f7f2:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
9001f7f6:	8868      	ldrh	r0, [r5, #2]
9001f7f8:	d019      	beq.n	9001f82e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
9001f7fa:	f420 6efc 	bic.w	lr, r0, #2016	@ 0x7e0
9001f7fe:	ea4f 0ae8 	mov.w	sl, r8, asr #3
9001f802:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
9001f806:	fb0a fe0e 	mul.w	lr, sl, lr
9001f80a:	fb08 f800 	mul.w	r8, r8, r0
9001f80e:	ea06 105e 	and.w	r0, r6, lr, lsr #5
9001f812:	f60e 0e01 	addw	lr, lr, #2049	@ 0x801
9001f816:	f108 0b20 	add.w	fp, r8, #32
9001f81a:	4486      	add	lr, r0
9001f81c:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
9001f820:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
9001f824:	0a00      	lsrs	r0, r0, #8
9001f826:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
9001f82a:	ea4e 0000 	orr.w	r0, lr, r0
9001f82e:	ea4f 4e09 	mov.w	lr, r9, lsl #16
9001f832:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
9001f836:	ea4f 4a00 	mov.w	sl, r0, lsl #16
9001f83a:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
9001f83e:	f00e 6efc 	and.w	lr, lr, #132120576	@ 0x7e00000
9001f842:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
9001f846:	ea4e 0909 	orr.w	r9, lr, r9
9001f84a:	ea4a 0000 	orr.w	r0, sl, r0
9001f84e:	f1bc 0f00 	cmp.w	ip, #0
9001f852:	f000 8107 	beq.w	9001fa64 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fc>
9001f856:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
9001f85a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
9001f85c:	3a01      	subs	r2, #1
9001f85e:	2cff      	cmp	r4, #255	@ 0xff
9001f860:	ea4f 0242 	mov.w	r2, r2, lsl #1
9001f864:	f102 0202 	add.w	r2, r2, #2
9001f868:	eb05 0e02 	add.w	lr, r5, r2
9001f86c:	5aaa      	ldrh	r2, [r5, r2]
9001f86e:	d018      	beq.n	9001f8a2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
9001f870:	f422 65fc 	bic.w	r5, r2, #2016	@ 0x7e0
9001f874:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
9001f878:	ea4f 08e4 	mov.w	r8, r4, asr #3
9001f87c:	fb04 fa02 	mul.w	sl, r4, r2
9001f880:	fb08 f805 	mul.w	r8, r8, r5
9001f884:	f10a 0520 	add.w	r5, sl, #32
9001f888:	ea06 1258 	and.w	r2, r6, r8, lsr #5
9001f88c:	f608 0801 	addw	r8, r8, #2049	@ 0x801
9001f890:	eb05 251a 	add.w	r5, r5, sl, lsr #8
9001f894:	4442      	add	r2, r8
9001f896:	0a2d      	lsrs	r5, r5, #8
9001f898:	ea06 1252 	and.w	r2, r6, r2, lsr #5
9001f89c:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
9001f8a0:	432a      	orrs	r2, r5
9001f8a2:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
9001f8a4:	f8be 5002 	ldrh.w	r5, [lr, #2]
9001f8a8:	2cff      	cmp	r4, #255	@ 0xff
9001f8aa:	d01a      	beq.n	9001f8e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
9001f8ac:	f425 6efc 	bic.w	lr, r5, #2016	@ 0x7e0
9001f8b0:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
9001f8b4:	ea4f 08e4 	mov.w	r8, r4, asr #3
9001f8b8:	fb04 fa05 	mul.w	sl, r4, r5
9001f8bc:	fb08 f80e 	mul.w	r8, r8, lr
9001f8c0:	f10a 0e20 	add.w	lr, sl, #32
9001f8c4:	ea06 1558 	and.w	r5, r6, r8, lsr #5
9001f8c8:	f608 0801 	addw	r8, r8, #2049	@ 0x801
9001f8cc:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
9001f8d0:	4445      	add	r5, r8
9001f8d2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
9001f8d6:	ea06 1555 	and.w	r5, r6, r5, lsr #5
9001f8da:	f40e 6efc 	and.w	lr, lr, #2016	@ 0x7e0
9001f8de:	ea45 050e 	orr.w	r5, r5, lr
9001f8e2:	fb1c fe01 	smulbb	lr, ip, r1
9001f8e6:	f1cc 0810 	rsb	r8, ip, #16
9001f8ea:	ea4f 4a02 	mov.w	sl, r2, lsl #16
9001f8ee:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
9001f8f2:	ea4f 0eee 	mov.w	lr, lr, asr #3
9001f8f6:	eba8 0801 	sub.w	r8, r8, r1
9001f8fa:	ea4f 4b05 	mov.w	fp, r5, lsl #16
9001f8fe:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
9001f902:	ebce 0141 	rsb	r1, lr, r1, lsl #1
9001f906:	f425 65fc 	bic.w	r5, r5, #2016	@ 0x7e0
9001f90a:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
9001f90e:	ea4a 0202 	orr.w	r2, sl, r2
9001f912:	4341      	muls	r1, r0
9001f914:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
9001f918:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
9001f91c:	fb09 1108 	mla	r1, r9, r8, r1
9001f920:	ea4b 0505 	orr.w	r5, fp, r5
9001f924:	fb0c 1102 	mla	r1, ip, r2, r1
9001f928:	fb0e 1e05 	mla	lr, lr, r5, r1
9001f92c:	ea4f 525e 	mov.w	r2, lr, lsr #21
9001f930:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
9001f934:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
9001f938:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
9001f93c:	ea42 0e0e 	orr.w	lr, r2, lr
9001f940:	fa1f f28e 	uxth.w	r2, lr
9001f944:	2bff      	cmp	r3, #255	@ 0xff
9001f946:	f040 80a1 	bne.w	9001fa8c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
9001f94a:	803a      	strh	r2, [r7, #0]
9001f94c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
9001f94e:	3702      	adds	r7, #2
9001f950:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
9001f952:	4413      	add	r3, r2
9001f954:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
9001f956:	931d      	str	r3, [sp, #116]	@ 0x74
9001f958:	9b20      	ldr	r3, [sp, #128]	@ 0x80
9001f95a:	441a      	add	r2, r3
9001f95c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
9001f95e:	3b01      	subs	r3, #1
9001f960:	921e      	str	r2, [sp, #120]	@ 0x78
9001f962:	930f      	str	r3, [sp, #60]	@ 0x3c
9001f964:	e6c7      	b.n	9001f6f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
9001f966:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
9001f968:	9e1f      	ldr	r6, [sp, #124]	@ 0x7c
9001f96a:	9c1e      	ldr	r4, [sp, #120]	@ 0x78
9001f96c:	4433      	add	r3, r6
9001f96e:	931d      	str	r3, [sp, #116]	@ 0x74
9001f970:	9b20      	ldr	r3, [sp, #128]	@ 0x80
9001f972:	441c      	add	r4, r3
9001f974:	9b06      	ldr	r3, [sp, #24]
9001f976:	3b01      	subs	r3, #1
9001f978:	941e      	str	r4, [sp, #120]	@ 0x78
9001f97a:	9306      	str	r3, [sp, #24]
9001f97c:	9b07      	ldr	r3, [sp, #28]
9001f97e:	3302      	adds	r3, #2
9001f980:	9307      	str	r3, [sp, #28]
9001f982:	e696      	b.n	9001f6b2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
9001f984:	d028      	beq.n	9001f9d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
9001f986:	9b06      	ldr	r3, [sp, #24]
9001f988:	981f      	ldr	r0, [sp, #124]	@ 0x7c
9001f98a:	3b01      	subs	r3, #1
9001f98c:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
9001f98e:	fb00 5003 	mla	r0, r0, r3, r5
9001f992:	1400      	asrs	r0, r0, #16
9001f994:	f53f aeaa 	bmi.w	9001f6ec <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
9001f998:	3901      	subs	r1, #1
9001f99a:	4288      	cmp	r0, r1
9001f99c:	f6bf aea6 	bge.w	9001f6ec <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
9001f9a0:	9920      	ldr	r1, [sp, #128]	@ 0x80
9001f9a2:	981e      	ldr	r0, [sp, #120]	@ 0x78
9001f9a4:	fb01 0303 	mla	r3, r1, r3, r0
9001f9a8:	141b      	asrs	r3, r3, #16
9001f9aa:	f53f ae9f 	bmi.w	9001f6ec <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
9001f9ae:	3a01      	subs	r2, #1
9001f9b0:	4293      	cmp	r3, r2
9001f9b2:	f6bf ae9b 	bge.w	9001f6ec <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
9001f9b6:	9b06      	ldr	r3, [sp, #24]
9001f9b8:	f64f 061f 	movw	r6, #63519	@ 0xf81f
9001f9bc:	f8dd e01c 	ldr.w	lr, [sp, #28]
9001f9c0:	930f      	str	r3, [sp, #60]	@ 0x3c
9001f9c2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
9001f9c4:	2b00      	cmp	r3, #0
9001f9c6:	f300 80b6 	bgt.w	9001fb36 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ce>
9001f9ca:	9b06      	ldr	r3, [sp, #24]
9001f9cc:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
9001f9d0:	9b07      	ldr	r3, [sp, #28]
9001f9d2:	eb03 0344 	add.w	r3, r3, r4, lsl #1
9001f9d6:	9307      	str	r3, [sp, #28]
9001f9d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
9001f9da:	2b00      	cmp	r3, #0
9001f9dc:	f340 8218 	ble.w	9001fe10 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a8>
9001f9e0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
9001f9e4:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
9001f9e6:	ee30 0a04 	vadd.f32	s0, s0, s8
9001f9ea:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001f9ee:	eef0 6a62 	vmov.f32	s13, s5
9001f9f2:	eec7 7a00 	vdiv.f32	s15, s14, s0
9001f9f6:	ee31 1a05 	vadd.f32	s2, s2, s10
9001f9fa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001f9fe:	edcd 6a1d 	vstr	s13, [sp, #116]	@ 0x74
9001fa02:	eef0 6a43 	vmov.f32	s13, s6
9001fa06:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001fa0a:	edcd 6a1e 	vstr	s13, [sp, #120]	@ 0x78
9001fa0e:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001fa12:	ee61 7a27 	vmul.f32	s15, s2, s15
9001fa16:	ee77 2a62 	vsub.f32	s5, s14, s5
9001fa1a:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001fa1e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001fa22:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001fa26:	ee12 2a90 	vmov	r2, s5
9001fa2a:	eef0 2a47 	vmov.f32	s5, s14
9001fa2e:	fb92 f3f3 	sdiv	r3, r2, r3
9001fa32:	ee13 2a10 	vmov	r2, s6
9001fa36:	931f      	str	r3, [sp, #124]	@ 0x7c
9001fa38:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
9001fa3a:	eeb0 3a67 	vmov.f32	s6, s15
9001fa3e:	fb92 f3f3 	sdiv	r3, r2, r3
9001fa42:	9320      	str	r3, [sp, #128]	@ 0x80
9001fa44:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
9001fa46:	9a10      	ldr	r2, [sp, #64]	@ 0x40
9001fa48:	3b01      	subs	r3, #1
9001fa4a:	930e      	str	r3, [sp, #56]	@ 0x38
9001fa4c:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
9001fa4e:	bf08      	it	eq
9001fa50:	4613      	moveq	r3, r2
9001fa52:	9306      	str	r3, [sp, #24]
9001fa54:	e61f      	b.n	9001f696 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
9001fa56:	fb08 f505 	mul.w	r5, r8, r5
9001fa5a:	fb09 5303 	mla	r3, r9, r3, r5
9001fa5e:	e69f      	b.n	9001f7a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
9001fa60:	4681      	mov	r9, r0
9001fa62:	e6c6      	b.n	9001f7f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
9001fa64:	f1c1 0210 	rsb	r2, r1, #16
9001fa68:	4341      	muls	r1, r0
9001fa6a:	fb09 1902 	mla	r9, r9, r2, r1
9001fa6e:	ea4f 0949 	mov.w	r9, r9, lsl #1
9001fa72:	ea4f 5259 	mov.w	r2, r9, lsr #21
9001fa76:	ea4f 1959 	mov.w	r9, r9, lsr #5
9001fa7a:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
9001fa7e:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
9001fa82:	ea42 0909 	orr.w	r9, r2, r9
9001fa86:	fa1f f289 	uxth.w	r2, r9
9001fa8a:	e75b      	b.n	9001f944 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>
9001fa8c:	f8b7 c000 	ldrh.w	ip, [r7]
9001fa90:	43db      	mvns	r3, r3
9001fa92:	ea4f 202c 	mov.w	r0, ip, asr #8
9001fa96:	fa5f fe83 	uxtb.w	lr, r3
9001fa9a:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
9001fa9e:	ea4f 05ec 	mov.w	r5, ip, asr #3
9001faa2:	ea4f 03cc 	mov.w	r3, ip, lsl #3
9001faa6:	fb00 f00e 	mul.w	r0, r0, lr
9001faaa:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
9001faae:	b2db      	uxtb	r3, r3
9001fab0:	1c41      	adds	r1, r0, #1
9001fab2:	fb05 f50e 	mul.w	r5, r5, lr
9001fab6:	fb03 f30e 	mul.w	r3, r3, lr
9001faba:	eb01 2010 	add.w	r0, r1, r0, lsr #8
9001fabe:	1211      	asrs	r1, r2, #8
9001fac0:	f021 0107 	bic.w	r1, r1, #7
9001fac4:	eb01 2110 	add.w	r1, r1, r0, lsr #8
9001fac8:	48d3      	ldr	r0, [pc, #844]	@ (9001fe18 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b0>)
9001faca:	b2c9      	uxtb	r1, r1
9001facc:	ea00 2001 	and.w	r0, r0, r1, lsl #8
9001fad0:	1c69      	adds	r1, r5, #1
9001fad2:	eb01 2515 	add.w	r5, r1, r5, lsr #8
9001fad6:	10d1      	asrs	r1, r2, #3
9001fad8:	00d2      	lsls	r2, r2, #3
9001fada:	f021 0103 	bic.w	r1, r1, #3
9001fade:	eb01 2115 	add.w	r1, r1, r5, lsr #8
9001fae2:	00c9      	lsls	r1, r1, #3
9001fae4:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
9001fae8:	4301      	orrs	r1, r0
9001faea:	1c58      	adds	r0, r3, #1
9001faec:	eb00 2313 	add.w	r3, r0, r3, lsr #8
9001faf0:	eb02 2213 	add.w	r2, r2, r3, lsr #8
9001faf4:	f3c2 02c4 	ubfx	r2, r2, #3, #5
9001faf8:	430a      	orrs	r2, r1
9001fafa:	e726      	b.n	9001f94a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e2>
9001fafc:	f115 0e01 	adds.w	lr, r5, #1
9001fb00:	f53f af24 	bmi.w	9001f94c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
9001fb04:	4572      	cmp	r2, lr
9001fb06:	f6ff af21 	blt.w	9001f94c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
9001fb0a:	f110 0e01 	adds.w	lr, r0, #1
9001fb0e:	f53f af1d 	bmi.w	9001f94c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
9001fb12:	4573      	cmp	r3, lr
9001fb14:	f6ff af1a 	blt.w	9001f94c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
9001fb18:	b21b      	sxth	r3, r3
9001fb1a:	b212      	sxth	r2, r2
9001fb1c:	9301      	str	r3, [sp, #4]
9001fb1e:	9200      	str	r2, [sp, #0]
9001fb20:	e9cd 1c04 	strd	r1, ip, [sp, #16]
9001fb24:	e9cd 5002 	strd	r5, r0, [sp, #8]
9001fb28:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
9001fb2c:	4639      	mov	r1, r7
9001fb2e:	9811      	ldr	r0, [sp, #68]	@ 0x44
9001fb30:	f7ff fc22 	bl	9001f378 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
9001fb34:	e70a      	b.n	9001f94c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
9001fb36:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
9001fb38:	f3c3 3203 	ubfx	r2, r3, #12, #4
9001fb3c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
9001fb3e:	f3c3 3503 	ubfx	r5, r3, #12, #4
9001fb42:	9b24      	ldr	r3, [sp, #144]	@ 0x90
9001fb44:	fa1f fc82 	uxth.w	ip, r2
9001fb48:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
9001fb4c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
9001fb4e:	ea4f 100c 	mov.w	r0, ip, lsl #4
9001fb52:	141f      	asrs	r7, r3, #16
9001fb54:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
9001fb56:	141b      	asrs	r3, r3, #16
9001fb58:	fb01 3707 	mla	r7, r1, r7, r3
9001fb5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
9001fb5e:	eb03 0a07 	add.w	sl, r3, r7
9001fb62:	f813 9007 	ldrb.w	r9, [r3, r7]
9001fb66:	f5c0 7380 	rsb	r3, r0, #256	@ 0x100
9001fb6a:	f89a 8001 	ldrb.w	r8, [sl, #1]
9001fb6e:	b29b      	uxth	r3, r3
9001fb70:	2d00      	cmp	r5, #0
9001fb72:	f000 80fe 	beq.w	9001fd72 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70a>
9001fb76:	f81a 4001 	ldrb.w	r4, [sl, r1]
9001fb7a:	eb0a 0b01 	add.w	fp, sl, r1
9001fb7e:	fa1f fa85 	uxth.w	sl, r5
9001fb82:	940c      	str	r4, [sp, #48]	@ 0x30
9001fb84:	fb0a fc0c 	mul.w	ip, sl, ip
9001fb88:	f89b 4001 	ldrb.w	r4, [fp, #1]
9001fb8c:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
9001fb90:	eba0 000c 	sub.w	r0, r0, ip
9001fb94:	940d      	str	r4, [sp, #52]	@ 0x34
9001fb96:	fa1f fa8a 	uxth.w	sl, sl
9001fb9a:	b280      	uxth	r0, r0
9001fb9c:	eba3 030a 	sub.w	r3, r3, sl
9001fba0:	fb08 f000 	mul.w	r0, r8, r0
9001fba4:	b29b      	uxth	r3, r3
9001fba6:	fb09 0303 	mla	r3, r9, r3, r0
9001fbaa:	980c      	ldr	r0, [sp, #48]	@ 0x30
9001fbac:	fb0a 3300 	mla	r3, sl, r0, r3
9001fbb0:	fb0c 3304 	mla	r3, ip, r4, r3
9001fbb4:	f3c3 2307 	ubfx	r3, r3, #8, #8
9001fbb8:	2b00      	cmp	r3, #0
9001fbba:	f000 80cc 	beq.w	9001fd56 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ee>
9001fbbe:	9808      	ldr	r0, [sp, #32]
9001fbc0:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
9001fbc4:	9c08      	ldr	r4, [sp, #32]
9001fbc6:	eb00 0047 	add.w	r0, r0, r7, lsl #1
9001fbca:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
9001fbce:	f000 80d5 	beq.w	9001fd7c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x714>
9001fbd2:	f427 6cfc 	bic.w	ip, r7, #2016	@ 0x7e0
9001fbd6:	ea4f 0ae9 	mov.w	sl, r9, asr #3
9001fbda:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
9001fbde:	fb0a fc0c 	mul.w	ip, sl, ip
9001fbe2:	fb09 f707 	mul.w	r7, r9, r7
9001fbe6:	ea06 195c 	and.w	r9, r6, ip, lsr #5
9001fbea:	f60c 0c01 	addw	ip, ip, #2049	@ 0x801
9001fbee:	f107 0b20 	add.w	fp, r7, #32
9001fbf2:	44cc      	add	ip, r9
9001fbf4:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
9001fbf8:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
9001fbfc:	ea4f 2919 	mov.w	r9, r9, lsr #8
9001fc00:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
9001fc04:	ea4c 0909 	orr.w	r9, ip, r9
9001fc08:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
9001fc0c:	8847      	ldrh	r7, [r0, #2]
9001fc0e:	d019      	beq.n	9001fc44 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5dc>
9001fc10:	f427 6cfc 	bic.w	ip, r7, #2016	@ 0x7e0
9001fc14:	ea4f 0ae8 	mov.w	sl, r8, asr #3
9001fc18:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
9001fc1c:	fb0a fc0c 	mul.w	ip, sl, ip
9001fc20:	fb08 f807 	mul.w	r8, r8, r7
9001fc24:	ea06 175c 	and.w	r7, r6, ip, lsr #5
9001fc28:	f60c 0c01 	addw	ip, ip, #2049	@ 0x801
9001fc2c:	f108 0b20 	add.w	fp, r8, #32
9001fc30:	44bc      	add	ip, r7
9001fc32:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
9001fc36:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
9001fc3a:	0a3f      	lsrs	r7, r7, #8
9001fc3c:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
9001fc40:	ea4c 0707 	orr.w	r7, ip, r7
9001fc44:	ea4f 4c09 	mov.w	ip, r9, lsl #16
9001fc48:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
9001fc4c:	ea4f 4a07 	mov.w	sl, r7, lsl #16
9001fc50:	f427 67fc 	bic.w	r7, r7, #2016	@ 0x7e0
9001fc54:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
9001fc58:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
9001fc5c:	ea4c 0909 	orr.w	r9, ip, r9
9001fc60:	ea4a 0707 	orr.w	r7, sl, r7
9001fc64:	2d00      	cmp	r5, #0
9001fc66:	f000 808b 	beq.w	9001fd80 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
9001fc6a:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
9001fc6e:	3901      	subs	r1, #1
9001fc70:	0049      	lsls	r1, r1, #1
9001fc72:	3102      	adds	r1, #2
9001fc74:	eb00 0c01 	add.w	ip, r0, r1
9001fc78:	5a41      	ldrh	r1, [r0, r1]
9001fc7a:	980c      	ldr	r0, [sp, #48]	@ 0x30
9001fc7c:	28ff      	cmp	r0, #255	@ 0xff
9001fc7e:	d019      	beq.n	9001fcb4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64c>
9001fc80:	f421 60fc 	bic.w	r0, r1, #2016	@ 0x7e0
9001fc84:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
9001fc86:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
9001fc8a:	ea4f 08e4 	mov.w	r8, r4, asr #3
9001fc8e:	fb04 fa01 	mul.w	sl, r4, r1
9001fc92:	fb08 f800 	mul.w	r8, r8, r0
9001fc96:	f10a 0020 	add.w	r0, sl, #32
9001fc9a:	ea06 1158 	and.w	r1, r6, r8, lsr #5
9001fc9e:	f608 0801 	addw	r8, r8, #2049	@ 0x801
9001fca2:	eb00 201a 	add.w	r0, r0, sl, lsr #8
9001fca6:	4441      	add	r1, r8
9001fca8:	0a00      	lsrs	r0, r0, #8
9001fcaa:	ea06 1151 	and.w	r1, r6, r1, lsr #5
9001fcae:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
9001fcb2:	4301      	orrs	r1, r0
9001fcb4:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
9001fcb6:	f8bc 0002 	ldrh.w	r0, [ip, #2]
9001fcba:	2cff      	cmp	r4, #255	@ 0xff
9001fcbc:	d01a      	beq.n	9001fcf4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68c>
9001fcbe:	f420 6cfc 	bic.w	ip, r0, #2016	@ 0x7e0
9001fcc2:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
9001fcc6:	ea4f 08e4 	mov.w	r8, r4, asr #3
9001fcca:	fb04 fa00 	mul.w	sl, r4, r0
9001fcce:	fb08 f80c 	mul.w	r8, r8, ip
9001fcd2:	f10a 0c20 	add.w	ip, sl, #32
9001fcd6:	ea06 1058 	and.w	r0, r6, r8, lsr #5
9001fcda:	f608 0801 	addw	r8, r8, #2049	@ 0x801
9001fcde:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
9001fce2:	4440      	add	r0, r8
9001fce4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001fce8:	ea06 1050 	and.w	r0, r6, r0, lsr #5
9001fcec:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
9001fcf0:	ea40 000c 	orr.w	r0, r0, ip
9001fcf4:	fb15 fc02 	smulbb	ip, r5, r2
9001fcf8:	f1c5 0810 	rsb	r8, r5, #16
9001fcfc:	ea4f 4a01 	mov.w	sl, r1, lsl #16
9001fd00:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
9001fd04:	ea4f 0cec 	mov.w	ip, ip, asr #3
9001fd08:	eba8 0802 	sub.w	r8, r8, r2
9001fd0c:	ea4f 4b00 	mov.w	fp, r0, lsl #16
9001fd10:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
9001fd14:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
9001fd18:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
9001fd1c:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
9001fd20:	ea4a 0101 	orr.w	r1, sl, r1
9001fd24:	437a      	muls	r2, r7
9001fd26:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
9001fd2a:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
9001fd2e:	fb09 2208 	mla	r2, r9, r8, r2
9001fd32:	ea4b 0000 	orr.w	r0, fp, r0
9001fd36:	fb05 2201 	mla	r2, r5, r1, r2
9001fd3a:	fb0c 2200 	mla	r2, ip, r0, r2
9001fd3e:	0d57      	lsrs	r7, r2, #21
9001fd40:	0952      	lsrs	r2, r2, #5
9001fd42:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
9001fd46:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
9001fd4a:	433a      	orrs	r2, r7
9001fd4c:	2bff      	cmp	r3, #255	@ 0xff
9001fd4e:	b292      	uxth	r2, r2
9001fd50:	d127      	bne.n	9001fda2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73a>
9001fd52:	f8ae 2000 	strh.w	r2, [lr]
9001fd56:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
9001fd58:	f10e 0e02 	add.w	lr, lr, #2
9001fd5c:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
9001fd5e:	4413      	add	r3, r2
9001fd60:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
9001fd62:	931d      	str	r3, [sp, #116]	@ 0x74
9001fd64:	9b20      	ldr	r3, [sp, #128]	@ 0x80
9001fd66:	441a      	add	r2, r3
9001fd68:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
9001fd6a:	3b01      	subs	r3, #1
9001fd6c:	921e      	str	r2, [sp, #120]	@ 0x78
9001fd6e:	930f      	str	r3, [sp, #60]	@ 0x3c
9001fd70:	e627      	b.n	9001f9c2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
9001fd72:	fb08 f000 	mul.w	r0, r8, r0
9001fd76:	fb09 0303 	mla	r3, r9, r3, r0
9001fd7a:	e71b      	b.n	9001fbb4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54c>
9001fd7c:	46b9      	mov	r9, r7
9001fd7e:	e743      	b.n	9001fc08 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a0>
9001fd80:	f1c2 0110 	rsb	r1, r2, #16
9001fd84:	437a      	muls	r2, r7
9001fd86:	fb09 2901 	mla	r9, r9, r1, r2
9001fd8a:	ea4f 0949 	mov.w	r9, r9, lsl #1
9001fd8e:	ea4f 5059 	mov.w	r0, r9, lsr #21
9001fd92:	ea4f 1259 	mov.w	r2, r9, lsr #5
9001fd96:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
9001fd9a:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
9001fd9e:	4302      	orrs	r2, r0
9001fda0:	e7d4      	b.n	9001fd4c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e4>
9001fda2:	f8be 7000 	ldrh.w	r7, [lr]
9001fda6:	43db      	mvns	r3, r3
9001fda8:	4c1b      	ldr	r4, [pc, #108]	@ (9001fe18 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b0>)
9001fdaa:	1238      	asrs	r0, r7, #8
9001fdac:	fa5f fc83 	uxtb.w	ip, r3
9001fdb0:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
9001fdb4:	10fd      	asrs	r5, r7, #3
9001fdb6:	00fb      	lsls	r3, r7, #3
9001fdb8:	fb00 f00c 	mul.w	r0, r0, ip
9001fdbc:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
9001fdc0:	b2db      	uxtb	r3, r3
9001fdc2:	fb05 f10c 	mul.w	r1, r5, ip
9001fdc6:	1c45      	adds	r5, r0, #1
9001fdc8:	fb03 f30c 	mul.w	r3, r3, ip
9001fdcc:	eb05 2010 	add.w	r0, r5, r0, lsr #8
9001fdd0:	1215      	asrs	r5, r2, #8
9001fdd2:	f025 0507 	bic.w	r5, r5, #7
9001fdd6:	eb05 2010 	add.w	r0, r5, r0, lsr #8
9001fdda:	1c4d      	adds	r5, r1, #1
9001fddc:	eb05 2511 	add.w	r5, r5, r1, lsr #8
9001fde0:	10d1      	asrs	r1, r2, #3
9001fde2:	b2c0      	uxtb	r0, r0
9001fde4:	f021 0103 	bic.w	r1, r1, #3
9001fde8:	00d2      	lsls	r2, r2, #3
9001fdea:	ea04 2000 	and.w	r0, r4, r0, lsl #8
9001fdee:	eb01 2115 	add.w	r1, r1, r5, lsr #8
9001fdf2:	00c9      	lsls	r1, r1, #3
9001fdf4:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
9001fdf8:	4308      	orrs	r0, r1
9001fdfa:	1c59      	adds	r1, r3, #1
9001fdfc:	eb01 2313 	add.w	r3, r1, r3, lsr #8
9001fe00:	eb02 2313 	add.w	r3, r2, r3, lsr #8
9001fe04:	f3c3 03c4 	ubfx	r3, r3, #3, #5
9001fe08:	4318      	orrs	r0, r3
9001fe0a:	f8ae 0000 	strh.w	r0, [lr]
9001fe0e:	e7a2      	b.n	9001fd56 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ee>
9001fe10:	b013      	add	sp, #76	@ 0x4c
9001fe12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001fe16:	bf00      	nop
9001fe18:	fffff800 	.word	0xfffff800

9001fe1c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>:
9001fe1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9001fe20:	e9dd 4509 	ldrd	r4, r5, [sp, #36]	@ 0x24
9001fe24:	f9bd a020 	ldrsh.w	sl, [sp, #32]
9001fe28:	fb05 4c03 	mla	ip, r5, r3, r4
9001fe2c:	2d00      	cmp	r5, #0
9001fe2e:	f89d 902c 	ldrb.w	r9, [sp, #44]	@ 0x2c
9001fe32:	f89d 7030 	ldrb.w	r7, [sp, #48]	@ 0x30
9001fe36:	eb02 0e4c 	add.w	lr, r2, ip, lsl #1
9001fe3a:	f89d 6034 	ldrb.w	r6, [sp, #52]	@ 0x34
9001fe3e:	8808      	ldrh	r0, [r1, #0]
9001fe40:	f2c0 80a7 	blt.w	9001ff92 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
9001fe44:	45aa      	cmp	sl, r5
9001fe46:	f340 80a4 	ble.w	9001ff92 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
9001fe4a:	2c00      	cmp	r4, #0
9001fe4c:	f2c0 809f 	blt.w	9001ff8e <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
9001fe50:	42a3      	cmp	r3, r4
9001fe52:	f340 809c 	ble.w	9001ff8e <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
9001fe56:	f832 801c 	ldrh.w	r8, [r2, ip, lsl #1]
9001fe5a:	1c62      	adds	r2, r4, #1
9001fe5c:	f100 809c 	bmi.w	9001ff98 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
9001fe60:	4293      	cmp	r3, r2
9001fe62:	f340 8099 	ble.w	9001ff98 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
9001fe66:	f1b9 0f00 	cmp.w	r9, #0
9001fe6a:	f000 8095 	beq.w	9001ff98 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
9001fe6e:	f8be c002 	ldrh.w	ip, [lr, #2]
9001fe72:	3501      	adds	r5, #1
9001fe74:	f100 8094 	bmi.w	9001ffa0 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
9001fe78:	45aa      	cmp	sl, r5
9001fe7a:	f340 8091 	ble.w	9001ffa0 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
9001fe7e:	2f00      	cmp	r7, #0
9001fe80:	f000 808e 	beq.w	9001ffa0 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
9001fe84:	2c00      	cmp	r4, #0
9001fe86:	f2c0 8089 	blt.w	9001ff9c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
9001fe8a:	42a3      	cmp	r3, r4
9001fe8c:	f340 8086 	ble.w	9001ff9c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
9001fe90:	f83e 5013 	ldrh.w	r5, [lr, r3, lsl #1]
9001fe94:	3401      	adds	r4, #1
9001fe96:	f100 8086 	bmi.w	9001ffa6 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
9001fe9a:	42a3      	cmp	r3, r4
9001fe9c:	f340 8083 	ble.w	9001ffa6 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
9001fea0:	f1b9 0f00 	cmp.w	r9, #0
9001fea4:	d07f      	beq.n	9001ffa6 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
9001fea6:	3301      	adds	r3, #1
9001fea8:	f83e 3013 	ldrh.w	r3, [lr, r3, lsl #1]
9001feac:	ea4f 4408 	mov.w	r4, r8, lsl #16
9001feb0:	f428 68fc 	bic.w	r8, r8, #2016	@ 0x7e0
9001feb4:	fb19 fe07 	smulbb	lr, r9, r7
9001feb8:	f1c7 0210 	rsb	r2, r7, #16
9001febc:	f004 64fc 	and.w	r4, r4, #132120576	@ 0x7e00000
9001fec0:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
9001fec4:	eba2 0209 	sub.w	r2, r2, r9
9001fec8:	ea44 0808 	orr.w	r8, r4, r8
9001fecc:	ea4f 440c 	mov.w	r4, ip, lsl #16
9001fed0:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
9001fed4:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
9001fed8:	f004 64fc 	and.w	r4, r4, #132120576	@ 0x7e00000
9001fedc:	ebce 0747 	rsb	r7, lr, r7, lsl #1
9001fee0:	ea44 0c0c 	orr.w	ip, r4, ip
9001fee4:	ebce 0449 	rsb	r4, lr, r9, lsl #1
9001fee8:	fb04 f40c 	mul.w	r4, r4, ip
9001feec:	fb02 4808 	mla	r8, r2, r8, r4
9001fef0:	041a      	lsls	r2, r3, #16
9001fef2:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
9001fef6:	b2b4      	uxth	r4, r6
9001fef8:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
9001fefc:	43f6      	mvns	r6, r6
9001fefe:	4313      	orrs	r3, r2
9001ff00:	042a      	lsls	r2, r5, #16
9001ff02:	f425 65fc 	bic.w	r5, r5, #2016	@ 0x7e0
9001ff06:	b2f6      	uxtb	r6, r6
9001ff08:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
9001ff0c:	fb0e 8303 	mla	r3, lr, r3, r8
9001ff10:	432a      	orrs	r2, r5
9001ff12:	fb07 3202 	mla	r2, r7, r2, r3
9001ff16:	10c7      	asrs	r7, r0, #3
9001ff18:	0d53      	lsrs	r3, r2, #21
9001ff1a:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
9001ff1e:	0952      	lsrs	r2, r2, #5
9001ff20:	fb17 f706 	smulbb	r7, r7, r6
9001ff24:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
9001ff28:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
9001ff2c:	431a      	orrs	r2, r3
9001ff2e:	b293      	uxth	r3, r2
9001ff30:	1202      	asrs	r2, r0, #8
9001ff32:	121d      	asrs	r5, r3, #8
9001ff34:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
9001ff38:	00c0      	lsls	r0, r0, #3
9001ff3a:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
9001ff3e:	fb12 f206 	smulbb	r2, r2, r6
9001ff42:	b2c0      	uxtb	r0, r0
9001ff44:	fb05 2504 	mla	r5, r5, r4, r2
9001ff48:	10da      	asrs	r2, r3, #3
9001ff4a:	fb10 f006 	smulbb	r0, r0, r6
9001ff4e:	00db      	lsls	r3, r3, #3
9001ff50:	b2ad      	uxth	r5, r5
9001ff52:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
9001ff56:	b2db      	uxtb	r3, r3
9001ff58:	fb02 7204 	mla	r2, r2, r4, r7
9001ff5c:	fb03 0004 	mla	r0, r3, r4, r0
9001ff60:	1c6b      	adds	r3, r5, #1
9001ff62:	b292      	uxth	r2, r2
9001ff64:	b280      	uxth	r0, r0
9001ff66:	eb03 2515 	add.w	r5, r3, r5, lsr #8
9001ff6a:	1c43      	adds	r3, r0, #1
9001ff6c:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
9001ff70:	eb03 2310 	add.w	r3, r3, r0, lsr #8
9001ff74:	1c50      	adds	r0, r2, #1
9001ff76:	eb00 2212 	add.w	r2, r0, r2, lsr #8
9001ff7a:	f3c3 23c4 	ubfx	r3, r3, #11, #5
9001ff7e:	0952      	lsrs	r2, r2, #5
9001ff80:	432b      	orrs	r3, r5
9001ff82:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
9001ff86:	4313      	orrs	r3, r2
9001ff88:	800b      	strh	r3, [r1, #0]
9001ff8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9001ff8e:	4680      	mov	r8, r0
9001ff90:	e763      	b.n	9001fe5a <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x3e>
9001ff92:	4684      	mov	ip, r0
9001ff94:	4680      	mov	r8, r0
9001ff96:	e76c      	b.n	9001fe72 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
9001ff98:	4684      	mov	ip, r0
9001ff9a:	e76a      	b.n	9001fe72 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
9001ff9c:	4605      	mov	r5, r0
9001ff9e:	e779      	b.n	9001fe94 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x78>
9001ffa0:	4603      	mov	r3, r0
9001ffa2:	4605      	mov	r5, r0
9001ffa4:	e782      	b.n	9001feac <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>
9001ffa6:	4603      	mov	r3, r0
9001ffa8:	e780      	b.n	9001feac <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>

9001ffaa <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001ffaa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001ffae:	b093      	sub	sp, #76	@ 0x4c
9001ffb0:	461d      	mov	r5, r3
9001ffb2:	9210      	str	r2, [sp, #64]	@ 0x40
9001ffb4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
9001ffb6:	f89d 2094 	ldrb.w	r2, [sp, #148]	@ 0x94
9001ffba:	910a      	str	r1, [sp, #40]	@ 0x28
9001ffbc:	920b      	str	r2, [sp, #44]	@ 0x2c
9001ffbe:	6859      	ldr	r1, [r3, #4]
9001ffc0:	681b      	ldr	r3, [r3, #0]
9001ffc2:	9011      	str	r0, [sp, #68]	@ 0x44
9001ffc4:	e9dd 2722 	ldrd	r2, r7, [sp, #136]	@ 0x88
9001ffc8:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	@ 0x74
9001ffcc:	fb01 2707 	mla	r7, r1, r7, r2
9001ffd0:	eb03 0347 	add.w	r3, r3, r7, lsl #1
9001ffd4:	9307      	str	r3, [sp, #28]
9001ffd6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
9001ffd8:	681b      	ldr	r3, [r3, #0]
9001ffda:	9309      	str	r3, [sp, #36]	@ 0x24
9001ffdc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
9001ffde:	43db      	mvns	r3, r3
9001ffe0:	b2db      	uxtb	r3, r3
9001ffe2:	9308      	str	r3, [sp, #32]
9001ffe4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
9001ffe6:	2b00      	cmp	r3, #0
9001ffe8:	dc03      	bgt.n	9001fff2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
9001ffea:	9b10      	ldr	r3, [sp, #64]	@ 0x40
9001ffec:	2b00      	cmp	r3, #0
9001ffee:	f340 8205 	ble.w	900203fc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
9001fff2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
9001fff4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
9001fff8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
9001fffc:	1e48      	subs	r0, r1, #1
9001fffe:	f102 3cff 	add.w	ip, r2, #4294967295
90020002:	2d00      	cmp	r5, #0
90020004:	f340 80da 	ble.w	900201bc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
90020008:	ea5f 4e24 	movs.w	lr, r4, asr #16
9002000c:	ea4f 4326 	mov.w	r3, r6, asr #16
90020010:	d406      	bmi.n	90020020 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
90020012:	4586      	cmp	lr, r0
90020014:	da04      	bge.n	90020020 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
90020016:	2b00      	cmp	r3, #0
90020018:	db02      	blt.n	90020020 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
9002001a:	4563      	cmp	r3, ip
9002001c:	f2c0 80cf 	blt.w	900201be <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
90020020:	f11e 0e01 	adds.w	lr, lr, #1
90020024:	f100 80c1 	bmi.w	900201aa <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
90020028:	4571      	cmp	r1, lr
9002002a:	f2c0 80be 	blt.w	900201aa <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
9002002e:	3301      	adds	r3, #1
90020030:	f100 80bb 	bmi.w	900201aa <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
90020034:	429a      	cmp	r2, r3
90020036:	f2c0 80b8 	blt.w	900201aa <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
9002003a:	46a9      	mov	r9, r5
9002003c:	f8dd 801c 	ldr.w	r8, [sp, #28]
90020040:	f1b9 0f00 	cmp.w	r9, #0
90020044:	f340 80d8 	ble.w	900201f8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
90020048:	9b24      	ldr	r3, [sp, #144]	@ 0x90
9002004a:	1421      	asrs	r1, r4, #16
9002004c:	ea4f 4026 	mov.w	r0, r6, asr #16
90020050:	f3c4 3203 	ubfx	r2, r4, #12, #4
90020054:	f3c6 3c03 	ubfx	ip, r6, #12, #4
90020058:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
9002005c:	f100 8112 	bmi.w	90020284 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
90020060:	f10e 3aff 	add.w	sl, lr, #4294967295
90020064:	4551      	cmp	r1, sl
90020066:	f280 810d 	bge.w	90020284 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
9002006a:	2800      	cmp	r0, #0
9002006c:	f2c0 810a 	blt.w	90020284 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
90020070:	f103 3aff 	add.w	sl, r3, #4294967295
90020074:	4550      	cmp	r0, sl
90020076:	f280 8105 	bge.w	90020284 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
9002007a:	fa0f f38e 	sxth.w	r3, lr
9002007e:	fb00 1103 	mla	r1, r0, r3, r1
90020082:	9809      	ldr	r0, [sp, #36]	@ 0x24
90020084:	eb00 0a41 	add.w	sl, r0, r1, lsl #1
90020088:	f830 e011 	ldrh.w	lr, [r0, r1, lsl #1]
9002008c:	f8ba 1002 	ldrh.w	r1, [sl, #2]
90020090:	f1bc 0f00 	cmp.w	ip, #0
90020094:	d007      	beq.n	900200a6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfc>
90020096:	005b      	lsls	r3, r3, #1
90020098:	eb0a 0003 	add.w	r0, sl, r3
9002009c:	f83a 3003 	ldrh.w	r3, [sl, r3]
900200a0:	930c      	str	r3, [sp, #48]	@ 0x30
900200a2:	8843      	ldrh	r3, [r0, #2]
900200a4:	930d      	str	r3, [sp, #52]	@ 0x34
900200a6:	ea4f 400e 	mov.w	r0, lr, lsl #16
900200aa:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
900200ae:	fb12 f30c 	smulbb	r3, r2, ip
900200b2:	ea4f 4a01 	mov.w	sl, r1, lsl #16
900200b6:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
900200ba:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
900200be:	10db      	asrs	r3, r3, #3
900200c0:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
900200c4:	ea40 000e 	orr.w	r0, r0, lr
900200c8:	f1cc 0e10 	rsb	lr, ip, #16
900200cc:	ea4a 0101 	orr.w	r1, sl, r1
900200d0:	9f08      	ldr	r7, [sp, #32]
900200d2:	ebae 0e02 	sub.w	lr, lr, r2
900200d6:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
900200da:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
900200de:	4351      	muls	r1, r2
900200e0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
900200e2:	fb0e 1e00 	mla	lr, lr, r0, r1
900200e6:	990c      	ldr	r1, [sp, #48]	@ 0x30
900200e8:	0410      	lsls	r0, r2, #16
900200ea:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
900200ee:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
900200f2:	4310      	orrs	r0, r2
900200f4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
900200f6:	0412      	lsls	r2, r2, #16
900200f8:	fb03 e000 	mla	r0, r3, r0, lr
900200fc:	f421 6efc 	bic.w	lr, r1, #2016	@ 0x7e0
90020100:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
90020104:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
90020108:	ea42 020e 	orr.w	r2, r2, lr
9002010c:	fb03 0302 	mla	r3, r3, r2, r0
90020110:	f8b8 0000 	ldrh.w	r0, [r8]
90020114:	0d5a      	lsrs	r2, r3, #21
90020116:	095b      	lsrs	r3, r3, #5
90020118:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
9002011c:	1201      	asrs	r1, r0, #8
9002011e:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
90020122:	ea4f 0ee0 	mov.w	lr, r0, asr #3
90020126:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
9002012a:	00c0      	lsls	r0, r0, #3
9002012c:	4313      	orrs	r3, r2
9002012e:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
90020132:	fb11 f107 	smulbb	r1, r1, r7
90020136:	b2c0      	uxtb	r0, r0
90020138:	b29b      	uxth	r3, r3
9002013a:	f00e 0efc 	and.w	lr, lr, #252	@ 0xfc
9002013e:	fb10 f007 	smulbb	r0, r0, r7
90020142:	fb1e fe07 	smulbb	lr, lr, r7
90020146:	ea4f 2c23 	mov.w	ip, r3, asr #8
9002014a:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
9002014e:	fb0c 1c02 	mla	ip, ip, r2, r1
90020152:	10d9      	asrs	r1, r3, #3
90020154:	00db      	lsls	r3, r3, #3
90020156:	fa1f fc8c 	uxth.w	ip, ip
9002015a:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
9002015e:	b2db      	uxtb	r3, r3
90020160:	fb01 e102 	mla	r1, r1, r2, lr
90020164:	fb03 0302 	mla	r3, r3, r2, r0
90020168:	b289      	uxth	r1, r1
9002016a:	b29a      	uxth	r2, r3
9002016c:	f10c 0301 	add.w	r3, ip, #1
90020170:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
90020174:	1c53      	adds	r3, r2, #1
90020176:	eb03 2312 	add.w	r3, r3, r2, lsr #8
9002017a:	1c4a      	adds	r2, r1, #1
9002017c:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
90020180:	eb02 2111 	add.w	r1, r2, r1, lsr #8
90020184:	f3c3 23c4 	ubfx	r3, r3, #11, #5
90020188:	0949      	lsrs	r1, r1, #5
9002018a:	ea43 030c 	orr.w	r3, r3, ip
9002018e:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
90020192:	430b      	orrs	r3, r1
90020194:	f8a8 3000 	strh.w	r3, [r8]
90020198:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
9002019a:	f108 0802 	add.w	r8, r8, #2
9002019e:	f109 39ff 	add.w	r9, r9, #4294967295
900201a2:	441c      	add	r4, r3
900201a4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
900201a6:	441e      	add	r6, r3
900201a8:	e74a      	b.n	90020040 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
900201aa:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
900201ac:	3d01      	subs	r5, #1
900201ae:	441c      	add	r4, r3
900201b0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
900201b2:	441e      	add	r6, r3
900201b4:	9b07      	ldr	r3, [sp, #28]
900201b6:	3302      	adds	r3, #2
900201b8:	9307      	str	r3, [sp, #28]
900201ba:	e722      	b.n	90020002 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
900201bc:	d022      	beq.n	90020204 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
900201be:	1e6b      	subs	r3, r5, #1
900201c0:	981f      	ldr	r0, [sp, #124]	@ 0x7c
900201c2:	fb00 4003 	mla	r0, r0, r3, r4
900201c6:	1400      	asrs	r0, r0, #16
900201c8:	f53f af37 	bmi.w	9002003a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
900201cc:	3901      	subs	r1, #1
900201ce:	4288      	cmp	r0, r1
900201d0:	f6bf af33 	bge.w	9002003a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
900201d4:	9920      	ldr	r1, [sp, #128]	@ 0x80
900201d6:	fb01 6303 	mla	r3, r1, r3, r6
900201da:	141b      	asrs	r3, r3, #16
900201dc:	f53f af2d 	bmi.w	9002003a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
900201e0:	3a01      	subs	r2, #1
900201e2:	4293      	cmp	r3, r2
900201e4:	f6bf af29 	bge.w	9002003a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
900201e8:	46a8      	mov	r8, r5
900201ea:	f8dd 901c 	ldr.w	r9, [sp, #28]
900201ee:	f8bd a02c 	ldrh.w	sl, [sp, #44]	@ 0x2c
900201f2:	f1b8 0f00 	cmp.w	r8, #0
900201f6:	dc60      	bgt.n	900202ba <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x310>
900201f8:	9b07      	ldr	r3, [sp, #28]
900201fa:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
900201fe:	eb03 0345 	add.w	r3, r3, r5, lsl #1
90020202:	9307      	str	r3, [sp, #28]
90020204:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
90020206:	2b00      	cmp	r3, #0
90020208:	f340 80f8 	ble.w	900203fc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
9002020c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
90020210:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
90020212:	ee30 0a04 	vadd.f32	s0, s0, s8
90020216:	ee70 0aa4 	vadd.f32	s1, s1, s9
9002021a:	eef0 6a62 	vmov.f32	s13, s5
9002021e:	eec7 7a00 	vdiv.f32	s15, s14, s0
90020222:	ee31 1a05 	vadd.f32	s2, s2, s10
90020226:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9002022a:	ee16 4a90 	vmov	r4, s13
9002022e:	eef0 6a43 	vmov.f32	s13, s6
90020232:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90020236:	ee16 6a90 	vmov	r6, s13
9002023a:	ee20 7aa7 	vmul.f32	s14, s1, s15
9002023e:	ee61 7a27 	vmul.f32	s15, s2, s15
90020242:	ee77 2a62 	vsub.f32	s5, s14, s5
90020246:	ee37 3ac3 	vsub.f32	s6, s15, s6
9002024a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9002024e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
90020252:	ee12 2a90 	vmov	r2, s5
90020256:	eef0 2a47 	vmov.f32	s5, s14
9002025a:	fb92 f3f3 	sdiv	r3, r2, r3
9002025e:	ee13 2a10 	vmov	r2, s6
90020262:	931f      	str	r3, [sp, #124]	@ 0x7c
90020264:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
90020266:	eeb0 3a67 	vmov.f32	s6, s15
9002026a:	fb92 f3f3 	sdiv	r3, r2, r3
9002026e:	9320      	str	r3, [sp, #128]	@ 0x80
90020270:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
90020272:	9a10      	ldr	r2, [sp, #64]	@ 0x40
90020274:	3b01      	subs	r3, #1
90020276:	930a      	str	r3, [sp, #40]	@ 0x28
90020278:	bf08      	it	eq
9002027a:	4615      	moveq	r5, r2
9002027c:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
9002027e:	bf18      	it	ne
90020280:	461d      	movne	r5, r3
90020282:	e6af      	b.n	9001ffe4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
90020284:	f111 0a01 	adds.w	sl, r1, #1
90020288:	d486      	bmi.n	90020198 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
9002028a:	45d6      	cmp	lr, sl
9002028c:	db84      	blt.n	90020198 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
9002028e:	f110 0a01 	adds.w	sl, r0, #1
90020292:	d481      	bmi.n	90020198 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
90020294:	4553      	cmp	r3, sl
90020296:	f6ff af7f 	blt.w	90020198 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
9002029a:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
9002029c:	b21b      	sxth	r3, r3
9002029e:	9101      	str	r1, [sp, #4]
900202a0:	4641      	mov	r1, r8
900202a2:	9300      	str	r3, [sp, #0]
900202a4:	fa0f f38e 	sxth.w	r3, lr
900202a8:	e9cd 0202 	strd	r0, r2, [sp, #8]
900202ac:	e9cd c704 	strd	ip, r7, [sp, #16]
900202b0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
900202b2:	9811      	ldr	r0, [sp, #68]	@ 0x44
900202b4:	f7ff fdb2 	bl	9001fe1c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>
900202b8:	e76e      	b.n	90020198 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
900202ba:	9b24      	ldr	r3, [sp, #144]	@ 0x90
900202bc:	1430      	asrs	r0, r6, #16
900202be:	9f09      	ldr	r7, [sp, #36]	@ 0x24
900202c0:	f3c6 3e03 	ubfx	lr, r6, #12, #4
900202c4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
900202c8:	1423      	asrs	r3, r4, #16
900202ca:	f3c4 3203 	ubfx	r2, r4, #12, #4
900202ce:	fb01 3000 	mla	r0, r1, r0, r3
900202d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
900202d4:	eb03 0340 	add.w	r3, r3, r0, lsl #1
900202d8:	f837 c010 	ldrh.w	ip, [r7, r0, lsl #1]
900202dc:	8858      	ldrh	r0, [r3, #2]
900202de:	f1be 0f00 	cmp.w	lr, #0
900202e2:	d00b      	beq.n	900202fc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
900202e4:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
900202e8:	3901      	subs	r1, #1
900202ea:	0049      	lsls	r1, r1, #1
900202ec:	3102      	adds	r1, #2
900202ee:	eb03 0b01 	add.w	fp, r3, r1
900202f2:	5a5b      	ldrh	r3, [r3, r1]
900202f4:	930e      	str	r3, [sp, #56]	@ 0x38
900202f6:	f8bb 3002 	ldrh.w	r3, [fp, #2]
900202fa:	930f      	str	r3, [sp, #60]	@ 0x3c
900202fc:	ea4f 410c 	mov.w	r1, ip, lsl #16
90020300:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
90020304:	fb12 f30e 	smulbb	r3, r2, lr
90020308:	ea4f 4b00 	mov.w	fp, r0, lsl #16
9002030c:	f001 61fc 	and.w	r1, r1, #132120576	@ 0x7e00000
90020310:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
90020314:	10db      	asrs	r3, r3, #3
90020316:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
9002031a:	ea41 010c 	orr.w	r1, r1, ip
9002031e:	f1ce 0c10 	rsb	ip, lr, #16
90020322:	ea4b 0000 	orr.w	r0, fp, r0
90020326:	9f08      	ldr	r7, [sp, #32]
90020328:	ebac 0c02 	sub.w	ip, ip, r2
9002032c:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
90020330:	f108 38ff 	add.w	r8, r8, #4294967295
90020334:	4350      	muls	r0, r2
90020336:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
9002033a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
9002033c:	fb0c 0c01 	mla	ip, ip, r1, r0
90020340:	980e      	ldr	r0, [sp, #56]	@ 0x38
90020342:	ea4f 4b02 	mov.w	fp, r2, lsl #16
90020346:	f422 61fc 	bic.w	r1, r2, #2016	@ 0x7e0
9002034a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
9002034c:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
90020350:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
90020354:	0412      	lsls	r2, r2, #16
90020356:	ea4b 0101 	orr.w	r1, fp, r1
9002035a:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
9002035e:	fb03 c101 	mla	r1, r3, r1, ip
90020362:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
90020366:	4302      	orrs	r2, r0
90020368:	fb03 1202 	mla	r2, r3, r2, r1
9002036c:	ea4f 5b52 	mov.w	fp, r2, lsr #21
90020370:	0952      	lsrs	r2, r2, #5
90020372:	f40b 6bfc 	and.w	fp, fp, #2016	@ 0x7e0
90020376:	f422 63fc 	bic.w	r3, r2, #2016	@ 0x7e0
9002037a:	f8b9 2000 	ldrh.w	r2, [r9]
9002037e:	ea4b 0303 	orr.w	r3, fp, r3
90020382:	1211      	asrs	r1, r2, #8
90020384:	ea4f 0ce2 	mov.w	ip, r2, asr #3
90020388:	b29b      	uxth	r3, r3
9002038a:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
9002038e:	00d2      	lsls	r2, r2, #3
90020390:	f00c 0cfc 	and.w	ip, ip, #252	@ 0xfc
90020394:	fb11 f107 	smulbb	r1, r1, r7
90020398:	1218      	asrs	r0, r3, #8
9002039a:	fb1c fc07 	smulbb	ip, ip, r7
9002039e:	b2d2      	uxtb	r2, r2
900203a0:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
900203a4:	fb12 f207 	smulbb	r2, r2, r7
900203a8:	fb00 100a 	mla	r0, r0, sl, r1
900203ac:	10d9      	asrs	r1, r3, #3
900203ae:	00db      	lsls	r3, r3, #3
900203b0:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
900203b4:	b280      	uxth	r0, r0
900203b6:	b2db      	uxtb	r3, r3
900203b8:	fb01 c10a 	mla	r1, r1, sl, ip
900203bc:	fb03 230a 	mla	r3, r3, sl, r2
900203c0:	1c42      	adds	r2, r0, #1
900203c2:	b289      	uxth	r1, r1
900203c4:	b29b      	uxth	r3, r3
900203c6:	eb02 2010 	add.w	r0, r2, r0, lsr #8
900203ca:	f101 0c01 	add.w	ip, r1, #1
900203ce:	1c5a      	adds	r2, r3, #1
900203d0:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
900203d4:	f400 4078 	and.w	r0, r0, #63488	@ 0xf800
900203d8:	eb02 2213 	add.w	r2, r2, r3, lsr #8
900203dc:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
900203de:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
900203e2:	f3c2 22c4 	ubfx	r2, r2, #11, #5
900203e6:	441c      	add	r4, r3
900203e8:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
900203ec:	9b20      	ldr	r3, [sp, #128]	@ 0x80
900203ee:	4310      	orrs	r0, r2
900203f0:	441e      	add	r6, r3
900203f2:	ea40 000c 	orr.w	r0, r0, ip
900203f6:	f829 0b02 	strh.w	r0, [r9], #2
900203fa:	e6fa      	b.n	900201f2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
900203fc:	b013      	add	sp, #76	@ 0x4c
900203fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

90020402 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>:
90020402:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
90020406:	e9dd 4e08 	ldrd	r4, lr, [sp, #32]
9002040a:	f9bd 901c 	ldrsh.w	r9, [sp, #28]
9002040e:	fb0e 4703 	mla	r7, lr, r3, r4
90020412:	f1be 0f00 	cmp.w	lr, #0
90020416:	f89d 5028 	ldrb.w	r5, [sp, #40]	@ 0x28
9002041a:	f89d 602c 	ldrb.w	r6, [sp, #44]	@ 0x2c
9002041e:	eb02 0847 	add.w	r8, r2, r7, lsl #1
90020422:	8808      	ldrh	r0, [r1, #0]
90020424:	db60      	blt.n	900204e8 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
90020426:	45f1      	cmp	r9, lr
90020428:	dd5e      	ble.n	900204e8 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
9002042a:	2c00      	cmp	r4, #0
9002042c:	db5a      	blt.n	900204e4 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
9002042e:	42a3      	cmp	r3, r4
90020430:	dd58      	ble.n	900204e4 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
90020432:	f832 c017 	ldrh.w	ip, [r2, r7, lsl #1]
90020436:	1c62      	adds	r2, r4, #1
90020438:	d459      	bmi.n	900204ee <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
9002043a:	4293      	cmp	r3, r2
9002043c:	dd57      	ble.n	900204ee <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
9002043e:	2d00      	cmp	r5, #0
90020440:	d055      	beq.n	900204ee <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
90020442:	f8b8 7002 	ldrh.w	r7, [r8, #2]
90020446:	f11e 0e01 	adds.w	lr, lr, #1
9002044a:	d454      	bmi.n	900204f6 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
9002044c:	45f1      	cmp	r9, lr
9002044e:	dd52      	ble.n	900204f6 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
90020450:	2e00      	cmp	r6, #0
90020452:	d050      	beq.n	900204f6 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
90020454:	2c00      	cmp	r4, #0
90020456:	db4c      	blt.n	900204f2 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
90020458:	42a3      	cmp	r3, r4
9002045a:	dd4a      	ble.n	900204f2 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
9002045c:	f838 2013 	ldrh.w	r2, [r8, r3, lsl #1]
90020460:	3401      	adds	r4, #1
90020462:	d405      	bmi.n	90020470 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
90020464:	42a3      	cmp	r3, r4
90020466:	dd03      	ble.n	90020470 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
90020468:	b115      	cbz	r5, 90020470 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
9002046a:	3301      	adds	r3, #1
9002046c:	f838 0013 	ldrh.w	r0, [r8, r3, lsl #1]
90020470:	fb15 f406 	smulbb	r4, r5, r6
90020474:	ea4f 430c 	mov.w	r3, ip, lsl #16
90020478:	ea4f 4e07 	mov.w	lr, r7, lsl #16
9002047c:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
90020480:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
90020484:	f3c4 04c7 	ubfx	r4, r4, #3, #8
90020488:	f00e 6efc 	and.w	lr, lr, #132120576	@ 0x7e00000
9002048c:	f427 67fc 	bic.w	r7, r7, #2016	@ 0x7e0
90020490:	ea43 0c0c 	orr.w	ip, r3, ip
90020494:	f1c6 0310 	rsb	r3, r6, #16
90020498:	ea4e 0707 	orr.w	r7, lr, r7
9002049c:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
900204a0:	1b5b      	subs	r3, r3, r5
900204a2:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
900204a6:	eb04 0343 	add.w	r3, r4, r3, lsl #1
900204aa:	437d      	muls	r5, r7
900204ac:	fb03 5c0c 	mla	ip, r3, ip, r5
900204b0:	0403      	lsls	r3, r0, #16
900204b2:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
900204b6:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
900204ba:	4318      	orrs	r0, r3
900204bc:	0413      	lsls	r3, r2, #16
900204be:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
900204c2:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
900204c6:	fb04 c000 	mla	r0, r4, r0, ip
900204ca:	4313      	orrs	r3, r2
900204cc:	fb06 0003 	mla	r0, r6, r3, r0
900204d0:	0d43      	lsrs	r3, r0, #21
900204d2:	0940      	lsrs	r0, r0, #5
900204d4:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
900204d8:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
900204dc:	4318      	orrs	r0, r3
900204de:	8008      	strh	r0, [r1, #0]
900204e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
900204e4:	4684      	mov	ip, r0
900204e6:	e7a6      	b.n	90020436 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x34>
900204e8:	4607      	mov	r7, r0
900204ea:	4684      	mov	ip, r0
900204ec:	e7ab      	b.n	90020446 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
900204ee:	4607      	mov	r7, r0
900204f0:	e7a9      	b.n	90020446 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
900204f2:	4602      	mov	r2, r0
900204f4:	e7b4      	b.n	90020460 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x5e>
900204f6:	4602      	mov	r2, r0
900204f8:	e7ba      	b.n	90020470 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>

900204fa <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
900204fa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900204fe:	b08f      	sub	sp, #60	@ 0x3c
90020500:	461d      	mov	r5, r3
90020502:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
90020504:	9107      	str	r1, [sp, #28]
90020506:	920c      	str	r2, [sp, #48]	@ 0x30
90020508:	6859      	ldr	r1, [r3, #4]
9002050a:	681b      	ldr	r3, [r3, #0]
9002050c:	900d      	str	r0, [sp, #52]	@ 0x34
9002050e:	e9dd 271e 	ldrd	r2, r7, [sp, #120]	@ 0x78
90020512:	e9dd 4619 	ldrd	r4, r6, [sp, #100]	@ 0x64
90020516:	fb01 2707 	mla	r7, r1, r7, r2
9002051a:	eb03 0747 	add.w	r7, r3, r7, lsl #1
9002051e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
90020520:	f8d3 8000 	ldr.w	r8, [r3]
90020524:	9b07      	ldr	r3, [sp, #28]
90020526:	2b00      	cmp	r3, #0
90020528:	dc03      	bgt.n	90020532 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
9002052a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
9002052c:	2b00      	cmp	r3, #0
9002052e:	f340 8182 	ble.w	90020836 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33c>
90020532:	9b20      	ldr	r3, [sp, #128]	@ 0x80
90020534:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
90020538:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
9002053c:	1e48      	subs	r0, r1, #1
9002053e:	f102 3cff 	add.w	ip, r2, #4294967295
90020542:	2d00      	cmp	r5, #0
90020544:	f340 809b 	ble.w	9002067e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x184>
90020548:	ea5f 4e24 	movs.w	lr, r4, asr #16
9002054c:	ea4f 4326 	mov.w	r3, r6, asr #16
90020550:	d406      	bmi.n	90020560 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
90020552:	4586      	cmp	lr, r0
90020554:	da04      	bge.n	90020560 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
90020556:	2b00      	cmp	r3, #0
90020558:	db02      	blt.n	90020560 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
9002055a:	4563      	cmp	r3, ip
9002055c:	f2c0 8090 	blt.w	90020680 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
90020560:	f11e 0e01 	adds.w	lr, lr, #1
90020564:	f100 8084 	bmi.w	90020670 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
90020568:	4571      	cmp	r1, lr
9002056a:	f2c0 8081 	blt.w	90020670 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
9002056e:	3301      	adds	r3, #1
90020570:	d47e      	bmi.n	90020670 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
90020572:	429a      	cmp	r2, r3
90020574:	db7c      	blt.n	90020670 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
90020576:	46aa      	mov	sl, r5
90020578:	46b9      	mov	r9, r7
9002057a:	f1ba 0f00 	cmp.w	sl, #0
9002057e:	f340 8099 	ble.w	900206b4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
90020582:	9b20      	ldr	r3, [sp, #128]	@ 0x80
90020584:	1421      	asrs	r1, r4, #16
90020586:	ea4f 4026 	mov.w	r0, r6, asr #16
9002058a:	f3c4 3203 	ubfx	r2, r4, #12, #4
9002058e:	f3c6 3c03 	ubfx	ip, r6, #12, #4
90020592:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
90020596:	f100 80d1 	bmi.w	9002073c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
9002059a:	f10e 3bff 	add.w	fp, lr, #4294967295
9002059e:	4559      	cmp	r1, fp
900205a0:	f280 80cc 	bge.w	9002073c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
900205a4:	2800      	cmp	r0, #0
900205a6:	f2c0 80c9 	blt.w	9002073c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
900205aa:	f103 3bff 	add.w	fp, r3, #4294967295
900205ae:	4558      	cmp	r0, fp
900205b0:	f280 80c4 	bge.w	9002073c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
900205b4:	fa0f fe8e 	sxth.w	lr, lr
900205b8:	fb00 110e 	mla	r1, r0, lr, r1
900205bc:	eb08 0041 	add.w	r0, r8, r1, lsl #1
900205c0:	f838 b011 	ldrh.w	fp, [r8, r1, lsl #1]
900205c4:	8841      	ldrh	r1, [r0, #2]
900205c6:	f1bc 0f00 	cmp.w	ip, #0
900205ca:	d00b      	beq.n	900205e4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xea>
900205cc:	f10e 4300 	add.w	r3, lr, #2147483648	@ 0x80000000
900205d0:	3b01      	subs	r3, #1
900205d2:	005b      	lsls	r3, r3, #1
900205d4:	3302      	adds	r3, #2
900205d6:	eb00 0e03 	add.w	lr, r0, r3
900205da:	5ac3      	ldrh	r3, [r0, r3]
900205dc:	9308      	str	r3, [sp, #32]
900205de:	f8be 3002 	ldrh.w	r3, [lr, #2]
900205e2:	9309      	str	r3, [sp, #36]	@ 0x24
900205e4:	ea4f 400b 	mov.w	r0, fp, lsl #16
900205e8:	f42b 6bfc 	bic.w	fp, fp, #2016	@ 0x7e0
900205ec:	fb12 f30c 	smulbb	r3, r2, ip
900205f0:	f1cc 0e10 	rsb	lr, ip, #16
900205f4:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
900205f8:	10db      	asrs	r3, r3, #3
900205fa:	ebae 0e02 	sub.w	lr, lr, r2
900205fe:	ea40 000b 	orr.w	r0, r0, fp
90020602:	ea4f 4b01 	mov.w	fp, r1, lsl #16
90020606:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
9002060a:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
9002060e:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
90020612:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
90020616:	ea4b 0101 	orr.w	r1, fp, r1
9002061a:	4351      	muls	r1, r2
9002061c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
9002061e:	fb0e 1e00 	mla	lr, lr, r0, r1
90020622:	0410      	lsls	r0, r2, #16
90020624:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
90020628:	9908      	ldr	r1, [sp, #32]
9002062a:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
9002062e:	4310      	orrs	r0, r2
90020630:	9a08      	ldr	r2, [sp, #32]
90020632:	0412      	lsls	r2, r2, #16
90020634:	fb03 e000 	mla	r0, r3, r0, lr
90020638:	f421 6efc 	bic.w	lr, r1, #2016	@ 0x7e0
9002063c:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
90020640:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
90020644:	ea42 020e 	orr.w	r2, r2, lr
90020648:	fb03 0302 	mla	r3, r3, r2, r0
9002064c:	0d5a      	lsrs	r2, r3, #21
9002064e:	095b      	lsrs	r3, r3, #5
90020650:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
90020654:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
90020658:	4313      	orrs	r3, r2
9002065a:	f8a9 3000 	strh.w	r3, [r9]
9002065e:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
90020660:	f109 0902 	add.w	r9, r9, #2
90020664:	f10a 3aff 	add.w	sl, sl, #4294967295
90020668:	441c      	add	r4, r3
9002066a:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
9002066c:	441e      	add	r6, r3
9002066e:	e784      	b.n	9002057a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
90020670:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
90020672:	3d01      	subs	r5, #1
90020674:	3702      	adds	r7, #2
90020676:	441c      	add	r4, r3
90020678:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
9002067a:	441e      	add	r6, r3
9002067c:	e761      	b.n	90020542 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
9002067e:	d01d      	beq.n	900206bc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
90020680:	1e6b      	subs	r3, r5, #1
90020682:	981b      	ldr	r0, [sp, #108]	@ 0x6c
90020684:	fb00 4003 	mla	r0, r0, r3, r4
90020688:	1400      	asrs	r0, r0, #16
9002068a:	f53f af74 	bmi.w	90020576 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
9002068e:	3901      	subs	r1, #1
90020690:	4288      	cmp	r0, r1
90020692:	f6bf af70 	bge.w	90020576 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
90020696:	991c      	ldr	r1, [sp, #112]	@ 0x70
90020698:	fb01 6303 	mla	r3, r1, r3, r6
9002069c:	141b      	asrs	r3, r3, #16
9002069e:	f53f af6a 	bmi.w	90020576 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
900206a2:	3a01      	subs	r2, #1
900206a4:	4293      	cmp	r3, r2
900206a6:	f6bf af66 	bge.w	90020576 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
900206aa:	46a9      	mov	r9, r5
900206ac:	46ba      	mov	sl, r7
900206ae:	f1b9 0f00 	cmp.w	r9, #0
900206b2:	dc5b      	bgt.n	9002076c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
900206b4:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
900206b8:	eb07 0745 	add.w	r7, r7, r5, lsl #1
900206bc:	9b07      	ldr	r3, [sp, #28]
900206be:	2b00      	cmp	r3, #0
900206c0:	f340 80b9 	ble.w	90020836 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33c>
900206c4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
900206c8:	9b18      	ldr	r3, [sp, #96]	@ 0x60
900206ca:	ee30 0a04 	vadd.f32	s0, s0, s8
900206ce:	ee70 0aa4 	vadd.f32	s1, s1, s9
900206d2:	eef0 6a62 	vmov.f32	s13, s5
900206d6:	eec7 7a00 	vdiv.f32	s15, s14, s0
900206da:	ee31 1a05 	vadd.f32	s2, s2, s10
900206de:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
900206e2:	ee16 4a90 	vmov	r4, s13
900206e6:	eef0 6a43 	vmov.f32	s13, s6
900206ea:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
900206ee:	ee16 6a90 	vmov	r6, s13
900206f2:	ee20 7aa7 	vmul.f32	s14, s1, s15
900206f6:	ee61 7a27 	vmul.f32	s15, s2, s15
900206fa:	ee77 2a62 	vsub.f32	s5, s14, s5
900206fe:	ee37 3ac3 	vsub.f32	s6, s15, s6
90020702:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90020706:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9002070a:	ee12 2a90 	vmov	r2, s5
9002070e:	eef0 2a47 	vmov.f32	s5, s14
90020712:	fb92 f3f3 	sdiv	r3, r2, r3
90020716:	ee13 2a10 	vmov	r2, s6
9002071a:	931b      	str	r3, [sp, #108]	@ 0x6c
9002071c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
9002071e:	eeb0 3a67 	vmov.f32	s6, s15
90020722:	fb92 f3f3 	sdiv	r3, r2, r3
90020726:	931c      	str	r3, [sp, #112]	@ 0x70
90020728:	9b07      	ldr	r3, [sp, #28]
9002072a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
9002072c:	3b01      	subs	r3, #1
9002072e:	9307      	str	r3, [sp, #28]
90020730:	bf08      	it	eq
90020732:	4615      	moveq	r5, r2
90020734:	9b18      	ldr	r3, [sp, #96]	@ 0x60
90020736:	bf18      	it	ne
90020738:	461d      	movne	r5, r3
9002073a:	e6f3      	b.n	90020524 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
9002073c:	f111 0b01 	adds.w	fp, r1, #1
90020740:	d48d      	bmi.n	9002065e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
90020742:	45de      	cmp	lr, fp
90020744:	db8b      	blt.n	9002065e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
90020746:	f110 0b01 	adds.w	fp, r0, #1
9002074a:	d488      	bmi.n	9002065e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
9002074c:	455b      	cmp	r3, fp
9002074e:	db86      	blt.n	9002065e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
90020750:	b21b      	sxth	r3, r3
90020752:	e9cd 1001 	strd	r1, r0, [sp, #4]
90020756:	e9cd 2c03 	strd	r2, ip, [sp, #12]
9002075a:	9300      	str	r3, [sp, #0]
9002075c:	4642      	mov	r2, r8
9002075e:	fa0f f38e 	sxth.w	r3, lr
90020762:	4649      	mov	r1, r9
90020764:	980d      	ldr	r0, [sp, #52]	@ 0x34
90020766:	f7ff fe4c 	bl	90020402 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>
9002076a:	e778      	b.n	9002065e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
9002076c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
9002076e:	1420      	asrs	r0, r4, #16
90020770:	1431      	asrs	r1, r6, #16
90020772:	f3c6 3e03 	ubfx	lr, r6, #12, #4
90020776:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
9002077a:	f3c4 3203 	ubfx	r2, r4, #12, #4
9002077e:	fb03 0101 	mla	r1, r3, r1, r0
90020782:	eb08 0041 	add.w	r0, r8, r1, lsl #1
90020786:	f838 c011 	ldrh.w	ip, [r8, r1, lsl #1]
9002078a:	8841      	ldrh	r1, [r0, #2]
9002078c:	f1be 0f00 	cmp.w	lr, #0
90020790:	d00b      	beq.n	900207aa <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
90020792:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
90020796:	3b01      	subs	r3, #1
90020798:	005b      	lsls	r3, r3, #1
9002079a:	3302      	adds	r3, #2
9002079c:	eb00 0b03 	add.w	fp, r0, r3
900207a0:	5ac3      	ldrh	r3, [r0, r3]
900207a2:	930a      	str	r3, [sp, #40]	@ 0x28
900207a4:	f8bb 3002 	ldrh.w	r3, [fp, #2]
900207a8:	930b      	str	r3, [sp, #44]	@ 0x2c
900207aa:	ea4f 400c 	mov.w	r0, ip, lsl #16
900207ae:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
900207b2:	fb12 f30e 	smulbb	r3, r2, lr
900207b6:	ea4f 4b01 	mov.w	fp, r1, lsl #16
900207ba:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
900207be:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
900207c2:	10db      	asrs	r3, r3, #3
900207c4:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
900207c8:	ea40 000c 	orr.w	r0, r0, ip
900207cc:	f1ce 0c10 	rsb	ip, lr, #16
900207d0:	ea4b 0101 	orr.w	r1, fp, r1
900207d4:	f109 39ff 	add.w	r9, r9, #4294967295
900207d8:	ebac 0c02 	sub.w	ip, ip, r2
900207dc:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
900207e0:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
900207e4:	4351      	muls	r1, r2
900207e6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
900207e8:	fb0c 1c00 	mla	ip, ip, r0, r1
900207ec:	990a      	ldr	r1, [sp, #40]	@ 0x28
900207ee:	ea4f 4b02 	mov.w	fp, r2, lsl #16
900207f2:	f422 60fc 	bic.w	r0, r2, #2016	@ 0x7e0
900207f6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
900207f8:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
900207fc:	0412      	lsls	r2, r2, #16
900207fe:	ea4b 0000 	orr.w	r0, fp, r0
90020802:	f421 6bfc 	bic.w	fp, r1, #2016	@ 0x7e0
90020806:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
9002080a:	fb03 c000 	mla	r0, r3, r0, ip
9002080e:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
90020812:	ea42 0b0b 	orr.w	fp, r2, fp
90020816:	fb03 000b 	mla	r0, r3, fp, r0
9002081a:	0d43      	lsrs	r3, r0, #21
9002081c:	0940      	lsrs	r0, r0, #5
9002081e:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
90020822:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
90020826:	4318      	orrs	r0, r3
90020828:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
9002082a:	441c      	add	r4, r3
9002082c:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
9002082e:	f82a 0b02 	strh.w	r0, [sl], #2
90020832:	441e      	add	r6, r3
90020834:	e73b      	b.n	900206ae <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
90020836:	b00f      	add	sp, #60	@ 0x3c
90020838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

9002083c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>:
9002083c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90020840:	b085      	sub	sp, #20
90020842:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	@ 0x3c
90020846:	9102      	str	r1, [sp, #8]
90020848:	2c00      	cmp	r4, #0
9002084a:	fb04 7103 	mla	r1, r4, r3, r7
9002084e:	f9bd e038 	ldrsh.w	lr, [sp, #56]	@ 0x38
90020852:	f89d 6044 	ldrb.w	r6, [sp, #68]	@ 0x44
90020856:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
9002085a:	f89d 0048 	ldrb.w	r0, [sp, #72]	@ 0x48
9002085e:	f2c0 811b 	blt.w	90020a98 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
90020862:	45a6      	cmp	lr, r4
90020864:	f340 8118 	ble.w	90020a98 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
90020868:	2f00      	cmp	r7, #0
9002086a:	f2c0 8113 	blt.w	90020a94 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
9002086e:	42bb      	cmp	r3, r7
90020870:	f340 8110 	ble.w	90020a94 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
90020874:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
90020878:	1c7a      	adds	r2, r7, #1
9002087a:	f100 8110 	bmi.w	90020a9e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
9002087e:	4293      	cmp	r3, r2
90020880:	f340 810d 	ble.w	90020a9e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
90020884:	2e00      	cmp	r6, #0
90020886:	f000 810c 	beq.w	90020aa2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x266>
9002088a:	f8dc 1004 	ldr.w	r1, [ip, #4]
9002088e:	3401      	adds	r4, #1
90020890:	f100 810b 	bmi.w	90020aaa <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
90020894:	45a6      	cmp	lr, r4
90020896:	f340 8108 	ble.w	90020aaa <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
9002089a:	2800      	cmp	r0, #0
9002089c:	f000 8108 	beq.w	90020ab0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x274>
900208a0:	2f00      	cmp	r7, #0
900208a2:	f2c0 8100 	blt.w	90020aa6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
900208a6:	42bb      	cmp	r3, r7
900208a8:	f340 80fd 	ble.w	90020aa6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
900208ac:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
900208b0:	3701      	adds	r7, #1
900208b2:	f100 8100 	bmi.w	90020ab6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
900208b6:	42bb      	cmp	r3, r7
900208b8:	f340 80fd 	ble.w	90020ab6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
900208bc:	2e00      	cmp	r6, #0
900208be:	f000 80fc 	beq.w	90020aba <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27e>
900208c2:	3301      	adds	r3, #1
900208c4:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
900208c8:	b2b6      	uxth	r6, r6
900208ca:	b280      	uxth	r0, r0
900208cc:	ea4f 6a11 	mov.w	sl, r1, lsr #24
900208d0:	fb00 fe06 	mul.w	lr, r0, r6
900208d4:	0136      	lsls	r6, r6, #4
900208d6:	ea4f 6b15 	mov.w	fp, r5, lsr #24
900208da:	ebce 1000 	rsb	r0, lr, r0, lsl #4
900208de:	eba6 070e 	sub.w	r7, r6, lr
900208e2:	f5c6 7380 	rsb	r3, r6, #256	@ 0x100
900208e6:	ea4f 6914 	mov.w	r9, r4, lsr #24
900208ea:	b280      	uxth	r0, r0
900208ec:	b2bf      	uxth	r7, r7
900208ee:	1a1b      	subs	r3, r3, r0
900208f0:	ea4f 6812 	mov.w	r8, r2, lsr #24
900208f4:	fb0a f607 	mul.w	r6, sl, r7
900208f8:	b29b      	uxth	r3, r3
900208fa:	fb0b 6603 	mla	r6, fp, r3, r6
900208fe:	fb00 6609 	mla	r6, r0, r9, r6
90020902:	fb0e 6608 	mla	r6, lr, r8, r6
90020906:	f3c6 2607 	ubfx	r6, r6, #8, #8
9002090a:	9600      	str	r6, [sp, #0]
9002090c:	2e00      	cmp	r6, #0
9002090e:	f000 80be 	beq.w	90020a8e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x252>
90020912:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
90020916:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
9002091a:	9e02      	ldr	r6, [sp, #8]
9002091c:	fb0b fc0c 	mul.w	ip, fp, ip
90020920:	fb0b f505 	mul.w	r5, fp, r5
90020924:	8836      	ldrh	r6, [r6, #0]
90020926:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
9002092a:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
9002092e:	9501      	str	r5, [sp, #4]
90020930:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
90020934:	44dc      	add	ip, fp
90020936:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9002093a:	f00c 15ff 	and.w	r5, ip, #16711935	@ 0xff00ff
9002093e:	9503      	str	r5, [sp, #12]
90020940:	9d01      	ldr	r5, [sp, #4]
90020942:	f505 7c80 	add.w	ip, r5, #256	@ 0x100
90020946:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
9002094a:	f001 1cff 	and.w	ip, r1, #16711935	@ 0xff00ff
9002094e:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
90020952:	fb0a fc0c 	mul.w	ip, sl, ip
90020956:	ea4f 2b15 	mov.w	fp, r5, lsr #8
9002095a:	fb0a fa01 	mul.w	sl, sl, r1
9002095e:	ea4f 251c 	mov.w	r5, ip, lsr #8
90020962:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
90020966:	f50a 7180 	add.w	r1, sl, #256	@ 0x100
9002096a:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
9002096e:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
90020972:	4465      	add	r5, ip
90020974:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
90020978:	f404 447f 	and.w	r4, r4, #65280	@ 0xff00
9002097c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90020980:	fb09 fc0c 	mul.w	ip, r9, ip
90020984:	0a2d      	lsrs	r5, r5, #8
90020986:	fb09 f904 	mul.w	r9, r9, r4
9002098a:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
9002098e:	ea4f 211c 	mov.w	r1, ip, lsr #8
90020992:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
90020996:	f509 7480 	add.w	r4, r9, #256	@ 0x100
9002099a:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
9002099e:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
900209a2:	437d      	muls	r5, r7
900209a4:	eb04 2919 	add.w	r9, r4, r9, lsr #8
900209a8:	f002 14ff 	and.w	r4, r2, #16711935	@ 0xff00ff
900209ac:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
900209b0:	4461      	add	r1, ip
900209b2:	fb08 f404 	mul.w	r4, r8, r4
900209b6:	ea4f 2919 	mov.w	r9, r9, lsr #8
900209ba:	fb08 f802 	mul.w	r8, r8, r2
900209be:	0a09      	lsrs	r1, r1, #8
900209c0:	0a22      	lsrs	r2, r4, #8
900209c2:	f104 1401 	add.w	r4, r4, #65537	@ 0x10001
900209c6:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
900209ca:	fb07 f70a 	mul.w	r7, r7, sl
900209ce:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
900209d2:	4414      	add	r4, r2
900209d4:	f508 7280 	add.w	r2, r8, #256	@ 0x100
900209d8:	0a24      	lsrs	r4, r4, #8
900209da:	eb02 2818 	add.w	r8, r2, r8, lsr #8
900209de:	9a03      	ldr	r2, [sp, #12]
900209e0:	f004 14ff 	and.w	r4, r4, #16711935	@ 0xff00ff
900209e4:	fb02 5503 	mla	r5, r2, r3, r5
900209e8:	ea4f 2818 	mov.w	r8, r8, lsr #8
900209ec:	9a00      	ldr	r2, [sp, #0]
900209ee:	fb04 540e 	mla	r4, r4, lr, r5
900209f2:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
900209f6:	1235      	asrs	r5, r6, #8
900209f8:	fb01 4100 	mla	r1, r1, r0, r4
900209fc:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
90020a00:	0a09      	lsrs	r1, r1, #8
90020a02:	f001 14ff 	and.w	r4, r1, #16711935	@ 0xff00ff
90020a06:	f40b 417f 	and.w	r1, fp, #65280	@ 0xff00
90020a0a:	fb03 7101 	mla	r1, r3, r1, r7
90020a0e:	fb0e 1e08 	mla	lr, lr, r8, r1
90020a12:	f409 417f 	and.w	r1, r9, #65280	@ 0xff00
90020a16:	fb00 e101 	mla	r1, r0, r1, lr
90020a1a:	f89d 004c 	ldrb.w	r0, [sp, #76]	@ 0x4c
90020a1e:	b287      	uxth	r7, r0
90020a20:	0a09      	lsrs	r1, r1, #8
90020a22:	437a      	muls	r2, r7
90020a24:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
90020a28:	1c53      	adds	r3, r2, #1
90020a2a:	4321      	orrs	r1, r4
90020a2c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
90020a30:	0c0a      	lsrs	r2, r1, #16
90020a32:	f3c1 2407 	ubfx	r4, r1, #8, #8
90020a36:	ea6f 2313 	mvn.w	r3, r3, lsr #8
90020a3a:	b2c8      	uxtb	r0, r1
90020a3c:	fb12 f207 	smulbb	r2, r2, r7
90020a40:	fb14 f407 	smulbb	r4, r4, r7
90020a44:	b2db      	uxtb	r3, r3
90020a46:	fb10 f007 	smulbb	r0, r0, r7
90020a4a:	fb05 2503 	mla	r5, r5, r3, r2
90020a4e:	10f2      	asrs	r2, r6, #3
90020a50:	00f6      	lsls	r6, r6, #3
90020a52:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
90020a56:	b2ad      	uxth	r5, r5
90020a58:	b2f6      	uxtb	r6, r6
90020a5a:	fb02 4203 	mla	r2, r2, r3, r4
90020a5e:	fb06 0303 	mla	r3, r6, r3, r0
90020a62:	b294      	uxth	r4, r2
90020a64:	b299      	uxth	r1, r3
90020a66:	1c6b      	adds	r3, r5, #1
90020a68:	1c62      	adds	r2, r4, #1
90020a6a:	eb03 2515 	add.w	r5, r3, r5, lsr #8
90020a6e:	1c4b      	adds	r3, r1, #1
90020a70:	eb02 2214 	add.w	r2, r2, r4, lsr #8
90020a74:	eb03 2311 	add.w	r3, r3, r1, lsr #8
90020a78:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
90020a7c:	0952      	lsrs	r2, r2, #5
90020a7e:	f3c3 23c4 	ubfx	r3, r3, #11, #5
90020a82:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
90020a86:	432b      	orrs	r3, r5
90020a88:	4313      	orrs	r3, r2
90020a8a:	9a02      	ldr	r2, [sp, #8]
90020a8c:	8013      	strh	r3, [r2, #0]
90020a8e:	b005      	add	sp, #20
90020a90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90020a94:	2500      	movs	r5, #0
90020a96:	e6ef      	b.n	90020878 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3c>
90020a98:	2100      	movs	r1, #0
90020a9a:	460d      	mov	r5, r1
90020a9c:	e6f7      	b.n	9002088e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
90020a9e:	2100      	movs	r1, #0
90020aa0:	e6f5      	b.n	9002088e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
90020aa2:	4631      	mov	r1, r6
90020aa4:	e6f3      	b.n	9002088e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
90020aa6:	2400      	movs	r4, #0
90020aa8:	e702      	b.n	900208b0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x74>
90020aaa:	2200      	movs	r2, #0
90020aac:	4614      	mov	r4, r2
90020aae:	e70b      	b.n	900208c8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
90020ab0:	4602      	mov	r2, r0
90020ab2:	4604      	mov	r4, r0
90020ab4:	e708      	b.n	900208c8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
90020ab6:	2200      	movs	r2, #0
90020ab8:	e706      	b.n	900208c8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
90020aba:	4632      	mov	r2, r6
90020abc:	e704      	b.n	900208c8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>

90020abe <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90020abe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90020ac2:	b09d      	sub	sp, #116	@ 0x74
90020ac4:	9219      	str	r2, [sp, #100]	@ 0x64
90020ac6:	9307      	str	r3, [sp, #28]
90020ac8:	9a2b      	ldr	r2, [sp, #172]	@ 0xac
90020aca:	f89d 30bc 	ldrb.w	r3, [sp, #188]	@ 0xbc
90020ace:	901b      	str	r0, [sp, #108]	@ 0x6c
90020ad0:	931a      	str	r3, [sp, #104]	@ 0x68
90020ad2:	6850      	ldr	r0, [r2, #4]
90020ad4:	9117      	str	r1, [sp, #92]	@ 0x5c
90020ad6:	6812      	ldr	r2, [r2, #0]
90020ad8:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	@ 0xb0
90020adc:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	@ 0x9c
90020ae0:	fb00 1303 	mla	r3, r0, r3, r1
90020ae4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
90020ae8:	930a      	str	r3, [sp, #40]	@ 0x28
90020aea:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
90020aec:	681b      	ldr	r3, [r3, #0]
90020aee:	9310      	str	r3, [sp, #64]	@ 0x40
90020af0:	f8bd 3068 	ldrh.w	r3, [sp, #104]	@ 0x68
90020af4:	930b      	str	r3, [sp, #44]	@ 0x2c
90020af6:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
90020af8:	2b00      	cmp	r3, #0
90020afa:	dc03      	bgt.n	90020b04 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
90020afc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
90020afe:	2b00      	cmp	r3, #0
90020b00:	f340 8375 	ble.w	900211ee <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
90020b04:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
90020b06:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
90020b0a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
90020b0e:	1e48      	subs	r0, r1, #1
90020b10:	1e57      	subs	r7, r2, #1
90020b12:	9b07      	ldr	r3, [sp, #28]
90020b14:	2b00      	cmp	r3, #0
90020b16:	f340 818e 	ble.w	90020e36 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
90020b1a:	ea5f 4c24 	movs.w	ip, r4, asr #16
90020b1e:	ea4f 4326 	mov.w	r3, r6, asr #16
90020b22:	d406      	bmi.n	90020b32 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
90020b24:	4584      	cmp	ip, r0
90020b26:	da04      	bge.n	90020b32 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
90020b28:	2b00      	cmp	r3, #0
90020b2a:	db02      	blt.n	90020b32 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
90020b2c:	42bb      	cmp	r3, r7
90020b2e:	f2c0 8183 	blt.w	90020e38 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
90020b32:	f11c 0c01 	adds.w	ip, ip, #1
90020b36:	f100 8173 	bmi.w	90020e20 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
90020b3a:	4561      	cmp	r1, ip
90020b3c:	f2c0 8170 	blt.w	90020e20 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
90020b40:	3301      	adds	r3, #1
90020b42:	f100 816d 	bmi.w	90020e20 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
90020b46:	429a      	cmp	r2, r3
90020b48:	f2c0 816a 	blt.w	90020e20 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
90020b4c:	9b07      	ldr	r3, [sp, #28]
90020b4e:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
90020b50:	9318      	str	r3, [sp, #96]	@ 0x60
90020b52:	9b18      	ldr	r3, [sp, #96]	@ 0x60
90020b54:	2b00      	cmp	r3, #0
90020b56:	f340 818c 	ble.w	90020e72 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
90020b5a:	9a2e      	ldr	r2, [sp, #184]	@ 0xb8
90020b5c:	ea4f 4c26 	mov.w	ip, r6, asr #16
90020b60:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
90020b62:	f3c4 3003 	ubfx	r0, r4, #12, #4
90020b66:	f8d2 e00c 	ldr.w	lr, [r2, #12]
90020b6a:	1422      	asrs	r2, r4, #16
90020b6c:	f3c6 3103 	ubfx	r1, r6, #12, #4
90020b70:	689b      	ldr	r3, [r3, #8]
90020b72:	f100 81cd 	bmi.w	90020f10 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
90020b76:	f103 38ff 	add.w	r8, r3, #4294967295
90020b7a:	4542      	cmp	r2, r8
90020b7c:	f280 81c8 	bge.w	90020f10 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
90020b80:	f1bc 0f00 	cmp.w	ip, #0
90020b84:	f2c0 81c4 	blt.w	90020f10 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
90020b88:	f10e 38ff 	add.w	r8, lr, #4294967295
90020b8c:	45c4      	cmp	ip, r8
90020b8e:	f280 81bf 	bge.w	90020f10 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
90020b92:	b21b      	sxth	r3, r3
90020b94:	9d10      	ldr	r5, [sp, #64]	@ 0x40
90020b96:	fb0c 2203 	mla	r2, ip, r3, r2
90020b9a:	eb05 0882 	add.w	r8, r5, r2, lsl #2
90020b9e:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
90020ba2:	ea4f 6e12 	mov.w	lr, r2, lsr #24
90020ba6:	2800      	cmp	r0, #0
90020ba8:	f000 81a9 	beq.w	90020efe <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x440>
90020bac:	f8d8 5004 	ldr.w	r5, [r8, #4]
90020bb0:	950c      	str	r5, [sp, #48]	@ 0x30
90020bb2:	0e2d      	lsrs	r5, r5, #24
90020bb4:	9513      	str	r5, [sp, #76]	@ 0x4c
90020bb6:	b181      	cbz	r1, 90020bda <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
90020bb8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
90020bbc:	3b01      	subs	r3, #1
90020bbe:	009b      	lsls	r3, r3, #2
90020bc0:	3304      	adds	r3, #4
90020bc2:	eb08 0c03 	add.w	ip, r8, r3
90020bc6:	f858 3003 	ldr.w	r3, [r8, r3]
90020bca:	9308      	str	r3, [sp, #32]
90020bcc:	0e1b      	lsrs	r3, r3, #24
90020bce:	9311      	str	r3, [sp, #68]	@ 0x44
90020bd0:	f8dc 3004 	ldr.w	r3, [ip, #4]
90020bd4:	930d      	str	r3, [sp, #52]	@ 0x34
90020bd6:	0e1b      	lsrs	r3, r3, #24
90020bd8:	9314      	str	r3, [sp, #80]	@ 0x50
90020bda:	b280      	uxth	r0, r0
90020bdc:	9d11      	ldr	r5, [sp, #68]	@ 0x44
90020bde:	b289      	uxth	r1, r1
90020be0:	fb00 f901 	mul.w	r9, r0, r1
90020be4:	0100      	lsls	r0, r0, #4
90020be6:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
90020bea:	eba0 0809 	sub.w	r8, r0, r9
90020bee:	f5c0 7380 	rsb	r3, r0, #256	@ 0x100
90020bf2:	9813      	ldr	r0, [sp, #76]	@ 0x4c
90020bf4:	b289      	uxth	r1, r1
90020bf6:	fa1f f888 	uxth.w	r8, r8
90020bfa:	1a5b      	subs	r3, r3, r1
90020bfc:	fb08 f000 	mul.w	r0, r8, r0
90020c00:	b29b      	uxth	r3, r3
90020c02:	fb03 000e 	mla	r0, r3, lr, r0
90020c06:	fb01 0005 	mla	r0, r1, r5, r0
90020c0a:	9d14      	ldr	r5, [sp, #80]	@ 0x50
90020c0c:	fb09 0005 	mla	r0, r9, r5, r0
90020c10:	f3c0 2007 	ubfx	r0, r0, #8, #8
90020c14:	2800      	cmp	r0, #0
90020c16:	f000 80fa 	beq.w	90020e0e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
90020c1a:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
90020c1e:	d01b      	beq.n	90020c58 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
90020c20:	f002 1aff 	and.w	sl, r2, #16711935	@ 0xff00ff
90020c24:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
90020c28:	fb0e fa0a 	mul.w	sl, lr, sl
90020c2c:	fb0e fe02 	mul.w	lr, lr, r2
90020c30:	ea4f 221a 	mov.w	r2, sl, lsr #8
90020c34:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
90020c38:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
90020c3c:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
90020c40:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
90020c44:	4452      	add	r2, sl
90020c46:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90020c4a:	0a12      	lsrs	r2, r2, #8
90020c4c:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
90020c50:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
90020c54:	ea42 020c 	orr.w	r2, r2, ip
90020c58:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
90020c5a:	2dff      	cmp	r5, #255	@ 0xff
90020c5c:	d021      	beq.n	90020ca2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
90020c5e:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
90020c60:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
90020c64:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
90020c66:	fb05 fb0b 	mul.w	fp, r5, fp
90020c6a:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
90020c6c:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
90020c70:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
90020c72:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
90020c76:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
90020c7a:	fb05 fa0a 	mul.w	sl, r5, sl
90020c7e:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
90020c82:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
90020c86:	44de      	add	lr, fp
90020c88:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
90020c8c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
90020c90:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90020c94:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
90020c98:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
90020c9c:	ea4e 050a 	orr.w	r5, lr, sl
90020ca0:	950c      	str	r5, [sp, #48]	@ 0x30
90020ca2:	9d11      	ldr	r5, [sp, #68]	@ 0x44
90020ca4:	2dff      	cmp	r5, #255	@ 0xff
90020ca6:	d021      	beq.n	90020cec <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
90020ca8:	9d08      	ldr	r5, [sp, #32]
90020caa:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
90020cae:	9d11      	ldr	r5, [sp, #68]	@ 0x44
90020cb0:	fb05 fb0b 	mul.w	fp, r5, fp
90020cb4:	9d08      	ldr	r5, [sp, #32]
90020cb6:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
90020cba:	9d11      	ldr	r5, [sp, #68]	@ 0x44
90020cbc:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
90020cc0:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
90020cc4:	fb05 fa0a 	mul.w	sl, r5, sl
90020cc8:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
90020ccc:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
90020cd0:	44de      	add	lr, fp
90020cd2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
90020cd6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
90020cda:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90020cde:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
90020ce2:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
90020ce6:	ea4e 050a 	orr.w	r5, lr, sl
90020cea:	9508      	str	r5, [sp, #32]
90020cec:	9d14      	ldr	r5, [sp, #80]	@ 0x50
90020cee:	2dff      	cmp	r5, #255	@ 0xff
90020cf0:	d021      	beq.n	90020d36 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
90020cf2:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
90020cf4:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
90020cf8:	9d14      	ldr	r5, [sp, #80]	@ 0x50
90020cfa:	fb05 fb0b 	mul.w	fp, r5, fp
90020cfe:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
90020d00:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
90020d04:	9d14      	ldr	r5, [sp, #80]	@ 0x50
90020d06:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
90020d0a:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
90020d0e:	fb05 fa0a 	mul.w	sl, r5, sl
90020d12:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
90020d16:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
90020d1a:	44de      	add	lr, fp
90020d1c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
90020d20:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
90020d24:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90020d28:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
90020d2c:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
90020d30:	ea4e 050a 	orr.w	r5, lr, sl
90020d34:	950d      	str	r5, [sp, #52]	@ 0x34
90020d36:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
90020d38:	f002 1eff 	and.w	lr, r2, #16711935	@ 0xff00ff
90020d3c:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
90020d40:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
90020d44:	9d08      	ldr	r5, [sp, #32]
90020d46:	fb08 fc0c 	mul.w	ip, r8, ip
90020d4a:	fb03 cc0e 	mla	ip, r3, lr, ip
90020d4e:	f005 1eff 	and.w	lr, r5, #16711935	@ 0xff00ff
90020d52:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
90020d54:	fb01 cc0e 	mla	ip, r1, lr, ip
90020d58:	f005 1eff 	and.w	lr, r5, #16711935	@ 0xff00ff
90020d5c:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
90020d5e:	fb09 cc0e 	mla	ip, r9, lr, ip
90020d62:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
90020d66:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
90020d68:	fb08 f80e 	mul.w	r8, r8, lr
90020d6c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90020d70:	fb03 8202 	mla	r2, r3, r2, r8
90020d74:	9b08      	ldr	r3, [sp, #32]
90020d76:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
90020d7a:	f403 4a7f 	and.w	sl, r3, #65280	@ 0xff00
90020d7e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
90020d80:	fb01 220a 	mla	r2, r1, sl, r2
90020d84:	f403 417f 	and.w	r1, r3, #65280	@ 0xff00
90020d88:	883b      	ldrh	r3, [r7, #0]
90020d8a:	fb09 2901 	mla	r9, r9, r1, r2
90020d8e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
90020d90:	1219      	asrs	r1, r3, #8
90020d92:	4342      	muls	r2, r0
90020d94:	ea4f 2919 	mov.w	r9, r9, lsr #8
90020d98:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
90020d9c:	1c50      	adds	r0, r2, #1
90020d9e:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
90020da2:	eb00 2012 	add.w	r0, r0, r2, lsr #8
90020da6:	ea4c 0c09 	orr.w	ip, ip, r9
90020daa:	ea6f 2010 	mvn.w	r0, r0, lsr #8
90020dae:	ea4f 421c 	mov.w	r2, ip, lsr #16
90020db2:	f3cc 2e07 	ubfx	lr, ip, #8, #8
90020db6:	fa5f fc8c 	uxtb.w	ip, ip
90020dba:	fb12 f205 	smulbb	r2, r2, r5
90020dbe:	b2c0      	uxtb	r0, r0
90020dc0:	fb1c fc05 	smulbb	ip, ip, r5
90020dc4:	fb01 2100 	mla	r1, r1, r0, r2
90020dc8:	10da      	asrs	r2, r3, #3
90020dca:	fb1e fe05 	smulbb	lr, lr, r5
90020dce:	00db      	lsls	r3, r3, #3
90020dd0:	b289      	uxth	r1, r1
90020dd2:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
90020dd6:	b2db      	uxtb	r3, r3
90020dd8:	fb02 e200 	mla	r2, r2, r0, lr
90020ddc:	fb03 c300 	mla	r3, r3, r0, ip
90020de0:	b292      	uxth	r2, r2
90020de2:	fa1f fc83 	uxth.w	ip, r3
90020de6:	1c4b      	adds	r3, r1, #1
90020de8:	eb03 2111 	add.w	r1, r3, r1, lsr #8
90020dec:	f10c 0301 	add.w	r3, ip, #1
90020df0:	eb03 231c 	add.w	r3, r3, ip, lsr #8
90020df4:	f401 4178 	and.w	r1, r1, #63488	@ 0xf800
90020df8:	f3c3 23c4 	ubfx	r3, r3, #11, #5
90020dfc:	430b      	orrs	r3, r1
90020dfe:	1c51      	adds	r1, r2, #1
90020e00:	eb01 2212 	add.w	r2, r1, r2, lsr #8
90020e04:	0952      	lsrs	r2, r2, #5
90020e06:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
90020e0a:	4313      	orrs	r3, r2
90020e0c:	803b      	strh	r3, [r7, #0]
90020e0e:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
90020e10:	3702      	adds	r7, #2
90020e12:	441c      	add	r4, r3
90020e14:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
90020e16:	441e      	add	r6, r3
90020e18:	9b18      	ldr	r3, [sp, #96]	@ 0x60
90020e1a:	3b01      	subs	r3, #1
90020e1c:	9318      	str	r3, [sp, #96]	@ 0x60
90020e1e:	e698      	b.n	90020b52 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
90020e20:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
90020e22:	441c      	add	r4, r3
90020e24:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
90020e26:	441e      	add	r6, r3
90020e28:	9b07      	ldr	r3, [sp, #28]
90020e2a:	3b01      	subs	r3, #1
90020e2c:	9307      	str	r3, [sp, #28]
90020e2e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
90020e30:	3302      	adds	r3, #2
90020e32:	930a      	str	r3, [sp, #40]	@ 0x28
90020e34:	e66d      	b.n	90020b12 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
90020e36:	d023      	beq.n	90020e80 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
90020e38:	9b07      	ldr	r3, [sp, #28]
90020e3a:	9829      	ldr	r0, [sp, #164]	@ 0xa4
90020e3c:	3b01      	subs	r3, #1
90020e3e:	fb00 4003 	mla	r0, r0, r3, r4
90020e42:	1400      	asrs	r0, r0, #16
90020e44:	f53f ae82 	bmi.w	90020b4c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
90020e48:	3901      	subs	r1, #1
90020e4a:	4288      	cmp	r0, r1
90020e4c:	f6bf ae7e 	bge.w	90020b4c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
90020e50:	992a      	ldr	r1, [sp, #168]	@ 0xa8
90020e52:	fb01 6303 	mla	r3, r1, r3, r6
90020e56:	141b      	asrs	r3, r3, #16
90020e58:	f53f ae78 	bmi.w	90020b4c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
90020e5c:	3a01      	subs	r2, #1
90020e5e:	4293      	cmp	r3, r2
90020e60:	f6bf ae74 	bge.w	90020b4c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
90020e64:	f8dd b01c 	ldr.w	fp, [sp, #28]
90020e68:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
90020e6c:	f1bb 0f00 	cmp.w	fp, #0
90020e70:	dc6c      	bgt.n	90020f4c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
90020e72:	9b07      	ldr	r3, [sp, #28]
90020e74:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
90020e78:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
90020e7a:	eb03 0345 	add.w	r3, r3, r5, lsl #1
90020e7e:	930a      	str	r3, [sp, #40]	@ 0x28
90020e80:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
90020e82:	2b00      	cmp	r3, #0
90020e84:	f340 81b3 	ble.w	900211ee <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
90020e88:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
90020e8c:	9b26      	ldr	r3, [sp, #152]	@ 0x98
90020e8e:	ee30 0a04 	vadd.f32	s0, s0, s8
90020e92:	ee70 0aa4 	vadd.f32	s1, s1, s9
90020e96:	eef0 6a62 	vmov.f32	s13, s5
90020e9a:	eec7 7a00 	vdiv.f32	s15, s14, s0
90020e9e:	ee31 1a05 	vadd.f32	s2, s2, s10
90020ea2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90020ea6:	ee16 4a90 	vmov	r4, s13
90020eaa:	eef0 6a43 	vmov.f32	s13, s6
90020eae:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90020eb2:	ee16 6a90 	vmov	r6, s13
90020eb6:	ee20 7aa7 	vmul.f32	s14, s1, s15
90020eba:	ee61 7a27 	vmul.f32	s15, s2, s15
90020ebe:	ee77 2a62 	vsub.f32	s5, s14, s5
90020ec2:	ee37 3ac3 	vsub.f32	s6, s15, s6
90020ec6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90020eca:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
90020ece:	ee12 2a90 	vmov	r2, s5
90020ed2:	eef0 2a47 	vmov.f32	s5, s14
90020ed6:	fb92 f3f3 	sdiv	r3, r2, r3
90020eda:	ee13 2a10 	vmov	r2, s6
90020ede:	9329      	str	r3, [sp, #164]	@ 0xa4
90020ee0:	9b26      	ldr	r3, [sp, #152]	@ 0x98
90020ee2:	eeb0 3a67 	vmov.f32	s6, s15
90020ee6:	fb92 f3f3 	sdiv	r3, r2, r3
90020eea:	932a      	str	r3, [sp, #168]	@ 0xa8
90020eec:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
90020eee:	9a19      	ldr	r2, [sp, #100]	@ 0x64
90020ef0:	3b01      	subs	r3, #1
90020ef2:	9317      	str	r3, [sp, #92]	@ 0x5c
90020ef4:	9b26      	ldr	r3, [sp, #152]	@ 0x98
90020ef6:	bf08      	it	eq
90020ef8:	4613      	moveq	r3, r2
90020efa:	9307      	str	r3, [sp, #28]
90020efc:	e5fb      	b.n	90020af6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
90020efe:	2900      	cmp	r1, #0
90020f00:	f43f ae6b 	beq.w	90020bda <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
90020f04:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
90020f08:	9308      	str	r3, [sp, #32]
90020f0a:	0e1b      	lsrs	r3, r3, #24
90020f0c:	9311      	str	r3, [sp, #68]	@ 0x44
90020f0e:	e664      	b.n	90020bda <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
90020f10:	f112 0801 	adds.w	r8, r2, #1
90020f14:	f53f af7b 	bmi.w	90020e0e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
90020f18:	4543      	cmp	r3, r8
90020f1a:	f6ff af78 	blt.w	90020e0e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
90020f1e:	f11c 0801 	adds.w	r8, ip, #1
90020f22:	f53f af74 	bmi.w	90020e0e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
90020f26:	45c6      	cmp	lr, r8
90020f28:	f6ff af71 	blt.w	90020e0e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
90020f2c:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
90020f2e:	b21b      	sxth	r3, r3
90020f30:	9201      	str	r2, [sp, #4]
90020f32:	fa0f f28e 	sxth.w	r2, lr
90020f36:	e9cd 1504 	strd	r1, r5, [sp, #16]
90020f3a:	e9cd c002 	strd	ip, r0, [sp, #8]
90020f3e:	9200      	str	r2, [sp, #0]
90020f40:	4639      	mov	r1, r7
90020f42:	9a10      	ldr	r2, [sp, #64]	@ 0x40
90020f44:	981b      	ldr	r0, [sp, #108]	@ 0x6c
90020f46:	f7ff fc79 	bl	9002083c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>
90020f4a:	e760      	b.n	90020e0e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
90020f4c:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
90020f4e:	1427      	asrs	r7, r4, #16
90020f50:	9d10      	ldr	r5, [sp, #64]	@ 0x40
90020f52:	f3c4 3203 	ubfx	r2, r4, #12, #4
90020f56:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
90020f5a:	1433      	asrs	r3, r6, #16
90020f5c:	f3c6 3003 	ubfx	r0, r6, #12, #4
90020f60:	fb01 7303 	mla	r3, r1, r3, r7
90020f64:	eb05 0783 	add.w	r7, r5, r3, lsl #2
90020f68:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
90020f6c:	ea4f 6c13 	mov.w	ip, r3, lsr #24
90020f70:	2a00      	cmp	r2, #0
90020f72:	f000 8133 	beq.w	900211dc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x71e>
90020f76:	687d      	ldr	r5, [r7, #4]
90020f78:	950e      	str	r5, [sp, #56]	@ 0x38
90020f7a:	0e2d      	lsrs	r5, r5, #24
90020f7c:	9515      	str	r5, [sp, #84]	@ 0x54
90020f7e:	b178      	cbz	r0, 90020fa0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
90020f80:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
90020f84:	3901      	subs	r1, #1
90020f86:	0089      	lsls	r1, r1, #2
90020f88:	3104      	adds	r1, #4
90020f8a:	eb07 0e01 	add.w	lr, r7, r1
90020f8e:	5879      	ldr	r1, [r7, r1]
90020f90:	9109      	str	r1, [sp, #36]	@ 0x24
90020f92:	0e09      	lsrs	r1, r1, #24
90020f94:	9112      	str	r1, [sp, #72]	@ 0x48
90020f96:	f8de 1004 	ldr.w	r1, [lr, #4]
90020f9a:	910f      	str	r1, [sp, #60]	@ 0x3c
90020f9c:	0e09      	lsrs	r1, r1, #24
90020f9e:	9116      	str	r1, [sp, #88]	@ 0x58
90020fa0:	b292      	uxth	r2, r2
90020fa2:	9915      	ldr	r1, [sp, #84]	@ 0x54
90020fa4:	b280      	uxth	r0, r0
90020fa6:	9d12      	ldr	r5, [sp, #72]	@ 0x48
90020fa8:	fb02 f800 	mul.w	r8, r2, r0
90020fac:	0112      	lsls	r2, r2, #4
90020fae:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
90020fb2:	eba2 0e08 	sub.w	lr, r2, r8
90020fb6:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
90020fba:	b280      	uxth	r0, r0
90020fbc:	fa1f fe8e 	uxth.w	lr, lr
90020fc0:	1a12      	subs	r2, r2, r0
90020fc2:	fb0e f101 	mul.w	r1, lr, r1
90020fc6:	b292      	uxth	r2, r2
90020fc8:	fb02 110c 	mla	r1, r2, ip, r1
90020fcc:	fb00 1105 	mla	r1, r0, r5, r1
90020fd0:	9d16      	ldr	r5, [sp, #88]	@ 0x58
90020fd2:	fb08 1105 	mla	r1, r8, r5, r1
90020fd6:	f3c1 2107 	ubfx	r1, r1, #8, #8
90020fda:	2900      	cmp	r1, #0
90020fdc:	f000 80f5 	beq.w	900211ca <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70c>
90020fe0:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
90020fe4:	d019      	beq.n	9002101a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55c>
90020fe6:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
90020fea:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
90020fee:	fb0c fa0a 	mul.w	sl, ip, sl
90020ff2:	fb0c fc03 	mul.w	ip, ip, r3
90020ff6:	ea4f 231a 	mov.w	r3, sl, lsr #8
90020ffa:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
90020ffe:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
90021002:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
90021006:	eb07 271c 	add.w	r7, r7, ip, lsr #8
9002100a:	4453      	add	r3, sl
9002100c:	0a3f      	lsrs	r7, r7, #8
9002100e:	0a1b      	lsrs	r3, r3, #8
90021010:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
90021014:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
90021018:	433b      	orrs	r3, r7
9002101a:	9d15      	ldr	r5, [sp, #84]	@ 0x54
9002101c:	2dff      	cmp	r5, #255	@ 0xff
9002101e:	d020      	beq.n	90021062 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a4>
90021020:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
90021022:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
90021026:	9d15      	ldr	r5, [sp, #84]	@ 0x54
90021028:	436f      	muls	r7, r5
9002102a:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
9002102c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
90021030:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
90021034:	9d15      	ldr	r5, [sp, #84]	@ 0x54
90021036:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
9002103a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
9002103e:	fb05 fa0a 	mul.w	sl, r5, sl
90021042:	44bc      	add	ip, r7
90021044:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
90021048:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9002104c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
90021050:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
90021054:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90021058:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
9002105c:	ea4c 050a 	orr.w	r5, ip, sl
90021060:	950e      	str	r5, [sp, #56]	@ 0x38
90021062:	9d12      	ldr	r5, [sp, #72]	@ 0x48
90021064:	2dff      	cmp	r5, #255	@ 0xff
90021066:	d020      	beq.n	900210aa <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ec>
90021068:	9d09      	ldr	r5, [sp, #36]	@ 0x24
9002106a:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
9002106e:	9d12      	ldr	r5, [sp, #72]	@ 0x48
90021070:	436f      	muls	r7, r5
90021072:	9d09      	ldr	r5, [sp, #36]	@ 0x24
90021074:	ea4f 2c17 	mov.w	ip, r7, lsr #8
90021078:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
9002107c:	9d12      	ldr	r5, [sp, #72]	@ 0x48
9002107e:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
90021082:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
90021086:	fb05 fa0a 	mul.w	sl, r5, sl
9002108a:	44bc      	add	ip, r7
9002108c:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
90021090:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90021094:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
90021098:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
9002109c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
900210a0:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
900210a4:	ea4c 050a 	orr.w	r5, ip, sl
900210a8:	9509      	str	r5, [sp, #36]	@ 0x24
900210aa:	9d16      	ldr	r5, [sp, #88]	@ 0x58
900210ac:	2dff      	cmp	r5, #255	@ 0xff
900210ae:	d020      	beq.n	900210f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x634>
900210b0:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
900210b2:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
900210b6:	9d16      	ldr	r5, [sp, #88]	@ 0x58
900210b8:	436f      	muls	r7, r5
900210ba:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
900210bc:	ea4f 2c17 	mov.w	ip, r7, lsr #8
900210c0:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
900210c4:	9d16      	ldr	r5, [sp, #88]	@ 0x58
900210c6:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
900210ca:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
900210ce:	fb05 fa0a 	mul.w	sl, r5, sl
900210d2:	44bc      	add	ip, r7
900210d4:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
900210d8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
900210dc:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
900210e0:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
900210e4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
900210e8:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
900210ec:	ea4c 050a 	orr.w	r5, ip, sl
900210f0:	950f      	str	r5, [sp, #60]	@ 0x3c
900210f2:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
900210f4:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
900210f8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
900210fc:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
90021100:	9d09      	ldr	r5, [sp, #36]	@ 0x24
90021102:	fb0e f707 	mul.w	r7, lr, r7
90021106:	fb02 770c 	mla	r7, r2, ip, r7
9002110a:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
9002110e:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
90021110:	fb00 770c 	mla	r7, r0, ip, r7
90021114:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
90021118:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
9002111a:	fb08 770c 	mla	r7, r8, ip, r7
9002111e:	f405 4c7f 	and.w	ip, r5, #65280	@ 0xff00
90021122:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
90021124:	fb0e fe0c 	mul.w	lr, lr, ip
90021128:	0a3f      	lsrs	r7, r7, #8
9002112a:	fb02 e303 	mla	r3, r2, r3, lr
9002112e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
90021130:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
90021134:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
90021138:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
9002113a:	fb00 330a 	mla	r3, r0, sl, r3
9002113e:	f402 4c7f 	and.w	ip, r2, #65280	@ 0xff00
90021142:	f8b9 0000 	ldrh.w	r0, [r9]
90021146:	fb08 3c0c 	mla	ip, r8, ip, r3
9002114a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
9002114c:	1202      	asrs	r2, r0, #8
9002114e:	4359      	muls	r1, r3
90021150:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90021154:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
90021158:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
9002115c:	1c4b      	adds	r3, r1, #1
9002115e:	ea47 070c 	orr.w	r7, r7, ip
90021162:	eb03 2111 	add.w	r1, r3, r1, lsr #8
90021166:	0c3b      	lsrs	r3, r7, #16
90021168:	ea6f 2111 	mvn.w	r1, r1, lsr #8
9002116c:	f3c7 2c07 	ubfx	ip, r7, #8, #8
90021170:	b2ff      	uxtb	r7, r7
90021172:	fb13 f305 	smulbb	r3, r3, r5
90021176:	b2c9      	uxtb	r1, r1
90021178:	fb17 f705 	smulbb	r7, r7, r5
9002117c:	fb02 3201 	mla	r2, r2, r1, r3
90021180:	10c3      	asrs	r3, r0, #3
90021182:	fb1c fc05 	smulbb	ip, ip, r5
90021186:	00c0      	lsls	r0, r0, #3
90021188:	b292      	uxth	r2, r2
9002118a:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
9002118e:	b2c0      	uxtb	r0, r0
90021190:	fb03 c301 	mla	r3, r3, r1, ip
90021194:	fb00 7001 	mla	r0, r0, r1, r7
90021198:	1c51      	adds	r1, r2, #1
9002119a:	b29b      	uxth	r3, r3
9002119c:	b280      	uxth	r0, r0
9002119e:	eb01 2212 	add.w	r2, r1, r2, lsr #8
900211a2:	f100 0c01 	add.w	ip, r0, #1
900211a6:	f402 4278 	and.w	r2, r2, #63488	@ 0xf800
900211aa:	eb0c 2c10 	add.w	ip, ip, r0, lsr #8
900211ae:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
900211b2:	ea4c 0202 	orr.w	r2, ip, r2
900211b6:	f103 0c01 	add.w	ip, r3, #1
900211ba:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
900211be:	095b      	lsrs	r3, r3, #5
900211c0:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
900211c4:	431a      	orrs	r2, r3
900211c6:	f8a9 2000 	strh.w	r2, [r9]
900211ca:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
900211cc:	f109 0902 	add.w	r9, r9, #2
900211d0:	f10b 3bff 	add.w	fp, fp, #4294967295
900211d4:	441c      	add	r4, r3
900211d6:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
900211d8:	441e      	add	r6, r3
900211da:	e647      	b.n	90020e6c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
900211dc:	2800      	cmp	r0, #0
900211de:	f43f aedf 	beq.w	90020fa0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
900211e2:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
900211e6:	9109      	str	r1, [sp, #36]	@ 0x24
900211e8:	0e09      	lsrs	r1, r1, #24
900211ea:	9112      	str	r1, [sp, #72]	@ 0x48
900211ec:	e6d8      	b.n	90020fa0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
900211ee:	b01d      	add	sp, #116	@ 0x74
900211f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

900211f4 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>:
900211f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900211f8:	b085      	sub	sp, #20
900211fa:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	@ 0x3c
900211fe:	9102      	str	r1, [sp, #8]
90021200:	2c00      	cmp	r4, #0
90021202:	fb04 7103 	mla	r1, r4, r3, r7
90021206:	f9bd e038 	ldrsh.w	lr, [sp, #56]	@ 0x38
9002120a:	f89d 6044 	ldrb.w	r6, [sp, #68]	@ 0x44
9002120e:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
90021212:	f89d 0048 	ldrb.w	r0, [sp, #72]	@ 0x48
90021216:	f2c0 810c 	blt.w	90021432 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
9002121a:	45a6      	cmp	lr, r4
9002121c:	f340 8109 	ble.w	90021432 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
90021220:	2f00      	cmp	r7, #0
90021222:	f2c0 8104 	blt.w	9002142e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
90021226:	42bb      	cmp	r3, r7
90021228:	f340 8101 	ble.w	9002142e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
9002122c:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
90021230:	1c7a      	adds	r2, r7, #1
90021232:	f100 8101 	bmi.w	90021438 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
90021236:	4293      	cmp	r3, r2
90021238:	f340 80fe 	ble.w	90021438 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
9002123c:	2e00      	cmp	r6, #0
9002123e:	f000 80fd 	beq.w	9002143c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x248>
90021242:	f8dc 1004 	ldr.w	r1, [ip, #4]
90021246:	3401      	adds	r4, #1
90021248:	f100 80fc 	bmi.w	90021444 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
9002124c:	45a6      	cmp	lr, r4
9002124e:	f340 80f9 	ble.w	90021444 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
90021252:	2800      	cmp	r0, #0
90021254:	f000 80f9 	beq.w	9002144a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x256>
90021258:	2f00      	cmp	r7, #0
9002125a:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
9002125e:	f2c0 80ef 	blt.w	90021440 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
90021262:	42bb      	cmp	r3, r7
90021264:	f340 80ec 	ble.w	90021440 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
90021268:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
9002126c:	3701      	adds	r7, #1
9002126e:	f100 80ef 	bmi.w	90021450 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
90021272:	42bb      	cmp	r3, r7
90021274:	f340 80ec 	ble.w	90021450 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
90021278:	2e00      	cmp	r6, #0
9002127a:	f000 80eb 	beq.w	90021454 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x260>
9002127e:	6852      	ldr	r2, [r2, #4]
90021280:	b2b6      	uxth	r6, r6
90021282:	b280      	uxth	r0, r0
90021284:	ea4f 6a11 	mov.w	sl, r1, lsr #24
90021288:	fb00 fe06 	mul.w	lr, r0, r6
9002128c:	0136      	lsls	r6, r6, #4
9002128e:	ea4f 6b15 	mov.w	fp, r5, lsr #24
90021292:	ebce 1000 	rsb	r0, lr, r0, lsl #4
90021296:	eba6 070e 	sub.w	r7, r6, lr
9002129a:	f5c6 7380 	rsb	r3, r6, #256	@ 0x100
9002129e:	ea4f 6914 	mov.w	r9, r4, lsr #24
900212a2:	b280      	uxth	r0, r0
900212a4:	b2bf      	uxth	r7, r7
900212a6:	1a1b      	subs	r3, r3, r0
900212a8:	ea4f 6812 	mov.w	r8, r2, lsr #24
900212ac:	fb07 f60a 	mul.w	r6, r7, sl
900212b0:	b29b      	uxth	r3, r3
900212b2:	fb0b 6603 	mla	r6, fp, r3, r6
900212b6:	fb00 6609 	mla	r6, r0, r9, r6
900212ba:	fb0e 6608 	mla	r6, lr, r8, r6
900212be:	f3c6 2607 	ubfx	r6, r6, #8, #8
900212c2:	9600      	str	r6, [sp, #0]
900212c4:	2e00      	cmp	r6, #0
900212c6:	f000 80af 	beq.w	90021428 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x234>
900212ca:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
900212ce:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
900212d2:	9e02      	ldr	r6, [sp, #8]
900212d4:	fb0b fc0c 	mul.w	ip, fp, ip
900212d8:	fb0b f505 	mul.w	r5, fp, r5
900212dc:	8836      	ldrh	r6, [r6, #0]
900212de:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
900212e2:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
900212e6:	9501      	str	r5, [sp, #4]
900212e8:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
900212ec:	44dc      	add	ip, fp
900212ee:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
900212f2:	f00c 15ff 	and.w	r5, ip, #16711935	@ 0xff00ff
900212f6:	9503      	str	r5, [sp, #12]
900212f8:	9d01      	ldr	r5, [sp, #4]
900212fa:	f505 7c80 	add.w	ip, r5, #256	@ 0x100
900212fe:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
90021302:	f001 1cff 	and.w	ip, r1, #16711935	@ 0xff00ff
90021306:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
9002130a:	fb0a fc0c 	mul.w	ip, sl, ip
9002130e:	ea4f 2b15 	mov.w	fp, r5, lsr #8
90021312:	fb0a fa01 	mul.w	sl, sl, r1
90021316:	ea4f 251c 	mov.w	r5, ip, lsr #8
9002131a:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
9002131e:	f50a 7180 	add.w	r1, sl, #256	@ 0x100
90021322:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
90021326:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
9002132a:	4465      	add	r5, ip
9002132c:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
90021330:	f404 447f 	and.w	r4, r4, #65280	@ 0xff00
90021334:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90021338:	fb09 fc0c 	mul.w	ip, r9, ip
9002133c:	0a2d      	lsrs	r5, r5, #8
9002133e:	fb09 f904 	mul.w	r9, r9, r4
90021342:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
90021346:	ea4f 211c 	mov.w	r1, ip, lsr #8
9002134a:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
9002134e:	f509 7480 	add.w	r4, r9, #256	@ 0x100
90021352:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
90021356:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
9002135a:	437d      	muls	r5, r7
9002135c:	eb04 2919 	add.w	r9, r4, r9, lsr #8
90021360:	f002 14ff 	and.w	r4, r2, #16711935	@ 0xff00ff
90021364:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
90021368:	4461      	add	r1, ip
9002136a:	fb08 f404 	mul.w	r4, r8, r4
9002136e:	ea4f 2919 	mov.w	r9, r9, lsr #8
90021372:	fb08 f802 	mul.w	r8, r8, r2
90021376:	0a09      	lsrs	r1, r1, #8
90021378:	0a22      	lsrs	r2, r4, #8
9002137a:	f104 1401 	add.w	r4, r4, #65537	@ 0x10001
9002137e:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
90021382:	fb07 f70a 	mul.w	r7, r7, sl
90021386:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
9002138a:	4414      	add	r4, r2
9002138c:	f508 7280 	add.w	r2, r8, #256	@ 0x100
90021390:	0a24      	lsrs	r4, r4, #8
90021392:	eb02 2818 	add.w	r8, r2, r8, lsr #8
90021396:	9a03      	ldr	r2, [sp, #12]
90021398:	f004 14ff 	and.w	r4, r4, #16711935	@ 0xff00ff
9002139c:	fb02 5503 	mla	r5, r2, r3, r5
900213a0:	ea4f 2818 	mov.w	r8, r8, lsr #8
900213a4:	fb04 540e 	mla	r4, r4, lr, r5
900213a8:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
900213ac:	fb01 4100 	mla	r1, r1, r0, r4
900213b0:	0a09      	lsrs	r1, r1, #8
900213b2:	f001 14ff 	and.w	r4, r1, #16711935	@ 0xff00ff
900213b6:	f40b 417f 	and.w	r1, fp, #65280	@ 0xff00
900213ba:	fb03 7101 	mla	r1, r3, r1, r7
900213be:	9b00      	ldr	r3, [sp, #0]
900213c0:	fb0e 1e08 	mla	lr, lr, r8, r1
900213c4:	f409 417f 	and.w	r1, r9, #65280	@ 0xff00
900213c8:	43da      	mvns	r2, r3
900213ca:	1233      	asrs	r3, r6, #8
900213cc:	fb00 e101 	mla	r1, r0, r1, lr
900213d0:	10f0      	asrs	r0, r6, #3
900213d2:	b2d2      	uxtb	r2, r2
900213d4:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
900213d8:	0a09      	lsrs	r1, r1, #8
900213da:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
900213de:	00f6      	lsls	r6, r6, #3
900213e0:	4353      	muls	r3, r2
900213e2:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
900213e6:	4350      	muls	r0, r2
900213e8:	b2f6      	uxtb	r6, r6
900213ea:	4321      	orrs	r1, r4
900213ec:	4356      	muls	r6, r2
900213ee:	1c5a      	adds	r2, r3, #1
900213f0:	eb02 2213 	add.w	r2, r2, r3, lsr #8
900213f4:	0c0b      	lsrs	r3, r1, #16
900213f6:	eb03 2312 	add.w	r3, r3, r2, lsr #8
900213fa:	1c42      	adds	r2, r0, #1
900213fc:	eb02 2010 	add.w	r0, r2, r0, lsr #8
90021400:	0a0a      	lsrs	r2, r1, #8
90021402:	021b      	lsls	r3, r3, #8
90021404:	eb02 2210 	add.w	r2, r2, r0, lsr #8
90021408:	f403 4378 	and.w	r3, r3, #63488	@ 0xf800
9002140c:	00d2      	lsls	r2, r2, #3
9002140e:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
90021412:	4313      	orrs	r3, r2
90021414:	1c72      	adds	r2, r6, #1
90021416:	eb02 2616 	add.w	r6, r2, r6, lsr #8
9002141a:	eb01 2116 	add.w	r1, r1, r6, lsr #8
9002141e:	f3c1 01c4 	ubfx	r1, r1, #3, #5
90021422:	4319      	orrs	r1, r3
90021424:	9b02      	ldr	r3, [sp, #8]
90021426:	8019      	strh	r1, [r3, #0]
90021428:	b005      	add	sp, #20
9002142a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9002142e:	2500      	movs	r5, #0
90021430:	e6fe      	b.n	90021230 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3c>
90021432:	2100      	movs	r1, #0
90021434:	460d      	mov	r5, r1
90021436:	e706      	b.n	90021246 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
90021438:	2100      	movs	r1, #0
9002143a:	e704      	b.n	90021246 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
9002143c:	4631      	mov	r1, r6
9002143e:	e702      	b.n	90021246 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
90021440:	2400      	movs	r4, #0
90021442:	e713      	b.n	9002126c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x78>
90021444:	2200      	movs	r2, #0
90021446:	4614      	mov	r4, r2
90021448:	e71a      	b.n	90021280 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
9002144a:	4602      	mov	r2, r0
9002144c:	4604      	mov	r4, r0
9002144e:	e717      	b.n	90021280 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
90021450:	2200      	movs	r2, #0
90021452:	e715      	b.n	90021280 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
90021454:	4632      	mov	r2, r6
90021456:	e713      	b.n	90021280 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>

90021458 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90021458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9002145c:	b09b      	sub	sp, #108	@ 0x6c
9002145e:	9218      	str	r2, [sp, #96]	@ 0x60
90021460:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
90021462:	9019      	str	r0, [sp, #100]	@ 0x64
90021464:	9116      	str	r1, [sp, #88]	@ 0x58
90021466:	6850      	ldr	r0, [r2, #4]
90021468:	9307      	str	r3, [sp, #28]
9002146a:	6812      	ldr	r2, [r2, #0]
9002146c:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	@ 0xa8
90021470:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	@ 0x94
90021474:	fb00 1303 	mla	r3, r0, r3, r1
90021478:	eb02 0343 	add.w	r3, r2, r3, lsl #1
9002147c:	930a      	str	r3, [sp, #40]	@ 0x28
9002147e:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
90021480:	681b      	ldr	r3, [r3, #0]
90021482:	930f      	str	r3, [sp, #60]	@ 0x3c
90021484:	9b16      	ldr	r3, [sp, #88]	@ 0x58
90021486:	2b00      	cmp	r3, #0
90021488:	dc03      	bgt.n	90021492 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
9002148a:	9b18      	ldr	r3, [sp, #96]	@ 0x60
9002148c:	2b00      	cmp	r3, #0
9002148e:	f340 8387 	ble.w	90021ba0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
90021492:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
90021494:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
90021498:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
9002149c:	1e48      	subs	r0, r1, #1
9002149e:	1e57      	subs	r7, r2, #1
900214a0:	9b07      	ldr	r3, [sp, #28]
900214a2:	2b00      	cmp	r3, #0
900214a4:	f340 8166 	ble.w	90021774 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
900214a8:	ea5f 4c24 	movs.w	ip, r4, asr #16
900214ac:	ea4f 4326 	mov.w	r3, r6, asr #16
900214b0:	d406      	bmi.n	900214c0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
900214b2:	4584      	cmp	ip, r0
900214b4:	da04      	bge.n	900214c0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
900214b6:	2b00      	cmp	r3, #0
900214b8:	db02      	blt.n	900214c0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
900214ba:	42bb      	cmp	r3, r7
900214bc:	f2c0 815b 	blt.w	90021776 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
900214c0:	f11c 0c01 	adds.w	ip, ip, #1
900214c4:	f100 814b 	bmi.w	9002175e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
900214c8:	4561      	cmp	r1, ip
900214ca:	f2c0 8148 	blt.w	9002175e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
900214ce:	3301      	adds	r3, #1
900214d0:	f100 8145 	bmi.w	9002175e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
900214d4:	429a      	cmp	r2, r3
900214d6:	f2c0 8142 	blt.w	9002175e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
900214da:	9b07      	ldr	r3, [sp, #28]
900214dc:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
900214de:	9317      	str	r3, [sp, #92]	@ 0x5c
900214e0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
900214e2:	2b00      	cmp	r3, #0
900214e4:	f340 8165 	ble.w	900217b2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
900214e8:	9a2c      	ldr	r2, [sp, #176]	@ 0xb0
900214ea:	ea4f 4c26 	mov.w	ip, r6, asr #16
900214ee:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
900214f0:	f3c4 3103 	ubfx	r1, r4, #12, #4
900214f4:	f8d2 e00c 	ldr.w	lr, [r2, #12]
900214f8:	1422      	asrs	r2, r4, #16
900214fa:	f3c6 3003 	ubfx	r0, r6, #12, #4
900214fe:	689b      	ldr	r3, [r3, #8]
90021500:	f100 81d5 	bmi.w	900218ae <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
90021504:	f103 38ff 	add.w	r8, r3, #4294967295
90021508:	4542      	cmp	r2, r8
9002150a:	f280 81d0 	bge.w	900218ae <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
9002150e:	f1bc 0f00 	cmp.w	ip, #0
90021512:	f2c0 81cc 	blt.w	900218ae <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
90021516:	f10e 38ff 	add.w	r8, lr, #4294967295
9002151a:	45c4      	cmp	ip, r8
9002151c:	f280 81c7 	bge.w	900218ae <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
90021520:	b21b      	sxth	r3, r3
90021522:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
90021524:	fb0c 2203 	mla	r2, ip, r3, r2
90021528:	eb05 0882 	add.w	r8, r5, r2, lsl #2
9002152c:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
90021530:	ea4f 6e12 	mov.w	lr, r2, lsr #24
90021534:	2900      	cmp	r1, #0
90021536:	f000 8182 	beq.w	9002183e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
9002153a:	f8d8 5004 	ldr.w	r5, [r8, #4]
9002153e:	950b      	str	r5, [sp, #44]	@ 0x2c
90021540:	0e2d      	lsrs	r5, r5, #24
90021542:	9512      	str	r5, [sp, #72]	@ 0x48
90021544:	b180      	cbz	r0, 90021568 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
90021546:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
9002154a:	3b01      	subs	r3, #1
9002154c:	009b      	lsls	r3, r3, #2
9002154e:	3304      	adds	r3, #4
90021550:	eb08 0c03 	add.w	ip, r8, r3
90021554:	f858 3003 	ldr.w	r3, [r8, r3]
90021558:	9308      	str	r3, [sp, #32]
9002155a:	0e1b      	lsrs	r3, r3, #24
9002155c:	9310      	str	r3, [sp, #64]	@ 0x40
9002155e:	f8dc 3004 	ldr.w	r3, [ip, #4]
90021562:	930c      	str	r3, [sp, #48]	@ 0x30
90021564:	0e1b      	lsrs	r3, r3, #24
90021566:	9313      	str	r3, [sp, #76]	@ 0x4c
90021568:	b289      	uxth	r1, r1
9002156a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
9002156c:	b280      	uxth	r0, r0
9002156e:	9d10      	ldr	r5, [sp, #64]	@ 0x40
90021570:	fb01 f900 	mul.w	r9, r1, r0
90021574:	0109      	lsls	r1, r1, #4
90021576:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
9002157a:	eba1 0809 	sub.w	r8, r1, r9
9002157e:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
90021582:	b280      	uxth	r0, r0
90021584:	fa1f f888 	uxth.w	r8, r8
90021588:	1a09      	subs	r1, r1, r0
9002158a:	fb08 f303 	mul.w	r3, r8, r3
9002158e:	b289      	uxth	r1, r1
90021590:	fb01 330e 	mla	r3, r1, lr, r3
90021594:	fb00 3305 	mla	r3, r0, r5, r3
90021598:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
9002159a:	fb09 3305 	mla	r3, r9, r5, r3
9002159e:	f3c3 2307 	ubfx	r3, r3, #8, #8
900215a2:	2b00      	cmp	r3, #0
900215a4:	f000 80d2 	beq.w	9002174c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
900215a8:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
900215ac:	d01b      	beq.n	900215e6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18e>
900215ae:	f002 1aff 	and.w	sl, r2, #16711935	@ 0xff00ff
900215b2:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
900215b6:	fb0e fa0a 	mul.w	sl, lr, sl
900215ba:	fb0e fe02 	mul.w	lr, lr, r2
900215be:	ea4f 221a 	mov.w	r2, sl, lsr #8
900215c2:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
900215c6:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
900215ca:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
900215ce:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
900215d2:	4452      	add	r2, sl
900215d4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
900215d8:	0a12      	lsrs	r2, r2, #8
900215da:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
900215de:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
900215e2:	ea42 020c 	orr.w	r2, r2, ip
900215e6:	9d12      	ldr	r5, [sp, #72]	@ 0x48
900215e8:	2dff      	cmp	r5, #255	@ 0xff
900215ea:	d021      	beq.n	90021630 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
900215ec:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
900215ee:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
900215f2:	9d12      	ldr	r5, [sp, #72]	@ 0x48
900215f4:	fb05 fb0b 	mul.w	fp, r5, fp
900215f8:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
900215fa:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
900215fe:	9d12      	ldr	r5, [sp, #72]	@ 0x48
90021600:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
90021604:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
90021608:	fb05 fa0a 	mul.w	sl, r5, sl
9002160c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
90021610:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
90021614:	44de      	add	lr, fp
90021616:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
9002161a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
9002161e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90021622:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
90021626:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
9002162a:	ea4e 050a 	orr.w	r5, lr, sl
9002162e:	950b      	str	r5, [sp, #44]	@ 0x2c
90021630:	9d10      	ldr	r5, [sp, #64]	@ 0x40
90021632:	2dff      	cmp	r5, #255	@ 0xff
90021634:	d021      	beq.n	9002167a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x222>
90021636:	9d08      	ldr	r5, [sp, #32]
90021638:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
9002163c:	9d10      	ldr	r5, [sp, #64]	@ 0x40
9002163e:	fb05 fb0b 	mul.w	fp, r5, fp
90021642:	9d08      	ldr	r5, [sp, #32]
90021644:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
90021648:	9d10      	ldr	r5, [sp, #64]	@ 0x40
9002164a:	fb05 fa0e 	mul.w	sl, r5, lr
9002164e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
90021652:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
90021656:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
9002165a:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
9002165e:	44de      	add	lr, fp
90021660:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
90021664:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
90021668:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9002166c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
90021670:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
90021674:	ea4e 050a 	orr.w	r5, lr, sl
90021678:	9508      	str	r5, [sp, #32]
9002167a:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
9002167c:	2dff      	cmp	r5, #255	@ 0xff
9002167e:	d021      	beq.n	900216c4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
90021680:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
90021682:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
90021686:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
90021688:	fb05 fb0b 	mul.w	fp, r5, fp
9002168c:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
9002168e:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
90021692:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
90021694:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
90021698:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
9002169c:	fb05 fa0a 	mul.w	sl, r5, sl
900216a0:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
900216a4:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
900216a8:	44de      	add	lr, fp
900216aa:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
900216ae:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
900216b2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
900216b6:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
900216ba:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
900216be:	ea4e 050a 	orr.w	r5, lr, sl
900216c2:	950c      	str	r5, [sp, #48]	@ 0x30
900216c4:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
900216c6:	f002 1eff 	and.w	lr, r2, #16711935	@ 0xff00ff
900216ca:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
900216ce:	2bff      	cmp	r3, #255	@ 0xff
900216d0:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
900216d4:	9d08      	ldr	r5, [sp, #32]
900216d6:	fb08 fc0c 	mul.w	ip, r8, ip
900216da:	fb01 cc0e 	mla	ip, r1, lr, ip
900216de:	f005 1eff 	and.w	lr, r5, #16711935	@ 0xff00ff
900216e2:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
900216e4:	fb00 cc0e 	mla	ip, r0, lr, ip
900216e8:	f005 1eff 	and.w	lr, r5, #16711935	@ 0xff00ff
900216ec:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
900216ee:	fb09 cc0e 	mla	ip, r9, lr, ip
900216f2:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
900216f6:	fb08 f80e 	mul.w	r8, r8, lr
900216fa:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
900216fe:	fb01 8202 	mla	r2, r1, r2, r8
90021702:	9908      	ldr	r1, [sp, #32]
90021704:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
90021708:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
9002170c:	990c      	ldr	r1, [sp, #48]	@ 0x30
9002170e:	fb00 220a 	mla	r2, r0, sl, r2
90021712:	f401 407f 	and.w	r0, r1, #65280	@ 0xff00
90021716:	fb09 2900 	mla	r9, r9, r0, r2
9002171a:	ea4f 2919 	mov.w	r9, r9, lsr #8
9002171e:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
90021722:	ea4c 0c09 	orr.w	ip, ip, r9
90021726:	ea4f 221c 	mov.w	r2, ip, lsr #8
9002172a:	f040 8091 	bne.w	90021850 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
9002172e:	ea4f 135c 	mov.w	r3, ip, lsr #5
90021732:	f422 62ff 	bic.w	r2, r2, #2040	@ 0x7f8
90021736:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
9002173a:	f022 0207 	bic.w	r2, r2, #7
9002173e:	431a      	orrs	r2, r3
90021740:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
90021744:	ea4c 0c02 	orr.w	ip, ip, r2
90021748:	f8a7 c000 	strh.w	ip, [r7]
9002174c:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
9002174e:	3702      	adds	r7, #2
90021750:	441c      	add	r4, r3
90021752:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
90021754:	441e      	add	r6, r3
90021756:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
90021758:	3b01      	subs	r3, #1
9002175a:	9317      	str	r3, [sp, #92]	@ 0x5c
9002175c:	e6c0      	b.n	900214e0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
9002175e:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
90021760:	441c      	add	r4, r3
90021762:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
90021764:	441e      	add	r6, r3
90021766:	9b07      	ldr	r3, [sp, #28]
90021768:	3b01      	subs	r3, #1
9002176a:	9307      	str	r3, [sp, #28]
9002176c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
9002176e:	3302      	adds	r3, #2
90021770:	930a      	str	r3, [sp, #40]	@ 0x28
90021772:	e695      	b.n	900214a0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
90021774:	d024      	beq.n	900217c0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
90021776:	9b07      	ldr	r3, [sp, #28]
90021778:	9827      	ldr	r0, [sp, #156]	@ 0x9c
9002177a:	3b01      	subs	r3, #1
9002177c:	fb00 4003 	mla	r0, r0, r3, r4
90021780:	1400      	asrs	r0, r0, #16
90021782:	f53f aeaa 	bmi.w	900214da <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
90021786:	3901      	subs	r1, #1
90021788:	4288      	cmp	r0, r1
9002178a:	f6bf aea6 	bge.w	900214da <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
9002178e:	9928      	ldr	r1, [sp, #160]	@ 0xa0
90021790:	fb01 6303 	mla	r3, r1, r3, r6
90021794:	141b      	asrs	r3, r3, #16
90021796:	f53f aea0 	bmi.w	900214da <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
9002179a:	3a01      	subs	r2, #1
9002179c:	4293      	cmp	r3, r2
9002179e:	f6bf ae9c 	bge.w	900214da <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
900217a2:	f8dd b01c 	ldr.w	fp, [sp, #28]
900217a6:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
900217aa:	f1bb 0f00 	cmp.w	fp, #0
900217ae:	f300 809a 	bgt.w	900218e6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
900217b2:	9b07      	ldr	r3, [sp, #28]
900217b4:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
900217b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
900217ba:	eb03 0345 	add.w	r3, r3, r5, lsl #1
900217be:	930a      	str	r3, [sp, #40]	@ 0x28
900217c0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
900217c2:	2b00      	cmp	r3, #0
900217c4:	f340 81ec 	ble.w	90021ba0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
900217c8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
900217cc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
900217ce:	ee30 0a04 	vadd.f32	s0, s0, s8
900217d2:	ee70 0aa4 	vadd.f32	s1, s1, s9
900217d6:	eef0 6a62 	vmov.f32	s13, s5
900217da:	eec7 7a00 	vdiv.f32	s15, s14, s0
900217de:	ee31 1a05 	vadd.f32	s2, s2, s10
900217e2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
900217e6:	ee16 4a90 	vmov	r4, s13
900217ea:	eef0 6a43 	vmov.f32	s13, s6
900217ee:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
900217f2:	ee16 6a90 	vmov	r6, s13
900217f6:	ee20 7aa7 	vmul.f32	s14, s1, s15
900217fa:	ee61 7a27 	vmul.f32	s15, s2, s15
900217fe:	ee77 2a62 	vsub.f32	s5, s14, s5
90021802:	ee37 3ac3 	vsub.f32	s6, s15, s6
90021806:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9002180a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9002180e:	ee12 2a90 	vmov	r2, s5
90021812:	eef0 2a47 	vmov.f32	s5, s14
90021816:	fb92 f3f3 	sdiv	r3, r2, r3
9002181a:	ee13 2a10 	vmov	r2, s6
9002181e:	9327      	str	r3, [sp, #156]	@ 0x9c
90021820:	9b24      	ldr	r3, [sp, #144]	@ 0x90
90021822:	eeb0 3a67 	vmov.f32	s6, s15
90021826:	fb92 f3f3 	sdiv	r3, r2, r3
9002182a:	9328      	str	r3, [sp, #160]	@ 0xa0
9002182c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
9002182e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
90021830:	3b01      	subs	r3, #1
90021832:	9316      	str	r3, [sp, #88]	@ 0x58
90021834:	9b24      	ldr	r3, [sp, #144]	@ 0x90
90021836:	bf08      	it	eq
90021838:	4613      	moveq	r3, r2
9002183a:	9307      	str	r3, [sp, #28]
9002183c:	e622      	b.n	90021484 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c>
9002183e:	2800      	cmp	r0, #0
90021840:	f43f ae92 	beq.w	90021568 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
90021844:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
90021848:	9308      	str	r3, [sp, #32]
9002184a:	0e1b      	lsrs	r3, r3, #24
9002184c:	9310      	str	r3, [sp, #64]	@ 0x40
9002184e:	e68b      	b.n	90021568 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
90021850:	8839      	ldrh	r1, [r7, #0]
90021852:	43db      	mvns	r3, r3
90021854:	4dd4      	ldr	r5, [pc, #848]	@ (90021ba8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x750>)
90021856:	ea4f 2e21 	mov.w	lr, r1, asr #8
9002185a:	fa5f f883 	uxtb.w	r8, r3
9002185e:	f00e 0ef8 	and.w	lr, lr, #248	@ 0xf8
90021862:	10c8      	asrs	r0, r1, #3
90021864:	00cb      	lsls	r3, r1, #3
90021866:	fb0e fe08 	mul.w	lr, lr, r8
9002186a:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
9002186e:	b2db      	uxtb	r3, r3
90021870:	f10e 0101 	add.w	r1, lr, #1
90021874:	fb00 f008 	mul.w	r0, r0, r8
90021878:	fb03 f308 	mul.w	r3, r3, r8
9002187c:	eb01 2e1e 	add.w	lr, r1, lr, lsr #8
90021880:	ea4f 411c 	mov.w	r1, ip, lsr #16
90021884:	eb01 211e 	add.w	r1, r1, lr, lsr #8
90021888:	f100 0e01 	add.w	lr, r0, #1
9002188c:	eb0e 2010 	add.w	r0, lr, r0, lsr #8
90021890:	b2c9      	uxtb	r1, r1
90021892:	eb02 2210 	add.w	r2, r2, r0, lsr #8
90021896:	ea05 2101 	and.w	r1, r5, r1, lsl #8
9002189a:	00d2      	lsls	r2, r2, #3
9002189c:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
900218a0:	430a      	orrs	r2, r1
900218a2:	1c59      	adds	r1, r3, #1
900218a4:	eb01 2313 	add.w	r3, r1, r3, lsr #8
900218a8:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
900218ac:	e748      	b.n	90021740 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
900218ae:	f112 0801 	adds.w	r8, r2, #1
900218b2:	f53f af4b 	bmi.w	9002174c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
900218b6:	4543      	cmp	r3, r8
900218b8:	f6ff af48 	blt.w	9002174c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
900218bc:	f11c 0801 	adds.w	r8, ip, #1
900218c0:	f53f af44 	bmi.w	9002174c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
900218c4:	45c6      	cmp	lr, r8
900218c6:	f6ff af41 	blt.w	9002174c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
900218ca:	b21b      	sxth	r3, r3
900218cc:	e9cd 2c01 	strd	r2, ip, [sp, #4]
900218d0:	fa0f f28e 	sxth.w	r2, lr
900218d4:	e9cd 1003 	strd	r1, r0, [sp, #12]
900218d8:	9200      	str	r2, [sp, #0]
900218da:	4639      	mov	r1, r7
900218dc:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
900218de:	9819      	ldr	r0, [sp, #100]	@ 0x64
900218e0:	f7ff fc88 	bl	900211f4 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>
900218e4:	e732      	b.n	9002174c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
900218e6:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
900218e8:	1421      	asrs	r1, r4, #16
900218ea:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
900218ec:	f3c4 3203 	ubfx	r2, r4, #12, #4
900218f0:	f9b3 7008 	ldrsh.w	r7, [r3, #8]
900218f4:	1433      	asrs	r3, r6, #16
900218f6:	f3c6 3003 	ubfx	r0, r6, #12, #4
900218fa:	fb07 1303 	mla	r3, r7, r3, r1
900218fe:	990f      	ldr	r1, [sp, #60]	@ 0x3c
90021900:	eb01 0183 	add.w	r1, r1, r3, lsl #2
90021904:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
90021908:	ea4f 6c13 	mov.w	ip, r3, lsr #24
9002190c:	2a00      	cmp	r2, #0
9002190e:	f000 8108 	beq.w	90021b22 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ca>
90021912:	684d      	ldr	r5, [r1, #4]
90021914:	950d      	str	r5, [sp, #52]	@ 0x34
90021916:	0e2d      	lsrs	r5, r5, #24
90021918:	9514      	str	r5, [sp, #80]	@ 0x50
9002191a:	b178      	cbz	r0, 9002193c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
9002191c:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
90021920:	3f01      	subs	r7, #1
90021922:	00bf      	lsls	r7, r7, #2
90021924:	3704      	adds	r7, #4
90021926:	eb01 0e07 	add.w	lr, r1, r7
9002192a:	59c9      	ldr	r1, [r1, r7]
9002192c:	9109      	str	r1, [sp, #36]	@ 0x24
9002192e:	0e09      	lsrs	r1, r1, #24
90021930:	9111      	str	r1, [sp, #68]	@ 0x44
90021932:	f8de 1004 	ldr.w	r1, [lr, #4]
90021936:	910e      	str	r1, [sp, #56]	@ 0x38
90021938:	0e09      	lsrs	r1, r1, #24
9002193a:	9115      	str	r1, [sp, #84]	@ 0x54
9002193c:	b292      	uxth	r2, r2
9002193e:	9d11      	ldr	r5, [sp, #68]	@ 0x44
90021940:	b280      	uxth	r0, r0
90021942:	fb02 f900 	mul.w	r9, r2, r0
90021946:	0112      	lsls	r2, r2, #4
90021948:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
9002194c:	eba2 0e09 	sub.w	lr, r2, r9
90021950:	f5c2 7180 	rsb	r1, r2, #256	@ 0x100
90021954:	9a14      	ldr	r2, [sp, #80]	@ 0x50
90021956:	b280      	uxth	r0, r0
90021958:	fa1f fe8e 	uxth.w	lr, lr
9002195c:	1a09      	subs	r1, r1, r0
9002195e:	fb0e f202 	mul.w	r2, lr, r2
90021962:	b289      	uxth	r1, r1
90021964:	fb01 220c 	mla	r2, r1, ip, r2
90021968:	fb00 2205 	mla	r2, r0, r5, r2
9002196c:	9d15      	ldr	r5, [sp, #84]	@ 0x54
9002196e:	fb09 2205 	mla	r2, r9, r5, r2
90021972:	f3c2 2207 	ubfx	r2, r2, #8, #8
90021976:	2a00      	cmp	r2, #0
90021978:	f000 80ca 	beq.w	90021b10 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
9002197c:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
90021980:	d019      	beq.n	900219b6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55e>
90021982:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
90021986:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
9002198a:	fb0c fa0a 	mul.w	sl, ip, sl
9002198e:	fb0c fc03 	mul.w	ip, ip, r3
90021992:	ea4f 231a 	mov.w	r3, sl, lsr #8
90021996:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
9002199a:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
9002199e:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
900219a2:	eb07 271c 	add.w	r7, r7, ip, lsr #8
900219a6:	4453      	add	r3, sl
900219a8:	0a3f      	lsrs	r7, r7, #8
900219aa:	0a1b      	lsrs	r3, r3, #8
900219ac:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
900219b0:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
900219b4:	433b      	orrs	r3, r7
900219b6:	9d14      	ldr	r5, [sp, #80]	@ 0x50
900219b8:	2dff      	cmp	r5, #255	@ 0xff
900219ba:	d020      	beq.n	900219fe <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a6>
900219bc:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
900219be:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
900219c2:	9d14      	ldr	r5, [sp, #80]	@ 0x50
900219c4:	436f      	muls	r7, r5
900219c6:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
900219c8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
900219cc:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
900219d0:	9d14      	ldr	r5, [sp, #80]	@ 0x50
900219d2:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
900219d6:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
900219da:	fb05 fa0a 	mul.w	sl, r5, sl
900219de:	44bc      	add	ip, r7
900219e0:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
900219e4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
900219e8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
900219ec:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
900219f0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
900219f4:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
900219f8:	ea4c 050a 	orr.w	r5, ip, sl
900219fc:	950d      	str	r5, [sp, #52]	@ 0x34
900219fe:	9d11      	ldr	r5, [sp, #68]	@ 0x44
90021a00:	2dff      	cmp	r5, #255	@ 0xff
90021a02:	d020      	beq.n	90021a46 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ee>
90021a04:	9d09      	ldr	r5, [sp, #36]	@ 0x24
90021a06:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
90021a0a:	9d11      	ldr	r5, [sp, #68]	@ 0x44
90021a0c:	436f      	muls	r7, r5
90021a0e:	9d09      	ldr	r5, [sp, #36]	@ 0x24
90021a10:	f405 4c7f 	and.w	ip, r5, #65280	@ 0xff00
90021a14:	9d11      	ldr	r5, [sp, #68]	@ 0x44
90021a16:	fb05 fa0c 	mul.w	sl, r5, ip
90021a1a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
90021a1e:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
90021a22:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
90021a26:	44bc      	add	ip, r7
90021a28:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
90021a2c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
90021a30:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90021a34:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90021a38:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
90021a3c:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
90021a40:	ea4c 050a 	orr.w	r5, ip, sl
90021a44:	9509      	str	r5, [sp, #36]	@ 0x24
90021a46:	9d15      	ldr	r5, [sp, #84]	@ 0x54
90021a48:	2dff      	cmp	r5, #255	@ 0xff
90021a4a:	d020      	beq.n	90021a8e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x636>
90021a4c:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
90021a4e:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
90021a52:	9d15      	ldr	r5, [sp, #84]	@ 0x54
90021a54:	436f      	muls	r7, r5
90021a56:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
90021a58:	ea4f 2c17 	mov.w	ip, r7, lsr #8
90021a5c:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
90021a60:	9d15      	ldr	r5, [sp, #84]	@ 0x54
90021a62:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
90021a66:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
90021a6a:	fb05 fa0a 	mul.w	sl, r5, sl
90021a6e:	44bc      	add	ip, r7
90021a70:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
90021a74:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90021a78:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
90021a7c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
90021a80:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90021a84:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
90021a88:	ea4c 050a 	orr.w	r5, ip, sl
90021a8c:	950e      	str	r5, [sp, #56]	@ 0x38
90021a8e:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
90021a90:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
90021a94:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
90021a98:	2aff      	cmp	r2, #255	@ 0xff
90021a9a:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
90021a9e:	9d09      	ldr	r5, [sp, #36]	@ 0x24
90021aa0:	fb0e f707 	mul.w	r7, lr, r7
90021aa4:	fb01 770c 	mla	r7, r1, ip, r7
90021aa8:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
90021aac:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
90021aae:	fb00 770c 	mla	r7, r0, ip, r7
90021ab2:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
90021ab6:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
90021ab8:	fb09 770c 	mla	r7, r9, ip, r7
90021abc:	f405 4c7f 	and.w	ip, r5, #65280	@ 0xff00
90021ac0:	fb0e fe0c 	mul.w	lr, lr, ip
90021ac4:	ea4f 2717 	mov.w	r7, r7, lsr #8
90021ac8:	fb01 e303 	mla	r3, r1, r3, lr
90021acc:	9909      	ldr	r1, [sp, #36]	@ 0x24
90021ace:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
90021ad2:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
90021ad6:	990e      	ldr	r1, [sp, #56]	@ 0x38
90021ad8:	fb00 330a 	mla	r3, r0, sl, r3
90021adc:	f401 4c7f 	and.w	ip, r1, #65280	@ 0xff00
90021ae0:	fb09 3c0c 	mla	ip, r9, ip, r3
90021ae4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90021ae8:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
90021aec:	ea47 070c 	orr.w	r7, r7, ip
90021af0:	ea4f 2317 	mov.w	r3, r7, lsr #8
90021af4:	d11e      	bne.n	90021b34 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6dc>
90021af6:	097a      	lsrs	r2, r7, #5
90021af8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
90021afc:	f3c7 07c4 	ubfx	r7, r7, #3, #5
90021b00:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
90021b04:	f023 0307 	bic.w	r3, r3, #7
90021b08:	4313      	orrs	r3, r2
90021b0a:	431f      	orrs	r7, r3
90021b0c:	f8a8 7000 	strh.w	r7, [r8]
90021b10:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
90021b12:	f108 0802 	add.w	r8, r8, #2
90021b16:	f10b 3bff 	add.w	fp, fp, #4294967295
90021b1a:	441c      	add	r4, r3
90021b1c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
90021b1e:	441e      	add	r6, r3
90021b20:	e643      	b.n	900217aa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
90021b22:	2800      	cmp	r0, #0
90021b24:	f43f af0a 	beq.w	9002193c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
90021b28:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
90021b2c:	9109      	str	r1, [sp, #36]	@ 0x24
90021b2e:	0e09      	lsrs	r1, r1, #24
90021b30:	9111      	str	r1, [sp, #68]	@ 0x44
90021b32:	e703      	b.n	9002193c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
90021b34:	f8b8 1000 	ldrh.w	r1, [r8]
90021b38:	43d2      	mvns	r2, r2
90021b3a:	ea4f 2c21 	mov.w	ip, r1, asr #8
90021b3e:	fa5f fe82 	uxtb.w	lr, r2
90021b42:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
90021b46:	10c8      	asrs	r0, r1, #3
90021b48:	00ca      	lsls	r2, r1, #3
90021b4a:	fb0c fc0e 	mul.w	ip, ip, lr
90021b4e:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
90021b52:	b2d2      	uxtb	r2, r2
90021b54:	f10c 0101 	add.w	r1, ip, #1
90021b58:	fb00 f00e 	mul.w	r0, r0, lr
90021b5c:	fb02 f20e 	mul.w	r2, r2, lr
90021b60:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
90021b64:	0c39      	lsrs	r1, r7, #16
90021b66:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
90021b6a:	490f      	ldr	r1, [pc, #60]	@ (90021ba8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x750>)
90021b6c:	fa5f fc8c 	uxtb.w	ip, ip
90021b70:	ea01 2c0c 	and.w	ip, r1, ip, lsl #8
90021b74:	1c41      	adds	r1, r0, #1
90021b76:	eb01 2010 	add.w	r0, r1, r0, lsr #8
90021b7a:	1c51      	adds	r1, r2, #1
90021b7c:	eb03 2010 	add.w	r0, r3, r0, lsr #8
90021b80:	eb01 2212 	add.w	r2, r1, r2, lsr #8
90021b84:	00c0      	lsls	r0, r0, #3
90021b86:	eb07 2712 	add.w	r7, r7, r2, lsr #8
90021b8a:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
90021b8e:	f3c7 07c4 	ubfx	r7, r7, #3, #5
90021b92:	ea4c 0c00 	orr.w	ip, ip, r0
90021b96:	ea47 0c0c 	orr.w	ip, r7, ip
90021b9a:	f8a8 c000 	strh.w	ip, [r8]
90021b9e:	e7b7      	b.n	90021b10 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
90021ba0:	b01b      	add	sp, #108	@ 0x6c
90021ba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90021ba6:	bf00      	nop
90021ba8:	fffff800 	.word	0xfffff800

90021bac <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>:
90021bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
90021bb0:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	@ 0x28
90021bb4:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
90021bb8:	2d00      	cmp	r5, #0
90021bba:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
90021bbe:	f89d 7030 	ldrb.w	r7, [sp, #48]	@ 0x30
90021bc2:	fb05 0e03 	mla	lr, r5, r3, r0
90021bc6:	f89d c034 	ldrb.w	ip, [sp, #52]	@ 0x34
90021bca:	f2c0 808c 	blt.w	90021ce6 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
90021bce:	45a9      	cmp	r9, r5
90021bd0:	f340 8089 	ble.w	90021ce6 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
90021bd4:	2800      	cmp	r0, #0
90021bd6:	f2c0 8084 	blt.w	90021ce2 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
90021bda:	4580      	cmp	r8, r0
90021bdc:	f340 8081 	ble.w	90021ce2 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
90021be0:	ea4f 045e 	mov.w	r4, lr, lsr #1
90021be4:	f01e 0f01 	tst.w	lr, #1
90021be8:	5d16      	ldrb	r6, [r2, r4]
90021bea:	bf0c      	ite	eq
90021bec:	f006 060f 	andeq.w	r6, r6, #15
90021bf0:	1136      	asrne	r6, r6, #4
90021bf2:	eb06 1606 	add.w	r6, r6, r6, lsl #4
90021bf6:	b2f6      	uxtb	r6, r6
90021bf8:	1c44      	adds	r4, r0, #1
90021bfa:	d477      	bmi.n	90021cec <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
90021bfc:	45a0      	cmp	r8, r4
90021bfe:	dd75      	ble.n	90021cec <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
90021c00:	2f00      	cmp	r7, #0
90021c02:	d075      	beq.n	90021cf0 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x144>
90021c04:	f10e 0a01 	add.w	sl, lr, #1
90021c08:	ea4f 045a 	mov.w	r4, sl, lsr #1
90021c0c:	f01a 0f01 	tst.w	sl, #1
90021c10:	5d14      	ldrb	r4, [r2, r4]
90021c12:	bf0c      	ite	eq
90021c14:	f004 040f 	andeq.w	r4, r4, #15
90021c18:	1124      	asrne	r4, r4, #4
90021c1a:	eb04 1404 	add.w	r4, r4, r4, lsl #4
90021c1e:	b2e4      	uxtb	r4, r4
90021c20:	3501      	adds	r5, #1
90021c22:	d469      	bmi.n	90021cf8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
90021c24:	45a9      	cmp	r9, r5
90021c26:	dd67      	ble.n	90021cf8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
90021c28:	f1bc 0f00 	cmp.w	ip, #0
90021c2c:	d067      	beq.n	90021cfe <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x152>
90021c2e:	2800      	cmp	r0, #0
90021c30:	db60      	blt.n	90021cf4 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
90021c32:	4580      	cmp	r8, r0
90021c34:	dd5e      	ble.n	90021cf4 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
90021c36:	eb03 090e 	add.w	r9, r3, lr
90021c3a:	ea4f 0559 	mov.w	r5, r9, lsr #1
90021c3e:	f019 0f01 	tst.w	r9, #1
90021c42:	5d55      	ldrb	r5, [r2, r5]
90021c44:	bf0c      	ite	eq
90021c46:	f005 050f 	andeq.w	r5, r5, #15
90021c4a:	112d      	asrne	r5, r5, #4
90021c4c:	eb05 1505 	add.w	r5, r5, r5, lsl #4
90021c50:	b2ed      	uxtb	r5, r5
90021c52:	3001      	adds	r0, #1
90021c54:	d456      	bmi.n	90021d04 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
90021c56:	4580      	cmp	r8, r0
90021c58:	dd54      	ble.n	90021d04 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
90021c5a:	2f00      	cmp	r7, #0
90021c5c:	d054      	beq.n	90021d08 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x15c>
90021c5e:	3301      	adds	r3, #1
90021c60:	449e      	add	lr, r3
90021c62:	ea4f 035e 	mov.w	r3, lr, lsr #1
90021c66:	f01e 0f01 	tst.w	lr, #1
90021c6a:	5cd0      	ldrb	r0, [r2, r3]
90021c6c:	bf0c      	ite	eq
90021c6e:	f000 000f 	andeq.w	r0, r0, #15
90021c72:	1100      	asrne	r0, r0, #4
90021c74:	eb00 1000 	add.w	r0, r0, r0, lsl #4
90021c78:	b2c3      	uxtb	r3, r0
90021c7a:	b2ba      	uxth	r2, r7
90021c7c:	fa1f fc8c 	uxth.w	ip, ip
90021c80:	fb02 f00c 	mul.w	r0, r2, ip
90021c84:	0112      	lsls	r2, r2, #4
90021c86:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
90021c8a:	f5c2 7780 	rsb	r7, r2, #256	@ 0x100
90021c8e:	1a12      	subs	r2, r2, r0
90021c90:	fa1f fc8c 	uxth.w	ip, ip
90021c94:	b292      	uxth	r2, r2
90021c96:	eba7 070c 	sub.w	r7, r7, ip
90021c9a:	4362      	muls	r2, r4
90021c9c:	b2bf      	uxth	r7, r7
90021c9e:	fb06 2207 	mla	r2, r6, r7, r2
90021ca2:	fb0c 2505 	mla	r5, ip, r5, r2
90021ca6:	fb00 5303 	mla	r3, r0, r3, r5
90021caa:	f3c3 2307 	ubfx	r3, r3, #8, #8
90021cae:	b1b3      	cbz	r3, 90021cde <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
90021cb0:	f89d 2038 	ldrb.w	r2, [sp, #56]	@ 0x38
90021cb4:	435a      	muls	r2, r3
90021cb6:	1c53      	adds	r3, r2, #1
90021cb8:	eb03 2312 	add.w	r3, r3, r2, lsr #8
90021cbc:	4a2d      	ldr	r2, [pc, #180]	@ (90021d74 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1c8>)
90021cbe:	121b      	asrs	r3, r3, #8
90021cc0:	6812      	ldr	r2, [r2, #0]
90021cc2:	2bff      	cmp	r3, #255	@ 0xff
90021cc4:	ea4f 2612 	mov.w	r6, r2, lsr #8
90021cc8:	d120      	bne.n	90021d0c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x160>
90021cca:	0950      	lsrs	r0, r2, #5
90021ccc:	4b2a      	ldr	r3, [pc, #168]	@ (90021d78 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1cc>)
90021cce:	f3c2 02c4 	ubfx	r2, r2, #3, #5
90021cd2:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
90021cd6:	4033      	ands	r3, r6
90021cd8:	4318      	orrs	r0, r3
90021cda:	4302      	orrs	r2, r0
90021cdc:	800a      	strh	r2, [r1, #0]
90021cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
90021ce2:	2600      	movs	r6, #0
90021ce4:	e788      	b.n	90021bf8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x4c>
90021ce6:	2400      	movs	r4, #0
90021ce8:	4626      	mov	r6, r4
90021cea:	e799      	b.n	90021c20 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
90021cec:	2400      	movs	r4, #0
90021cee:	e797      	b.n	90021c20 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
90021cf0:	463c      	mov	r4, r7
90021cf2:	e795      	b.n	90021c20 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
90021cf4:	2500      	movs	r5, #0
90021cf6:	e7ac      	b.n	90021c52 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xa6>
90021cf8:	2300      	movs	r3, #0
90021cfa:	461d      	mov	r5, r3
90021cfc:	e7bd      	b.n	90021c7a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
90021cfe:	4663      	mov	r3, ip
90021d00:	4665      	mov	r5, ip
90021d02:	e7ba      	b.n	90021c7a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
90021d04:	2300      	movs	r3, #0
90021d06:	e7b8      	b.n	90021c7a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
90021d08:	463b      	mov	r3, r7
90021d0a:	e7b6      	b.n	90021c7a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
90021d0c:	880d      	ldrh	r5, [r1, #0]
90021d0e:	b29f      	uxth	r7, r3
90021d10:	f3c2 4007 	ubfx	r0, r2, #16, #8
90021d14:	43db      	mvns	r3, r3
90021d16:	122c      	asrs	r4, r5, #8
90021d18:	fb10 f007 	smulbb	r0, r0, r7
90021d1c:	b2db      	uxtb	r3, r3
90021d1e:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
90021d22:	b2f6      	uxtb	r6, r6
90021d24:	b2d2      	uxtb	r2, r2
90021d26:	fb04 0403 	mla	r4, r4, r3, r0
90021d2a:	10e8      	asrs	r0, r5, #3
90021d2c:	fb12 f207 	smulbb	r2, r2, r7
90021d30:	00ed      	lsls	r5, r5, #3
90021d32:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
90021d36:	b2a4      	uxth	r4, r4
90021d38:	fb16 f607 	smulbb	r6, r6, r7
90021d3c:	b2ed      	uxtb	r5, r5
90021d3e:	fb00 6603 	mla	r6, r0, r3, r6
90021d42:	fb05 2303 	mla	r3, r5, r3, r2
90021d46:	b2b0      	uxth	r0, r6
90021d48:	b29a      	uxth	r2, r3
90021d4a:	1c63      	adds	r3, r4, #1
90021d4c:	eb03 2414 	add.w	r4, r3, r4, lsr #8
90021d50:	1c53      	adds	r3, r2, #1
90021d52:	eb03 2312 	add.w	r3, r3, r2, lsr #8
90021d56:	1c42      	adds	r2, r0, #1
90021d58:	f404 4478 	and.w	r4, r4, #63488	@ 0xf800
90021d5c:	eb02 2010 	add.w	r0, r2, r0, lsr #8
90021d60:	f3c3 23c4 	ubfx	r3, r3, #11, #5
90021d64:	0940      	lsrs	r0, r0, #5
90021d66:	4323      	orrs	r3, r4
90021d68:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
90021d6c:	4303      	orrs	r3, r0
90021d6e:	800b      	strh	r3, [r1, #0]
90021d70:	e7b5      	b.n	90021cde <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
90021d72:	bf00      	nop
90021d74:	24026314 	.word	0x24026314
90021d78:	00fff800 	.word	0x00fff800

90021d7c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90021d7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90021d80:	b097      	sub	sp, #92	@ 0x5c
90021d82:	9214      	str	r2, [sp, #80]	@ 0x50
90021d84:	9309      	str	r3, [sp, #36]	@ 0x24
90021d86:	9a25      	ldr	r2, [sp, #148]	@ 0x94
90021d88:	f89d 30a4 	ldrb.w	r3, [sp, #164]	@ 0xa4
90021d8c:	9015      	str	r0, [sp, #84]	@ 0x54
90021d8e:	910d      	str	r1, [sp, #52]	@ 0x34
90021d90:	6850      	ldr	r0, [r2, #4]
90021d92:	930f      	str	r3, [sp, #60]	@ 0x3c
90021d94:	6812      	ldr	r2, [r2, #0]
90021d96:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	@ 0x98
90021d9a:	e9dd 4621 	ldrd	r4, r6, [sp, #132]	@ 0x84
90021d9e:	fb00 1303 	mla	r3, r0, r3, r1
90021da2:	eb02 0943 	add.w	r9, r2, r3, lsl #1
90021da6:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
90021da8:	689b      	ldr	r3, [r3, #8]
90021daa:	3301      	adds	r3, #1
90021dac:	f023 0301 	bic.w	r3, r3, #1
90021db0:	930a      	str	r3, [sp, #40]	@ 0x28
90021db2:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
90021db4:	681f      	ldr	r7, [r3, #0]
90021db6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
90021db8:	2b00      	cmp	r3, #0
90021dba:	dc03      	bgt.n	90021dc4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
90021dbc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
90021dbe:	2b00      	cmp	r3, #0
90021dc0:	f340 8289 	ble.w	900222d6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55a>
90021dc4:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
90021dc6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
90021dca:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
90021dce:	1e48      	subs	r0, r1, #1
90021dd0:	f102 3cff 	add.w	ip, r2, #4294967295
90021dd4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
90021dd6:	2b00      	cmp	r3, #0
90021dd8:	f340 80c5 	ble.w	90021f66 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
90021ddc:	ea5f 4e24 	movs.w	lr, r4, asr #16
90021de0:	ea4f 4326 	mov.w	r3, r6, asr #16
90021de4:	d406      	bmi.n	90021df4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
90021de6:	4586      	cmp	lr, r0
90021de8:	da04      	bge.n	90021df4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
90021dea:	2b00      	cmp	r3, #0
90021dec:	db02      	blt.n	90021df4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
90021dee:	4563      	cmp	r3, ip
90021df0:	f2c0 80ba 	blt.w	90021f68 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
90021df4:	f11e 0e01 	adds.w	lr, lr, #1
90021df8:	f100 80ab 	bmi.w	90021f52 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
90021dfc:	4571      	cmp	r1, lr
90021dfe:	f2c0 80a8 	blt.w	90021f52 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
90021e02:	3301      	adds	r3, #1
90021e04:	f100 80a5 	bmi.w	90021f52 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
90021e08:	429a      	cmp	r2, r3
90021e0a:	f2c0 80a2 	blt.w	90021f52 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
90021e0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
90021e10:	46c8      	mov	r8, r9
90021e12:	f9bd a028 	ldrsh.w	sl, [sp, #40]	@ 0x28
90021e16:	930e      	str	r3, [sp, #56]	@ 0x38
90021e18:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
90021e1a:	2b00      	cmp	r3, #0
90021e1c:	f340 80c4 	ble.w	90021fa8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
90021e20:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
90021e22:	1430      	asrs	r0, r6, #16
90021e24:	f3c4 3203 	ubfx	r2, r4, #12, #4
90021e28:	f3c6 3103 	ubfx	r1, r6, #12, #4
90021e2c:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
90021e30:	1423      	asrs	r3, r4, #16
90021e32:	f100 814f 	bmi.w	900220d4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
90021e36:	f10c 3bff 	add.w	fp, ip, #4294967295
90021e3a:	455b      	cmp	r3, fp
90021e3c:	f280 814a 	bge.w	900220d4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
90021e40:	2800      	cmp	r0, #0
90021e42:	f2c0 8147 	blt.w	900220d4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
90021e46:	f10e 3bff 	add.w	fp, lr, #4294967295
90021e4a:	4558      	cmp	r0, fp
90021e4c:	f280 8142 	bge.w	900220d4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
90021e50:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
90021e52:	fb00 3305 	mla	r3, r0, r5, r3
90021e56:	0858      	lsrs	r0, r3, #1
90021e58:	07dd      	lsls	r5, r3, #31
90021e5a:	f817 c000 	ldrb.w	ip, [r7, r0]
90021e5e:	bf54      	ite	pl
90021e60:	f00c 0c0f 	andpl.w	ip, ip, #15
90021e64:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
90021e68:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
90021e6c:	fa5f fc8c 	uxtb.w	ip, ip
90021e70:	2a00      	cmp	r2, #0
90021e72:	f000 80dd 	beq.w	90022030 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b4>
90021e76:	1c58      	adds	r0, r3, #1
90021e78:	ea4f 0e50 	mov.w	lr, r0, lsr #1
90021e7c:	07c0      	lsls	r0, r0, #31
90021e7e:	f817 e00e 	ldrb.w	lr, [r7, lr]
90021e82:	bf54      	ite	pl
90021e84:	f00e 0e0f 	andpl.w	lr, lr, #15
90021e88:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
90021e8c:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
90021e90:	fa5f f08e 	uxtb.w	r0, lr
90021e94:	9010      	str	r0, [sp, #64]	@ 0x40
90021e96:	b1d9      	cbz	r1, 90021ed0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
90021e98:	4453      	add	r3, sl
90021e9a:	0858      	lsrs	r0, r3, #1
90021e9c:	07dd      	lsls	r5, r3, #31
90021e9e:	f103 0301 	add.w	r3, r3, #1
90021ea2:	5c38      	ldrb	r0, [r7, r0]
90021ea4:	bf54      	ite	pl
90021ea6:	f000 000f 	andpl.w	r0, r0, #15
90021eaa:	1100      	asrmi	r0, r0, #4
90021eac:	07dd      	lsls	r5, r3, #31
90021eae:	eb00 1000 	add.w	r0, r0, r0, lsl #4
90021eb2:	b2c0      	uxtb	r0, r0
90021eb4:	900b      	str	r0, [sp, #44]	@ 0x2c
90021eb6:	ea4f 0053 	mov.w	r0, r3, lsr #1
90021eba:	f817 e000 	ldrb.w	lr, [r7, r0]
90021ebe:	bf54      	ite	pl
90021ec0:	f00e 030f 	andpl.w	r3, lr, #15
90021ec4:	ea4f 132e 	movmi.w	r3, lr, asr #4
90021ec8:	eb03 1303 	add.w	r3, r3, r3, lsl #4
90021ecc:	b2db      	uxtb	r3, r3
90021ece:	9311      	str	r3, [sp, #68]	@ 0x44
90021ed0:	b292      	uxth	r2, r2
90021ed2:	9d10      	ldr	r5, [sp, #64]	@ 0x40
90021ed4:	b289      	uxth	r1, r1
90021ed6:	fb02 f301 	mul.w	r3, r2, r1
90021eda:	0112      	lsls	r2, r2, #4
90021edc:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
90021ee0:	f5c2 7080 	rsb	r0, r2, #256	@ 0x100
90021ee4:	1ad2      	subs	r2, r2, r3
90021ee6:	b289      	uxth	r1, r1
90021ee8:	b292      	uxth	r2, r2
90021eea:	1a40      	subs	r0, r0, r1
90021eec:	436a      	muls	r2, r5
90021eee:	b280      	uxth	r0, r0
90021ef0:	fb0c 2c00 	mla	ip, ip, r0, r2
90021ef4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
90021ef6:	fb01 c102 	mla	r1, r1, r2, ip
90021efa:	9a11      	ldr	r2, [sp, #68]	@ 0x44
90021efc:	fb03 1302 	mla	r3, r3, r2, r1
90021f00:	f3c3 2307 	ubfx	r3, r3, #8, #8
90021f04:	b1db      	cbz	r3, 90021f3e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
90021f06:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
90021f08:	4353      	muls	r3, r2
90021f0a:	1c5a      	adds	r2, r3, #1
90021f0c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
90021f10:	4ac6      	ldr	r2, [pc, #792]	@ (9002222c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
90021f12:	121b      	asrs	r3, r3, #8
90021f14:	6812      	ldr	r2, [r2, #0]
90021f16:	2bff      	cmp	r3, #255	@ 0xff
90021f18:	ea4f 2c12 	mov.w	ip, r2, lsr #8
90021f1c:	f040 8099 	bne.w	90022052 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
90021f20:	0953      	lsrs	r3, r2, #5
90021f22:	f42c 6cff 	bic.w	ip, ip, #2040	@ 0x7f8
90021f26:	f3c2 02c4 	ubfx	r2, r2, #3, #5
90021f2a:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
90021f2e:	f02c 0c07 	bic.w	ip, ip, #7
90021f32:	ea43 0c0c 	orr.w	ip, r3, ip
90021f36:	ea4c 0202 	orr.w	r2, ip, r2
90021f3a:	f8a8 2000 	strh.w	r2, [r8]
90021f3e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
90021f40:	f108 0802 	add.w	r8, r8, #2
90021f44:	441c      	add	r4, r3
90021f46:	9b24      	ldr	r3, [sp, #144]	@ 0x90
90021f48:	441e      	add	r6, r3
90021f4a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
90021f4c:	3b01      	subs	r3, #1
90021f4e:	930e      	str	r3, [sp, #56]	@ 0x38
90021f50:	e762      	b.n	90021e18 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
90021f52:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
90021f54:	f109 0902 	add.w	r9, r9, #2
90021f58:	441c      	add	r4, r3
90021f5a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
90021f5c:	441e      	add	r6, r3
90021f5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
90021f60:	3b01      	subs	r3, #1
90021f62:	9309      	str	r3, [sp, #36]	@ 0x24
90021f64:	e736      	b.n	90021dd4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
90021f66:	d024      	beq.n	90021fb2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
90021f68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
90021f6a:	9823      	ldr	r0, [sp, #140]	@ 0x8c
90021f6c:	3b01      	subs	r3, #1
90021f6e:	fb00 4003 	mla	r0, r0, r3, r4
90021f72:	1400      	asrs	r0, r0, #16
90021f74:	f53f af4b 	bmi.w	90021e0e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
90021f78:	3901      	subs	r1, #1
90021f7a:	4288      	cmp	r0, r1
90021f7c:	f6bf af47 	bge.w	90021e0e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
90021f80:	9924      	ldr	r1, [sp, #144]	@ 0x90
90021f82:	fb01 6303 	mla	r3, r1, r3, r6
90021f86:	141b      	asrs	r3, r3, #16
90021f88:	f53f af41 	bmi.w	90021e0e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
90021f8c:	3a01      	subs	r2, #1
90021f8e:	4293      	cmp	r3, r2
90021f90:	f6bf af3d 	bge.w	90021e0e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
90021f94:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	@ 0x28
90021f98:	46c8      	mov	r8, r9
90021f9a:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
90021f9e:	930e      	str	r3, [sp, #56]	@ 0x38
90021fa0:	f1bb 0f00 	cmp.w	fp, #0
90021fa4:	f300 80b7 	bgt.w	90022116 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39a>
90021fa8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
90021faa:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
90021fae:	eb09 0945 	add.w	r9, r9, r5, lsl #1
90021fb2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
90021fb4:	2b00      	cmp	r3, #0
90021fb6:	f340 818e 	ble.w	900222d6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55a>
90021fba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
90021fbe:	9b20      	ldr	r3, [sp, #128]	@ 0x80
90021fc0:	ee30 0a04 	vadd.f32	s0, s0, s8
90021fc4:	ee70 0aa4 	vadd.f32	s1, s1, s9
90021fc8:	eef0 6a62 	vmov.f32	s13, s5
90021fcc:	eec7 7a00 	vdiv.f32	s15, s14, s0
90021fd0:	ee31 1a05 	vadd.f32	s2, s2, s10
90021fd4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90021fd8:	ee16 4a90 	vmov	r4, s13
90021fdc:	eef0 6a43 	vmov.f32	s13, s6
90021fe0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90021fe4:	ee16 6a90 	vmov	r6, s13
90021fe8:	ee20 7aa7 	vmul.f32	s14, s1, s15
90021fec:	ee61 7a27 	vmul.f32	s15, s2, s15
90021ff0:	ee77 2a62 	vsub.f32	s5, s14, s5
90021ff4:	ee37 3ac3 	vsub.f32	s6, s15, s6
90021ff8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90021ffc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
90022000:	ee12 2a90 	vmov	r2, s5
90022004:	eef0 2a47 	vmov.f32	s5, s14
90022008:	fb92 f3f3 	sdiv	r3, r2, r3
9002200c:	ee13 2a10 	vmov	r2, s6
90022010:	9323      	str	r3, [sp, #140]	@ 0x8c
90022012:	9b20      	ldr	r3, [sp, #128]	@ 0x80
90022014:	eeb0 3a67 	vmov.f32	s6, s15
90022018:	fb92 f3f3 	sdiv	r3, r2, r3
9002201c:	9324      	str	r3, [sp, #144]	@ 0x90
9002201e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
90022020:	9a14      	ldr	r2, [sp, #80]	@ 0x50
90022022:	3b01      	subs	r3, #1
90022024:	930d      	str	r3, [sp, #52]	@ 0x34
90022026:	9b20      	ldr	r3, [sp, #128]	@ 0x80
90022028:	bf08      	it	eq
9002202a:	4613      	moveq	r3, r2
9002202c:	9309      	str	r3, [sp, #36]	@ 0x24
9002202e:	e6c2      	b.n	90021db6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
90022030:	2900      	cmp	r1, #0
90022032:	f43f af4d 	beq.w	90021ed0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
90022036:	eb0a 0003 	add.w	r0, sl, r3
9002203a:	0843      	lsrs	r3, r0, #1
9002203c:	07c0      	lsls	r0, r0, #31
9002203e:	5cfb      	ldrb	r3, [r7, r3]
90022040:	bf54      	ite	pl
90022042:	f003 030f 	andpl.w	r3, r3, #15
90022046:	111b      	asrmi	r3, r3, #4
90022048:	eb03 1303 	add.w	r3, r3, r3, lsl #4
9002204c:	b2db      	uxtb	r3, r3
9002204e:	930b      	str	r3, [sp, #44]	@ 0x2c
90022050:	e73e      	b.n	90021ed0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
90022052:	f8b8 e000 	ldrh.w	lr, [r8]
90022056:	fa1f fb83 	uxth.w	fp, r3
9002205a:	f3c2 4107 	ubfx	r1, r2, #16, #8
9002205e:	43db      	mvns	r3, r3
90022060:	ea4f 202e 	mov.w	r0, lr, asr #8
90022064:	fb11 f10b 	smulbb	r1, r1, fp
90022068:	b2db      	uxtb	r3, r3
9002206a:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
9002206e:	fa5f fc8c 	uxtb.w	ip, ip
90022072:	b2d2      	uxtb	r2, r2
90022074:	fb00 1003 	mla	r0, r0, r3, r1
90022078:	ea4f 01ee 	mov.w	r1, lr, asr #3
9002207c:	fb1c fc0b 	smulbb	ip, ip, fp
90022080:	ea4f 0ece 	mov.w	lr, lr, lsl #3
90022084:	b280      	uxth	r0, r0
90022086:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
9002208a:	fb12 fb0b 	smulbb	fp, r2, fp
9002208e:	fa5f fe8e 	uxtb.w	lr, lr
90022092:	fb01 cc03 	mla	ip, r1, r3, ip
90022096:	fb0e bb03 	mla	fp, lr, r3, fp
9002209a:	1c43      	adds	r3, r0, #1
9002209c:	fa1f fc8c 	uxth.w	ip, ip
900220a0:	fa1f fb8b 	uxth.w	fp, fp
900220a4:	eb03 2010 	add.w	r0, r3, r0, lsr #8
900220a8:	f10c 0101 	add.w	r1, ip, #1
900220ac:	f400 4378 	and.w	r3, r0, #63488	@ 0xf800
900220b0:	f10b 0001 	add.w	r0, fp, #1
900220b4:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
900220b8:	eb00 201b 	add.w	r0, r0, fp, lsr #8
900220bc:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
900220c0:	f3c0 20c4 	ubfx	r0, r0, #11, #5
900220c4:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
900220c8:	4318      	orrs	r0, r3
900220ca:	ea40 000c 	orr.w	r0, r0, ip
900220ce:	f8a8 0000 	strh.w	r0, [r8]
900220d2:	e734      	b.n	90021f3e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
900220d4:	f113 0b01 	adds.w	fp, r3, #1
900220d8:	f53f af31 	bmi.w	90021f3e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
900220dc:	45dc      	cmp	ip, fp
900220de:	f6ff af2e 	blt.w	90021f3e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
900220e2:	f110 0b01 	adds.w	fp, r0, #1
900220e6:	f53f af2a 	bmi.w	90021f3e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
900220ea:	45de      	cmp	lr, fp
900220ec:	f6ff af27 	blt.w	90021f3e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
900220f0:	9302      	str	r3, [sp, #8]
900220f2:	fa0f f38e 	sxth.w	r3, lr
900220f6:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
900220f8:	9301      	str	r3, [sp, #4]
900220fa:	fa0f f38c 	sxth.w	r3, ip
900220fe:	e9cd 0203 	strd	r0, r2, [sp, #12]
90022102:	e9cd 1505 	strd	r1, r5, [sp, #20]
90022106:	9300      	str	r3, [sp, #0]
90022108:	463a      	mov	r2, r7
9002210a:	4653      	mov	r3, sl
9002210c:	4641      	mov	r1, r8
9002210e:	9815      	ldr	r0, [sp, #84]	@ 0x54
90022110:	f7ff fd4c 	bl	90021bac <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>
90022114:	e713      	b.n	90021f3e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
90022116:	1422      	asrs	r2, r4, #16
90022118:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
9002211a:	1433      	asrs	r3, r6, #16
9002211c:	f3c4 3103 	ubfx	r1, r4, #12, #4
90022120:	f3c6 3003 	ubfx	r0, r6, #12, #4
90022124:	fb05 2303 	mla	r3, r5, r3, r2
90022128:	085a      	lsrs	r2, r3, #1
9002212a:	07dd      	lsls	r5, r3, #31
9002212c:	5cba      	ldrb	r2, [r7, r2]
9002212e:	bf54      	ite	pl
90022130:	f002 020f 	andpl.w	r2, r2, #15
90022134:	1112      	asrmi	r2, r2, #4
90022136:	eb02 1202 	add.w	r2, r2, r2, lsl #4
9002213a:	b2d2      	uxtb	r2, r2
9002213c:	2900      	cmp	r1, #0
9002213e:	d077      	beq.n	90022230 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
90022140:	f103 0e01 	add.w	lr, r3, #1
90022144:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
90022148:	f01e 0f01 	tst.w	lr, #1
9002214c:	f817 c00c 	ldrb.w	ip, [r7, ip]
90022150:	bf0c      	ite	eq
90022152:	f00c 0c0f 	andeq.w	ip, ip, #15
90022156:	ea4f 1c2c 	movne.w	ip, ip, asr #4
9002215a:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
9002215e:	fa5f f58c 	uxtb.w	r5, ip
90022162:	9512      	str	r5, [sp, #72]	@ 0x48
90022164:	b308      	cbz	r0, 900221aa <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
90022166:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
90022168:	442b      	add	r3, r5
9002216a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
9002216e:	07dd      	lsls	r5, r3, #31
90022170:	f103 0301 	add.w	r3, r3, #1
90022174:	f817 c00c 	ldrb.w	ip, [r7, ip]
90022178:	bf54      	ite	pl
9002217a:	f00c 0c0f 	andpl.w	ip, ip, #15
9002217e:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
90022182:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
90022186:	fa5f f58c 	uxtb.w	r5, ip
9002218a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
9002218e:	950c      	str	r5, [sp, #48]	@ 0x30
90022190:	07dd      	lsls	r5, r3, #31
90022192:	f817 c00c 	ldrb.w	ip, [r7, ip]
90022196:	bf54      	ite	pl
90022198:	f00c 0c0f 	andpl.w	ip, ip, #15
9002219c:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
900221a0:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
900221a4:	fa5f f38c 	uxtb.w	r3, ip
900221a8:	9313      	str	r3, [sp, #76]	@ 0x4c
900221aa:	b289      	uxth	r1, r1
900221ac:	9d12      	ldr	r5, [sp, #72]	@ 0x48
900221ae:	b280      	uxth	r0, r0
900221b0:	fb01 f300 	mul.w	r3, r1, r0
900221b4:	0109      	lsls	r1, r1, #4
900221b6:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
900221ba:	f5c1 7c80 	rsb	ip, r1, #256	@ 0x100
900221be:	1ac9      	subs	r1, r1, r3
900221c0:	b280      	uxth	r0, r0
900221c2:	b289      	uxth	r1, r1
900221c4:	ebac 0c00 	sub.w	ip, ip, r0
900221c8:	4369      	muls	r1, r5
900221ca:	fa1f fc8c 	uxth.w	ip, ip
900221ce:	fb02 120c 	mla	r2, r2, ip, r1
900221d2:	990c      	ldr	r1, [sp, #48]	@ 0x30
900221d4:	fb00 2001 	mla	r0, r0, r1, r2
900221d8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
900221da:	fb03 0302 	mla	r3, r3, r2, r0
900221de:	f3c3 2307 	ubfx	r3, r3, #8, #8
900221e2:	b1d3      	cbz	r3, 9002221a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
900221e4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
900221e6:	4353      	muls	r3, r2
900221e8:	1c5a      	adds	r2, r3, #1
900221ea:	eb02 2313 	add.w	r3, r2, r3, lsr #8
900221ee:	4a0f      	ldr	r2, [pc, #60]	@ (9002222c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
900221f0:	121b      	asrs	r3, r3, #8
900221f2:	6812      	ldr	r2, [r2, #0]
900221f4:	2bff      	cmp	r3, #255	@ 0xff
900221f6:	ea4f 2c12 	mov.w	ip, r2, lsr #8
900221fa:	d12d      	bne.n	90022258 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
900221fc:	0953      	lsrs	r3, r2, #5
900221fe:	f42c 6cff 	bic.w	ip, ip, #2040	@ 0x7f8
90022202:	f3c2 02c4 	ubfx	r2, r2, #3, #5
90022206:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
9002220a:	f02c 0c07 	bic.w	ip, ip, #7
9002220e:	ea43 0c0c 	orr.w	ip, r3, ip
90022212:	ea4c 0202 	orr.w	r2, ip, r2
90022216:	f8a8 2000 	strh.w	r2, [r8]
9002221a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
9002221c:	f108 0802 	add.w	r8, r8, #2
90022220:	f10b 3bff 	add.w	fp, fp, #4294967295
90022224:	441c      	add	r4, r3
90022226:	9b24      	ldr	r3, [sp, #144]	@ 0x90
90022228:	441e      	add	r6, r3
9002222a:	e6b9      	b.n	90021fa0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
9002222c:	24026314 	.word	0x24026314
90022230:	2800      	cmp	r0, #0
90022232:	d0ba      	beq.n	900221aa <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
90022234:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
90022236:	442b      	add	r3, r5
90022238:	ea4f 0c53 	mov.w	ip, r3, lsr #1
9002223c:	07db      	lsls	r3, r3, #31
9002223e:	f817 c00c 	ldrb.w	ip, [r7, ip]
90022242:	bf54      	ite	pl
90022244:	f00c 0c0f 	andpl.w	ip, ip, #15
90022248:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
9002224c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
90022250:	fa5f f38c 	uxtb.w	r3, ip
90022254:	930c      	str	r3, [sp, #48]	@ 0x30
90022256:	e7a8      	b.n	900221aa <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
90022258:	f8b8 e000 	ldrh.w	lr, [r8]
9002225c:	fa1f fa83 	uxth.w	sl, r3
90022260:	f3c2 4107 	ubfx	r1, r2, #16, #8
90022264:	43db      	mvns	r3, r3
90022266:	ea4f 202e 	mov.w	r0, lr, asr #8
9002226a:	fb11 f10a 	smulbb	r1, r1, sl
9002226e:	b2db      	uxtb	r3, r3
90022270:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
90022274:	b2d2      	uxtb	r2, r2
90022276:	fa5f fc8c 	uxtb.w	ip, ip
9002227a:	fb00 1003 	mla	r0, r0, r3, r1
9002227e:	ea4f 01ee 	mov.w	r1, lr, asr #3
90022282:	fb12 f20a 	smulbb	r2, r2, sl
90022286:	ea4f 0ece 	mov.w	lr, lr, lsl #3
9002228a:	b280      	uxth	r0, r0
9002228c:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
90022290:	fb1c fc0a 	smulbb	ip, ip, sl
90022294:	fa5f fe8e 	uxtb.w	lr, lr
90022298:	fb0e 2203 	mla	r2, lr, r3, r2
9002229c:	fb01 cc03 	mla	ip, r1, r3, ip
900222a0:	1c43      	adds	r3, r0, #1
900222a2:	b292      	uxth	r2, r2
900222a4:	eb03 2010 	add.w	r0, r3, r0, lsr #8
900222a8:	1c51      	adds	r1, r2, #1
900222aa:	fa1f fc8c 	uxth.w	ip, ip
900222ae:	f400 4078 	and.w	r0, r0, #63488	@ 0xf800
900222b2:	eb01 2112 	add.w	r1, r1, r2, lsr #8
900222b6:	f3c1 21c4 	ubfx	r1, r1, #11, #5
900222ba:	4308      	orrs	r0, r1
900222bc:	f10c 0101 	add.w	r1, ip, #1
900222c0:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
900222c4:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
900222c8:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
900222cc:	ea40 000c 	orr.w	r0, r0, ip
900222d0:	f8a8 0000 	strh.w	r0, [r8]
900222d4:	e7a1      	b.n	9002221a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
900222d6:	b017      	add	sp, #92	@ 0x5c
900222d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

900222dc <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>:
900222dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
900222e0:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	@ 0x28
900222e4:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
900222e8:	2d00      	cmp	r5, #0
900222ea:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
900222ee:	f89d 7030 	ldrb.w	r7, [sp, #48]	@ 0x30
900222f2:	fb05 0e03 	mla	lr, r5, r3, r0
900222f6:	f89d c034 	ldrb.w	ip, [sp, #52]	@ 0x34
900222fa:	f2c0 80b0 	blt.w	9002245e <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
900222fe:	45a9      	cmp	r9, r5
90022300:	f340 80ad 	ble.w	9002245e <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
90022304:	2800      	cmp	r0, #0
90022306:	f2c0 80a8 	blt.w	9002245a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
9002230a:	4580      	cmp	r8, r0
9002230c:	f340 80a5 	ble.w	9002245a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
90022310:	ea4f 045e 	mov.w	r4, lr, lsr #1
90022314:	f01e 0f01 	tst.w	lr, #1
90022318:	5d16      	ldrb	r6, [r2, r4]
9002231a:	bf0c      	ite	eq
9002231c:	f006 060f 	andeq.w	r6, r6, #15
90022320:	1136      	asrne	r6, r6, #4
90022322:	eb06 1606 	add.w	r6, r6, r6, lsl #4
90022326:	b2f6      	uxtb	r6, r6
90022328:	1c44      	adds	r4, r0, #1
9002232a:	f100 809b 	bmi.w	90022464 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
9002232e:	45a0      	cmp	r8, r4
90022330:	f340 8098 	ble.w	90022464 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
90022334:	2f00      	cmp	r7, #0
90022336:	f000 8097 	beq.w	90022468 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x18c>
9002233a:	f10e 0a01 	add.w	sl, lr, #1
9002233e:	ea4f 045a 	mov.w	r4, sl, lsr #1
90022342:	f01a 0f01 	tst.w	sl, #1
90022346:	5d14      	ldrb	r4, [r2, r4]
90022348:	bf0c      	ite	eq
9002234a:	f004 040f 	andeq.w	r4, r4, #15
9002234e:	1124      	asrne	r4, r4, #4
90022350:	eb04 1404 	add.w	r4, r4, r4, lsl #4
90022354:	b2e4      	uxtb	r4, r4
90022356:	3501      	adds	r5, #1
90022358:	f100 808a 	bmi.w	90022470 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
9002235c:	45a9      	cmp	r9, r5
9002235e:	f340 8087 	ble.w	90022470 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
90022362:	f1bc 0f00 	cmp.w	ip, #0
90022366:	f000 8086 	beq.w	90022476 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x19a>
9002236a:	2800      	cmp	r0, #0
9002236c:	db7e      	blt.n	9002246c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
9002236e:	4580      	cmp	r8, r0
90022370:	dd7c      	ble.n	9002246c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
90022372:	eb03 090e 	add.w	r9, r3, lr
90022376:	ea4f 0559 	mov.w	r5, r9, lsr #1
9002237a:	f019 0f01 	tst.w	r9, #1
9002237e:	5d55      	ldrb	r5, [r2, r5]
90022380:	bf0c      	ite	eq
90022382:	f005 050f 	andeq.w	r5, r5, #15
90022386:	112d      	asrne	r5, r5, #4
90022388:	eb05 1505 	add.w	r5, r5, r5, lsl #4
9002238c:	b2ed      	uxtb	r5, r5
9002238e:	3001      	adds	r0, #1
90022390:	d474      	bmi.n	9002247c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
90022392:	4580      	cmp	r8, r0
90022394:	dd72      	ble.n	9002247c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
90022396:	2f00      	cmp	r7, #0
90022398:	d072      	beq.n	90022480 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a4>
9002239a:	3301      	adds	r3, #1
9002239c:	449e      	add	lr, r3
9002239e:	ea4f 035e 	mov.w	r3, lr, lsr #1
900223a2:	f01e 0f01 	tst.w	lr, #1
900223a6:	5cd0      	ldrb	r0, [r2, r3]
900223a8:	bf0c      	ite	eq
900223aa:	f000 000f 	andeq.w	r0, r0, #15
900223ae:	1100      	asrne	r0, r0, #4
900223b0:	eb00 1000 	add.w	r0, r0, r0, lsl #4
900223b4:	b2c3      	uxtb	r3, r0
900223b6:	b2ba      	uxth	r2, r7
900223b8:	fa1f fc8c 	uxth.w	ip, ip
900223bc:	fb02 f00c 	mul.w	r0, r2, ip
900223c0:	0112      	lsls	r2, r2, #4
900223c2:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
900223c6:	f5c2 7780 	rsb	r7, r2, #256	@ 0x100
900223ca:	1a12      	subs	r2, r2, r0
900223cc:	fa1f fc8c 	uxth.w	ip, ip
900223d0:	b292      	uxth	r2, r2
900223d2:	eba7 070c 	sub.w	r7, r7, ip
900223d6:	4362      	muls	r2, r4
900223d8:	b2bf      	uxth	r7, r7
900223da:	fb06 2207 	mla	r2, r6, r7, r2
900223de:	fb0c 2505 	mla	r5, ip, r5, r2
900223e2:	fb00 5303 	mla	r3, r0, r3, r5
900223e6:	f3c3 2307 	ubfx	r3, r3, #8, #8
900223ea:	b3a3      	cbz	r3, 90022456 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17a>
900223ec:	4a25      	ldr	r2, [pc, #148]	@ (90022484 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a8>)
900223ee:	880e      	ldrh	r6, [r1, #0]
900223f0:	6815      	ldr	r5, [r2, #0]
900223f2:	b29a      	uxth	r2, r3
900223f4:	1234      	asrs	r4, r6, #8
900223f6:	43db      	mvns	r3, r3
900223f8:	f3c5 4007 	ubfx	r0, r5, #16, #8
900223fc:	f3c5 2707 	ubfx	r7, r5, #8, #8
90022400:	b2db      	uxtb	r3, r3
90022402:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
90022406:	fb10 f002 	smulbb	r0, r0, r2
9002240a:	b2ed      	uxtb	r5, r5
9002240c:	fb17 f702 	smulbb	r7, r7, r2
90022410:	fb04 0403 	mla	r4, r4, r3, r0
90022414:	10f0      	asrs	r0, r6, #3
90022416:	fb15 f202 	smulbb	r2, r5, r2
9002241a:	00f6      	lsls	r6, r6, #3
9002241c:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
90022420:	b2a4      	uxth	r4, r4
90022422:	b2f6      	uxtb	r6, r6
90022424:	fb00 7003 	mla	r0, r0, r3, r7
90022428:	fb06 2303 	mla	r3, r6, r3, r2
9002242c:	b280      	uxth	r0, r0
9002242e:	b29a      	uxth	r2, r3
90022430:	1c63      	adds	r3, r4, #1
90022432:	eb03 2414 	add.w	r4, r3, r4, lsr #8
90022436:	1c53      	adds	r3, r2, #1
90022438:	eb03 2312 	add.w	r3, r3, r2, lsr #8
9002243c:	1c42      	adds	r2, r0, #1
9002243e:	f404 4478 	and.w	r4, r4, #63488	@ 0xf800
90022442:	eb02 2010 	add.w	r0, r2, r0, lsr #8
90022446:	f3c3 23c4 	ubfx	r3, r3, #11, #5
9002244a:	0940      	lsrs	r0, r0, #5
9002244c:	4323      	orrs	r3, r4
9002244e:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
90022452:	4303      	orrs	r3, r0
90022454:	800b      	strh	r3, [r1, #0]
90022456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9002245a:	2600      	movs	r6, #0
9002245c:	e764      	b.n	90022328 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x4c>
9002245e:	2400      	movs	r4, #0
90022460:	4626      	mov	r6, r4
90022462:	e778      	b.n	90022356 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
90022464:	2400      	movs	r4, #0
90022466:	e776      	b.n	90022356 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
90022468:	463c      	mov	r4, r7
9002246a:	e774      	b.n	90022356 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
9002246c:	2500      	movs	r5, #0
9002246e:	e78e      	b.n	9002238e <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xb2>
90022470:	2300      	movs	r3, #0
90022472:	461d      	mov	r5, r3
90022474:	e79f      	b.n	900223b6 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
90022476:	4663      	mov	r3, ip
90022478:	4665      	mov	r5, ip
9002247a:	e79c      	b.n	900223b6 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
9002247c:	2300      	movs	r3, #0
9002247e:	e79a      	b.n	900223b6 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
90022480:	463b      	mov	r3, r7
90022482:	e798      	b.n	900223b6 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
90022484:	24026314 	.word	0x24026314

90022488 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90022488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9002248c:	b093      	sub	sp, #76	@ 0x4c
9002248e:	461d      	mov	r5, r3
90022490:	920c      	str	r2, [sp, #48]	@ 0x30
90022492:	9a21      	ldr	r2, [sp, #132]	@ 0x84
90022494:	9011      	str	r0, [sp, #68]	@ 0x44
90022496:	9107      	str	r1, [sp, #28]
90022498:	6850      	ldr	r0, [r2, #4]
9002249a:	6812      	ldr	r2, [r2, #0]
9002249c:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	@ 0x88
900224a0:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	@ 0x74
900224a4:	fb00 1303 	mla	r3, r0, r3, r1
900224a8:	eb02 0943 	add.w	r9, r2, r3, lsl #1
900224ac:	9b24      	ldr	r3, [sp, #144]	@ 0x90
900224ae:	689b      	ldr	r3, [r3, #8]
900224b0:	3301      	adds	r3, #1
900224b2:	f023 0301 	bic.w	r3, r3, #1
900224b6:	9306      	str	r3, [sp, #24]
900224b8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
900224ba:	681f      	ldr	r7, [r3, #0]
900224bc:	9b07      	ldr	r3, [sp, #28]
900224be:	2b00      	cmp	r3, #0
900224c0:	dc03      	bgt.n	900224ca <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
900224c2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
900224c4:	2b00      	cmp	r3, #0
900224c6:	f340 8267 	ble.w	90022998 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
900224ca:	9b24      	ldr	r3, [sp, #144]	@ 0x90
900224cc:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
900224d0:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
900224d4:	1e48      	subs	r0, r1, #1
900224d6:	f102 3cff 	add.w	ip, r2, #4294967295
900224da:	2d00      	cmp	r5, #0
900224dc:	f340 80b7 	ble.w	9002264e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
900224e0:	ea5f 4e24 	movs.w	lr, r4, asr #16
900224e4:	ea4f 4326 	mov.w	r3, r6, asr #16
900224e8:	d406      	bmi.n	900224f8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
900224ea:	4586      	cmp	lr, r0
900224ec:	da04      	bge.n	900224f8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
900224ee:	2b00      	cmp	r3, #0
900224f0:	db02      	blt.n	900224f8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
900224f2:	4563      	cmp	r3, ip
900224f4:	f2c0 80ac 	blt.w	90022650 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
900224f8:	f11e 0e01 	adds.w	lr, lr, #1
900224fc:	f100 809f 	bmi.w	9002263e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
90022500:	4571      	cmp	r1, lr
90022502:	f2c0 809c 	blt.w	9002263e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
90022506:	3301      	adds	r3, #1
90022508:	f100 8099 	bmi.w	9002263e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
9002250c:	429a      	cmp	r2, r3
9002250e:	f2c0 8096 	blt.w	9002263e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
90022512:	46c8      	mov	r8, r9
90022514:	f9bd a018 	ldrsh.w	sl, [sp, #24]
90022518:	9509      	str	r5, [sp, #36]	@ 0x24
9002251a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
9002251c:	2b00      	cmp	r3, #0
9002251e:	f340 80b5 	ble.w	9002268c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
90022522:	f3c4 3303 	ubfx	r3, r4, #12, #4
90022526:	1430      	asrs	r0, r6, #16
90022528:	f3c6 3103 	ubfx	r1, r6, #12, #4
9002252c:	9308      	str	r3, [sp, #32]
9002252e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
90022530:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
90022534:	1423      	asrs	r3, r4, #16
90022536:	f100 813f 	bmi.w	900227b8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
9002253a:	f10c 3bff 	add.w	fp, ip, #4294967295
9002253e:	455b      	cmp	r3, fp
90022540:	f280 813a 	bge.w	900227b8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
90022544:	2800      	cmp	r0, #0
90022546:	f2c0 8137 	blt.w	900227b8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
9002254a:	f10e 3bff 	add.w	fp, lr, #4294967295
9002254e:	4558      	cmp	r0, fp
90022550:	f280 8132 	bge.w	900227b8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
90022554:	9a06      	ldr	r2, [sp, #24]
90022556:	fb00 3302 	mla	r3, r0, r2, r3
9002255a:	0858      	lsrs	r0, r3, #1
9002255c:	07da      	lsls	r2, r3, #31
9002255e:	9a08      	ldr	r2, [sp, #32]
90022560:	f817 c000 	ldrb.w	ip, [r7, r0]
90022564:	bf54      	ite	pl
90022566:	f00c 0c0f 	andpl.w	ip, ip, #15
9002256a:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
9002256e:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
90022572:	fa5f fc8c 	uxtb.w	ip, ip
90022576:	2a00      	cmp	r2, #0
90022578:	f000 80cc 	beq.w	90022714 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
9002257c:	1c58      	adds	r0, r3, #1
9002257e:	ea4f 0e50 	mov.w	lr, r0, lsr #1
90022582:	07c0      	lsls	r0, r0, #31
90022584:	f817 e00e 	ldrb.w	lr, [r7, lr]
90022588:	bf54      	ite	pl
9002258a:	f00e 0e0f 	andpl.w	lr, lr, #15
9002258e:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
90022592:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
90022596:	fa5f fe8e 	uxtb.w	lr, lr
9002259a:	f8cd e034 	str.w	lr, [sp, #52]	@ 0x34
9002259e:	b1b9      	cbz	r1, 900225d0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
900225a0:	4453      	add	r3, sl
900225a2:	0858      	lsrs	r0, r3, #1
900225a4:	07da      	lsls	r2, r3, #31
900225a6:	5c38      	ldrb	r0, [r7, r0]
900225a8:	bf54      	ite	pl
900225aa:	f000 000f 	andpl.w	r0, r0, #15
900225ae:	1100      	asrmi	r0, r0, #4
900225b0:	eb00 1000 	add.w	r0, r0, r0, lsl #4
900225b4:	b2c0      	uxtb	r0, r0
900225b6:	900a      	str	r0, [sp, #40]	@ 0x28
900225b8:	1c58      	adds	r0, r3, #1
900225ba:	0843      	lsrs	r3, r0, #1
900225bc:	07c2      	lsls	r2, r0, #31
900225be:	5cfb      	ldrb	r3, [r7, r3]
900225c0:	bf54      	ite	pl
900225c2:	f003 030f 	andpl.w	r3, r3, #15
900225c6:	111b      	asrmi	r3, r3, #4
900225c8:	eb03 1303 	add.w	r3, r3, r3, lsl #4
900225cc:	b2db      	uxtb	r3, r3
900225ce:	930e      	str	r3, [sp, #56]	@ 0x38
900225d0:	f8bd 2020 	ldrh.w	r2, [sp, #32]
900225d4:	b289      	uxth	r1, r1
900225d6:	fb02 f301 	mul.w	r3, r2, r1
900225da:	0112      	lsls	r2, r2, #4
900225dc:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
900225e0:	f5c2 7080 	rsb	r0, r2, #256	@ 0x100
900225e4:	1ad2      	subs	r2, r2, r3
900225e6:	b289      	uxth	r1, r1
900225e8:	b292      	uxth	r2, r2
900225ea:	1a40      	subs	r0, r0, r1
900225ec:	fa1f fe80 	uxth.w	lr, r0
900225f0:	980d      	ldr	r0, [sp, #52]	@ 0x34
900225f2:	4342      	muls	r2, r0
900225f4:	fb0c 2c0e 	mla	ip, ip, lr, r2
900225f8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
900225fa:	fb01 c102 	mla	r1, r1, r2, ip
900225fe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
90022600:	fb03 1302 	mla	r3, r3, r2, r1
90022604:	f3c3 2307 	ubfx	r3, r3, #8, #8
90022608:	2bff      	cmp	r3, #255	@ 0xff
9002260a:	f040 8094 	bne.w	90022736 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ae>
9002260e:	4bbf      	ldr	r3, [pc, #764]	@ (9002290c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
90022610:	681a      	ldr	r2, [r3, #0]
90022612:	4bbf      	ldr	r3, [pc, #764]	@ (90022910 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>)
90022614:	0951      	lsrs	r1, r2, #5
90022616:	ea03 2312 	and.w	r3, r3, r2, lsr #8
9002261a:	f3c2 02c4 	ubfx	r2, r2, #3, #5
9002261e:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
90022622:	430b      	orrs	r3, r1
90022624:	4313      	orrs	r3, r2
90022626:	f8a8 3000 	strh.w	r3, [r8]
9002262a:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
9002262c:	f108 0802 	add.w	r8, r8, #2
90022630:	441c      	add	r4, r3
90022632:	9b20      	ldr	r3, [sp, #128]	@ 0x80
90022634:	441e      	add	r6, r3
90022636:	9b09      	ldr	r3, [sp, #36]	@ 0x24
90022638:	3b01      	subs	r3, #1
9002263a:	9309      	str	r3, [sp, #36]	@ 0x24
9002263c:	e76d      	b.n	9002251a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
9002263e:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
90022640:	3d01      	subs	r5, #1
90022642:	f109 0902 	add.w	r9, r9, #2
90022646:	441c      	add	r4, r3
90022648:	9b20      	ldr	r3, [sp, #128]	@ 0x80
9002264a:	441e      	add	r6, r3
9002264c:	e745      	b.n	900224da <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
9002264e:	d021      	beq.n	90022694 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
90022650:	1e6b      	subs	r3, r5, #1
90022652:	981f      	ldr	r0, [sp, #124]	@ 0x7c
90022654:	fb00 4003 	mla	r0, r0, r3, r4
90022658:	1400      	asrs	r0, r0, #16
9002265a:	f53f af5a 	bmi.w	90022512 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
9002265e:	3901      	subs	r1, #1
90022660:	4288      	cmp	r0, r1
90022662:	f6bf af56 	bge.w	90022512 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
90022666:	9920      	ldr	r1, [sp, #128]	@ 0x80
90022668:	fb01 6303 	mla	r3, r1, r3, r6
9002266c:	141b      	asrs	r3, r3, #16
9002266e:	f53f af50 	bmi.w	90022512 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
90022672:	3a01      	subs	r2, #1
90022674:	4293      	cmp	r3, r2
90022676:	f6bf af4c 	bge.w	90022512 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
9002267a:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
9002267e:	46a8      	mov	r8, r5
90022680:	46ce      	mov	lr, r9
90022682:	9308      	str	r3, [sp, #32]
90022684:	f1b8 0f00 	cmp.w	r8, #0
90022688:	f300 80b6 	bgt.w	900227f8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
9002268c:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
90022690:	eb09 0945 	add.w	r9, r9, r5, lsl #1
90022694:	9b07      	ldr	r3, [sp, #28]
90022696:	2b00      	cmp	r3, #0
90022698:	f340 817e 	ble.w	90022998 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
9002269c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
900226a0:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
900226a2:	ee30 0a04 	vadd.f32	s0, s0, s8
900226a6:	ee70 0aa4 	vadd.f32	s1, s1, s9
900226aa:	eef0 6a62 	vmov.f32	s13, s5
900226ae:	eec7 7a00 	vdiv.f32	s15, s14, s0
900226b2:	ee31 1a05 	vadd.f32	s2, s2, s10
900226b6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
900226ba:	ee16 4a90 	vmov	r4, s13
900226be:	eef0 6a43 	vmov.f32	s13, s6
900226c2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
900226c6:	ee16 6a90 	vmov	r6, s13
900226ca:	ee20 7aa7 	vmul.f32	s14, s1, s15
900226ce:	ee61 7a27 	vmul.f32	s15, s2, s15
900226d2:	ee77 2a62 	vsub.f32	s5, s14, s5
900226d6:	ee37 3ac3 	vsub.f32	s6, s15, s6
900226da:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
900226de:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
900226e2:	ee12 2a90 	vmov	r2, s5
900226e6:	eef0 2a47 	vmov.f32	s5, s14
900226ea:	fb92 f3f3 	sdiv	r3, r2, r3
900226ee:	ee13 2a10 	vmov	r2, s6
900226f2:	931f      	str	r3, [sp, #124]	@ 0x7c
900226f4:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
900226f6:	eeb0 3a67 	vmov.f32	s6, s15
900226fa:	fb92 f3f3 	sdiv	r3, r2, r3
900226fe:	9320      	str	r3, [sp, #128]	@ 0x80
90022700:	9b07      	ldr	r3, [sp, #28]
90022702:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
90022704:	3b01      	subs	r3, #1
90022706:	9307      	str	r3, [sp, #28]
90022708:	bf08      	it	eq
9002270a:	4615      	moveq	r5, r2
9002270c:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
9002270e:	bf18      	it	ne
90022710:	461d      	movne	r5, r3
90022712:	e6d3      	b.n	900224bc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
90022714:	2900      	cmp	r1, #0
90022716:	f43f af5b 	beq.w	900225d0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
9002271a:	eb0a 0003 	add.w	r0, sl, r3
9002271e:	0843      	lsrs	r3, r0, #1
90022720:	07c0      	lsls	r0, r0, #31
90022722:	5cfb      	ldrb	r3, [r7, r3]
90022724:	bf54      	ite	pl
90022726:	f003 030f 	andpl.w	r3, r3, #15
9002272a:	111b      	asrmi	r3, r3, #4
9002272c:	eb03 1303 	add.w	r3, r3, r3, lsl #4
90022730:	b2db      	uxtb	r3, r3
90022732:	930a      	str	r3, [sp, #40]	@ 0x28
90022734:	e74c      	b.n	900225d0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
90022736:	2b00      	cmp	r3, #0
90022738:	f43f af77 	beq.w	9002262a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
9002273c:	4a73      	ldr	r2, [pc, #460]	@ (9002290c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
9002273e:	fa1f fe83 	uxth.w	lr, r3
90022742:	f8b8 c000 	ldrh.w	ip, [r8]
90022746:	43db      	mvns	r3, r3
90022748:	6810      	ldr	r0, [r2, #0]
9002274a:	ea4f 212c 	mov.w	r1, ip, asr #8
9002274e:	f3c0 4207 	ubfx	r2, r0, #16, #8
90022752:	b2db      	uxtb	r3, r3
90022754:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
90022758:	f3c0 2b07 	ubfx	fp, r0, #8, #8
9002275c:	fb12 f20e 	smulbb	r2, r2, lr
90022760:	b2c0      	uxtb	r0, r0
90022762:	fb1b fb0e 	smulbb	fp, fp, lr
90022766:	fb01 2103 	mla	r1, r1, r3, r2
9002276a:	ea4f 02ec 	mov.w	r2, ip, asr #3
9002276e:	fb10 fe0e 	smulbb	lr, r0, lr
90022772:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
90022776:	b289      	uxth	r1, r1
90022778:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
9002277c:	fa5f fc8c 	uxtb.w	ip, ip
90022780:	fb02 b203 	mla	r2, r2, r3, fp
90022784:	1c48      	adds	r0, r1, #1
90022786:	fb0c e303 	mla	r3, ip, r3, lr
9002278a:	b292      	uxth	r2, r2
9002278c:	b29b      	uxth	r3, r3
9002278e:	eb00 2111 	add.w	r1, r0, r1, lsr #8
90022792:	f102 0b01 	add.w	fp, r2, #1
90022796:	f401 4078 	and.w	r0, r1, #63488	@ 0xf800
9002279a:	1c59      	adds	r1, r3, #1
9002279c:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
900227a0:	eb01 2113 	add.w	r1, r1, r3, lsr #8
900227a4:	0952      	lsrs	r2, r2, #5
900227a6:	f3c1 21c4 	ubfx	r1, r1, #11, #5
900227aa:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
900227ae:	4301      	orrs	r1, r0
900227b0:	4311      	orrs	r1, r2
900227b2:	f8a8 1000 	strh.w	r1, [r8]
900227b6:	e738      	b.n	9002262a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
900227b8:	f113 0b01 	adds.w	fp, r3, #1
900227bc:	f53f af35 	bmi.w	9002262a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
900227c0:	45dc      	cmp	ip, fp
900227c2:	f6ff af32 	blt.w	9002262a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
900227c6:	f110 0b01 	adds.w	fp, r0, #1
900227ca:	f53f af2e 	bmi.w	9002262a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
900227ce:	45de      	cmp	lr, fp
900227d0:	f6ff af2b 	blt.w	9002262a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
900227d4:	9302      	str	r3, [sp, #8]
900227d6:	fa0f f38e 	sxth.w	r3, lr
900227da:	9a08      	ldr	r2, [sp, #32]
900227dc:	9301      	str	r3, [sp, #4]
900227de:	fa0f f38c 	sxth.w	r3, ip
900227e2:	9105      	str	r1, [sp, #20]
900227e4:	4641      	mov	r1, r8
900227e6:	9300      	str	r3, [sp, #0]
900227e8:	4653      	mov	r3, sl
900227ea:	e9cd 0203 	strd	r0, r2, [sp, #12]
900227ee:	463a      	mov	r2, r7
900227f0:	9811      	ldr	r0, [sp, #68]	@ 0x44
900227f2:	f7ff fd73 	bl	900222dc <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>
900227f6:	e718      	b.n	9002262a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
900227f8:	1422      	asrs	r2, r4, #16
900227fa:	9906      	ldr	r1, [sp, #24]
900227fc:	1433      	asrs	r3, r6, #16
900227fe:	f3c4 3003 	ubfx	r0, r4, #12, #4
90022802:	f3c6 3c03 	ubfx	ip, r6, #12, #4
90022806:	fb01 2303 	mla	r3, r1, r3, r2
9002280a:	085a      	lsrs	r2, r3, #1
9002280c:	07d9      	lsls	r1, r3, #31
9002280e:	5cba      	ldrb	r2, [r7, r2]
90022810:	bf54      	ite	pl
90022812:	f002 020f 	andpl.w	r2, r2, #15
90022816:	1112      	asrmi	r2, r2, #4
90022818:	eb02 1202 	add.w	r2, r2, r2, lsl #4
9002281c:	b2d2      	uxtb	r2, r2
9002281e:	2800      	cmp	r0, #0
90022820:	d063      	beq.n	900228ea <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x462>
90022822:	f103 0a01 	add.w	sl, r3, #1
90022826:	ea4f 015a 	mov.w	r1, sl, lsr #1
9002282a:	f01a 0f01 	tst.w	sl, #1
9002282e:	5c79      	ldrb	r1, [r7, r1]
90022830:	bf0c      	ite	eq
90022832:	f001 010f 	andeq.w	r1, r1, #15
90022836:	1109      	asrne	r1, r1, #4
90022838:	eb01 1101 	add.w	r1, r1, r1, lsl #4
9002283c:	b2c9      	uxtb	r1, r1
9002283e:	910f      	str	r1, [sp, #60]	@ 0x3c
90022840:	f1bc 0f00 	cmp.w	ip, #0
90022844:	d01a      	beq.n	9002287c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
90022846:	9908      	ldr	r1, [sp, #32]
90022848:	440b      	add	r3, r1
9002284a:	0859      	lsrs	r1, r3, #1
9002284c:	f013 0f01 	tst.w	r3, #1
90022850:	f103 0301 	add.w	r3, r3, #1
90022854:	5c79      	ldrb	r1, [r7, r1]
90022856:	bf0c      	ite	eq
90022858:	f001 010f 	andeq.w	r1, r1, #15
9002285c:	1109      	asrne	r1, r1, #4
9002285e:	eb01 1101 	add.w	r1, r1, r1, lsl #4
90022862:	b2c9      	uxtb	r1, r1
90022864:	910b      	str	r1, [sp, #44]	@ 0x2c
90022866:	0859      	lsrs	r1, r3, #1
90022868:	07db      	lsls	r3, r3, #31
9002286a:	5c79      	ldrb	r1, [r7, r1]
9002286c:	bf54      	ite	pl
9002286e:	f001 010f 	andpl.w	r1, r1, #15
90022872:	1109      	asrmi	r1, r1, #4
90022874:	eb01 1101 	add.w	r1, r1, r1, lsl #4
90022878:	b2c9      	uxtb	r1, r1
9002287a:	9110      	str	r1, [sp, #64]	@ 0x40
9002287c:	b280      	uxth	r0, r0
9002287e:	fa1f fc8c 	uxth.w	ip, ip
90022882:	fb00 f30c 	mul.w	r3, r0, ip
90022886:	0100      	lsls	r0, r0, #4
90022888:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
9002288c:	f5c0 7180 	rsb	r1, r0, #256	@ 0x100
90022890:	1ac0      	subs	r0, r0, r3
90022892:	fa1f fc8c 	uxth.w	ip, ip
90022896:	b280      	uxth	r0, r0
90022898:	eba1 010c 	sub.w	r1, r1, ip
9002289c:	fa1f fa81 	uxth.w	sl, r1
900228a0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
900228a2:	4348      	muls	r0, r1
900228a4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
900228a6:	fb02 020a 	mla	r2, r2, sl, r0
900228aa:	fb0c 2c01 	mla	ip, ip, r1, r2
900228ae:	9a10      	ldr	r2, [sp, #64]	@ 0x40
900228b0:	fb03 c302 	mla	r3, r3, r2, ip
900228b4:	f3c3 2307 	ubfx	r3, r3, #8, #8
900228b8:	2bff      	cmp	r3, #255	@ 0xff
900228ba:	d12b      	bne.n	90022914 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
900228bc:	4b13      	ldr	r3, [pc, #76]	@ (9002290c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
900228be:	681a      	ldr	r2, [r3, #0]
900228c0:	4b13      	ldr	r3, [pc, #76]	@ (90022910 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>)
900228c2:	0951      	lsrs	r1, r2, #5
900228c4:	ea03 2312 	and.w	r3, r3, r2, lsr #8
900228c8:	f3c2 02c4 	ubfx	r2, r2, #3, #5
900228cc:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
900228d0:	430b      	orrs	r3, r1
900228d2:	4313      	orrs	r3, r2
900228d4:	f8ae 3000 	strh.w	r3, [lr]
900228d8:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
900228da:	f10e 0e02 	add.w	lr, lr, #2
900228de:	f108 38ff 	add.w	r8, r8, #4294967295
900228e2:	441c      	add	r4, r3
900228e4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
900228e6:	441e      	add	r6, r3
900228e8:	e6cc      	b.n	90022684 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
900228ea:	f1bc 0f00 	cmp.w	ip, #0
900228ee:	d0c5      	beq.n	9002287c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
900228f0:	9908      	ldr	r1, [sp, #32]
900228f2:	440b      	add	r3, r1
900228f4:	0859      	lsrs	r1, r3, #1
900228f6:	07db      	lsls	r3, r3, #31
900228f8:	5c79      	ldrb	r1, [r7, r1]
900228fa:	bf54      	ite	pl
900228fc:	f001 010f 	andpl.w	r1, r1, #15
90022900:	1109      	asrmi	r1, r1, #4
90022902:	eb01 1101 	add.w	r1, r1, r1, lsl #4
90022906:	b2c9      	uxtb	r1, r1
90022908:	910b      	str	r1, [sp, #44]	@ 0x2c
9002290a:	e7b7      	b.n	9002287c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
9002290c:	24026314 	.word	0x24026314
90022910:	fffff800 	.word	0xfffff800
90022914:	2b00      	cmp	r3, #0
90022916:	d0df      	beq.n	900228d8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x450>
90022918:	4a21      	ldr	r2, [pc, #132]	@ (900229a0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>)
9002291a:	fa1f fa83 	uxth.w	sl, r3
9002291e:	f8be c000 	ldrh.w	ip, [lr]
90022922:	43db      	mvns	r3, r3
90022924:	6810      	ldr	r0, [r2, #0]
90022926:	ea4f 212c 	mov.w	r1, ip, asr #8
9002292a:	f3c0 4207 	ubfx	r2, r0, #16, #8
9002292e:	b2db      	uxtb	r3, r3
90022930:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
90022934:	f3c0 2b07 	ubfx	fp, r0, #8, #8
90022938:	fb12 f20a 	smulbb	r2, r2, sl
9002293c:	b2c0      	uxtb	r0, r0
9002293e:	fb1b fb0a 	smulbb	fp, fp, sl
90022942:	fb01 2103 	mla	r1, r1, r3, r2
90022946:	ea4f 02ec 	mov.w	r2, ip, asr #3
9002294a:	fb10 f00a 	smulbb	r0, r0, sl
9002294e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
90022952:	b289      	uxth	r1, r1
90022954:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
90022958:	fa5f fc8c 	uxtb.w	ip, ip
9002295c:	fb02 b203 	mla	r2, r2, r3, fp
90022960:	fb0c 0003 	mla	r0, ip, r3, r0
90022964:	1c4b      	adds	r3, r1, #1
90022966:	b292      	uxth	r2, r2
90022968:	b280      	uxth	r0, r0
9002296a:	eb03 2111 	add.w	r1, r3, r1, lsr #8
9002296e:	f100 0b01 	add.w	fp, r0, #1
90022972:	f401 4178 	and.w	r1, r1, #63488	@ 0xf800
90022976:	eb0b 2b10 	add.w	fp, fp, r0, lsr #8
9002297a:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
9002297e:	ea4b 0101 	orr.w	r1, fp, r1
90022982:	f102 0b01 	add.w	fp, r2, #1
90022986:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
9002298a:	0952      	lsrs	r2, r2, #5
9002298c:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
90022990:	4311      	orrs	r1, r2
90022992:	f8ae 1000 	strh.w	r1, [lr]
90022996:	e79f      	b.n	900228d8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x450>
90022998:	b013      	add	sp, #76	@ 0x4c
9002299a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9002299e:	bf00      	nop
900229a0:	24026314 	.word	0x24026314

900229a4 <CRC_Lock>:
900229a4:	4a20      	ldr	r2, [pc, #128]	@ (90022a28 <CRC_Lock+0x84>)
900229a6:	b530      	push	{r4, r5, lr}
900229a8:	6813      	ldr	r3, [r2, #0]
900229aa:	f64f 74f0 	movw	r4, #65520	@ 0xfff0
900229ae:	f24c 2540 	movw	r5, #49728	@ 0xc240
900229b2:	f023 0301 	bic.w	r3, r3, #1
900229b6:	6013      	str	r3, [r2, #0]
900229b8:	4b1c      	ldr	r3, [pc, #112]	@ (90022a2c <CRC_Lock+0x88>)
900229ba:	681a      	ldr	r2, [r3, #0]
900229bc:	4022      	ands	r2, r4
900229be:	42aa      	cmp	r2, r5
900229c0:	d005      	beq.n	900229ce <CRC_Lock+0x2a>
900229c2:	681b      	ldr	r3, [r3, #0]
900229c4:	f24c 2270 	movw	r2, #49776	@ 0xc270
900229c8:	4023      	ands	r3, r4
900229ca:	4293      	cmp	r3, r2
900229cc:	d124      	bne.n	90022a18 <CRC_Lock+0x74>
900229ce:	4b18      	ldr	r3, [pc, #96]	@ (90022a30 <CRC_Lock+0x8c>)
900229d0:	681b      	ldr	r3, [r3, #0]
900229d2:	bb0b      	cbnz	r3, 90022a18 <CRC_Lock+0x74>
900229d4:	4b17      	ldr	r3, [pc, #92]	@ (90022a34 <CRC_Lock+0x90>)
900229d6:	681a      	ldr	r2, [r3, #0]
900229d8:	f3c2 020b 	ubfx	r2, r2, #0, #12
900229dc:	f5b2 6f8a 	cmp.w	r2, #1104	@ 0x450
900229e0:	d00d      	beq.n	900229fe <CRC_Lock+0x5a>
900229e2:	681a      	ldr	r2, [r3, #0]
900229e4:	f240 4483 	movw	r4, #1155	@ 0x483
900229e8:	f3c2 020b 	ubfx	r2, r2, #0, #12
900229ec:	42a2      	cmp	r2, r4
900229ee:	d006      	beq.n	900229fe <CRC_Lock+0x5a>
900229f0:	681b      	ldr	r3, [r3, #0]
900229f2:	f240 4285 	movw	r2, #1157	@ 0x485
900229f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
900229fa:	4293      	cmp	r3, r2
900229fc:	d10c      	bne.n	90022a18 <CRC_Lock+0x74>
900229fe:	4b0e      	ldr	r3, [pc, #56]	@ (90022a38 <CRC_Lock+0x94>)
90022a00:	2201      	movs	r2, #1
90022a02:	601a      	str	r2, [r3, #0]
90022a04:	681a      	ldr	r2, [r3, #0]
90022a06:	2a00      	cmp	r2, #0
90022a08:	d1fc      	bne.n	90022a04 <CRC_Lock+0x60>
90022a0a:	4b0c      	ldr	r3, [pc, #48]	@ (90022a3c <CRC_Lock+0x98>)
90022a0c:	6018      	str	r0, [r3, #0]
90022a0e:	6818      	ldr	r0, [r3, #0]
90022a10:	1a43      	subs	r3, r0, r1
90022a12:	4258      	negs	r0, r3
90022a14:	4158      	adcs	r0, r3
90022a16:	bd30      	pop	{r4, r5, pc}
90022a18:	4b09      	ldr	r3, [pc, #36]	@ (90022a40 <CRC_Lock+0x9c>)
90022a1a:	2201      	movs	r2, #1
90022a1c:	601a      	str	r2, [r3, #0]
90022a1e:	681a      	ldr	r2, [r3, #0]
90022a20:	2a00      	cmp	r2, #0
90022a22:	d1fc      	bne.n	90022a1e <CRC_Lock+0x7a>
90022a24:	4b07      	ldr	r3, [pc, #28]	@ (90022a44 <CRC_Lock+0xa0>)
90022a26:	e7f1      	b.n	90022a0c <CRC_Lock+0x68>
90022a28:	e0002000 	.word	0xe0002000
90022a2c:	e000ed00 	.word	0xe000ed00
90022a30:	e0042000 	.word	0xe0042000
90022a34:	5c001000 	.word	0x5c001000
90022a38:	58024c08 	.word	0x58024c08
90022a3c:	58024c00 	.word	0x58024c00
90022a40:	40023008 	.word	0x40023008
90022a44:	40023000 	.word	0x40023000

90022a48 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
90022a48:	6101      	str	r1, [r0, #16]
90022a4a:	4770      	bx	lr

90022a4c <_ZN8touchgfx8Gestures4tickEv>:
90022a4c:	7b83      	ldrb	r3, [r0, #14]
90022a4e:	b14b      	cbz	r3, 90022a64 <_ZN8touchgfx8Gestures4tickEv+0x18>
90022a50:	8903      	ldrh	r3, [r0, #8]
90022a52:	3301      	adds	r3, #1
90022a54:	b29b      	uxth	r3, r3
90022a56:	2b07      	cmp	r3, #7
90022a58:	8103      	strh	r3, [r0, #8]
90022a5a:	bf81      	itttt	hi
90022a5c:	2300      	movhi	r3, #0
90022a5e:	8143      	strhhi	r3, [r0, #10]
90022a60:	8183      	strhhi	r3, [r0, #12]
90022a62:	7383      	strbhi	r3, [r0, #14]
90022a64:	4770      	bx	lr
	...

90022a68 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
90022a68:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
90022a6c:	4698      	mov	r8, r3
90022a6e:	8883      	ldrh	r3, [r0, #4]
90022a70:	4604      	mov	r4, r0
90022a72:	4617      	mov	r7, r2
90022a74:	f8ad 3006 	strh.w	r3, [sp, #6]
90022a78:	eba8 0303 	sub.w	r3, r8, r3
90022a7c:	4a19      	ldr	r2, [pc, #100]	@ (90022ae4 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
90022a7e:	460e      	mov	r6, r1
90022a80:	b21b      	sxth	r3, r3
90022a82:	88c1      	ldrh	r1, [r0, #6]
90022a84:	9200      	str	r2, [sp, #0]
90022a86:	2000      	movs	r0, #0
90022a88:	2b00      	cmp	r3, #0
90022a8a:	8aa2      	ldrh	r2, [r4, #20]
90022a8c:	f8bd 5028 	ldrh.w	r5, [sp, #40]	@ 0x28
90022a90:	bfb8      	it	lt
90022a92:	425b      	neglt	r3, r3
90022a94:	f88d 0004 	strb.w	r0, [sp, #4]
90022a98:	f8ad 1008 	strh.w	r1, [sp, #8]
90022a9c:	b21b      	sxth	r3, r3
90022a9e:	f8ad 800a 	strh.w	r8, [sp, #10]
90022aa2:	f8ad 500c 	strh.w	r5, [sp, #12]
90022aa6:	4293      	cmp	r3, r2
90022aa8:	dc07      	bgt.n	90022aba <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
90022aaa:	1a69      	subs	r1, r5, r1
90022aac:	b209      	sxth	r1, r1
90022aae:	2900      	cmp	r1, #0
90022ab0:	bfb8      	it	lt
90022ab2:	4249      	neglt	r1, r1
90022ab4:	b209      	sxth	r1, r1
90022ab6:	428a      	cmp	r2, r1
90022ab8:	da10      	bge.n	90022adc <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
90022aba:	6920      	ldr	r0, [r4, #16]
90022abc:	4669      	mov	r1, sp
90022abe:	eba8 0606 	sub.w	r6, r8, r6
90022ac2:	1bef      	subs	r7, r5, r7
90022ac4:	6803      	ldr	r3, [r0, #0]
90022ac6:	685b      	ldr	r3, [r3, #4]
90022ac8:	4798      	blx	r3
90022aca:	2300      	movs	r3, #0
90022acc:	2001      	movs	r0, #1
90022ace:	8166      	strh	r6, [r4, #10]
90022ad0:	8123      	strh	r3, [r4, #8]
90022ad2:	81a7      	strh	r7, [r4, #12]
90022ad4:	f8a4 8004 	strh.w	r8, [r4, #4]
90022ad8:	80e5      	strh	r5, [r4, #6]
90022ada:	73a0      	strb	r0, [r4, #14]
90022adc:	b004      	add	sp, #16
90022ade:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90022ae2:	bf00      	nop
90022ae4:	90026ba8 	.word	0x90026ba8

90022ae8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
90022ae8:	b5f0      	push	{r4, r5, r6, r7, lr}
90022aea:	461e      	mov	r6, r3
90022aec:	1e4b      	subs	r3, r1, #1
90022aee:	b085      	sub	sp, #20
90022af0:	4604      	mov	r4, r0
90022af2:	2b01      	cmp	r3, #1
90022af4:	460d      	mov	r5, r1
90022af6:	4617      	mov	r7, r2
90022af8:	d84b      	bhi.n	90022b92 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
90022afa:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
90022afe:	1cd3      	adds	r3, r2, #3
90022b00:	b29b      	uxth	r3, r3
90022b02:	2b06      	cmp	r3, #6
90022b04:	d916      	bls.n	90022b34 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
90022b06:	f8df c0a0 	ldr.w	ip, [pc, #160]	@ 90022ba8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
90022b0a:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
90022b0e:	f8cd c004 	str.w	ip, [sp, #4]
90022b12:	f04f 0c00 	mov.w	ip, #0
90022b16:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
90022b1a:	6900      	ldr	r0, [r0, #16]
90022b1c:	f8ad 100c 	strh.w	r1, [sp, #12]
90022b20:	a901      	add	r1, sp, #4
90022b22:	f88d c008 	strb.w	ip, [sp, #8]
90022b26:	f8ad 200a 	strh.w	r2, [sp, #10]
90022b2a:	f8ad 300e 	strh.w	r3, [sp, #14]
90022b2e:	6803      	ldr	r3, [r0, #0]
90022b30:	689b      	ldr	r3, [r3, #8]
90022b32:	4798      	blx	r3
90022b34:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
90022b38:	1cd3      	adds	r3, r2, #3
90022b3a:	b29b      	uxth	r3, r3
90022b3c:	2b06      	cmp	r3, #6
90022b3e:	d916      	bls.n	90022b6e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
90022b40:	f8df c064 	ldr.w	ip, [pc, #100]	@ 90022ba8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
90022b44:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
90022b48:	f8cd c004 	str.w	ip, [sp, #4]
90022b4c:	f04f 0c01 	mov.w	ip, #1
90022b50:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
90022b54:	6920      	ldr	r0, [r4, #16]
90022b56:	f8ad 100c 	strh.w	r1, [sp, #12]
90022b5a:	a901      	add	r1, sp, #4
90022b5c:	f88d c008 	strb.w	ip, [sp, #8]
90022b60:	f8ad 200a 	strh.w	r2, [sp, #10]
90022b64:	f8ad 300e 	strh.w	r3, [sp, #14]
90022b68:	6803      	ldr	r3, [r0, #0]
90022b6a:	689b      	ldr	r3, [r3, #8]
90022b6c:	4798      	blx	r3
90022b6e:	4b0d      	ldr	r3, [pc, #52]	@ (90022ba4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
90022b70:	a901      	add	r1, sp, #4
90022b72:	6920      	ldr	r0, [r4, #16]
90022b74:	9301      	str	r3, [sp, #4]
90022b76:	2300      	movs	r3, #0
90022b78:	f88d 5008 	strb.w	r5, [sp, #8]
90022b7c:	f8ad 700a 	strh.w	r7, [sp, #10]
90022b80:	f8ad 600c 	strh.w	r6, [sp, #12]
90022b84:	f8ad 300e 	strh.w	r3, [sp, #14]
90022b88:	6803      	ldr	r3, [r0, #0]
90022b8a:	681b      	ldr	r3, [r3, #0]
90022b8c:	4798      	blx	r3
90022b8e:	b005      	add	sp, #20
90022b90:	bdf0      	pop	{r4, r5, r6, r7, pc}
90022b92:	2900      	cmp	r1, #0
90022b94:	d1eb      	bne.n	90022b6e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
90022b96:	80a2      	strh	r2, [r4, #4]
90022b98:	80c6      	strh	r6, [r0, #6]
90022b9a:	60a1      	str	r1, [r4, #8]
90022b9c:	81a1      	strh	r1, [r4, #12]
90022b9e:	73a1      	strb	r1, [r4, #14]
90022ba0:	e7e5      	b.n	90022b6e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
90022ba2:	bf00      	nop
90022ba4:	90026b94 	.word	0x90026b94
90022ba8:	90026bbc 	.word	0x90026bbc

90022bac <__aeabi_atexit>:
90022bac:	460b      	mov	r3, r1
90022bae:	4601      	mov	r1, r0
90022bb0:	4618      	mov	r0, r3
90022bb2:	f000 b911 	b.w	90022dd8 <__cxa_atexit>

90022bb6 <_ZdlPvj>:
90022bb6:	f000 b812 	b.w	90022bde <_ZdlPv>

90022bba <__cxa_guard_acquire>:
90022bba:	6802      	ldr	r2, [r0, #0]
90022bbc:	07d2      	lsls	r2, r2, #31
90022bbe:	4603      	mov	r3, r0
90022bc0:	d405      	bmi.n	90022bce <__cxa_guard_acquire+0x14>
90022bc2:	7842      	ldrb	r2, [r0, #1]
90022bc4:	b102      	cbz	r2, 90022bc8 <__cxa_guard_acquire+0xe>
90022bc6:	deff      	udf	#255	@ 0xff
90022bc8:	2001      	movs	r0, #1
90022bca:	7058      	strb	r0, [r3, #1]
90022bcc:	4770      	bx	lr
90022bce:	2000      	movs	r0, #0
90022bd0:	4770      	bx	lr

90022bd2 <__cxa_guard_release>:
90022bd2:	2301      	movs	r3, #1
90022bd4:	6003      	str	r3, [r0, #0]
90022bd6:	4770      	bx	lr

90022bd8 <__cxa_pure_virtual>:
90022bd8:	b508      	push	{r3, lr}
90022bda:	f000 f80f 	bl	90022bfc <_ZSt9terminatev>

90022bde <_ZdlPv>:
90022bde:	f000 b845 	b.w	90022c6c <free>

90022be2 <_ZN10__cxxabiv111__terminateEPFvvE>:
90022be2:	b508      	push	{r3, lr}
90022be4:	4780      	blx	r0
90022be6:	f000 f80e 	bl	90022c06 <abort>
	...

90022bec <_ZSt13get_terminatev>:
90022bec:	4b02      	ldr	r3, [pc, #8]	@ (90022bf8 <_ZSt13get_terminatev+0xc>)
90022bee:	6818      	ldr	r0, [r3, #0]
90022bf0:	f3bf 8f5b 	dmb	ish
90022bf4:	4770      	bx	lr
90022bf6:	bf00      	nop
90022bf8:	240000dc 	.word	0x240000dc

90022bfc <_ZSt9terminatev>:
90022bfc:	b508      	push	{r3, lr}
90022bfe:	f7ff fff5 	bl	90022bec <_ZSt13get_terminatev>
90022c02:	f7ff ffee 	bl	90022be2 <_ZN10__cxxabiv111__terminateEPFvvE>

90022c06 <abort>:
90022c06:	b508      	push	{r3, lr}
90022c08:	2006      	movs	r0, #6
90022c0a:	f000 fae1 	bl	900231d0 <raise>
90022c0e:	2001      	movs	r0, #1
90022c10:	f7de fa90 	bl	90001134 <_exit>

90022c14 <__assert_func>:
90022c14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
90022c16:	4614      	mov	r4, r2
90022c18:	461a      	mov	r2, r3
90022c1a:	4b09      	ldr	r3, [pc, #36]	@ (90022c40 <__assert_func+0x2c>)
90022c1c:	681b      	ldr	r3, [r3, #0]
90022c1e:	4605      	mov	r5, r0
90022c20:	68d8      	ldr	r0, [r3, #12]
90022c22:	b954      	cbnz	r4, 90022c3a <__assert_func+0x26>
90022c24:	4b07      	ldr	r3, [pc, #28]	@ (90022c44 <__assert_func+0x30>)
90022c26:	461c      	mov	r4, r3
90022c28:	e9cd 3401 	strd	r3, r4, [sp, #4]
90022c2c:	9100      	str	r1, [sp, #0]
90022c2e:	462b      	mov	r3, r5
90022c30:	4905      	ldr	r1, [pc, #20]	@ (90022c48 <__assert_func+0x34>)
90022c32:	f000 f983 	bl	90022f3c <fiprintf>
90022c36:	f7ff ffe6 	bl	90022c06 <abort>
90022c3a:	4b04      	ldr	r3, [pc, #16]	@ (90022c4c <__assert_func+0x38>)
90022c3c:	e7f4      	b.n	90022c28 <__assert_func+0x14>
90022c3e:	bf00      	nop
90022c40:	240000ec 	.word	0x240000ec
90022c44:	90026ebf 	.word	0x90026ebf
90022c48:	90026e91 	.word	0x90026e91
90022c4c:	90026e84 	.word	0x90026e84

90022c50 <atexit>:
90022c50:	2300      	movs	r3, #0
90022c52:	4601      	mov	r1, r0
90022c54:	461a      	mov	r2, r3
90022c56:	4618      	mov	r0, r3
90022c58:	f000 bb68 	b.w	9002332c <__register_exitproc>

90022c5c <malloc>:
90022c5c:	4b02      	ldr	r3, [pc, #8]	@ (90022c68 <malloc+0xc>)
90022c5e:	4601      	mov	r1, r0
90022c60:	6818      	ldr	r0, [r3, #0]
90022c62:	f000 b82d 	b.w	90022cc0 <_malloc_r>
90022c66:	bf00      	nop
90022c68:	240000ec 	.word	0x240000ec

90022c6c <free>:
90022c6c:	4b02      	ldr	r3, [pc, #8]	@ (90022c78 <free+0xc>)
90022c6e:	4601      	mov	r1, r0
90022c70:	6818      	ldr	r0, [r3, #0]
90022c72:	f000 bbb7 	b.w	900233e4 <_free_r>
90022c76:	bf00      	nop
90022c78:	240000ec 	.word	0x240000ec

90022c7c <sbrk_aligned>:
90022c7c:	b570      	push	{r4, r5, r6, lr}
90022c7e:	4e0f      	ldr	r6, [pc, #60]	@ (90022cbc <sbrk_aligned+0x40>)
90022c80:	460c      	mov	r4, r1
90022c82:	6831      	ldr	r1, [r6, #0]
90022c84:	4605      	mov	r5, r0
90022c86:	b911      	cbnz	r1, 90022c8e <sbrk_aligned+0x12>
90022c88:	f000 faf2 	bl	90023270 <_sbrk_r>
90022c8c:	6030      	str	r0, [r6, #0]
90022c8e:	4621      	mov	r1, r4
90022c90:	4628      	mov	r0, r5
90022c92:	f000 faed 	bl	90023270 <_sbrk_r>
90022c96:	1c43      	adds	r3, r0, #1
90022c98:	d103      	bne.n	90022ca2 <sbrk_aligned+0x26>
90022c9a:	f04f 34ff 	mov.w	r4, #4294967295
90022c9e:	4620      	mov	r0, r4
90022ca0:	bd70      	pop	{r4, r5, r6, pc}
90022ca2:	1cc4      	adds	r4, r0, #3
90022ca4:	f024 0403 	bic.w	r4, r4, #3
90022ca8:	42a0      	cmp	r0, r4
90022caa:	d0f8      	beq.n	90022c9e <sbrk_aligned+0x22>
90022cac:	1a21      	subs	r1, r4, r0
90022cae:	4628      	mov	r0, r5
90022cb0:	f000 fade 	bl	90023270 <_sbrk_r>
90022cb4:	3001      	adds	r0, #1
90022cb6:	d1f2      	bne.n	90022c9e <sbrk_aligned+0x22>
90022cb8:	e7ef      	b.n	90022c9a <sbrk_aligned+0x1e>
90022cba:	bf00      	nop
90022cbc:	24026408 	.word	0x24026408

90022cc0 <_malloc_r>:
90022cc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
90022cc4:	1ccd      	adds	r5, r1, #3
90022cc6:	f025 0503 	bic.w	r5, r5, #3
90022cca:	3508      	adds	r5, #8
90022ccc:	2d0c      	cmp	r5, #12
90022cce:	bf38      	it	cc
90022cd0:	250c      	movcc	r5, #12
90022cd2:	2d00      	cmp	r5, #0
90022cd4:	4606      	mov	r6, r0
90022cd6:	db01      	blt.n	90022cdc <_malloc_r+0x1c>
90022cd8:	42a9      	cmp	r1, r5
90022cda:	d904      	bls.n	90022ce6 <_malloc_r+0x26>
90022cdc:	230c      	movs	r3, #12
90022cde:	6033      	str	r3, [r6, #0]
90022ce0:	2000      	movs	r0, #0
90022ce2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
90022ce6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 90022dbc <_malloc_r+0xfc>
90022cea:	f000 f869 	bl	90022dc0 <__malloc_lock>
90022cee:	f8d8 3000 	ldr.w	r3, [r8]
90022cf2:	461c      	mov	r4, r3
90022cf4:	bb44      	cbnz	r4, 90022d48 <_malloc_r+0x88>
90022cf6:	4629      	mov	r1, r5
90022cf8:	4630      	mov	r0, r6
90022cfa:	f7ff ffbf 	bl	90022c7c <sbrk_aligned>
90022cfe:	1c43      	adds	r3, r0, #1
90022d00:	4604      	mov	r4, r0
90022d02:	d158      	bne.n	90022db6 <_malloc_r+0xf6>
90022d04:	f8d8 4000 	ldr.w	r4, [r8]
90022d08:	4627      	mov	r7, r4
90022d0a:	2f00      	cmp	r7, #0
90022d0c:	d143      	bne.n	90022d96 <_malloc_r+0xd6>
90022d0e:	2c00      	cmp	r4, #0
90022d10:	d04b      	beq.n	90022daa <_malloc_r+0xea>
90022d12:	6823      	ldr	r3, [r4, #0]
90022d14:	4639      	mov	r1, r7
90022d16:	4630      	mov	r0, r6
90022d18:	eb04 0903 	add.w	r9, r4, r3
90022d1c:	f000 faa8 	bl	90023270 <_sbrk_r>
90022d20:	4581      	cmp	r9, r0
90022d22:	d142      	bne.n	90022daa <_malloc_r+0xea>
90022d24:	6821      	ldr	r1, [r4, #0]
90022d26:	1a6d      	subs	r5, r5, r1
90022d28:	4629      	mov	r1, r5
90022d2a:	4630      	mov	r0, r6
90022d2c:	f7ff ffa6 	bl	90022c7c <sbrk_aligned>
90022d30:	3001      	adds	r0, #1
90022d32:	d03a      	beq.n	90022daa <_malloc_r+0xea>
90022d34:	6823      	ldr	r3, [r4, #0]
90022d36:	442b      	add	r3, r5
90022d38:	6023      	str	r3, [r4, #0]
90022d3a:	f8d8 3000 	ldr.w	r3, [r8]
90022d3e:	685a      	ldr	r2, [r3, #4]
90022d40:	bb62      	cbnz	r2, 90022d9c <_malloc_r+0xdc>
90022d42:	f8c8 7000 	str.w	r7, [r8]
90022d46:	e00f      	b.n	90022d68 <_malloc_r+0xa8>
90022d48:	6822      	ldr	r2, [r4, #0]
90022d4a:	1b52      	subs	r2, r2, r5
90022d4c:	d420      	bmi.n	90022d90 <_malloc_r+0xd0>
90022d4e:	2a0b      	cmp	r2, #11
90022d50:	d917      	bls.n	90022d82 <_malloc_r+0xc2>
90022d52:	1961      	adds	r1, r4, r5
90022d54:	42a3      	cmp	r3, r4
90022d56:	6025      	str	r5, [r4, #0]
90022d58:	bf18      	it	ne
90022d5a:	6059      	strne	r1, [r3, #4]
90022d5c:	6863      	ldr	r3, [r4, #4]
90022d5e:	bf08      	it	eq
90022d60:	f8c8 1000 	streq.w	r1, [r8]
90022d64:	5162      	str	r2, [r4, r5]
90022d66:	604b      	str	r3, [r1, #4]
90022d68:	4630      	mov	r0, r6
90022d6a:	f000 f82f 	bl	90022dcc <__malloc_unlock>
90022d6e:	f104 000b 	add.w	r0, r4, #11
90022d72:	1d23      	adds	r3, r4, #4
90022d74:	f020 0007 	bic.w	r0, r0, #7
90022d78:	1ac2      	subs	r2, r0, r3
90022d7a:	bf1c      	itt	ne
90022d7c:	1a1b      	subne	r3, r3, r0
90022d7e:	50a3      	strne	r3, [r4, r2]
90022d80:	e7af      	b.n	90022ce2 <_malloc_r+0x22>
90022d82:	6862      	ldr	r2, [r4, #4]
90022d84:	42a3      	cmp	r3, r4
90022d86:	bf0c      	ite	eq
90022d88:	f8c8 2000 	streq.w	r2, [r8]
90022d8c:	605a      	strne	r2, [r3, #4]
90022d8e:	e7eb      	b.n	90022d68 <_malloc_r+0xa8>
90022d90:	4623      	mov	r3, r4
90022d92:	6864      	ldr	r4, [r4, #4]
90022d94:	e7ae      	b.n	90022cf4 <_malloc_r+0x34>
90022d96:	463c      	mov	r4, r7
90022d98:	687f      	ldr	r7, [r7, #4]
90022d9a:	e7b6      	b.n	90022d0a <_malloc_r+0x4a>
90022d9c:	461a      	mov	r2, r3
90022d9e:	685b      	ldr	r3, [r3, #4]
90022da0:	42a3      	cmp	r3, r4
90022da2:	d1fb      	bne.n	90022d9c <_malloc_r+0xdc>
90022da4:	2300      	movs	r3, #0
90022da6:	6053      	str	r3, [r2, #4]
90022da8:	e7de      	b.n	90022d68 <_malloc_r+0xa8>
90022daa:	230c      	movs	r3, #12
90022dac:	6033      	str	r3, [r6, #0]
90022dae:	4630      	mov	r0, r6
90022db0:	f000 f80c 	bl	90022dcc <__malloc_unlock>
90022db4:	e794      	b.n	90022ce0 <_malloc_r+0x20>
90022db6:	6005      	str	r5, [r0, #0]
90022db8:	e7d6      	b.n	90022d68 <_malloc_r+0xa8>
90022dba:	bf00      	nop
90022dbc:	2402640c 	.word	0x2402640c

90022dc0 <__malloc_lock>:
90022dc0:	4801      	ldr	r0, [pc, #4]	@ (90022dc8 <__malloc_lock+0x8>)
90022dc2:	f000 baa2 	b.w	9002330a <__retarget_lock_acquire_recursive>
90022dc6:	bf00      	nop
90022dc8:	24026550 	.word	0x24026550

90022dcc <__malloc_unlock>:
90022dcc:	4801      	ldr	r0, [pc, #4]	@ (90022dd4 <__malloc_unlock+0x8>)
90022dce:	f000 ba9d 	b.w	9002330c <__retarget_lock_release_recursive>
90022dd2:	bf00      	nop
90022dd4:	24026550 	.word	0x24026550

90022dd8 <__cxa_atexit>:
90022dd8:	b510      	push	{r4, lr}
90022dda:	4604      	mov	r4, r0
90022ddc:	4804      	ldr	r0, [pc, #16]	@ (90022df0 <__cxa_atexit+0x18>)
90022dde:	4613      	mov	r3, r2
90022de0:	b120      	cbz	r0, 90022dec <__cxa_atexit+0x14>
90022de2:	460a      	mov	r2, r1
90022de4:	2002      	movs	r0, #2
90022de6:	4621      	mov	r1, r4
90022de8:	f000 faa0 	bl	9002332c <__register_exitproc>
90022dec:	bd10      	pop	{r4, pc}
90022dee:	bf00      	nop
90022df0:	9002332d 	.word	0x9002332d

90022df4 <std>:
90022df4:	2300      	movs	r3, #0
90022df6:	b510      	push	{r4, lr}
90022df8:	4604      	mov	r4, r0
90022dfa:	e9c0 3300 	strd	r3, r3, [r0]
90022dfe:	e9c0 3304 	strd	r3, r3, [r0, #16]
90022e02:	6083      	str	r3, [r0, #8]
90022e04:	8181      	strh	r1, [r0, #12]
90022e06:	6643      	str	r3, [r0, #100]	@ 0x64
90022e08:	81c2      	strh	r2, [r0, #14]
90022e0a:	6183      	str	r3, [r0, #24]
90022e0c:	4619      	mov	r1, r3
90022e0e:	2208      	movs	r2, #8
90022e10:	305c      	adds	r0, #92	@ 0x5c
90022e12:	f000 f99b 	bl	9002314c <memset>
90022e16:	4b0d      	ldr	r3, [pc, #52]	@ (90022e4c <std+0x58>)
90022e18:	6263      	str	r3, [r4, #36]	@ 0x24
90022e1a:	4b0d      	ldr	r3, [pc, #52]	@ (90022e50 <std+0x5c>)
90022e1c:	62a3      	str	r3, [r4, #40]	@ 0x28
90022e1e:	4b0d      	ldr	r3, [pc, #52]	@ (90022e54 <std+0x60>)
90022e20:	62e3      	str	r3, [r4, #44]	@ 0x2c
90022e22:	4b0d      	ldr	r3, [pc, #52]	@ (90022e58 <std+0x64>)
90022e24:	6323      	str	r3, [r4, #48]	@ 0x30
90022e26:	4b0d      	ldr	r3, [pc, #52]	@ (90022e5c <std+0x68>)
90022e28:	6224      	str	r4, [r4, #32]
90022e2a:	429c      	cmp	r4, r3
90022e2c:	d006      	beq.n	90022e3c <std+0x48>
90022e2e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
90022e32:	4294      	cmp	r4, r2
90022e34:	d002      	beq.n	90022e3c <std+0x48>
90022e36:	33d0      	adds	r3, #208	@ 0xd0
90022e38:	429c      	cmp	r4, r3
90022e3a:	d105      	bne.n	90022e48 <std+0x54>
90022e3c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
90022e40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
90022e44:	f000 ba60 	b.w	90023308 <__retarget_lock_init_recursive>
90022e48:	bd10      	pop	{r4, pc}
90022e4a:	bf00      	nop
90022e4c:	90022f9d 	.word	0x90022f9d
90022e50:	90022fbf 	.word	0x90022fbf
90022e54:	90022ff7 	.word	0x90022ff7
90022e58:	9002301b 	.word	0x9002301b
90022e5c:	24026410 	.word	0x24026410

90022e60 <stdio_exit_handler>:
90022e60:	4a02      	ldr	r2, [pc, #8]	@ (90022e6c <stdio_exit_handler+0xc>)
90022e62:	4903      	ldr	r1, [pc, #12]	@ (90022e70 <stdio_exit_handler+0x10>)
90022e64:	4803      	ldr	r0, [pc, #12]	@ (90022e74 <stdio_exit_handler+0x14>)
90022e66:	f000 b87b 	b.w	90022f60 <_fwalk_sglue>
90022e6a:	bf00      	nop
90022e6c:	240000e0 	.word	0x240000e0
90022e70:	90023b21 	.word	0x90023b21
90022e74:	240000f0 	.word	0x240000f0

90022e78 <cleanup_stdio>:
90022e78:	6841      	ldr	r1, [r0, #4]
90022e7a:	4b0c      	ldr	r3, [pc, #48]	@ (90022eac <cleanup_stdio+0x34>)
90022e7c:	4299      	cmp	r1, r3
90022e7e:	b510      	push	{r4, lr}
90022e80:	4604      	mov	r4, r0
90022e82:	d001      	beq.n	90022e88 <cleanup_stdio+0x10>
90022e84:	f000 fe4c 	bl	90023b20 <_fflush_r>
90022e88:	68a1      	ldr	r1, [r4, #8]
90022e8a:	4b09      	ldr	r3, [pc, #36]	@ (90022eb0 <cleanup_stdio+0x38>)
90022e8c:	4299      	cmp	r1, r3
90022e8e:	d002      	beq.n	90022e96 <cleanup_stdio+0x1e>
90022e90:	4620      	mov	r0, r4
90022e92:	f000 fe45 	bl	90023b20 <_fflush_r>
90022e96:	68e1      	ldr	r1, [r4, #12]
90022e98:	4b06      	ldr	r3, [pc, #24]	@ (90022eb4 <cleanup_stdio+0x3c>)
90022e9a:	4299      	cmp	r1, r3
90022e9c:	d004      	beq.n	90022ea8 <cleanup_stdio+0x30>
90022e9e:	4620      	mov	r0, r4
90022ea0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
90022ea4:	f000 be3c 	b.w	90023b20 <_fflush_r>
90022ea8:	bd10      	pop	{r4, pc}
90022eaa:	bf00      	nop
90022eac:	24026410 	.word	0x24026410
90022eb0:	24026478 	.word	0x24026478
90022eb4:	240264e0 	.word	0x240264e0

90022eb8 <global_stdio_init.part.0>:
90022eb8:	b510      	push	{r4, lr}
90022eba:	4b0b      	ldr	r3, [pc, #44]	@ (90022ee8 <global_stdio_init.part.0+0x30>)
90022ebc:	4c0b      	ldr	r4, [pc, #44]	@ (90022eec <global_stdio_init.part.0+0x34>)
90022ebe:	4a0c      	ldr	r2, [pc, #48]	@ (90022ef0 <global_stdio_init.part.0+0x38>)
90022ec0:	601a      	str	r2, [r3, #0]
90022ec2:	4620      	mov	r0, r4
90022ec4:	2200      	movs	r2, #0
90022ec6:	2104      	movs	r1, #4
90022ec8:	f7ff ff94 	bl	90022df4 <std>
90022ecc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
90022ed0:	2201      	movs	r2, #1
90022ed2:	2109      	movs	r1, #9
90022ed4:	f7ff ff8e 	bl	90022df4 <std>
90022ed8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
90022edc:	2202      	movs	r2, #2
90022ede:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
90022ee2:	2112      	movs	r1, #18
90022ee4:	f7ff bf86 	b.w	90022df4 <std>
90022ee8:	24026548 	.word	0x24026548
90022eec:	24026410 	.word	0x24026410
90022ef0:	90022e61 	.word	0x90022e61

90022ef4 <__sfp_lock_acquire>:
90022ef4:	4801      	ldr	r0, [pc, #4]	@ (90022efc <__sfp_lock_acquire+0x8>)
90022ef6:	f000 ba08 	b.w	9002330a <__retarget_lock_acquire_recursive>
90022efa:	bf00      	nop
90022efc:	24026552 	.word	0x24026552

90022f00 <__sfp_lock_release>:
90022f00:	4801      	ldr	r0, [pc, #4]	@ (90022f08 <__sfp_lock_release+0x8>)
90022f02:	f000 ba03 	b.w	9002330c <__retarget_lock_release_recursive>
90022f06:	bf00      	nop
90022f08:	24026552 	.word	0x24026552

90022f0c <__sinit>:
90022f0c:	b510      	push	{r4, lr}
90022f0e:	4604      	mov	r4, r0
90022f10:	f7ff fff0 	bl	90022ef4 <__sfp_lock_acquire>
90022f14:	6a23      	ldr	r3, [r4, #32]
90022f16:	b11b      	cbz	r3, 90022f20 <__sinit+0x14>
90022f18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
90022f1c:	f7ff bff0 	b.w	90022f00 <__sfp_lock_release>
90022f20:	4b04      	ldr	r3, [pc, #16]	@ (90022f34 <__sinit+0x28>)
90022f22:	6223      	str	r3, [r4, #32]
90022f24:	4b04      	ldr	r3, [pc, #16]	@ (90022f38 <__sinit+0x2c>)
90022f26:	681b      	ldr	r3, [r3, #0]
90022f28:	2b00      	cmp	r3, #0
90022f2a:	d1f5      	bne.n	90022f18 <__sinit+0xc>
90022f2c:	f7ff ffc4 	bl	90022eb8 <global_stdio_init.part.0>
90022f30:	e7f2      	b.n	90022f18 <__sinit+0xc>
90022f32:	bf00      	nop
90022f34:	90022e79 	.word	0x90022e79
90022f38:	24026548 	.word	0x24026548

90022f3c <fiprintf>:
90022f3c:	b40e      	push	{r1, r2, r3}
90022f3e:	b503      	push	{r0, r1, lr}
90022f40:	4601      	mov	r1, r0
90022f42:	ab03      	add	r3, sp, #12
90022f44:	4805      	ldr	r0, [pc, #20]	@ (90022f5c <fiprintf+0x20>)
90022f46:	f853 2b04 	ldr.w	r2, [r3], #4
90022f4a:	6800      	ldr	r0, [r0, #0]
90022f4c:	9301      	str	r3, [sp, #4]
90022f4e:	f000 fabd 	bl	900234cc <_vfiprintf_r>
90022f52:	b002      	add	sp, #8
90022f54:	f85d eb04 	ldr.w	lr, [sp], #4
90022f58:	b003      	add	sp, #12
90022f5a:	4770      	bx	lr
90022f5c:	240000ec 	.word	0x240000ec

90022f60 <_fwalk_sglue>:
90022f60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
90022f64:	4607      	mov	r7, r0
90022f66:	4688      	mov	r8, r1
90022f68:	4614      	mov	r4, r2
90022f6a:	2600      	movs	r6, #0
90022f6c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
90022f70:	f1b9 0901 	subs.w	r9, r9, #1
90022f74:	d505      	bpl.n	90022f82 <_fwalk_sglue+0x22>
90022f76:	6824      	ldr	r4, [r4, #0]
90022f78:	2c00      	cmp	r4, #0
90022f7a:	d1f7      	bne.n	90022f6c <_fwalk_sglue+0xc>
90022f7c:	4630      	mov	r0, r6
90022f7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
90022f82:	89ab      	ldrh	r3, [r5, #12]
90022f84:	2b01      	cmp	r3, #1
90022f86:	d907      	bls.n	90022f98 <_fwalk_sglue+0x38>
90022f88:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
90022f8c:	3301      	adds	r3, #1
90022f8e:	d003      	beq.n	90022f98 <_fwalk_sglue+0x38>
90022f90:	4629      	mov	r1, r5
90022f92:	4638      	mov	r0, r7
90022f94:	47c0      	blx	r8
90022f96:	4306      	orrs	r6, r0
90022f98:	3568      	adds	r5, #104	@ 0x68
90022f9a:	e7e9      	b.n	90022f70 <_fwalk_sglue+0x10>

90022f9c <__sread>:
90022f9c:	b510      	push	{r4, lr}
90022f9e:	460c      	mov	r4, r1
90022fa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
90022fa4:	f000 f93e 	bl	90023224 <_read_r>
90022fa8:	2800      	cmp	r0, #0
90022faa:	bfab      	itete	ge
90022fac:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
90022fae:	89a3      	ldrhlt	r3, [r4, #12]
90022fb0:	181b      	addge	r3, r3, r0
90022fb2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
90022fb6:	bfac      	ite	ge
90022fb8:	6563      	strge	r3, [r4, #84]	@ 0x54
90022fba:	81a3      	strhlt	r3, [r4, #12]
90022fbc:	bd10      	pop	{r4, pc}

90022fbe <__swrite>:
90022fbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90022fc2:	461f      	mov	r7, r3
90022fc4:	898b      	ldrh	r3, [r1, #12]
90022fc6:	05db      	lsls	r3, r3, #23
90022fc8:	4605      	mov	r5, r0
90022fca:	460c      	mov	r4, r1
90022fcc:	4616      	mov	r6, r2
90022fce:	d505      	bpl.n	90022fdc <__swrite+0x1e>
90022fd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
90022fd4:	2302      	movs	r3, #2
90022fd6:	2200      	movs	r2, #0
90022fd8:	f000 f912 	bl	90023200 <_lseek_r>
90022fdc:	89a3      	ldrh	r3, [r4, #12]
90022fde:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
90022fe2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
90022fe6:	81a3      	strh	r3, [r4, #12]
90022fe8:	4632      	mov	r2, r6
90022fea:	463b      	mov	r3, r7
90022fec:	4628      	mov	r0, r5
90022fee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
90022ff2:	f000 b94d 	b.w	90023290 <_write_r>

90022ff6 <__sseek>:
90022ff6:	b510      	push	{r4, lr}
90022ff8:	460c      	mov	r4, r1
90022ffa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
90022ffe:	f000 f8ff 	bl	90023200 <_lseek_r>
90023002:	1c43      	adds	r3, r0, #1
90023004:	89a3      	ldrh	r3, [r4, #12]
90023006:	bf15      	itete	ne
90023008:	6560      	strne	r0, [r4, #84]	@ 0x54
9002300a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
9002300e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
90023012:	81a3      	strheq	r3, [r4, #12]
90023014:	bf18      	it	ne
90023016:	81a3      	strhne	r3, [r4, #12]
90023018:	bd10      	pop	{r4, pc}

9002301a <__sclose>:
9002301a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
9002301e:	f000 b8df 	b.w	900231e0 <_close_r>

90023022 <__swbuf_r>:
90023022:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90023024:	460e      	mov	r6, r1
90023026:	4614      	mov	r4, r2
90023028:	4605      	mov	r5, r0
9002302a:	b118      	cbz	r0, 90023034 <__swbuf_r+0x12>
9002302c:	6a03      	ldr	r3, [r0, #32]
9002302e:	b90b      	cbnz	r3, 90023034 <__swbuf_r+0x12>
90023030:	f7ff ff6c 	bl	90022f0c <__sinit>
90023034:	69a3      	ldr	r3, [r4, #24]
90023036:	60a3      	str	r3, [r4, #8]
90023038:	89a3      	ldrh	r3, [r4, #12]
9002303a:	071a      	lsls	r2, r3, #28
9002303c:	d501      	bpl.n	90023042 <__swbuf_r+0x20>
9002303e:	6923      	ldr	r3, [r4, #16]
90023040:	b943      	cbnz	r3, 90023054 <__swbuf_r+0x32>
90023042:	4621      	mov	r1, r4
90023044:	4628      	mov	r0, r5
90023046:	f000 f82b 	bl	900230a0 <__swsetup_r>
9002304a:	b118      	cbz	r0, 90023054 <__swbuf_r+0x32>
9002304c:	f04f 37ff 	mov.w	r7, #4294967295
90023050:	4638      	mov	r0, r7
90023052:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
90023054:	6823      	ldr	r3, [r4, #0]
90023056:	6922      	ldr	r2, [r4, #16]
90023058:	1a98      	subs	r0, r3, r2
9002305a:	6963      	ldr	r3, [r4, #20]
9002305c:	b2f6      	uxtb	r6, r6
9002305e:	4283      	cmp	r3, r0
90023060:	4637      	mov	r7, r6
90023062:	dc05      	bgt.n	90023070 <__swbuf_r+0x4e>
90023064:	4621      	mov	r1, r4
90023066:	4628      	mov	r0, r5
90023068:	f000 fd5a 	bl	90023b20 <_fflush_r>
9002306c:	2800      	cmp	r0, #0
9002306e:	d1ed      	bne.n	9002304c <__swbuf_r+0x2a>
90023070:	68a3      	ldr	r3, [r4, #8]
90023072:	3b01      	subs	r3, #1
90023074:	60a3      	str	r3, [r4, #8]
90023076:	6823      	ldr	r3, [r4, #0]
90023078:	1c5a      	adds	r2, r3, #1
9002307a:	6022      	str	r2, [r4, #0]
9002307c:	701e      	strb	r6, [r3, #0]
9002307e:	6962      	ldr	r2, [r4, #20]
90023080:	1c43      	adds	r3, r0, #1
90023082:	429a      	cmp	r2, r3
90023084:	d004      	beq.n	90023090 <__swbuf_r+0x6e>
90023086:	89a3      	ldrh	r3, [r4, #12]
90023088:	07db      	lsls	r3, r3, #31
9002308a:	d5e1      	bpl.n	90023050 <__swbuf_r+0x2e>
9002308c:	2e0a      	cmp	r6, #10
9002308e:	d1df      	bne.n	90023050 <__swbuf_r+0x2e>
90023090:	4621      	mov	r1, r4
90023092:	4628      	mov	r0, r5
90023094:	f000 fd44 	bl	90023b20 <_fflush_r>
90023098:	2800      	cmp	r0, #0
9002309a:	d0d9      	beq.n	90023050 <__swbuf_r+0x2e>
9002309c:	e7d6      	b.n	9002304c <__swbuf_r+0x2a>
	...

900230a0 <__swsetup_r>:
900230a0:	b538      	push	{r3, r4, r5, lr}
900230a2:	4b29      	ldr	r3, [pc, #164]	@ (90023148 <__swsetup_r+0xa8>)
900230a4:	4605      	mov	r5, r0
900230a6:	6818      	ldr	r0, [r3, #0]
900230a8:	460c      	mov	r4, r1
900230aa:	b118      	cbz	r0, 900230b4 <__swsetup_r+0x14>
900230ac:	6a03      	ldr	r3, [r0, #32]
900230ae:	b90b      	cbnz	r3, 900230b4 <__swsetup_r+0x14>
900230b0:	f7ff ff2c 	bl	90022f0c <__sinit>
900230b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
900230b8:	0719      	lsls	r1, r3, #28
900230ba:	d422      	bmi.n	90023102 <__swsetup_r+0x62>
900230bc:	06da      	lsls	r2, r3, #27
900230be:	d407      	bmi.n	900230d0 <__swsetup_r+0x30>
900230c0:	2209      	movs	r2, #9
900230c2:	602a      	str	r2, [r5, #0]
900230c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
900230c8:	81a3      	strh	r3, [r4, #12]
900230ca:	f04f 30ff 	mov.w	r0, #4294967295
900230ce:	e033      	b.n	90023138 <__swsetup_r+0x98>
900230d0:	0758      	lsls	r0, r3, #29
900230d2:	d512      	bpl.n	900230fa <__swsetup_r+0x5a>
900230d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
900230d6:	b141      	cbz	r1, 900230ea <__swsetup_r+0x4a>
900230d8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
900230dc:	4299      	cmp	r1, r3
900230de:	d002      	beq.n	900230e6 <__swsetup_r+0x46>
900230e0:	4628      	mov	r0, r5
900230e2:	f000 f97f 	bl	900233e4 <_free_r>
900230e6:	2300      	movs	r3, #0
900230e8:	6363      	str	r3, [r4, #52]	@ 0x34
900230ea:	89a3      	ldrh	r3, [r4, #12]
900230ec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
900230f0:	81a3      	strh	r3, [r4, #12]
900230f2:	2300      	movs	r3, #0
900230f4:	6063      	str	r3, [r4, #4]
900230f6:	6923      	ldr	r3, [r4, #16]
900230f8:	6023      	str	r3, [r4, #0]
900230fa:	89a3      	ldrh	r3, [r4, #12]
900230fc:	f043 0308 	orr.w	r3, r3, #8
90023100:	81a3      	strh	r3, [r4, #12]
90023102:	6923      	ldr	r3, [r4, #16]
90023104:	b94b      	cbnz	r3, 9002311a <__swsetup_r+0x7a>
90023106:	89a3      	ldrh	r3, [r4, #12]
90023108:	f403 7320 	and.w	r3, r3, #640	@ 0x280
9002310c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
90023110:	d003      	beq.n	9002311a <__swsetup_r+0x7a>
90023112:	4621      	mov	r1, r4
90023114:	4628      	mov	r0, r5
90023116:	f000 fd51 	bl	90023bbc <__smakebuf_r>
9002311a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
9002311e:	f013 0201 	ands.w	r2, r3, #1
90023122:	d00a      	beq.n	9002313a <__swsetup_r+0x9a>
90023124:	2200      	movs	r2, #0
90023126:	60a2      	str	r2, [r4, #8]
90023128:	6962      	ldr	r2, [r4, #20]
9002312a:	4252      	negs	r2, r2
9002312c:	61a2      	str	r2, [r4, #24]
9002312e:	6922      	ldr	r2, [r4, #16]
90023130:	b942      	cbnz	r2, 90023144 <__swsetup_r+0xa4>
90023132:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
90023136:	d1c5      	bne.n	900230c4 <__swsetup_r+0x24>
90023138:	bd38      	pop	{r3, r4, r5, pc}
9002313a:	0799      	lsls	r1, r3, #30
9002313c:	bf58      	it	pl
9002313e:	6962      	ldrpl	r2, [r4, #20]
90023140:	60a2      	str	r2, [r4, #8]
90023142:	e7f4      	b.n	9002312e <__swsetup_r+0x8e>
90023144:	2000      	movs	r0, #0
90023146:	e7f7      	b.n	90023138 <__swsetup_r+0x98>
90023148:	240000ec 	.word	0x240000ec

9002314c <memset>:
9002314c:	4402      	add	r2, r0
9002314e:	4603      	mov	r3, r0
90023150:	4293      	cmp	r3, r2
90023152:	d100      	bne.n	90023156 <memset+0xa>
90023154:	4770      	bx	lr
90023156:	f803 1b01 	strb.w	r1, [r3], #1
9002315a:	e7f9      	b.n	90023150 <memset+0x4>

9002315c <strncmp>:
9002315c:	b510      	push	{r4, lr}
9002315e:	b16a      	cbz	r2, 9002317c <strncmp+0x20>
90023160:	3901      	subs	r1, #1
90023162:	1884      	adds	r4, r0, r2
90023164:	f810 2b01 	ldrb.w	r2, [r0], #1
90023168:	f811 3f01 	ldrb.w	r3, [r1, #1]!
9002316c:	429a      	cmp	r2, r3
9002316e:	d103      	bne.n	90023178 <strncmp+0x1c>
90023170:	42a0      	cmp	r0, r4
90023172:	d001      	beq.n	90023178 <strncmp+0x1c>
90023174:	2a00      	cmp	r2, #0
90023176:	d1f5      	bne.n	90023164 <strncmp+0x8>
90023178:	1ad0      	subs	r0, r2, r3
9002317a:	bd10      	pop	{r4, pc}
9002317c:	4610      	mov	r0, r2
9002317e:	e7fc      	b.n	9002317a <strncmp+0x1e>

90023180 <_raise_r>:
90023180:	291f      	cmp	r1, #31
90023182:	b538      	push	{r3, r4, r5, lr}
90023184:	4605      	mov	r5, r0
90023186:	460c      	mov	r4, r1
90023188:	d904      	bls.n	90023194 <_raise_r+0x14>
9002318a:	2316      	movs	r3, #22
9002318c:	6003      	str	r3, [r0, #0]
9002318e:	f04f 30ff 	mov.w	r0, #4294967295
90023192:	bd38      	pop	{r3, r4, r5, pc}
90023194:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
90023196:	b112      	cbz	r2, 9002319e <_raise_r+0x1e>
90023198:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
9002319c:	b94b      	cbnz	r3, 900231b2 <_raise_r+0x32>
9002319e:	4628      	mov	r0, r5
900231a0:	f000 f864 	bl	9002326c <_getpid_r>
900231a4:	4622      	mov	r2, r4
900231a6:	4601      	mov	r1, r0
900231a8:	4628      	mov	r0, r5
900231aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
900231ae:	f000 b84b 	b.w	90023248 <_kill_r>
900231b2:	2b01      	cmp	r3, #1
900231b4:	d00a      	beq.n	900231cc <_raise_r+0x4c>
900231b6:	1c59      	adds	r1, r3, #1
900231b8:	d103      	bne.n	900231c2 <_raise_r+0x42>
900231ba:	2316      	movs	r3, #22
900231bc:	6003      	str	r3, [r0, #0]
900231be:	2001      	movs	r0, #1
900231c0:	e7e7      	b.n	90023192 <_raise_r+0x12>
900231c2:	2100      	movs	r1, #0
900231c4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
900231c8:	4620      	mov	r0, r4
900231ca:	4798      	blx	r3
900231cc:	2000      	movs	r0, #0
900231ce:	e7e0      	b.n	90023192 <_raise_r+0x12>

900231d0 <raise>:
900231d0:	4b02      	ldr	r3, [pc, #8]	@ (900231dc <raise+0xc>)
900231d2:	4601      	mov	r1, r0
900231d4:	6818      	ldr	r0, [r3, #0]
900231d6:	f7ff bfd3 	b.w	90023180 <_raise_r>
900231da:	bf00      	nop
900231dc:	240000ec 	.word	0x240000ec

900231e0 <_close_r>:
900231e0:	b538      	push	{r3, r4, r5, lr}
900231e2:	4d06      	ldr	r5, [pc, #24]	@ (900231fc <_close_r+0x1c>)
900231e4:	2300      	movs	r3, #0
900231e6:	4604      	mov	r4, r0
900231e8:	4608      	mov	r0, r1
900231ea:	602b      	str	r3, [r5, #0]
900231ec:	f7dd ffc4 	bl	90001178 <_close>
900231f0:	1c43      	adds	r3, r0, #1
900231f2:	d102      	bne.n	900231fa <_close_r+0x1a>
900231f4:	682b      	ldr	r3, [r5, #0]
900231f6:	b103      	cbz	r3, 900231fa <_close_r+0x1a>
900231f8:	6023      	str	r3, [r4, #0]
900231fa:	bd38      	pop	{r3, r4, r5, pc}
900231fc:	2402654c 	.word	0x2402654c

90023200 <_lseek_r>:
90023200:	b538      	push	{r3, r4, r5, lr}
90023202:	4d07      	ldr	r5, [pc, #28]	@ (90023220 <_lseek_r+0x20>)
90023204:	4604      	mov	r4, r0
90023206:	4608      	mov	r0, r1
90023208:	4611      	mov	r1, r2
9002320a:	2200      	movs	r2, #0
9002320c:	602a      	str	r2, [r5, #0]
9002320e:	461a      	mov	r2, r3
90023210:	f7dd ffbe 	bl	90001190 <_lseek>
90023214:	1c43      	adds	r3, r0, #1
90023216:	d102      	bne.n	9002321e <_lseek_r+0x1e>
90023218:	682b      	ldr	r3, [r5, #0]
9002321a:	b103      	cbz	r3, 9002321e <_lseek_r+0x1e>
9002321c:	6023      	str	r3, [r4, #0]
9002321e:	bd38      	pop	{r3, r4, r5, pc}
90023220:	2402654c 	.word	0x2402654c

90023224 <_read_r>:
90023224:	b538      	push	{r3, r4, r5, lr}
90023226:	4d07      	ldr	r5, [pc, #28]	@ (90023244 <_read_r+0x20>)
90023228:	4604      	mov	r4, r0
9002322a:	4608      	mov	r0, r1
9002322c:	4611      	mov	r1, r2
9002322e:	2200      	movs	r2, #0
90023230:	602a      	str	r2, [r5, #0]
90023232:	461a      	mov	r2, r3
90023234:	f7dd ff84 	bl	90001140 <_read>
90023238:	1c43      	adds	r3, r0, #1
9002323a:	d102      	bne.n	90023242 <_read_r+0x1e>
9002323c:	682b      	ldr	r3, [r5, #0]
9002323e:	b103      	cbz	r3, 90023242 <_read_r+0x1e>
90023240:	6023      	str	r3, [r4, #0]
90023242:	bd38      	pop	{r3, r4, r5, pc}
90023244:	2402654c 	.word	0x2402654c

90023248 <_kill_r>:
90023248:	b538      	push	{r3, r4, r5, lr}
9002324a:	4d07      	ldr	r5, [pc, #28]	@ (90023268 <_kill_r+0x20>)
9002324c:	2300      	movs	r3, #0
9002324e:	4604      	mov	r4, r0
90023250:	4608      	mov	r0, r1
90023252:	4611      	mov	r1, r2
90023254:	602b      	str	r3, [r5, #0]
90023256:	f7dd ff63 	bl	90001120 <_kill>
9002325a:	1c43      	adds	r3, r0, #1
9002325c:	d102      	bne.n	90023264 <_kill_r+0x1c>
9002325e:	682b      	ldr	r3, [r5, #0]
90023260:	b103      	cbz	r3, 90023264 <_kill_r+0x1c>
90023262:	6023      	str	r3, [r4, #0]
90023264:	bd38      	pop	{r3, r4, r5, pc}
90023266:	bf00      	nop
90023268:	2402654c 	.word	0x2402654c

9002326c <_getpid_r>:
9002326c:	f7dd bf56 	b.w	9000111c <_getpid>

90023270 <_sbrk_r>:
90023270:	b538      	push	{r3, r4, r5, lr}
90023272:	4d06      	ldr	r5, [pc, #24]	@ (9002328c <_sbrk_r+0x1c>)
90023274:	2300      	movs	r3, #0
90023276:	4604      	mov	r4, r0
90023278:	4608      	mov	r0, r1
9002327a:	602b      	str	r3, [r5, #0]
9002327c:	f7dd ff8a 	bl	90001194 <_sbrk>
90023280:	1c43      	adds	r3, r0, #1
90023282:	d102      	bne.n	9002328a <_sbrk_r+0x1a>
90023284:	682b      	ldr	r3, [r5, #0]
90023286:	b103      	cbz	r3, 9002328a <_sbrk_r+0x1a>
90023288:	6023      	str	r3, [r4, #0]
9002328a:	bd38      	pop	{r3, r4, r5, pc}
9002328c:	2402654c 	.word	0x2402654c

90023290 <_write_r>:
90023290:	b538      	push	{r3, r4, r5, lr}
90023292:	4d07      	ldr	r5, [pc, #28]	@ (900232b0 <_write_r+0x20>)
90023294:	4604      	mov	r4, r0
90023296:	4608      	mov	r0, r1
90023298:	4611      	mov	r1, r2
9002329a:	2200      	movs	r2, #0
9002329c:	602a      	str	r2, [r5, #0]
9002329e:	461a      	mov	r2, r3
900232a0:	f7dd ff5c 	bl	9000115c <_write>
900232a4:	1c43      	adds	r3, r0, #1
900232a6:	d102      	bne.n	900232ae <_write_r+0x1e>
900232a8:	682b      	ldr	r3, [r5, #0]
900232aa:	b103      	cbz	r3, 900232ae <_write_r+0x1e>
900232ac:	6023      	str	r3, [r4, #0]
900232ae:	bd38      	pop	{r3, r4, r5, pc}
900232b0:	2402654c 	.word	0x2402654c

900232b4 <__errno>:
900232b4:	4b01      	ldr	r3, [pc, #4]	@ (900232bc <__errno+0x8>)
900232b6:	6818      	ldr	r0, [r3, #0]
900232b8:	4770      	bx	lr
900232ba:	bf00      	nop
900232bc:	240000ec 	.word	0x240000ec

900232c0 <__libc_init_array>:
900232c0:	b570      	push	{r4, r5, r6, lr}
900232c2:	4d0d      	ldr	r5, [pc, #52]	@ (900232f8 <__libc_init_array+0x38>)
900232c4:	4c0d      	ldr	r4, [pc, #52]	@ (900232fc <__libc_init_array+0x3c>)
900232c6:	1b64      	subs	r4, r4, r5
900232c8:	10a4      	asrs	r4, r4, #2
900232ca:	2600      	movs	r6, #0
900232cc:	42a6      	cmp	r6, r4
900232ce:	d109      	bne.n	900232e4 <__libc_init_array+0x24>
900232d0:	4d0b      	ldr	r5, [pc, #44]	@ (90023300 <__libc_init_array+0x40>)
900232d2:	4c0c      	ldr	r4, [pc, #48]	@ (90023304 <__libc_init_array+0x44>)
900232d4:	f000 fcd0 	bl	90023c78 <_init>
900232d8:	1b64      	subs	r4, r4, r5
900232da:	10a4      	asrs	r4, r4, #2
900232dc:	2600      	movs	r6, #0
900232de:	42a6      	cmp	r6, r4
900232e0:	d105      	bne.n	900232ee <__libc_init_array+0x2e>
900232e2:	bd70      	pop	{r4, r5, r6, pc}
900232e4:	f855 3b04 	ldr.w	r3, [r5], #4
900232e8:	4798      	blx	r3
900232ea:	3601      	adds	r6, #1
900232ec:	e7ee      	b.n	900232cc <__libc_init_array+0xc>
900232ee:	f855 3b04 	ldr.w	r3, [r5], #4
900232f2:	4798      	blx	r3
900232f4:	3601      	adds	r6, #1
900232f6:	e7f2      	b.n	900232de <__libc_init_array+0x1e>
900232f8:	900270b8 	.word	0x900270b8
900232fc:	900270b8 	.word	0x900270b8
90023300:	900270b8 	.word	0x900270b8
90023304:	900270d4 	.word	0x900270d4

90023308 <__retarget_lock_init_recursive>:
90023308:	4770      	bx	lr

9002330a <__retarget_lock_acquire_recursive>:
9002330a:	4770      	bx	lr

9002330c <__retarget_lock_release_recursive>:
9002330c:	4770      	bx	lr

9002330e <memcpy>:
9002330e:	440a      	add	r2, r1
90023310:	4291      	cmp	r1, r2
90023312:	f100 33ff 	add.w	r3, r0, #4294967295
90023316:	d100      	bne.n	9002331a <memcpy+0xc>
90023318:	4770      	bx	lr
9002331a:	b510      	push	{r4, lr}
9002331c:	f811 4b01 	ldrb.w	r4, [r1], #1
90023320:	f803 4f01 	strb.w	r4, [r3, #1]!
90023324:	4291      	cmp	r1, r2
90023326:	d1f9      	bne.n	9002331c <memcpy+0xe>
90023328:	bd10      	pop	{r4, pc}
	...

9002332c <__register_exitproc>:
9002332c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
90023330:	4d27      	ldr	r5, [pc, #156]	@ (900233d0 <__register_exitproc+0xa4>)
90023332:	4607      	mov	r7, r0
90023334:	6828      	ldr	r0, [r5, #0]
90023336:	4691      	mov	r9, r2
90023338:	460e      	mov	r6, r1
9002333a:	4698      	mov	r8, r3
9002333c:	f7ff ffe5 	bl	9002330a <__retarget_lock_acquire_recursive>
90023340:	4a24      	ldr	r2, [pc, #144]	@ (900233d4 <__register_exitproc+0xa8>)
90023342:	6814      	ldr	r4, [r2, #0]
90023344:	b93c      	cbnz	r4, 90023356 <__register_exitproc+0x2a>
90023346:	4b24      	ldr	r3, [pc, #144]	@ (900233d8 <__register_exitproc+0xac>)
90023348:	6013      	str	r3, [r2, #0]
9002334a:	4a24      	ldr	r2, [pc, #144]	@ (900233dc <__register_exitproc+0xb0>)
9002334c:	b112      	cbz	r2, 90023354 <__register_exitproc+0x28>
9002334e:	6812      	ldr	r2, [r2, #0]
90023350:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
90023354:	4c20      	ldr	r4, [pc, #128]	@ (900233d8 <__register_exitproc+0xac>)
90023356:	6863      	ldr	r3, [r4, #4]
90023358:	2b1f      	cmp	r3, #31
9002335a:	dd06      	ble.n	9002336a <__register_exitproc+0x3e>
9002335c:	6828      	ldr	r0, [r5, #0]
9002335e:	f7ff ffd5 	bl	9002330c <__retarget_lock_release_recursive>
90023362:	f04f 30ff 	mov.w	r0, #4294967295
90023366:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
9002336a:	b32f      	cbz	r7, 900233b8 <__register_exitproc+0x8c>
9002336c:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
90023370:	b968      	cbnz	r0, 9002338e <__register_exitproc+0x62>
90023372:	4b1b      	ldr	r3, [pc, #108]	@ (900233e0 <__register_exitproc+0xb4>)
90023374:	2b00      	cmp	r3, #0
90023376:	d0f1      	beq.n	9002335c <__register_exitproc+0x30>
90023378:	f44f 7084 	mov.w	r0, #264	@ 0x108
9002337c:	f7ff fc6e 	bl	90022c5c <malloc>
90023380:	2800      	cmp	r0, #0
90023382:	d0eb      	beq.n	9002335c <__register_exitproc+0x30>
90023384:	2300      	movs	r3, #0
90023386:	e9c0 3340 	strd	r3, r3, [r0, #256]	@ 0x100
9002338a:	f8c4 0088 	str.w	r0, [r4, #136]	@ 0x88
9002338e:	6863      	ldr	r3, [r4, #4]
90023390:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
90023394:	2201      	movs	r2, #1
90023396:	409a      	lsls	r2, r3
90023398:	eb00 0183 	add.w	r1, r0, r3, lsl #2
9002339c:	f8d0 3100 	ldr.w	r3, [r0, #256]	@ 0x100
900233a0:	4313      	orrs	r3, r2
900233a2:	f8c0 3100 	str.w	r3, [r0, #256]	@ 0x100
900233a6:	2f02      	cmp	r7, #2
900233a8:	f8c1 8080 	str.w	r8, [r1, #128]	@ 0x80
900233ac:	bf02      	ittt	eq
900233ae:	f8d0 3104 	ldreq.w	r3, [r0, #260]	@ 0x104
900233b2:	4313      	orreq	r3, r2
900233b4:	f8c0 3104 	streq.w	r3, [r0, #260]	@ 0x104
900233b8:	6863      	ldr	r3, [r4, #4]
900233ba:	6828      	ldr	r0, [r5, #0]
900233bc:	1c5a      	adds	r2, r3, #1
900233be:	3302      	adds	r3, #2
900233c0:	6062      	str	r2, [r4, #4]
900233c2:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
900233c6:	f7ff ffa1 	bl	9002330c <__retarget_lock_release_recursive>
900233ca:	2000      	movs	r0, #0
900233cc:	e7cb      	b.n	90023366 <__register_exitproc+0x3a>
900233ce:	bf00      	nop
900233d0:	2400013c 	.word	0x2400013c
900233d4:	240265e0 	.word	0x240265e0
900233d8:	24026554 	.word	0x24026554
900233dc:	90026ec0 	.word	0x90026ec0
900233e0:	90022c5d 	.word	0x90022c5d

900233e4 <_free_r>:
900233e4:	b538      	push	{r3, r4, r5, lr}
900233e6:	4605      	mov	r5, r0
900233e8:	2900      	cmp	r1, #0
900233ea:	d041      	beq.n	90023470 <_free_r+0x8c>
900233ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
900233f0:	1f0c      	subs	r4, r1, #4
900233f2:	2b00      	cmp	r3, #0
900233f4:	bfb8      	it	lt
900233f6:	18e4      	addlt	r4, r4, r3
900233f8:	f7ff fce2 	bl	90022dc0 <__malloc_lock>
900233fc:	4a1d      	ldr	r2, [pc, #116]	@ (90023474 <_free_r+0x90>)
900233fe:	6813      	ldr	r3, [r2, #0]
90023400:	b933      	cbnz	r3, 90023410 <_free_r+0x2c>
90023402:	6063      	str	r3, [r4, #4]
90023404:	6014      	str	r4, [r2, #0]
90023406:	4628      	mov	r0, r5
90023408:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
9002340c:	f7ff bcde 	b.w	90022dcc <__malloc_unlock>
90023410:	42a3      	cmp	r3, r4
90023412:	d908      	bls.n	90023426 <_free_r+0x42>
90023414:	6820      	ldr	r0, [r4, #0]
90023416:	1821      	adds	r1, r4, r0
90023418:	428b      	cmp	r3, r1
9002341a:	bf01      	itttt	eq
9002341c:	6819      	ldreq	r1, [r3, #0]
9002341e:	685b      	ldreq	r3, [r3, #4]
90023420:	1809      	addeq	r1, r1, r0
90023422:	6021      	streq	r1, [r4, #0]
90023424:	e7ed      	b.n	90023402 <_free_r+0x1e>
90023426:	461a      	mov	r2, r3
90023428:	685b      	ldr	r3, [r3, #4]
9002342a:	b10b      	cbz	r3, 90023430 <_free_r+0x4c>
9002342c:	42a3      	cmp	r3, r4
9002342e:	d9fa      	bls.n	90023426 <_free_r+0x42>
90023430:	6811      	ldr	r1, [r2, #0]
90023432:	1850      	adds	r0, r2, r1
90023434:	42a0      	cmp	r0, r4
90023436:	d10b      	bne.n	90023450 <_free_r+0x6c>
90023438:	6820      	ldr	r0, [r4, #0]
9002343a:	4401      	add	r1, r0
9002343c:	1850      	adds	r0, r2, r1
9002343e:	4283      	cmp	r3, r0
90023440:	6011      	str	r1, [r2, #0]
90023442:	d1e0      	bne.n	90023406 <_free_r+0x22>
90023444:	6818      	ldr	r0, [r3, #0]
90023446:	685b      	ldr	r3, [r3, #4]
90023448:	6053      	str	r3, [r2, #4]
9002344a:	4408      	add	r0, r1
9002344c:	6010      	str	r0, [r2, #0]
9002344e:	e7da      	b.n	90023406 <_free_r+0x22>
90023450:	d902      	bls.n	90023458 <_free_r+0x74>
90023452:	230c      	movs	r3, #12
90023454:	602b      	str	r3, [r5, #0]
90023456:	e7d6      	b.n	90023406 <_free_r+0x22>
90023458:	6820      	ldr	r0, [r4, #0]
9002345a:	1821      	adds	r1, r4, r0
9002345c:	428b      	cmp	r3, r1
9002345e:	bf04      	itt	eq
90023460:	6819      	ldreq	r1, [r3, #0]
90023462:	685b      	ldreq	r3, [r3, #4]
90023464:	6063      	str	r3, [r4, #4]
90023466:	bf04      	itt	eq
90023468:	1809      	addeq	r1, r1, r0
9002346a:	6021      	streq	r1, [r4, #0]
9002346c:	6054      	str	r4, [r2, #4]
9002346e:	e7ca      	b.n	90023406 <_free_r+0x22>
90023470:	bd38      	pop	{r3, r4, r5, pc}
90023472:	bf00      	nop
90023474:	2402640c 	.word	0x2402640c

90023478 <__sfputc_r>:
90023478:	6893      	ldr	r3, [r2, #8]
9002347a:	3b01      	subs	r3, #1
9002347c:	2b00      	cmp	r3, #0
9002347e:	b410      	push	{r4}
90023480:	6093      	str	r3, [r2, #8]
90023482:	da08      	bge.n	90023496 <__sfputc_r+0x1e>
90023484:	6994      	ldr	r4, [r2, #24]
90023486:	42a3      	cmp	r3, r4
90023488:	db01      	blt.n	9002348e <__sfputc_r+0x16>
9002348a:	290a      	cmp	r1, #10
9002348c:	d103      	bne.n	90023496 <__sfputc_r+0x1e>
9002348e:	f85d 4b04 	ldr.w	r4, [sp], #4
90023492:	f7ff bdc6 	b.w	90023022 <__swbuf_r>
90023496:	6813      	ldr	r3, [r2, #0]
90023498:	1c58      	adds	r0, r3, #1
9002349a:	6010      	str	r0, [r2, #0]
9002349c:	7019      	strb	r1, [r3, #0]
9002349e:	4608      	mov	r0, r1
900234a0:	f85d 4b04 	ldr.w	r4, [sp], #4
900234a4:	4770      	bx	lr

900234a6 <__sfputs_r>:
900234a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
900234a8:	4606      	mov	r6, r0
900234aa:	460f      	mov	r7, r1
900234ac:	4614      	mov	r4, r2
900234ae:	18d5      	adds	r5, r2, r3
900234b0:	42ac      	cmp	r4, r5
900234b2:	d101      	bne.n	900234b8 <__sfputs_r+0x12>
900234b4:	2000      	movs	r0, #0
900234b6:	e007      	b.n	900234c8 <__sfputs_r+0x22>
900234b8:	f814 1b01 	ldrb.w	r1, [r4], #1
900234bc:	463a      	mov	r2, r7
900234be:	4630      	mov	r0, r6
900234c0:	f7ff ffda 	bl	90023478 <__sfputc_r>
900234c4:	1c43      	adds	r3, r0, #1
900234c6:	d1f3      	bne.n	900234b0 <__sfputs_r+0xa>
900234c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

900234cc <_vfiprintf_r>:
900234cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900234d0:	460d      	mov	r5, r1
900234d2:	b09d      	sub	sp, #116	@ 0x74
900234d4:	4614      	mov	r4, r2
900234d6:	4698      	mov	r8, r3
900234d8:	4606      	mov	r6, r0
900234da:	b118      	cbz	r0, 900234e4 <_vfiprintf_r+0x18>
900234dc:	6a03      	ldr	r3, [r0, #32]
900234de:	b90b      	cbnz	r3, 900234e4 <_vfiprintf_r+0x18>
900234e0:	f7ff fd14 	bl	90022f0c <__sinit>
900234e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
900234e6:	07d9      	lsls	r1, r3, #31
900234e8:	d405      	bmi.n	900234f6 <_vfiprintf_r+0x2a>
900234ea:	89ab      	ldrh	r3, [r5, #12]
900234ec:	059a      	lsls	r2, r3, #22
900234ee:	d402      	bmi.n	900234f6 <_vfiprintf_r+0x2a>
900234f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
900234f2:	f7ff ff0a 	bl	9002330a <__retarget_lock_acquire_recursive>
900234f6:	89ab      	ldrh	r3, [r5, #12]
900234f8:	071b      	lsls	r3, r3, #28
900234fa:	d501      	bpl.n	90023500 <_vfiprintf_r+0x34>
900234fc:	692b      	ldr	r3, [r5, #16]
900234fe:	b99b      	cbnz	r3, 90023528 <_vfiprintf_r+0x5c>
90023500:	4629      	mov	r1, r5
90023502:	4630      	mov	r0, r6
90023504:	f7ff fdcc 	bl	900230a0 <__swsetup_r>
90023508:	b170      	cbz	r0, 90023528 <_vfiprintf_r+0x5c>
9002350a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
9002350c:	07dc      	lsls	r4, r3, #31
9002350e:	d504      	bpl.n	9002351a <_vfiprintf_r+0x4e>
90023510:	f04f 30ff 	mov.w	r0, #4294967295
90023514:	b01d      	add	sp, #116	@ 0x74
90023516:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9002351a:	89ab      	ldrh	r3, [r5, #12]
9002351c:	0598      	lsls	r0, r3, #22
9002351e:	d4f7      	bmi.n	90023510 <_vfiprintf_r+0x44>
90023520:	6da8      	ldr	r0, [r5, #88]	@ 0x58
90023522:	f7ff fef3 	bl	9002330c <__retarget_lock_release_recursive>
90023526:	e7f3      	b.n	90023510 <_vfiprintf_r+0x44>
90023528:	2300      	movs	r3, #0
9002352a:	9309      	str	r3, [sp, #36]	@ 0x24
9002352c:	2320      	movs	r3, #32
9002352e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
90023532:	f8cd 800c 	str.w	r8, [sp, #12]
90023536:	2330      	movs	r3, #48	@ 0x30
90023538:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 900236e8 <_vfiprintf_r+0x21c>
9002353c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
90023540:	f04f 0901 	mov.w	r9, #1
90023544:	4623      	mov	r3, r4
90023546:	469a      	mov	sl, r3
90023548:	f813 2b01 	ldrb.w	r2, [r3], #1
9002354c:	b10a      	cbz	r2, 90023552 <_vfiprintf_r+0x86>
9002354e:	2a25      	cmp	r2, #37	@ 0x25
90023550:	d1f9      	bne.n	90023546 <_vfiprintf_r+0x7a>
90023552:	ebba 0b04 	subs.w	fp, sl, r4
90023556:	d00b      	beq.n	90023570 <_vfiprintf_r+0xa4>
90023558:	465b      	mov	r3, fp
9002355a:	4622      	mov	r2, r4
9002355c:	4629      	mov	r1, r5
9002355e:	4630      	mov	r0, r6
90023560:	f7ff ffa1 	bl	900234a6 <__sfputs_r>
90023564:	3001      	adds	r0, #1
90023566:	f000 80a7 	beq.w	900236b8 <_vfiprintf_r+0x1ec>
9002356a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
9002356c:	445a      	add	r2, fp
9002356e:	9209      	str	r2, [sp, #36]	@ 0x24
90023570:	f89a 3000 	ldrb.w	r3, [sl]
90023574:	2b00      	cmp	r3, #0
90023576:	f000 809f 	beq.w	900236b8 <_vfiprintf_r+0x1ec>
9002357a:	2300      	movs	r3, #0
9002357c:	f04f 32ff 	mov.w	r2, #4294967295
90023580:	e9cd 2305 	strd	r2, r3, [sp, #20]
90023584:	f10a 0a01 	add.w	sl, sl, #1
90023588:	9304      	str	r3, [sp, #16]
9002358a:	9307      	str	r3, [sp, #28]
9002358c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
90023590:	931a      	str	r3, [sp, #104]	@ 0x68
90023592:	4654      	mov	r4, sl
90023594:	2205      	movs	r2, #5
90023596:	f814 1b01 	ldrb.w	r1, [r4], #1
9002359a:	4853      	ldr	r0, [pc, #332]	@ (900236e8 <_vfiprintf_r+0x21c>)
9002359c:	f7dc fea0 	bl	900002e0 <memchr>
900235a0:	9a04      	ldr	r2, [sp, #16]
900235a2:	b9d8      	cbnz	r0, 900235dc <_vfiprintf_r+0x110>
900235a4:	06d1      	lsls	r1, r2, #27
900235a6:	bf44      	itt	mi
900235a8:	2320      	movmi	r3, #32
900235aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
900235ae:	0713      	lsls	r3, r2, #28
900235b0:	bf44      	itt	mi
900235b2:	232b      	movmi	r3, #43	@ 0x2b
900235b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
900235b8:	f89a 3000 	ldrb.w	r3, [sl]
900235bc:	2b2a      	cmp	r3, #42	@ 0x2a
900235be:	d015      	beq.n	900235ec <_vfiprintf_r+0x120>
900235c0:	9a07      	ldr	r2, [sp, #28]
900235c2:	4654      	mov	r4, sl
900235c4:	2000      	movs	r0, #0
900235c6:	f04f 0c0a 	mov.w	ip, #10
900235ca:	4621      	mov	r1, r4
900235cc:	f811 3b01 	ldrb.w	r3, [r1], #1
900235d0:	3b30      	subs	r3, #48	@ 0x30
900235d2:	2b09      	cmp	r3, #9
900235d4:	d94b      	bls.n	9002366e <_vfiprintf_r+0x1a2>
900235d6:	b1b0      	cbz	r0, 90023606 <_vfiprintf_r+0x13a>
900235d8:	9207      	str	r2, [sp, #28]
900235da:	e014      	b.n	90023606 <_vfiprintf_r+0x13a>
900235dc:	eba0 0308 	sub.w	r3, r0, r8
900235e0:	fa09 f303 	lsl.w	r3, r9, r3
900235e4:	4313      	orrs	r3, r2
900235e6:	9304      	str	r3, [sp, #16]
900235e8:	46a2      	mov	sl, r4
900235ea:	e7d2      	b.n	90023592 <_vfiprintf_r+0xc6>
900235ec:	9b03      	ldr	r3, [sp, #12]
900235ee:	1d19      	adds	r1, r3, #4
900235f0:	681b      	ldr	r3, [r3, #0]
900235f2:	9103      	str	r1, [sp, #12]
900235f4:	2b00      	cmp	r3, #0
900235f6:	bfbb      	ittet	lt
900235f8:	425b      	neglt	r3, r3
900235fa:	f042 0202 	orrlt.w	r2, r2, #2
900235fe:	9307      	strge	r3, [sp, #28]
90023600:	9307      	strlt	r3, [sp, #28]
90023602:	bfb8      	it	lt
90023604:	9204      	strlt	r2, [sp, #16]
90023606:	7823      	ldrb	r3, [r4, #0]
90023608:	2b2e      	cmp	r3, #46	@ 0x2e
9002360a:	d10a      	bne.n	90023622 <_vfiprintf_r+0x156>
9002360c:	7863      	ldrb	r3, [r4, #1]
9002360e:	2b2a      	cmp	r3, #42	@ 0x2a
90023610:	d132      	bne.n	90023678 <_vfiprintf_r+0x1ac>
90023612:	9b03      	ldr	r3, [sp, #12]
90023614:	1d1a      	adds	r2, r3, #4
90023616:	681b      	ldr	r3, [r3, #0]
90023618:	9203      	str	r2, [sp, #12]
9002361a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
9002361e:	3402      	adds	r4, #2
90023620:	9305      	str	r3, [sp, #20]
90023622:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 900236f8 <_vfiprintf_r+0x22c>
90023626:	7821      	ldrb	r1, [r4, #0]
90023628:	2203      	movs	r2, #3
9002362a:	4650      	mov	r0, sl
9002362c:	f7dc fe58 	bl	900002e0 <memchr>
90023630:	b138      	cbz	r0, 90023642 <_vfiprintf_r+0x176>
90023632:	9b04      	ldr	r3, [sp, #16]
90023634:	eba0 000a 	sub.w	r0, r0, sl
90023638:	2240      	movs	r2, #64	@ 0x40
9002363a:	4082      	lsls	r2, r0
9002363c:	4313      	orrs	r3, r2
9002363e:	3401      	adds	r4, #1
90023640:	9304      	str	r3, [sp, #16]
90023642:	f814 1b01 	ldrb.w	r1, [r4], #1
90023646:	4829      	ldr	r0, [pc, #164]	@ (900236ec <_vfiprintf_r+0x220>)
90023648:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
9002364c:	2206      	movs	r2, #6
9002364e:	f7dc fe47 	bl	900002e0 <memchr>
90023652:	2800      	cmp	r0, #0
90023654:	d03f      	beq.n	900236d6 <_vfiprintf_r+0x20a>
90023656:	4b26      	ldr	r3, [pc, #152]	@ (900236f0 <_vfiprintf_r+0x224>)
90023658:	bb1b      	cbnz	r3, 900236a2 <_vfiprintf_r+0x1d6>
9002365a:	9b03      	ldr	r3, [sp, #12]
9002365c:	3307      	adds	r3, #7
9002365e:	f023 0307 	bic.w	r3, r3, #7
90023662:	3308      	adds	r3, #8
90023664:	9303      	str	r3, [sp, #12]
90023666:	9b09      	ldr	r3, [sp, #36]	@ 0x24
90023668:	443b      	add	r3, r7
9002366a:	9309      	str	r3, [sp, #36]	@ 0x24
9002366c:	e76a      	b.n	90023544 <_vfiprintf_r+0x78>
9002366e:	fb0c 3202 	mla	r2, ip, r2, r3
90023672:	460c      	mov	r4, r1
90023674:	2001      	movs	r0, #1
90023676:	e7a8      	b.n	900235ca <_vfiprintf_r+0xfe>
90023678:	2300      	movs	r3, #0
9002367a:	3401      	adds	r4, #1
9002367c:	9305      	str	r3, [sp, #20]
9002367e:	4619      	mov	r1, r3
90023680:	f04f 0c0a 	mov.w	ip, #10
90023684:	4620      	mov	r0, r4
90023686:	f810 2b01 	ldrb.w	r2, [r0], #1
9002368a:	3a30      	subs	r2, #48	@ 0x30
9002368c:	2a09      	cmp	r2, #9
9002368e:	d903      	bls.n	90023698 <_vfiprintf_r+0x1cc>
90023690:	2b00      	cmp	r3, #0
90023692:	d0c6      	beq.n	90023622 <_vfiprintf_r+0x156>
90023694:	9105      	str	r1, [sp, #20]
90023696:	e7c4      	b.n	90023622 <_vfiprintf_r+0x156>
90023698:	fb0c 2101 	mla	r1, ip, r1, r2
9002369c:	4604      	mov	r4, r0
9002369e:	2301      	movs	r3, #1
900236a0:	e7f0      	b.n	90023684 <_vfiprintf_r+0x1b8>
900236a2:	ab03      	add	r3, sp, #12
900236a4:	9300      	str	r3, [sp, #0]
900236a6:	462a      	mov	r2, r5
900236a8:	4b12      	ldr	r3, [pc, #72]	@ (900236f4 <_vfiprintf_r+0x228>)
900236aa:	a904      	add	r1, sp, #16
900236ac:	4630      	mov	r0, r6
900236ae:	f3af 8000 	nop.w
900236b2:	4607      	mov	r7, r0
900236b4:	1c78      	adds	r0, r7, #1
900236b6:	d1d6      	bne.n	90023666 <_vfiprintf_r+0x19a>
900236b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
900236ba:	07d9      	lsls	r1, r3, #31
900236bc:	d405      	bmi.n	900236ca <_vfiprintf_r+0x1fe>
900236be:	89ab      	ldrh	r3, [r5, #12]
900236c0:	059a      	lsls	r2, r3, #22
900236c2:	d402      	bmi.n	900236ca <_vfiprintf_r+0x1fe>
900236c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
900236c6:	f7ff fe21 	bl	9002330c <__retarget_lock_release_recursive>
900236ca:	89ab      	ldrh	r3, [r5, #12]
900236cc:	065b      	lsls	r3, r3, #25
900236ce:	f53f af1f 	bmi.w	90023510 <_vfiprintf_r+0x44>
900236d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
900236d4:	e71e      	b.n	90023514 <_vfiprintf_r+0x48>
900236d6:	ab03      	add	r3, sp, #12
900236d8:	9300      	str	r3, [sp, #0]
900236da:	462a      	mov	r2, r5
900236dc:	4b05      	ldr	r3, [pc, #20]	@ (900236f4 <_vfiprintf_r+0x228>)
900236de:	a904      	add	r1, sp, #16
900236e0:	4630      	mov	r0, r6
900236e2:	f000 f879 	bl	900237d8 <_printf_i>
900236e6:	e7e4      	b.n	900236b2 <_vfiprintf_r+0x1e6>
900236e8:	90026ec4 	.word	0x90026ec4
900236ec:	90026ece 	.word	0x90026ece
900236f0:	00000000 	.word	0x00000000
900236f4:	900234a7 	.word	0x900234a7
900236f8:	90026eca 	.word	0x90026eca

900236fc <_printf_common>:
900236fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
90023700:	4616      	mov	r6, r2
90023702:	4698      	mov	r8, r3
90023704:	688a      	ldr	r2, [r1, #8]
90023706:	690b      	ldr	r3, [r1, #16]
90023708:	f8dd 9020 	ldr.w	r9, [sp, #32]
9002370c:	4293      	cmp	r3, r2
9002370e:	bfb8      	it	lt
90023710:	4613      	movlt	r3, r2
90023712:	6033      	str	r3, [r6, #0]
90023714:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
90023718:	4607      	mov	r7, r0
9002371a:	460c      	mov	r4, r1
9002371c:	b10a      	cbz	r2, 90023722 <_printf_common+0x26>
9002371e:	3301      	adds	r3, #1
90023720:	6033      	str	r3, [r6, #0]
90023722:	6823      	ldr	r3, [r4, #0]
90023724:	0699      	lsls	r1, r3, #26
90023726:	bf42      	ittt	mi
90023728:	6833      	ldrmi	r3, [r6, #0]
9002372a:	3302      	addmi	r3, #2
9002372c:	6033      	strmi	r3, [r6, #0]
9002372e:	6825      	ldr	r5, [r4, #0]
90023730:	f015 0506 	ands.w	r5, r5, #6
90023734:	d106      	bne.n	90023744 <_printf_common+0x48>
90023736:	f104 0a19 	add.w	sl, r4, #25
9002373a:	68e3      	ldr	r3, [r4, #12]
9002373c:	6832      	ldr	r2, [r6, #0]
9002373e:	1a9b      	subs	r3, r3, r2
90023740:	42ab      	cmp	r3, r5
90023742:	dc26      	bgt.n	90023792 <_printf_common+0x96>
90023744:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
90023748:	6822      	ldr	r2, [r4, #0]
9002374a:	3b00      	subs	r3, #0
9002374c:	bf18      	it	ne
9002374e:	2301      	movne	r3, #1
90023750:	0692      	lsls	r2, r2, #26
90023752:	d42b      	bmi.n	900237ac <_printf_common+0xb0>
90023754:	f104 0243 	add.w	r2, r4, #67	@ 0x43
90023758:	4641      	mov	r1, r8
9002375a:	4638      	mov	r0, r7
9002375c:	47c8      	blx	r9
9002375e:	3001      	adds	r0, #1
90023760:	d01e      	beq.n	900237a0 <_printf_common+0xa4>
90023762:	6823      	ldr	r3, [r4, #0]
90023764:	6922      	ldr	r2, [r4, #16]
90023766:	f003 0306 	and.w	r3, r3, #6
9002376a:	2b04      	cmp	r3, #4
9002376c:	bf02      	ittt	eq
9002376e:	68e5      	ldreq	r5, [r4, #12]
90023770:	6833      	ldreq	r3, [r6, #0]
90023772:	1aed      	subeq	r5, r5, r3
90023774:	68a3      	ldr	r3, [r4, #8]
90023776:	bf0c      	ite	eq
90023778:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
9002377c:	2500      	movne	r5, #0
9002377e:	4293      	cmp	r3, r2
90023780:	bfc4      	itt	gt
90023782:	1a9b      	subgt	r3, r3, r2
90023784:	18ed      	addgt	r5, r5, r3
90023786:	2600      	movs	r6, #0
90023788:	341a      	adds	r4, #26
9002378a:	42b5      	cmp	r5, r6
9002378c:	d11a      	bne.n	900237c4 <_printf_common+0xc8>
9002378e:	2000      	movs	r0, #0
90023790:	e008      	b.n	900237a4 <_printf_common+0xa8>
90023792:	2301      	movs	r3, #1
90023794:	4652      	mov	r2, sl
90023796:	4641      	mov	r1, r8
90023798:	4638      	mov	r0, r7
9002379a:	47c8      	blx	r9
9002379c:	3001      	adds	r0, #1
9002379e:	d103      	bne.n	900237a8 <_printf_common+0xac>
900237a0:	f04f 30ff 	mov.w	r0, #4294967295
900237a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
900237a8:	3501      	adds	r5, #1
900237aa:	e7c6      	b.n	9002373a <_printf_common+0x3e>
900237ac:	18e1      	adds	r1, r4, r3
900237ae:	1c5a      	adds	r2, r3, #1
900237b0:	2030      	movs	r0, #48	@ 0x30
900237b2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
900237b6:	4422      	add	r2, r4
900237b8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
900237bc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
900237c0:	3302      	adds	r3, #2
900237c2:	e7c7      	b.n	90023754 <_printf_common+0x58>
900237c4:	2301      	movs	r3, #1
900237c6:	4622      	mov	r2, r4
900237c8:	4641      	mov	r1, r8
900237ca:	4638      	mov	r0, r7
900237cc:	47c8      	blx	r9
900237ce:	3001      	adds	r0, #1
900237d0:	d0e6      	beq.n	900237a0 <_printf_common+0xa4>
900237d2:	3601      	adds	r6, #1
900237d4:	e7d9      	b.n	9002378a <_printf_common+0x8e>
	...

900237d8 <_printf_i>:
900237d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
900237dc:	7e0f      	ldrb	r7, [r1, #24]
900237de:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
900237e0:	2f78      	cmp	r7, #120	@ 0x78
900237e2:	4691      	mov	r9, r2
900237e4:	4680      	mov	r8, r0
900237e6:	460c      	mov	r4, r1
900237e8:	469a      	mov	sl, r3
900237ea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
900237ee:	d807      	bhi.n	90023800 <_printf_i+0x28>
900237f0:	2f62      	cmp	r7, #98	@ 0x62
900237f2:	d80a      	bhi.n	9002380a <_printf_i+0x32>
900237f4:	2f00      	cmp	r7, #0
900237f6:	f000 80d2 	beq.w	9002399e <_printf_i+0x1c6>
900237fa:	2f58      	cmp	r7, #88	@ 0x58
900237fc:	f000 80b9 	beq.w	90023972 <_printf_i+0x19a>
90023800:	f104 0642 	add.w	r6, r4, #66	@ 0x42
90023804:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
90023808:	e03a      	b.n	90023880 <_printf_i+0xa8>
9002380a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
9002380e:	2b15      	cmp	r3, #21
90023810:	d8f6      	bhi.n	90023800 <_printf_i+0x28>
90023812:	a101      	add	r1, pc, #4	@ (adr r1, 90023818 <_printf_i+0x40>)
90023814:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
90023818:	90023871 	.word	0x90023871
9002381c:	90023885 	.word	0x90023885
90023820:	90023801 	.word	0x90023801
90023824:	90023801 	.word	0x90023801
90023828:	90023801 	.word	0x90023801
9002382c:	90023801 	.word	0x90023801
90023830:	90023885 	.word	0x90023885
90023834:	90023801 	.word	0x90023801
90023838:	90023801 	.word	0x90023801
9002383c:	90023801 	.word	0x90023801
90023840:	90023801 	.word	0x90023801
90023844:	90023985 	.word	0x90023985
90023848:	900238af 	.word	0x900238af
9002384c:	9002393f 	.word	0x9002393f
90023850:	90023801 	.word	0x90023801
90023854:	90023801 	.word	0x90023801
90023858:	900239a7 	.word	0x900239a7
9002385c:	90023801 	.word	0x90023801
90023860:	900238af 	.word	0x900238af
90023864:	90023801 	.word	0x90023801
90023868:	90023801 	.word	0x90023801
9002386c:	90023947 	.word	0x90023947
90023870:	6833      	ldr	r3, [r6, #0]
90023872:	1d1a      	adds	r2, r3, #4
90023874:	681b      	ldr	r3, [r3, #0]
90023876:	6032      	str	r2, [r6, #0]
90023878:	f104 0642 	add.w	r6, r4, #66	@ 0x42
9002387c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
90023880:	2301      	movs	r3, #1
90023882:	e09d      	b.n	900239c0 <_printf_i+0x1e8>
90023884:	6833      	ldr	r3, [r6, #0]
90023886:	6820      	ldr	r0, [r4, #0]
90023888:	1d19      	adds	r1, r3, #4
9002388a:	6031      	str	r1, [r6, #0]
9002388c:	0606      	lsls	r6, r0, #24
9002388e:	d501      	bpl.n	90023894 <_printf_i+0xbc>
90023890:	681d      	ldr	r5, [r3, #0]
90023892:	e003      	b.n	9002389c <_printf_i+0xc4>
90023894:	0645      	lsls	r5, r0, #25
90023896:	d5fb      	bpl.n	90023890 <_printf_i+0xb8>
90023898:	f9b3 5000 	ldrsh.w	r5, [r3]
9002389c:	2d00      	cmp	r5, #0
9002389e:	da03      	bge.n	900238a8 <_printf_i+0xd0>
900238a0:	232d      	movs	r3, #45	@ 0x2d
900238a2:	426d      	negs	r5, r5
900238a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
900238a8:	4859      	ldr	r0, [pc, #356]	@ (90023a10 <_printf_i+0x238>)
900238aa:	230a      	movs	r3, #10
900238ac:	e011      	b.n	900238d2 <_printf_i+0xfa>
900238ae:	6821      	ldr	r1, [r4, #0]
900238b0:	6833      	ldr	r3, [r6, #0]
900238b2:	0608      	lsls	r0, r1, #24
900238b4:	f853 5b04 	ldr.w	r5, [r3], #4
900238b8:	d402      	bmi.n	900238c0 <_printf_i+0xe8>
900238ba:	0649      	lsls	r1, r1, #25
900238bc:	bf48      	it	mi
900238be:	b2ad      	uxthmi	r5, r5
900238c0:	2f6f      	cmp	r7, #111	@ 0x6f
900238c2:	4853      	ldr	r0, [pc, #332]	@ (90023a10 <_printf_i+0x238>)
900238c4:	6033      	str	r3, [r6, #0]
900238c6:	bf14      	ite	ne
900238c8:	230a      	movne	r3, #10
900238ca:	2308      	moveq	r3, #8
900238cc:	2100      	movs	r1, #0
900238ce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
900238d2:	6866      	ldr	r6, [r4, #4]
900238d4:	60a6      	str	r6, [r4, #8]
900238d6:	2e00      	cmp	r6, #0
900238d8:	bfa2      	ittt	ge
900238da:	6821      	ldrge	r1, [r4, #0]
900238dc:	f021 0104 	bicge.w	r1, r1, #4
900238e0:	6021      	strge	r1, [r4, #0]
900238e2:	b90d      	cbnz	r5, 900238e8 <_printf_i+0x110>
900238e4:	2e00      	cmp	r6, #0
900238e6:	d04b      	beq.n	90023980 <_printf_i+0x1a8>
900238e8:	4616      	mov	r6, r2
900238ea:	fbb5 f1f3 	udiv	r1, r5, r3
900238ee:	fb03 5711 	mls	r7, r3, r1, r5
900238f2:	5dc7      	ldrb	r7, [r0, r7]
900238f4:	f806 7d01 	strb.w	r7, [r6, #-1]!
900238f8:	462f      	mov	r7, r5
900238fa:	42bb      	cmp	r3, r7
900238fc:	460d      	mov	r5, r1
900238fe:	d9f4      	bls.n	900238ea <_printf_i+0x112>
90023900:	2b08      	cmp	r3, #8
90023902:	d10b      	bne.n	9002391c <_printf_i+0x144>
90023904:	6823      	ldr	r3, [r4, #0]
90023906:	07df      	lsls	r7, r3, #31
90023908:	d508      	bpl.n	9002391c <_printf_i+0x144>
9002390a:	6923      	ldr	r3, [r4, #16]
9002390c:	6861      	ldr	r1, [r4, #4]
9002390e:	4299      	cmp	r1, r3
90023910:	bfde      	ittt	le
90023912:	2330      	movle	r3, #48	@ 0x30
90023914:	f806 3c01 	strble.w	r3, [r6, #-1]
90023918:	f106 36ff 	addle.w	r6, r6, #4294967295
9002391c:	1b92      	subs	r2, r2, r6
9002391e:	6122      	str	r2, [r4, #16]
90023920:	f8cd a000 	str.w	sl, [sp]
90023924:	464b      	mov	r3, r9
90023926:	aa03      	add	r2, sp, #12
90023928:	4621      	mov	r1, r4
9002392a:	4640      	mov	r0, r8
9002392c:	f7ff fee6 	bl	900236fc <_printf_common>
90023930:	3001      	adds	r0, #1
90023932:	d14a      	bne.n	900239ca <_printf_i+0x1f2>
90023934:	f04f 30ff 	mov.w	r0, #4294967295
90023938:	b004      	add	sp, #16
9002393a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9002393e:	6823      	ldr	r3, [r4, #0]
90023940:	f043 0320 	orr.w	r3, r3, #32
90023944:	6023      	str	r3, [r4, #0]
90023946:	4833      	ldr	r0, [pc, #204]	@ (90023a14 <_printf_i+0x23c>)
90023948:	2778      	movs	r7, #120	@ 0x78
9002394a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
9002394e:	6823      	ldr	r3, [r4, #0]
90023950:	6831      	ldr	r1, [r6, #0]
90023952:	061f      	lsls	r7, r3, #24
90023954:	f851 5b04 	ldr.w	r5, [r1], #4
90023958:	d402      	bmi.n	90023960 <_printf_i+0x188>
9002395a:	065f      	lsls	r7, r3, #25
9002395c:	bf48      	it	mi
9002395e:	b2ad      	uxthmi	r5, r5
90023960:	6031      	str	r1, [r6, #0]
90023962:	07d9      	lsls	r1, r3, #31
90023964:	bf44      	itt	mi
90023966:	f043 0320 	orrmi.w	r3, r3, #32
9002396a:	6023      	strmi	r3, [r4, #0]
9002396c:	b11d      	cbz	r5, 90023976 <_printf_i+0x19e>
9002396e:	2310      	movs	r3, #16
90023970:	e7ac      	b.n	900238cc <_printf_i+0xf4>
90023972:	4827      	ldr	r0, [pc, #156]	@ (90023a10 <_printf_i+0x238>)
90023974:	e7e9      	b.n	9002394a <_printf_i+0x172>
90023976:	6823      	ldr	r3, [r4, #0]
90023978:	f023 0320 	bic.w	r3, r3, #32
9002397c:	6023      	str	r3, [r4, #0]
9002397e:	e7f6      	b.n	9002396e <_printf_i+0x196>
90023980:	4616      	mov	r6, r2
90023982:	e7bd      	b.n	90023900 <_printf_i+0x128>
90023984:	6833      	ldr	r3, [r6, #0]
90023986:	6825      	ldr	r5, [r4, #0]
90023988:	6961      	ldr	r1, [r4, #20]
9002398a:	1d18      	adds	r0, r3, #4
9002398c:	6030      	str	r0, [r6, #0]
9002398e:	062e      	lsls	r6, r5, #24
90023990:	681b      	ldr	r3, [r3, #0]
90023992:	d501      	bpl.n	90023998 <_printf_i+0x1c0>
90023994:	6019      	str	r1, [r3, #0]
90023996:	e002      	b.n	9002399e <_printf_i+0x1c6>
90023998:	0668      	lsls	r0, r5, #25
9002399a:	d5fb      	bpl.n	90023994 <_printf_i+0x1bc>
9002399c:	8019      	strh	r1, [r3, #0]
9002399e:	2300      	movs	r3, #0
900239a0:	6123      	str	r3, [r4, #16]
900239a2:	4616      	mov	r6, r2
900239a4:	e7bc      	b.n	90023920 <_printf_i+0x148>
900239a6:	6833      	ldr	r3, [r6, #0]
900239a8:	1d1a      	adds	r2, r3, #4
900239aa:	6032      	str	r2, [r6, #0]
900239ac:	681e      	ldr	r6, [r3, #0]
900239ae:	6862      	ldr	r2, [r4, #4]
900239b0:	2100      	movs	r1, #0
900239b2:	4630      	mov	r0, r6
900239b4:	f7dc fc94 	bl	900002e0 <memchr>
900239b8:	b108      	cbz	r0, 900239be <_printf_i+0x1e6>
900239ba:	1b80      	subs	r0, r0, r6
900239bc:	6060      	str	r0, [r4, #4]
900239be:	6863      	ldr	r3, [r4, #4]
900239c0:	6123      	str	r3, [r4, #16]
900239c2:	2300      	movs	r3, #0
900239c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
900239c8:	e7aa      	b.n	90023920 <_printf_i+0x148>
900239ca:	6923      	ldr	r3, [r4, #16]
900239cc:	4632      	mov	r2, r6
900239ce:	4649      	mov	r1, r9
900239d0:	4640      	mov	r0, r8
900239d2:	47d0      	blx	sl
900239d4:	3001      	adds	r0, #1
900239d6:	d0ad      	beq.n	90023934 <_printf_i+0x15c>
900239d8:	6823      	ldr	r3, [r4, #0]
900239da:	079b      	lsls	r3, r3, #30
900239dc:	d413      	bmi.n	90023a06 <_printf_i+0x22e>
900239de:	68e0      	ldr	r0, [r4, #12]
900239e0:	9b03      	ldr	r3, [sp, #12]
900239e2:	4298      	cmp	r0, r3
900239e4:	bfb8      	it	lt
900239e6:	4618      	movlt	r0, r3
900239e8:	e7a6      	b.n	90023938 <_printf_i+0x160>
900239ea:	2301      	movs	r3, #1
900239ec:	4632      	mov	r2, r6
900239ee:	4649      	mov	r1, r9
900239f0:	4640      	mov	r0, r8
900239f2:	47d0      	blx	sl
900239f4:	3001      	adds	r0, #1
900239f6:	d09d      	beq.n	90023934 <_printf_i+0x15c>
900239f8:	3501      	adds	r5, #1
900239fa:	68e3      	ldr	r3, [r4, #12]
900239fc:	9903      	ldr	r1, [sp, #12]
900239fe:	1a5b      	subs	r3, r3, r1
90023a00:	42ab      	cmp	r3, r5
90023a02:	dcf2      	bgt.n	900239ea <_printf_i+0x212>
90023a04:	e7eb      	b.n	900239de <_printf_i+0x206>
90023a06:	2500      	movs	r5, #0
90023a08:	f104 0619 	add.w	r6, r4, #25
90023a0c:	e7f5      	b.n	900239fa <_printf_i+0x222>
90023a0e:	bf00      	nop
90023a10:	90026ed5 	.word	0x90026ed5
90023a14:	90026ee6 	.word	0x90026ee6

90023a18 <__sflush_r>:
90023a18:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
90023a1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90023a20:	0716      	lsls	r6, r2, #28
90023a22:	4605      	mov	r5, r0
90023a24:	460c      	mov	r4, r1
90023a26:	d454      	bmi.n	90023ad2 <__sflush_r+0xba>
90023a28:	684b      	ldr	r3, [r1, #4]
90023a2a:	2b00      	cmp	r3, #0
90023a2c:	dc02      	bgt.n	90023a34 <__sflush_r+0x1c>
90023a2e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
90023a30:	2b00      	cmp	r3, #0
90023a32:	dd48      	ble.n	90023ac6 <__sflush_r+0xae>
90023a34:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
90023a36:	2e00      	cmp	r6, #0
90023a38:	d045      	beq.n	90023ac6 <__sflush_r+0xae>
90023a3a:	2300      	movs	r3, #0
90023a3c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
90023a40:	682f      	ldr	r7, [r5, #0]
90023a42:	6a21      	ldr	r1, [r4, #32]
90023a44:	602b      	str	r3, [r5, #0]
90023a46:	d030      	beq.n	90023aaa <__sflush_r+0x92>
90023a48:	6d62      	ldr	r2, [r4, #84]	@ 0x54
90023a4a:	89a3      	ldrh	r3, [r4, #12]
90023a4c:	0759      	lsls	r1, r3, #29
90023a4e:	d505      	bpl.n	90023a5c <__sflush_r+0x44>
90023a50:	6863      	ldr	r3, [r4, #4]
90023a52:	1ad2      	subs	r2, r2, r3
90023a54:	6b63      	ldr	r3, [r4, #52]	@ 0x34
90023a56:	b10b      	cbz	r3, 90023a5c <__sflush_r+0x44>
90023a58:	6c23      	ldr	r3, [r4, #64]	@ 0x40
90023a5a:	1ad2      	subs	r2, r2, r3
90023a5c:	2300      	movs	r3, #0
90023a5e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
90023a60:	6a21      	ldr	r1, [r4, #32]
90023a62:	4628      	mov	r0, r5
90023a64:	47b0      	blx	r6
90023a66:	1c43      	adds	r3, r0, #1
90023a68:	89a3      	ldrh	r3, [r4, #12]
90023a6a:	d106      	bne.n	90023a7a <__sflush_r+0x62>
90023a6c:	6829      	ldr	r1, [r5, #0]
90023a6e:	291d      	cmp	r1, #29
90023a70:	d82b      	bhi.n	90023aca <__sflush_r+0xb2>
90023a72:	4a2a      	ldr	r2, [pc, #168]	@ (90023b1c <__sflush_r+0x104>)
90023a74:	410a      	asrs	r2, r1
90023a76:	07d6      	lsls	r6, r2, #31
90023a78:	d427      	bmi.n	90023aca <__sflush_r+0xb2>
90023a7a:	2200      	movs	r2, #0
90023a7c:	6062      	str	r2, [r4, #4]
90023a7e:	04d9      	lsls	r1, r3, #19
90023a80:	6922      	ldr	r2, [r4, #16]
90023a82:	6022      	str	r2, [r4, #0]
90023a84:	d504      	bpl.n	90023a90 <__sflush_r+0x78>
90023a86:	1c42      	adds	r2, r0, #1
90023a88:	d101      	bne.n	90023a8e <__sflush_r+0x76>
90023a8a:	682b      	ldr	r3, [r5, #0]
90023a8c:	b903      	cbnz	r3, 90023a90 <__sflush_r+0x78>
90023a8e:	6560      	str	r0, [r4, #84]	@ 0x54
90023a90:	6b61      	ldr	r1, [r4, #52]	@ 0x34
90023a92:	602f      	str	r7, [r5, #0]
90023a94:	b1b9      	cbz	r1, 90023ac6 <__sflush_r+0xae>
90023a96:	f104 0344 	add.w	r3, r4, #68	@ 0x44
90023a9a:	4299      	cmp	r1, r3
90023a9c:	d002      	beq.n	90023aa4 <__sflush_r+0x8c>
90023a9e:	4628      	mov	r0, r5
90023aa0:	f7ff fca0 	bl	900233e4 <_free_r>
90023aa4:	2300      	movs	r3, #0
90023aa6:	6363      	str	r3, [r4, #52]	@ 0x34
90023aa8:	e00d      	b.n	90023ac6 <__sflush_r+0xae>
90023aaa:	2301      	movs	r3, #1
90023aac:	4628      	mov	r0, r5
90023aae:	47b0      	blx	r6
90023ab0:	4602      	mov	r2, r0
90023ab2:	1c50      	adds	r0, r2, #1
90023ab4:	d1c9      	bne.n	90023a4a <__sflush_r+0x32>
90023ab6:	682b      	ldr	r3, [r5, #0]
90023ab8:	2b00      	cmp	r3, #0
90023aba:	d0c6      	beq.n	90023a4a <__sflush_r+0x32>
90023abc:	2b1d      	cmp	r3, #29
90023abe:	d001      	beq.n	90023ac4 <__sflush_r+0xac>
90023ac0:	2b16      	cmp	r3, #22
90023ac2:	d11e      	bne.n	90023b02 <__sflush_r+0xea>
90023ac4:	602f      	str	r7, [r5, #0]
90023ac6:	2000      	movs	r0, #0
90023ac8:	e022      	b.n	90023b10 <__sflush_r+0xf8>
90023aca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
90023ace:	b21b      	sxth	r3, r3
90023ad0:	e01b      	b.n	90023b0a <__sflush_r+0xf2>
90023ad2:	690f      	ldr	r7, [r1, #16]
90023ad4:	2f00      	cmp	r7, #0
90023ad6:	d0f6      	beq.n	90023ac6 <__sflush_r+0xae>
90023ad8:	0793      	lsls	r3, r2, #30
90023ada:	680e      	ldr	r6, [r1, #0]
90023adc:	bf08      	it	eq
90023ade:	694b      	ldreq	r3, [r1, #20]
90023ae0:	600f      	str	r7, [r1, #0]
90023ae2:	bf18      	it	ne
90023ae4:	2300      	movne	r3, #0
90023ae6:	eba6 0807 	sub.w	r8, r6, r7
90023aea:	608b      	str	r3, [r1, #8]
90023aec:	f1b8 0f00 	cmp.w	r8, #0
90023af0:	dde9      	ble.n	90023ac6 <__sflush_r+0xae>
90023af2:	6a21      	ldr	r1, [r4, #32]
90023af4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
90023af6:	4643      	mov	r3, r8
90023af8:	463a      	mov	r2, r7
90023afa:	4628      	mov	r0, r5
90023afc:	47b0      	blx	r6
90023afe:	2800      	cmp	r0, #0
90023b00:	dc08      	bgt.n	90023b14 <__sflush_r+0xfc>
90023b02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
90023b06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
90023b0a:	81a3      	strh	r3, [r4, #12]
90023b0c:	f04f 30ff 	mov.w	r0, #4294967295
90023b10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90023b14:	4407      	add	r7, r0
90023b16:	eba8 0800 	sub.w	r8, r8, r0
90023b1a:	e7e7      	b.n	90023aec <__sflush_r+0xd4>
90023b1c:	dfbffffe 	.word	0xdfbffffe

90023b20 <_fflush_r>:
90023b20:	b538      	push	{r3, r4, r5, lr}
90023b22:	690b      	ldr	r3, [r1, #16]
90023b24:	4605      	mov	r5, r0
90023b26:	460c      	mov	r4, r1
90023b28:	b913      	cbnz	r3, 90023b30 <_fflush_r+0x10>
90023b2a:	2500      	movs	r5, #0
90023b2c:	4628      	mov	r0, r5
90023b2e:	bd38      	pop	{r3, r4, r5, pc}
90023b30:	b118      	cbz	r0, 90023b3a <_fflush_r+0x1a>
90023b32:	6a03      	ldr	r3, [r0, #32]
90023b34:	b90b      	cbnz	r3, 90023b3a <_fflush_r+0x1a>
90023b36:	f7ff f9e9 	bl	90022f0c <__sinit>
90023b3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
90023b3e:	2b00      	cmp	r3, #0
90023b40:	d0f3      	beq.n	90023b2a <_fflush_r+0xa>
90023b42:	6e62      	ldr	r2, [r4, #100]	@ 0x64
90023b44:	07d0      	lsls	r0, r2, #31
90023b46:	d404      	bmi.n	90023b52 <_fflush_r+0x32>
90023b48:	0599      	lsls	r1, r3, #22
90023b4a:	d402      	bmi.n	90023b52 <_fflush_r+0x32>
90023b4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
90023b4e:	f7ff fbdc 	bl	9002330a <__retarget_lock_acquire_recursive>
90023b52:	4628      	mov	r0, r5
90023b54:	4621      	mov	r1, r4
90023b56:	f7ff ff5f 	bl	90023a18 <__sflush_r>
90023b5a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
90023b5c:	07da      	lsls	r2, r3, #31
90023b5e:	4605      	mov	r5, r0
90023b60:	d4e4      	bmi.n	90023b2c <_fflush_r+0xc>
90023b62:	89a3      	ldrh	r3, [r4, #12]
90023b64:	059b      	lsls	r3, r3, #22
90023b66:	d4e1      	bmi.n	90023b2c <_fflush_r+0xc>
90023b68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
90023b6a:	f7ff fbcf 	bl	9002330c <__retarget_lock_release_recursive>
90023b6e:	e7dd      	b.n	90023b2c <_fflush_r+0xc>

90023b70 <__swhatbuf_r>:
90023b70:	b570      	push	{r4, r5, r6, lr}
90023b72:	460c      	mov	r4, r1
90023b74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
90023b78:	2900      	cmp	r1, #0
90023b7a:	b096      	sub	sp, #88	@ 0x58
90023b7c:	4615      	mov	r5, r2
90023b7e:	461e      	mov	r6, r3
90023b80:	da0d      	bge.n	90023b9e <__swhatbuf_r+0x2e>
90023b82:	89a3      	ldrh	r3, [r4, #12]
90023b84:	f013 0f80 	tst.w	r3, #128	@ 0x80
90023b88:	f04f 0100 	mov.w	r1, #0
90023b8c:	bf14      	ite	ne
90023b8e:	2340      	movne	r3, #64	@ 0x40
90023b90:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
90023b94:	2000      	movs	r0, #0
90023b96:	6031      	str	r1, [r6, #0]
90023b98:	602b      	str	r3, [r5, #0]
90023b9a:	b016      	add	sp, #88	@ 0x58
90023b9c:	bd70      	pop	{r4, r5, r6, pc}
90023b9e:	466a      	mov	r2, sp
90023ba0:	f000 f848 	bl	90023c34 <_fstat_r>
90023ba4:	2800      	cmp	r0, #0
90023ba6:	dbec      	blt.n	90023b82 <__swhatbuf_r+0x12>
90023ba8:	9901      	ldr	r1, [sp, #4]
90023baa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
90023bae:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
90023bb2:	4259      	negs	r1, r3
90023bb4:	4159      	adcs	r1, r3
90023bb6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
90023bba:	e7eb      	b.n	90023b94 <__swhatbuf_r+0x24>

90023bbc <__smakebuf_r>:
90023bbc:	898b      	ldrh	r3, [r1, #12]
90023bbe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
90023bc0:	079d      	lsls	r5, r3, #30
90023bc2:	4606      	mov	r6, r0
90023bc4:	460c      	mov	r4, r1
90023bc6:	d507      	bpl.n	90023bd8 <__smakebuf_r+0x1c>
90023bc8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
90023bcc:	6023      	str	r3, [r4, #0]
90023bce:	6123      	str	r3, [r4, #16]
90023bd0:	2301      	movs	r3, #1
90023bd2:	6163      	str	r3, [r4, #20]
90023bd4:	b003      	add	sp, #12
90023bd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
90023bd8:	ab01      	add	r3, sp, #4
90023bda:	466a      	mov	r2, sp
90023bdc:	f7ff ffc8 	bl	90023b70 <__swhatbuf_r>
90023be0:	9f00      	ldr	r7, [sp, #0]
90023be2:	4605      	mov	r5, r0
90023be4:	4639      	mov	r1, r7
90023be6:	4630      	mov	r0, r6
90023be8:	f7ff f86a 	bl	90022cc0 <_malloc_r>
90023bec:	b948      	cbnz	r0, 90023c02 <__smakebuf_r+0x46>
90023bee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
90023bf2:	059a      	lsls	r2, r3, #22
90023bf4:	d4ee      	bmi.n	90023bd4 <__smakebuf_r+0x18>
90023bf6:	f023 0303 	bic.w	r3, r3, #3
90023bfa:	f043 0302 	orr.w	r3, r3, #2
90023bfe:	81a3      	strh	r3, [r4, #12]
90023c00:	e7e2      	b.n	90023bc8 <__smakebuf_r+0xc>
90023c02:	89a3      	ldrh	r3, [r4, #12]
90023c04:	6020      	str	r0, [r4, #0]
90023c06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
90023c0a:	81a3      	strh	r3, [r4, #12]
90023c0c:	9b01      	ldr	r3, [sp, #4]
90023c0e:	e9c4 0704 	strd	r0, r7, [r4, #16]
90023c12:	b15b      	cbz	r3, 90023c2c <__smakebuf_r+0x70>
90023c14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
90023c18:	4630      	mov	r0, r6
90023c1a:	f000 f81d 	bl	90023c58 <_isatty_r>
90023c1e:	b128      	cbz	r0, 90023c2c <__smakebuf_r+0x70>
90023c20:	89a3      	ldrh	r3, [r4, #12]
90023c22:	f023 0303 	bic.w	r3, r3, #3
90023c26:	f043 0301 	orr.w	r3, r3, #1
90023c2a:	81a3      	strh	r3, [r4, #12]
90023c2c:	89a3      	ldrh	r3, [r4, #12]
90023c2e:	431d      	orrs	r5, r3
90023c30:	81a5      	strh	r5, [r4, #12]
90023c32:	e7cf      	b.n	90023bd4 <__smakebuf_r+0x18>

90023c34 <_fstat_r>:
90023c34:	b538      	push	{r3, r4, r5, lr}
90023c36:	4d07      	ldr	r5, [pc, #28]	@ (90023c54 <_fstat_r+0x20>)
90023c38:	2300      	movs	r3, #0
90023c3a:	4604      	mov	r4, r0
90023c3c:	4608      	mov	r0, r1
90023c3e:	4611      	mov	r1, r2
90023c40:	602b      	str	r3, [r5, #0]
90023c42:	f7dd fa9d 	bl	90001180 <_fstat>
90023c46:	1c43      	adds	r3, r0, #1
90023c48:	d102      	bne.n	90023c50 <_fstat_r+0x1c>
90023c4a:	682b      	ldr	r3, [r5, #0]
90023c4c:	b103      	cbz	r3, 90023c50 <_fstat_r+0x1c>
90023c4e:	6023      	str	r3, [r4, #0]
90023c50:	bd38      	pop	{r3, r4, r5, pc}
90023c52:	bf00      	nop
90023c54:	2402654c 	.word	0x2402654c

90023c58 <_isatty_r>:
90023c58:	b538      	push	{r3, r4, r5, lr}
90023c5a:	4d06      	ldr	r5, [pc, #24]	@ (90023c74 <_isatty_r+0x1c>)
90023c5c:	2300      	movs	r3, #0
90023c5e:	4604      	mov	r4, r0
90023c60:	4608      	mov	r0, r1
90023c62:	602b      	str	r3, [r5, #0]
90023c64:	f7dd fa92 	bl	9000118c <_isatty>
90023c68:	1c43      	adds	r3, r0, #1
90023c6a:	d102      	bne.n	90023c72 <_isatty_r+0x1a>
90023c6c:	682b      	ldr	r3, [r5, #0]
90023c6e:	b103      	cbz	r3, 90023c72 <_isatty_r+0x1a>
90023c70:	6023      	str	r3, [r4, #0]
90023c72:	bd38      	pop	{r3, r4, r5, pc}
90023c74:	2402654c 	.word	0x2402654c

90023c78 <_init>:
90023c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90023c7a:	bf00      	nop
90023c7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
90023c7e:	bc08      	pop	{r3}
90023c80:	469e      	mov	lr, r3
90023c82:	4770      	bx	lr

90023c84 <_fini>:
90023c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90023c86:	bf00      	nop
90023c88:	bcf8      	pop	{r3, r4, r5, r6, r7}
90023c8a:	bc08      	pop	{r3}
90023c8c:	469e      	mov	lr, r3
90023c8e:	4770      	bx	lr
